msgid ""
msgstr ""
"Project-Id-Version: World of Z2O-K7E\n"
"POT-Creation-Date: 2023-10-18T17:39:23+08:00\n"
"PO-Revision-Date: 2023-10-18 17:42+0800\n"
"Last-Translator: Soda <soda@z>\n"
"Language-Team: English\n"
"Language: en\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

#: src/SUMMARY.md:3
msgid "README"
msgstr "README"

#: src/SUMMARY.md:7
msgid "ZKP 新手村入门攻略"
msgstr "ZKP newbiee"

#: src/SUMMARY.md:11 src/zkp-intro/toc.md:3
msgid "探索零知识证明系列"
msgstr "explore zkp series"

#: src/SUMMARY.md:12
msgid "（一）初识「零知识」与「证明」"
msgstr "（一）初识「零知识」与「证明」"

#: src/SUMMARY.md:13
msgid "（二）理解「模拟」"
msgstr "（二）理解「模拟」"

#: src/SUMMARY.md:14
msgid "（三）寻找「知识」"
msgstr "（三）寻找「知识」"

#: src/SUMMARY.md:15
msgid "（四）随机「挑战」"
msgstr "（四）随机「挑战」"

#: src/SUMMARY.md:16
msgid "（五）埋藏「秘密」"
msgstr "（五）埋藏「秘密」"

#: src/SUMMARY.md:20
msgid "理解Plonk系列"
msgstr "理解Plonk系列"

#: src/SUMMARY.md:21
msgid "1-Plonkish Arithmetization"
msgstr "1-Plonkish Arithmetization"

#: src/SUMMARY.md:22
msgid "2-多项式编码"
msgstr "2-多项式编码"

#: src/SUMMARY.md:23
msgid "3-置换证明"
msgstr "3-置换证明"

#: src/SUMMARY.md:24
msgid "4-算术约束与拷贝约束"
msgstr "4-算术约束与拷贝约束"

#: src/SUMMARY.md:25
msgid "5-多项式承诺"
msgstr "5-多项式承诺"

#: src/SUMMARY.md:26
msgid "6-实现  Zero Knowledge"
msgstr "6-实现  Zero Knowledge"

#: src/SUMMARY.md:27
msgid "7-Lookup Gate"
msgstr "7-Lookup Gate"

#: src/SUMMARY.md:31 src/zk-snarks/toc.md:3
msgid "从零开始学习 zk-SNARK"
msgstr "从零开始学习 zk-SNARK"

#: src/SUMMARY.md:32
msgid "1-Polynomial-Interaction-and-Proof"
msgstr "1-Polynomial-Interaction-and-Proof"

#: src/SUMMARY.md:33
msgid "2-Non-interactivity&Distributed-Setup"
msgstr "2-Non-interactivity&Distributed-Setup"

#: src/SUMMARY.md:34
msgid "3-General-Purpose-Computation"
msgstr "3-General-Purpose-Computation"

#: src/SUMMARY.md:35
msgid "4-Construction-Properties.md"
msgstr "4-Construction-Properties.md"

#: src/SUMMARY.md:36
msgid "5-Pinocchio-Protocol"
msgstr "5-Pinocchio-Protocol"

#: src/SUMMARY.md:41
msgid "Halo2"
msgstr "Halo2"

#: src/SUMMARY.md:42
msgid "Chap-1"
msgstr "Chap-1"

#: src/SUMMARY.md:43
msgid "Chap-2 (editing...)"
msgstr "Chap-2 (editing...)"

#: src/SUMMARY.md:44
msgid "learning-halo2 (0xPARC)"
msgstr "learning-halo2 (0xPARC)"

#: src/SUMMARY.md:45
msgid "1-Simple Examples"
msgstr "1-Simple Examples"

#: src/SUMMARY.md:46
msgid "2-Fibonacci-example-1"
msgstr "2-Fibonacci-example-1"

#: src/SUMMARY.md:47
msgid "3-Fibonacci-example-2"
msgstr "3-Fibonacci-example-2"

#: src/SUMMARY.md:48
msgid "4-IsZero Check-example-3"
msgstr "4-IsZero Check-example-3"

#: src/SUMMARY.md:49 src/tmp/halo2/5-Range-check.md:3
msgid "5-Range check-example-1.md"
msgstr "5-Range check-example-1.md"

#: src/SUMMARY.md:50
msgid "6-Range Check (code explanation)"
msgstr "6-Range Check (code explanation)"

#: src/SUMMARY.md:51
msgid "7-Range-Check-Lookup-example-2)"
msgstr "7-Range-Check-Lookup-example-2)"

#: src/SUMMARY.md:52
msgid "8-Range-Check-Lookup-example-3)"
msgstr "8-Range-Check-Lookup-example-3)"

#: src/SUMMARY.md:53
msgid "9-Range-Check-Decompose)"
msgstr "9-Range-Check-Decompose)"

#: src/SUMMARY.md:54
msgid "halo2-learning-materials"
msgstr "halo2-learning-materials"

#: src/SUMMARY.md:55
msgid "ZKP Apps with halo2"
msgstr "ZKP Apps with halo2"

#: src/SUMMARY.md:56
msgid "Zordle"
msgstr "Zordle"

#: src/SUMMARY.md:57
msgid "Hammster"
msgstr "Hammster"

#: src/SUMMARY.md:63 src/zk-everything/toc.md:3
msgid "zk-everything"
msgstr "zk-everything"

#: src/SUMMARY.md:64
msgid "BabySNARK tutorial"
msgstr "BabySNARK tutorial"

#: src/SUMMARY.md:65 src/zk-everything/zk-learning-miles/KZG.md:4
msgid "KZG"
msgstr "KZG"

#: src/SUMMARY.md:66
msgid "Lecture1:Overview about Zeroknowledge"
msgstr "Lecture1:Overview about Zeroknowledge"

#: src/SUMMARY.md:67 src/zk-everything/zk-learning-miles/Lecture2:Introduction
#: to Modern SNARKs.md:4
msgid "Lecture2:Introduction to Modern SNARKs"
msgstr "Lecture2:Introduction to Modern SNARKs"

#: src/SUMMARY.md:68
msgid "Lecture12:ZKEVM"
msgstr "Lecture12:ZKEVM"

#: src/SUMMARY.md:69
msgid "Lecture16:Hardware acceleration"
msgstr "Lecture16:Hardware acceleration"

#: src/SUMMARY.md:70
msgid "Spartan preliminary: GKR with ZK Argument"
msgstr "Spartan preliminary: GKR with ZK Argument"

#: src/SUMMARY.md:71
msgid "Spartan preliminary: Hyrax"
msgstr "Spartan preliminary: Hyrax"

#: src/SUMMARY.md:72
msgid "Spartan In Depth"
msgstr "Spartan In Depth"

#: src/SUMMARY.md:73
msgid "SuperNova"
msgstr "SuperNova"

#: src/SUMMARY.md:77 src/public goods/toc.md:3
msgid "ZKP Public Goods"
msgstr "ZKP Public Goods"

#: src/SUMMARY.md:78
msgid "ch2"
msgstr "ch2"

#: src/SUMMARY.md:79
msgid "ch4-Proving System"
msgstr "ch4-Proving System"

#: src/SUMMARY.md:80
msgid "ch5-plonk-intro"
msgstr "ch5-plonk-intro"

#: src/SUMMARY.md:84
msgid "ZK Materials"
msgstr "ZK Materials"

#: src/SUMMARY.md:88 src/exp/toc.md:3
msgid "经验心得"
msgstr "经验心得"

#: src/SUMMARY.md:89 src/exp/guoyu.md:3
msgid "郭宇：ZK 技术的学习心得和经验分享"
msgstr "郭宇：ZK 技术的学习心得和经验分享"

#: src/SUMMARY.md:90 src/exp/freeyao.md:3
msgid "对话姚翔：解读零知识证明的前世今生"
msgstr "对话姚翔：解读零知识证明的前世今生"

#: src/SUMMARY.md:91 src/https://zhuanlan.zhihu.com/p/268305208:3
msgid "邓燚：零知识，模拟与归约（一个个人化的视角）"
msgstr "邓燚：零知识，模拟与归约（一个个人化的视角）"

#: src/SUMMARY.md:95 src/zkp-space/toc.md:3
msgid "ZKP Space"
msgstr "ZKP Space"

#: src/SUMMARY.md:96
msgid "2023.10.12: 聊聊 ZKP Coprocessor"
msgstr "2023.10.12: 聊聊 ZKP Coprocessor"

#: src/index.md:5
msgid "**Welcome to the**"
msgstr "**Welcome to the**"

#: src/index.md:7
msgid "![](logo.png)"
msgstr "![](logo.png)"

#: src/index.md:11
msgid "**World!**"
msgstr "**World!**"

#: src/index.md:21
msgid "[github](https://github.com/zkp-co-learning) of "
msgstr "[github](https://github.com/zkp-co-learning) of "

#: src/index.md:21 src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:26
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:30
#: src/zk-snarks/4-Construction-Properties.md:306
#: src/zk-snarks/4-Construction-Properties.md:307
#: src/zk-snarks/4-Construction-Properties.md:308
#: src/zk-snarks/4-Construction-Properties.md:313
#: src/zk-snarks/4-Construction-Properties.md:345
#: src/zk-snarks/4-Construction-Properties.md:349
#: src/zk-snarks/4-Construction-Properties.md:357
#: src/zk-snarks/4-Construction-Properties.md:381
#: src/zk-snarks/4-Construction-Properties.md:384
#: src/zk-snarks/4-Construction-Properties.md:391
#: src/zk-snarks/4-Construction-Properties.md:393
#: src/zk-snarks/4-Construction-Properties.md:394
#: src/zk-snarks/4-Construction-Properties.md:395
#: src/zk-snarks/4-Construction-Properties.md:397
#: src/zk-snarks/4-Construction-Properties.md:405
#: src/zk-snarks/4-Construction-Properties.md:428
#: src/zk-snarks/4-Construction-Properties.md:434
#: src/zk-snarks/4-Construction-Properties.md:443
#: src/zk-snarks/5-Pinocchio-Protocol.md:94
#: src/zk-snarks/5-Pinocchio-Protocol.md:106
#: src/zk-snarks/5-Pinocchio-Protocol.md:207
#: src/zk-snarks/5-Pinocchio-Protocol.md:209
#: src/zk-snarks/5-Pinocchio-Protocol.md:212
#: src/zk-everything/zk-learning-miles/KZG.md:262
#: src/zk-everything/zk-learning-miles/KZG.md:317
#: src/zk-everything/zk-learning-miles/KZG.md:318
#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:407 SNARKs.md:408 SNARKs.md:410
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:390
#: src/zk-everything/zk-everything-joe/Hyrax.md:122
#: src/zk-everything/zk-everything-joe/Hyrax.md:195
#: src/zk-everything/zk-everything-joe/Hyrax.md:201
#: src/zk-everything/zk-everything-joe/Hyrax.md:203
#: src/zk-everything/zk-everything-joe/Hyrax.md:208
#: src/zk-everything/zk-everything-joe/Hyrax.md:223
#: src/zk-everything/zk-everything-joe/Hyrax.md:228
msgid "Z"
msgstr "Z"

#: src/index.md:21 src/plonk-intro-cn/plonk-arithmetization.md:20
#: src/plonk-intro-cn/plonk-arithmetization.md:22
#: src/plonk-intro-cn/plonk-arithmetization.md:35
#: src/plonk-intro-cn/plonk-arithmetization.md:37
#: src/plonk-intro-cn/plonk-arithmetization.md:41
#: src/plonk-intro-cn/plonk-arithmetization.md:43
#: src/plonk-intro-cn/plonk-arithmetization.md:47
#: src/plonk-intro-cn/plonk-arithmetization.md:51
#: src/plonk-intro-cn/plonk-arithmetization.md:55
#: src/plonk-intro-cn/plonk-arithmetization.md:57
#: src/plonk-intro-cn/plonk-arithmetization.md:87
#: src/plonk-intro-cn/plonk-arithmetization.md:91
#: src/plonk-intro-cn/plonk-arithmetization.md:93
#: src/plonk-intro-cn/plonk-arithmetization.md:101
#: src/plonk-intro-cn/plonk-arithmetization.md:103
#: src/plonk-intro-cn/plonk-arithmetization.md:105
#: src/plonk-intro-cn/plonk-arithmetization.md:109
#: src/plonk-intro-cn/plonk-arithmetization.md:115
#: src/plonk-intro-cn/plonk-arithmetization.md:123
#: src/plonk-intro-cn/plonk-arithmetization.md:135
#: src/plonk-intro-cn/plonk-arithmetization.md:141
#: src/plonk-intro-cn/plonk-arithmetization.md:147
#: src/plonk-intro-cn/plonk-arithmetization.md:151
#: src/plonk-intro-cn/plonk-arithmetization.md:159
#: src/plonk-intro-cn/plonk-arithmetization.md:163
#: src/plonk-intro-cn/plonk-arithmetization.md:177
#: src/plonk-intro-cn/plonk-arithmetization.md:179
#: src/plonk-intro-cn/plonk-arithmetization.md:187
#: src/plonk-intro-cn/plonk-arithmetization.md:189
#: src/plonk-intro-cn/plonk-arithmetization.md:191
#: src/plonk-intro-cn/plonk-arithmetization.md:197
#: src/plonk-intro-cn/plonk-arithmetization.md:199
#: src/plonk-intro-cn/plonk-arithmetization.md:201
#: src/plonk-intro-cn/plonk-arithmetization.md:203
#: src/plonk-intro-cn/plonk-arithmetization.md:205
#: src/plonk-intro-cn/plonk-arithmetization.md:209
#: src/plonk-intro-cn/plonk-arithmetization.md:227
#: src/plonk-intro-cn/plonk-arithmetization.md:231
#: src/plonk-intro-cn/plonk-arithmetization.md:237
#: src/plonk-intro-cn/plonk-arithmetization.md:245
#: src/plonk-intro-cn/plonk-arithmetization.md:247
#: src/plonk-intro-cn/plonk-lagrange-basis.md:18
#: src/plonk-intro-cn/plonk-lagrange-basis.md:28
#: src/plonk-intro-cn/plonk-lagrange-basis.md:36
#: src/plonk-intro-cn/plonk-lagrange-basis.md:42
#: src/plonk-intro-cn/plonk-lagrange-basis.md:60
#: src/plonk-intro-cn/plonk-lagrange-basis.md:62
#: src/plonk-intro-cn/plonk-lagrange-basis.md:78
#: src/plonk-intro-cn/plonk-lagrange-basis.md:80
#: src/plonk-intro-cn/plonk-lagrange-basis.md:82
#: src/plonk-intro-cn/plonk-lagrange-basis.md:83
#: src/plonk-intro-cn/plonk-lagrange-basis.md:89
#: src/plonk-intro-cn/plonk-lagrange-basis.md:91
#: src/plonk-intro-cn/plonk-lagrange-basis.md:93
#: src/plonk-intro-cn/plonk-lagrange-basis.md:97
#: src/plonk-intro-cn/plonk-lagrange-basis.md:105
#: src/plonk-intro-cn/plonk-lagrange-basis.md:119
#: src/plonk-intro-cn/plonk-lagrange-basis.md:121
#: src/plonk-intro-cn/plonk-lagrange-basis.md:129
#: src/plonk-intro-cn/plonk-lagrange-basis.md:137
#: src/plonk-intro-cn/plonk-lagrange-basis.md:139
#: src/plonk-intro-cn/plonk-lagrange-basis.md:143
#: src/plonk-intro-cn/plonk-lagrange-basis.md:147
#: src/plonk-intro-cn/plonk-lagrange-basis.md:161
#: src/plonk-intro-cn/plonk-lagrange-basis.md:170
#: src/plonk-intro-cn/plonk-lagrange-basis.md:172
#: src/plonk-intro-cn/plonk-permutation.md:9
#: src/plonk-intro-cn/plonk-permutation.md:11
#: src/plonk-intro-cn/plonk-permutation.md:13
#: src/plonk-intro-cn/plonk-permutation.md:23
#: src/plonk-intro-cn/plonk-permutation.md:35
#: src/plonk-intro-cn/plonk-permutation.md:36
#: src/plonk-intro-cn/plonk-permutation.md:38
#: src/plonk-intro-cn/plonk-permutation.md:48
#: src/plonk-intro-cn/plonk-permutation.md:58
#: src/plonk-intro-cn/plonk-permutation.md:88
#: src/plonk-intro-cn/plonk-permutation.md:106
#: src/plonk-intro-cn/plonk-permutation.md:108
#: src/plonk-intro-cn/plonk-permutation.md:112
#: src/plonk-intro-cn/plonk-permutation.md:140
#: src/plonk-intro-cn/plonk-permutation.md:144
#: src/plonk-intro-cn/plonk-permutation.md:148
#: src/plonk-intro-cn/plonk-constraints.md:35
#: src/plonk-intro-cn/plonk-constraints.md:37
#: src/plonk-intro-cn/plonk-constraints.md:39
#: src/plonk-intro-cn/plonk-constraints.md:41
#: src/plonk-intro-cn/plonk-constraints.md:45
#: src/plonk-intro-cn/plonk-constraints.md:47
#: src/plonk-intro-cn/plonk-constraints.md:57
#: src/plonk-intro-cn/plonk-constraints.md:59
#: src/plonk-intro-cn/plonk-constraints.md:63
#: src/plonk-intro-cn/plonk-constraints.md:67
#: src/plonk-intro-cn/plonk-constraints.md:93
#: src/plonk-intro-cn/plonk-constraints.md:99
#: src/plonk-intro-cn/plonk-constraints.md:116
#: src/plonk-intro-cn/plonk-constraints.md:120
#: src/plonk-intro-cn/plonk-constraints.md:141
#: src/plonk-intro-cn/plonk-constraints.md:143
#: src/plonk-intro-cn/plonk-constraints.md:145
#: src/plonk-intro-cn/plonk-constraints.md:149
#: src/plonk-intro-cn/plonk-constraints.md:153
#: src/plonk-intro-cn/plonk-constraints.md:155
#: src/plonk-intro-cn/plonk-constraints.md:175
#: src/plonk-intro-cn/plonk-constraints.md:191
#: src/plonk-intro-cn/plonk-constraints.md:192
#: src/plonk-intro-cn/plonk-constraints.md:199
#: src/plonk-intro-cn/plonk-polycom.md:21
#: src/plonk-intro-cn/plonk-polycom.md:25
#: src/plonk-intro-cn/plonk-polycom.md:29
#: src/plonk-intro-cn/plonk-polycom.md:33
#: src/plonk-intro-cn/plonk-polycom.md:41
#: src/plonk-intro-cn/plonk-polycom.md:47
#: src/plonk-intro-cn/plonk-polycom.md:49
#: src/plonk-intro-cn/plonk-polycom.md:57
#: src/plonk-intro-cn/plonk-polycom.md:59
#: src/plonk-intro-cn/plonk-polycom.md:73
#: src/plonk-intro-cn/plonk-polycom.md:75
#: src/plonk-intro-cn/plonk-polycom.md:77
#: src/plonk-intro-cn/plonk-polycom.md:81
#: src/plonk-intro-cn/plonk-polycom.md:87
#: src/plonk-intro-cn/plonk-polycom.md:89
#: src/plonk-intro-cn/plonk-polycom.md:91
#: src/plonk-intro-cn/plonk-polycom.md:93
#: src/plonk-intro-cn/plonk-polycom.md:97
#: src/plonk-intro-cn/plonk-polycom.md:101
#: src/plonk-intro-cn/plonk-polycom.md:103
#: src/plonk-intro-cn/plonk-polycom.md:105
#: src/plonk-intro-cn/plonk-polycom.md:109
#: src/plonk-intro-cn/plonk-polycom.md:113
#: src/plonk-intro-cn/plonk-polycom.md:124
#: src/plonk-intro-cn/plonk-polycom.md:126
#: src/plonk-intro-cn/plonk-polycom.md:128
#: src/plonk-intro-cn/plonk-polycom.md:132
#: src/plonk-intro-cn/plonk-polycom.md:134
#: src/plonk-intro-cn/plonk-polycom.md:136
#: src/plonk-intro-cn/plonk-polycom.md:155
#: src/plonk-intro-cn/plonk-polycom.md:157
#: src/plonk-intro-cn/plonk-polycom.md:167
#: src/plonk-intro-cn/plonk-polycom.md:169
#: src/plonk-intro-cn/plonk-polycom.md:171
#: src/plonk-intro-cn/plonk-polycom.md:175
#: src/plonk-intro-cn/plonk-polycom.md:187
#: src/plonk-intro-cn/plonk-polycom.md:193
#: src/plonk-intro-cn/plonk-polycom.md:197
#: src/plonk-intro-cn/plonk-polycom.md:199
#: src/plonk-intro-cn/plonk-polycom.md:201
#: src/plonk-intro-cn/plonk-polycom.md:205
#: src/plonk-intro-cn/plonk-polycom.md:209
#: src/plonk-intro-cn/plonk-polycom.md:211
#: src/plonk-intro-cn/plonk-polycom.md:213
#: src/plonk-intro-cn/plonk-polycom.md:217
#: src/plonk-intro-cn/plonk-polycom.md:221
#: src/plonk-intro-cn/plonk-polycom.md:225
#: src/plonk-intro-cn/plonk-polycom.md:229
#: src/plonk-intro-cn/plonk-randomizing.md:33
#: src/plonk-intro-cn/plonk-randomizing.md:55
#: src/plonk-intro-cn/plonk-randomizing.md:57
#: src/plonk-intro-cn/plonk-randomizing.md:61
#: src/plonk-intro-cn/plonk-randomizing.md:69
#: src/plonk-intro-cn/plonk-randomizing.md:73
#: src/plonk-intro-cn/plonk-randomizing.md:77
#: src/plonk-intro-cn/plonk-randomizing.md:90
#: src/plonk-intro-cn/plonk-randomizing.md:92
#: src/plonk-intro-cn/plonk-randomizing.md:93
#: src/plonk-intro-cn/plonk-randomizing.md:97
#: src/plonk-intro-cn/plonk-randomizing.md:101
#: src/plonk-intro-cn/plonk-randomizing.md:103
#: src/plonk-intro-cn/plonk-randomizing.md:104
#: src/plonk-intro-cn/plonk-randomizing.md:106
#: src/plonk-intro-cn/plonk-randomizing.md:110
#: src/plonk-intro-cn/plonk-randomizing.md:112
#: src/plonk-intro-cn/plonk-randomizing.md:113
#: src/plonk-intro-cn/plonk-randomizing.md:115
#: src/plonk-intro-cn/plonk-randomizing.md:117
#: src/plonk-intro-cn/plonk-randomizing.md:119
#: src/plonk-intro-cn/plonk-randomizing.md:123
#: src/plonk-intro-cn/plonk-randomizing.md:125
#: src/plonk-intro-cn/plonk-randomizing.md:127
#: src/plonk-intro-cn/plonk-randomizing.md:129
#: src/plonk-intro-cn/plonk-randomizing.md:141
#: src/plonk-intro-cn/plonk-randomizing.md:159
#: src/plonk-intro-cn/plonk-lookup.md:17 src/plonk-intro-cn/plonk-lookup.md:27
#: src/plonk-intro-cn/plonk-lookup.md:41 src/plonk-intro-cn/plonk-lookup.md:43
#: src/plonk-intro-cn/plonk-lookup.md:47 src/plonk-intro-cn/plonk-lookup.md:51
#: src/plonk-intro-cn/plonk-lookup.md:67 src/plonk-intro-cn/plonk-lookup.md:83
#: src/plonk-intro-cn/plonk-lookup.md:87 src/plonk-intro-cn/plonk-lookup.md:93
#: src/plonk-intro-cn/plonk-lookup.md:101
#: src/plonk-intro-cn/plonk-lookup.md:111
#: src/plonk-intro-cn/plonk-lookup.md:121
#: src/plonk-intro-cn/plonk-lookup.md:123
#: src/plonk-intro-cn/plonk-lookup.md:129
#: src/plonk-intro-cn/plonk-lookup.md:133
#: src/plonk-intro-cn/plonk-lookup.md:165
#: src/plonk-intro-cn/plonk-lookup.md:167
#: src/plonk-intro-cn/plonk-lookup.md:169
#: src/plonk-intro-cn/plonk-lookup.md:175
#: src/plonk-intro-cn/plonk-lookup.md:192
#: src/plonk-intro-cn/plonk-lookup.md:210
#: src/plonk-intro-cn/plonk-lookup.md:212
#: src/plonk-intro-cn/plonk-lookup.md:216
#: src/plonk-intro-cn/plonk-lookup.md:218
#: src/plonk-intro-cn/plonk-lookup.md:220
#: src/plonk-intro-cn/plonk-lookup.md:228
#: src/plonk-intro-cn/plonk-lookup.md:244
#: src/plonk-intro-cn/plonk-lookup.md:247
#: src/plonk-intro-cn/plonk-lookup.md:251
#: src/plonk-intro-cn/plonk-lookup.md:265
#: src/plonk-intro-cn/plonk-lookup.md:273
#: src/plonk-intro-cn/plonk-lookup.md:275
#: src/plonk-intro-cn/plonk-lookup.md:281
#: src/plonk-intro-cn/plonk-lookup.md:285
#: src/plonk-intro-cn/plonk-lookup.md:289
#: src/plonk-intro-cn/plonk-lookup.md:297
#: src/plonk-intro-cn/plonk-lookup.md:304
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:96
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:106
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:111
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:112
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:114
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:116
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:148
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:150
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:186
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:190
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:194
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:254
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:271
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:272
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:308
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:316
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:318
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:347
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:349
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:350
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:88
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:224
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:229
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:231
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:232
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:239
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:258
#: src/zk-snarks/3-General-Purpose-Computation.md:41
#: src/zk-snarks/3-General-Purpose-Computation.md:42
#: src/zk-snarks/3-General-Purpose-Computation.md:72
#: src/zk-snarks/3-General-Purpose-Computation.md:74
#: src/zk-snarks/3-General-Purpose-Computation.md:75
#: src/zk-snarks/3-General-Purpose-Computation.md:79
#: src/zk-snarks/3-General-Purpose-Computation.md:83
#: src/zk-snarks/3-General-Purpose-Computation.md:92
#: src/zk-snarks/3-General-Purpose-Computation.md:122
#: src/zk-snarks/3-General-Purpose-Computation.md:127
#: src/zk-snarks/3-General-Purpose-Computation.md:141
#: src/zk-snarks/3-General-Purpose-Computation.md:143
#: src/zk-snarks/3-General-Purpose-Computation.md:149
#: src/zk-snarks/3-General-Purpose-Computation.md:157
#: src/zk-snarks/3-General-Purpose-Computation.md:159
#: src/zk-snarks/3-General-Purpose-Computation.md:171
#: src/zk-snarks/3-General-Purpose-Computation.md:196
#: src/zk-snarks/3-General-Purpose-Computation.md:213
#: src/zk-snarks/3-General-Purpose-Computation.md:214
#: src/zk-snarks/3-General-Purpose-Computation.md:215
#: src/zk-snarks/3-General-Purpose-Computation.md:216
#: src/zk-snarks/3-General-Purpose-Computation.md:220
#: src/zk-snarks/3-General-Purpose-Computation.md:237
#: src/zk-snarks/3-General-Purpose-Computation.md:266
#: src/zk-snarks/3-General-Purpose-Computation.md:268
#: src/zk-snarks/3-General-Purpose-Computation.md:271
#: src/zk-snarks/3-General-Purpose-Computation.md:276
#: src/zk-snarks/3-General-Purpose-Computation.md:279
#: src/zk-snarks/3-General-Purpose-Computation.md:280
#: src/zk-snarks/3-General-Purpose-Computation.md:295
#: src/zk-snarks/3-General-Purpose-Computation.md:315
#: src/zk-snarks/3-General-Purpose-Computation.md:326
#: src/zk-snarks/3-General-Purpose-Computation.md:331
#: src/zk-snarks/4-Construction-Properties.md:29
#: src/zk-snarks/4-Construction-Properties.md:48
#: src/zk-snarks/4-Construction-Properties.md:63
#: src/zk-snarks/4-Construction-Properties.md:65
#: src/zk-snarks/4-Construction-Properties.md:127
#: src/zk-snarks/4-Construction-Properties.md:128
#: src/zk-snarks/4-Construction-Properties.md:133
#: src/zk-snarks/4-Construction-Properties.md:134
#: src/zk-snarks/4-Construction-Properties.md:135
#: src/zk-snarks/4-Construction-Properties.md:136
#: src/zk-snarks/4-Construction-Properties.md:137
#: src/zk-snarks/4-Construction-Properties.md:138
#: src/zk-snarks/4-Construction-Properties.md:139
#: src/zk-snarks/4-Construction-Properties.md:149
#: src/zk-snarks/4-Construction-Properties.md:155
#: src/zk-snarks/4-Construction-Properties.md:168
#: src/zk-snarks/4-Construction-Properties.md:170
#: src/zk-snarks/4-Construction-Properties.md:171
#: src/zk-snarks/4-Construction-Properties.md:172
#: src/zk-snarks/4-Construction-Properties.md:174
#: src/zk-snarks/4-Construction-Properties.md:178
#: src/zk-snarks/4-Construction-Properties.md:184
#: src/zk-snarks/4-Construction-Properties.md:195
#: src/zk-snarks/4-Construction-Properties.md:197
#: src/zk-snarks/4-Construction-Properties.md:279
#: src/zk-snarks/4-Construction-Properties.md:282
#: src/zk-snarks/4-Construction-Properties.md:284
#: src/zk-snarks/4-Construction-Properties.md:289
#: src/zk-snarks/4-Construction-Properties.md:290
#: src/zk-snarks/4-Construction-Properties.md:291
#: src/zk-snarks/4-Construction-Properties.md:331
#: src/zk-snarks/4-Construction-Properties.md:333
#: src/zk-snarks/4-Construction-Properties.md:371
#: src/zk-snarks/4-Construction-Properties.md:374
#: src/zk-snarks/4-Construction-Properties.md:375
#: src/zk-snarks/4-Construction-Properties.md:376
#: src/zk-snarks/4-Construction-Properties.md:377
#: src/zk-snarks/4-Construction-Properties.md:379
#: src/zk-snarks/4-Construction-Properties.md:381
#: src/zk-snarks/5-Pinocchio-Protocol.md:28
#: src/zk-snarks/5-Pinocchio-Protocol.md:29
#: src/zk-snarks/5-Pinocchio-Protocol.md:31
#: src/zk-snarks/5-Pinocchio-Protocol.md:32
#: src/zk-snarks/5-Pinocchio-Protocol.md:33
#: src/zk-snarks/5-Pinocchio-Protocol.md:34
#: src/zk-snarks/5-Pinocchio-Protocol.md:132
#: src/zk-snarks/5-Pinocchio-Protocol.md:133
#: src/zk-snarks/5-Pinocchio-Protocol.md:137
#: src/zk-snarks/5-Pinocchio-Protocol.md:154 src/halo2/chap-1/index.md:11
#: src/halo2/tmp/halo2-learning-materials.md:42
#: src/halo2/tmp/halo2-learning-materials.md:62
#: src/halo2/tmp/1-Simple-Example.md:41 src/halo2/tmp/1-Simple-Example.md:439
#: src/halo2/tmp/2-Fibonacci-example-1.md:191
#: src/halo2/tmp/2-Fibonacci-example-1.md:205
#: src/halo2/tmp/3-Fibonacci-example-2.md:84
#: src/halo2/tmp/3-Fibonacci-example-2.md:269 src/halo2/tmp/9-decomposed.md:21
#: src/halo2/tmp/9-decomposed.md:22 src/halo2/tmp/9-decomposed.md:24
#: src/halo2/tmp/9-decomposed.md:25 src/halo2/tmp/9-decomposed.md:26
#: src/halo2/tmp/9-decomposed.md:27 src/halo2/tmp/9-decomposed.md:29
#: src/halo2/tmp/9-decomposed.md:30 src/halo2/tmp/9-decomposed.md:31
#: src/halo2/tmp/9-decomposed.md:40 src/halo2/tmp/9-decomposed.md:42
#: src/halo2/tmp/9-decomposed.md:43 src/halo2/tmp/9-decomposed.md:44
#: src/halo2/tmp/9-decomposed.md:46 src/halo2/tmp/9-decomposed.md:47
#: src/halo2/tmp/9-decomposed.md:48 src/halo2/tmp/9-decomposed.md:53
#: src/halo2/tmp/9-decomposed.md:60 src/halo2/tmp/9-decomposed.md:61
#: src/halo2/tmp/9-decomposed.md:101 src/halo2/tmp/9-decomposed.md:106
#: src/halo2/tmp/9-decomposed.md:108 src/halo2/tmp/9-decomposed.md:126
#: src/halo2/tmp/9-decomposed.md:127 src/halo2/tmp/9-decomposed.md:130
#: src/halo2/tmp/9-decomposed.md:139 src/halo2/tmp/9-decomposed.md:142
#: src/halo2/tmp/9-decomposed.md:146 src/halo2/tmp/9-decomposed.md:158
#: src/halo2/tmp/9-decomposed.md:177 src/halo2/tmp/9-decomposed.md:178
#: src/halo2/tmp/9-decomposed.md:216 src/halo2/tmp/9-decomposed.md:273
#: src/zk-everything/BabySNARK tutorial.md:35 tutorial.md:116 tutorial.md:140
#: tutorial.md:148 tutorial.md:158 tutorial.md:163 tutorial.md:165
#: tutorial.md:168 tutorial.md:172 tutorial.md:177
#: src/zk-everything/zk-learning-miles/KZG.md:10
#: src/zk-everything/zk-learning-miles/KZG.md:83
#: src/zk-everything/zk-learning-miles/KZG.md:93
#: src/zk-everything/zk-learning-miles/KZG.md:142
#: src/zk-everything/zk-learning-miles/KZG.md:145
#: src/zk-everything/zk-learning-miles/KZG.md:164
#: src/zk-everything/zk-learning-miles/KZG.md:185
#: src/zk-everything/zk-learning-miles/KZG.md:197
#: src/zk-everything/zk-learning-miles/KZG.md:199
#: src/zk-everything/zk-learning-miles/KZG.md:201
#: src/zk-everything/zk-learning-miles/KZG.md:203
#: src/zk-everything/zk-learning-miles/KZG.md:207
#: src/zk-everything/zk-learning-miles/KZG.md:209
#: src/zk-everything/zk-learning-miles/KZG.md:211
#: src/zk-everything/zk-learning-miles/KZG.md:246
#: src/zk-everything/zk-learning-miles/KZG.md:248
#: src/zk-everything/zk-learning-miles/KZG.md:262
#: src/zk-everything/zk-learning-miles/KZG.md:317
#: src/zk-everything/zk-learning-miles/KZG.md:318
#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:316 SNARKs.md:320 SNARKs.md:362 SNARKs.md:364 SNARKs.md:368
#: SNARKs.md:369 SNARKs.md:370 SNARKs.md:371 SNARKs.md:372 SNARKs.md:398
#: SNARKs.md:410 src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:44
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:50
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:101
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:111
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:119
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:122
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:128
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:132
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:134
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:145
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:152
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:162
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:166
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:170
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:176
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:182
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:188
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:194
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:202
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:204
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:212
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:216
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:218
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:224
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:230
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:234
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:236
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:244
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:255
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:262
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:268
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:275
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:279
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:281
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:289
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:301
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:307
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:314
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:319
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:333
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:349
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:361
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:377
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:383
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:390
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:396
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:405
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:412
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:418
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:424
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:430
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:442
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:446
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:448
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:454
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:460
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:486
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:490
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:493
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:504
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:506
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:514
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:520
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:524
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:526
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:530
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:532
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:538
#: src/zk-everything/zk-everything-joe/Hyrax.md:48
#: src/zk-everything/zk-everything-joe/Hyrax.md:86
#: src/zk-everything/zk-everything-joe/Hyrax.md:92
#: src/zk-everything/zk-everything-joe/Hyrax.md:98
#: src/zk-everything/zk-everything-joe/Hyrax.md:102
#: src/zk-everything/zk-everything-joe/Hyrax.md:116
#: src/zk-everything/zk-everything-joe/Hyrax.md:122
#: src/zk-everything/zk-everything-joe/Hyrax.md:147
#: src/zk-everything/zk-everything-joe/Hyrax.md:168
#: src/zk-everything/zk-everything-joe/Hyrax.md:173
#: src/zk-everything/zk-everything-joe/Hyrax.md:191
#: src/zk-everything/zk-everything-joe/Hyrax.md:195
#: src/zk-everything/zk-everything-joe/Hyrax.md:203
#: src/zk-everything/zk-everything-joe/Hyrax.md:214
#: src/zk-everything/zk-everything-joe/Hyrax.md:216
#: src/zk-everything/zk-everything-joe/Hyrax.md:223
#: src/zk-everything/zk-everything-joe/Hyrax.md:228
#: src/zk-everything/zk-everything-joe/Hyrax.md:245
#: src/zk-everything/zk-everything-joe/Hyrax.md:250
#: src/zk-everything/zk-everything-joe/Hyrax.md:269
#: src/zk-everything/zk-everything-joe/Hyrax.md:276
#: src/zk-everything/zk-everything-joe/Hyrax.md:277
#: src/zk-everything/zk-everything-joe/Hyrax.md:282
#: src/zk-everything/zk-everything-joe/Hyrax.md:284
#: src/zk-everything/zk-everything-joe/Hyrax.md:292
#: src/zk-everything/zk-everything-joe/Hyrax.md:297
#: src/zk-everything/zk-everything-joe/Hyrax.md:302
#: src/zk-everything/zk-everything-joe/Hyrax.md:310
#: src/zk-everything/zk-everything-joe/Hyrax.md:311
#: src/zk-everything/zk-everything-joe/Spartan.md:110
#: src/zk-everything/zk-everything-joe/Spartan.md:115
#: src/zk-everything/zk-everything-joe/Spartan.md:118
#: src/zk-everything/zk-everything-joe/Spartan.md:122
#: src/zk-everything/zk-everything-joe/Spartan.md:126
#: src/zk-everything/zk-everything-joe/Spartan.md:136
#: src/zk-everything/zk-everything-joe/Spartan.md:142
#: src/zk-everything/zk-everything-joe/Spartan.md:143
#: src/zk-everything/zk-everything-joe/Spartan.md:147
#: src/zk-everything/zk-everything-joe/Spartan.md:148
#: src/zk-everything/zk-everything-joe/Spartan.md:154
#: src/zk-everything/zk-everything-joe/Spartan.md:169
#: src/zk-everything/zk-everything-joe/Spartan.md:172
#: src/zk-everything/zk-everything-joe/Spartan.md:176
#: src/zk-everything/zk-everything-joe/Spartan.md:177
#: src/zk-everything/zk-everything-joe/Spartan.md:182
#: src/zk-everything/zk-everything-joe/Spartan.md:195
#: src/zk-everything/zk-everything-joe/Spartan.md:200
#: src/zk-everything/zk-everything-joe/Spartan.md:232
#: src/zk-everything/zk-everything-joe/Spartan.md:236
#: src/zk-everything/zk-everything-joe/Spartan.md:240
#: src/zk-everything/zk-everything-joe/Spartan.md:246
#: src/zk-everything/zk-everything-joe/Spartan.md:252
#: src/zk-everything/zk-everything-joe/Spartan.md:257
#: src/zk-everything/zk-everything-joe/Spartan.md:263
#: src/zk-everything/zk-everything-joe/Spartan.md:268
#: src/zk-everything/zk-everything-joe/Spartan.md:274
#: src/zk-everything/zk-everything-joe/Spartan.md:278
#: src/zk-everything/zk-everything-joe/Spartan.md:309
#: src/zk-everything/zk-everything-joe/Spartan.md:312
#: src/zk-everything/zk-everything-joe/Spartan.md:323
#: src/zk-everything/zk-everything-joe/Spartan.md:327
#: src/zk-everything/zk-everything-joe/Spartan.md:334
#: src/zk-everything/zk-everything-joe/Spartan.md:343
#: src/zk-everything/zk-everything-joe/Spartan.md:344
#: src/zk-everything/zk-everything-joe/Spartan.md:347
#: src/zk-everything/zk-everything-joe/Spartan.md:349
#: src/zk-everything/zk-everything-joe/Spartan.md:360
#: src/zk-everything/zk-everything-joe/Spartan.md:389
#: src/zk-everything/zk-everything-joe/Spartan.md:394
#: src/zk-everything/zk-everything-joe/Spartan.md:396
#: src/zk-everything/zk-everything-joe/Spartan.md:415
#: src/zk-everything/zk-everything-joe/Spartan.md:450 src/Nova/SuperNova.md:12
#: src/Nova/SuperNova.md:31 src/public goods/第二章.md:58
#: goods/第二章.md:65 goods/第二章.md:81 goods/第二章.md:89
#: goods/第二章.md:158
msgid "2"
msgstr "2"

#: src/index.md:21 src/zkp-intro/1/zkp-back.md:200
#: src/zkp-intro/4/zkp-rom.md:151
#: src/plonk-intro-cn/plonk-arithmetization.md:20
#: src/plonk-intro-cn/plonk-arithmetization.md:22
#: src/plonk-intro-cn/plonk-arithmetization.md:35
#: src/plonk-intro-cn/plonk-arithmetization.md:37
#: src/plonk-intro-cn/plonk-arithmetization.md:39
#: src/plonk-intro-cn/plonk-arithmetization.md:41
#: src/plonk-intro-cn/plonk-arithmetization.md:47
#: src/plonk-intro-cn/plonk-arithmetization.md:51
#: src/plonk-intro-cn/plonk-arithmetization.md:55
#: src/plonk-intro-cn/plonk-arithmetization.md:57
#: src/plonk-intro-cn/plonk-arithmetization.md:61
#: src/plonk-intro-cn/plonk-arithmetization.md:63
#: src/plonk-intro-cn/plonk-arithmetization.md:87
#: src/plonk-intro-cn/plonk-arithmetization.md:91
#: src/plonk-intro-cn/plonk-arithmetization.md:93
#: src/plonk-intro-cn/plonk-arithmetization.md:101
#: src/plonk-intro-cn/plonk-arithmetization.md:103
#: src/plonk-intro-cn/plonk-arithmetization.md:105
#: src/plonk-intro-cn/plonk-arithmetization.md:107
#: src/plonk-intro-cn/plonk-arithmetization.md:109
#: src/plonk-intro-cn/plonk-arithmetization.md:115
#: src/plonk-intro-cn/plonk-arithmetization.md:123
#: src/plonk-intro-cn/plonk-arithmetization.md:135
#: src/plonk-intro-cn/plonk-arithmetization.md:141
#: src/plonk-intro-cn/plonk-arithmetization.md:142
#: src/plonk-intro-cn/plonk-arithmetization.md:143
#: src/plonk-intro-cn/plonk-arithmetization.md:147
#: src/plonk-intro-cn/plonk-arithmetization.md:151
#: src/plonk-intro-cn/plonk-arithmetization.md:155
#: src/plonk-intro-cn/plonk-arithmetization.md:159
#: src/plonk-intro-cn/plonk-arithmetization.md:163
#: src/plonk-intro-cn/plonk-arithmetization.md:177
#: src/plonk-intro-cn/plonk-arithmetization.md:179
#: src/plonk-intro-cn/plonk-arithmetization.md:181
#: src/plonk-intro-cn/plonk-arithmetization.md:187
#: src/plonk-intro-cn/plonk-arithmetization.md:189
#: src/plonk-intro-cn/plonk-arithmetization.md:191
#: src/plonk-intro-cn/plonk-arithmetization.md:197
#: src/plonk-intro-cn/plonk-arithmetization.md:199
#: src/plonk-intro-cn/plonk-arithmetization.md:201
#: src/plonk-intro-cn/plonk-arithmetization.md:203
#: src/plonk-intro-cn/plonk-arithmetization.md:205
#: src/plonk-intro-cn/plonk-arithmetization.md:209
#: src/plonk-intro-cn/plonk-arithmetization.md:213
#: src/plonk-intro-cn/plonk-arithmetization.md:227
#: src/plonk-intro-cn/plonk-arithmetization.md:231
#: src/plonk-intro-cn/plonk-arithmetization.md:237
#: src/plonk-intro-cn/plonk-arithmetization.md:239
#: src/plonk-intro-cn/plonk-arithmetization.md:241
#: src/plonk-intro-cn/plonk-arithmetization.md:243
#: src/plonk-intro-cn/plonk-arithmetization.md:245
#: src/plonk-intro-cn/plonk-arithmetization.md:249
#: src/plonk-intro-cn/plonk-arithmetization.md:257
#: src/plonk-intro-cn/plonk-arithmetization.md:259
#: src/plonk-intro-cn/plonk-lagrange-basis.md:10
#: src/plonk-intro-cn/plonk-lagrange-basis.md:18
#: src/plonk-intro-cn/plonk-lagrange-basis.md:20
#: src/plonk-intro-cn/plonk-lagrange-basis.md:28
#: src/plonk-intro-cn/plonk-lagrange-basis.md:30
#: src/plonk-intro-cn/plonk-lagrange-basis.md:32
#: src/plonk-intro-cn/plonk-lagrange-basis.md:34
#: src/plonk-intro-cn/plonk-lagrange-basis.md:36
#: src/plonk-intro-cn/plonk-lagrange-basis.md:38
#: src/plonk-intro-cn/plonk-lagrange-basis.md:42
#: src/plonk-intro-cn/plonk-lagrange-basis.md:44
#: src/plonk-intro-cn/plonk-lagrange-basis.md:50
#: src/plonk-intro-cn/plonk-lagrange-basis.md:54
#: src/plonk-intro-cn/plonk-lagrange-basis.md:60
#: src/plonk-intro-cn/plonk-lagrange-basis.md:62
#: src/plonk-intro-cn/plonk-lagrange-basis.md:64
#: src/plonk-intro-cn/plonk-lagrange-basis.md:66
#: src/plonk-intro-cn/plonk-lagrange-basis.md:70
#: src/plonk-intro-cn/plonk-lagrange-basis.md:76
#: src/plonk-intro-cn/plonk-lagrange-basis.md:78
#: src/plonk-intro-cn/plonk-lagrange-basis.md:82
#: src/plonk-intro-cn/plonk-lagrange-basis.md:83
#: src/plonk-intro-cn/plonk-lagrange-basis.md:85
#: src/plonk-intro-cn/plonk-lagrange-basis.md:87
#: src/plonk-intro-cn/plonk-lagrange-basis.md:89
#: src/plonk-intro-cn/plonk-lagrange-basis.md:101
#: src/plonk-intro-cn/plonk-lagrange-basis.md:105
#: src/plonk-intro-cn/plonk-lagrange-basis.md:109
#: src/plonk-intro-cn/plonk-lagrange-basis.md:111
#: src/plonk-intro-cn/plonk-lagrange-basis.md:113
#: src/plonk-intro-cn/plonk-lagrange-basis.md:115
#: src/plonk-intro-cn/plonk-lagrange-basis.md:119
#: src/plonk-intro-cn/plonk-lagrange-basis.md:121
#: src/plonk-intro-cn/plonk-lagrange-basis.md:129
#: src/plonk-intro-cn/plonk-lagrange-basis.md:131
#: src/plonk-intro-cn/plonk-lagrange-basis.md:135
#: src/plonk-intro-cn/plonk-lagrange-basis.md:137
#: src/plonk-intro-cn/plonk-lagrange-basis.md:139
#: src/plonk-intro-cn/plonk-lagrange-basis.md:143
#: src/plonk-intro-cn/plonk-lagrange-basis.md:147
#: src/plonk-intro-cn/plonk-lagrange-basis.md:161
#: src/plonk-intro-cn/plonk-lagrange-basis.md:170
#: src/plonk-intro-cn/plonk-lagrange-basis.md:172
#: src/plonk-intro-cn/plonk-permutation.md:11
#: src/plonk-intro-cn/plonk-permutation.md:13
#: src/plonk-intro-cn/plonk-permutation.md:21
#: src/plonk-intro-cn/plonk-permutation.md:23
#: src/plonk-intro-cn/plonk-permutation.md:35
#: src/plonk-intro-cn/plonk-permutation.md:36
#: src/plonk-intro-cn/plonk-permutation.md:38
#: src/plonk-intro-cn/plonk-permutation.md:48
#: src/plonk-intro-cn/plonk-permutation.md:58
#: src/plonk-intro-cn/plonk-permutation.md:62
#: src/plonk-intro-cn/plonk-permutation.md:68
#: src/plonk-intro-cn/plonk-permutation.md:72
#: src/plonk-intro-cn/plonk-permutation.md:76
#: src/plonk-intro-cn/plonk-permutation.md:82
#: src/plonk-intro-cn/plonk-permutation.md:84
#: src/plonk-intro-cn/plonk-permutation.md:86
#: src/plonk-intro-cn/plonk-permutation.md:88
#: src/plonk-intro-cn/plonk-permutation.md:90
#: src/plonk-intro-cn/plonk-permutation.md:96
#: src/plonk-intro-cn/plonk-permutation.md:98
#: src/plonk-intro-cn/plonk-permutation.md:110
#: src/plonk-intro-cn/plonk-permutation.md:112
#: src/plonk-intro-cn/plonk-permutation.md:114
#: src/plonk-intro-cn/plonk-permutation.md:116
#: src/plonk-intro-cn/plonk-permutation.md:120
#: src/plonk-intro-cn/plonk-permutation.md:122
#: src/plonk-intro-cn/plonk-permutation.md:124
#: src/plonk-intro-cn/plonk-permutation.md:128
#: src/plonk-intro-cn/plonk-permutation.md:134
#: src/plonk-intro-cn/plonk-permutation.md:140
#: src/plonk-intro-cn/plonk-permutation.md:148
#: src/plonk-intro-cn/plonk-permutation.md:150
#: src/plonk-intro-cn/plonk-permutation.md:156
#: src/plonk-intro-cn/plonk-permutation.md:158
#: src/plonk-intro-cn/plonk-permutation.md:159
#: src/plonk-intro-cn/plonk-permutation.md:161
#: src/plonk-intro-cn/plonk-permutation.md:162
#: src/plonk-intro-cn/plonk-permutation.md:174
#: src/plonk-intro-cn/plonk-permutation.md:176
#: src/plonk-intro-cn/plonk-permutation.md:177
#: src/plonk-intro-cn/plonk-permutation.md:179
#: src/plonk-intro-cn/plonk-permutation.md:180
#: src/plonk-intro-cn/plonk-permutation.md:198
#: src/plonk-intro-cn/plonk-permutation.md:204
#: src/plonk-intro-cn/plonk-permutation.md:206
#: src/plonk-intro-cn/plonk-permutation.md:208
#: src/plonk-intro-cn/plonk-permutation.md:212
#: src/plonk-intro-cn/plonk-constraints.md:9
#: src/plonk-intro-cn/plonk-constraints.md:13
#: src/plonk-intro-cn/plonk-constraints.md:17
#: src/plonk-intro-cn/plonk-constraints.md:21
#: src/plonk-intro-cn/plonk-constraints.md:25
#: src/plonk-intro-cn/plonk-constraints.md:27
#: src/plonk-intro-cn/plonk-constraints.md:35
#: src/plonk-intro-cn/plonk-constraints.md:37
#: src/plonk-intro-cn/plonk-constraints.md:39
#: src/plonk-intro-cn/plonk-constraints.md:41
#: src/plonk-intro-cn/plonk-constraints.md:45
#: src/plonk-intro-cn/plonk-constraints.md:47
#: src/plonk-intro-cn/plonk-constraints.md:57
#: src/plonk-intro-cn/plonk-constraints.md:59
#: src/plonk-intro-cn/plonk-constraints.md:63
#: src/plonk-intro-cn/plonk-constraints.md:65
#: src/plonk-intro-cn/plonk-constraints.md:67
#: src/plonk-intro-cn/plonk-constraints.md:69
#: src/plonk-intro-cn/plonk-constraints.md:71
#: src/plonk-intro-cn/plonk-constraints.md:73
#: src/plonk-intro-cn/plonk-constraints.md:75
#: src/plonk-intro-cn/plonk-constraints.md:77
#: src/plonk-intro-cn/plonk-constraints.md:81
#: src/plonk-intro-cn/plonk-constraints.md:85
#: src/plonk-intro-cn/plonk-constraints.md:89
#: src/plonk-intro-cn/plonk-constraints.md:91
#: src/plonk-intro-cn/plonk-constraints.md:93
#: src/plonk-intro-cn/plonk-constraints.md:95
#: src/plonk-intro-cn/plonk-constraints.md:97
#: src/plonk-intro-cn/plonk-constraints.md:99
#: src/plonk-intro-cn/plonk-constraints.md:116
#: src/plonk-intro-cn/plonk-constraints.md:120
#: src/plonk-intro-cn/plonk-constraints.md:125
#: src/plonk-intro-cn/plonk-constraints.md:127
#: src/plonk-intro-cn/plonk-constraints.md:129
#: src/plonk-intro-cn/plonk-constraints.md:133
#: src/plonk-intro-cn/plonk-constraints.md:141
#: src/plonk-intro-cn/plonk-constraints.md:143
#: src/plonk-intro-cn/plonk-constraints.md:145
#: src/plonk-intro-cn/plonk-constraints.md:147
#: src/plonk-intro-cn/plonk-constraints.md:149
#: src/plonk-intro-cn/plonk-constraints.md:153
#: src/plonk-intro-cn/plonk-constraints.md:155
#: src/plonk-intro-cn/plonk-constraints.md:159
#: src/plonk-intro-cn/plonk-constraints.md:161
#: src/plonk-intro-cn/plonk-constraints.md:163
#: src/plonk-intro-cn/plonk-constraints.md:169
#: src/plonk-intro-cn/plonk-constraints.md:175
#: src/plonk-intro-cn/plonk-constraints.md:179
#: src/plonk-intro-cn/plonk-constraints.md:181
#: src/plonk-intro-cn/plonk-constraints.md:184
#: src/plonk-intro-cn/plonk-constraints.md:185
#: src/plonk-intro-cn/plonk-constraints.md:186
#: src/plonk-intro-cn/plonk-constraints.md:187
#: src/plonk-intro-cn/plonk-constraints.md:191
#: src/plonk-intro-cn/plonk-constraints.md:192
#: src/plonk-intro-cn/plonk-constraints.md:193
#: src/plonk-intro-cn/plonk-constraints.md:194
#: src/plonk-intro-cn/plonk-constraints.md:199
#: src/plonk-intro-cn/plonk-polycom.md:21
#: src/plonk-intro-cn/plonk-polycom.md:25
#: src/plonk-intro-cn/plonk-polycom.md:29
#: src/plonk-intro-cn/plonk-polycom.md:33
#: src/plonk-intro-cn/plonk-polycom.md:41
#: src/plonk-intro-cn/plonk-polycom.md:47
#: src/plonk-intro-cn/plonk-polycom.md:49
#: src/plonk-intro-cn/plonk-polycom.md:53
#: src/plonk-intro-cn/plonk-polycom.md:55
#: src/plonk-intro-cn/plonk-polycom.md:57
#: src/plonk-intro-cn/plonk-polycom.md:59
#: src/plonk-intro-cn/plonk-polycom.md:61
#: src/plonk-intro-cn/plonk-polycom.md:69
#: src/plonk-intro-cn/plonk-polycom.md:73
#: src/plonk-intro-cn/plonk-polycom.md:75
#: src/plonk-intro-cn/plonk-polycom.md:77
#: src/plonk-intro-cn/plonk-polycom.md:81
#: src/plonk-intro-cn/plonk-polycom.md:87
#: src/plonk-intro-cn/plonk-polycom.md:89
#: src/plonk-intro-cn/plonk-polycom.md:91
#: src/plonk-intro-cn/plonk-polycom.md:93
#: src/plonk-intro-cn/plonk-polycom.md:97
#: src/plonk-intro-cn/plonk-polycom.md:101
#: src/plonk-intro-cn/plonk-polycom.md:103
#: src/plonk-intro-cn/plonk-polycom.md:105
#: src/plonk-intro-cn/plonk-polycom.md:107
#: src/plonk-intro-cn/plonk-polycom.md:109
#: src/plonk-intro-cn/plonk-polycom.md:111
#: src/plonk-intro-cn/plonk-polycom.md:113
#: src/plonk-intro-cn/plonk-polycom.md:117
#: src/plonk-intro-cn/plonk-polycom.md:124
#: src/plonk-intro-cn/plonk-polycom.md:126
#: src/plonk-intro-cn/plonk-polycom.md:128
#: src/plonk-intro-cn/plonk-polycom.md:132
#: src/plonk-intro-cn/plonk-polycom.md:134
#: src/plonk-intro-cn/plonk-polycom.md:136
#: src/plonk-intro-cn/plonk-polycom.md:141
#: src/plonk-intro-cn/plonk-polycom.md:145
#: src/plonk-intro-cn/plonk-polycom.md:147
#: src/plonk-intro-cn/plonk-polycom.md:153
#: src/plonk-intro-cn/plonk-polycom.md:155
#: src/plonk-intro-cn/plonk-polycom.md:157
#: src/plonk-intro-cn/plonk-polycom.md:163
#: src/plonk-intro-cn/plonk-polycom.md:167
#: src/plonk-intro-cn/plonk-polycom.md:169
#: src/plonk-intro-cn/plonk-polycom.md:171
#: src/plonk-intro-cn/plonk-polycom.md:175
#: src/plonk-intro-cn/plonk-polycom.md:179
#: src/plonk-intro-cn/plonk-polycom.md:181
#: src/plonk-intro-cn/plonk-polycom.md:183
#: src/plonk-intro-cn/plonk-polycom.md:187
#: src/plonk-intro-cn/plonk-polycom.md:189
#: src/plonk-intro-cn/plonk-polycom.md:193
#: src/plonk-intro-cn/plonk-polycom.md:197
#: src/plonk-intro-cn/plonk-polycom.md:199
#: src/plonk-intro-cn/plonk-polycom.md:201
#: src/plonk-intro-cn/plonk-polycom.md:205
#: src/plonk-intro-cn/plonk-polycom.md:209
#: src/plonk-intro-cn/plonk-polycom.md:211
#: src/plonk-intro-cn/plonk-polycom.md:213
#: src/plonk-intro-cn/plonk-polycom.md:215
#: src/plonk-intro-cn/plonk-polycom.md:217
#: src/plonk-intro-cn/plonk-polycom.md:221
#: src/plonk-intro-cn/plonk-polycom.md:225
#: src/plonk-intro-cn/plonk-polycom.md:229
#: src/plonk-intro-cn/plonk-randomizing.md:17
#: src/plonk-intro-cn/plonk-randomizing.md:19
#: src/plonk-intro-cn/plonk-randomizing.md:31
#: src/plonk-intro-cn/plonk-randomizing.md:33
#: src/plonk-intro-cn/plonk-randomizing.md:37
#: src/plonk-intro-cn/plonk-randomizing.md:39
#: src/plonk-intro-cn/plonk-randomizing.md:41
#: src/plonk-intro-cn/plonk-randomizing.md:45
#: src/plonk-intro-cn/plonk-randomizing.md:47
#: src/plonk-intro-cn/plonk-randomizing.md:49
#: src/plonk-intro-cn/plonk-randomizing.md:51
#: src/plonk-intro-cn/plonk-randomizing.md:53
#: src/plonk-intro-cn/plonk-randomizing.md:55
#: src/plonk-intro-cn/plonk-randomizing.md:57
#: src/plonk-intro-cn/plonk-randomizing.md:59
#: src/plonk-intro-cn/plonk-randomizing.md:61
#: src/plonk-intro-cn/plonk-randomizing.md:65
#: src/plonk-intro-cn/plonk-randomizing.md:69
#: src/plonk-intro-cn/plonk-randomizing.md:73
#: src/plonk-intro-cn/plonk-randomizing.md:85
#: src/plonk-intro-cn/plonk-randomizing.md:88
#: src/plonk-intro-cn/plonk-randomizing.md:90
#: src/plonk-intro-cn/plonk-randomizing.md:92
#: src/plonk-intro-cn/plonk-randomizing.md:93
#: src/plonk-intro-cn/plonk-randomizing.md:97
#: src/plonk-intro-cn/plonk-randomizing.md:99
#: src/plonk-intro-cn/plonk-randomizing.md:101
#: src/plonk-intro-cn/plonk-randomizing.md:103
#: src/plonk-intro-cn/plonk-randomizing.md:104
#: src/plonk-intro-cn/plonk-randomizing.md:106
#: src/plonk-intro-cn/plonk-randomizing.md:110
#: src/plonk-intro-cn/plonk-randomizing.md:112
#: src/plonk-intro-cn/plonk-randomizing.md:113
#: src/plonk-intro-cn/plonk-randomizing.md:115
#: src/plonk-intro-cn/plonk-randomizing.md:117
#: src/plonk-intro-cn/plonk-randomizing.md:119
#: src/plonk-intro-cn/plonk-randomizing.md:121
#: src/plonk-intro-cn/plonk-randomizing.md:123
#: src/plonk-intro-cn/plonk-randomizing.md:125
#: src/plonk-intro-cn/plonk-randomizing.md:127
#: src/plonk-intro-cn/plonk-randomizing.md:129
#: src/plonk-intro-cn/plonk-randomizing.md:133
#: src/plonk-intro-cn/plonk-randomizing.md:141
#: src/plonk-intro-cn/plonk-randomizing.md:143
#: src/plonk-intro-cn/plonk-randomizing.md:145
#: src/plonk-intro-cn/plonk-randomizing.md:149
#: src/plonk-intro-cn/plonk-randomizing.md:153
#: src/plonk-intro-cn/plonk-randomizing.md:155
#: src/plonk-intro-cn/plonk-randomizing.md:159
#: src/plonk-intro-cn/plonk-randomizing.md:163
#: src/plonk-intro-cn/plonk-lookup.md:41 src/plonk-intro-cn/plonk-lookup.md:43
#: src/plonk-intro-cn/plonk-lookup.md:45 src/plonk-intro-cn/plonk-lookup.md:47
#: src/plonk-intro-cn/plonk-lookup.md:49 src/plonk-intro-cn/plonk-lookup.md:51
#: src/plonk-intro-cn/plonk-lookup.md:53 src/plonk-intro-cn/plonk-lookup.md:55
#: src/plonk-intro-cn/plonk-lookup.md:57 src/plonk-intro-cn/plonk-lookup.md:61
#: src/plonk-intro-cn/plonk-lookup.md:63 src/plonk-intro-cn/plonk-lookup.md:65
#: src/plonk-intro-cn/plonk-lookup.md:67 src/plonk-intro-cn/plonk-lookup.md:69
#: src/plonk-intro-cn/plonk-lookup.md:77 src/plonk-intro-cn/plonk-lookup.md:83
#: src/plonk-intro-cn/plonk-lookup.md:87 src/plonk-intro-cn/plonk-lookup.md:93
#: src/plonk-intro-cn/plonk-lookup.md:101
#: src/plonk-intro-cn/plonk-lookup.md:107
#: src/plonk-intro-cn/plonk-lookup.md:109
#: src/plonk-intro-cn/plonk-lookup.md:111
#: src/plonk-intro-cn/plonk-lookup.md:113
#: src/plonk-intro-cn/plonk-lookup.md:115
#: src/plonk-intro-cn/plonk-lookup.md:117
#: src/plonk-intro-cn/plonk-lookup.md:119
#: src/plonk-intro-cn/plonk-lookup.md:121
#: src/plonk-intro-cn/plonk-lookup.md:123
#: src/plonk-intro-cn/plonk-lookup.md:125
#: src/plonk-intro-cn/plonk-lookup.md:127
#: src/plonk-intro-cn/plonk-lookup.md:129
#: src/plonk-intro-cn/plonk-lookup.md:131
#: src/plonk-intro-cn/plonk-lookup.md:133
#: src/plonk-intro-cn/plonk-lookup.md:135
#: src/plonk-intro-cn/plonk-lookup.md:137
#: src/plonk-intro-cn/plonk-lookup.md:139
#: src/plonk-intro-cn/plonk-lookup.md:141
#: src/plonk-intro-cn/plonk-lookup.md:145
#: src/plonk-intro-cn/plonk-lookup.md:149
#: src/plonk-intro-cn/plonk-lookup.md:153
#: src/plonk-intro-cn/plonk-lookup.md:157
#: src/plonk-intro-cn/plonk-lookup.md:161
#: src/plonk-intro-cn/plonk-lookup.md:163
#: src/plonk-intro-cn/plonk-lookup.md:165
#: src/plonk-intro-cn/plonk-lookup.md:167
#: src/plonk-intro-cn/plonk-lookup.md:169
#: src/plonk-intro-cn/plonk-lookup.md:173
#: src/plonk-intro-cn/plonk-lookup.md:175
#: src/plonk-intro-cn/plonk-lookup.md:188
#: src/plonk-intro-cn/plonk-lookup.md:192
#: src/plonk-intro-cn/plonk-lookup.md:196
#: src/plonk-intro-cn/plonk-lookup.md:200
#: src/plonk-intro-cn/plonk-lookup.md:210
#: src/plonk-intro-cn/plonk-lookup.md:212
#: src/plonk-intro-cn/plonk-lookup.md:214
#: src/plonk-intro-cn/plonk-lookup.md:216
#: src/plonk-intro-cn/plonk-lookup.md:220
#: src/plonk-intro-cn/plonk-lookup.md:224
#: src/plonk-intro-cn/plonk-lookup.md:226
#: src/plonk-intro-cn/plonk-lookup.md:228
#: src/plonk-intro-cn/plonk-lookup.md:234
#: src/plonk-intro-cn/plonk-lookup.md:238
#: src/plonk-intro-cn/plonk-lookup.md:244
#: src/plonk-intro-cn/plonk-lookup.md:247
#: src/plonk-intro-cn/plonk-lookup.md:251
#: src/plonk-intro-cn/plonk-lookup.md:261
#: src/plonk-intro-cn/plonk-lookup.md:265
#: src/plonk-intro-cn/plonk-lookup.md:267
#: src/plonk-intro-cn/plonk-lookup.md:269
#: src/plonk-intro-cn/plonk-lookup.md:273
#: src/plonk-intro-cn/plonk-lookup.md:275
#: src/plonk-intro-cn/plonk-lookup.md:277
#: src/plonk-intro-cn/plonk-lookup.md:281
#: src/plonk-intro-cn/plonk-lookup.md:285
#: src/plonk-intro-cn/plonk-lookup.md:289
#: src/plonk-intro-cn/plonk-lookup.md:293
#: src/plonk-intro-cn/plonk-lookup.md:297
#: src/plonk-intro-cn/plonk-lookup.md:304
#: src/plonk-intro-cn/plonk-lookup.md:306
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:75
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:95
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:103
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:105
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:118
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:150
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:194
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:332
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:333
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:341
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:349
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:350
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:21
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:24
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:26
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:29
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:30
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:79
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:81
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:96
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:126
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:128
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:196
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:198
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:206
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:207
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:208
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:209
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:211
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:212
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:213
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:215
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:218
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:224
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:229
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:235
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:243
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:247
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:258
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:264
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:269
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:271
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:272
#: src/zk-snarks/3-General-Purpose-Computation.md:64
#: src/zk-snarks/3-General-Purpose-Computation.md:79
#: src/zk-snarks/3-General-Purpose-Computation.md:108
#: src/zk-snarks/3-General-Purpose-Computation.md:141
#: src/zk-snarks/3-General-Purpose-Computation.md:149
#: src/zk-snarks/3-General-Purpose-Computation.md:171
#: src/zk-snarks/3-General-Purpose-Computation.md:196
#: src/zk-snarks/3-General-Purpose-Computation.md:213
#: src/zk-snarks/3-General-Purpose-Computation.md:295
#: src/zk-snarks/3-General-Purpose-Computation.md:315
#: src/zk-snarks/3-General-Purpose-Computation.md:320
#: src/zk-snarks/3-General-Purpose-Computation.md:326
#: src/zk-snarks/3-General-Purpose-Computation.md:331
#: src/zk-snarks/3-General-Purpose-Computation.md:336
#: src/zk-snarks/3-General-Purpose-Computation.md:340
#: src/zk-snarks/3-General-Purpose-Computation.md:347
#: src/zk-snarks/3-General-Purpose-Computation.md:349
#: src/zk-snarks/3-General-Purpose-Computation.md:350
#: src/zk-snarks/3-General-Purpose-Computation.md:351
#: src/zk-snarks/3-General-Purpose-Computation.md:356
#: src/zk-snarks/3-General-Purpose-Computation.md:358
#: src/zk-snarks/3-General-Purpose-Computation.md:360
#: src/zk-snarks/3-General-Purpose-Computation.md:366
#: src/zk-snarks/3-General-Purpose-Computation.md:379
#: src/zk-snarks/3-General-Purpose-Computation.md:381
#: src/zk-snarks/3-General-Purpose-Computation.md:384
#: src/zk-snarks/4-Construction-Properties.md:29
#: src/zk-snarks/4-Construction-Properties.md:46
#: src/zk-snarks/4-Construction-Properties.md:48
#: src/zk-snarks/4-Construction-Properties.md:49
#: src/zk-snarks/4-Construction-Properties.md:62
#: src/zk-snarks/4-Construction-Properties.md:63
#: src/zk-snarks/4-Construction-Properties.md:65
#: src/zk-snarks/4-Construction-Properties.md:67
#: src/zk-snarks/4-Construction-Properties.md:80
#: src/zk-snarks/4-Construction-Properties.md:85
#: src/zk-snarks/4-Construction-Properties.md:119
#: src/zk-snarks/4-Construction-Properties.md:120
#: src/zk-snarks/4-Construction-Properties.md:121
#: src/zk-snarks/4-Construction-Properties.md:128
#: src/zk-snarks/4-Construction-Properties.md:133
#: src/zk-snarks/4-Construction-Properties.md:134
#: src/zk-snarks/4-Construction-Properties.md:135
#: src/zk-snarks/4-Construction-Properties.md:136
#: src/zk-snarks/4-Construction-Properties.md:137
#: src/zk-snarks/4-Construction-Properties.md:138
#: src/zk-snarks/4-Construction-Properties.md:139
#: src/zk-snarks/4-Construction-Properties.md:155
#: src/zk-snarks/4-Construction-Properties.md:156
#: src/zk-snarks/4-Construction-Properties.md:162
#: src/zk-snarks/4-Construction-Properties.md:164
#: src/zk-snarks/4-Construction-Properties.md:170
#: src/zk-snarks/4-Construction-Properties.md:171
#: src/zk-snarks/4-Construction-Properties.md:172
#: src/zk-snarks/4-Construction-Properties.md:174
#: src/zk-snarks/4-Construction-Properties.md:178
#: src/zk-snarks/4-Construction-Properties.md:193
#: src/zk-snarks/4-Construction-Properties.md:195
#: src/zk-snarks/4-Construction-Properties.md:199
#: src/zk-snarks/4-Construction-Properties.md:203
#: src/zk-snarks/4-Construction-Properties.md:205
#: src/zk-snarks/4-Construction-Properties.md:206
#: src/zk-snarks/4-Construction-Properties.md:207
#: src/zk-snarks/4-Construction-Properties.md:209
#: src/zk-snarks/4-Construction-Properties.md:210
#: src/zk-snarks/4-Construction-Properties.md:217
#: src/zk-snarks/4-Construction-Properties.md:219
#: src/zk-snarks/4-Construction-Properties.md:221
#: src/zk-snarks/4-Construction-Properties.md:233
#: src/zk-snarks/4-Construction-Properties.md:239
#: src/zk-snarks/4-Construction-Properties.md:242
#: src/zk-snarks/4-Construction-Properties.md:244
#: src/zk-snarks/4-Construction-Properties.md:245
#: src/zk-snarks/4-Construction-Properties.md:249
#: src/zk-snarks/4-Construction-Properties.md:251
#: src/zk-snarks/4-Construction-Properties.md:261
#: src/zk-snarks/4-Construction-Properties.md:262
#: src/zk-snarks/4-Construction-Properties.md:263
#: src/zk-snarks/4-Construction-Properties.md:264
#: src/zk-snarks/4-Construction-Properties.md:265
#: src/zk-snarks/4-Construction-Properties.md:271
#: src/zk-snarks/4-Construction-Properties.md:273
#: src/zk-snarks/4-Construction-Properties.md:275
#: src/zk-snarks/4-Construction-Properties.md:276
#: src/zk-snarks/4-Construction-Properties.md:277
#: src/zk-snarks/4-Construction-Properties.md:279
#: src/zk-snarks/4-Construction-Properties.md:282
#: src/zk-snarks/4-Construction-Properties.md:284
#: src/zk-snarks/4-Construction-Properties.md:287
#: src/zk-snarks/4-Construction-Properties.md:289
#: src/zk-snarks/4-Construction-Properties.md:290
#: src/zk-snarks/4-Construction-Properties.md:291
#: src/zk-snarks/4-Construction-Properties.md:296
#: src/zk-snarks/4-Construction-Properties.md:298
#: src/zk-snarks/4-Construction-Properties.md:300
#: src/zk-snarks/4-Construction-Properties.md:304
#: src/zk-snarks/4-Construction-Properties.md:306
#: src/zk-snarks/4-Construction-Properties.md:307
#: src/zk-snarks/4-Construction-Properties.md:313
#: src/zk-snarks/4-Construction-Properties.md:317
#: src/zk-snarks/4-Construction-Properties.md:318
#: src/zk-snarks/4-Construction-Properties.md:326
#: src/zk-snarks/4-Construction-Properties.md:330
#: src/zk-snarks/4-Construction-Properties.md:331
#: src/zk-snarks/4-Construction-Properties.md:333
#: src/zk-snarks/4-Construction-Properties.md:335
#: src/zk-snarks/4-Construction-Properties.md:338
#: src/zk-snarks/4-Construction-Properties.md:339
#: src/zk-snarks/4-Construction-Properties.md:340
#: src/zk-snarks/4-Construction-Properties.md:341
#: src/zk-snarks/4-Construction-Properties.md:342
#: src/zk-snarks/4-Construction-Properties.md:345
#: src/zk-snarks/4-Construction-Properties.md:349
#: src/zk-snarks/4-Construction-Properties.md:353
#: src/zk-snarks/4-Construction-Properties.md:357
#: src/zk-snarks/4-Construction-Properties.md:363
#: src/zk-snarks/4-Construction-Properties.md:364
#: src/zk-snarks/4-Construction-Properties.md:368
#: src/zk-snarks/4-Construction-Properties.md:370
#: src/zk-snarks/4-Construction-Properties.md:374
#: src/zk-snarks/4-Construction-Properties.md:375
#: src/zk-snarks/4-Construction-Properties.md:376
#: src/zk-snarks/4-Construction-Properties.md:377
#: src/zk-snarks/4-Construction-Properties.md:379
#: src/zk-snarks/4-Construction-Properties.md:381
#: src/zk-snarks/4-Construction-Properties.md:384
#: src/zk-snarks/4-Construction-Properties.md:385
#: src/zk-snarks/4-Construction-Properties.md:387
#: src/zk-snarks/4-Construction-Properties.md:391
#: src/zk-snarks/4-Construction-Properties.md:392
#: src/zk-snarks/4-Construction-Properties.md:394
#: src/zk-snarks/4-Construction-Properties.md:395
#: src/zk-snarks/4-Construction-Properties.md:400
#: src/zk-snarks/4-Construction-Properties.md:401
#: src/zk-snarks/4-Construction-Properties.md:405
#: src/zk-snarks/4-Construction-Properties.md:406
#: src/zk-snarks/4-Construction-Properties.md:407
#: src/zk-snarks/4-Construction-Properties.md:408
#: src/zk-snarks/4-Construction-Properties.md:409
#: src/zk-snarks/4-Construction-Properties.md:410
#: src/zk-snarks/4-Construction-Properties.md:419
#: src/zk-snarks/4-Construction-Properties.md:420
#: src/zk-snarks/4-Construction-Properties.md:422
#: src/zk-snarks/4-Construction-Properties.md:424
#: src/zk-snarks/4-Construction-Properties.md:428
#: src/zk-snarks/4-Construction-Properties.md:431
#: src/zk-snarks/4-Construction-Properties.md:432
#: src/zk-snarks/4-Construction-Properties.md:434
#: src/zk-snarks/4-Construction-Properties.md:436
#: src/zk-snarks/4-Construction-Properties.md:438
#: src/zk-snarks/4-Construction-Properties.md:440
#: src/zk-snarks/4-Construction-Properties.md:441
#: src/zk-snarks/4-Construction-Properties.md:443
#: src/zk-snarks/5-Pinocchio-Protocol.md:31
#: src/zk-snarks/5-Pinocchio-Protocol.md:32
#: src/zk-snarks/5-Pinocchio-Protocol.md:33
#: src/zk-snarks/5-Pinocchio-Protocol.md:34
#: src/zk-snarks/5-Pinocchio-Protocol.md:45
#: src/zk-snarks/5-Pinocchio-Protocol.md:46
#: src/zk-snarks/5-Pinocchio-Protocol.md:48
#: src/zk-snarks/5-Pinocchio-Protocol.md:50
#: src/zk-snarks/5-Pinocchio-Protocol.md:52
#: src/zk-snarks/5-Pinocchio-Protocol.md:62
#: src/zk-snarks/5-Pinocchio-Protocol.md:67
#: src/zk-snarks/5-Pinocchio-Protocol.md:83
#: src/zk-snarks/5-Pinocchio-Protocol.md:84
#: src/zk-snarks/5-Pinocchio-Protocol.md:85
#: src/zk-snarks/5-Pinocchio-Protocol.md:87
#: src/zk-snarks/5-Pinocchio-Protocol.md:89
#: src/zk-snarks/5-Pinocchio-Protocol.md:92
#: src/zk-snarks/5-Pinocchio-Protocol.md:94
#: src/zk-snarks/5-Pinocchio-Protocol.md:97
#: src/zk-snarks/5-Pinocchio-Protocol.md:98
#: src/zk-snarks/5-Pinocchio-Protocol.md:102
#: src/zk-snarks/5-Pinocchio-Protocol.md:103
#: src/zk-snarks/5-Pinocchio-Protocol.md:106
#: src/zk-snarks/5-Pinocchio-Protocol.md:109
#: src/zk-snarks/5-Pinocchio-Protocol.md:111
#: src/zk-snarks/5-Pinocchio-Protocol.md:118
#: src/zk-snarks/5-Pinocchio-Protocol.md:139
#: src/zk-snarks/5-Pinocchio-Protocol.md:141
#: src/zk-snarks/5-Pinocchio-Protocol.md:142
#: src/zk-snarks/5-Pinocchio-Protocol.md:145
#: src/zk-snarks/5-Pinocchio-Protocol.md:146
#: src/zk-snarks/5-Pinocchio-Protocol.md:147
#: src/zk-snarks/5-Pinocchio-Protocol.md:151
#: src/zk-snarks/5-Pinocchio-Protocol.md:152
#: src/zk-snarks/5-Pinocchio-Protocol.md:155
#: src/zk-snarks/5-Pinocchio-Protocol.md:157
#: src/zk-snarks/5-Pinocchio-Protocol.md:160
#: src/zk-snarks/5-Pinocchio-Protocol.md:163
#: src/zk-snarks/5-Pinocchio-Protocol.md:165
#: src/zk-snarks/5-Pinocchio-Protocol.md:166
#: src/zk-snarks/5-Pinocchio-Protocol.md:168
#: src/zk-snarks/5-Pinocchio-Protocol.md:170
#: src/zk-snarks/5-Pinocchio-Protocol.md:173
#: src/zk-snarks/5-Pinocchio-Protocol.md:188
#: src/zk-snarks/5-Pinocchio-Protocol.md:189
#: src/zk-snarks/5-Pinocchio-Protocol.md:190
#: src/zk-snarks/5-Pinocchio-Protocol.md:192
#: src/zk-snarks/5-Pinocchio-Protocol.md:195
#: src/zk-snarks/5-Pinocchio-Protocol.md:198
#: src/zk-snarks/5-Pinocchio-Protocol.md:199
#: src/zk-snarks/5-Pinocchio-Protocol.md:200
#: src/zk-snarks/5-Pinocchio-Protocol.md:202
#: src/zk-snarks/5-Pinocchio-Protocol.md:204
#: src/zk-snarks/5-Pinocchio-Protocol.md:205
#: src/zk-snarks/5-Pinocchio-Protocol.md:207
#: src/zk-snarks/5-Pinocchio-Protocol.md:209
#: src/zk-snarks/5-Pinocchio-Protocol.md:212
#: src/zk-snarks/5-Pinocchio-Protocol.md:214
#: src/zk-snarks/5-Pinocchio-Protocol.md:215
#: src/zk-snarks/5-Pinocchio-Protocol.md:218
#: src/zk-snarks/5-Pinocchio-Protocol.md:219
#: src/zk-snarks/5-Pinocchio-Protocol.md:222
#: src/zk-snarks/5-Pinocchio-Protocol.md:225
#: src/halo2/tmp/1-Simple-Example.md:151 src/halo2/tmp/1-Simple-Example.md:152
#: src/halo2/tmp/1-Simple-Example.md:552 src/halo2/tmp/1-Simple-Example.md:553
#: src/halo2/tmp/2-Fibonacci-example-1.md:191
#: src/halo2/tmp/2-Fibonacci-example-1.md:205
#: src/halo2/tmp/7-Range-Check-lookup(example-2).md:137
#: src/halo2/tmp/7-Range-Check-lookup(example-2).md:138
#: src/halo2/tmp/9-decomposed.md:22 src/halo2/tmp/9-decomposed.md:24
#: src/halo2/tmp/9-decomposed.md:30 src/halo2/tmp/9-decomposed.md:39
#: src/halo2/tmp/9-decomposed.md:40 src/halo2/tmp/9-decomposed.md:42
#: src/halo2/tmp/9-decomposed.md:43 src/halo2/tmp/9-decomposed.md:46
#: src/halo2/tmp/9-decomposed.md:47 src/halo2/tmp/9-decomposed.md:53
#: src/halo2/tmp/9-decomposed.md:101 src/halo2/tmp/9-decomposed.md:104
#: src/halo2/tmp/9-decomposed.md:106 src/halo2/tmp/9-decomposed.md:108
#: src/halo2/tmp/9-decomposed.md:126 src/halo2/tmp/9-decomposed.md:130
#: src/halo2/tmp/9-decomposed.md:133 src/halo2/tmp/9-decomposed.md:139
#: src/halo2/tmp/9-decomposed.md:141 src/halo2/tmp/9-decomposed.md:142
#: src/halo2/tmp/9-decomposed.md:143 src/halo2/tmp/9-decomposed.md:146
#: src/halo2/tmp/9-decomposed.md:216 src/zk-everything/BabySNARK tutorial.md:33
#: tutorial.md:35 tutorial.md:124 tutorial.md:125 tutorial.md:126
#: tutorial.md:129 tutorial.md:131 tutorial.md:145 tutorial.md:148
#: tutorial.md:150 tutorial.md:172 tutorial.md:181 tutorial.md:183
#: src/zk-everything/zk-learning-miles/KZG.md:12
#: src/zk-everything/zk-learning-miles/KZG.md:41
#: src/zk-everything/zk-learning-miles/KZG.md:45
#: src/zk-everything/zk-learning-miles/KZG.md:96
#: src/zk-everything/zk-learning-miles/KZG.md:110
#: src/zk-everything/zk-learning-miles/KZG.md:142
#: src/zk-everything/zk-learning-miles/KZG.md:145
#: src/zk-everything/zk-learning-miles/KZG.md:162
#: src/zk-everything/zk-learning-miles/KZG.md:164
#: src/zk-everything/zk-learning-miles/KZG.md:197
#: src/zk-everything/zk-learning-miles/KZG.md:199
#: src/zk-everything/zk-learning-miles/KZG.md:201
#: src/zk-everything/zk-learning-miles/KZG.md:203
#: src/zk-everything/zk-learning-miles/KZG.md:205
#: src/zk-everything/zk-learning-miles/KZG.md:207
#: src/zk-everything/zk-learning-miles/KZG.md:209
#: src/zk-everything/zk-learning-miles/KZG.md:211
#: src/zk-everything/zk-learning-miles/KZG.md:213
#: src/zk-everything/zk-learning-miles/KZG.md:220
#: src/zk-everything/zk-learning-miles/KZG.md:222
#: src/zk-everything/zk-learning-miles/KZG.md:246
#: src/zk-everything/zk-learning-miles/KZG.md:248
#: src/zk-everything/zk-learning-miles/KZG.md:250
#: src/zk-everything/zk-learning-miles/KZG.md:262
#: src/zk-everything/zk-learning-miles/KZG.md:276
#: src/zk-everything/zk-learning-miles/KZG.md:317
#: src/zk-everything/zk-learning-miles/KZG.md:318
#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:197 SNARKs.md:198 SNARKs.md:242 SNARKs.md:244 SNARKs.md:254
#: SNARKs.md:258 SNARKs.md:261 SNARKs.md:263 SNARKs.md:269 SNARKs.md:270
#: SNARKs.md:272 SNARKs.md:273 SNARKs.md:276 SNARKs.md:284 SNARKs.md:289
#: SNARKs.md:296 SNARKs.md:298 SNARKs.md:301 SNARKs.md:302 SNARKs.md:310
#: SNARKs.md:312 SNARKs.md:324 SNARKs.md:342 SNARKs.md:362 SNARKs.md:364
#: SNARKs.md:368 SNARKs.md:369 SNARKs.md:370 SNARKs.md:371 SNARKs.md:372
#: SNARKs.md:373 SNARKs.md:379 SNARKs.md:381 SNARKs.md:383 SNARKs.md:387
#: SNARKs.md:390 SNARKs.md:398 SNARKs.md:403 SNARKs.md:407 SNARKs.md:408
#: SNARKs.md:412 SNARKs.md:414
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:44
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:50
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:58
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:64
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:79
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:83
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:87
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:91
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:101
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:119
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:122
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:128
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:132
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:134
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:145
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:152
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:160
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:162
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:166
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:170
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:174
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:176
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:182
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:188
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:192
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:194
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:202
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:204
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:206
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:212
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:216
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:218
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:224
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:230
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:234
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:236
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:244
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:246
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:248
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:255
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:259
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:262
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:268
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:275
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:279
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:281
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:289
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:292
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:294
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:301
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:305
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:307
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:314
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:319
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:323
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:325
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:333
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:336
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:343
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:347
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:349
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:355
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:361
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:365
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:367
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:377
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:383
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:390
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:396
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:405
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:412
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:418
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:424
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:428
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:430
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:434
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:436
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:440
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:442
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:446
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:448
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:452
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:454
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:460
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:486
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:490
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:493
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:497
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:500
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:506
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:512
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:514
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:520
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:524
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:526
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:530
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:532
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:538
#: src/zk-everything/zk-everything-joe/Hyrax.md:48
#: src/zk-everything/zk-everything-joe/Hyrax.md:58
#: src/zk-everything/zk-everything-joe/Hyrax.md:62
#: src/zk-everything/zk-everything-joe/Hyrax.md:64
#: src/zk-everything/zk-everything-joe/Hyrax.md:68
#: src/zk-everything/zk-everything-joe/Hyrax.md:70
#: src/zk-everything/zk-everything-joe/Hyrax.md:86
#: src/zk-everything/zk-everything-joe/Hyrax.md:92
#: src/zk-everything/zk-everything-joe/Hyrax.md:98
#: src/zk-everything/zk-everything-joe/Hyrax.md:102
#: src/zk-everything/zk-everything-joe/Hyrax.md:108
#: src/zk-everything/zk-everything-joe/Hyrax.md:110
#: src/zk-everything/zk-everything-joe/Hyrax.md:116
#: src/zk-everything/zk-everything-joe/Hyrax.md:122
#: src/zk-everything/zk-everything-joe/Hyrax.md:133
#: src/zk-everything/zk-everything-joe/Hyrax.md:134
#: src/zk-everything/zk-everything-joe/Hyrax.md:140
#: src/zk-everything/zk-everything-joe/Hyrax.md:142
#: src/zk-everything/zk-everything-joe/Hyrax.md:147
#: src/zk-everything/zk-everything-joe/Hyrax.md:149
#: src/zk-everything/zk-everything-joe/Hyrax.md:162
#: src/zk-everything/zk-everything-joe/Hyrax.md:168
#: src/zk-everything/zk-everything-joe/Hyrax.md:173
#: src/zk-everything/zk-everything-joe/Hyrax.md:181
#: src/zk-everything/zk-everything-joe/Hyrax.md:191
#: src/zk-everything/zk-everything-joe/Hyrax.md:195
#: src/zk-everything/zk-everything-joe/Hyrax.md:198
#: src/zk-everything/zk-everything-joe/Hyrax.md:201
#: src/zk-everything/zk-everything-joe/Hyrax.md:203
#: src/zk-everything/zk-everything-joe/Hyrax.md:208
#: src/zk-everything/zk-everything-joe/Hyrax.md:214
#: src/zk-everything/zk-everything-joe/Hyrax.md:216
#: src/zk-everything/zk-everything-joe/Hyrax.md:223
#: src/zk-everything/zk-everything-joe/Hyrax.md:228
#: src/zk-everything/zk-everything-joe/Hyrax.md:245
#: src/zk-everything/zk-everything-joe/Hyrax.md:250
#: src/zk-everything/zk-everything-joe/Hyrax.md:254
#: src/zk-everything/zk-everything-joe/Hyrax.md:263
#: src/zk-everything/zk-everything-joe/Hyrax.md:276
#: src/zk-everything/zk-everything-joe/Hyrax.md:277
#: src/zk-everything/zk-everything-joe/Hyrax.md:282
#: src/zk-everything/zk-everything-joe/Hyrax.md:284
#: src/zk-everything/zk-everything-joe/Hyrax.md:292
#: src/zk-everything/zk-everything-joe/Hyrax.md:296
#: src/zk-everything/zk-everything-joe/Hyrax.md:297
#: src/zk-everything/zk-everything-joe/Hyrax.md:302
#: src/zk-everything/zk-everything-joe/Hyrax.md:306
#: src/zk-everything/zk-everything-joe/Hyrax.md:310
#: src/zk-everything/zk-everything-joe/Hyrax.md:311
#: src/zk-everything/zk-everything-joe/Hyrax.md:314
#: src/zk-everything/zk-everything-joe/Hyrax.md:315
#: src/zk-everything/zk-everything-joe/Spartan.md:110
#: src/zk-everything/zk-everything-joe/Spartan.md:115
#: src/zk-everything/zk-everything-joe/Spartan.md:117
#: src/zk-everything/zk-everything-joe/Spartan.md:118
#: src/zk-everything/zk-everything-joe/Spartan.md:122
#: src/zk-everything/zk-everything-joe/Spartan.md:126
#: src/zk-everything/zk-everything-joe/Spartan.md:135
#: src/zk-everything/zk-everything-joe/Spartan.md:136
#: src/zk-everything/zk-everything-joe/Spartan.md:142
#: src/zk-everything/zk-everything-joe/Spartan.md:143
#: src/zk-everything/zk-everything-joe/Spartan.md:147
#: src/zk-everything/zk-everything-joe/Spartan.md:148
#: src/zk-everything/zk-everything-joe/Spartan.md:154
#: src/zk-everything/zk-everything-joe/Spartan.md:155
#: src/zk-everything/zk-everything-joe/Spartan.md:166
#: src/zk-everything/zk-everything-joe/Spartan.md:176
#: src/zk-everything/zk-everything-joe/Spartan.md:177
#: src/zk-everything/zk-everything-joe/Spartan.md:182
#: src/zk-everything/zk-everything-joe/Spartan.md:195
#: src/zk-everything/zk-everything-joe/Spartan.md:200
#: src/zk-everything/zk-everything-joe/Spartan.md:207
#: src/zk-everything/zk-everything-joe/Spartan.md:212
#: src/zk-everything/zk-everything-joe/Spartan.md:217
#: src/zk-everything/zk-everything-joe/Spartan.md:222
#: src/zk-everything/zk-everything-joe/Spartan.md:232
#: src/zk-everything/zk-everything-joe/Spartan.md:236
#: src/zk-everything/zk-everything-joe/Spartan.md:240
#: src/zk-everything/zk-everything-joe/Spartan.md:242
#: src/zk-everything/zk-everything-joe/Spartan.md:246
#: src/zk-everything/zk-everything-joe/Spartan.md:252
#: src/zk-everything/zk-everything-joe/Spartan.md:254
#: src/zk-everything/zk-everything-joe/Spartan.md:257
#: src/zk-everything/zk-everything-joe/Spartan.md:263
#: src/zk-everything/zk-everything-joe/Spartan.md:264
#: src/zk-everything/zk-everything-joe/Spartan.md:268
#: src/zk-everything/zk-everything-joe/Spartan.md:274
#: src/zk-everything/zk-everything-joe/Spartan.md:275
#: src/zk-everything/zk-everything-joe/Spartan.md:278
#: src/zk-everything/zk-everything-joe/Spartan.md:309
#: src/zk-everything/zk-everything-joe/Spartan.md:312
#: src/zk-everything/zk-everything-joe/Spartan.md:319
#: src/zk-everything/zk-everything-joe/Spartan.md:334
#: src/zk-everything/zk-everything-joe/Spartan.md:339
#: src/zk-everything/zk-everything-joe/Spartan.md:343
#: src/zk-everything/zk-everything-joe/Spartan.md:344
#: src/zk-everything/zk-everything-joe/Spartan.md:346
#: src/zk-everything/zk-everything-joe/Spartan.md:347
#: src/zk-everything/zk-everything-joe/Spartan.md:349
#: src/zk-everything/zk-everything-joe/Spartan.md:350
#: src/zk-everything/zk-everything-joe/Spartan.md:353
#: src/zk-everything/zk-everything-joe/Spartan.md:355
#: src/zk-everything/zk-everything-joe/Spartan.md:359
#: src/zk-everything/zk-everything-joe/Spartan.md:360
#: src/zk-everything/zk-everything-joe/Spartan.md:361
#: src/zk-everything/zk-everything-joe/Spartan.md:377
#: src/zk-everything/zk-everything-joe/Spartan.md:382
#: src/zk-everything/zk-everything-joe/Spartan.md:389
#: src/zk-everything/zk-everything-joe/Spartan.md:394
#: src/zk-everything/zk-everything-joe/Spartan.md:396
#: src/zk-everything/zk-everything-joe/Spartan.md:401
#: src/zk-everything/zk-everything-joe/Spartan.md:411
#: src/zk-everything/zk-everything-joe/Spartan.md:416
#: src/zk-everything/zk-everything-joe/Spartan.md:434
#: src/zk-everything/zk-everything-joe/Spartan.md:436
#: src/zk-everything/zk-everything-joe/Spartan.md:441
#: src/zk-everything/zk-everything-joe/Spartan.md:445
#: src/zk-everything/zk-everything-joe/Spartan.md:450
#: src/zk-everything/zk-everything-joe/Spartan.md:455
#: src/zk-everything/zk-everything-joe/Spartan.md:458 src/Nova/SuperNova.md:12
#: src/Nova/SuperNova.md:14 src/Nova/SuperNova.md:17 src/Nova/SuperNova.md:19
#: src/Nova/SuperNova.md:30 src/Nova/SuperNova.md:31 src/Nova/SuperNova.md:66
#: src/Nova/SuperNova.md:68 src/public goods/第二章.md:9
#: goods/第二章.md:10 goods/第二章.md:17 goods/第二章.md:18
#: goods/第二章.md:19 goods/第二章.md:20 goods/第二章.md:25
#: goods/第二章.md:26 goods/第二章.md:33 goods/第二章.md:34
#: goods/第二章.md:40 goods/第二章.md:41 goods/第二章.md:42
#: goods/第二章.md:44 goods/第二章.md:46 goods/第二章.md:48
#: goods/第二章.md:50 goods/第二章.md:52 goods/第二章.md:54
#: goods/第二章.md:56 goods/第二章.md:58 goods/第二章.md:59
#: goods/第二章.md:60 goods/第二章.md:61 goods/第二章.md:65
#: goods/第二章.md:67 goods/第二章.md:70 goods/第二章.md:72
#: goods/第二章.md:74 goods/第二章.md:80 goods/第二章.md:83
#: goods/第二章.md:84 goods/第二章.md:86 goods/第二章.md:89
#: goods/第二章.md:91 goods/第二章.md:97 goods/第二章.md:103
#: goods/第二章.md:147 goods/第二章.md:156 goods/第二章.md:158
#: goods/第二章.md:160 goods/第二章.md:162 goods/第二章.md:170
#: goods/第二章.md:171 goods/第二章.md:175 goods/4-Proving-System.md:58
#: goods/4-Proving-System.md:62 goods/4-Proving-System.md:105
#: goods/4-Proving-System.md:106 goods/4-Proving-System.md:107
#: goods/4-Proving-System.md:117 goods/4-Proving-System.md:122
#: goods/4-Proving-System.md:125 goods/4-Proving-System.md:126
#: goods/4-Proving-System.md:127 goods/4-Proving-System.md:146
#: goods/4-Proving-System.md:151 goods/4-Proving-System.md:155
#: src/materials/ZK-Materials.md:600
msgid "​"
msgstr "​"

#: src/index.md:21 src/zkp-intro/4/zkp-rom.md:151
#: src/plonk-intro-cn/plonk-arithmetization.md:151
#: src/plonk-intro-cn/plonk-arithmetization.md:155
#: src/plonk-intro-cn/plonk-arithmetization.md:237
#: src/plonk-intro-cn/plonk-arithmetization.md:239
#: src/plonk-intro-cn/plonk-arithmetization.md:241
#: src/plonk-intro-cn/plonk-arithmetization.md:249
#: src/plonk-intro-cn/plonk-arithmetization.md:257
#: src/plonk-intro-cn/plonk-lagrange-basis.md:70
#: src/plonk-intro-cn/plonk-lagrange-basis.md:76
#: src/plonk-intro-cn/plonk-lagrange-basis.md:123
#: src/plonk-intro-cn/plonk-constraints.md:116
#: src/plonk-intro-cn/plonk-constraints.md:127
#: src/plonk-intro-cn/plonk-constraints.md:133
#: src/plonk-intro-cn/plonk-constraints.md:159
#: src/plonk-intro-cn/plonk-constraints.md:163
#: src/plonk-intro-cn/plonk-constraints.md:175
#: src/plonk-intro-cn/plonk-constraints.md:185
#: src/plonk-intro-cn/plonk-constraints.md:199
#: src/plonk-intro-cn/plonk-randomizing.md:41
#: src/plonk-intro-cn/plonk-lookup.md:33 src/plonk-intro-cn/plonk-lookup.md:265
#: src/plonk-intro-cn/plonk-lookup.md:269
#: src/plonk-intro-cn/plonk-lookup.md:304
#: src/zk-snarks/4-Construction-Properties.md:121
#: src/zk-snarks/4-Construction-Properties.md:155
#: src/zk-snarks/4-Construction-Properties.md:164
#: src/zk-snarks/4-Construction-Properties.md:172
#: src/zk-snarks/4-Construction-Properties.md:176
#: src/zk-snarks/4-Construction-Properties.md:178
#: src/zk-snarks/4-Construction-Properties.md:184
#: src/zk-snarks/4-Construction-Properties.md:205
#: src/zk-snarks/4-Construction-Properties.md:207
#: src/zk-snarks/4-Construction-Properties.md:209
#: src/zk-snarks/4-Construction-Properties.md:212
#: src/zk-snarks/4-Construction-Properties.md:215
#: src/zk-snarks/4-Construction-Properties.md:217
#: src/zk-snarks/4-Construction-Properties.md:219
#: src/zk-snarks/4-Construction-Properties.md:234
#: src/zk-snarks/4-Construction-Properties.md:235
#: src/zk-snarks/4-Construction-Properties.md:249
#: src/zk-snarks/4-Construction-Properties.md:275
#: src/zk-snarks/4-Construction-Properties.md:279
#: src/zk-snarks/4-Construction-Properties.md:282
#: src/zk-snarks/4-Construction-Properties.md:284
#: src/zk-snarks/4-Construction-Properties.md:287
#: src/zk-snarks/4-Construction-Properties.md:289
#: src/zk-snarks/4-Construction-Properties.md:307
#: src/zk-snarks/4-Construction-Properties.md:309
#: src/zk-snarks/4-Construction-Properties.md:313
#: src/zk-snarks/4-Construction-Properties.md:339
#: src/zk-snarks/4-Construction-Properties.md:340
#: src/zk-snarks/4-Construction-Properties.md:341
#: src/zk-snarks/4-Construction-Properties.md:342
#: src/zk-snarks/4-Construction-Properties.md:345
#: src/zk-snarks/4-Construction-Properties.md:349
#: src/zk-snarks/4-Construction-Properties.md:354
#: src/zk-snarks/4-Construction-Properties.md:357
#: src/zk-snarks/4-Construction-Properties.md:359
#: src/zk-snarks/4-Construction-Properties.md:377
#: src/zk-snarks/4-Construction-Properties.md:379
#: src/zk-snarks/4-Construction-Properties.md:384
#: src/zk-snarks/4-Construction-Properties.md:394
#: src/zk-snarks/4-Construction-Properties.md:395
#: src/zk-snarks/4-Construction-Properties.md:405
#: src/zk-snarks/4-Construction-Properties.md:432
#: src/zk-snarks/4-Construction-Properties.md:434
#: src/zk-snarks/4-Construction-Properties.md:436
#: src/zk-snarks/4-Construction-Properties.md:443
#: src/zk-snarks/5-Pinocchio-Protocol.md:65
#: src/zk-snarks/5-Pinocchio-Protocol.md:83
#: src/zk-snarks/5-Pinocchio-Protocol.md:85
#: src/zk-snarks/5-Pinocchio-Protocol.md:92
#: src/zk-snarks/5-Pinocchio-Protocol.md:94
#: src/zk-snarks/5-Pinocchio-Protocol.md:98
#: src/zk-snarks/5-Pinocchio-Protocol.md:103
#: src/zk-snarks/5-Pinocchio-Protocol.md:106
#: src/zk-snarks/5-Pinocchio-Protocol.md:109
#: src/zk-snarks/5-Pinocchio-Protocol.md:131
#: src/zk-snarks/5-Pinocchio-Protocol.md:132
#: src/zk-snarks/5-Pinocchio-Protocol.md:133
#: src/zk-snarks/5-Pinocchio-Protocol.md:137
#: src/zk-snarks/5-Pinocchio-Protocol.md:142
#: src/zk-snarks/5-Pinocchio-Protocol.md:145
#: src/zk-snarks/5-Pinocchio-Protocol.md:147
#: src/zk-snarks/5-Pinocchio-Protocol.md:151
#: src/zk-snarks/5-Pinocchio-Protocol.md:152
#: src/zk-snarks/5-Pinocchio-Protocol.md:157
#: src/zk-snarks/5-Pinocchio-Protocol.md:160
#: src/zk-snarks/5-Pinocchio-Protocol.md:165
#: src/zk-snarks/5-Pinocchio-Protocol.md:199
#: src/zk-snarks/5-Pinocchio-Protocol.md:202
#: src/zk-snarks/5-Pinocchio-Protocol.md:205
#: src/zk-snarks/5-Pinocchio-Protocol.md:209
#: src/zk-snarks/5-Pinocchio-Protocol.md:212
#: src/zk-snarks/5-Pinocchio-Protocol.md:215
#: src/zk-snarks/5-Pinocchio-Protocol.md:219
#: src/zk-snarks/5-Pinocchio-Protocol.md:225
#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:289 src/zk-everything/zk-everything-joe/Hyrax.md:254
#: src/zk-everything/zk-everything-joe/Hyrax.md:263
#: src/zk-everything/zk-everything-joe/Spartan.md:304
#: src/zk-everything/zk-everything-joe/Spartan.md:323
#: src/zk-everything/zk-everything-joe/Spartan.md:327
#: src/zk-everything/zk-everything-joe/Spartan.md:343 src/public
#: goods/第二章.md:26 goods/第二章.md:33 goods/第二章.md:34
#: goods/第二章.md:97
msgid "O"
msgstr "O"

#: src/index.md:21 src/zkp-intro/1/zkp-back.md:200
#: src/plonk-intro-cn/plonk-permutation.md:58
#: src/plonk-intro-cn/plonk-constraints.md:175
#: src/plonk-intro-cn/plonk-polycom.md:81
#: src/plonk-intro-cn/plonk-randomizing.md:69
#: src/plonk-intro-cn/plonk-lookup.md:304
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:24
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:96
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:138
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:143
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:148
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:168
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:252
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:254
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:256
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:258
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:260
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:261
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:262
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:269
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:271
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:272
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:279
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:313
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:324
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:26
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:29
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:30
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:32
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:43
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:45
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:46
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:57
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:66
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:82
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:85
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:126
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:149
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:151
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:164
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:169
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:175
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:176
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:188
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:189
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:191
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:194
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:218
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:247
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:263
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:265
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:266
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:270
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:274
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:280
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:283
#: src/zk-snarks/3-General-Purpose-Computation.md:66
#: src/zk-snarks/3-General-Purpose-Computation.md:68
#: src/zk-snarks/3-General-Purpose-Computation.md:74
#: src/zk-snarks/3-General-Purpose-Computation.md:75
#: src/zk-snarks/3-General-Purpose-Computation.md:79
#: src/zk-snarks/3-General-Purpose-Computation.md:81
#: src/zk-snarks/3-General-Purpose-Computation.md:83
#: src/zk-snarks/3-General-Purpose-Computation.md:90
#: src/zk-snarks/3-General-Purpose-Computation.md:96
#: src/zk-snarks/3-General-Purpose-Computation.md:102
#: src/zk-snarks/3-General-Purpose-Computation.md:104
#: src/zk-snarks/3-General-Purpose-Computation.md:112
#: src/zk-snarks/3-General-Purpose-Computation.md:122
#: src/zk-snarks/3-General-Purpose-Computation.md:137
#: src/zk-snarks/3-General-Purpose-Computation.md:143
#: src/zk-snarks/3-General-Purpose-Computation.md:155
#: src/zk-snarks/3-General-Purpose-Computation.md:165
#: src/zk-snarks/3-General-Purpose-Computation.md:180
#: src/zk-snarks/3-General-Purpose-Computation.md:182
#: src/zk-snarks/3-General-Purpose-Computation.md:184
#: src/zk-snarks/3-General-Purpose-Computation.md:237
#: src/zk-snarks/3-General-Purpose-Computation.md:243
#: src/zk-snarks/3-General-Purpose-Computation.md:244
#: src/zk-snarks/3-General-Purpose-Computation.md:245
#: src/zk-snarks/3-General-Purpose-Computation.md:250
#: src/zk-snarks/3-General-Purpose-Computation.md:251
#: src/zk-snarks/3-General-Purpose-Computation.md:252
#: src/zk-snarks/3-General-Purpose-Computation.md:256
#: src/zk-snarks/3-General-Purpose-Computation.md:264
#: src/zk-snarks/3-General-Purpose-Computation.md:279
#: src/zk-snarks/3-General-Purpose-Computation.md:295
#: src/zk-snarks/3-General-Purpose-Computation.md:326
#: src/zk-snarks/3-General-Purpose-Computation.md:340
#: src/zk-snarks/3-General-Purpose-Computation.md:347
#: src/zk-snarks/3-General-Purpose-Computation.md:348
#: src/zk-snarks/3-General-Purpose-Computation.md:349
#: src/zk-snarks/3-General-Purpose-Computation.md:350
#: src/zk-snarks/3-General-Purpose-Computation.md:351
#: src/zk-snarks/3-General-Purpose-Computation.md:352
#: src/zk-snarks/3-General-Purpose-Computation.md:355
#: src/zk-snarks/3-General-Purpose-Computation.md:356
#: src/zk-snarks/3-General-Purpose-Computation.md:358
#: src/zk-snarks/3-General-Purpose-Computation.md:360
#: src/zk-snarks/3-General-Purpose-Computation.md:361
#: src/zk-snarks/3-General-Purpose-Computation.md:364
#: src/zk-snarks/3-General-Purpose-Computation.md:366
#: src/zk-snarks/3-General-Purpose-Computation.md:381
#: src/zk-snarks/4-Construction-Properties.md:48
#: src/zk-snarks/4-Construction-Properties.md:63
#: src/zk-snarks/4-Construction-Properties.md:65
#: src/zk-snarks/4-Construction-Properties.md:86
#: src/zk-snarks/4-Construction-Properties.md:105
#: src/zk-snarks/4-Construction-Properties.md:112
#: src/zk-snarks/4-Construction-Properties.md:113
#: src/zk-snarks/4-Construction-Properties.md:117
#: src/zk-snarks/4-Construction-Properties.md:127
#: src/zk-snarks/4-Construction-Properties.md:133
#: src/zk-snarks/4-Construction-Properties.md:134
#: src/zk-snarks/4-Construction-Properties.md:149
#: src/zk-snarks/4-Construction-Properties.md:168
#: src/zk-snarks/4-Construction-Properties.md:170
#: src/zk-snarks/4-Construction-Properties.md:171
#: src/zk-snarks/4-Construction-Properties.md:172
#: src/zk-snarks/4-Construction-Properties.md:184
#: src/zk-snarks/4-Construction-Properties.md:193
#: src/zk-snarks/4-Construction-Properties.md:195
#: src/zk-snarks/4-Construction-Properties.md:196
#: src/zk-snarks/4-Construction-Properties.md:199
#: src/zk-snarks/4-Construction-Properties.md:200
#: src/zk-snarks/4-Construction-Properties.md:207
#: src/zk-snarks/4-Construction-Properties.md:212
#: src/zk-snarks/4-Construction-Properties.md:219
#: src/zk-snarks/4-Construction-Properties.md:221
#: src/zk-snarks/4-Construction-Properties.md:239
#: src/zk-snarks/4-Construction-Properties.md:242
#: src/zk-snarks/4-Construction-Properties.md:244
#: src/zk-snarks/4-Construction-Properties.md:245
#: src/zk-snarks/4-Construction-Properties.md:251
#: src/zk-snarks/4-Construction-Properties.md:271
#: src/zk-snarks/4-Construction-Properties.md:273
#: src/zk-snarks/4-Construction-Properties.md:277
#: src/zk-snarks/4-Construction-Properties.md:279
#: src/zk-snarks/4-Construction-Properties.md:282
#: src/zk-snarks/4-Construction-Properties.md:284
#: src/zk-snarks/4-Construction-Properties.md:289
#: src/zk-snarks/4-Construction-Properties.md:290
#: src/zk-snarks/4-Construction-Properties.md:291
#: src/zk-snarks/4-Construction-Properties.md:296
#: src/zk-snarks/4-Construction-Properties.md:300
#: src/zk-snarks/4-Construction-Properties.md:304
#: src/zk-snarks/4-Construction-Properties.md:307
#: src/zk-snarks/4-Construction-Properties.md:309
#: src/zk-snarks/4-Construction-Properties.md:315
#: src/zk-snarks/4-Construction-Properties.md:317
#: src/zk-snarks/4-Construction-Properties.md:326
#: src/zk-snarks/4-Construction-Properties.md:339
#: src/zk-snarks/4-Construction-Properties.md:354
#: src/zk-snarks/4-Construction-Properties.md:363
#: src/zk-snarks/4-Construction-Properties.md:364
#: src/zk-snarks/4-Construction-Properties.md:368
#: src/zk-snarks/4-Construction-Properties.md:370
#: src/zk-snarks/4-Construction-Properties.md:374
#: src/zk-snarks/4-Construction-Properties.md:375
#: src/zk-snarks/4-Construction-Properties.md:376
#: src/zk-snarks/4-Construction-Properties.md:394
#: src/zk-snarks/4-Construction-Properties.md:400
#: src/zk-snarks/4-Construction-Properties.md:401
#: src/zk-snarks/4-Construction-Properties.md:419
#: src/zk-snarks/4-Construction-Properties.md:420
#: src/zk-snarks/4-Construction-Properties.md:422
#: src/zk-snarks/4-Construction-Properties.md:424
#: src/zk-snarks/4-Construction-Properties.md:428
#: src/zk-snarks/4-Construction-Properties.md:434
#: src/zk-snarks/4-Construction-Properties.md:436
#: src/zk-snarks/4-Construction-Properties.md:438
#: src/zk-snarks/4-Construction-Properties.md:440
#: src/zk-snarks/4-Construction-Properties.md:441
#: src/zk-snarks/4-Construction-Properties.md:443
#: src/zk-snarks/5-Pinocchio-Protocol.md:45
#: src/zk-snarks/5-Pinocchio-Protocol.md:65
#: src/zk-snarks/5-Pinocchio-Protocol.md:87
#: src/zk-snarks/5-Pinocchio-Protocol.md:92
#: src/zk-snarks/5-Pinocchio-Protocol.md:106
#: src/zk-snarks/5-Pinocchio-Protocol.md:109
#: src/zk-snarks/5-Pinocchio-Protocol.md:111
#: src/zk-snarks/5-Pinocchio-Protocol.md:132
#: src/zk-snarks/5-Pinocchio-Protocol.md:137
#: src/zk-snarks/5-Pinocchio-Protocol.md:139
#: src/zk-snarks/5-Pinocchio-Protocol.md:142
#: src/zk-snarks/5-Pinocchio-Protocol.md:155
#: src/zk-snarks/5-Pinocchio-Protocol.md:166
#: src/zk-snarks/5-Pinocchio-Protocol.md:190
#: src/zk-snarks/5-Pinocchio-Protocol.md:195
#: src/zk-snarks/5-Pinocchio-Protocol.md:200
#: src/zk-snarks/5-Pinocchio-Protocol.md:204
#: src/zk-snarks/5-Pinocchio-Protocol.md:207
#: src/halo2/tmp/1-Simple-Example.md:151 src/halo2/tmp/1-Simple-Example.md:552
#: src/halo2/tmp/2-Fibonacci-example-1.md:19 src/halo2/tmp/9-decomposed.md:26
#: src/halo2/tmp/9-decomposed.md:30 src/halo2/tmp/9-decomposed.md:40
#: src/halo2/tmp/9-decomposed.md:43 src/halo2/tmp/9-decomposed.md:47
#: src/halo2/tmp/9-decomposed.md:101
#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:197 SNARKs.md:198 SNARKs.md:320
#: src/zk-everything/zk-everything-joe/Hyrax.md:223
#: src/zk-everything/zk-everything-joe/Hyrax.md:228 src/public
#: goods/第二章.md:50 goods/第二章.md:84 goods/第二章.md:89
#: goods/4-Proving-System.md:58 goods/4-Proving-System.md:60
#: goods/4-Proving-System.md:62 goods/4-Proving-System.md:107
#: goods/4-Proving-System.md:111 goods/4-Proving-System.md:124
#: goods/4-Proving-System.md:127 goods/4-Proving-System.md:129
#: goods/4-Proving-System.md:146 goods/4-Proving-System.md:149
#: goods/4-Proving-System.md:155 goods/4-Proving-System.md:157
#: goods/4-Proving-System.md:204 goods/4-Proving-System.md:207
msgid " "
msgstr " "

#: src/index.md:21
msgid "\\-"
msgstr "\\-"

#: src/index.md:21 src/plonk-intro-cn/plonk-lookup.md:261
#: src/plonk-intro-cn/plonk-lookup.md:265
#: src/plonk-intro-cn/plonk-lookup.md:275
#: src/plonk-intro-cn/plonk-lookup.md:277
#: src/plonk-intro-cn/plonk-lookup.md:304 src/halo2/tmp/9-decomposed.md:37
#: src/halo2/tmp/9-decomposed.md:40 src/halo2/tmp/9-decomposed.md:42
#: src/halo2/tmp/9-decomposed.md:46 src/halo2/tmp/9-decomposed.md:53
#: src/halo2/tmp/9-decomposed.md:60 src/halo2/tmp/9-decomposed.md:61
#: src/halo2/tmp/9-decomposed.md:95 src/halo2/tmp/9-decomposed.md:99
#: src/halo2/tmp/9-decomposed.md:101 src/halo2/tmp/9-decomposed.md:106
#: src/halo2/tmp/9-decomposed.md:108 src/halo2/tmp/9-decomposed.md:126
#: src/halo2/tmp/9-decomposed.md:130 src/halo2/tmp/9-decomposed.md:133
#: src/halo2/tmp/9-decomposed.md:134 src/halo2/tmp/9-decomposed.md:138
#: src/halo2/tmp/9-decomposed.md:139 src/halo2/tmp/9-decomposed.md:142
#: src/halo2/tmp/9-decomposed.md:146 src/halo2/tmp/9-decomposed.md:158
#: src/halo2/tmp/9-decomposed.md:216 src/public goods/4-Proving-System.md:53
#: goods/4-Proving-System.md:55 goods/4-Proving-System.md:60
#: goods/4-Proving-System.md:62 goods/4-Proving-System.md:111
#: goods/4-Proving-System.md:120 goods/4-Proving-System.md:122
#: goods/4-Proving-System.md:149 goods/4-Proving-System.md:155
#: goods/4-Proving-System.md:167 goods/4-Proving-System.md:171
#: goods/4-Proving-System.md:177
msgid "K"
msgstr "K"

#: src/index.md:21 src/plonk-intro-cn/plonk-arithmetization.md:181
#: src/plonk-intro-cn/plonk-lagrange-basis.md:89
#: src/plonk-intro-cn/plonk-constraints.md:63
#: src/plonk-intro-cn/plonk-constraints.md:67
#: src/plonk-intro-cn/plonk-constraints.md:120
#: src/plonk-intro-cn/plonk-lookup.md:18 src/plonk-intro-cn/plonk-lookup.md:43
#: src/plonk-intro-cn/plonk-lookup.md:47 src/plonk-intro-cn/plonk-lookup.md:51
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:148
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:150
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:152
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:252
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:254
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:256
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:260
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:261
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:262
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:269
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:271
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:272
#: src/zk-snarks/4-Construction-Properties.md:155
#: src/zk-snarks/4-Construction-Properties.md:170
#: src/halo2/tmp/9-decomposed.md:182
#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:272
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:281
msgid "7"
msgstr "7"

#: src/index.md:21 src/zkp-intro/1/zkp-back.md:200
#: src/plonk-intro-cn/plonk-polycom.md:225
#: src/plonk-intro-cn/plonk-polycom.md:229
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:24
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:279
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:308
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:313
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:324
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:326
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:332
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:333
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:334
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:337
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:346
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:34
#: src/zk-snarks/5-Pinocchio-Protocol.md:154
#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:207
msgid "E"
msgstr "E"

#: src/index.md:31
msgid "「给贡献者的小帖士」"
msgstr "「给贡献者的小帖士」"

#: src/index.md:33
msgid "贡献流程"
msgstr "贡献流程"

#: src/index.md:35
msgid ""
"Github 上 fork 本 [Repo](https://github.com/zkp-co-learning/zkp-co-learning."
"github.io)"
msgstr ""
"Github 上 fork 本 [Repo](https://github.com/zkp-co-learning/zkp-co-learning."
"github.io)"

#: src/index.md:36
msgid "可以在 `./src/zk-everything` 下 `mkdir` 一个以自己名字命名的文件夹"
msgstr "可以在 `./src/zk-everything` 下 `mkdir` 一个以自己名字命名的文件夹"

#: src/index.md:37
msgid ""
"`src/SUMMARY.md` 是前端网站显示的文件组织目录，可以修改该文件，找到一个合适的"
"放置目录，将文章的本地 `.md` 文件位置链接过去"
msgstr ""
"`src/SUMMARY.md` 是前端网站显示的文件组织目录，可以修改该文件，找到一个合适的"
"放置目录，将文章的本地 `.md` 文件位置链接过去"

#: src/index.md:38
msgid "正常的 PR 流程"
msgstr "正常的 PR 流程"

#: src/index.md:39
msgid "经老师们审核后领取 Bounty！"
msgstr "经老师们审核后领取 Bounty！"

#: src/index.md:41
msgid "文章格式"
msgstr "文章格式"

#: src/index.md:43
msgid "内容模板:"
msgstr "内容模板:"

#: src/index.md:45
msgid ""
"文章 metadata ，如 「贡献者作者信息 (required）」，  「标签、联系方式 "
"(optional） 」"
msgstr ""
"文章 metadata ，如 「贡献者作者信息 (required）」，  「标签、联系方式 "
"(optional） 」"

#: src/index.md:47
msgid ""
"```bash\n"
"> 作者: 如 @大壮 https://github.com/dazhuang      \n"
"> 标签: 如 halo2, Nova, STARK, Folding schema .... # mdbook 暂不支持 tag 功"
"能\n"
"> 时间: 2023-09-10\n"
"```"
msgstr ""
"```bash\n"
"> 作者: 如 @大壮 https://github.com/dazhuang      \n"
"> 标签: 如 halo2, Nova, STARK, Folding schema .... # mdbook 暂不支持 tag 功"
"能\n"
"> 时间: 2023-09-10\n"
"```"

#: src/index.md:53
msgid "作者：[Demian](https://github.com/Demian101)"
msgstr "作者：[Demian](https://github.com/Demian101)"

#: src/index.md:55 src/zkp-intro/1/zkp-back.md:200
#: src/zk-snarks/4-Construction-Properties.md:85
#: src/zk-snarks/4-Construction-Properties.md:304
msgid "or"
msgstr "or"

#: src/index.md:57
msgid "Author: [Demian](https://github.com/Demian101)"
msgstr "Author: [Demian](https://github.com/Demian101)"

#: src/index.md:61
msgid "文章开始之前，可以添加 `[TOC] `来生成该文章的 Table of contents（目录）"
msgstr ""
"文章开始之前，可以添加 `[TOC] `来生成该文章的 Table of contents（目录）"

#: src/index.md:67
msgid ""
"可添加admonition block，语法见[这里](https://tommilligan.github.io/mdbook-"
"admonish/)"
msgstr ""
"可添加admonition block，语法见[这里](https://tommilligan.github.io/mdbook-"
"admonish/)"

#: src/index.md:69
msgid ""
"```admonish success title=\"\"\n"
"This will take a while, go and grab a drink of water.\n"
"```"
msgstr ""
"```admonish success title=\"\"\n"
"This will take a while, go and grab a drink of water.\n"
"```"

#: src/index.md:74
msgid "文章正文（Markdown 格式的正文内容，无需担心 github 糟糕的渲染）"
msgstr "文章正文（Markdown 格式的正文内容，无需担心 github 糟糕的渲染）"

#: src/index.md:76
msgid "文章末尾可以列出 「致谢」 & 「参考文献 References」"
msgstr "文章末尾可以列出 「致谢」 & 「参考文献 References」"

#: src/index.md:78
msgid ""
"```\n"
"# References\n"
" - [trapdoor-tech halo2 book](https://trapdoor-tech.github.io/halo2-book-"
"chinese/user/simple-example.html)\n"
" - [icemelon/HaiCheng Shen](https://github.com/icemelon/halo2-examples/blob/"
"master/src/fibonacci/example3.rs)\n"
" - [0xPARC halo2](https://learn.0xparc.org/)\n"
"```"
msgstr ""
"```\n"
"# References\n"
" - [trapdoor-tech halo2 book](https://trapdoor-tech.github.io/halo2-book-"
"chinese/user/simple-example.html)\n"
" - [icemelon/HaiCheng Shen](https://github.com/icemelon/halo2-examples/blob/"
"master/src/fibonacci/example3.rs)\n"
" - [0xPARC halo2](https://learn.0xparc.org/)\n"
"```"

#: src/index.md:91
msgid "如何添加图片？"
msgstr "如何添加图片？"

#: src/index.md:93
msgid ""
"推荐直接在 `.md` 文章同级目录 `mkdir ./imgs` 目录，mdbook 中直接引用该 imgs "
"目录相对路径"
msgstr ""
"推荐直接在 `.md` 文章同级目录 `mkdir ./imgs` 目录，mdbook 中直接引用该 imgs "
"目录相对路径"

#: src/index.md:94
msgid "如果您使用的是 OSS 云存储，则无需考虑图片存储，只需一个 `.md` 文件即可~"
msgstr ""
"如果您使用的是 OSS 云存储，则无需考虑图片存储，只需一个 `.md` 文件即可~"

#: src/index.md:98
msgid "配套代码(optional)"
msgstr "配套代码(optional)"

#: src/index.md:100
msgid "如果文章有对应的实战代码那就再好不过啦！"
msgstr "如果文章有对应的实战代码那就再好不过啦！"

#: src/index.md:102
msgid ""
"可以直接 PR 到另一个 [Repo](https://github.com/zkp-co-learning/zkp-co-"
"learn)，新建一个目录即可。"
msgstr ""
"可以直接 PR 到另一个 [Repo](https://github.com/zkp-co-learning/zkp-co-"
"learn)，新建一个目录即可。"

#: src/index.md:113
msgid "这边还没想好怎么放，可能后面位置有改动，不过...反正先放就好了 ！"
msgstr "这边还没想好怎么放，可能后面位置有改动，不过...反正先放就好了 ！"

#: src/index.md:116
msgid "关于 md 渲染"
msgstr "关于 md 渲染"

#: src/index.md:118
msgid ""
"众所周知，Github  网站的 `Latex` 等渲染功能非常弱鸡，往往需要一些奇技淫巧才能"
"让公式等正常渲染出来。而在本 MDBOOK 中，您完全不需要关注这种伤害身心的问题，"
"不需要给 github markdown 做专门的适配和魔改。在 Obsidian（或者如 Typora 等主"
"流 Markdown 编辑器）里的  `.md` 文件显示是什么样的，本网站中都可完美无痛渲"
"染！"
msgstr ""
"众所周知，Github  网站的 `Latex` 等渲染功能非常弱鸡，往往需要一些奇技淫巧才能"
"让公式等正常渲染出来。而在本 MDBOOK 中，您完全不需要关注这种伤害身心的问题，"
"不需要给 github markdown 做专门的适配和魔改。在 Obsidian（或者如 Typora 等主"
"流 Markdown 编辑器）里的  `.md` 文件显示是什么样的，本网站中都可完美无痛渲"
"染！"

#: src/index.md:120
msgid "**本地 Dev 预览方法：**"
msgstr "**本地 Dev 预览方法：**"

#: src/index.md:129
msgid "Tips :"
msgstr "Tips :"

#: src/index.md:130
msgid "`src/SUMMARY.md` 是会在前端组织显示的所有文件目录及其链接"
msgstr "`src/SUMMARY.md` 是会在前端组织显示的所有文件目录及其链接"

#: src/index.md:131
msgid ""
"公式测试：可以在 [katex.org](katex.org) 测试，大家在 Obisidian notes 里怎么写"
"公式，前端就会咋显示，"
msgstr ""
"公式测试：可以在 [katex.org](katex.org) 测试，大家在 Obisidian notes 里怎么写"
"公式，前端就会咋显示，"

#: src/index.md:133
msgid "（contribution by PR process）"
msgstr "（contribution by PR process）"

#: src/index.md:149
msgid "[Playlists](#playlists)"
msgstr "[Playlists](#playlists)"

#: src/index.md:150
msgid "[Project Description:](#project-description)"
msgstr "[Project Description:](#project-description)"

#: src/index.md:151
msgid "[Problem Statement:](#problem-statement)"
msgstr "[Problem Statement:](#problem-statement)"

#: src/index.md:152
msgid "[Team Background:](#team-background)"
msgstr "[Team Background:](#team-background)"

#: src/index.md:153
msgid "[Vision and Mission:](#vision-and-mission)"
msgstr "[Vision and Mission:](#vision-and-mission)"

#: src/index.md:154
msgid "[Roadmap:](#roadmap)"
msgstr "[Roadmap:](#roadmap)"

#: src/index.md:155
msgid "[Project Description：](#project-description-1)"
msgstr "[Project Description：](#project-description-1)"

#: src/index.md:156
msgid "[Problem Statement](#problem-statement-1)"
msgstr "[Problem Statement](#problem-statement-1)"

#: src/index.md:157
msgid "[Team Background](#team-background-1)"
msgstr "[Team Background](#team-background-1)"

#: src/index.md:158
msgid "[愿景](#愿景)"
msgstr "[愿景](#愿景)"

#: src/index.md:159
msgid "[Roadmap](#roadmap-1)"
msgstr "[Roadmap](#roadmap-1)"

#: src/index.md:160
msgid "[投稿](#投稿)"
msgstr "[投稿](#投稿)"

#: src/index.md:161
msgid "[Themes ！](#themes-)"
msgstr "[Themes ！](#themes-)"

#: src/index.md:165
msgid "Playlists"
msgstr "Playlists"

#: src/index.md:168
msgid ""
"[Overview of jolt and lasso CN](https://www.youtube.com/watch?"
"v=vDvyzVsyJm4&list=PLbQFt1T_44DySCe3glmsa6DoCJNFftCo5&index=1&t=2s&pp=iAQB) "
msgstr ""
"[Overview of jolt and lasso CN](https://www.youtube.com/watch?"
"v=vDvyzVsyJm4&list=PLbQFt1T_44DySCe3glmsa6DoCJNFftCo5&index=1&t=2s&pp=iAQB) "

#: src/index.md:170
msgid ""
"[Simple example for lasso CN](https://www.youtube.com/watch?"
"v=w4UcrbKKjEo&list=PLbQFt1T_44DySCe3glmsa6DoCJNFftCo5&index=2)"
msgstr ""
"[Simple example for lasso CN](https://www.youtube.com/watch?"
"v=w4UcrbKKjEo&list=PLbQFt1T_44DySCe3glmsa6DoCJNFftCo5&index=2)"

#: src/index.md:172
msgid ""
"[ProtoStar Compressing verification CN](https://www.youtube.com/watch?"
"v=aHjrkWUvJ8g&list=PLbQFt1T_44DySCe3glmsa6DoCJNFftCo5&index=3)"
msgstr ""
"[ProtoStar Compressing verification CN](https://www.youtube.com/watch?"
"v=aHjrkWUvJ8g&list=PLbQFt1T_44DySCe3glmsa6DoCJNFftCo5&index=3)"

#: src/index.md:174
msgid ""
"[Some details of lasso polynomial commitment CN](https://www.youtube.com/"
"watch?v=VfJogiQ---A&list=PLbQFt1T_44DySCe3glmsa6DoCJNFftCo5&index=4)"
msgstr ""
"[Some details of lasso polynomial commitment CN](https://www.youtube.com/"
"watch?v=VfJogiQ---A&list=PLbQFt1T_44DySCe3glmsa6DoCJNFftCo5&index=4)"

#: src/index.md:176
msgid ""
"[Differences Between Nova and HyperNova CN](https://www.youtube.com/watch?"
"v=VKZMZuKZ7JI&list=PLbQFt1T_44DySCe3glmsa6DoCJNFftCo5&index=5)"
msgstr ""
"[Differences Between Nova and HyperNova CN](https://www.youtube.com/watch?"
"v=VKZMZuKZ7JI&list=PLbQFt1T_44DySCe3glmsa6DoCJNFftCo5&index=5)"

#: src/index.md:178
msgid ""
"[Cycle fold based NOVA CN](https://www.youtube.com/watch?"
"v=LoXX6EAUTYc&list=PLbQFt1T_44DySCe3glmsa6DoCJNFftCo5&index=6)"
msgstr ""
"[Cycle fold based NOVA CN](https://www.youtube.com/watch?"
"v=LoXX6EAUTYc&list=PLbQFt1T_44DySCe3glmsa6DoCJNFftCo5&index=6)"

#: src/index.md:180
msgid ""
"[Nova relaxed R1CS and it’s implementation CN](https://www.youtube.com/watch?"
"v=7Zs_Y-wVrP0&list=PLbQFt1T_44DySCe3glmsa6DoCJNFftCo5&index=7)"
msgstr ""
"[Nova relaxed R1CS and it’s implementation CN](https://www.youtube.com/watch?"
"v=7Zs_Y-wVrP0&list=PLbQFt1T_44DySCe3glmsa6DoCJNFftCo5&index=7)"

#: src/index.md:182
msgid ""
"[Protostar Accumulation scheme for NARK’s verifier checks CN](https://www."
"youtube.com/watch?"
"v=3ag5jZh5OHQ&list=PLbQFt1T_44DySCe3glmsa6DoCJNFftCo5&index=8)"
msgstr ""
"[Protostar Accumulation scheme for NARK’s verifier checks CN](https://www."
"youtube.com/watch?"
"v=3ag5jZh5OHQ&list=PLbQFt1T_44DySCe3glmsa6DoCJNFftCo5&index=8)"

#: src/index.md:184
msgid ""
"[ProtoStar Overview CN](https://www.youtube.com/watch?v=MNZ-"
"Sm7jQic&list=PLbQFt1T_44DySCe3glmsa6DoCJNFftCo5&index=9)"
msgstr ""
"[ProtoStar Overview CN](https://www.youtube.com/watch?v=MNZ-"
"Sm7jQic&list=PLbQFt1T_44DySCe3glmsa6DoCJNFftCo5&index=9)"

#: src/index.md:187
msgid "**Nova Study session**"
msgstr "**Nova Study session**"

#: src/index.md:189
msgid ""
"[Nova讨论-Primary和Secondary电路 CN](https://www.youtube.com/watch?"
"v=gopJn_QAdqU&list=PLbQFt1T_44DwtG7Qv_BEyCP_t37qT9yMV&index=1)"
msgstr ""
"[Nova讨论-Primary和Secondary电路 CN](https://www.youtube.com/watch?"
"v=gopJn_QAdqU&list=PLbQFt1T_44DwtG7Qv_BEyCP_t37qT9yMV&index=1)"

#: src/index.md:191
msgid ""
"[Nova讨论-延展性攻击 CN](https://www.youtube.com/watch?"
"v=z4aEW9hxEs8&list=PLbQFt1T_44DwtG7Qv_BEyCP_t37qT9yMV&index=2)"
msgstr ""
"[Nova讨论-延展性攻击 CN](https://www.youtube.com/watch?"
"v=z4aEW9hxEs8&list=PLbQFt1T_44DwtG7Qv_BEyCP_t37qT9yMV&index=2)"

#: src/index.md:193
msgid ""
"[Nova讨论-Spartan协议part1 CN](https://www.youtube.com/watch?"
"v=at2U9iOvEBg&list=PLbQFt1T_44DwtG7Qv_BEyCP_t37qT9yMV&index=3)"
msgstr ""
"[Nova讨论-Spartan协议part1 CN](https://www.youtube.com/watch?"
"v=at2U9iOvEBg&list=PLbQFt1T_44DwtG7Qv_BEyCP_t37qT9yMV&index=3)"

#: src/index.md:195
msgid ""
"[SuperNova原理及其ROM实现CN](https://www.youtube.com/watch?"
"v=xmMF5qn1T0M&list=PLbQFt1T_44DwtG7Qv_BEyCP_t37qT9yMV&index=4)"
msgstr ""
"[SuperNova原理及其ROM实现CN](https://www.youtube.com/watch?"
"v=xmMF5qn1T0M&list=PLbQFt1T_44DwtG7Qv_BEyCP_t37qT9yMV&index=4)"

#: src/index.md:197
msgid "**ZKML**"
msgstr "**ZKML**"

#: src/index.md:199
msgid ""
"[Painless Zero-Knowledge Circuitry with Nior - Aztec EN](https://www.youtube."
"com/watch?"
"v=jkUIR_aM9JU&list=PLbQFt1T_44DwLHk3TOWUoFMYmVLksr3i6&index=2&t=51s)"
msgstr ""
"[Painless Zero-Knowledge Circuitry with Nior - Aztec EN](https://www.youtube."
"com/watch?"
"v=jkUIR_aM9JU&list=PLbQFt1T_44DwLHk3TOWUoFMYmVLksr3i6&index=2&t=51s)"

#: src/index.md:201
msgid ""
"[Things we should build on ZKML NOW By Dr Cathie @PSE EN](https://www."
"youtube.com/watch?"
"v=fWbKeJeh0fY&list=PLbQFt1T_44DwLHk3TOWUoFMYmVLksr3i6&index=4)"
msgstr ""
"[Things we should build on ZKML NOW By Dr Cathie @PSE EN](https://www."
"youtube.com/watch?"
"v=fWbKeJeh0fY&list=PLbQFt1T_44DwLHk3TOWUoFMYmVLksr3i6&index=4)"

#: src/index.md:203
msgid "**ZK co-learning**"
msgstr "**ZK co-learning**"

#: src/index.md:205
msgid ""
"[halo2 (zkEVM gadgets) 分享者 Dream @Scroll CN](https://www.youtube.com/"
"watch?v=bgYsKXo4his&list=PLbQFt1T_44Dzl6glAwuL9DoegcFFAeipt&index=5)"
msgstr ""
"[halo2 (zkEVM gadgets) 分享者 Dream @Scroll CN](https://www.youtube.com/"
"watch?v=bgYsKXo4his&list=PLbQFt1T_44Dzl6glAwuL9DoegcFFAeipt&index=5)"

#: src/index.md:207
msgid ""
"[PSE - Semaphore CN](https://www.youtube.com/watch?"
"v=jXI4f7F8p94&list=PLbQFt1T_44Dzl6glAwuL9DoegcFFAeipt&index=7)"
msgstr ""
"[PSE - Semaphore CN](https://www.youtube.com/watch?"
"v=jXI4f7F8p94&list=PLbQFt1T_44Dzl6glAwuL9DoegcFFAeipt&index=7)"

#: src/index.md:209
msgid ""
"[代码分享：plonkathon、babyPLONK CN](https://www.youtube.com/watch?"
"v=Qsqk_D_jabg&list=PLbQFt1T_44Dzl6glAwuL9DoegcFFAeipt&index=8)"
msgstr ""
"[代码分享：plonkathon、babyPLONK CN](https://www.youtube.com/watch?"
"v=Qsqk_D_jabg&list=PLbQFt1T_44Dzl6glAwuL9DoegcFFAeipt&index=8)"

#: src/index.md:211
msgid ""
"[用 Python来写简单的加密算法 CN](https://www.youtube.com/watch?"
"v=mnDkTYqU9nM&list=PLbQFt1T_44DwN1zWl-KWhkp3s0LAkF2a8&index=8)"
msgstr ""
"[用 Python来写简单的加密算法 CN](https://www.youtube.com/watch?"
"v=mnDkTYqU9nM&list=PLbQFt1T_44DwN1zWl-KWhkp3s0LAkF2a8&index=8)"

#: src/index.md:213
msgid ""
"[分享 PLONK 原理 一 CN](https://www.youtube.com/watch?"
"v=HtKmRcSJUG4&list=PLbQFt1T_44DwN1zWl-KWhkp3s0LAkF2a8&index=5)"
msgstr ""
"[分享 PLONK 原理 一 CN](https://www.youtube.com/watch?"
"v=HtKmRcSJUG4&list=PLbQFt1T_44DwN1zWl-KWhkp3s0LAkF2a8&index=5)"

#: src/index.md:215
msgid ""
"[分享 PLONK 原理 二 CN](https://www.youtube.com/watch?"
"v=O5HGp3EHDI0&list=PLbQFt1T_44DwN1zWl-KWhkp3s0LAkF2a8&index=4)"
msgstr ""
"[分享 PLONK 原理 二 CN](https://www.youtube.com/watch?"
"v=O5HGp3EHDI0&list=PLbQFt1T_44DwN1zWl-KWhkp3s0LAkF2a8&index=4)"

#: src/index.md:217
msgid ""
"[分享Plonk 原理 三 Lookup argument CN](https://www.youtube.com/watch?"
"v=StvnHnC4Dk4&list=PLbQFt1T_44DwN1zWl-KWhkp3s0LAkF2a8&index=3)"
msgstr ""
"[分享Plonk 原理 三 Lookup argument CN](https://www.youtube.com/watch?"
"v=StvnHnC4Dk4&list=PLbQFt1T_44DwN1zWl-KWhkp3s0LAkF2a8&index=3)"

#: src/index.md:219
msgid ""
"[郭宇@安比：Nova - Recursive SNARKs without trusted setup CN](https://www."
"youtube.com/watch?v=l19roUItyUE&list=PLbQFt1T_44DwN1zWl-"
"KWhkp3s0LAkF2a8&index=2)"
msgstr ""
"[郭宇@安比：Nova - Recursive SNARKs without trusted setup CN](https://www."
"youtube.com/watch?v=l19roUItyUE&list=PLbQFt1T_44DwN1zWl-"
"KWhkp3s0LAkF2a8&index=2)"

#: src/index.md:221
msgid ""
"[ZKSAFE wallet案例分享 CN](https://www.youtube.com/watch?"
"v=7zPfVUSyrVI&list=PLbQFt1T_44Dx9oPmtQBZzhlPkxsGqjLm0&index=7)"
msgstr ""
"[ZKSAFE wallet案例分享 CN](https://www.youtube.com/watch?"
"v=7zPfVUSyrVI&list=PLbQFt1T_44Dx9oPmtQBZzhlPkxsGqjLm0&index=7)"

#: src/index.md:223
msgid ""
"[From +-/ to Elliptic Curve @Boyuan Feng CN](https://www.youtube.com/watch?"
"v=XLgvaccfx64&list=PLbQFt1T_44Dx9oPmtQBZzhlPkxsGqjLm0&index=5)"
msgstr ""
"[From +-/ to Elliptic Curve @Boyuan Feng CN](https://www.youtube.com/watch?"
"v=XLgvaccfx64&list=PLbQFt1T_44Dx9oPmtQBZzhlPkxsGqjLm0&index=5)"

#: src/index.md:225
msgid ""
"[zkiap session 6 & 8 QA @Jason Mortan EN](https://www.youtube.com/watch?"
"v=ZxpA0gyjEn4&list=PLbQFt1T_44Dx9oPmtQBZzhlPkxsGqjLm0&index=4)"
msgstr ""
"[zkiap session 6 & 8 QA @Jason Mortan EN](https://www.youtube.com/watch?"
"v=ZxpA0gyjEn4&list=PLbQFt1T_44Dx9oPmtQBZzhlPkxsGqjLm0&index=4)"

#: src/index.md:228
msgid ""
"[Zkstudy Session 01: Spartan sum-check part 1 EN](https://www.youtube.com/"
"watch?v=qvLmM3AYmhs&list=PLbQFt1T_44DylOOLHiWCIpVGJsrXHhzbs&index=9)"
msgstr ""
"[Zkstudy Session 01: Spartan sum-check part 1 EN](https://www.youtube.com/"
"watch?v=qvLmM3AYmhs&list=PLbQFt1T_44DylOOLHiWCIpVGJsrXHhzbs&index=9)"

#: src/index.md:230
msgid ""
"[ZKstudy Session 02 - Spartan: Encoding of R1CS  EN](https://www.youtube.com/"
"watch?v=BLh_o2lZAbw&list=PLbQFt1T_44DylOOLHiWCIpVGJsrXHhzbs&index=8)"
msgstr ""
"[ZKstudy Session 02 - Spartan: Encoding of R1CS  EN](https://www.youtube.com/"
"watch?v=BLh_o2lZAbw&list=PLbQFt1T_44DylOOLHiWCIpVGJsrXHhzbs&index=8)"

#: src/index.md:232
msgid ""
"[ZKstudy Session 03 - CCS: Represent R1CS and Plonkish EN](https://www."
"youtube.com/watch?"
"v=LPuMWgvJWgc&list=PLbQFt1T_44DylOOLHiWCIpVGJsrXHhzbs&index=7)"
msgstr ""
"[ZKstudy Session 03 - CCS: Represent R1CS and Plonkish EN](https://www."
"youtube.com/watch?"
"v=LPuMWgvJWgc&list=PLbQFt1T_44DylOOLHiWCIpVGJsrXHhzbs&index=7)"

#: src/index.md:234
msgid ""
"[ZKstudy Session 04 - 1- Represent R1CS and Plonkish; SuperSpartan's "
"polynomial IOP for CCS EN](https://www.youtube.com/watch?"
"v=D4HmInmuaYI&list=PLbQFt1T_44DylOOLHiWCIpVGJsrXHhzbs&index=6)"
msgstr ""
"[ZKstudy Session 04 - 1- Represent R1CS and Plonkish; SuperSpartan's "
"polynomial IOP for CCS EN](https://www.youtube.com/watch?"
"v=D4HmInmuaYI&list=PLbQFt1T_44DylOOLHiWCIpVGJsrXHhzbs&index=6)"

#: src/index.md:236
msgid ""
"[ZKstudy Session 04 - 2- Represent R1CS and Plonkish; SuperSpartan's "
"polynomial IOP for CCS EN](https://www.youtube.com/watch?"
"v=xojrRDeBW2A&list=PLbQFt1T_44DylOOLHiWCIpVGJsrXHhzbs&index=5)"
msgstr ""
"[ZKstudy Session 04 - 2- Represent R1CS and Plonkish; SuperSpartan's "
"polynomial IOP for CCS EN](https://www.youtube.com/watch?"
"v=xojrRDeBW2A&list=PLbQFt1T_44DylOOLHiWCIpVGJsrXHhzbs&index=5)"

#: src/index.md:238
msgid ""
"[Nova p1: Recursive Snarks and IVC EN](https://www.youtube.com/watch?"
"v=smOPs0bWen0&list=PLbQFt1T_44DylOOLHiWCIpVGJsrXHhzbs&index=4)"
msgstr ""
"[Nova p1: Recursive Snarks and IVC EN](https://www.youtube.com/watch?"
"v=smOPs0bWen0&list=PLbQFt1T_44DylOOLHiWCIpVGJsrXHhzbs&index=4)"

#: src/index.md:240
msgid ""
"[Nova p2 - folding schemes for r1cs EN](https://www.youtube.com/watch?"
"v=ZPH1dC54t0k&list=PLbQFt1T_44DylOOLHiWCIpVGJsrXHhzbs&index=3)"
msgstr ""
"[Nova p2 - folding schemes for r1cs EN](https://www.youtube.com/watch?"
"v=ZPH1dC54t0k&list=PLbQFt1T_44DylOOLHiWCIpVGJsrXHhzbs&index=3)"

#: src/index.md:242
msgid ""
"[Nova: IVC from folding scheme - ZKstudy Session 07 EN](https://www.youtube."
"com/watch?v=xpgDdTqPnSg&list=PLbQFt1T_44DylOOLHiWCIpVGJsrXHhzbs&index=2) "
"[Hypernova - ZKstudy Session 08 EN](https://www.youtube.com/watch?"
"v=oRhA3pLvsV0&list=PLbQFt1T_44DylOOLHiWCIpVGJsrXHhzbs&index=1)"
msgstr ""
"[Nova: IVC from folding scheme - ZKstudy Session 07 EN](https://www.youtube."
"com/watch?v=xpgDdTqPnSg&list=PLbQFt1T_44DylOOLHiWCIpVGJsrXHhzbs&index=2) "
"[Hypernova - ZKstudy Session 08 EN](https://www.youtube.com/watch?"
"v=oRhA3pLvsV0&list=PLbQFt1T_44DylOOLHiWCIpVGJsrXHhzbs&index=1)"

#: src/index.md:246
msgid ""
"[Scroll主题分享 zkrollup 线下 CN](https://www.youtube.com/watch?v=aNvI-"
"P9livQ&list=PLbQFt1T_44DyVlo_E6o2TaK_nGdmEr2n-&index=3)"
msgstr ""
"[Scroll主题分享 zkrollup 线下 CN](https://www.youtube.com/watch?v=aNvI-"
"P9livQ&list=PLbQFt1T_44DyVlo_E6o2TaK_nGdmEr2n-&index=3)"

#: src/index.md:248
msgid ""
"[Scroll 分享 zkEVM  CN](https://www.youtube.com/watch?"
"v=ZmEnhbIxKyE&list=PLbQFt1T_44DyVlo_E6o2TaK_nGdmEr2n-&index=2)"
msgstr ""
"[Scroll 分享 zkEVM  CN](https://www.youtube.com/watch?"
"v=ZmEnhbIxKyE&list=PLbQFt1T_44DyVlo_E6o2TaK_nGdmEr2n-&index=2)"

#: src/index.md:250
msgid ""
"[Towards trustless cross-chain communication from MPC to Zero-knowledge EN]"
"(https://www.youtube.com/watch?"
"v=3whHesGCNcM&list=PLbQFt1T_44DzJsnfxQDgO3PaO8-LowVgo&index=2)"
msgstr ""
"[Towards trustless cross-chain communication from MPC to Zero-knowledge EN]"
"(https://www.youtube.com/watch?"
"v=3whHesGCNcM&list=PLbQFt1T_44DzJsnfxQDgO3PaO8-LowVgo&index=2)"

#: src/index.md:252
msgid ""
"[Schnorr sequencer & KZG RLN EN](https://www.youtube.com/watch?v=JvAHd3t_4yc)"
msgstr ""
"[Schnorr sequencer & KZG RLN EN](https://www.youtube.com/watch?v=JvAHd3t_4yc)"

#: src/index.md:254
msgid ""
"[Autonomous world & quick intro to tornado cash's privacyEN](https://www."
"youtube.com/watch?v=CZixqJ7Pv84)"
msgstr ""
"[Autonomous world & quick intro to tornado cash's privacyEN](https://www."
"youtube.com/watch?v=CZixqJ7Pv84)"

#: src/index.md:256
msgid ""
"[Chiquito and infinite garden ZKP Workshop EN](https://www.youtube.com/watch?"
"v=7opMtn-3gjQ&t=3955s)"
msgstr ""
"[Chiquito and infinite garden ZKP Workshop EN](https://www.youtube.com/watch?"
"v=7opMtn-3gjQ&t=3955s)"

#: src/index.md:258
msgid ""
"[ZKML with EZKL sharing session EN](https://www.youtube.com/watch?"
"v=QgAuzsSbcik)"
msgstr ""
"[ZKML with EZKL sharing session EN](https://www.youtube.com/watch?"
"v=QgAuzsSbcik)"

#: src/index.md:262
msgid "Project Description:"
msgstr "Project Description:"

#: src/index.md:264
msgid ""
"zkp-co-learning is a Zero-Knowledge Proofs (ZKP) collaborative study and "
"creation project that has been running for three terms. Since February 2023, "
"we have studied https://zkiap.com/, zk-learning.org, plonkathon codes and "
"more with over 300 participants. We are currently preparing advanced content "
"for zk-learning.org.(like Nova、STARK...)"
msgstr ""
"zkp-co-learning is a Zero-Knowledge Proofs (ZKP) collaborative study and "
"creation project that has been running for three terms. Since February 2023, "
"we have studied https://zkiap.com/, zk-learning.org, plonkathon codes and "
"more with over 300 participants. We are currently preparing advanced content "
"for zk-learning.org.(like Nova、STARK...)"

#: src/index.md:266
msgid ""
"zkp-co-learning offers bounties to incentivize learners for their technical "
"sharing, actively becoming community maintainers (Maintainer), and for "
"organizing knowledge in the ZKP field. Together, we aim to improve ZKP "
"Public Goods."
msgstr ""
"zkp-co-learning offers bounties to incentivize learners for their technical "
"sharing, actively becoming community maintainers (Maintainer), and for "
"organizing knowledge in the ZKP field. Together, we aim to improve ZKP "
"Public Goods."

#: src/index.md:268
msgid "Problem Statement:"
msgstr "Problem Statement:"

#: src/index.md:270
msgid ""
"Currently, there are challenges related to high barriers to entry, "
"difficulty in learning in the ZKP field, lack of learning communities, and "
"the overwhelming and opaque nature of information. We intend to address "
"these issues specifically through zkp-co-learning."
msgstr ""
"Currently, there are challenges related to high barriers to entry, "
"difficulty in learning in the ZKP field, lack of learning communities, and "
"the overwhelming and opaque nature of information. We intend to address "
"these issues specifically through zkp-co-learning."

#: src/index.md:272
msgid "Team Background:"
msgstr "Team Background:"

#: src/index.md:274
msgid "Qi Zhou: Founder of ETHStorage"
msgstr "Qi Zhou: Founder of ETHStorage"

#: src/index.md:275
msgid ""
"郭宇@Secbit: Founder of Secbit, https://github.com/sec-bit, https://secbit."
"io/"
msgstr ""
"郭宇@Secbit: Founder of Secbit, https://github.com/sec-bit, https://secbit."
"io/"

#: src/index.md:276
msgid ""
"Kurt Pan: Ph.D. in Cryptography from Fudan University, https://github.com/"
"kurtpan666 / https://cryptography.land/"
msgstr ""
"Kurt Pan: Ph.D. in Cryptography from Fudan University, https://github.com/"
"kurtpan666 / https://cryptography.land/"

#: src/index.md:277
msgid ""
"Harry L: co-Founder of Rebase Community Core Contributor @Antalpha_Labs."
msgstr ""
"Harry L: co-Founder of Rebase Community Core Contributor @Antalpha_Labs."

#: src/index.md:278
msgid "Shirlene 孝羽: director of Creators Co-learning Community"
msgstr "Shirlene 孝羽: director of Creators Co-learning Community"

#: src/index.md:279
msgid ""
"Demian: zkp-co-learning community maintainer, former JD.com algorithm "
"engineer, https://github.com/Demian101"
msgstr ""
"Demian: zkp-co-learning community maintainer, former JD.com algorithm "
"engineer, https://github.com/Demian101"

#: src/index.md:280
msgid ""
"Our Maintainers: dream@Scroll, Po@EthStorage, 0xhhh@EthStorage, Frank Jz "
"Liu, miles, 白菜, KEEP, CJ, 笃行, 阳小雪, 啊咪咪小熊, 饭卡里还有不少钱呢..."
msgstr ""
"Our Maintainers: dream@Scroll, Po@EthStorage, 0xhhh@EthStorage, Frank Jz "
"Liu, miles, 白菜, KEEP, CJ, 笃行, 阳小雪, 啊咪咪小熊, 饭卡里还有不少钱呢..."

#: src/index.md:281
msgid "sponsoring agency: \\[Antalpha Labs\\]"
msgstr "sponsoring agency: \\[Antalpha Labs\\]"

#: src/index.md:283
msgid "Vision and Mission:"
msgstr "Vision and Mission:"

#: src/index.md:285
msgid ""
"Continue to recruit Maintainers to collaboratively manage the community and "
"answer questions."
msgstr ""
"Continue to recruit Maintainers to collaboratively manage the community and "
"answer questions."

#: src/index.md:286
msgid "Operate technical media and Twitter to expand influence."
msgstr "Operate technical media and Twitter to expand influence."

#: src/index.md:287
msgid "Utilize zk technology to support a broader range of web3 applications. "
msgstr ""
"Utilize zk technology to support a broader range of web3 applications. "

#: src/index.md:289
msgid "Roadmap:"
msgstr "Roadmap:"

#: src/index.md:291
msgid "We plan to accomplish the following tasks within 6 months:"
msgstr "We plan to accomplish the following tasks within 6 months:"

#: src/index.md:292
msgid ""
"Launch the zkp-co-learning.xyz website and aim for: 1.1 Comprehensive ZKP "
"learning path sorting and a clear, seamless learning guide.  1.2. zk "
"Hackthon information gathering, allowing everyone to showcase and discuss "
"ideas, and team up for Hackthon.  1.3. Distribute bounties, allowing anyone "
"interested to participate and contribute knowledge and content."
msgstr ""
"Launch the zkp-co-learning.xyz website and aim for: 1.1 Comprehensive ZKP "
"learning path sorting and a clear, seamless learning guide.  1.2. zk "
"Hackthon information gathering, allowing everyone to showcase and discuss "
"ideas, and team up for Hackthon.  1.3. Distribute bounties, allowing anyone "
"interested to participate and contribute knowledge and content."

#: src/index.md:296
msgid ""
"Complete research on at least 5 open-source projects for EF PSE. (https://"
"www.appliedzkp.org/projects)"
msgstr ""
"Complete research on at least 5 open-source projects for EF PSE. (https://"
"www.appliedzkp.org/projects)"

#: src/index.md:297
msgid "Host a Hackthon or Hackerhouse to put theory into project practice."
msgstr "Host a Hackthon or Hackerhouse to put theory into project practice."

#: src/index.md:298
msgid ""
"Develop at least one zk application project with specific needs and use "
"cases."
msgstr ""
"Develop at least one zk application project with specific needs and use "
"cases."

#: src/index.md:299
msgid ""
"Organize and open-source the vast amount of zk materials that have "
"accumulated and scattered within the current co-learning GROUP."
msgstr ""
"Organize and open-source the vast amount of zk materials that have "
"accumulated and scattered within the current co-learning GROUP."

#: src/index.md:300
msgid ""
"Attract at least 200 more people to participate in zkp technology learning "
"and engage at least 20 developers in the development of zkp projects."
msgstr ""
"Attract at least 200 more people to participate in zkp technology learning "
"and engage at least 20 developers in the development of zkp projects."

#: src/index.md:305
msgid "Project Description："
msgstr "Project Description："

#: src/index.md:307
msgid ""
"zkp-co-learning 是一个已经持续了 3 期的 ZKP 共学共创项目，从 2023 年 2 月至"
"今，我们与 300+ 学员共同研究了 https://zkiap.com/ ，zk-learning.org ，"
"plonkathon 代码等，目前正在筹备 zk-learning.org 的进阶内容"
msgstr ""
"zkp-co-learning 是一个已经持续了 3 期的 ZKP 共学共创项目，从 2023 年 2 月至"
"今，我们与 300+ 学员共同研究了 https://zkiap.com/ ，zk-learning.org ，"
"plonkathon 代码等，目前正在筹备 zk-learning.org 的进阶内容"

#: src/index.md:309
msgid ""
"zkp-co-learning 针对学员的技术分享，积极成为社群维护者（Maintainer），ZKP 领"
"域的知识整理，都会提供对应的 bounty 来激励他们，共同完善 ZKP Public Goods"
msgstr ""
"zkp-co-learning 针对学员的技术分享，积极成为社群维护者（Maintainer），ZKP 领"
"域的知识整理，都会提供对应的 bounty 来激励他们，共同完善 ZKP Public Goods"

#: src/index.md:312
msgid "Problem Statement"
msgstr "Problem Statement"

#: src/index.md:314
msgid ""
"目前，针对 ZKP 领域学习门槛高、难度大，学习社群缺乏，信息庞杂不透明的情况，我"
"们意图通过 zkp-co-learning 来针对性地解决这些问题"
msgstr ""
"目前，针对 ZKP 领域学习门槛高、难度大，学习社群缺乏，信息庞杂不透明的情况，我"
"们意图通过 zkp-co-learning 来针对性地解决这些问题"

#: src/index.md:317
msgid "Team Background"
msgstr "Team Background"

#: src/index.md:319
msgid "as above."
msgstr "as above."

#: src/index.md:322
msgid "愿景"
msgstr "愿景"

#: src/index.md:324
msgid "继续招募 Maintainer 来共同维护社区，解答大家的问题"
msgstr "继续招募 Maintainer 来共同维护社区，解答大家的问题"

#: src/index.md:325
msgid "运营技术媒体与 Twitter，扩大影响力"
msgstr "运营技术媒体与 Twitter，扩大影响力"

#: src/index.md:326
msgid "利用 zkp 技术支持更广泛场景的 web3 应用"
msgstr "利用 zkp 技术支持更广泛场景的 web3 应用"

#: src/index.md:329
msgid "Roadmap"
msgstr "Roadmap"

#: src/index.md:331
msgid "我们计划使用 5 个月的时间完成以下事务："
msgstr "我们计划使用 5 个月的时间完成以下事务："

#: src/index.md:332
msgid ""
"上线 zkp-co-learning.xyz 网站，完成：1. ZKP 完整学习路径梳理，清晰无痛的学习"
"指南  2. zkp Hackthon 信息收集，让大家展示交流 ideas，组队 Hackthon  3. "
"bounty 放送，让每个感兴趣的人都能参与其中，进行学识和内容的贡献"
msgstr ""
"上线 zkp-co-learning.xyz 网站，完成：1. ZKP 完整学习路径梳理，清晰无痛的学习"
"指南  2. zkp Hackthon 信息收集，让大家展示交流 ideas，组队 Hackthon  3. "
"bounty 放送，让每个感兴趣的人都能参与其中，进行学识和内容的贡献"

#: src/index.md:333
msgid "完成至少 5 个 EF PSE 的开源项目 Research"
msgstr "完成至少 5 个 EF PSE 的开源项目 Research"

#: src/index.md:334
msgid "举办一次 Hackthon 或 Hackerhouse 来将理论付诸项目实践"
msgstr "举办一次 Hackthon 或 Hackerhouse 来将理论付诸项目实践"

#: src/index.md:335
msgid "完成至少 1 个具有需求和使用场景的 zkp 应用项目的研发"
msgstr "完成至少 1 个具有需求和使用场景的 zkp 应用项目的研发"

#: src/index.md:336
msgid "整理与开源目前共学 GROUP 里面沉淀散落的大量 zkp 资料"
msgstr "整理与开源目前共学 GROUP 里面沉淀散落的大量 zkp 资料"

#: src/index.md:337
msgid ""
"再吸引至少 200 人参与到 zkp 技术的学习中，让至少 20 名开发者参与到 zkp 项目的"
"研发中"
msgstr ""
"再吸引至少 200 人参与到 zkp 技术的学习中，让至少 20 名开发者参与到 zkp 项目的"
"研发中"

#: src/index.md:344
msgid "投稿"
msgstr "投稿"

#: src/index.md:345
msgid ""
"欢迎大家把自己在写的内容放在这里， \\[zk-everything\\] 我们会同时排版到"
"Antalpha Labs的公众号下.(最好留下联系方式，方便后续跟进）"
msgstr ""
"欢迎大家把自己在写的内容放在这里， \\[zk-everything\\] 我们会同时排版到"
"Antalpha Labs的公众号下.(最好留下联系方式，方便后续跟进）"

#: src/index.md:347
msgid "投稿流程："
msgstr "投稿流程："

#: src/index.md:348
msgid ""
"fork this repo and clone it to local machine (choose `for your own use`)"
msgstr ""
"fork this repo and clone it to local machine (choose `for your own use`)"

#: src/index.md:349
msgid "copy directy `.md` file into `src` folder"
msgstr "copy directy `.md` file into `src` folder"

#: src/index.md:350
msgid ""
"In `src/SUMMARY.md` (i.e the structure file of mdbook), add link to your "
"newlly added posts"
msgstr ""
"In `src/SUMMARY.md` (i.e the structure file of mdbook), add link to your "
"newlly added posts"

#: src/index.md:351
msgid "commit and push"
msgstr "commit and push"

#: src/index.md:352
msgid "to make a PR and wait to merge"
msgstr "to make a PR and wait to merge"

#: src/index.md:358
msgid "Themes ！"
msgstr "Themes ！"

#: src/index.md:359
msgid "自由选题，完成学习并分享可得 **Bounty** ，推荐 PSE 开源项目 ~"
msgstr "自由选题，完成学习并分享可得 **Bounty** ，推荐 PSE 开源项目 ~"

#: src/index.md:360
msgid "\\[Meeting PSE Share\\]"
msgstr "\\[Meeting PSE Share\\]"

#: src/index.md:362
msgid ""
"年底[土耳其 ZKP HackerHouse](https://labs.antalpha.com/hackerhouse/istanbul/)"
"等你来 ！！"
msgstr ""
"年底[土耳其 ZKP HackerHouse](https://labs.antalpha.com/hackerhouse/istanbul/)"
"等你来 ！！"

#: src/beginner.md:3
msgid ""
"💡 作为 zkp 新人，走了很多弯路，也整理下自己的学习路径和一些参考资料供大家入"
"门。 希望本教程可以帮助减少一些盲目的打击和莫名的痛苦，节省一点点时间"
msgstr ""
"💡 作为 zkp 新人，走了很多弯路，也整理下自己的学习路径和一些参考资料供大家入"
"门。 希望本教程可以帮助减少一些盲目的打击和莫名的痛苦，节省一点点时间"

#: src/beginner.md:5
msgid "[1. 建立对 zkp 的直观理解](#1-建立对-zkp-的直观理解)"
msgstr "[1. 建立对 zkp 的直观理解](#1-建立对-zkp-的直观理解)"

#: src/beginner.md:6
msgid "[2. 最小必要背景知识](#2-最小必要背景知识)"
msgstr "[2. 最小必要背景知识](#2-最小必要背景知识)"

#: src/beginner.md:7
msgid "[2.1 椭圆曲线 ECC](#21-椭圆曲线-ecc)"
msgstr "[2.1 椭圆曲线 ECC](#21-椭圆曲线-ecc)"

#: src/beginner.md:8
msgid "[2.2 基础的群论、数论](#22-基础的群论数论)"
msgstr "[2.2 基础的群论、数论](#22-基础的群论数论)"

#: src/beginner.md:9
msgid "[2.3 密码学基础](#23-密码学基础)"
msgstr "[2.3 密码学基础](#23-密码学基础)"

#: src/beginner.md:10
msgid "[2.4 ZK-SNARK 初识 & 原理:](#24-zk-snark-初识--原理)"
msgstr "[2.4 ZK-SNARK 初识 & 原理:](#24-zk-snark-初识--原理)"

#: src/beginner.md:11
msgid "[3. 理论交叉学习，我反复入门啊！](#3-理论交叉学习我反复入门啊)"
msgstr "[3. 理论交叉学习，我反复入门啊！](#3-理论交叉学习我反复入门啊)"

#: src/beginner.md:12
msgid "[4. PLONK 协议の奥义](#4-plonk-协议の奥义)"
msgstr "[4. PLONK 协议の奥义](#4-plonk-协议の奥义)"

#: src/beginner.md:13
msgid "[《理解 Plonk》](#理解-plonk)"
msgstr "[《理解 Plonk》](#理解-plonk)"

#: src/beginner.md:14
msgid "[PLONK 代码实践](#plonk-代码实践)"
msgstr "[PLONK 代码实践](#plonk-代码实践)"

#: src/beginner.md:15
msgid "[5. 要不...来点代码?](#5-要不来点代码)"
msgstr "[5. 要不...来点代码?](#5-要不来点代码)"

#: src/beginner.md:16 src/materials/ZK-Materials.md:11
msgid "[halo2](#halo2)"
msgstr "[halo2](#halo2)"

#: src/beginner.md:17
msgid "[Circom](#circom)"
msgstr "[Circom](#circom)"

#: src/beginner.md:18
msgid "[PSE demos](#pse-demos)"
msgstr "[PSE demos](#pse-demos)"

#: src/beginner.md:19
msgid "[Others:](#others)"
msgstr "[Others:](#others)"

#: src/beginner.md:20
msgid "[Tools](#tools)"
msgstr "[Tools](#tools)"

#: src/beginner.md:22
msgid "1. 建立对 zkp 的直观理解"
msgstr "1. 建立对 zkp 的直观理解"

#: src/beginner.md:24
msgid "① 在纵身潜入 ZKP 的海洋之前，可以先建立对它**最直观的理解**："
msgstr "① 在纵身潜入 ZKP 的海洋之前，可以先建立对它**最直观的理解**："

#: src/beginner.md:26
msgid ""
"[1. 初识「零知识」与「证明」](https://learn.z2o-k7e.world/zkp-intro/1/zkp-"
"back.html)"
msgstr ""
"[1. 初识「零知识」与「证明」](https://learn.z2o-k7e.world/zkp-intro/1/zkp-"
"back.html)"

#: src/beginner.md:27
msgid ""
"[2. 理解「模拟」](https://learn.z2o-k7e.world/zkp-intro/2/zkp-simu.html)"
msgstr ""
"[2. 理解「模拟」](https://learn.z2o-k7e.world/zkp-intro/2/zkp-simu.html)"

#: src/beginner.md:28
msgid "[3. 寻找「知识」](https://learn.z2o-k7e.world/zkp-intro/3/zkp-pok.html)"
msgstr ""
"[3. 寻找「知识」](https://learn.z2o-k7e.world/zkp-intro/3/zkp-pok.html)"

#: src/beginner.md:30
msgid ""
"安比实验室（郭宇老师）所写的 zkp-intro 是公认目前全网最简洁易懂的 zkp 入门系"
"列（而且还是中文的！！）"
msgstr ""
"安比实验室（郭宇老师）所写的 zkp-intro 是公认目前全网最简洁易懂的 zkp 入门系"
"列（而且还是中文的！！）"

#: src/beginner.md:31
msgid "前 3 篇需要看懂，不了解的概念就 Google + chatgpt + 社群询问 ..."
msgstr "前 3 篇需要看懂，不了解的概念就 Google + chatgpt + 社群询问 ..."

#: src/beginner.md:32
msgid ""
"Chap 4-5 主要是非交互的 Schnorr 和 CRS、哈密尔顿环路等，看不懂没关系，可以先"
"放一放"
msgstr ""
"Chap 4-5 主要是非交互的 Schnorr 和 CRS、哈密尔顿环路等，看不懂没关系，可以先"
"放一放"

#: src/beginner.md:34
msgid "2. 最小必要背景知识"
msgstr "2. 最小必要背景知识"

#: src/beginner.md:36
msgid ""
"在建立了对 ZKP 最直观的了解后，如果你还是打算要学下去的话，那么就开始准备一些"
"最小必要的基础知识吧！"
msgstr ""
"在建立了对 ZKP 最直观的了解后，如果你还是打算要学下去的话，那么就开始准备一些"
"最小必要的基础知识吧！"

#: src/beginner.md:38
msgid "2.1 椭圆曲线 ECC"
msgstr "2.1 椭圆曲线 ECC"

#: src/beginner.md:40
msgid "需要掌握椭圆曲线加密（ECC）原理（ 大概用时 30 min）"
msgstr "需要掌握椭圆曲线加密（ECC）原理（ 大概用时 30 min）"

#: src/beginner.md:42
msgid ""
"[椭圆曲线推荐 Tutorial](https://blog.cloudflare.com/a-relatively-easy-to-"
"understand-primer-on-elliptic-curve-cryptography)"
msgstr ""
"[椭圆曲线推荐 Tutorial](https://blog.cloudflare.com/a-relatively-easy-to-"
"understand-primer-on-elliptic-curve-cryptography)"

#: src/beginner.md:43
msgid ""
"[ECC 椭圆曲线](https://github.com/zkp-co-learning/zkp-co-learn/"
"discussions/29)"
msgstr ""
"[ECC 椭圆曲线](https://github.com/zkp-co-learning/zkp-co-learn/"
"discussions/29)"

#: src/beginner.md:44
msgid ""
"[ECC 密码学椭圆曲线(简短、清楚)](https://www.bilibili.com/video/"
"BV1v44y1b7Fd/?spm_id_from=333.337.search-card.all.click)"
msgstr ""
"[ECC 密码学椭圆曲线(简短、清楚)](https://www.bilibili.com/video/"
"BV1v44y1b7Fd/?spm_id_from=333.337.search-card.all.click)"

#: src/beginner.md:45
msgid "[椭圆曲线 illustration](https://curves.xargs.org/)"
msgstr "[椭圆曲线 illustration](https://curves.xargs.org/)"

#: src/beginner.md:47
msgid "2.2 基础的群论、数论"
msgstr "2.2 基础的群论、数论"

#: src/beginner.md:49
msgid "初等数论 `Number Theory`"
msgstr "初等数论 `Number Theory`"

#: src/beginner.md:50
msgid ""
"10 分钟直观理解群: [3Blue1Brown - 欧拉公式与初等群论](https://www.bilibili."
"com/video/BV1fx41187tZ)"
msgstr ""
"10 分钟直观理解群: [3Blue1Brown - 欧拉公式与初等群论](https://www.bilibili."
"com/video/BV1fx41187tZ)"

#: src/beginner.md:51
msgid ""
"[直观理解 - 如何给高中生解释群论？](https://www.zhihu.com/question/27807675/"
"answer/123680054) \\- [Group Theory 群论.pdf](https://github.com/Antalpha-"
"Labs/zkp-co-learn/files/10980275/Group.Theory.pdf)  \n"
"\\- [Number Theory 1.pdf](https://github.com/Antalpha-Labs/zkp-co-learn/"
"files/10980285/Number.Theory.1.pdf)"
msgstr ""
"[直观理解 - 如何给高中生解释群论？](https://www.zhihu.com/question/27807675/"
"answer/123680054) \\- [Group Theory 群论.pdf](https://github.com/Antalpha-"
"Labs/zkp-co-learn/files/10980275/Group.Theory.pdf)  \n"
"\\- [Number Theory 1.pdf](https://github.com/Antalpha-Labs/zkp-co-learn/"
"files/10980285/Number.Theory.1.pdf)"

#: src/beginner.md:55
msgid "2.3 密码学基础"
msgstr "2.3 密码学基础"

#: src/beginner.md:57
msgid "需要掌握：群环域概念、循环群、拉格朗日插值"
msgstr "需要掌握：群环域概念、循环群、拉格朗日插值"

#: src/beginner.md:59
msgid ""
"视频课 (视频课 For 纯密码学小白)：[密码学的数学基础](https://www.bilibili."
"com/video/BV1qs4y1s7kv/?spm_id_from=333.1007."
"top_right_bar_window_custom_collection.content."
"click&vd_source=cdb8c15859fbdd5efddeed0be9186c4b)"
msgstr ""
"视频课 (视频课 For 纯密码学小白)：[密码学的数学基础](https://www.bilibili."
"com/video/BV1qs4y1s7kv/?spm_id_from=333.1007."
"top_right_bar_window_custom_collection.content."
"click&vd_source=cdb8c15859fbdd5efddeed0be9186c4b)"

#: src/beginner.md:60
msgid ""
"[图解密码技术（第3版）](https://book.douban.com/subject/26822106/)  9.5 分密"
"码学书籍，随便翻翻"
msgstr ""
"[图解密码技术（第3版）](https://book.douban.com/subject/26822106/)  9.5 分密"
"码学书籍，随便翻翻"

#: src/beginner.md:62
msgid "2.4 ZK-SNARK 初识 & 原理:"
msgstr "2.4 ZK-SNARK 初识 & 原理:"

#: src/beginner.md:64
msgid ""
"需要掌握：直观理解循环群在 zk-snark 中是咋用的就可以，具体的算法细节可能要持"
"续往后学，和 PLONK 的算法不断交叉回看才能懂。"
msgstr ""
"需要掌握：直观理解循环群在 zk-snark 中是咋用的就可以，具体的算法细节可能要持"
"续往后学，和 PLONK 的算法不断交叉回看才能懂。"

#: src/beginner.md:66
msgid ""
"推荐 [sec-bit](https://secbit.io/blog/2020/01/08/learn-zk-snark-from-zero-"
"part-three/) ZK-SNARK 的系列文章，也可在微信公众平台搜索，对于初学者先看 "
"Part 1 / 2 就够了。"
msgstr ""
"推荐 [sec-bit](https://secbit.io/blog/2020/01/08/learn-zk-snark-from-zero-"
"part-three/) ZK-SNARK 的系列文章，也可在微信公众平台搜索，对于初学者先看 "
"Part 1 / 2 就够了。"

#: src/beginner.md:68
msgid ""
"[zk-snark Part 1](https://secbit.io/blog/2019/12/25/learn-zk-snark-from-zero-"
"part-one/)"
msgstr ""
"[zk-snark Part 1](https://secbit.io/blog/2019/12/25/learn-zk-snark-from-zero-"
"part-one/)"

#: src/beginner.md:69
msgid ""
"[zk-snark Part 2](https://secbit.io/blog/2020/01/01/learn-zk-snark-from-zero-"
"part-two/)"
msgstr ""
"[zk-snark Part 2](https://secbit.io/blog/2020/01/01/learn-zk-snark-from-zero-"
"part-two/)"

#: src/beginner.md:71
msgid "3. 理论交叉学习，我反复入门啊！"
msgstr "3. 理论交叉学习，我反复入门啊！"

#: src/beginner.md:73
msgid "有了以上基础的打底，可以尝试一套体系完整的系列课程："
msgstr "有了以上基础的打底，可以尝试一套体系完整的系列课程："

#: src/beginner.md:75
msgid "[ZKIAP](https://zkiap.com/)"
msgstr "[ZKIAP](https://zkiap.com/)"

#: src/beginner.md:76
msgid "ZKIAP 的课程是比较注重理论和实践结合的，第二课就有涉及到 Circom 写电路"
msgstr "ZKIAP 的课程是比较注重理论和实践结合的，第二课就有涉及到 Circom 写电路"

#: src/beginner.md:78
msgid "[zk-learning](https://zk-learning.org/)"
msgstr "[zk-learning](https://zk-learning.org/)"

#: src/beginner.md:79
msgid ""
"理论详实，但是缺少代码实践，session 5 的 PLONK 是 top-down 讲解，搭配郭老师"
"的 理解 PLONK 系列会更佳"
msgstr ""
"理论详实，但是缺少代码实践，session 5 的 PLONK 是 top-down 讲解，搭配郭老师"
"的 理解 PLONK 系列会更佳"

#: src/beginner.md:81
msgid "[crypto notes](https://crypto-notes-erhant.vercel.app/)"
msgstr "[crypto notes](https://crypto-notes-erhant.vercel.app/)"

#: src/beginner.md:82
msgid "土耳其小哥整理的，非常赞的 notes"
msgstr "土耳其小哥整理的，非常赞的 notes"

#: src/beginner.md:84
msgid ""
"[ProofsArgsAndZK](https://people.cs.georgetown.edu/jthaler/ProofsArgsAndZK."
"html)"
msgstr ""
"[ProofsArgsAndZK](https://people.cs.georgetown.edu/jthaler/ProofsArgsAndZK."
"html)"

#: src/beginner.md:85
msgid "author: justin thaler "
msgstr "author: justin thaler "

#: src/beginner.md:87
msgid "https://zkhack.dev/whiteboard"
msgstr "https://zkhack.dev/whiteboard"

#: src/beginner.md:89 src/materials/ZK-Materials.md:302
msgid "https://www.rareskills.io/zk-bootcamp"
msgstr "https://www.rareskills.io/zk-bootcamp"

#: src/beginner.md:94
msgid "其他优秀的 Courses （随便看看）: "
msgstr "其他优秀的 Courses （随便看看）: "

#: src/beginner.md:96
msgid ""
"[Zero Knowledge Canon, part 1 & 2 - a16z crypto](https://a16zcrypto.com/"
"posts/article/zero-knowledge-canon/)"
msgstr ""
"[Zero Knowledge Canon, part 1 & 2 - a16z crypto](https://a16zcrypto.com/"
"posts/article/zero-knowledge-canon/)"

#: src/beginner.md:97
msgid "https://twitter.com/taikoxyz/status/1679468185291218944 ："
msgstr "https://twitter.com/taikoxyz/status/1679468185291218944 ："

#: src/beginner.md:99
msgid ""
"```\n"
"1. PSE appliedzkp.org/projects \n"
"2. Rust\n"
"3. complaints about learning rust\n"
"4. Dan Boneh\n"
"5. \"The Different types of ZK-EVM\" article \n"
"6. who was the first ZK-EVM.\n"
"7. ZK Summit – Zero Knowledge Summit\n"
"8. Zac Williamson inventing PLONK, running @aztecnetwork\n"
"9. @zeroknowledgefm podcast\n"
"10. Fiat-Shamir Transformation \n"
"11. The Moon Math Manual https://github.com/LeastAuthority/moonmath-manual\n"
"12. ZK-Rollups that provide privacy by default are sometimes called ZK-ZK-"
"Rollups\n"
"13. Circom\n"
"14. The \"Proofs, Arguments, and Zero-Knowledge\" book by Justin Thaler "
"https://people.cs.georgetown.edu/jthaler/ProofsArgsAndZK.pdf\n"
"15. Brecht – @taikoxyz CTO and @PrivacyScaling contributor\n"
"16. ZK HACK\n"
"17. Definition wars\n"
"18. how one should write zkEVM or ZK-EVM or Zk-EVM or zk-EVM\n"
"19. Lagrange interpolation\n"
"```"
msgstr ""
"```\n"
"1. PSE appliedzkp.org/projects \n"
"2. Rust\n"
"3. complaints about learning rust\n"
"4. Dan Boneh\n"
"5. \"The Different types of ZK-EVM\" article \n"
"6. who was the first ZK-EVM.\n"
"7. ZK Summit – Zero Knowledge Summit\n"
"8. Zac Williamson inventing PLONK, running @aztecnetwork\n"
"9. @zeroknowledgefm podcast\n"
"10. Fiat-Shamir Transformation \n"
"11. The Moon Math Manual https://github.com/LeastAuthority/moonmath-manual\n"
"12. ZK-Rollups that provide privacy by default are sometimes called ZK-ZK-"
"Rollups\n"
"13. Circom\n"
"14. The \"Proofs, Arguments, and Zero-Knowledge\" book by Justin Thaler "
"https://people.cs.georgetown.edu/jthaler/ProofsArgsAndZK.pdf\n"
"15. Brecht – @taikoxyz CTO and @PrivacyScaling contributor\n"
"16. ZK HACK\n"
"17. Definition wars\n"
"18. how one should write zkEVM or ZK-EVM or Zk-EVM or zk-EVM\n"
"19. Lagrange interpolation\n"
"```"

#: src/beginner.md:122
msgid "4. PLONK 协议の奥义"
msgstr "4. PLONK 协议の奥义"

#: src/beginner.md:124
msgid "PLONK 无疑是目前最值得学习，需要彻底掌握的协议"
msgstr "PLONK 无疑是目前最值得学习，需要彻底掌握的协议"

#: src/beginner.md:128
msgid "《理解 Plonk》"
msgstr "《理解 Plonk》"

#: src/beginner.md:130
msgid ""
"[1-Plonkish Arithmetization](https://learn.z2o-k7e.world/plonk-intro-cn/"
"plonk-arithmetization.html)"
msgstr ""
"[1-Plonkish Arithmetization](https://learn.z2o-k7e.world/plonk-intro-cn/"
"plonk-arithmetization.html)"

#: src/beginner.md:131
msgid ""
"[2-多项式编码](https://learn.z2o-k7e.world/plonk-intro-cn/plonk-lagrange-"
"basis.html)"
msgstr ""
"[2-多项式编码](https://learn.z2o-k7e.world/plonk-intro-cn/plonk-lagrange-"
"basis.html)"

#: src/beginner.md:132
msgid ""
"[3-置换证明](https://learn.z2o-k7e.world/plonk-intro-cn/plonk-permutation."
"html)"
msgstr ""
"[3-置换证明](https://learn.z2o-k7e.world/plonk-intro-cn/plonk-permutation."
"html)"

#: src/beginner.md:133
msgid ""
"[4-算术约束与拷贝约束](https://learn.z2o-k7e.world/plonk-intro-cn/plonk-"
"constraints.html)"
msgstr ""
"[4-算术约束与拷贝约束](https://learn.z2o-k7e.world/plonk-intro-cn/plonk-"
"constraints.html)"

#: src/beginner.md:134
msgid ""
"[5-多项式承诺](https://learn.z2o-k7e.world/plonk-intro-cn/plonk-polycom.html)"
msgstr ""
"[5-多项式承诺](https://learn.z2o-k7e.world/plonk-intro-cn/plonk-polycom.html)"

#: src/beginner.md:135
msgid ""
"[6-实现 Zero Knowledge](https://learn.z2o-k7e.world/plonk-intro-cn/plonk-"
"randomizing.html)"
msgstr ""
"[6-实现 Zero Knowledge](https://learn.z2o-k7e.world/plonk-intro-cn/plonk-"
"randomizing.html)"

#: src/beginner.md:136
msgid ""
"[7-Lookup Gate](https://learn.z2o-k7e.world/plonk-intro-cn/plonk-lookup.html)"
msgstr ""
"[7-Lookup Gate](https://learn.z2o-k7e.world/plonk-intro-cn/plonk-lookup.html)"

#: src/beginner.md:138
msgid "出品：Secbit @郭宇 老师 , https://secbit.io/"
msgstr "出品：Secbit @郭宇 老师 , https://secbit.io/"

#: src/beginner.md:140
msgid "是大家公认的全网（包括外网）最好的 PLONK Tutorial。"
msgstr "是大家公认的全网（包括外网）最好的 PLONK Tutorial。"

#: src/beginner.md:142
msgid "学习 PLONK，这一套就够了！（论文可以随便看一下）"
msgstr "学习 PLONK，这一套就够了！（论文可以随便看一下）"

#: src/beginner.md:145
msgid "PS: 如果文档看晕了，那么推荐郭老师的配套白板视频："
msgstr "PS: 如果文档看晕了，那么推荐郭老师的配套白板视频："

#: src/beginner.md:146
msgid ""
"[【理解 PLONK - 1】 by 郭宇老师@安比实验室 05/02](https://github.com/zkp-co-"
"learning/zkp-co-learn/discussions/86)"
msgstr ""
"[【理解 PLONK - 1】 by 郭宇老师@安比实验室 05/02](https://github.com/zkp-co-"
"learning/zkp-co-learn/discussions/86)"

#: src/beginner.md:147
msgid ""
"[【理解 PLONK - 2】 by 郭宇老师@安比实验室 05/03](https://github.com/zkp-co-"
"learning/zkp-co-learn/discussions/89)"
msgstr ""
"[【理解 PLONK - 2】 by 郭宇老师@安比实验室 05/03](https://github.com/zkp-co-"
"learning/zkp-co-learn/discussions/89)"

#: src/beginner.md:148
msgid ""
"[【理解 PLONK - 3 - lookup】 by 郭宇老师@安比实验室 05/09](https://github."
"com/zkp-co-learning/zkp-co-learn/discussions/95)"
msgstr ""
"[【理解 PLONK - 3 - lookup】 by 郭宇老师@安比实验室 05/09](https://github."
"com/zkp-co-learning/zkp-co-learn/discussions/95)"

#: src/beginner.md:152
msgid "PLONK 代码实践"
msgstr "PLONK 代码实践"

#: src/beginner.md:153
msgid "[plonkathon](https://github.com/0xPARC/plonkathon)"
msgstr "[plonkathon](https://github.com/0xPARC/plonkathon)"

#: src/beginner.md:154
msgid "[Rust 协议实现](https://github.com/adria0/plonk-by-fingers)"
msgstr "[Rust 协议实现](https://github.com/adria0/plonk-by-fingers)"

#: src/beginner.md:155
msgid ""
"[Harry 整理的精简版本 plonkathon 代码实现](https://github.com/zkp-co-"
"learning/ZKP/blob/main/5-plonk-intro.md) "
msgstr ""
"[Harry 整理的精简版本 plonkathon 代码实现](https://github.com/zkp-co-"
"learning/ZKP/blob/main/5-plonk-intro.md) "

#: src/beginner.md:156
msgid ""
"[Dr. Qi zhou 分享](https://706community.notion.site/Python-finite-field-poly-"
"over-Fq-FFT-1968732f468c4c3fa3886a5658c58773?pvs=4)"
msgstr ""
"[Dr. Qi zhou 分享](https://706community.notion.site/Python-finite-field-poly-"
"over-Fq-FFT-1968732f468c4c3fa3886a5658c58773?pvs=4)"

#: src/beginner.md:158
msgid "5. 要不...来点代码?"
msgstr "5. 要不...来点代码?"

#: src/beginner.md:160
msgid ""
"恭喜你来到了 Zero-knowledge 的荒原！下面就可以自己根据兴趣和方向选择一些代码"
"进行研究和实践了"
msgstr ""
"恭喜你来到了 Zero-knowledge 的荒原！下面就可以自己根据兴趣和方向选择一些代码"
"进行研究和实践了"

#: src/beginner.md:162 src/materials/ZK-Materials.md:60
msgid "halo2"
msgstr "halo2"

#: src/beginner.md:164 src/materials/ZK-Materials.md:83
msgid "使用了 halo2 的 Applications: "
msgstr "使用了 halo2 的 Applications: "

#: src/beginner.md:166 src/materials/ZK-Materials.md:85
msgid "ZK Email https://github.com/zkemail  halo2"
msgstr "ZK Email https://github.com/zkemail  halo2"

#: src/beginner.md:167 src/materials/ZK-Materials.md:86
msgid "ZK Wordle: https://zordle.xyz/  halo2"
msgstr "ZK Wordle: https://zordle.xyz/  halo2"

#: src/beginner.md:168 src/materials/ZK-Materials.md:87
msgid "Hammster： https://github.com/ytham/hammster  halo2"
msgstr "Hammster： https://github.com/ytham/hammster  halo2"

#: src/beginner.md:169 src/materials/ZK-Materials.md:88
msgid ""
"zk-draw : Verifiable random draw with zero-knowledge of the random seed "
"https://github.com/jae-cuz/zk-draw   halo2"
msgstr ""
"zk-draw : Verifiable random draw with zero-knowledge of the random seed "
"https://github.com/jae-cuz/zk-draw   halo2"

#: src/beginner.md:170 src/materials/ZK-Materials.md:89
msgid "ZK Microphone: https://github.com/Miyamura80/ZKMicrophone "
msgstr "ZK Microphone: https://github.com/Miyamura80/ZKMicrophone "

#: src/beginner.md:171 src/materials/ZK-Materials.md:90
msgid ""
"[Building a Zero Knowledge web app with Halo 2 and Wasm (part 1)](https://"
"medium.com/@yujiangtham/building-a-zero-knowledge-web-app-with-halo-2-and-"
"wasm-part-1-80858c8d16ee)"
msgstr ""
"[Building a Zero Knowledge web app with Halo 2 and Wasm (part 1)](https://"
"medium.com/@yujiangtham/building-a-zero-knowledge-web-app-with-halo-2-and-"
"wasm-part-1-80858c8d16ee)"

#: src/beginner.md:172 src/materials/ZK-Materials.md:91
msgid ""
"zk-img: Fighting Deepfakes with Zero-Knowledge Proofs   https://medium.com/"
"@danieldkang/zk-img-fighting-deepfakes-with-zero-knowledge-"
"proofs-9b76c23e3789  尚未开源"
msgstr ""
"zk-img: Fighting Deepfakes with Zero-Knowledge Proofs   https://medium.com/"
"@danieldkang/zk-img-fighting-deepfakes-with-zero-knowledge-"
"proofs-9b76c23e3789  尚未开源"

#: src/beginner.md:174 src/materials/ZK-Materials.md:93
msgid "大部分由 @Kurt Pan 博士整理"
msgstr "大部分由 @Kurt Pan 博士整理"

#: src/beginner.md:176
msgid "Circom"
msgstr "Circom"

#: src/beginner.md:178
msgid "使用了 Circom 的 Applications: "
msgstr "使用了 Circom 的 Applications: "

#: src/beginner.md:179
msgid "zkSudoku: https://zk-sudoku.vercel.app/  Circom"
msgstr "zkSudoku: https://zk-sudoku.vercel.app/  Circom"

#: src/beginner.md:180
msgid "Tornado-Cash"
msgstr "Tornado-Cash"

#: src/beginner.md:181
msgid "Semaphore"
msgstr "Semaphore"

#: src/beginner.md:183
msgid "学习路径：【EDITING...】"
msgstr "学习路径：【EDITING...】"

#: src/beginner.md:185
msgid "PSE demos"
msgstr "PSE demos"

#: src/beginner.md:187 src/materials/ZK-Materials.md:320
msgid "PSE Projects List : https://www.appliedzkp.org/projects"
msgstr "PSE Projects List : https://www.appliedzkp.org/projects"

#: src/beginner.md:189
msgid "[Semaphore](https://semaphore.appliedzkp.org/)"
msgstr "[Semaphore](https://semaphore.appliedzkp.org/)"

#: src/beginner.md:190
msgid ""
"对于 Circom + ZKP 的代码实践例子比较多，首推 PSE 的 Semaphore，是个包括 "
"zuzalu pass、Worldcoin 都有使用的 zkp 协议"
msgstr ""
"对于 Circom + ZKP 的代码实践例子比较多，首推 PSE 的 Semaphore，是个包括 "
"zuzalu pass、Worldcoin 都有使用的 zkp 协议"

#: src/beginner.md:193
msgid "Others:"
msgstr "Others:"

#: src/beginner.md:195
msgid "【out of date】，请移步： zk Materials"
msgstr "【out of date】，请移步： zk Materials"

#: src/beginner.md:197
msgid "Tools"
msgstr "Tools"

#: src/beginner.md:198
msgid ""
"[Youtube 字幕神器](https://github.com/zkp-co-learning/zkp-co-learn/"
"discussions/11)"
msgstr ""
"[Youtube 字幕神器](https://github.com/zkp-co-learning/zkp-co-learn/"
"discussions/11)"

#: src/beginner.md:199
msgid ""
"[常用的希腊字母及其发音](https://github.com/zkp-co-learning/zkp-co-learn/"
"discussions/91)"
msgstr ""
"[常用的希腊字母及其发音](https://github.com/zkp-co-learning/zkp-co-learn/"
"discussions/91)"

#: src/beginner.md:200
msgid ""
"[github - Readme Latex](https://docs.github.com/zh/get-started/writing-on-"
"github/working-with-advanced-formatting/writing-mathematical-expressions)"
msgstr ""
"[github - Readme Latex](https://docs.github.com/zh/get-started/writing-on-"
"github/working-with-advanced-formatting/writing-mathematical-expressions)"

#: src/beginner.md:201
msgid "建议使用 `$` `$`，我自己测试过是有效的"
msgstr "建议使用 `$` `$`，我自己测试过是有效的"

#: src/zkp-intro/1/zkp-back.md:3
msgid "初识「零知识」与「证明」"
msgstr "初识「零知识」与「证明」"

#: src/zkp-intro/1/zkp-back.md:5
msgid "_探索零知识证明系列（一）_"
msgstr "_探索零知识证明系列（一）_"

#: src/zkp-intro/1/zkp-back.md:7
msgid "[引言：](#引言)"
msgstr "[引言：](#引言)"

#: src/zkp-intro/1/zkp-back.md:8
msgid "[\"证明\" 的前世今生](#证明-的前世今生)"
msgstr "[\"证明\" 的前世今生](#证明-的前世今生)"

#: src/zkp-intro/1/zkp-back.md:9
msgid "[古希腊：「证明」 == 「洞见」](#古希腊证明--洞见)"
msgstr "[古希腊：「证明」 == 「洞见」](#古希腊证明--洞见)"

#: src/zkp-intro/1/zkp-back.md:10
msgid "[二十世纪初：「证明」 == 「符号推理」](#二十世纪初证明--符号推理)"
msgstr "[二十世纪初：「证明」 == 「符号推理」](#二十世纪初证明--符号推理)"

#: src/zkp-intro/1/zkp-back.md:11
msgid "[六十年代：「证明」 == 「程序」](#六十年代证明--程序)"
msgstr "[六十年代：「证明」 == 「程序」](#六十年代证明--程序)"

#: src/zkp-intro/1/zkp-back.md:12
msgid "[八十年代：「证明」 == 「交互」](#八十年代证明--交互)"
msgstr "[八十年代：「证明」 == 「交互」](#八十年代证明--交互)"

#: src/zkp-intro/1/zkp-back.md:13
msgid "[交互式证明](#交互式证明)"
msgstr "[交互式证明](#交互式证明)"

#: src/zkp-intro/1/zkp-back.md:14
msgid "[零知识证明有什么用处？](#零知识证明有什么用处)"
msgstr "[零知识证明有什么用处？](#零知识证明有什么用处)"

#: src/zkp-intro/1/zkp-back.md:15
msgid "[举例：地图三染色问题](#举例地图三染色问题)"
msgstr "[举例：地图三染色问题](#举例地图三染色问题)"

#: src/zkp-intro/1/zkp-back.md:16
msgid "[信息 vs. 知识](#信息-vs-知识)"
msgstr "[信息 vs. 知识](#信息-vs-知识)"

#: src/zkp-intro/1/zkp-back.md:17
msgid "[可验证计算与电路可满足性问题](#可验证计算与电路可满足性问题)"
msgstr "[可验证计算与电路可满足性问题](#可验证计算与电路可满足性问题)"

#: src/zkp-intro/1/zkp-back.md:18
msgid "[黑科技](#黑科技)"
msgstr "[黑科技](#黑科技)"

#: src/zkp-intro/1/zkp-back.md:19
msgid "[写在最后](#写在最后)"
msgstr "[写在最后](#写在最后)"

#: src/zkp-intro/1/zkp-back.md:20 src/zkp-intro/2/zkp-simu.md:16
#: src/zkp-intro/3/zkp-pok.md:15 src/zkp-intro/4/zkp-rom.md:16
#: src/zkp-intro/5/zkp-crs.md:16
msgid "[参考文献](#参考文献)"
msgstr "[参考文献](#参考文献)"

#: src/zkp-intro/1/zkp-back.md:23
msgid "引言："
msgstr "引言："

#: src/zkp-intro/1/zkp-back.md:25
msgid ""
"我认为区块链很难称为一个“技术”。它更像是一个领域，包罗万象。或者形而上地说，"
"区块链更像一个有机体，融合了各种不同的理论技术。"
msgstr ""
"我认为区块链很难称为一个“技术”。它更像是一个领域，包罗万象。或者形而上地说，"
"区块链更像一个有机体，融合了各种不同的理论技术。"

#: src/zkp-intro/1/zkp-back.md:27
msgid "零知识证明是构建信任的重要技术，也是区块链这个有机体中不可缺少的一环。"
msgstr "零知识证明是构建信任的重要技术，也是区块链这个有机体中不可缺少的一环。"

#: src/zkp-intro/1/zkp-back.md:29
msgid ""
"零知识证明是打通链上数据与链下计算的关键技术，也是实现链上数据隐私保护的重要"
"途径"
msgstr ""
"零知识证明是打通链上数据与链下计算的关键技术，也是实现链上数据隐私保护的重要"
"途径"

#: src/zkp-intro/1/zkp-back.md:31
msgid ""
"要解释「零知识证明」，我们需要先解释「证明」，然后解释什么是「知识」，最后再"
"解释什么是「零知识」。"
msgstr ""
"要解释「零知识证明」，我们需要先解释「证明」，然后解释什么是「知识」，最后再"
"解释什么是「零知识」。"

#: src/zkp-intro/1/zkp-back.md:33
msgid "提醒：文章内容难免有不准确或不严谨的描述，还请各位专业人士拨冗指正。"
msgstr "提醒：文章内容难免有不准确或不严谨的描述，还请各位专业人士拨冗指正。"

#: src/zkp-intro/1/zkp-back.md:35
msgid ""
"本文将在 [Github](https://github.com/sec-bit/learning-zkp/) 进行更新与修正。"
msgstr ""
"本文将在 [Github](https://github.com/sec-bit/learning-zkp/) 进行更新与修正。"

#: src/zkp-intro/1/zkp-back.md:37
msgid "\"证明\" 的前世今生"
msgstr "\"证明\" 的前世今生"

#: src/zkp-intro/1/zkp-back.md:39
msgid ""
"什么是证明？很多人可能和我一样，看到这两个字，会不禁想起中学考卷中各种三角相"
"似的几何图形，当老师在神奇地画出一条辅助线后，证明过程突然显而易见，然后会懊"
"悔自己为何没想到。"
msgstr ""
"什么是证明？很多人可能和我一样，看到这两个字，会不禁想起中学考卷中各种三角相"
"似的几何图形，当老师在神奇地画出一条辅助线后，证明过程突然显而易见，然后会懊"
"悔自己为何没想到。"

#: src/zkp-intro/1/zkp-back.md:41
msgid "古希腊：「证明」 == 「洞见」"
msgstr "古希腊：「证明」 == 「洞见」"

#: src/zkp-intro/1/zkp-back.md:43
msgid ""
"数学证明最早源于古希腊。他们发明（发现）了公理与逻辑，他们用证明来说服对方，"
"而不是靠权威。这是彻头彻尾的「去中心化」。自古希腊以降，这种方法论影响了整个"
"人类文明的进程。"
msgstr ""
"数学证明最早源于古希腊。他们发明（发现）了公理与逻辑，他们用证明来说服对方，"
"而不是靠权威。这是彻头彻尾的「去中心化」。自古希腊以降，这种方法论影响了整个"
"人类文明的进程。"

#: src/zkp-intro/1/zkp-back.md:45
msgid "![勾股定理的证明](img/345.png)"
msgstr "![勾股定理的证明](img/345.png)"

#: src/zkp-intro/1/zkp-back.md:47
msgid ""
"上图是「勾股定理」的巧妙证明。历史上曾出现过许许多多精巧的证明，神奇的思路，"
"天才的灵感。一旦一个命题被证明，上帝都无能为力。嗯，对了，还有那个「上帝不是"
"万能的」证明：上帝不能造出一块他举不起来的石头。"
msgstr ""
"上图是「勾股定理」的巧妙证明。历史上曾出现过许许多多精巧的证明，神奇的思路，"
"天才的灵感。一旦一个命题被证明，上帝都无能为力。嗯，对了，还有那个「上帝不是"
"万能的」证明：上帝不能造出一块他举不起来的石头。"

#: src/zkp-intro/1/zkp-back.md:49
msgid ""
"一个数学证明往往暗藏无比深刻的「洞见」，相信很多人都看过「费马大定理」的故事"
"\\[1\\]，这个定理证明横跨四百年，从费马写下「这里空间太小，我写不下」，到怀尔"
"斯最终登顶，耗费了许多代人的聪明才智。最近如「彭加莱猜想」，稍微带点年代感的"
"如「哥德巴赫猜想」，还有我非常敬佩的华裔科学家张益唐十年磨一剑，在仔细研究了"
"「Goldston-Pintz-Yıldırım」和 「Bombieri-Friedlander-Iwaniec.」的证明「洞见」"
"之后，证明了「质数间的有界间隔」\\[2\\]。"
msgstr ""
"一个数学证明往往暗藏无比深刻的「洞见」，相信很多人都看过「费马大定理」的故事"
"\\[1\\]，这个定理证明横跨四百年，从费马写下「这里空间太小，我写不下」，到怀尔"
"斯最终登顶，耗费了许多代人的聪明才智。最近如「彭加莱猜想」，稍微带点年代感的"
"如「哥德巴赫猜想」，还有我非常敬佩的华裔科学家张益唐十年磨一剑，在仔细研究了"
"「Goldston-Pintz-Yıldırım」和 「Bombieri-Friedlander-Iwaniec.」的证明「洞见」"
"之后，证明了「质数间的有界间隔」\\[2\\]。"

#: src/zkp-intro/1/zkp-back.md:51
msgid ""
"自十七世纪，莱布尼茨起，人们就梦想找到一种机械的手段，可以来自动完成证明，而"
"不再依赖天才的灵光一现。"
msgstr ""
"自十七世纪，莱布尼茨起，人们就梦想找到一种机械的手段，可以来自动完成证明，而"
"不再依赖天才的灵光一现。"

#: src/zkp-intro/1/zkp-back.md:53
msgid "二十世纪初：「证明」 == 「符号推理」"
msgstr "二十世纪初：「证明」 == 「符号推理」"

#: src/zkp-intro/1/zkp-back.md:55
msgid ""
"时间到了十九世纪末，康托、布尔、弗雷格、希尔伯特、罗素、布劳威、哥德尔等人定"
"义了形式化逻辑的符号系统。而「证明」则是在利用形式化逻辑的符号语言编写的推理"
"过程。逻辑本身靠谱么？逻辑本身「自恰」吗？逻辑推理本身对不对，能够证明吗？这"
"让 数学家/逻辑学家/计算机科学家 发明（发现） 了符号系统，语法 vs. 语义，可靠 "
"vs. 完备，递归 vs. 无穷。（这部分精彩故事请参看『逻辑的引擎』一书\\[3\\]）。"
msgstr ""
"时间到了十九世纪末，康托、布尔、弗雷格、希尔伯特、罗素、布劳威、哥德尔等人定"
"义了形式化逻辑的符号系统。而「证明」则是在利用形式化逻辑的符号语言编写的推理"
"过程。逻辑本身靠谱么？逻辑本身「自恰」吗？逻辑推理本身对不对，能够证明吗？这"
"让 数学家/逻辑学家/计算机科学家 发明（发现） 了符号系统，语法 vs. 语义，可靠 "
"vs. 完备，递归 vs. 无穷。（这部分精彩故事请参看『逻辑的引擎』一书\\[3\\]）。"

#: src/zkp-intro/1/zkp-back.md:57
msgid ""
"1910年，罗素发表了洪(zhuan)荒(tou)巨著『数学原理』。在书中，罗素与怀特海试图"
"将数学完整地「形式化」下来。如果能达到这样的目标，所有的数学成果都将以证明的"
"方式建立在坚实的基础上。下图就是『数学原理（卷二）』中的一页："
msgstr ""
"1910年，罗素发表了洪(zhuan)荒(tou)巨著『数学原理』。在书中，罗素与怀特海试图"
"将数学完整地「形式化」下来。如果能达到这样的目标，所有的数学成果都将以证明的"
"方式建立在坚实的基础上。下图就是『数学原理（卷二）』中的一页："

#: src/zkp-intro/1/zkp-back.md:59
msgid "![](img/principle.png)"
msgstr "![](img/principle.png)"

#: src/zkp-intro/1/zkp-back.md:61
msgid ""
"其中`110.643`这是一个命题：「1+1=2」，然后接下来就是这个定理的证明。大家可能"
"奇怪，难道 1+1 还需要证明吗？是的，在数学原理一书中，数字 0，1，2，…… 都有严"
"格定义，「加法」、「乘法」、「等于」都要严格定义，然后每一步的推理都需要指出"
"依据。证明意味着什么？证明是可能繁琐无比的、但是每一步推理都严格无误。书中大"
"量的证明都机械式的，按照公理和推理规则进行一种证明的构造，寻找证明就好像可以"
"交给一个人，然后他无脑在公理与推理规则的集合中进行机械查找。"
msgstr ""
"其中`110.643`这是一个命题：「1+1=2」，然后接下来就是这个定理的证明。大家可能"
"奇怪，难道 1+1 还需要证明吗？是的，在数学原理一书中，数字 0，1，2，…… 都有严"
"格定义，「加法」、「乘法」、「等于」都要严格定义，然后每一步的推理都需要指出"
"依据。证明意味着什么？证明是可能繁琐无比的、但是每一步推理都严格无误。书中大"
"量的证明都机械式的，按照公理和推理规则进行一种证明的构造，寻找证明就好像可以"
"交给一个人，然后他无脑在公理与推理规则的集合中进行机械查找。"

#: src/zkp-intro/1/zkp-back.md:63
msgid "似乎人们距离「定理的自动证明」并不遥远了。"
msgstr "似乎人们距离「定理的自动证明」并不遥远了。"

#: src/zkp-intro/1/zkp-back.md:65
msgid ""
"不幸的是，哥德尔在 1931 年证明了「哥德尔不完备性定理」\\[4\\]，图灵在 1936 年"
"证明了图灵机停机问题的不可判定性\\[5\\]。这些成果彻底终结了这个几百年的幻想。"
"无论公理系统如何精巧设计，都无法抓住所有的真理。"
msgstr ""
"不幸的是，哥德尔在 1931 年证明了「哥德尔不完备性定理」\\[4\\]，图灵在 1936 年"
"证明了图灵机停机问题的不可判定性\\[5\\]。这些成果彻底终结了这个几百年的幻想。"
"无论公理系统如何精巧设计，都无法抓住所有的真理。"

#: src/zkp-intro/1/zkp-back.md:67
msgid ""
"证明不仅仅是一个严格推理，而且凝结了似乎很难机械化的创造性思维。证明中蕴含了"
"大量的「知识」，每一次的突破，都将我们的认知提升到一个新的高度。不管是「洞"
"见」，还是推理过程中所构造的「算法」，一个定理的证明的内涵往往远超出定理本身"
"的结论。"
msgstr ""
"证明不仅仅是一个严格推理，而且凝结了似乎很难机械化的创造性思维。证明中蕴含了"
"大量的「知识」，每一次的突破，都将我们的认知提升到一个新的高度。不管是「洞"
"见」，还是推理过程中所构造的「算法」，一个定理的证明的内涵往往远超出定理本身"
"的结论。"

#: src/zkp-intro/1/zkp-back.md:69
msgid "六十年代：「证明」 == 「程序」"
msgstr "六十年代：「证明」 == 「程序」"

#: src/zkp-intro/1/zkp-back.md:71
msgid ""
"又过了半个世纪，到了六十年代，逻辑学家 Haskell Curry 和 William Howard 相继发"
"现了在「逻辑系统」和「计算系统— Lambda 演算」中出现了很多「神奇的对应」，这就"
"是后来被命名的「Curry-Howard Correspondence」。这个发现使得大家恍然大悟，「编"
"写程序」和「编写证明」实际在概念上是完全统一的。而在这之后的 50 年，相关理论"
"与技术发展使得证明不再停留在草稿纸上，而是可以用程序来表达。这个同构映射非常"
"有趣：程序的类型对应于证明的定理；循环对应于归纳；……（这里推荐一本书：『软件"
"基础』（Software Foundations 中译本）\\[6\\]）。在直觉主义框架中，证明就意味"
"着构造算法，构造算法实际上就是在写代码。(反过来也成立，嗯，码农码的不是代码，"
"是数学证明，:P)"
msgstr ""
"又过了半个世纪，到了六十年代，逻辑学家 Haskell Curry 和 William Howard 相继发"
"现了在「逻辑系统」和「计算系统— Lambda 演算」中出现了很多「神奇的对应」，这就"
"是后来被命名的「Curry-Howard Correspondence」。这个发现使得大家恍然大悟，「编"
"写程序」和「编写证明」实际在概念上是完全统一的。而在这之后的 50 年，相关理论"
"与技术发展使得证明不再停留在草稿纸上，而是可以用程序来表达。这个同构映射非常"
"有趣：程序的类型对应于证明的定理；循环对应于归纳；……（这里推荐一本书：『软件"
"基础』（Software Foundations 中译本）\\[6\\]）。在直觉主义框架中，证明就意味"
"着构造算法，构造算法实际上就是在写代码。(反过来也成立，嗯，码农码的不是代码，"
"是数学证明，:P)"

#: src/zkp-intro/1/zkp-back.md:73
msgid ""
"目前在计算机科学领域，许多理论的证明已经从纸上的草图变成了代码的形式，比较流"
"行的「证明编程语言」有 Coq，Isabelle，Agda 等等。采用编程的方式来构造证明，证"
"明的正确性检查可以机械地由程序完成，并且许多啰嗦重复性的劳动可以由程序来辅助"
"完成。数学理论证明的大厦正在像计算机软件一样，逐步地构建过程中。1996 年 12 "
"月 W. McCune 利用自动定理证明工具 EQP 证明了一个 长达 63 年历史的数学猜想"
"「Ronbins 猜想」，『纽约时报』随后发表了一篇题为「Computer Math Proof Shows "
"Reasoning Power」的文章\\[7\\]，再一次探讨机器能否代替人类创造性思维的可能"
"性。"
msgstr ""
"目前在计算机科学领域，许多理论的证明已经从纸上的草图变成了代码的形式，比较流"
"行的「证明编程语言」有 Coq，Isabelle，Agda 等等。采用编程的方式来构造证明，证"
"明的正确性检查可以机械地由程序完成，并且许多啰嗦重复性的劳动可以由程序来辅助"
"完成。数学理论证明的大厦正在像计算机软件一样，逐步地构建过程中。1996 年 12 "
"月 W. McCune 利用自动定理证明工具 EQP 证明了一个 长达 63 年历史的数学猜想"
"「Ronbins 猜想」，『纽约时报』随后发表了一篇题为「Computer Math Proof Shows "
"Reasoning Power」的文章\\[7\\]，再一次探讨机器能否代替人类创造性思维的可能"
"性。"

#: src/zkp-intro/1/zkp-back.md:75
msgid ""
"利用机器的辅助确实能够有效帮助数学家的思维达到更多的未知空间，但是「寻找证"
"明」仍然是最有挑战性的工作。「验证证明」，则必须是一个简单、机械、并且有限的"
"工作。这是种天然的「不对称性」。"
msgstr ""
"利用机器的辅助确实能够有效帮助数学家的思维达到更多的未知空间，但是「寻找证"
"明」仍然是最有挑战性的工作。「验证证明」，则必须是一个简单、机械、并且有限的"
"工作。这是种天然的「不对称性」。"

#: src/zkp-intro/1/zkp-back.md:77
msgid "八十年代：「证明」 == 「交互」"
msgstr "八十年代：「证明」 == 「交互」"

#: src/zkp-intro/1/zkp-back.md:79
msgid ""
"时间拨到1985年，乔布斯刚刚离开苹果，而 S. Goldwasser 博士毕业后来到了 MIT，"
"与 S. Micali，Rackoff 合写了一篇能载入计算机科学史册的经典：『交互式证明系统"
"中的知识复杂性』\\[8\\]。"
msgstr ""
"时间拨到1985年，乔布斯刚刚离开苹果，而 S. Goldwasser 博士毕业后来到了 MIT，"
"与 S. Micali，Rackoff 合写了一篇能载入计算机科学史册的经典：『交互式证明系统"
"中的知识复杂性』\\[8\\]。"

#: src/zkp-intro/1/zkp-back.md:81
msgid "![GMR89](img/gmr89.png)"
msgstr "![GMR89](img/gmr89.png)"

#: src/zkp-intro/1/zkp-back.md:83
msgid ""
"他们对「证明」一词进行了重新的诠释，并提出了交互式证明系统的概念：通过构造两"
"个图灵机进行「交互」而不是「推理」，来证明一个命题在概率上是否成立。「证明」"
"这个概念再一次被拓展。"
msgstr ""
"他们对「证明」一词进行了重新的诠释，并提出了交互式证明系统的概念：通过构造两"
"个图灵机进行「交互」而不是「推理」，来证明一个命题在概率上是否成立。「证明」"
"这个概念再一次被拓展。"

#: src/zkp-intro/1/zkp-back.md:85
msgid ""
"交互证明的表现形式是两个（或者多个图灵机）的「对话脚本」，或者称为 "
"Transcript。而这个对话过程，其中有一个显式的「证明者」角色，还有一个显式的"
"「验证者」。其中证明者向验证者证明一个命题成立，同时还「不泄露其他任何知"
"识」。这种就被称为「零知识证明」。"
msgstr ""
"交互证明的表现形式是两个（或者多个图灵机）的「对话脚本」，或者称为 "
"Transcript。而这个对话过程，其中有一个显式的「证明者」角色，还有一个显式的"
"「验证者」。其中证明者向验证者证明一个命题成立，同时还「不泄露其他任何知"
"识」。这种就被称为「零知识证明」。"

#: src/zkp-intro/1/zkp-back.md:87
msgid ""
"再强调一遍，证明凝结了「知识」，但是证明过程确可以不泄露「知识」，同时这个证"
"明验证过程仍然保持了简单、机械，并且有限性。这听上去是不是有点「反直觉」？"
msgstr ""
"再强调一遍，证明凝结了「知识」，但是证明过程确可以不泄露「知识」，同时这个证"
"明验证过程仍然保持了简单、机械，并且有限性。这听上去是不是有点「反直觉」？"

#: src/zkp-intro/1/zkp-back.md:89
msgid "交互式证明"
msgstr "交互式证明"

#: src/zkp-intro/1/zkp-back.md:91
msgid ""
"Alice: 我想向你证明我有一个方程的解，`w^3 - （w+1)^2 + 7 = 0` （方程的解："
"`w=3`）"
msgstr ""
"Alice: 我想向你证明我有一个方程的解，`w^3 - （w+1)^2 + 7 = 0` （方程的解："
"`w=3`）"

#: src/zkp-intro/1/zkp-back.md:93
msgid "Bob: 好啊，我听着呢"
msgstr "Bob: 好啊，我听着呢"

#: src/zkp-intro/1/zkp-back.md:95
msgid "Alice: 但是我不会告诉你 x 具体是多少，除非你愿意掏钱，我才告诉你。"
msgstr "Alice: 但是我不会告诉你 x 具体是多少，除非你愿意掏钱，我才告诉你。"

#: src/zkp-intro/1/zkp-back.md:97
msgid "Bob: 可以啊，但是你要先证明你有方程的解，我再给钱你。"
msgstr "Bob: 可以啊，但是你要先证明你有方程的解，我再给钱你。"

#: src/zkp-intro/1/zkp-back.md:99
msgid "Alice: @#%^& （黑科技）"
msgstr "Alice: @#%^& （黑科技）"

#: src/zkp-intro/1/zkp-back.md:101
msgid "Bob:  ?????? （黑科技）"
msgstr "Bob:  ?????? （黑科技）"

#: src/zkp-intro/1/zkp-back.md:103
msgid "Alice: &\\*\\#@! （黑科技）"
msgstr "Alice: &\\*\\#@! （黑科技）"

#: src/zkp-intro/1/zkp-back.md:105
msgid "Bob: ??????（黑科技）"
msgstr "Bob: ??????（黑科技）"

#: src/zkp-intro/1/zkp-back.md:107
msgid "...... （继续黑科技）"
msgstr "...... （继续黑科技）"

#: src/zkp-intro/1/zkp-back.md:109
msgid "Alice: 好了，完了"
msgstr "Alice: 好了，完了"

#: src/zkp-intro/1/zkp-back.md:111
msgid "Bob: 好吧，你确实有方程的解，不过是不是我掏了钱，你就会把答案告诉我？"
msgstr "Bob: 好吧，你确实有方程的解，不过是不是我掏了钱，你就会把答案告诉我？"

#: src/zkp-intro/1/zkp-back.md:113
msgid "Alice: 别废话，掏钱！"
msgstr "Alice: 别废话，掏钱！"

#: src/zkp-intro/1/zkp-back.md:115
msgid ""
"上面例子就是一个「交互式证明」。假设Alice知道方程的解， `f(w) = 0`，那么 "
"Alice 如何让 Bob 确信她知道 `w` 呢？Alice 在 「黑科技阶段」 告诉了 Bob 一大堆"
"的信息。好了，关键问题是，Bob 能不能从 Alice 所说的一大堆信息中猜出`w` 到底是"
"几，或者能分析出关于 `w` 的蛛丝马迹呢？如果 Bob 有这个能力，Bob也许就没必要掏"
"钱了，因为他已经获得了这个值钱的信息。"
msgstr ""
"上面例子就是一个「交互式证明」。假设Alice知道方程的解， `f(w) = 0`，那么 "
"Alice 如何让 Bob 确信她知道 `w` 呢？Alice 在 「黑科技阶段」 告诉了 Bob 一大堆"
"的信息。好了，关键问题是，Bob 能不能从 Alice 所说的一大堆信息中猜出`w` 到底是"
"几，或者能分析出关于 `w` 的蛛丝马迹呢？如果 Bob 有这个能力，Bob也许就没必要掏"
"钱了，因为他已经获得了这个值钱的信息。"

#: src/zkp-intro/1/zkp-back.md:117
msgid ""
"请注意，如果 Alice 与 Bob 的对话是 「零知识」 的，那么 Bob 除了知道 `w` 是 "
"`f(w)=0` 的解之外，不能获取其它任何关于 `w` 的信息。 这一点非常重要，这是保"
"护 Alice 的利益。"
msgstr ""
"请注意，如果 Alice 与 Bob 的对话是 「零知识」 的，那么 Bob 除了知道 `w` 是 "
"`f(w)=0` 的解之外，不能获取其它任何关于 `w` 的信息。 这一点非常重要，这是保"
"护 Alice 的利益。"

#: src/zkp-intro/1/zkp-back.md:119
msgid ""
"现在回顾一下「零知识证明」这个词，英文叫 「Zero-Knowledge Proof」 。这个词包"
"含三个关键部分："
msgstr ""
"现在回顾一下「零知识证明」这个词，英文叫 「Zero-Knowledge Proof」 。这个词包"
"含三个关键部分："

#: src/zkp-intro/1/zkp-back.md:121
msgid "`零`"
msgstr "`零`"

#: src/zkp-intro/1/zkp-back.md:122
msgid "`知识`"
msgstr "`知识`"

#: src/zkp-intro/1/zkp-back.md:123
msgid "`证明`"
msgstr "`证明`"

#: src/zkp-intro/1/zkp-back.md:125
msgid "各位可能已经有点感觉了，我们来尝试着解读一下："
msgstr "各位可能已经有点感觉了，我们来尝试着解读一下："

#: src/zkp-intro/1/zkp-back.md:127
msgid "零： Alice 泄露了关于 `w` 的「零」知识，也就是没有泄露知识。"
msgstr "零： Alice 泄露了关于 `w` 的「零」知识，也就是没有泄露知识。"

#: src/zkp-intro/1/zkp-back.md:128
msgid "知识：这里就是指的就是 `w`。"
msgstr "知识：这里就是指的就是 `w`。"

#: src/zkp-intro/1/zkp-back.md:129
msgid "证明：就是Alice与Bob对话中的「黑科技部分」。"
msgstr "证明：就是Alice与Bob对话中的「黑科技部分」。"

#: src/zkp-intro/1/zkp-back.md:131
msgid "好了，证明也就是黑科技部分还没讲。看官们不要急，且听我慢慢道来。"
msgstr "好了，证明也就是黑科技部分还没讲。看官们不要急，且听我慢慢道来。"

#: src/zkp-intro/1/zkp-back.md:133
msgid "零知识证明有什么用处？"
msgstr "零知识证明有什么用处？"

#: src/zkp-intro/1/zkp-back.md:135
msgid ""
"一提零知识证明技术，很多人就想到了匿名 Coin，比如 Monero, 比如 ZCash。确实，"
"这几个 Coin 很好地普及了零知识证明，我本人也是通过 ZCash 才第一次听说了零知识"
"证明这个词。但是在更深入地了解这个技术之后，深深感觉这个技术的威力远不止这一"
"点。"
msgstr ""
"一提零知识证明技术，很多人就想到了匿名 Coin，比如 Monero, 比如 ZCash。确实，"
"这几个 Coin 很好地普及了零知识证明，我本人也是通过 ZCash 才第一次听说了零知识"
"证明这个词。但是在更深入地了解这个技术之后，深深感觉这个技术的威力远不止这一"
"点。"

#: src/zkp-intro/1/zkp-back.md:137
msgid "零知识证明技术可以解决数据的信任问题，计算的信任问题！"
msgstr "零知识证明技术可以解决数据的信任问题，计算的信任问题！"

#: src/zkp-intro/1/zkp-back.md:139
msgid ""
"张三说他有100块钱，李四说他北大毕业，王五说要和八菲特共进午餐。空口无凭，"
"`Show me the proof`。"
msgstr ""
"张三说他有100块钱，李四说他北大毕业，王五说要和八菲特共进午餐。空口无凭，"
"`Show me the proof`。"

#: src/zkp-intro/1/zkp-back.md:141
msgid "![show-me-the-proof](img/showmeproof.jpg)"
msgstr "![show-me-the-proof](img/showmeproof.jpg)"

#: src/zkp-intro/1/zkp-back.md:143
msgid ""
"那么「零知识证明」能解决数据的信任如何理解呢？在上一篇文章『zkPoD: 区块链，零"
"知识证明与形式化验证，实现无中介、零信任的公平交易』\\[9\\]里面，我提到了一个"
"概念「模拟」："
msgstr ""
"那么「零知识证明」能解决数据的信任如何理解呢？在上一篇文章『zkPoD: 区块链，零"
"知识证明与形式化验证，实现无中介、零信任的公平交易』\\[9\\]里面，我提到了一个"
"概念「模拟」："

#: src/zkp-intro/1/zkp-back.md:145
msgid "零知识证明技术可以「模拟」出一个第三方，来保证某一个论断是可信的"
msgstr "零知识证明技术可以「模拟」出一个第三方，来保证某一个论断是可信的"

#: src/zkp-intro/1/zkp-back.md:147
msgid ""
"换句话说，当我们收到一个加了密的数据， 然后还有一个零知识证明。这个零知识证明"
"是说 「关于数据的 X 断言成立」，那么这等价于有一个天使在我们耳边悄声说，「关"
"于数据的X 断言成立」！"
msgstr ""
"换句话说，当我们收到一个加了密的数据， 然后还有一个零知识证明。这个零知识证明"
"是说 「关于数据的 X 断言成立」，那么这等价于有一个天使在我们耳边悄声说，「关"
"于数据的X 断言成立」！"

#: src/zkp-intro/1/zkp-back.md:149
msgid "![trusted-party](img/angel.png)"
msgstr "![trusted-party](img/angel.png)"

#: src/zkp-intro/1/zkp-back.md:151
msgid ""
"对于这个 `X 断言`，可以非常灵活，它可以是一个 `NP`复杂度的算法。大白话讲只要"
"我们能写一段程序（一个多项式时间的算法）来判断一个数据是否满足 `X 断言`，那么"
"这个断言就可以用零知识证明的方式来表达。通俗点讲，只要数据判定是客观的，那么"
"就零知识证明就适用。"
msgstr ""
"对于这个 `X 断言`，可以非常灵活，它可以是一个 `NP`复杂度的算法。大白话讲只要"
"我们能写一段程序（一个多项式时间的算法）来判断一个数据是否满足 `X 断言`，那么"
"这个断言就可以用零知识证明的方式来表达。通俗点讲，只要数据判定是客观的，那么"
"就零知识证明就适用。"

#: src/zkp-intro/1/zkp-back.md:153
msgid "零知识证明的一些用处："
msgstr "零知识证明的一些用处："

#: src/zkp-intro/1/zkp-back.md:155
msgid ""
"数据的隐私保护：在一个数据表格中，多多少少都有一些信息不想被暴露，比如当年我"
"的成绩单，我只想向人证明，我的成绩及格了，但是我不想让别人知道我到底考了61分"
"还是62分，这会很尴尬。我没有心脏病，但是保险公司需要了解这一点，但是我不想让"
"保险公司知道我的隐私信息。那我可以证明给保险公司看，我没有心脏病，但是病历的"
"全部并不需要暴露。我是一家企业，我想向银行贷款，我只想向银行证明我具备健康的"
"业务与还款能力，但是我不想让银行知道我们的一些商业秘密。"
msgstr ""
"数据的隐私保护：在一个数据表格中，多多少少都有一些信息不想被暴露，比如当年我"
"的成绩单，我只想向人证明，我的成绩及格了，但是我不想让别人知道我到底考了61分"
"还是62分，这会很尴尬。我没有心脏病，但是保险公司需要了解这一点，但是我不想让"
"保险公司知道我的隐私信息。那我可以证明给保险公司看，我没有心脏病，但是病历的"
"全部并不需要暴露。我是一家企业，我想向银行贷款，我只想向银行证明我具备健康的"
"业务与还款能力，但是我不想让银行知道我们的一些商业秘密。"

#: src/zkp-intro/1/zkp-back.md:156
msgid ""
"计算压缩与区块链扩容：在众多的区块链扩容技术中，Vitalik 采用 zkSNARK 技术能够"
"给现有的以太坊框架带来几十倍的性能提升。因为有了计算的证明，同样一个计算就没"
"必要重复多次了，在传统的区块链架构中，同样的计算被重复多次，比如签名的校验，"
"交易合法性校验，智能合约的执行等等。这些计算过程都可以被零知识证明技术进行压"
"缩。"
msgstr ""
"计算压缩与区块链扩容：在众多的区块链扩容技术中，Vitalik 采用 zkSNARK 技术能够"
"给现有的以太坊框架带来几十倍的性能提升。因为有了计算的证明，同样一个计算就没"
"必要重复多次了，在传统的区块链架构中，同样的计算被重复多次，比如签名的校验，"
"交易合法性校验，智能合约的执行等等。这些计算过程都可以被零知识证明技术进行压"
"缩。"

#: src/zkp-intro/1/zkp-back.md:157
msgid ""
"端到端的通讯加密：用户之间可以互相发消息，但是不用担心服务器拿到所有的消息记"
"录，同时消息也可以按照服务器的要求，出示相应的零知识证明，比如消息的来源、与"
"发送的目的地。"
msgstr ""
"端到端的通讯加密：用户之间可以互相发消息，但是不用担心服务器拿到所有的消息记"
"录，同时消息也可以按照服务器的要求，出示相应的零知识证明，比如消息的来源、与"
"发送的目的地。"

#: src/zkp-intro/1/zkp-back.md:158
msgid ""
"身份认证：用户可以向网站证明，他拥有私钥，或者知道某个只要用户自己才知道的秘"
"密答案，而网站并不需要知道，但是网站可以通过验证这个零知识证明， 从而确认用户"
"的身份"
msgstr ""
"身份认证：用户可以向网站证明，他拥有私钥，或者知道某个只要用户自己才知道的秘"
"密答案，而网站并不需要知道，但是网站可以通过验证这个零知识证明， 从而确认用户"
"的身份"

#: src/zkp-intro/1/zkp-back.md:159
msgid ""
"去中心化存储：服务器可以向用户证明他们的数据被妥善保存，并且不泄露数据的任何"
"内容。"
msgstr ""
"去中心化存储：服务器可以向用户证明他们的数据被妥善保存，并且不泄露数据的任何"
"内容。"

#: src/zkp-intro/1/zkp-back.md:160
msgid ""
"信用记录：信用记录是另一个可以充分发挥零知识证明优势的领域，用户可以有选择性"
"的向另一方出示自己的信用记录，一方面可以有选择的出示满足对方要求的记录分数，"
"同时证明信用记录的真实性。"
msgstr ""
"信用记录：信用记录是另一个可以充分发挥零知识证明优势的领域，用户可以有选择性"
"的向另一方出示自己的信用记录，一方面可以有选择的出示满足对方要求的记录分数，"
"同时证明信用记录的真实性。"

#: src/zkp-intro/1/zkp-back.md:161
msgid "构造完全公平的线上数字化商品的交易协议\\[9\\]。"
msgstr "构造完全公平的线上数字化商品的交易协议\\[9\\]。"

#: src/zkp-intro/1/zkp-back.md:162
msgid "更多的例子，可以是任何形式的数据共享，数据处理与数据传输。"
msgstr "更多的例子，可以是任何形式的数据共享，数据处理与数据传输。"

#: src/zkp-intro/1/zkp-back.md:164
msgid "举例：地图三染色问题"
msgstr "举例：地图三染色问题"

#: src/zkp-intro/1/zkp-back.md:166
msgid ""
"下面讲一个经典的问题，地图的三染色问题。如何用三种颜色染色一个地图，保证任意"
"两个相邻的地区都是不同的颜色。我们把这个「地图三染色问题」转变成一个「连通图"
"的顶点三染色问题」。假设每个地区都有一个首府（节点），然后把相邻的节点连接起"
"来，这样地图染色问题可以变成一个连通图的顶点染色问题。"
msgstr ""
"下面讲一个经典的问题，地图的三染色问题。如何用三种颜色染色一个地图，保证任意"
"两个相邻的地区都是不同的颜色。我们把这个「地图三染色问题」转变成一个「连通图"
"的顶点三染色问题」。假设每个地区都有一个首府（节点），然后把相邻的节点连接起"
"来，这样地图染色问题可以变成一个连通图的顶点染色问题。"

#: src/zkp-intro/1/zkp-back.md:168
msgid "下面我们设计一个交互协议："
msgstr "下面我们设计一个交互协议："

#: src/zkp-intro/1/zkp-back.md:170
msgid "「证明者」Alice"
msgstr "「证明者」Alice"

#: src/zkp-intro/1/zkp-back.md:171
msgid "「验证者」 Bob"
msgstr "「验证者」 Bob"

#: src/zkp-intro/1/zkp-back.md:173
msgid ""
"Alice 手里有一个地图三染色的答案，请见下图。这个图总共有 6 个顶点，9 条边。"
msgstr ""
"Alice 手里有一个地图三染色的答案，请见下图。这个图总共有 6 个顶点，9 条边。"

#: src/zkp-intro/1/zkp-back.md:175
msgid "![3c-0](img/3c-0.png)"
msgstr "![3c-0](img/3c-0.png)"

#: src/zkp-intro/1/zkp-back.md:177
msgid ""
"现在 Alice 想证明给 Bob 她有答案，但是又不想让 Bob 知道这个答案。Alice 要怎么"
"做呢？"
msgstr ""
"现在 Alice 想证明给 Bob 她有答案，但是又不想让 Bob 知道这个答案。Alice 要怎么"
"做呢？"

#: src/zkp-intro/1/zkp-back.md:179
msgid ""
"Alice 先要对染过色的图进行一些「变换」，把颜色做一次大挪移，例如把所有的绿色"
"变成橙色，把所有的蓝色变成绿色，把所有的橙色变成蓝色。然后 Alice  得到了一个"
"新的染色答案，这时候她把新的图的每一个顶点都用纸片盖上，然后出示给 Bob 看。"
msgstr ""
"Alice 先要对染过色的图进行一些「变换」，把颜色做一次大挪移，例如把所有的绿色"
"变成橙色，把所有的蓝色变成绿色，把所有的橙色变成蓝色。然后 Alice  得到了一个"
"新的染色答案，这时候她把新的图的每一个顶点都用纸片盖上，然后出示给 Bob 看。"

#: src/zkp-intro/1/zkp-back.md:181
msgid "![3c-1](img/3c-1.png)"
msgstr "![3c-1](img/3c-1.png)"

#: src/zkp-intro/1/zkp-back.md:183
msgid ""
"看下图，这时候 Bob 要出手了（请见下图），他要随机挑选一条「边」，注意是随机，"
"不让 Alice 提前预测到的随机数。"
msgstr ""
"看下图，这时候 Bob 要出手了（请见下图），他要随机挑选一条「边」，注意是随机，"
"不让 Alice 提前预测到的随机数。"

#: src/zkp-intro/1/zkp-back.md:185
msgid "![3c-2](img/3c-2.png)"
msgstr "![3c-2](img/3c-2.png)"

#: src/zkp-intro/1/zkp-back.md:187
msgid "假设 Bob 挑选的是最下面的一条边，然后告诉 Alice。"
msgstr "假设 Bob 挑选的是最下面的一条边，然后告诉 Alice。"

#: src/zkp-intro/1/zkp-back.md:189
msgid "![3c-3](img/3c-3.png)"
msgstr "![3c-3](img/3c-3.png)"

#: src/zkp-intro/1/zkp-back.md:191
msgid ""
"这时候 Alice 揭开这条边两端的纸片，让 Bob 检查，Bob 发现这两个顶点的颜色是不"
"同的，那么 Bob 认为这次检验同构。这时候，Bob 只看到了图的局部，能被说服剩下的"
"图顶点的染色都没问题吗？你肯定觉得这远远不够，也许恰好 Alice 蒙对了呢？其它没"
"暴露的顶点可能是胡乱染色的。"
msgstr ""
"这时候 Alice 揭开这条边两端的纸片，让 Bob 检查，Bob 发现这两个顶点的颜色是不"
"同的，那么 Bob 认为这次检验同构。这时候，Bob 只看到了图的局部，能被说服剩下的"
"图顶点的染色都没问题吗？你肯定觉得这远远不够，也许恰好 Alice 蒙对了呢？其它没"
"暴露的顶点可能是胡乱染色的。"

#: src/zkp-intro/1/zkp-back.md:193
msgid "没关系，Bob 可以要求 Alice 再来一遍，看下图"
msgstr "没关系，Bob 可以要求 Alice 再来一遍，看下图"

#: src/zkp-intro/1/zkp-back.md:195
msgid "![3c-4](img/3c-4.png)"
msgstr "![3c-4](img/3c-4.png)"

#: src/zkp-intro/1/zkp-back.md:197
msgid ""
"Alice 再次把颜色做一次变换，把蓝色改成紫色，改绿色改成棕色，把橙色改成灰色，"
"然后把所有的顶点盖上纸片。然后 Bob 再挑选一条边，比如像上图一样，选择的是一条"
"竖着的边，然后让 Alice 揭开纸片看看，如果这时候 Bob 再次发现这条边两端的顶点"
"颜色不同，那么 Bob 这时候已经有点动摇了，可能 Alice 真的有这个染色答案。可"
"是，两次仍然不够，Bob 还想再多来几遍。"
msgstr ""
"Alice 再次把颜色做一次变换，把蓝色改成紫色，改绿色改成棕色，把橙色改成灰色，"
"然后把所有的顶点盖上纸片。然后 Bob 再挑选一条边，比如像上图一样，选择的是一条"
"竖着的边，然后让 Alice 揭开纸片看看，如果这时候 Bob 再次发现这条边两端的顶点"
"颜色不同，那么 Bob 这时候已经有点动摇了，可能 Alice 真的有这个染色答案。可"
"是，两次仍然不够，Bob 还想再多来几遍。"

#: src/zkp-intro/1/zkp-back.md:199
msgid ""
"那么经过反复多次重复这三个步骤，可以让 Alice 作弊并能成功骗过 Bob 的概率会以"
"指数级的方式减小。假设经过 `n` 轮之后，Alice 作弊的概率为 "
msgstr ""
"那么经过反复多次重复这三个步骤，可以让 Alice 作弊并能成功骗过 Bob 的概率会以"
"指数级的方式减小。假设经过 `n` 轮之后，Alice 作弊的概率为 "

#: src/zkp-intro/1/zkp-back.md:200
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:174
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:327
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:30
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:74
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:96
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:98
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:107
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:137
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:141
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:143
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:185
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:191
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:260
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:278
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:281
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:284
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:286
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:287
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:293
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:295
#: src/zk-snarks/3-General-Purpose-Computation.md:81
#: src/zk-snarks/3-General-Purpose-Computation.md:100
#: src/zk-snarks/3-General-Purpose-Computation.md:169
#: src/zk-snarks/3-General-Purpose-Computation.md:184
#: src/zk-snarks/3-General-Purpose-Computation.md:186
#: src/zk-snarks/3-General-Purpose-Computation.md:198
#: src/zk-snarks/3-General-Purpose-Computation.md:212
#: src/zk-snarks/3-General-Purpose-Computation.md:214
#: src/zk-snarks/3-General-Purpose-Computation.md:229
#: src/zk-snarks/3-General-Purpose-Computation.md:233
#: src/zk-snarks/3-General-Purpose-Computation.md:249
#: src/zk-snarks/3-General-Purpose-Computation.md:253
#: src/zk-snarks/3-General-Purpose-Computation.md:263
#: src/zk-snarks/3-General-Purpose-Computation.md:266
#: src/zk-snarks/3-General-Purpose-Computation.md:276
#: src/zk-snarks/3-General-Purpose-Computation.md:277
#: src/zk-snarks/3-General-Purpose-Computation.md:278
#: src/zk-snarks/3-General-Purpose-Computation.md:279
#: src/zk-snarks/3-General-Purpose-Computation.md:293
#: src/zk-snarks/3-General-Purpose-Computation.md:295
#: src/zk-snarks/3-General-Purpose-Computation.md:300
#: src/zk-snarks/3-General-Purpose-Computation.md:306
#: src/zk-snarks/3-General-Purpose-Computation.md:369
#: src/zk-snarks/3-General-Purpose-Computation.md:382
#: src/zk-snarks/4-Construction-Properties.md:95
#: src/zk-snarks/4-Construction-Properties.md:115
#: src/zk-snarks/4-Construction-Properties.md:186
#: src/zk-snarks/4-Construction-Properties.md:231
#: src/zk-snarks/4-Construction-Properties.md:237
#: src/zk-snarks/4-Construction-Properties.md:270
#: src/zk-snarks/4-Construction-Properties.md:274
#: src/zk-snarks/4-Construction-Properties.md:284
#: src/zk-snarks/4-Construction-Properties.md:291
#: src/zk-snarks/4-Construction-Properties.md:325
#: src/zk-snarks/4-Construction-Properties.md:326
#: src/zk-snarks/4-Construction-Properties.md:327
#: src/zk-snarks/4-Construction-Properties.md:333
#: src/zk-snarks/4-Construction-Properties.md:335
#: src/zk-snarks/4-Construction-Properties.md:397
#: src/zk-snarks/5-Pinocchio-Protocol.md:20
#: src/zk-snarks/5-Pinocchio-Protocol.md:46
#: src/zk-snarks/5-Pinocchio-Protocol.md:62
#: src/zk-snarks/5-Pinocchio-Protocol.md:69
#: src/zk-snarks/5-Pinocchio-Protocol.md:71
#: src/zk-snarks/5-Pinocchio-Protocol.md:74
#: src/zk-snarks/5-Pinocchio-Protocol.md:76
#: src/zk-snarks/5-Pinocchio-Protocol.md:84
#: src/zk-snarks/5-Pinocchio-Protocol.md:99
#: src/zk-snarks/5-Pinocchio-Protocol.md:115
#: src/zk-snarks/5-Pinocchio-Protocol.md:119
#: src/zk-snarks/5-Pinocchio-Protocol.md:170
#: src/halo2/tmp/4-IsZero-Check-example-3.md:120
#: src/halo2/tmp/4-IsZero-Check-example-3.md:122
#: src/halo2/tmp/4-IsZero-Check-example-3.md:123
#: src/halo2/tmp/4-IsZero-Check-example-3.md:167
#: src/halo2/tmp/4-IsZero-Check-example-3.md:190
#: src/zk-everything/zk-learning-miles/KZG.md:96
#: src/zk-everything/zk-learning-miles/KZG.md:106
#: src/zk-everything/zk-learning-miles/KZG.md:110
#: src/zk-everything/zk-learning-miles/KZG.md:170
#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:238 Zeroknowledge.md:239
#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:312 SNARKs.md:395
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:64
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:134
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:448
#: src/zk-everything/zk-everything-joe/Hyrax.md:58
#: src/zk-everything/zk-everything-joe/Hyrax.md:64
#: src/zk-everything/zk-everything-joe/Hyrax.md:70 src/Nova/SuperNova.md:14
#: src/public goods/4-Proving-System.md:53 goods/4-Proving-System.md:55
#: goods/4-Proving-System.md:58 goods/4-Proving-System.md:60
#: goods/4-Proving-System.md:62 goods/4-Proving-System.md:111
#: goods/4-Proving-System.md:120 goods/4-Proving-System.md:122
#: goods/4-Proving-System.md:149 goods/4-Proving-System.md:155
#: goods/4-Proving-System.md:167 goods/4-Proving-System.md:171
#: goods/4-Proving-System.md:177 goods/4-Proving-System.md:206
#: goods/4-Proving-System.md:208
msgid "P"
msgstr "P"

#: src/zkp-intro/1/zkp-back.md:200 src/plonk-intro-cn/plonk-permutation.md:58
#: src/plonk-intro-cn/plonk-permutation.md:62
#: src/plonk-intro-cn/plonk-permutation.md:64
#: src/plonk-intro-cn/plonk-permutation.md:66
#: src/plonk-intro-cn/plonk-permutation.md:68
#: src/plonk-intro-cn/plonk-permutation.md:72
#: src/plonk-intro-cn/plonk-permutation.md:76
#: src/plonk-intro-cn/plonk-permutation.md:80
#: src/plonk-intro-cn/plonk-permutation.md:82
#: src/plonk-intro-cn/plonk-permutation.md:84
#: src/plonk-intro-cn/plonk-permutation.md:88
#: src/plonk-intro-cn/plonk-permutation.md:90
#: src/plonk-intro-cn/plonk-permutation.md:92
#: src/plonk-intro-cn/plonk-permutation.md:96
#: src/plonk-intro-cn/plonk-permutation.md:110
#: src/plonk-intro-cn/plonk-randomizing.md:145
#: src/plonk-intro-cn/plonk-randomizing.md:149
#: src/plonk-intro-cn/plonk-randomizing.md:151
#: src/plonk-intro-cn/plonk-randomizing.md:153
#: src/plonk-intro-cn/plonk-randomizing.md:161
#: src/plonk-intro-cn/plonk-randomizing.md:163
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:130
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:137
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:159
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:160
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:166
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:167
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:168
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:174
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:175
#: src/zk-snarks/3-General-Purpose-Computation.md:64
#: src/zk-snarks/3-General-Purpose-Computation.md:66
#: src/zk-snarks/3-General-Purpose-Computation.md:68
#: src/zk-snarks/3-General-Purpose-Computation.md:74
#: src/zk-snarks/3-General-Purpose-Computation.md:75
#: src/zk-snarks/3-General-Purpose-Computation.md:79
#: src/zk-snarks/3-General-Purpose-Computation.md:81
#: src/zk-snarks/3-General-Purpose-Computation.md:83
#: src/zk-snarks/3-General-Purpose-Computation.md:90
#: src/zk-snarks/3-General-Purpose-Computation.md:96
#: src/zk-snarks/3-General-Purpose-Computation.md:97
#: src/zk-snarks/3-General-Purpose-Computation.md:98
#: src/zk-snarks/3-General-Purpose-Computation.md:100
#: src/zk-snarks/3-General-Purpose-Computation.md:102
#: src/zk-snarks/3-General-Purpose-Computation.md:105
#: src/zk-snarks/3-General-Purpose-Computation.md:108
#: src/zk-snarks/3-General-Purpose-Computation.md:143
#: src/zk-snarks/3-General-Purpose-Computation.md:149
#: src/zk-snarks/3-General-Purpose-Computation.md:155
#: src/zk-snarks/3-General-Purpose-Computation.md:161
#: src/zk-snarks/3-General-Purpose-Computation.md:165
#: src/zk-snarks/3-General-Purpose-Computation.md:171
#: src/zk-snarks/3-General-Purpose-Computation.md:180
#: src/zk-snarks/3-General-Purpose-Computation.md:182
#: src/zk-snarks/3-General-Purpose-Computation.md:184
#: src/zk-snarks/3-General-Purpose-Computation.md:196
#: src/zk-snarks/3-General-Purpose-Computation.md:213
#: src/zk-snarks/3-General-Purpose-Computation.md:315
#: src/zk-snarks/4-Construction-Properties.md:29
#: src/zk-snarks/4-Construction-Properties.md:46
#: src/zk-snarks/4-Construction-Properties.md:49
#: src/zk-snarks/4-Construction-Properties.md:51
#: src/zk-snarks/4-Construction-Properties.md:62
#: src/zk-snarks/4-Construction-Properties.md:65
#: src/zk-snarks/4-Construction-Properties.md:67
#: src/zk-snarks/4-Construction-Properties.md:76
#: src/zk-snarks/4-Construction-Properties.md:77
#: src/zk-snarks/4-Construction-Properties.md:83
#: src/zk-snarks/4-Construction-Properties.md:86
#: src/zk-snarks/4-Construction-Properties.md:98
#: src/zk-snarks/4-Construction-Properties.md:113
#: src/zk-snarks/4-Construction-Properties.md:120
#: src/zk-snarks/4-Construction-Properties.md:128
#: src/zk-snarks/4-Construction-Properties.md:135
#: src/zk-snarks/4-Construction-Properties.md:136
#: src/zk-snarks/4-Construction-Properties.md:137
#: src/zk-snarks/4-Construction-Properties.md:138
#: src/zk-snarks/4-Construction-Properties.md:155
#: src/zk-snarks/4-Construction-Properties.md:156
#: src/zk-snarks/4-Construction-Properties.md:195
#: src/zk-snarks/4-Construction-Properties.md:199
#: src/zk-snarks/4-Construction-Properties.md:207
#: src/zk-snarks/4-Construction-Properties.md:209
#: src/zk-snarks/4-Construction-Properties.md:221
#: src/zk-snarks/4-Construction-Properties.md:233
#: src/zk-snarks/4-Construction-Properties.md:239
#: src/zk-snarks/4-Construction-Properties.md:242
#: src/zk-snarks/4-Construction-Properties.md:244
#: src/zk-snarks/4-Construction-Properties.md:245
#: src/zk-snarks/4-Construction-Properties.md:249
#: src/zk-snarks/4-Construction-Properties.md:251
#: src/zk-snarks/4-Construction-Properties.md:253
#: src/zk-snarks/4-Construction-Properties.md:263
#: src/zk-snarks/4-Construction-Properties.md:271
#: src/zk-snarks/4-Construction-Properties.md:273
#: src/zk-snarks/4-Construction-Properties.md:275
#: src/zk-snarks/4-Construction-Properties.md:279
#: src/zk-snarks/4-Construction-Properties.md:284
#: src/zk-snarks/4-Construction-Properties.md:286
#: src/zk-snarks/4-Construction-Properties.md:296
#: src/zk-snarks/4-Construction-Properties.md:298
#: src/zk-snarks/4-Construction-Properties.md:300
#: src/zk-snarks/4-Construction-Properties.md:304
#: src/zk-snarks/4-Construction-Properties.md:307
#: src/zk-snarks/4-Construction-Properties.md:313
#: src/zk-snarks/4-Construction-Properties.md:317
#: src/zk-snarks/4-Construction-Properties.md:339
#: src/zk-snarks/4-Construction-Properties.md:345
#: src/zk-snarks/4-Construction-Properties.md:349
#: src/zk-snarks/4-Construction-Properties.md:357
#: src/zk-snarks/4-Construction-Properties.md:363
#: src/zk-snarks/4-Construction-Properties.md:364
#: src/zk-snarks/4-Construction-Properties.md:368
#: src/zk-snarks/4-Construction-Properties.md:370
#: src/zk-snarks/4-Construction-Properties.md:375
#: src/zk-snarks/4-Construction-Properties.md:376
#: src/zk-snarks/4-Construction-Properties.md:379
#: src/zk-snarks/4-Construction-Properties.md:381
#: src/zk-snarks/4-Construction-Properties.md:384
#: src/zk-snarks/4-Construction-Properties.md:385
#: src/zk-snarks/4-Construction-Properties.md:392
#: src/zk-snarks/4-Construction-Properties.md:394
#: src/zk-snarks/4-Construction-Properties.md:395
#: src/zk-snarks/4-Construction-Properties.md:400
#: src/zk-snarks/4-Construction-Properties.md:401
#: src/zk-snarks/4-Construction-Properties.md:405
#: src/zk-snarks/4-Construction-Properties.md:407
#: src/zk-snarks/4-Construction-Properties.md:408
#: src/zk-snarks/4-Construction-Properties.md:409
#: src/zk-snarks/4-Construction-Properties.md:419
#: src/zk-snarks/4-Construction-Properties.md:420
#: src/zk-snarks/4-Construction-Properties.md:422
#: src/zk-snarks/4-Construction-Properties.md:424
#: src/zk-snarks/4-Construction-Properties.md:428
#: src/zk-snarks/4-Construction-Properties.md:432
#: src/zk-snarks/4-Construction-Properties.md:434
#: src/zk-snarks/4-Construction-Properties.md:436
#: src/zk-snarks/4-Construction-Properties.md:438
#: src/zk-snarks/4-Construction-Properties.md:440
#: src/zk-snarks/4-Construction-Properties.md:441
#: src/zk-snarks/4-Construction-Properties.md:443
#: src/zk-snarks/5-Pinocchio-Protocol.md:45
#: src/zk-snarks/5-Pinocchio-Protocol.md:87
#: src/zk-snarks/5-Pinocchio-Protocol.md:89
#: src/zk-snarks/5-Pinocchio-Protocol.md:94
#: src/zk-snarks/5-Pinocchio-Protocol.md:98
#: src/zk-snarks/5-Pinocchio-Protocol.md:103
#: src/zk-snarks/5-Pinocchio-Protocol.md:106
#: src/zk-snarks/5-Pinocchio-Protocol.md:109
#: src/zk-snarks/5-Pinocchio-Protocol.md:111
#: src/zk-snarks/5-Pinocchio-Protocol.md:118
#: src/zk-snarks/5-Pinocchio-Protocol.md:139
#: src/zk-snarks/5-Pinocchio-Protocol.md:142
#: src/zk-snarks/5-Pinocchio-Protocol.md:145
#: src/zk-snarks/5-Pinocchio-Protocol.md:146
#: src/zk-snarks/5-Pinocchio-Protocol.md:147
#: src/zk-snarks/5-Pinocchio-Protocol.md:151
#: src/zk-snarks/5-Pinocchio-Protocol.md:152
#: src/zk-snarks/5-Pinocchio-Protocol.md:157
#: src/zk-snarks/5-Pinocchio-Protocol.md:160
#: src/zk-snarks/5-Pinocchio-Protocol.md:163
#: src/zk-snarks/5-Pinocchio-Protocol.md:165
#: src/zk-snarks/5-Pinocchio-Protocol.md:166
#: src/zk-snarks/5-Pinocchio-Protocol.md:170
#: src/zk-snarks/5-Pinocchio-Protocol.md:173
#: src/zk-snarks/5-Pinocchio-Protocol.md:188
#: src/zk-snarks/5-Pinocchio-Protocol.md:189
#: src/zk-snarks/5-Pinocchio-Protocol.md:190
#: src/zk-snarks/5-Pinocchio-Protocol.md:192
#: src/zk-snarks/5-Pinocchio-Protocol.md:195
#: src/zk-snarks/5-Pinocchio-Protocol.md:200
#: src/zk-snarks/5-Pinocchio-Protocol.md:202
#: src/zk-snarks/5-Pinocchio-Protocol.md:205
#: src/zk-snarks/5-Pinocchio-Protocol.md:207
#: src/zk-snarks/5-Pinocchio-Protocol.md:209
#: src/zk-snarks/5-Pinocchio-Protocol.md:212
#: src/zk-snarks/5-Pinocchio-Protocol.md:215
#: src/zk-snarks/5-Pinocchio-Protocol.md:219
#: src/zk-snarks/5-Pinocchio-Protocol.md:225 src/halo2/tmp/9-decomposed.md:30
#: src/zk-everything/zk-learning-miles/KZG.md:142
#: src/zk-everything/zk-learning-miles/KZG.md:145
#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:238 Zeroknowledge.md:239
#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:197 SNARKs.md:298 SNARKs.md:301 SNARKs.md:302 SNARKs.md:312
#: SNARKs.md:316 SNARKs.md:324 SNARKs.md:362 SNARKs.md:364 SNARKs.md:368
#: SNARKs.md:369 SNARKs.md:370 SNARKs.md:374 SNARKs.md:395
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:192
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:234
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:279
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:323
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:365
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:377
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:390
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:396
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:412
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:418
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:424
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:440
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:442
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:446
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:490
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:493
#: src/zk-everything/zk-everything-joe/Hyrax.md:86
#: src/zk-everything/zk-everything-joe/Hyrax.md:92
#: src/zk-everything/zk-everything-joe/Hyrax.md:98
#: src/zk-everything/zk-everything-joe/Hyrax.md:116
#: src/zk-everything/zk-everything-joe/Hyrax.md:133
#: src/zk-everything/zk-everything-joe/Hyrax.md:134
#: src/zk-everything/zk-everything-joe/Hyrax.md:140
#: src/zk-everything/zk-everything-joe/Hyrax.md:142
#: src/zk-everything/zk-everything-joe/Hyrax.md:162
#: src/zk-everything/zk-everything-joe/Hyrax.md:168
#: src/zk-everything/zk-everything-joe/Hyrax.md:173
#: src/zk-everything/zk-everything-joe/Hyrax.md:181
#: src/zk-everything/zk-everything-joe/Hyrax.md:191
#: src/zk-everything/zk-everything-joe/Hyrax.md:195
#: src/zk-everything/zk-everything-joe/Hyrax.md:198
#: src/zk-everything/zk-everything-joe/Hyrax.md:208
#: src/zk-everything/zk-everything-joe/Hyrax.md:214
#: src/zk-everything/zk-everything-joe/Hyrax.md:223
#: src/zk-everything/zk-everything-joe/Hyrax.md:282
#: src/zk-everything/zk-everything-joe/Hyrax.md:292
#: src/zk-everything/zk-everything-joe/Hyrax.md:297
#: src/zk-everything/zk-everything-joe/Hyrax.md:302
#: src/zk-everything/zk-everything-joe/Spartan.md:110
#: src/zk-everything/zk-everything-joe/Spartan.md:115
#: src/zk-everything/zk-everything-joe/Spartan.md:118
#: src/zk-everything/zk-everything-joe/Spartan.md:122
#: src/zk-everything/zk-everything-joe/Spartan.md:126
#: src/zk-everything/zk-everything-joe/Spartan.md:142
#: src/zk-everything/zk-everything-joe/Spartan.md:147
#: src/zk-everything/zk-everything-joe/Spartan.md:154
#: src/zk-everything/zk-everything-joe/Spartan.md:227
#: src/zk-everything/zk-everything-joe/Spartan.md:232
#: src/zk-everything/zk-everything-joe/Spartan.md:236
#: src/zk-everything/zk-everything-joe/Spartan.md:242
#: src/zk-everything/zk-everything-joe/Spartan.md:246
#: src/zk-everything/zk-everything-joe/Spartan.md:254
#: src/zk-everything/zk-everything-joe/Spartan.md:257
#: src/zk-everything/zk-everything-joe/Spartan.md:264
#: src/zk-everything/zk-everything-joe/Spartan.md:268
#: src/zk-everything/zk-everything-joe/Spartan.md:275
#: src/zk-everything/zk-everything-joe/Spartan.md:278
#: src/zk-everything/zk-everything-joe/Spartan.md:319
#: src/zk-everything/zk-everything-joe/Spartan.md:334
#: src/zk-everything/zk-everything-joe/Spartan.md:339
#: src/zk-everything/zk-everything-joe/Spartan.md:343
#: src/zk-everything/zk-everything-joe/Spartan.md:344
#: src/zk-everything/zk-everything-joe/Spartan.md:346
#: src/zk-everything/zk-everything-joe/Spartan.md:349
#: src/zk-everything/zk-everything-joe/Spartan.md:350
#: src/zk-everything/zk-everything-joe/Spartan.md:353
#: src/zk-everything/zk-everything-joe/Spartan.md:355
#: src/zk-everything/zk-everything-joe/Spartan.md:360
#: src/zk-everything/zk-everything-joe/Spartan.md:361
#: src/zk-everything/zk-everything-joe/Spartan.md:411
#: src/zk-everything/zk-everything-joe/Spartan.md:434
#: src/zk-everything/zk-everything-joe/Spartan.md:436
#: src/zk-everything/zk-everything-joe/Spartan.md:441
#: src/zk-everything/zk-everything-joe/Spartan.md:445
#: src/zk-everything/zk-everything-joe/Spartan.md:450
#: src/zk-everything/zk-everything-joe/Spartan.md:455
#: src/zk-everything/zk-everything-joe/Spartan.md:458 src/public
#: goods/第二章.md:9 goods/第二章.md:10 goods/第二章.md:16
#: goods/第二章.md:18 goods/第二章.md:19 goods/第二章.md:20
#: goods/第二章.md:25 goods/第二章.md:26 goods/第二章.md:33
#: goods/第二章.md:59 goods/第二章.md:60 goods/第二章.md:61
#: goods/第二章.md:65 goods/第二章.md:67 goods/第二章.md:70
#: goods/第二章.md:72 goods/第二章.md:74 goods/第二章.md:80
#: goods/第二章.md:97 goods/第二章.md:103 goods/第二章.md:125
#: goods/第二章.md:177 goods/4-Proving-System.md:55
#: goods/4-Proving-System.md:56 goods/4-Proving-System.md:58
#: goods/4-Proving-System.md:62 goods/4-Proving-System.md:64
#: goods/4-Proving-System.md:75 goods/4-Proving-System.md:105
#: goods/4-Proving-System.md:106 goods/4-Proving-System.md:107
#: goods/4-Proving-System.md:111 goods/4-Proving-System.md:117
#: goods/4-Proving-System.md:122 goods/4-Proving-System.md:124
#: goods/4-Proving-System.md:125 goods/4-Proving-System.md:126
#: goods/4-Proving-System.md:127 goods/4-Proving-System.md:129
#: goods/4-Proving-System.md:146 goods/4-Proving-System.md:149
#: goods/4-Proving-System.md:151 goods/4-Proving-System.md:155
#: goods/4-Proving-System.md:169 goods/4-Proving-System.md:173
#: goods/4-Proving-System.md:179
msgid "r"
msgstr "r"

#: src/zkp-intro/1/zkp-back.md:200
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:145
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:383
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:405
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:486
#: src/zk-everything/zk-everything-joe/Spartan.md:136
#: src/zk-everything/zk-everything-joe/Spartan.md:143
#: src/zk-everything/zk-everything-joe/Spartan.md:148
#: src/zk-everything/zk-everything-joe/Spartan.md:169
#: src/zk-everything/zk-everything-joe/Spartan.md:394
#: src/zk-everything/zk-everything-joe/Spartan.md:416
#: src/zk-everything/zk-everything-joe/Spartan.md:450
msgid "\\[("
msgstr "\\[("

#: src/zkp-intro/1/zkp-back.md:200 src/plonk-intro-cn/plonk-polycom.md:33
#: src/plonk-intro-cn/plonk-polycom.md:47
#: src/plonk-intro-cn/plonk-polycom.md:49
#: src/plonk-intro-cn/plonk-polycom.md:53
#: src/plonk-intro-cn/plonk-polycom.md:55
#: src/plonk-intro-cn/plonk-polycom.md:57
#: src/plonk-intro-cn/plonk-polycom.md:73
#: src/plonk-intro-cn/plonk-polycom.md:77
#: src/plonk-intro-cn/plonk-polycom.md:117
#: src/plonk-intro-cn/plonk-polycom.md:153
#: src/plonk-intro-cn/plonk-polycom.md:157
#: src/plonk-intro-cn/plonk-lookup.md:190
#: src/plonk-intro-cn/plonk-lookup.md:192
#: src/plonk-intro-cn/plonk-lookup.md:228
#: src/plonk-intro-cn/plonk-lookup.md:230
#: src/zk-everything/zk-learning-miles/KZG.md:75
#: src/zk-everything/zk-learning-miles/KZG.md:162
#: src/zk-everything/zk-learning-miles/KZG.md:164
#: src/zk-everything/zk-learning-miles/KZG.md:183
#: src/zk-everything/zk-learning-miles/KZG.md:185
#: src/zk-everything/zk-learning-miles/KZG.md:197
#: src/zk-everything/zk-learning-miles/KZG.md:201
#: src/zk-everything/zk-learning-miles/KZG.md:220
#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:350 src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:58
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:64
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:79
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:83
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:87
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:122
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:134
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:152
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:448
#: src/zk-everything/zk-everything-joe/Hyrax.md:48
#: src/zk-everything/zk-everything-joe/Hyrax.md:58
#: src/zk-everything/zk-everything-joe/Hyrax.md:64
#: src/zk-everything/zk-everything-joe/Hyrax.md:68
#: src/zk-everything/zk-everything-joe/Hyrax.md:70 src/public
#: goods/第二章.md:146 goods/第二章.md:147 goods/4-Proving-System.md:105
#: goods/4-Proving-System.md:111 goods/4-Proving-System.md:117
#: goods/4-Proving-System.md:120 goods/4-Proving-System.md:122
#: goods/4-Proving-System.md:125 goods/4-Proving-System.md:149
#: goods/4-Proving-System.md:155 goods/4-Proving-System.md:166
#: goods/4-Proving-System.md:167 goods/4-Proving-System.md:169
#: goods/4-Proving-System.md:177
msgid "G"
msgstr "G"

#: src/zkp-intro/1/zkp-back.md:200
#: src/plonk-intro-cn/plonk-arithmetization.md:22
#: src/plonk-intro-cn/plonk-arithmetization.md:37
#: src/plonk-intro-cn/plonk-arithmetization.md:43
#: src/plonk-intro-cn/plonk-arithmetization.md:45
#: src/plonk-intro-cn/plonk-arithmetization.md:49
#: src/plonk-intro-cn/plonk-arithmetization.md:51
#: src/plonk-intro-cn/plonk-arithmetization.md:57
#: src/plonk-intro-cn/plonk-arithmetization.md:59
#: src/plonk-intro-cn/plonk-arithmetization.md:61
#: src/plonk-intro-cn/plonk-arithmetization.md:63
#: src/plonk-intro-cn/plonk-arithmetization.md:65
#: src/plonk-intro-cn/plonk-arithmetization.md:77
#: src/plonk-intro-cn/plonk-arithmetization.md:91
#: src/plonk-intro-cn/plonk-arithmetization.md:93
#: src/plonk-intro-cn/plonk-arithmetization.md:97
#: src/plonk-intro-cn/plonk-arithmetization.md:115
#: src/plonk-intro-cn/plonk-arithmetization.md:129
#: src/plonk-intro-cn/plonk-arithmetization.md:135
#: src/plonk-intro-cn/plonk-arithmetization.md:177
#: src/plonk-intro-cn/plonk-arithmetization.md:187
#: src/plonk-intro-cn/plonk-arithmetization.md:189
#: src/plonk-intro-cn/plonk-arithmetization.md:191
#: src/plonk-intro-cn/plonk-arithmetization.md:197
#: src/plonk-intro-cn/plonk-arithmetization.md:201
#: src/plonk-intro-cn/plonk-arithmetization.md:203
#: src/plonk-intro-cn/plonk-arithmetization.md:209
#: src/plonk-intro-cn/plonk-arithmetization.md:211
#: src/plonk-intro-cn/plonk-arithmetization.md:213
#: src/plonk-intro-cn/plonk-arithmetization.md:217
#: src/plonk-intro-cn/plonk-arithmetization.md:227
#: src/plonk-intro-cn/plonk-arithmetization.md:239
#: src/plonk-intro-cn/plonk-arithmetization.md:243
#: src/plonk-intro-cn/plonk-arithmetization.md:245
#: src/plonk-intro-cn/plonk-arithmetization.md:247
#: src/plonk-intro-cn/plonk-arithmetization.md:249
#: src/plonk-intro-cn/plonk-arithmetization.md:259
#: src/plonk-intro-cn/plonk-lagrange-basis.md:30
#: src/plonk-intro-cn/plonk-lagrange-basis.md:34
#: src/plonk-intro-cn/plonk-lagrange-basis.md:46
#: src/plonk-intro-cn/plonk-lagrange-basis.md:54
#: src/plonk-intro-cn/plonk-lagrange-basis.md:78
#: src/plonk-intro-cn/plonk-lagrange-basis.md:80
#: src/plonk-intro-cn/plonk-lagrange-basis.md:89
#: src/plonk-intro-cn/plonk-lagrange-basis.md:93
#: src/plonk-intro-cn/plonk-lagrange-basis.md:109
#: src/plonk-intro-cn/plonk-lagrange-basis.md:111
#: src/plonk-intro-cn/plonk-lagrange-basis.md:115
#: src/plonk-intro-cn/plonk-lagrange-basis.md:121
#: src/plonk-intro-cn/plonk-lagrange-basis.md:129
#: src/plonk-intro-cn/plonk-lagrange-basis.md:131
#: src/plonk-intro-cn/plonk-lagrange-basis.md:137
#: src/plonk-intro-cn/plonk-lagrange-basis.md:139
#: src/plonk-intro-cn/plonk-lagrange-basis.md:143
#: src/plonk-intro-cn/plonk-lagrange-basis.md:161
#: src/plonk-intro-cn/plonk-lagrange-basis.md:172
#: src/plonk-intro-cn/plonk-permutation.md:5
#: src/plonk-intro-cn/plonk-permutation.md:11
#: src/plonk-intro-cn/plonk-permutation.md:13
#: src/plonk-intro-cn/plonk-permutation.md:23
#: src/plonk-intro-cn/plonk-permutation.md:72
#: src/plonk-intro-cn/plonk-permutation.md:76
#: src/plonk-intro-cn/plonk-permutation.md:80
#: src/plonk-intro-cn/plonk-permutation.md:84
#: src/plonk-intro-cn/plonk-permutation.md:92
#: src/plonk-intro-cn/plonk-permutation.md:106
#: src/plonk-intro-cn/plonk-permutation.md:108
#: src/plonk-intro-cn/plonk-permutation.md:140
#: src/plonk-intro-cn/plonk-permutation.md:144
#: src/plonk-intro-cn/plonk-permutation.md:150
#: src/plonk-intro-cn/plonk-permutation.md:156
#: src/plonk-intro-cn/plonk-permutation.md:158
#: src/plonk-intro-cn/plonk-permutation.md:159
#: src/plonk-intro-cn/plonk-permutation.md:161
#: src/plonk-intro-cn/plonk-permutation.md:162
#: src/plonk-intro-cn/plonk-permutation.md:208
#: src/plonk-intro-cn/plonk-constraints.md:13
#: src/plonk-intro-cn/plonk-constraints.md:17
#: src/plonk-intro-cn/plonk-constraints.md:25
#: src/plonk-intro-cn/plonk-constraints.md:27
#: src/plonk-intro-cn/plonk-constraints.md:29
#: src/plonk-intro-cn/plonk-constraints.md:35
#: src/plonk-intro-cn/plonk-constraints.md:37
#: src/plonk-intro-cn/plonk-constraints.md:39
#: src/plonk-intro-cn/plonk-constraints.md:45
#: src/plonk-intro-cn/plonk-constraints.md:59
#: src/plonk-intro-cn/plonk-constraints.md:63
#: src/plonk-intro-cn/plonk-constraints.md:65
#: src/plonk-intro-cn/plonk-constraints.md:67
#: src/plonk-intro-cn/plonk-constraints.md:69
#: src/plonk-intro-cn/plonk-constraints.md:71
#: src/plonk-intro-cn/plonk-constraints.md:75
#: src/plonk-intro-cn/plonk-constraints.md:89
#: src/plonk-intro-cn/plonk-constraints.md:99
#: src/plonk-intro-cn/plonk-constraints.md:109
#: src/plonk-intro-cn/plonk-constraints.md:120
#: src/plonk-intro-cn/plonk-constraints.md:141
#: src/plonk-intro-cn/plonk-constraints.md:143
#: src/plonk-intro-cn/plonk-constraints.md:145
#: src/plonk-intro-cn/plonk-constraints.md:149
#: src/plonk-intro-cn/plonk-constraints.md:153
#: src/plonk-intro-cn/plonk-constraints.md:155
#: src/plonk-intro-cn/plonk-polycom.md:15
#: src/plonk-intro-cn/plonk-polycom.md:25
#: src/plonk-intro-cn/plonk-polycom.md:47
#: src/plonk-intro-cn/plonk-polycom.md:59
#: src/plonk-intro-cn/plonk-polycom.md:75
#: src/plonk-intro-cn/plonk-polycom.md:81
#: src/plonk-intro-cn/plonk-polycom.md:117
#: src/plonk-intro-cn/plonk-polycom.md:136
#: src/plonk-intro-cn/plonk-polycom.md:141
#: src/plonk-intro-cn/plonk-polycom.md:155
#: src/plonk-intro-cn/plonk-polycom.md:163
#: src/plonk-intro-cn/plonk-polycom.md:171
#: src/plonk-intro-cn/plonk-polycom.md:187
#: src/plonk-intro-cn/plonk-polycom.md:209
#: src/plonk-intro-cn/plonk-polycom.md:229
#: src/plonk-intro-cn/plonk-randomizing.md:17
#: src/plonk-intro-cn/plonk-randomizing.md:33
#: src/plonk-intro-cn/plonk-randomizing.md:49
#: src/plonk-intro-cn/plonk-randomizing.md:51
#: src/plonk-intro-cn/plonk-randomizing.md:85
#: src/plonk-intro-cn/plonk-randomizing.md:88
#: src/plonk-intro-cn/plonk-randomizing.md:92
#: src/plonk-intro-cn/plonk-randomizing.md:103
#: src/plonk-intro-cn/plonk-randomizing.md:104
#: src/plonk-intro-cn/plonk-randomizing.md:112
#: src/plonk-intro-cn/plonk-randomizing.md:113
#: src/plonk-intro-cn/plonk-randomizing.md:119
#: src/plonk-intro-cn/plonk-randomizing.md:127
#: src/plonk-intro-cn/plonk-randomizing.md:133
#: src/plonk-intro-cn/plonk-randomizing.md:141
#: src/plonk-intro-cn/plonk-randomizing.md:155
#: src/plonk-intro-cn/plonk-randomizing.md:159
#: src/plonk-intro-cn/plonk-lookup.md:41 src/plonk-intro-cn/plonk-lookup.md:43
#: src/plonk-intro-cn/plonk-lookup.md:47 src/plonk-intro-cn/plonk-lookup.md:51
#: src/plonk-intro-cn/plonk-lookup.md:59 src/plonk-intro-cn/plonk-lookup.md:61
#: src/plonk-intro-cn/plonk-lookup.md:63 src/plonk-intro-cn/plonk-lookup.md:65
#: src/plonk-intro-cn/plonk-lookup.md:69 src/plonk-intro-cn/plonk-lookup.md:97
#: src/plonk-intro-cn/plonk-lookup.md:111
#: src/plonk-intro-cn/plonk-lookup.md:115
#: src/plonk-intro-cn/plonk-lookup.md:117
#: src/plonk-intro-cn/plonk-lookup.md:119
#: src/plonk-intro-cn/plonk-lookup.md:121
#: src/plonk-intro-cn/plonk-lookup.md:123
#: src/plonk-intro-cn/plonk-lookup.md:125
#: src/plonk-intro-cn/plonk-lookup.md:127
#: src/plonk-intro-cn/plonk-lookup.md:129
#: src/plonk-intro-cn/plonk-lookup.md:131
#: src/plonk-intro-cn/plonk-lookup.md:133
#: src/plonk-intro-cn/plonk-lookup.md:135
#: src/plonk-intro-cn/plonk-lookup.md:137
#: src/plonk-intro-cn/plonk-lookup.md:139
#: src/plonk-intro-cn/plonk-lookup.md:143
#: src/plonk-intro-cn/plonk-lookup.md:165
#: src/plonk-intro-cn/plonk-lookup.md:169
#: src/plonk-intro-cn/plonk-lookup.md:173
#: src/plonk-intro-cn/plonk-lookup.md:175
#: src/plonk-intro-cn/plonk-lookup.md:190
#: src/plonk-intro-cn/plonk-lookup.md:192
#: src/plonk-intro-cn/plonk-lookup.md:210
#: src/plonk-intro-cn/plonk-lookup.md:212
#: src/plonk-intro-cn/plonk-lookup.md:214
#: src/plonk-intro-cn/plonk-lookup.md:216
#: src/plonk-intro-cn/plonk-lookup.md:218
#: src/plonk-intro-cn/plonk-lookup.md:220
#: src/plonk-intro-cn/plonk-lookup.md:228
#: src/plonk-intro-cn/plonk-lookup.md:230
#: src/plonk-intro-cn/plonk-lookup.md:244
#: src/plonk-intro-cn/plonk-lookup.md:261
#: src/plonk-intro-cn/plonk-lookup.md:275
#: src/plonk-intro-cn/plonk-lookup.md:281
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:168
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:324
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:326
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:332
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:347
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:348
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:357
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:21
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:22
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:29
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:32
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:43
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:45
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:46
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:48
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:50
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:57
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:58
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:66
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:67
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:76
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:82
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:92
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:108
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:122
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:123
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:137
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:149
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:151
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:152
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:164
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:169
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:170
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:175
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:176
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:182
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:183
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:188
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:189
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:191
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:194
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:196
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:209
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:211
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:213
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:215
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:218
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:224
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:229
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:231
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:232
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:235
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:237
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:239
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:243
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:247
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:258
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:263
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:264
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:265
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:266
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:269
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:274
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:277
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:279
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:280
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:282
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:283
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:286
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:287
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:289
#: src/zk-snarks/3-General-Purpose-Computation.md:39
#: src/zk-snarks/3-General-Purpose-Computation.md:41
#: src/zk-snarks/3-General-Purpose-Computation.md:42
#: src/zk-snarks/3-General-Purpose-Computation.md:74
#: src/zk-snarks/3-General-Purpose-Computation.md:81
#: src/zk-snarks/3-General-Purpose-Computation.md:96
#: src/zk-snarks/3-General-Purpose-Computation.md:100
#: src/zk-snarks/3-General-Purpose-Computation.md:108
#: src/zk-snarks/3-General-Purpose-Computation.md:112
#: src/zk-snarks/3-General-Purpose-Computation.md:122
#: src/zk-snarks/3-General-Purpose-Computation.md:143
#: src/zk-snarks/3-General-Purpose-Computation.md:153
#: src/zk-snarks/3-General-Purpose-Computation.md:157
#: src/zk-snarks/3-General-Purpose-Computation.md:182
#: src/zk-snarks/3-General-Purpose-Computation.md:184
#: src/zk-snarks/3-General-Purpose-Computation.md:215
#: src/zk-snarks/3-General-Purpose-Computation.md:216
#: src/zk-snarks/3-General-Purpose-Computation.md:237
#: src/zk-snarks/3-General-Purpose-Computation.md:243
#: src/zk-snarks/3-General-Purpose-Computation.md:244
#: src/zk-snarks/3-General-Purpose-Computation.md:252
#: src/zk-snarks/3-General-Purpose-Computation.md:256
#: src/zk-snarks/3-General-Purpose-Computation.md:257
#: src/zk-snarks/3-General-Purpose-Computation.md:279
#: src/zk-snarks/3-General-Purpose-Computation.md:295
#: src/zk-snarks/3-General-Purpose-Computation.md:326
#: src/zk-snarks/3-General-Purpose-Computation.md:347
#: src/zk-snarks/3-General-Purpose-Computation.md:348
#: src/zk-snarks/3-General-Purpose-Computation.md:349
#: src/zk-snarks/3-General-Purpose-Computation.md:350
#: src/zk-snarks/3-General-Purpose-Computation.md:351
#: src/zk-snarks/3-General-Purpose-Computation.md:355
#: src/zk-snarks/3-General-Purpose-Computation.md:356
#: src/zk-snarks/3-General-Purpose-Computation.md:361
#: src/zk-snarks/3-General-Purpose-Computation.md:364
#: src/zk-snarks/3-General-Purpose-Computation.md:366
#: src/zk-snarks/4-Construction-Properties.md:48
#: src/zk-snarks/4-Construction-Properties.md:62
#: src/zk-snarks/4-Construction-Properties.md:63
#: src/zk-snarks/4-Construction-Properties.md:65
#: src/zk-snarks/4-Construction-Properties.md:67
#: src/zk-snarks/4-Construction-Properties.md:105
#: src/zk-snarks/4-Construction-Properties.md:113
#: src/zk-snarks/4-Construction-Properties.md:117
#: src/zk-snarks/4-Construction-Properties.md:127
#: src/zk-snarks/4-Construction-Properties.md:133
#: src/zk-snarks/4-Construction-Properties.md:134
#: src/zk-snarks/4-Construction-Properties.md:149
#: src/zk-snarks/4-Construction-Properties.md:168
#: src/zk-snarks/4-Construction-Properties.md:170
#: src/zk-snarks/4-Construction-Properties.md:171
#: src/zk-snarks/4-Construction-Properties.md:172
#: src/zk-snarks/4-Construction-Properties.md:184
#: src/zk-snarks/4-Construction-Properties.md:193
#: src/zk-snarks/4-Construction-Properties.md:195
#: src/zk-snarks/4-Construction-Properties.md:196
#: src/zk-snarks/4-Construction-Properties.md:199
#: src/zk-snarks/4-Construction-Properties.md:200
#: src/zk-snarks/4-Construction-Properties.md:203
#: src/zk-snarks/4-Construction-Properties.md:206
#: src/zk-snarks/4-Construction-Properties.md:207
#: src/zk-snarks/4-Construction-Properties.md:209
#: src/zk-snarks/4-Construction-Properties.md:212
#: src/zk-snarks/4-Construction-Properties.md:215
#: src/zk-snarks/4-Construction-Properties.md:217
#: src/zk-snarks/4-Construction-Properties.md:219
#: src/zk-snarks/4-Construction-Properties.md:221
#: src/zk-snarks/4-Construction-Properties.md:239
#: src/zk-snarks/4-Construction-Properties.md:242
#: src/zk-snarks/4-Construction-Properties.md:244
#: src/zk-snarks/4-Construction-Properties.md:245
#: src/zk-snarks/4-Construction-Properties.md:249
#: src/zk-snarks/4-Construction-Properties.md:251
#: src/zk-snarks/4-Construction-Properties.md:253
#: src/zk-snarks/4-Construction-Properties.md:263
#: src/zk-snarks/4-Construction-Properties.md:275
#: src/zk-snarks/4-Construction-Properties.md:277
#: src/zk-snarks/4-Construction-Properties.md:279
#: src/zk-snarks/4-Construction-Properties.md:280
#: src/zk-snarks/4-Construction-Properties.md:282
#: src/zk-snarks/4-Construction-Properties.md:284
#: src/zk-snarks/4-Construction-Properties.md:289
#: src/zk-snarks/4-Construction-Properties.md:291
#: src/zk-snarks/4-Construction-Properties.md:296
#: src/zk-snarks/4-Construction-Properties.md:298
#: src/zk-snarks/4-Construction-Properties.md:300
#: src/zk-snarks/4-Construction-Properties.md:304
#: src/zk-snarks/4-Construction-Properties.md:309
#: src/zk-snarks/4-Construction-Properties.md:313
#: src/zk-snarks/4-Construction-Properties.md:315
#: src/zk-snarks/4-Construction-Properties.md:317
#: src/zk-snarks/4-Construction-Properties.md:326
#: src/zk-snarks/4-Construction-Properties.md:339
#: src/zk-snarks/4-Construction-Properties.md:341
#: src/zk-snarks/4-Construction-Properties.md:342
#: src/zk-snarks/4-Construction-Properties.md:345
#: src/zk-snarks/4-Construction-Properties.md:349
#: src/zk-snarks/4-Construction-Properties.md:353
#: src/zk-snarks/4-Construction-Properties.md:354
#: src/zk-snarks/4-Construction-Properties.md:357
#: src/zk-snarks/4-Construction-Properties.md:359
#: src/zk-snarks/4-Construction-Properties.md:363
#: src/zk-snarks/4-Construction-Properties.md:364
#: src/zk-snarks/4-Construction-Properties.md:368
#: src/zk-snarks/4-Construction-Properties.md:370
#: src/zk-snarks/4-Construction-Properties.md:384
#: src/zk-snarks/4-Construction-Properties.md:392
#: src/zk-snarks/4-Construction-Properties.md:400
#: src/zk-snarks/4-Construction-Properties.md:401
#: src/zk-snarks/4-Construction-Properties.md:405
#: src/zk-snarks/4-Construction-Properties.md:407
#: src/zk-snarks/4-Construction-Properties.md:408
#: src/zk-snarks/4-Construction-Properties.md:419
#: src/zk-snarks/4-Construction-Properties.md:420
#: src/zk-snarks/4-Construction-Properties.md:422
#: src/zk-snarks/4-Construction-Properties.md:424
#: src/zk-snarks/4-Construction-Properties.md:431
#: src/zk-snarks/4-Construction-Properties.md:432
#: src/zk-snarks/4-Construction-Properties.md:434
#: src/zk-snarks/4-Construction-Properties.md:436
#: src/zk-snarks/4-Construction-Properties.md:438
#: src/zk-snarks/4-Construction-Properties.md:440
#: src/zk-snarks/4-Construction-Properties.md:441
#: src/zk-snarks/4-Construction-Properties.md:443
#: src/zk-snarks/5-Pinocchio-Protocol.md:31
#: src/zk-snarks/5-Pinocchio-Protocol.md:33
#: src/zk-snarks/5-Pinocchio-Protocol.md:45
#: src/zk-snarks/5-Pinocchio-Protocol.md:65
#: src/zk-snarks/5-Pinocchio-Protocol.md:87
#: src/zk-snarks/5-Pinocchio-Protocol.md:89
#: src/zk-snarks/5-Pinocchio-Protocol.md:92
#: src/zk-snarks/5-Pinocchio-Protocol.md:94
#: src/zk-snarks/5-Pinocchio-Protocol.md:102
#: src/zk-snarks/5-Pinocchio-Protocol.md:106
#: src/zk-snarks/5-Pinocchio-Protocol.md:109
#: src/zk-snarks/5-Pinocchio-Protocol.md:111
#: src/zk-snarks/5-Pinocchio-Protocol.md:132
#: src/zk-snarks/5-Pinocchio-Protocol.md:133
#: src/zk-snarks/5-Pinocchio-Protocol.md:136
#: src/zk-snarks/5-Pinocchio-Protocol.md:137
#: src/zk-snarks/5-Pinocchio-Protocol.md:139
#: src/zk-snarks/5-Pinocchio-Protocol.md:166
#: src/zk-snarks/5-Pinocchio-Protocol.md:173
#: src/zk-snarks/5-Pinocchio-Protocol.md:188
#: src/zk-snarks/5-Pinocchio-Protocol.md:189
#: src/zk-snarks/5-Pinocchio-Protocol.md:190
#: src/zk-snarks/5-Pinocchio-Protocol.md:192
#: src/zk-snarks/5-Pinocchio-Protocol.md:195
#: src/zk-snarks/5-Pinocchio-Protocol.md:198
#: src/zk-snarks/5-Pinocchio-Protocol.md:200
#: src/zk-snarks/5-Pinocchio-Protocol.md:209
#: src/zk-snarks/5-Pinocchio-Protocol.md:212
#: src/zk-snarks/5-Pinocchio-Protocol.md:218
#: src/zk-snarks/5-Pinocchio-Protocol.md:222
#: src/zk-snarks/5-Pinocchio-Protocol.md:225
#: src/halo2/tmp/1-Simple-Example.md:151 src/halo2/tmp/1-Simple-Example.md:552
#: src/halo2/tmp/2-Fibonacci-example-1.md:19 src/halo2/tmp/9-decomposed.md:26
#: src/halo2/tmp/9-decomposed.md:61 src/halo2/tmp/9-decomposed.md:99
#: src/halo2/tmp/9-decomposed.md:101 src/halo2/tmp/Hammster.md:23
#: src/zk-everything/BabySNARK tutorial.md:31 tutorial.md:35 tutorial.md:127
#: tutorial.md:129 tutorial.md:140 tutorial.md:145 tutorial.md:150
#: tutorial.md:156 tutorial.md:160 tutorial.md:165 tutorial.md:185
#: src/zk-everything/zk-learning-miles/KZG.md:83
#: src/zk-everything/zk-learning-miles/KZG.md:93
#: src/zk-everything/zk-learning-miles/KZG.md:145
#: src/zk-everything/zk-learning-miles/KZG.md:164
#: src/zk-everything/zk-learning-miles/KZG.md:170
#: src/zk-everything/zk-learning-miles/KZG.md:183
#: src/zk-everything/zk-learning-miles/KZG.md:185
#: src/zk-everything/zk-learning-miles/KZG.md:197
#: src/zk-everything/zk-learning-miles/KZG.md:199
#: src/zk-everything/zk-learning-miles/KZG.md:201
#: src/zk-everything/zk-learning-miles/KZG.md:209
#: src/zk-everything/zk-learning-miles/KZG.md:211
#: src/zk-everything/zk-learning-miles/KZG.md:213
#: src/zk-everything/zk-learning-miles/KZG.md:246
#: src/zk-everything/zk-learning-miles/KZG.md:248
#: src/zk-everything/zk-learning-miles/KZG.md:250
#: src/zk-everything/zk-learning-miles/KZG.md:262
#: src/zk-everything/zk-learning-miles/KZG.md:270
#: src/zk-everything/zk-learning-miles/KZG.md:317
#: src/zk-everything/zk-learning-miles/KZG.md:318
#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:42 Zeroknowledge.md:238 Zeroknowledge.md:239
#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:197 SNARKs.md:198 SNARKs.md:270 SNARKs.md:272 SNARKs.md:273
#: SNARKs.md:298 SNARKs.md:301 SNARKs.md:302 SNARKs.md:312 SNARKs.md:320
#: SNARKs.md:324 SNARKs.md:342 SNARKs.md:350 SNARKs.md:354 SNARKs.md:362
#: SNARKs.md:364 SNARKs.md:371 SNARKs.md:374 SNARKs.md:383 SNARKs.md:395
#: SNARKs.md:398 SNARKs.md:403 SNARKs.md:407 SNARKs.md:410 SNARKs.md:412
#: SNARKs.md:414 src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:44
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:50
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:58
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:64
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:79
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:83
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:87
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:91
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:119
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:122
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:128
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:132
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:134
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:145
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:152
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:170
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:176
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:182
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:188
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:212
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:218
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:230
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:244
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:255
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:262
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:275
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:289
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:301
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:307
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:319
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:333
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:343
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:349
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:361
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:377
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:383
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:390
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:396
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:405
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:412
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:418
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:424
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:440
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:442
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:446
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:448
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:460
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:486
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:490
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:493
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:506
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:520
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:526
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:530
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:532
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:538
#: src/zk-everything/zk-everything-joe/Hyrax.md:58
#: src/zk-everything/zk-everything-joe/Hyrax.md:64
#: src/zk-everything/zk-everything-joe/Hyrax.md:70
#: src/zk-everything/zk-everything-joe/Hyrax.md:86
#: src/zk-everything/zk-everything-joe/Hyrax.md:92
#: src/zk-everything/zk-everything-joe/Hyrax.md:98
#: src/zk-everything/zk-everything-joe/Hyrax.md:116
#: src/zk-everything/zk-everything-joe/Hyrax.md:122
#: src/zk-everything/zk-everything-joe/Hyrax.md:147
#: src/zk-everything/zk-everything-joe/Hyrax.md:149
#: src/zk-everything/zk-everything-joe/Hyrax.md:156
#: src/zk-everything/zk-everything-joe/Hyrax.md:168
#: src/zk-everything/zk-everything-joe/Hyrax.md:181
#: src/zk-everything/zk-everything-joe/Hyrax.md:191
#: src/zk-everything/zk-everything-joe/Hyrax.md:195
#: src/zk-everything/zk-everything-joe/Hyrax.md:201
#: src/zk-everything/zk-everything-joe/Hyrax.md:203
#: src/zk-everything/zk-everything-joe/Hyrax.md:208
#: src/zk-everything/zk-everything-joe/Hyrax.md:213
#: src/zk-everything/zk-everything-joe/Hyrax.md:214
#: src/zk-everything/zk-everything-joe/Hyrax.md:216
#: src/zk-everything/zk-everything-joe/Hyrax.md:223
#: src/zk-everything/zk-everything-joe/Hyrax.md:228
#: src/zk-everything/zk-everything-joe/Hyrax.md:245
#: src/zk-everything/zk-everything-joe/Hyrax.md:250
#: src/zk-everything/zk-everything-joe/Hyrax.md:269
#: src/zk-everything/zk-everything-joe/Hyrax.md:292
#: src/zk-everything/zk-everything-joe/Hyrax.md:297
#: src/zk-everything/zk-everything-joe/Hyrax.md:302
#: src/zk-everything/zk-everything-joe/Hyrax.md:311
#: src/zk-everything/zk-everything-joe/Hyrax.md:324
#: src/zk-everything/zk-everything-joe/Spartan.md:23
#: src/zk-everything/zk-everything-joe/Spartan.md:24
#: src/zk-everything/zk-everything-joe/Spartan.md:25
#: src/zk-everything/zk-everything-joe/Spartan.md:26
#: src/zk-everything/zk-everything-joe/Spartan.md:110
#: src/zk-everything/zk-everything-joe/Spartan.md:115
#: src/zk-everything/zk-everything-joe/Spartan.md:118
#: src/zk-everything/zk-everything-joe/Spartan.md:122
#: src/zk-everything/zk-everything-joe/Spartan.md:126
#: src/zk-everything/zk-everything-joe/Spartan.md:136
#: src/zk-everything/zk-everything-joe/Spartan.md:142
#: src/zk-everything/zk-everything-joe/Spartan.md:143
#: src/zk-everything/zk-everything-joe/Spartan.md:147
#: src/zk-everything/zk-everything-joe/Spartan.md:148
#: src/zk-everything/zk-everything-joe/Spartan.md:154
#: src/zk-everything/zk-everything-joe/Spartan.md:169
#: src/zk-everything/zk-everything-joe/Spartan.md:172
#: src/zk-everything/zk-everything-joe/Spartan.md:177
#: src/zk-everything/zk-everything-joe/Spartan.md:182
#: src/zk-everything/zk-everything-joe/Spartan.md:195
#: src/zk-everything/zk-everything-joe/Spartan.md:200
#: src/zk-everything/zk-everything-joe/Spartan.md:232
#: src/zk-everything/zk-everything-joe/Spartan.md:236
#: src/zk-everything/zk-everything-joe/Spartan.md:240
#: src/zk-everything/zk-everything-joe/Spartan.md:252
#: src/zk-everything/zk-everything-joe/Spartan.md:263
#: src/zk-everything/zk-everything-joe/Spartan.md:274
#: src/zk-everything/zk-everything-joe/Spartan.md:309
#: src/zk-everything/zk-everything-joe/Spartan.md:319
#: src/zk-everything/zk-everything-joe/Spartan.md:323
#: src/zk-everything/zk-everything-joe/Spartan.md:334
#: src/zk-everything/zk-everything-joe/Spartan.md:339
#: src/zk-everything/zk-everything-joe/Spartan.md:343
#: src/zk-everything/zk-everything-joe/Spartan.md:344
#: src/zk-everything/zk-everything-joe/Spartan.md:346
#: src/zk-everything/zk-everything-joe/Spartan.md:349
#: src/zk-everything/zk-everything-joe/Spartan.md:350
#: src/zk-everything/zk-everything-joe/Spartan.md:360
#: src/zk-everything/zk-everything-joe/Spartan.md:377
#: src/zk-everything/zk-everything-joe/Spartan.md:394
#: src/zk-everything/zk-everything-joe/Spartan.md:406
#: src/zk-everything/zk-everything-joe/Spartan.md:411
#: src/zk-everything/zk-everything-joe/Spartan.md:422
#: src/zk-everything/zk-everything-joe/Spartan.md:428
#: src/zk-everything/zk-everything-joe/Spartan.md:436
#: src/zk-everything/zk-everything-joe/Spartan.md:441
#: src/zk-everything/zk-everything-joe/Spartan.md:445
#: src/zk-everything/zk-everything-joe/Spartan.md:450
#: src/zk-everything/zk-everything-joe/Spartan.md:455
#: src/zk-everything/zk-everything-joe/Spartan.md:458 src/Nova/SuperNova.md:12
#: src/Nova/SuperNova.md:14 src/Nova/SuperNova.md:19 src/Nova/SuperNova.md:31
#: src/Nova/SuperNova.md:68 src/public goods/第二章.md:9
#: goods/第二章.md:10 goods/第二章.md:12 goods/第二章.md:17
#: goods/第二章.md:18 goods/第二章.md:19 goods/第二章.md:20
#: goods/第二章.md:25 goods/第二章.md:29 goods/第二章.md:33
#: goods/第二章.md:34 goods/第二章.md:35 goods/第二章.md:50
#: goods/第二章.md:65 goods/第二章.md:80 goods/第二章.md:84
#: goods/第二章.md:86 goods/第二章.md:88 goods/第二章.md:89
#: goods/第二章.md:97 goods/第二章.md:111 goods/第二章.md:147
#: goods/第二章.md:158 goods/第二章.md:175 goods/4-Proving-System.md:55
#: goods/4-Proving-System.md:60 goods/4-Proving-System.md:62
#: goods/4-Proving-System.md:129 goods/4-Proving-System.md:136
#: goods/4-Proving-System.md:146 goods/4-Proving-System.md:157
#: goods/4-Proving-System.md:169 goods/4-Proving-System.md:171
#: goods/4-Proving-System.md:177 goods/4-Proving-System.md:204
#: goods/4-Proving-System.md:206 goods/4-Proving-System.md:208
#: goods/4-Proving-System.md:209
msgid ","
msgstr ","

#: src/zkp-intro/1/zkp-back.md:200
#: src/plonk-intro-cn/plonk-arithmetization.md:147
#: src/plonk-intro-cn/plonk-arithmetization.md:155
#: src/plonk-intro-cn/plonk-arithmetization.md:177
#: src/plonk-intro-cn/plonk-arithmetization.md:179
#: src/plonk-intro-cn/plonk-arithmetization.md:187
#: src/plonk-intro-cn/plonk-arithmetization.md:189
#: src/plonk-intro-cn/plonk-arithmetization.md:191
#: src/plonk-intro-cn/plonk-arithmetization.md:209
#: src/plonk-intro-cn/plonk-arithmetization.md:231
#: src/plonk-intro-cn/plonk-arithmetization.md:239
#: src/plonk-intro-cn/plonk-arithmetization.md:241
#: src/plonk-intro-cn/plonk-arithmetization.md:243
#: src/plonk-intro-cn/plonk-arithmetization.md:245
#: src/plonk-intro-cn/plonk-arithmetization.md:249
#: src/plonk-intro-cn/plonk-arithmetization.md:257
#: src/plonk-intro-cn/plonk-arithmetization.md:259
#: src/plonk-intro-cn/plonk-lagrange-basis.md:14
#: src/plonk-intro-cn/plonk-lagrange-basis.md:18
#: src/plonk-intro-cn/plonk-lagrange-basis.md:20
#: src/plonk-intro-cn/plonk-lagrange-basis.md:22
#: src/plonk-intro-cn/plonk-lagrange-basis.md:24
#: src/plonk-intro-cn/plonk-lagrange-basis.md:28
#: src/plonk-intro-cn/plonk-lagrange-basis.md:40
#: src/plonk-intro-cn/plonk-lagrange-basis.md:42
#: src/plonk-intro-cn/plonk-lagrange-basis.md:44
#: src/plonk-intro-cn/plonk-lagrange-basis.md:46
#: src/plonk-intro-cn/plonk-lagrange-basis.md:50
#: src/plonk-intro-cn/plonk-lagrange-basis.md:54
#: src/plonk-intro-cn/plonk-lagrange-basis.md:58
#: src/plonk-intro-cn/plonk-lagrange-basis.md:64
#: src/plonk-intro-cn/plonk-lagrange-basis.md:66
#: src/plonk-intro-cn/plonk-permutation.md:11
#: src/plonk-intro-cn/plonk-permutation.md:13
#: src/plonk-intro-cn/plonk-constraints.md:57
#: src/plonk-intro-cn/plonk-constraints.md:59
#: src/plonk-intro-cn/plonk-constraints.md:63
#: src/plonk-intro-cn/plonk-constraints.md:65
#: src/plonk-intro-cn/plonk-constraints.md:67
#: src/plonk-intro-cn/plonk-constraints.md:69
#: src/plonk-intro-cn/plonk-constraints.md:71
#: src/plonk-intro-cn/plonk-constraints.md:73
#: src/plonk-intro-cn/plonk-constraints.md:75
#: src/plonk-intro-cn/plonk-constraints.md:77
#: src/plonk-intro-cn/plonk-constraints.md:120
#: src/plonk-intro-cn/plonk-constraints.md:127
#: src/plonk-intro-cn/plonk-constraints.md:133
#: src/plonk-intro-cn/plonk-constraints.md:141
#: src/plonk-intro-cn/plonk-constraints.md:145
#: src/plonk-intro-cn/plonk-constraints.md:159
#: src/plonk-intro-cn/plonk-constraints.md:161
#: src/plonk-intro-cn/plonk-constraints.md:163
#: src/plonk-intro-cn/plonk-constraints.md:175
#: src/plonk-intro-cn/plonk-constraints.md:179
#: src/plonk-intro-cn/plonk-constraints.md:184
#: src/plonk-intro-cn/plonk-constraints.md:186
#: src/plonk-intro-cn/plonk-constraints.md:191
#: src/plonk-intro-cn/plonk-constraints.md:192
#: src/plonk-intro-cn/plonk-constraints.md:199
#: src/plonk-intro-cn/plonk-polycom.md:9 src/plonk-intro-cn/plonk-polycom.md:13
#: src/plonk-intro-cn/plonk-polycom.md:15
#: src/plonk-intro-cn/plonk-randomizing.md:17
#: src/plonk-intro-cn/plonk-randomizing.md:41
#: src/plonk-intro-cn/plonk-randomizing.md:85
#: src/plonk-intro-cn/plonk-randomizing.md:97
#: src/plonk-intro-cn/plonk-randomizing.md:115
#: src/plonk-intro-cn/plonk-randomizing.md:117
#: src/plonk-intro-cn/plonk-randomizing.md:127
#: src/plonk-intro-cn/plonk-randomizing.md:129
#: src/plonk-intro-cn/plonk-randomizing.md:133
#: src/plonk-intro-cn/plonk-lookup.md:261
#: src/plonk-intro-cn/plonk-lookup.md:265
#: src/plonk-intro-cn/plonk-lookup.md:267
#: src/plonk-intro-cn/plonk-lookup.md:269
#: src/plonk-intro-cn/plonk-lookup.md:275
#: src/plonk-intro-cn/plonk-lookup.md:289
#: src/plonk-intro-cn/plonk-lookup.md:304
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:95
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:271
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:332
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:333
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:21
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:35
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:46
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:47
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:48
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:52
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:53
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:56
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:58
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:59
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:64
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:67
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:70
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:79
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:81
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:96
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:176
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:194
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:198
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:269
#: src/zk-snarks/3-General-Purpose-Computation.md:41
#: src/zk-snarks/3-General-Purpose-Computation.md:42
#: src/zk-snarks/3-General-Purpose-Computation.md:112
#: src/zk-snarks/3-General-Purpose-Computation.md:137
#: src/zk-snarks/3-General-Purpose-Computation.md:196
#: src/zk-snarks/3-General-Purpose-Computation.md:213
#: src/zk-snarks/3-General-Purpose-Computation.md:266
#: src/zk-snarks/3-General-Purpose-Computation.md:268
#: src/zk-snarks/3-General-Purpose-Computation.md:271
#: src/zk-snarks/3-General-Purpose-Computation.md:276
#: src/zk-snarks/3-General-Purpose-Computation.md:279
#: src/zk-snarks/3-General-Purpose-Computation.md:280
#: src/zk-snarks/3-General-Purpose-Computation.md:295
#: src/zk-snarks/3-General-Purpose-Computation.md:315
#: src/zk-snarks/3-General-Purpose-Computation.md:366
#: src/zk-snarks/4-Construction-Properties.md:62
#: src/zk-snarks/4-Construction-Properties.md:65
#: src/zk-snarks/4-Construction-Properties.md:67
#: src/zk-snarks/4-Construction-Properties.md:68
#: src/zk-snarks/4-Construction-Properties.md:79
#: src/zk-snarks/4-Construction-Properties.md:80
#: src/zk-snarks/4-Construction-Properties.md:85
#: src/zk-snarks/4-Construction-Properties.md:113
#: src/zk-snarks/4-Construction-Properties.md:193
#: src/zk-snarks/4-Construction-Properties.md:195
#: src/zk-snarks/4-Construction-Properties.md:271
#: src/zk-snarks/4-Construction-Properties.md:315
#: src/zk-snarks/4-Construction-Properties.md:330
#: src/zk-snarks/4-Construction-Properties.md:339
#: src/zk-snarks/4-Construction-Properties.md:345
#: src/zk-snarks/5-Pinocchio-Protocol.md:26
#: src/zk-snarks/5-Pinocchio-Protocol.md:45
#: src/zk-snarks/5-Pinocchio-Protocol.md:46
#: src/zk-snarks/5-Pinocchio-Protocol.md:50
#: src/zk-snarks/5-Pinocchio-Protocol.md:52
#: src/zk-snarks/5-Pinocchio-Protocol.md:163
#: src/halo2/tmp/halo2-learning-materials.md:62
#: src/halo2/tmp/1-Simple-Example.md:41 src/halo2/tmp/1-Simple-Example.md:439
#: src/halo2/tmp/9-decomposed.md:40 src/halo2/tmp/9-decomposed.md:42
#: src/halo2/tmp/9-decomposed.md:43 src/halo2/tmp/9-decomposed.md:46
#: src/halo2/tmp/9-decomposed.md:47 src/halo2/tmp/9-decomposed.md:53
#: src/halo2/tmp/9-decomposed.md:101 src/halo2/tmp/9-decomposed.md:106
#: src/halo2/tmp/9-decomposed.md:108 src/halo2/tmp/9-decomposed.md:216
#: src/zk-everything/BabySNARK tutorial.md:129 tutorial.md:131 tutorial.md:140
#: tutorial.md:145 tutorial.md:148 tutorial.md:150 tutorial.md:160
#: tutorial.md:165 tutorial.md:168 tutorial.md:172
#: src/zk-everything/zk-learning-miles/KZG.md:12
#: src/zk-everything/zk-learning-miles/KZG.md:96
#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:368 SNARKs.md:369 SNARKs.md:370 SNARKs.md:371 SNARKs.md:373
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:170
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:176
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:188
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:212
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:218
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:230
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:255
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:262
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:275
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:301
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:307
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:319
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:343
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:349
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:361
#: src/zk-everything/zk-everything-joe/Hyrax.md:86
#: src/zk-everything/zk-everything-joe/Hyrax.md:92
#: src/zk-everything/zk-everything-joe/Hyrax.md:116
#: src/zk-everything/zk-everything-joe/Hyrax.md:133
#: src/zk-everything/zk-everything-joe/Hyrax.md:140
#: src/zk-everything/zk-everything-joe/Hyrax.md:195
#: src/zk-everything/zk-everything-joe/Hyrax.md:223 src/Nova/SuperNova.md:19
#: src/Nova/SuperNova.md:30 src/Nova/SuperNova.md:66 src/Nova/SuperNova.md:68
#: src/public goods/第二章.md:26 goods/第二章.md:58 goods/第二章.md:61
#: goods/第二章.md:65 goods/第二章.md:70 goods/第二章.md:86
#: goods/第二章.md:88 goods/第二章.md:89 goods/第二章.md:97
#: goods/第二章.md:125 goods/第二章.md:171 goods/4-Proving-System.md:37
#: goods/4-Proving-System.md:55 goods/4-Proving-System.md:56
#: goods/4-Proving-System.md:58 goods/4-Proving-System.md:60
#: goods/4-Proving-System.md:62 goods/4-Proving-System.md:64
msgid "c"
msgstr "c"

#: src/zkp-intro/1/zkp-back.md:200 src/zkp-intro/4/zkp-rom.md:151
#: src/plonk-intro-cn/plonk-arithmetization.md:20
#: src/plonk-intro-cn/plonk-arithmetization.md:22
#: src/plonk-intro-cn/plonk-arithmetization.md:37
#: src/plonk-intro-cn/plonk-arithmetization.md:43
#: src/plonk-intro-cn/plonk-arithmetization.md:45
#: src/plonk-intro-cn/plonk-arithmetization.md:49
#: src/plonk-intro-cn/plonk-arithmetization.md:51
#: src/plonk-intro-cn/plonk-arithmetization.md:55
#: src/plonk-intro-cn/plonk-arithmetization.md:57
#: src/plonk-intro-cn/plonk-arithmetization.md:59
#: src/plonk-intro-cn/plonk-arithmetization.md:61
#: src/plonk-intro-cn/plonk-arithmetization.md:63
#: src/plonk-intro-cn/plonk-arithmetization.md:65
#: src/plonk-intro-cn/plonk-arithmetization.md:87
#: src/plonk-intro-cn/plonk-arithmetization.md:93
#: src/plonk-intro-cn/plonk-arithmetization.md:103
#: src/plonk-intro-cn/plonk-arithmetization.md:115
#: src/plonk-intro-cn/plonk-arithmetization.md:119
#: src/plonk-intro-cn/plonk-arithmetization.md:155
#: src/plonk-intro-cn/plonk-arithmetization.md:187
#: src/plonk-intro-cn/plonk-arithmetization.md:191
#: src/plonk-intro-cn/plonk-arithmetization.md:197
#: src/plonk-intro-cn/plonk-arithmetization.md:201
#: src/plonk-intro-cn/plonk-arithmetization.md:211
#: src/plonk-intro-cn/plonk-arithmetization.md:213
#: src/plonk-intro-cn/plonk-arithmetization.md:217
#: src/plonk-intro-cn/plonk-arithmetization.md:227
#: src/plonk-intro-cn/plonk-arithmetization.md:239
#: src/plonk-intro-cn/plonk-arithmetization.md:241
#: src/plonk-intro-cn/plonk-arithmetization.md:243
#: src/plonk-intro-cn/plonk-arithmetization.md:247
#: src/plonk-intro-cn/plonk-arithmetization.md:249
#: src/plonk-intro-cn/plonk-arithmetization.md:257
#: src/plonk-intro-cn/plonk-arithmetization.md:259
#: src/plonk-intro-cn/plonk-lagrange-basis.md:10
#: src/plonk-intro-cn/plonk-lagrange-basis.md:18
#: src/plonk-intro-cn/plonk-lagrange-basis.md:20
#: src/plonk-intro-cn/plonk-lagrange-basis.md:22
#: src/plonk-intro-cn/plonk-lagrange-basis.md:28
#: src/plonk-intro-cn/plonk-lagrange-basis.md:30
#: src/plonk-intro-cn/plonk-lagrange-basis.md:32
#: src/plonk-intro-cn/plonk-lagrange-basis.md:34
#: src/plonk-intro-cn/plonk-lagrange-basis.md:36
#: src/plonk-intro-cn/plonk-lagrange-basis.md:38
#: src/plonk-intro-cn/plonk-lagrange-basis.md:40
#: src/plonk-intro-cn/plonk-lagrange-basis.md:42
#: src/plonk-intro-cn/plonk-lagrange-basis.md:44
#: src/plonk-intro-cn/plonk-lagrange-basis.md:46
#: src/plonk-intro-cn/plonk-lagrange-basis.md:54
#: src/plonk-intro-cn/plonk-lagrange-basis.md:58
#: src/plonk-intro-cn/plonk-lagrange-basis.md:60
#: src/plonk-intro-cn/plonk-lagrange-basis.md:62
#: src/plonk-intro-cn/plonk-lagrange-basis.md:64
#: src/plonk-intro-cn/plonk-lagrange-basis.md:66
#: src/plonk-intro-cn/plonk-lagrange-basis.md:70
#: src/plonk-intro-cn/plonk-lagrange-basis.md:76
#: src/plonk-intro-cn/plonk-lagrange-basis.md:78
#: src/plonk-intro-cn/plonk-lagrange-basis.md:80
#: src/plonk-intro-cn/plonk-lagrange-basis.md:89
#: src/plonk-intro-cn/plonk-lagrange-basis.md:93
#: src/plonk-intro-cn/plonk-lagrange-basis.md:101
#: src/plonk-intro-cn/plonk-lagrange-basis.md:105
#: src/plonk-intro-cn/plonk-lagrange-basis.md:109
#: src/plonk-intro-cn/plonk-lagrange-basis.md:111
#: src/plonk-intro-cn/plonk-lagrange-basis.md:113
#: src/plonk-intro-cn/plonk-lagrange-basis.md:115
#: src/plonk-intro-cn/plonk-lagrange-basis.md:117
#: src/plonk-intro-cn/plonk-lagrange-basis.md:119
#: src/plonk-intro-cn/plonk-lagrange-basis.md:121
#: src/plonk-intro-cn/plonk-lagrange-basis.md:123
#: src/plonk-intro-cn/plonk-lagrange-basis.md:129
#: src/plonk-intro-cn/plonk-lagrange-basis.md:131
#: src/plonk-intro-cn/plonk-lagrange-basis.md:135
#: src/plonk-intro-cn/plonk-lagrange-basis.md:137
#: src/plonk-intro-cn/plonk-lagrange-basis.md:139
#: src/plonk-intro-cn/plonk-lagrange-basis.md:143
#: src/plonk-intro-cn/plonk-lagrange-basis.md:147
#: src/plonk-intro-cn/plonk-lagrange-basis.md:149
#: src/plonk-intro-cn/plonk-lagrange-basis.md:151
#: src/plonk-intro-cn/plonk-lagrange-basis.md:161
#: src/plonk-intro-cn/plonk-lagrange-basis.md:172
#: src/plonk-intro-cn/plonk-permutation.md:5
#: src/plonk-intro-cn/plonk-permutation.md:21
#: src/plonk-intro-cn/plonk-permutation.md:23
#: src/plonk-intro-cn/plonk-permutation.md:76
#: src/plonk-intro-cn/plonk-permutation.md:80
#: src/plonk-intro-cn/plonk-permutation.md:84
#: src/plonk-intro-cn/plonk-permutation.md:92
#: src/plonk-intro-cn/plonk-permutation.md:96
#: src/plonk-intro-cn/plonk-permutation.md:98
#: src/plonk-intro-cn/plonk-permutation.md:110
#: src/plonk-intro-cn/plonk-permutation.md:112
#: src/plonk-intro-cn/plonk-permutation.md:114
#: src/plonk-intro-cn/plonk-permutation.md:116
#: src/plonk-intro-cn/plonk-permutation.md:124
#: src/plonk-intro-cn/plonk-permutation.md:128
#: src/plonk-intro-cn/plonk-permutation.md:140
#: src/plonk-intro-cn/plonk-permutation.md:142
#: src/plonk-intro-cn/plonk-permutation.md:144
#: src/plonk-intro-cn/plonk-permutation.md:148
#: src/plonk-intro-cn/plonk-permutation.md:150
#: src/plonk-intro-cn/plonk-permutation.md:156
#: src/plonk-intro-cn/plonk-permutation.md:158
#: src/plonk-intro-cn/plonk-permutation.md:159
#: src/plonk-intro-cn/plonk-permutation.md:161
#: src/plonk-intro-cn/plonk-permutation.md:162
#: src/plonk-intro-cn/plonk-permutation.md:174
#: src/plonk-intro-cn/plonk-permutation.md:176
#: src/plonk-intro-cn/plonk-permutation.md:177
#: src/plonk-intro-cn/plonk-permutation.md:179
#: src/plonk-intro-cn/plonk-permutation.md:180
#: src/plonk-intro-cn/plonk-permutation.md:196
#: src/plonk-intro-cn/plonk-permutation.md:198
#: src/plonk-intro-cn/plonk-permutation.md:202
#: src/plonk-intro-cn/plonk-permutation.md:204
#: src/plonk-intro-cn/plonk-permutation.md:206
#: src/plonk-intro-cn/plonk-permutation.md:208
#: src/plonk-intro-cn/plonk-permutation.md:212
#: src/plonk-intro-cn/plonk-constraints.md:7
#: src/plonk-intro-cn/plonk-constraints.md:9
#: src/plonk-intro-cn/plonk-constraints.md:13
#: src/plonk-intro-cn/plonk-constraints.md:17
#: src/plonk-intro-cn/plonk-constraints.md:21
#: src/plonk-intro-cn/plonk-constraints.md:25
#: src/plonk-intro-cn/plonk-constraints.md:27
#: src/plonk-intro-cn/plonk-constraints.md:29
#: src/plonk-intro-cn/plonk-constraints.md:35
#: src/plonk-intro-cn/plonk-constraints.md:37
#: src/plonk-intro-cn/plonk-constraints.md:39
#: src/plonk-intro-cn/plonk-constraints.md:45
#: src/plonk-intro-cn/plonk-constraints.md:69
#: src/plonk-intro-cn/plonk-constraints.md:71
#: src/plonk-intro-cn/plonk-constraints.md:75
#: src/plonk-intro-cn/plonk-constraints.md:77
#: src/plonk-intro-cn/plonk-constraints.md:81
#: src/plonk-intro-cn/plonk-constraints.md:85
#: src/plonk-intro-cn/plonk-constraints.md:99
#: src/plonk-intro-cn/plonk-constraints.md:101
#: src/plonk-intro-cn/plonk-constraints.md:103
#: src/plonk-intro-cn/plonk-constraints.md:109
#: src/plonk-intro-cn/plonk-constraints.md:127
#: src/plonk-intro-cn/plonk-constraints.md:129
#: src/plonk-intro-cn/plonk-constraints.md:133
#: src/plonk-intro-cn/plonk-constraints.md:141
#: src/plonk-intro-cn/plonk-constraints.md:143
#: src/plonk-intro-cn/plonk-constraints.md:145
#: src/plonk-intro-cn/plonk-constraints.md:149
#: src/plonk-intro-cn/plonk-constraints.md:153
#: src/plonk-intro-cn/plonk-constraints.md:155
#: src/plonk-intro-cn/plonk-constraints.md:161
#: src/plonk-intro-cn/plonk-constraints.md:163
#: src/plonk-intro-cn/plonk-constraints.md:169
#: src/plonk-intro-cn/plonk-constraints.md:173
#: src/plonk-intro-cn/plonk-constraints.md:175
#: src/plonk-intro-cn/plonk-constraints.md:179
#: src/plonk-intro-cn/plonk-constraints.md:181
#: src/plonk-intro-cn/plonk-constraints.md:184
#: src/plonk-intro-cn/plonk-constraints.md:185
#: src/plonk-intro-cn/plonk-constraints.md:186
#: src/plonk-intro-cn/plonk-constraints.md:187
#: src/plonk-intro-cn/plonk-constraints.md:188
#: src/plonk-intro-cn/plonk-constraints.md:191
#: src/plonk-intro-cn/plonk-constraints.md:192
#: src/plonk-intro-cn/plonk-constraints.md:193
#: src/plonk-intro-cn/plonk-constraints.md:194
#: src/plonk-intro-cn/plonk-constraints.md:195
#: src/plonk-intro-cn/plonk-constraints.md:199
#: src/plonk-intro-cn/plonk-polycom.md:9 src/plonk-intro-cn/plonk-polycom.md:15
#: src/plonk-intro-cn/plonk-polycom.md:21
#: src/plonk-intro-cn/plonk-polycom.md:23
#: src/plonk-intro-cn/plonk-polycom.md:25
#: src/plonk-intro-cn/plonk-polycom.md:29
#: src/plonk-intro-cn/plonk-polycom.md:35
#: src/plonk-intro-cn/plonk-polycom.md:37
#: src/plonk-intro-cn/plonk-polycom.md:47
#: src/plonk-intro-cn/plonk-polycom.md:51
#: src/plonk-intro-cn/plonk-polycom.md:53
#: src/plonk-intro-cn/plonk-polycom.md:55
#: src/plonk-intro-cn/plonk-polycom.md:59
#: src/plonk-intro-cn/plonk-polycom.md:61
#: src/plonk-intro-cn/plonk-polycom.md:63
#: src/plonk-intro-cn/plonk-polycom.md:65
#: src/plonk-intro-cn/plonk-polycom.md:67
#: src/plonk-intro-cn/plonk-polycom.md:69
#: src/plonk-intro-cn/plonk-polycom.md:71
#: src/plonk-intro-cn/plonk-polycom.md:73
#: src/plonk-intro-cn/plonk-polycom.md:75
#: src/plonk-intro-cn/plonk-polycom.md:79
#: src/plonk-intro-cn/plonk-polycom.md:81
#: src/plonk-intro-cn/plonk-polycom.md:87
#: src/plonk-intro-cn/plonk-polycom.md:89
#: src/plonk-intro-cn/plonk-polycom.md:91
#: src/plonk-intro-cn/plonk-polycom.md:93
#: src/plonk-intro-cn/plonk-polycom.md:97
#: src/plonk-intro-cn/plonk-polycom.md:99
#: src/plonk-intro-cn/plonk-polycom.md:101
#: src/plonk-intro-cn/plonk-polycom.md:103
#: src/plonk-intro-cn/plonk-polycom.md:105
#: src/plonk-intro-cn/plonk-polycom.md:117
#: src/plonk-intro-cn/plonk-polycom.md:124
#: src/plonk-intro-cn/plonk-polycom.md:126
#: src/plonk-intro-cn/plonk-polycom.md:128
#: src/plonk-intro-cn/plonk-polycom.md:132
#: src/plonk-intro-cn/plonk-polycom.md:136
#: src/plonk-intro-cn/plonk-polycom.md:141
#: src/plonk-intro-cn/plonk-polycom.md:143
#: src/plonk-intro-cn/plonk-polycom.md:145
#: src/plonk-intro-cn/plonk-polycom.md:147
#: src/plonk-intro-cn/plonk-polycom.md:151
#: src/plonk-intro-cn/plonk-polycom.md:155
#: src/plonk-intro-cn/plonk-polycom.md:157
#: src/plonk-intro-cn/plonk-polycom.md:161
#: src/plonk-intro-cn/plonk-polycom.md:163
#: src/plonk-intro-cn/plonk-polycom.md:167
#: src/plonk-intro-cn/plonk-polycom.md:169
#: src/plonk-intro-cn/plonk-polycom.md:171
#: src/plonk-intro-cn/plonk-polycom.md:175
#: src/plonk-intro-cn/plonk-polycom.md:179
#: src/plonk-intro-cn/plonk-polycom.md:181
#: src/plonk-intro-cn/plonk-polycom.md:183
#: src/plonk-intro-cn/plonk-polycom.md:185
#: src/plonk-intro-cn/plonk-polycom.md:187
#: src/plonk-intro-cn/plonk-polycom.md:193
#: src/plonk-intro-cn/plonk-polycom.md:197
#: src/plonk-intro-cn/plonk-polycom.md:199
#: src/plonk-intro-cn/plonk-polycom.md:201
#: src/plonk-intro-cn/plonk-polycom.md:205
#: src/plonk-intro-cn/plonk-polycom.md:209
#: src/plonk-intro-cn/plonk-polycom.md:211
#: src/plonk-intro-cn/plonk-polycom.md:213
#: src/plonk-intro-cn/plonk-polycom.md:215
#: src/plonk-intro-cn/plonk-polycom.md:217
#: src/plonk-intro-cn/plonk-polycom.md:221
#: src/plonk-intro-cn/plonk-polycom.md:229
#: src/plonk-intro-cn/plonk-randomizing.md:6
#: src/plonk-intro-cn/plonk-randomizing.md:9
#: src/plonk-intro-cn/plonk-randomizing.md:17
#: src/plonk-intro-cn/plonk-randomizing.md:18
#: src/plonk-intro-cn/plonk-randomizing.md:19
#: src/plonk-intro-cn/plonk-randomizing.md:21
#: src/plonk-intro-cn/plonk-randomizing.md:31
#: src/plonk-intro-cn/plonk-randomizing.md:33
#: src/plonk-intro-cn/plonk-randomizing.md:37
#: src/plonk-intro-cn/plonk-randomizing.md:39
#: src/plonk-intro-cn/plonk-randomizing.md:41
#: src/plonk-intro-cn/plonk-randomizing.md:45
#: src/plonk-intro-cn/plonk-randomizing.md:47
#: src/plonk-intro-cn/plonk-randomizing.md:49
#: src/plonk-intro-cn/plonk-randomizing.md:51
#: src/plonk-intro-cn/plonk-randomizing.md:53
#: src/plonk-intro-cn/plonk-randomizing.md:55
#: src/plonk-intro-cn/plonk-randomizing.md:57
#: src/plonk-intro-cn/plonk-randomizing.md:59
#: src/plonk-intro-cn/plonk-randomizing.md:61
#: src/plonk-intro-cn/plonk-randomizing.md:63
#: src/plonk-intro-cn/plonk-randomizing.md:65
#: src/plonk-intro-cn/plonk-randomizing.md:69
#: src/plonk-intro-cn/plonk-randomizing.md:71
#: src/plonk-intro-cn/plonk-randomizing.md:73
#: src/plonk-intro-cn/plonk-randomizing.md:85
#: src/plonk-intro-cn/plonk-randomizing.md:86
#: src/plonk-intro-cn/plonk-randomizing.md:88
#: src/plonk-intro-cn/plonk-randomizing.md:90
#: src/plonk-intro-cn/plonk-randomizing.md:92
#: src/plonk-intro-cn/plonk-randomizing.md:93
#: src/plonk-intro-cn/plonk-randomizing.md:95
#: src/plonk-intro-cn/plonk-randomizing.md:97
#: src/plonk-intro-cn/plonk-randomizing.md:106
#: src/plonk-intro-cn/plonk-randomizing.md:121
#: src/plonk-intro-cn/plonk-randomizing.md:123
#: src/plonk-intro-cn/plonk-randomizing.md:125
#: src/plonk-intro-cn/plonk-randomizing.md:127
#: src/plonk-intro-cn/plonk-randomizing.md:129
#: src/plonk-intro-cn/plonk-randomizing.md:133
#: src/plonk-intro-cn/plonk-randomizing.md:141
#: src/plonk-intro-cn/plonk-randomizing.md:143
#: src/plonk-intro-cn/plonk-randomizing.md:145
#: src/plonk-intro-cn/plonk-randomizing.md:149
#: src/plonk-intro-cn/plonk-randomizing.md:151
#: src/plonk-intro-cn/plonk-randomizing.md:153
#: src/plonk-intro-cn/plonk-randomizing.md:155
#: src/plonk-intro-cn/plonk-randomizing.md:159
#: src/plonk-intro-cn/plonk-randomizing.md:161
#: src/plonk-intro-cn/plonk-randomizing.md:163
#: src/plonk-intro-cn/plonk-lookup.md:33 src/plonk-intro-cn/plonk-lookup.md:41
#: src/plonk-intro-cn/plonk-lookup.md:43 src/plonk-intro-cn/plonk-lookup.md:47
#: src/plonk-intro-cn/plonk-lookup.md:51 src/plonk-intro-cn/plonk-lookup.md:57
#: src/plonk-intro-cn/plonk-lookup.md:59 src/plonk-intro-cn/plonk-lookup.md:61
#: src/plonk-intro-cn/plonk-lookup.md:63 src/plonk-intro-cn/plonk-lookup.md:65
#: src/plonk-intro-cn/plonk-lookup.md:67 src/plonk-intro-cn/plonk-lookup.md:69
#: src/plonk-intro-cn/plonk-lookup.md:79 src/plonk-intro-cn/plonk-lookup.md:87
#: src/plonk-intro-cn/plonk-lookup.md:93 src/plonk-intro-cn/plonk-lookup.md:97
#: src/plonk-intro-cn/plonk-lookup.md:101
#: src/plonk-intro-cn/plonk-lookup.md:111
#: src/plonk-intro-cn/plonk-lookup.md:121
#: src/plonk-intro-cn/plonk-lookup.md:123
#: src/plonk-intro-cn/plonk-lookup.md:125
#: src/plonk-intro-cn/plonk-lookup.md:129
#: src/plonk-intro-cn/plonk-lookup.md:131
#: src/plonk-intro-cn/plonk-lookup.md:133
#: src/plonk-intro-cn/plonk-lookup.md:137
#: src/plonk-intro-cn/plonk-lookup.md:139
#: src/plonk-intro-cn/plonk-lookup.md:145
#: src/plonk-intro-cn/plonk-lookup.md:149
#: src/plonk-intro-cn/plonk-lookup.md:153
#: src/plonk-intro-cn/plonk-lookup.md:157
#: src/plonk-intro-cn/plonk-lookup.md:165
#: src/plonk-intro-cn/plonk-lookup.md:169
#: src/plonk-intro-cn/plonk-lookup.md:173
#: src/plonk-intro-cn/plonk-lookup.md:175
#: src/plonk-intro-cn/plonk-lookup.md:190
#: src/plonk-intro-cn/plonk-lookup.md:192
#: src/plonk-intro-cn/plonk-lookup.md:194
#: src/plonk-intro-cn/plonk-lookup.md:196
#: src/plonk-intro-cn/plonk-lookup.md:198
#: src/plonk-intro-cn/plonk-lookup.md:200
#: src/plonk-intro-cn/plonk-lookup.md:210
#: src/plonk-intro-cn/plonk-lookup.md:212
#: src/plonk-intro-cn/plonk-lookup.md:214
#: src/plonk-intro-cn/plonk-lookup.md:216
#: src/plonk-intro-cn/plonk-lookup.md:218
#: src/plonk-intro-cn/plonk-lookup.md:220
#: src/plonk-intro-cn/plonk-lookup.md:228
#: src/plonk-intro-cn/plonk-lookup.md:230
#: src/plonk-intro-cn/plonk-lookup.md:232
#: src/plonk-intro-cn/plonk-lookup.md:234
#: src/plonk-intro-cn/plonk-lookup.md:238
#: src/plonk-intro-cn/plonk-lookup.md:244
#: src/plonk-intro-cn/plonk-lookup.md:261
#: src/plonk-intro-cn/plonk-lookup.md:267
#: src/plonk-intro-cn/plonk-lookup.md:269
#: src/plonk-intro-cn/plonk-lookup.md:275
#: src/plonk-intro-cn/plonk-lookup.md:277
#: src/plonk-intro-cn/plonk-lookup.md:281
#: src/plonk-intro-cn/plonk-lookup.md:285
#: src/plonk-intro-cn/plonk-lookup.md:289
#: src/plonk-intro-cn/plonk-lookup.md:293
#: src/plonk-intro-cn/plonk-lookup.md:297
#: src/plonk-intro-cn/plonk-lookup.md:302
#: src/plonk-intro-cn/plonk-lookup.md:304
#: src/plonk-intro-cn/plonk-lookup.md:306
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:24
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:103
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:106
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:111
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:112
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:114
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:115
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:116
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:118
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:120
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:128
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:130
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:137
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:138
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:143
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:146
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:148
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:149
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:150
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:152
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:158
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:159
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:160
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:166
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:167
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:168
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:174
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:186
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:252
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:254
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:256
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:260
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:261
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:262
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:269
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:271
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:272
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:279
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:308
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:313
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:316
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:317
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:318
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:324
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:325
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:326
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:327
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:330
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:331
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:332
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:333
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:334
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:335
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:337
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:341
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:342
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:343
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:346
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:349
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:350
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:26
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:30
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:34
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:35
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:43
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:45
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:47
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:48
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:50
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:51
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:52
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:53
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:57
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:58
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:64
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:67
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:68
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:79
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:81
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:85
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:107
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:111
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:112
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:116
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:122
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:123
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:126
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:128
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:132
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:139
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:149
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:152
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:164
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:169
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:170
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:175
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:176
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:185
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:188
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:189
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:193
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:194
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:196
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:198
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:207
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:209
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:211
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:213
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:215
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:229
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:231
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:232
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:235
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:237
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:243
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:247
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:260
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:265
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:266
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:269
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:270
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:271
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:272
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:274
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:277
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:279
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:280
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:282
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:283
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:286
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:287
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:289
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:293
#: src/zk-snarks/3-General-Purpose-Computation.md:39
#: src/zk-snarks/3-General-Purpose-Computation.md:41
#: src/zk-snarks/3-General-Purpose-Computation.md:42
#: src/zk-snarks/3-General-Purpose-Computation.md:64
#: src/zk-snarks/3-General-Purpose-Computation.md:66
#: src/zk-snarks/3-General-Purpose-Computation.md:68
#: src/zk-snarks/3-General-Purpose-Computation.md:70
#: src/zk-snarks/3-General-Purpose-Computation.md:74
#: src/zk-snarks/3-General-Purpose-Computation.md:75
#: src/zk-snarks/3-General-Purpose-Computation.md:79
#: src/zk-snarks/3-General-Purpose-Computation.md:81
#: src/zk-snarks/3-General-Purpose-Computation.md:83
#: src/zk-snarks/3-General-Purpose-Computation.md:90
#: src/zk-snarks/3-General-Purpose-Computation.md:96
#: src/zk-snarks/3-General-Purpose-Computation.md:97
#: src/zk-snarks/3-General-Purpose-Computation.md:98
#: src/zk-snarks/3-General-Purpose-Computation.md:100
#: src/zk-snarks/3-General-Purpose-Computation.md:102
#: src/zk-snarks/3-General-Purpose-Computation.md:104
#: src/zk-snarks/3-General-Purpose-Computation.md:105
#: src/zk-snarks/3-General-Purpose-Computation.md:108
#: src/zk-snarks/3-General-Purpose-Computation.md:112
#: src/zk-snarks/3-General-Purpose-Computation.md:143
#: src/zk-snarks/3-General-Purpose-Computation.md:149
#: src/zk-snarks/3-General-Purpose-Computation.md:153
#: src/zk-snarks/3-General-Purpose-Computation.md:155
#: src/zk-snarks/3-General-Purpose-Computation.md:157
#: src/zk-snarks/3-General-Purpose-Computation.md:159
#: src/zk-snarks/3-General-Purpose-Computation.md:161
#: src/zk-snarks/3-General-Purpose-Computation.md:165
#: src/zk-snarks/3-General-Purpose-Computation.md:171
#: src/zk-snarks/3-General-Purpose-Computation.md:173
#: src/zk-snarks/3-General-Purpose-Computation.md:180
#: src/zk-snarks/3-General-Purpose-Computation.md:182
#: src/zk-snarks/3-General-Purpose-Computation.md:184
#: src/zk-snarks/3-General-Purpose-Computation.md:213
#: src/zk-snarks/3-General-Purpose-Computation.md:215
#: src/zk-snarks/3-General-Purpose-Computation.md:216
#: src/zk-snarks/3-General-Purpose-Computation.md:231
#: src/zk-snarks/3-General-Purpose-Computation.md:242
#: src/zk-snarks/3-General-Purpose-Computation.md:244
#: src/zk-snarks/3-General-Purpose-Computation.md:245
#: src/zk-snarks/3-General-Purpose-Computation.md:248
#: src/zk-snarks/3-General-Purpose-Computation.md:249
#: src/zk-snarks/3-General-Purpose-Computation.md:250
#: src/zk-snarks/3-General-Purpose-Computation.md:251
#: src/zk-snarks/3-General-Purpose-Computation.md:252
#: src/zk-snarks/3-General-Purpose-Computation.md:256
#: src/zk-snarks/3-General-Purpose-Computation.md:257
#: src/zk-snarks/3-General-Purpose-Computation.md:264
#: src/zk-snarks/3-General-Purpose-Computation.md:266
#: src/zk-snarks/3-General-Purpose-Computation.md:268
#: src/zk-snarks/3-General-Purpose-Computation.md:271
#: src/zk-snarks/3-General-Purpose-Computation.md:276
#: src/zk-snarks/3-General-Purpose-Computation.md:278
#: src/zk-snarks/3-General-Purpose-Computation.md:279
#: src/zk-snarks/3-General-Purpose-Computation.md:280
#: src/zk-snarks/3-General-Purpose-Computation.md:284
#: src/zk-snarks/3-General-Purpose-Computation.md:295
#: src/zk-snarks/3-General-Purpose-Computation.md:319
#: src/zk-snarks/3-General-Purpose-Computation.md:320
#: src/zk-snarks/3-General-Purpose-Computation.md:326
#: src/zk-snarks/3-General-Purpose-Computation.md:331
#: src/zk-snarks/3-General-Purpose-Computation.md:338
#: src/zk-snarks/3-General-Purpose-Computation.md:340
#: src/zk-snarks/3-General-Purpose-Computation.md:342
#: src/zk-snarks/3-General-Purpose-Computation.md:347
#: src/zk-snarks/3-General-Purpose-Computation.md:349
#: src/zk-snarks/3-General-Purpose-Computation.md:350
#: src/zk-snarks/3-General-Purpose-Computation.md:351
#: src/zk-snarks/3-General-Purpose-Computation.md:352
#: src/zk-snarks/3-General-Purpose-Computation.md:356
#: src/zk-snarks/3-General-Purpose-Computation.md:358
#: src/zk-snarks/3-General-Purpose-Computation.md:360
#: src/zk-snarks/3-General-Purpose-Computation.md:361
#: src/zk-snarks/3-General-Purpose-Computation.md:364
#: src/zk-snarks/3-General-Purpose-Computation.md:366
#: src/zk-snarks/3-General-Purpose-Computation.md:368
#: src/zk-snarks/3-General-Purpose-Computation.md:369
#: src/zk-snarks/3-General-Purpose-Computation.md:374
#: src/zk-snarks/3-General-Purpose-Computation.md:379
#: src/zk-snarks/3-General-Purpose-Computation.md:381
#: src/zk-snarks/3-General-Purpose-Computation.md:384
#: src/zk-snarks/4-Construction-Properties.md:62
#: src/zk-snarks/4-Construction-Properties.md:76
#: src/zk-snarks/4-Construction-Properties.md:77
#: src/zk-snarks/4-Construction-Properties.md:79
#: src/zk-snarks/4-Construction-Properties.md:83
#: src/zk-snarks/4-Construction-Properties.md:98
#: src/zk-snarks/4-Construction-Properties.md:105
#: src/zk-snarks/4-Construction-Properties.md:108
#: src/zk-snarks/4-Construction-Properties.md:112
#: src/zk-snarks/4-Construction-Properties.md:113
#: src/zk-snarks/4-Construction-Properties.md:119
#: src/zk-snarks/4-Construction-Properties.md:120
#: src/zk-snarks/4-Construction-Properties.md:121
#: src/zk-snarks/4-Construction-Properties.md:127
#: src/zk-snarks/4-Construction-Properties.md:128
#: src/zk-snarks/4-Construction-Properties.md:130
#: src/zk-snarks/4-Construction-Properties.md:133
#: src/zk-snarks/4-Construction-Properties.md:134
#: src/zk-snarks/4-Construction-Properties.md:135
#: src/zk-snarks/4-Construction-Properties.md:136
#: src/zk-snarks/4-Construction-Properties.md:137
#: src/zk-snarks/4-Construction-Properties.md:138
#: src/zk-snarks/4-Construction-Properties.md:139
#: src/zk-snarks/4-Construction-Properties.md:151
#: src/zk-snarks/4-Construction-Properties.md:155
#: src/zk-snarks/4-Construction-Properties.md:156
#: src/zk-snarks/4-Construction-Properties.md:162
#: src/zk-snarks/4-Construction-Properties.md:164
#: src/zk-snarks/4-Construction-Properties.md:170
#: src/zk-snarks/4-Construction-Properties.md:171
#: src/zk-snarks/4-Construction-Properties.md:172
#: src/zk-snarks/4-Construction-Properties.md:176
#: src/zk-snarks/4-Construction-Properties.md:178
#: src/zk-snarks/4-Construction-Properties.md:184
#: src/zk-snarks/4-Construction-Properties.md:195
#: src/zk-snarks/4-Construction-Properties.md:197
#: src/zk-snarks/4-Construction-Properties.md:199
#: src/zk-snarks/4-Construction-Properties.md:200
#: src/zk-snarks/4-Construction-Properties.md:205
#: src/zk-snarks/4-Construction-Properties.md:207
#: src/zk-snarks/4-Construction-Properties.md:209
#: src/zk-snarks/4-Construction-Properties.md:210
#: src/zk-snarks/4-Construction-Properties.md:212
#: src/zk-snarks/4-Construction-Properties.md:215
#: src/zk-snarks/4-Construction-Properties.md:217
#: src/zk-snarks/4-Construction-Properties.md:219
#: src/zk-snarks/4-Construction-Properties.md:221
#: src/zk-snarks/4-Construction-Properties.md:233
#: src/zk-snarks/4-Construction-Properties.md:234
#: src/zk-snarks/4-Construction-Properties.md:235
#: src/zk-snarks/4-Construction-Properties.md:244
#: src/zk-snarks/4-Construction-Properties.md:245
#: src/zk-snarks/4-Construction-Properties.md:249
#: src/zk-snarks/4-Construction-Properties.md:253
#: src/zk-snarks/4-Construction-Properties.md:263
#: src/zk-snarks/4-Construction-Properties.md:271
#: src/zk-snarks/4-Construction-Properties.md:273
#: src/zk-snarks/4-Construction-Properties.md:275
#: src/zk-snarks/4-Construction-Properties.md:279
#: src/zk-snarks/4-Construction-Properties.md:280
#: src/zk-snarks/4-Construction-Properties.md:282
#: src/zk-snarks/4-Construction-Properties.md:284
#: src/zk-snarks/4-Construction-Properties.md:286
#: src/zk-snarks/4-Construction-Properties.md:287
#: src/zk-snarks/4-Construction-Properties.md:290
#: src/zk-snarks/4-Construction-Properties.md:298
#: src/zk-snarks/4-Construction-Properties.md:300
#: src/zk-snarks/4-Construction-Properties.md:304
#: src/zk-snarks/4-Construction-Properties.md:306
#: src/zk-snarks/4-Construction-Properties.md:307
#: src/zk-snarks/4-Construction-Properties.md:308
#: src/zk-snarks/4-Construction-Properties.md:309
#: src/zk-snarks/4-Construction-Properties.md:313
#: src/zk-snarks/4-Construction-Properties.md:315
#: src/zk-snarks/4-Construction-Properties.md:317
#: src/zk-snarks/4-Construction-Properties.md:326
#: src/zk-snarks/4-Construction-Properties.md:331
#: src/zk-snarks/4-Construction-Properties.md:333
#: src/zk-snarks/4-Construction-Properties.md:338
#: src/zk-snarks/4-Construction-Properties.md:339
#: src/zk-snarks/4-Construction-Properties.md:340
#: src/zk-snarks/4-Construction-Properties.md:341
#: src/zk-snarks/4-Construction-Properties.md:342
#: src/zk-snarks/4-Construction-Properties.md:345
#: src/zk-snarks/4-Construction-Properties.md:349
#: src/zk-snarks/4-Construction-Properties.md:353
#: src/zk-snarks/4-Construction-Properties.md:357
#: src/zk-snarks/4-Construction-Properties.md:359
#: src/zk-snarks/4-Construction-Properties.md:363
#: src/zk-snarks/4-Construction-Properties.md:364
#: src/zk-snarks/4-Construction-Properties.md:368
#: src/zk-snarks/4-Construction-Properties.md:370
#: src/zk-snarks/4-Construction-Properties.md:374
#: src/zk-snarks/4-Construction-Properties.md:375
#: src/zk-snarks/4-Construction-Properties.md:376
#: src/zk-snarks/4-Construction-Properties.md:377
#: src/zk-snarks/4-Construction-Properties.md:379
#: src/zk-snarks/4-Construction-Properties.md:381
#: src/zk-snarks/4-Construction-Properties.md:384
#: src/zk-snarks/4-Construction-Properties.md:385
#: src/zk-snarks/4-Construction-Properties.md:391
#: src/zk-snarks/4-Construction-Properties.md:393
#: src/zk-snarks/4-Construction-Properties.md:394
#: src/zk-snarks/4-Construction-Properties.md:395
#: src/zk-snarks/4-Construction-Properties.md:397
#: src/zk-snarks/4-Construction-Properties.md:401
#: src/zk-snarks/4-Construction-Properties.md:405
#: src/zk-snarks/4-Construction-Properties.md:406
#: src/zk-snarks/4-Construction-Properties.md:407
#: src/zk-snarks/4-Construction-Properties.md:408
#: src/zk-snarks/4-Construction-Properties.md:409
#: src/zk-snarks/4-Construction-Properties.md:422
#: src/zk-snarks/4-Construction-Properties.md:424
#: src/zk-snarks/4-Construction-Properties.md:428
#: src/zk-snarks/4-Construction-Properties.md:431
#: src/zk-snarks/4-Construction-Properties.md:434
#: src/zk-snarks/4-Construction-Properties.md:436
#: src/zk-snarks/4-Construction-Properties.md:441
#: src/zk-snarks/4-Construction-Properties.md:443
#: src/zk-snarks/5-Pinocchio-Protocol.md:28
#: src/zk-snarks/5-Pinocchio-Protocol.md:32
#: src/zk-snarks/5-Pinocchio-Protocol.md:34
#: src/zk-snarks/5-Pinocchio-Protocol.md:44
#: src/zk-snarks/5-Pinocchio-Protocol.md:65
#: src/zk-snarks/5-Pinocchio-Protocol.md:67
#: src/zk-snarks/5-Pinocchio-Protocol.md:83
#: src/zk-snarks/5-Pinocchio-Protocol.md:84
#: src/zk-snarks/5-Pinocchio-Protocol.md:85
#: src/zk-snarks/5-Pinocchio-Protocol.md:87
#: src/zk-snarks/5-Pinocchio-Protocol.md:89
#: src/zk-snarks/5-Pinocchio-Protocol.md:92
#: src/zk-snarks/5-Pinocchio-Protocol.md:94
#: src/zk-snarks/5-Pinocchio-Protocol.md:97
#: src/zk-snarks/5-Pinocchio-Protocol.md:98
#: src/zk-snarks/5-Pinocchio-Protocol.md:102
#: src/zk-snarks/5-Pinocchio-Protocol.md:103
#: src/zk-snarks/5-Pinocchio-Protocol.md:106
#: src/zk-snarks/5-Pinocchio-Protocol.md:109
#: src/zk-snarks/5-Pinocchio-Protocol.md:111
#: src/zk-snarks/5-Pinocchio-Protocol.md:129
#: src/zk-snarks/5-Pinocchio-Protocol.md:131
#: src/zk-snarks/5-Pinocchio-Protocol.md:132
#: src/zk-snarks/5-Pinocchio-Protocol.md:133
#: src/zk-snarks/5-Pinocchio-Protocol.md:135
#: src/zk-snarks/5-Pinocchio-Protocol.md:136
#: src/zk-snarks/5-Pinocchio-Protocol.md:137
#: src/zk-snarks/5-Pinocchio-Protocol.md:142
#: src/zk-snarks/5-Pinocchio-Protocol.md:143
#: src/zk-snarks/5-Pinocchio-Protocol.md:145
#: src/zk-snarks/5-Pinocchio-Protocol.md:147
#: src/zk-snarks/5-Pinocchio-Protocol.md:151
#: src/zk-snarks/5-Pinocchio-Protocol.md:152
#: src/zk-snarks/5-Pinocchio-Protocol.md:154
#: src/zk-snarks/5-Pinocchio-Protocol.md:155
#: src/zk-snarks/5-Pinocchio-Protocol.md:157
#: src/zk-snarks/5-Pinocchio-Protocol.md:159
#: src/zk-snarks/5-Pinocchio-Protocol.md:160
#: src/zk-snarks/5-Pinocchio-Protocol.md:163
#: src/zk-snarks/5-Pinocchio-Protocol.md:165
#: src/zk-snarks/5-Pinocchio-Protocol.md:170
#: src/zk-snarks/5-Pinocchio-Protocol.md:173
#: src/zk-snarks/5-Pinocchio-Protocol.md:187
#: src/zk-snarks/5-Pinocchio-Protocol.md:188
#: src/zk-snarks/5-Pinocchio-Protocol.md:192
#: src/zk-snarks/5-Pinocchio-Protocol.md:195
#: src/zk-snarks/5-Pinocchio-Protocol.md:198
#: src/zk-snarks/5-Pinocchio-Protocol.md:199
#: src/zk-snarks/5-Pinocchio-Protocol.md:202
#: src/zk-snarks/5-Pinocchio-Protocol.md:204
#: src/zk-snarks/5-Pinocchio-Protocol.md:205
#: src/zk-snarks/5-Pinocchio-Protocol.md:207
#: src/zk-snarks/5-Pinocchio-Protocol.md:209
#: src/zk-snarks/5-Pinocchio-Protocol.md:212
#: src/zk-snarks/5-Pinocchio-Protocol.md:214
#: src/zk-snarks/5-Pinocchio-Protocol.md:215
#: src/zk-snarks/5-Pinocchio-Protocol.md:218
#: src/zk-snarks/5-Pinocchio-Protocol.md:222
#: src/zk-snarks/5-Pinocchio-Protocol.md:225
#: src/halo2/tmp/1-Simple-Example.md:151 src/halo2/tmp/1-Simple-Example.md:152
#: src/halo2/tmp/1-Simple-Example.md:552 src/halo2/tmp/1-Simple-Example.md:553
#: src/halo2/tmp/2-Fibonacci-example-1.md:19
#: src/halo2/tmp/3-Fibonacci-example-2.md:84
#: src/halo2/tmp/3-Fibonacci-example-2.md:269 src/halo2/tmp/9-decomposed.md:22
#: src/halo2/tmp/9-decomposed.md:30 src/halo2/tmp/9-decomposed.md:40
#: src/halo2/tmp/9-decomposed.md:42 src/halo2/tmp/9-decomposed.md:43
#: src/halo2/tmp/9-decomposed.md:46 src/halo2/tmp/9-decomposed.md:47
#: src/halo2/tmp/9-decomposed.md:53 src/halo2/tmp/9-decomposed.md:61
#: src/halo2/tmp/9-decomposed.md:101 src/halo2/tmp/9-decomposed.md:106
#: src/halo2/tmp/9-decomposed.md:108 src/halo2/tmp/9-decomposed.md:133
#: src/halo2/tmp/9-decomposed.md:134 src/halo2/tmp/9-decomposed.md:139
#: src/halo2/tmp/9-decomposed.md:142 src/halo2/tmp/9-decomposed.md:216
#: src/halo2/tmp/Hammster.md:23 src/zk-everything/BabySNARK tutorial.md:33
#: tutorial.md:35 tutorial.md:127 tutorial.md:129 tutorial.md:131
#: tutorial.md:140 tutorial.md:145 tutorial.md:148 tutorial.md:150
#: tutorial.md:156 tutorial.md:158 tutorial.md:163 tutorial.md:165
#: tutorial.md:168 tutorial.md:177 tutorial.md:181
#: src/zk-everything/zk-learning-miles/KZG.md:10
#: src/zk-everything/zk-learning-miles/KZG.md:12
#: src/zk-everything/zk-learning-miles/KZG.md:41
#: src/zk-everything/zk-learning-miles/KZG.md:83
#: src/zk-everything/zk-learning-miles/KZG.md:96
#: src/zk-everything/zk-learning-miles/KZG.md:106
#: src/zk-everything/zk-learning-miles/KZG.md:110
#: src/zk-everything/zk-learning-miles/KZG.md:114
#: src/zk-everything/zk-learning-miles/KZG.md:120
#: src/zk-everything/zk-learning-miles/KZG.md:142
#: src/zk-everything/zk-learning-miles/KZG.md:145
#: src/zk-everything/zk-learning-miles/KZG.md:164
#: src/zk-everything/zk-learning-miles/KZG.md:170
#: src/zk-everything/zk-learning-miles/KZG.md:183
#: src/zk-everything/zk-learning-miles/KZG.md:185
#: src/zk-everything/zk-learning-miles/KZG.md:203
#: src/zk-everything/zk-learning-miles/KZG.md:209
#: src/zk-everything/zk-learning-miles/KZG.md:211
#: src/zk-everything/zk-learning-miles/KZG.md:213
#: src/zk-everything/zk-learning-miles/KZG.md:222
#: src/zk-everything/zk-learning-miles/KZG.md:246
#: src/zk-everything/zk-learning-miles/KZG.md:248
#: src/zk-everything/zk-learning-miles/KZG.md:250
#: src/zk-everything/zk-learning-miles/KZG.md:262
#: src/zk-everything/zk-learning-miles/KZG.md:270
#: src/zk-everything/zk-learning-miles/KZG.md:272
#: src/zk-everything/zk-learning-miles/KZG.md:274
#: src/zk-everything/zk-learning-miles/KZG.md:276
#: src/zk-everything/zk-learning-miles/KZG.md:317
#: src/zk-everything/zk-learning-miles/KZG.md:318
#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:42 Zeroknowledge.md:207 Zeroknowledge.md:238
#: Zeroknowledge.md:239
#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:197 SNARKs.md:198 SNARKs.md:269 SNARKs.md:270 SNARKs.md:272
#: SNARKs.md:273 SNARKs.md:284 SNARKs.md:289 SNARKs.md:296 SNARKs.md:298
#: SNARKs.md:301 SNARKs.md:302 SNARKs.md:310 SNARKs.md:312 SNARKs.md:316
#: SNARKs.md:324 SNARKs.md:354 SNARKs.md:362 SNARKs.md:364 SNARKs.md:370
#: SNARKs.md:374 SNARKs.md:379 SNARKs.md:383 SNARKs.md:387 SNARKs.md:395
#: SNARKs.md:403 SNARKs.md:407 SNARKs.md:408 SNARKs.md:410
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:44
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:50
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:58
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:64
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:79
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:83
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:87
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:91
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:111
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:119
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:122
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:128
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:132
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:134
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:145
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:152
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:160
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:162
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:170
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:174
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:176
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:182
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:188
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:194
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:202
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:204
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:212
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:216
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:218
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:224
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:230
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:236
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:244
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:246
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:255
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:259
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:262
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:268
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:275
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:281
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:289
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:292
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:301
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:305
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:307
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:314
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:319
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:325
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:333
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:336
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:343
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:347
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:349
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:355
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:361
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:367
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:377
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:383
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:390
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:396
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:405
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:412
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:418
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:424
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:428
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:430
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:434
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:440
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:442
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:446
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:448
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:452
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:460
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:486
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:490
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:493
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:497
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:500
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:506
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:512
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:514
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:520
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:526
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:530
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:532
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:538
#: src/zk-everything/zk-everything-joe/Hyrax.md:58
#: src/zk-everything/zk-everything-joe/Hyrax.md:64
#: src/zk-everything/zk-everything-joe/Hyrax.md:70
#: src/zk-everything/zk-everything-joe/Hyrax.md:86
#: src/zk-everything/zk-everything-joe/Hyrax.md:92
#: src/zk-everything/zk-everything-joe/Hyrax.md:98
#: src/zk-everything/zk-everything-joe/Hyrax.md:116
#: src/zk-everything/zk-everything-joe/Hyrax.md:191
#: src/zk-everything/zk-everything-joe/Hyrax.md:203
#: src/zk-everything/zk-everything-joe/Hyrax.md:216
#: src/zk-everything/zk-everything-joe/Hyrax.md:223
#: src/zk-everything/zk-everything-joe/Hyrax.md:228
#: src/zk-everything/zk-everything-joe/Hyrax.md:250
#: src/zk-everything/zk-everything-joe/Hyrax.md:254
#: src/zk-everything/zk-everything-joe/Hyrax.md:263
#: src/zk-everything/zk-everything-joe/Hyrax.md:292
#: src/zk-everything/zk-everything-joe/Hyrax.md:297
#: src/zk-everything/zk-everything-joe/Hyrax.md:302
#: src/zk-everything/zk-everything-joe/Hyrax.md:311
#: src/zk-everything/zk-everything-joe/Spartan.md:23
#: src/zk-everything/zk-everything-joe/Spartan.md:24
#: src/zk-everything/zk-everything-joe/Spartan.md:25
#: src/zk-everything/zk-everything-joe/Spartan.md:26
#: src/zk-everything/zk-everything-joe/Spartan.md:115
#: src/zk-everything/zk-everything-joe/Spartan.md:118
#: src/zk-everything/zk-everything-joe/Spartan.md:122
#: src/zk-everything/zk-everything-joe/Spartan.md:136
#: src/zk-everything/zk-everything-joe/Spartan.md:143
#: src/zk-everything/zk-everything-joe/Spartan.md:148
#: src/zk-everything/zk-everything-joe/Spartan.md:169
#: src/zk-everything/zk-everything-joe/Spartan.md:172
#: src/zk-everything/zk-everything-joe/Spartan.md:177
#: src/zk-everything/zk-everything-joe/Spartan.md:182
#: src/zk-everything/zk-everything-joe/Spartan.md:195
#: src/zk-everything/zk-everything-joe/Spartan.md:200
#: src/zk-everything/zk-everything-joe/Spartan.md:236
#: src/zk-everything/zk-everything-joe/Spartan.md:240
#: src/zk-everything/zk-everything-joe/Spartan.md:242
#: src/zk-everything/zk-everything-joe/Spartan.md:252
#: src/zk-everything/zk-everything-joe/Spartan.md:254
#: src/zk-everything/zk-everything-joe/Spartan.md:263
#: src/zk-everything/zk-everything-joe/Spartan.md:264
#: src/zk-everything/zk-everything-joe/Spartan.md:274
#: src/zk-everything/zk-everything-joe/Spartan.md:275
#: src/zk-everything/zk-everything-joe/Spartan.md:304
#: src/zk-everything/zk-everything-joe/Spartan.md:319
#: src/zk-everything/zk-everything-joe/Spartan.md:323
#: src/zk-everything/zk-everything-joe/Spartan.md:327
#: src/zk-everything/zk-everything-joe/Spartan.md:339
#: src/zk-everything/zk-everything-joe/Spartan.md:343
#: src/zk-everything/zk-everything-joe/Spartan.md:344
#: src/zk-everything/zk-everything-joe/Spartan.md:346
#: src/zk-everything/zk-everything-joe/Spartan.md:347
#: src/zk-everything/zk-everything-joe/Spartan.md:349
#: src/zk-everything/zk-everything-joe/Spartan.md:350
#: src/zk-everything/zk-everything-joe/Spartan.md:353
#: src/zk-everything/zk-everything-joe/Spartan.md:355
#: src/zk-everything/zk-everything-joe/Spartan.md:359
#: src/zk-everything/zk-everything-joe/Spartan.md:361
#: src/zk-everything/zk-everything-joe/Spartan.md:377
#: src/zk-everything/zk-everything-joe/Spartan.md:394
#: src/zk-everything/zk-everything-joe/Spartan.md:401
#: src/zk-everything/zk-everything-joe/Spartan.md:406
#: src/zk-everything/zk-everything-joe/Spartan.md:411
#: src/zk-everything/zk-everything-joe/Spartan.md:416
#: src/zk-everything/zk-everything-joe/Spartan.md:422
#: src/zk-everything/zk-everything-joe/Spartan.md:428
#: src/zk-everything/zk-everything-joe/Spartan.md:436
#: src/zk-everything/zk-everything-joe/Spartan.md:441
#: src/zk-everything/zk-everything-joe/Spartan.md:445
#: src/zk-everything/zk-everything-joe/Spartan.md:450
#: src/zk-everything/zk-everything-joe/Spartan.md:455
#: src/zk-everything/zk-everything-joe/Spartan.md:458 src/Nova/SuperNova.md:12
#: src/Nova/SuperNova.md:14 src/Nova/SuperNova.md:19 src/Nova/SuperNova.md:66
#: src/public goods/第二章.md:10 goods/第二章.md:33 goods/第二章.md:52
#: goods/第二章.md:54 goods/第二章.md:56 goods/第二章.md:80
#: goods/第二章.md:86 goods/第二章.md:88 goods/第二章.md:89
#: goods/第二章.md:91 goods/第二章.md:97 goods/第二章.md:103
#: goods/第二章.md:147 goods/第二章.md:160 goods/第二章.md:162
#: goods/第二章.md:164 goods/第二章.md:170 goods/第二章.md:171
#: goods/第二章.md:175 goods/第二章.md:177 goods/4-Proving-System.md:55
#: goods/4-Proving-System.md:60 goods/4-Proving-System.md:62
#: goods/4-Proving-System.md:106 goods/4-Proving-System.md:107
#: goods/4-Proving-System.md:111 goods/4-Proving-System.md:124
#: goods/4-Proving-System.md:126 goods/4-Proving-System.md:127
#: goods/4-Proving-System.md:129 goods/4-Proving-System.md:136
#: goods/4-Proving-System.md:145 goods/4-Proving-System.md:149
#: goods/4-Proving-System.md:151 goods/4-Proving-System.md:155
#: goods/4-Proving-System.md:157 goods/4-Proving-System.md:169
#: goods/4-Proving-System.md:171 goods/4-Proving-System.md:173
#: goods/4-Proving-System.md:177 goods/4-Proving-System.md:204
#: goods/4-Proving-System.md:206 goods/4-Proving-System.md:207
#: goods/4-Proving-System.md:208 goods/4-Proving-System.md:209
#: src/materials/ZK-Materials.md:600
msgid ")"
msgstr ")"

#: src/zkp-intro/1/zkp-back.md:200
#: src/plonk-intro-cn/plonk-lagrange-basis.md:10
#: src/plonk-intro-cn/plonk-lagrange-basis.md:50
#: src/plonk-intro-cn/plonk-constraints.md:155
#: src/plonk-intro-cn/plonk-randomizing.md:35
#: src/plonk-intro-cn/plonk-randomizing.md:73
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:229
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:235
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:243
#: src/halo2/tmp/9-decomposed.md:99
#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:238 Zeroknowledge.md:239
#: src/zk-everything/zk-everything-joe/Hyrax.md:254
#: src/zk-everything/zk-everything-joe/Hyrax.md:263
#: src/zk-everything/zk-everything-joe/Hyrax.md:269
#: src/zk-everything/zk-everything-joe/Hyrax.md:310 src/public
#: goods/4-Proving-System.md:124
msgid "∣"
msgstr "∣"

#: src/zkp-intro/1/zkp-back.md:200 src/plonk-intro-cn/plonk-constraints.md:155
#: src/plonk-intro-cn/plonk-polycom.md:49
#: src/plonk-intro-cn/plonk-polycom.md:73
#: src/plonk-intro-cn/plonk-polycom.md:153
#: src/plonk-intro-cn/plonk-lookup.md:115
#: src/plonk-intro-cn/plonk-lookup.md:117
#: src/plonk-intro-cn/plonk-lookup.md:129
#: src/plonk-intro-cn/plonk-lookup.md:131
#: src/plonk-intro-cn/plonk-lookup.md:133
#: src/plonk-intro-cn/plonk-lookup.md:135
#: src/plonk-intro-cn/plonk-lookup.md:137
#: src/plonk-intro-cn/plonk-lookup.md:139
#: src/plonk-intro-cn/plonk-lookup.md:141
#: src/plonk-intro-cn/plonk-lookup.md:143
#: src/plonk-intro-cn/plonk-lookup.md:188
#: src/plonk-intro-cn/plonk-lookup.md:220
#: src/plonk-intro-cn/plonk-lookup.md:224
#: src/zk-everything/zk-learning-miles/KZG.md:162
#: src/zk-everything/zk-learning-miles/KZG.md:201
#: src/zk-everything/zk-learning-miles/KZG.md:220
#: src/zk-everything/zk-learning-miles/KZG.md:222
#: src/zk-everything/zk-everything-joe/Hyrax.md:191
#: src/zk-everything/zk-everything-joe/Hyrax.md:276
#: src/zk-everything/zk-everything-joe/Hyrax.md:277
#: src/zk-everything/zk-everything-joe/Hyrax.md:282
#: src/zk-everything/zk-everything-joe/Hyrax.md:284
#: src/zk-everything/zk-everything-joe/Hyrax.md:301
#: src/zk-everything/zk-everything-joe/Hyrax.md:302
#: src/zk-everything/zk-everything-joe/Hyrax.md:314
#: src/zk-everything/zk-everything-joe/Hyrax.md:315
#: src/zk-everything/zk-everything-joe/Hyrax.md:324 src/public
#: goods/第二章.md:50 goods/第二章.md:147
msgid "T"
msgstr "T"

#: src/zkp-intro/1/zkp-back.md:200
#: src/plonk-intro-cn/plonk-lagrange-basis.md:129
#: src/plonk-intro-cn/plonk-lagrange-basis.md:131
#: src/plonk-intro-cn/plonk-lagrange-basis.md:135
#: src/plonk-intro-cn/plonk-lagrange-basis.md:137
#: src/plonk-intro-cn/plonk-lagrange-basis.md:139
#: src/plonk-intro-cn/plonk-lagrange-basis.md:143
#: src/plonk-intro-cn/plonk-lagrange-basis.md:147
#: src/plonk-intro-cn/plonk-permutation.md:96
#: src/plonk-intro-cn/plonk-permutation.md:98
#: src/plonk-intro-cn/plonk-constraints.md:173
#: src/plonk-intro-cn/plonk-constraints.md:175
#: src/plonk-intro-cn/plonk-constraints.md:181
#: src/plonk-intro-cn/plonk-polycom.md:141
#: src/plonk-intro-cn/plonk-polycom.md:143
#: src/plonk-intro-cn/plonk-polycom.md:145
#: src/plonk-intro-cn/plonk-polycom.md:147
#: src/plonk-intro-cn/plonk-polycom.md:151
#: src/plonk-intro-cn/plonk-polycom.md:155
#: src/plonk-intro-cn/plonk-polycom.md:161
#: src/plonk-intro-cn/plonk-polycom.md:163
#: src/plonk-intro-cn/plonk-polycom.md:167
#: src/plonk-intro-cn/plonk-polycom.md:169
#: src/plonk-intro-cn/plonk-polycom.md:171
#: src/plonk-intro-cn/plonk-polycom.md:175
#: src/plonk-intro-cn/plonk-polycom.md:179
#: src/plonk-intro-cn/plonk-polycom.md:183
#: src/plonk-intro-cn/plonk-polycom.md:185
#: src/plonk-intro-cn/plonk-polycom.md:193
#: src/plonk-intro-cn/plonk-polycom.md:197
#: src/plonk-intro-cn/plonk-polycom.md:199
#: src/plonk-intro-cn/plonk-polycom.md:201
#: src/plonk-intro-cn/plonk-polycom.md:205
#: src/plonk-intro-cn/plonk-polycom.md:209
#: src/plonk-intro-cn/plonk-polycom.md:211
#: src/plonk-intro-cn/plonk-polycom.md:213
#: src/plonk-intro-cn/plonk-polycom.md:217
#: src/plonk-intro-cn/plonk-polycom.md:221
#: src/plonk-intro-cn/plonk-polycom.md:225
#: src/plonk-intro-cn/plonk-randomizing.md:19
#: src/plonk-intro-cn/plonk-randomizing.md:59
#: src/plonk-intro-cn/plonk-randomizing.md:61
#: src/plonk-intro-cn/plonk-randomizing.md:65
#: src/plonk-intro-cn/plonk-randomizing.md:69
#: src/plonk-intro-cn/plonk-lookup.md:302
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:114
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:115
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:118
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:120
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:128
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:138
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:139
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:143
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:144
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:148
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:150
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:159
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:160
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:168
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:316
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:317
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:331
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:334
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:335
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:341
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:342
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:343
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:346
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:349
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:350
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:24
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:26
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:29
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:30
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:32
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:46
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:108
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:111
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:122
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:123
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:126
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:128
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:160
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:191
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:193
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:194
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:270
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:271
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:274
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:277
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:282
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:283
#: src/zk-snarks/3-General-Purpose-Computation.md:90
#: src/zk-snarks/3-General-Purpose-Computation.md:102
#: src/zk-snarks/3-General-Purpose-Computation.md:105
#: src/zk-snarks/3-General-Purpose-Computation.md:108
#: src/zk-snarks/3-General-Purpose-Computation.md:155
#: src/zk-snarks/3-General-Purpose-Computation.md:171
#: src/zk-snarks/3-General-Purpose-Computation.md:173
#: src/zk-snarks/3-General-Purpose-Computation.md:180
#: src/zk-snarks/3-General-Purpose-Computation.md:366
#: src/zk-snarks/4-Construction-Properties.md:176
#: src/zk-snarks/4-Construction-Properties.md:178
#: src/zk-snarks/4-Construction-Properties.md:205
#: src/zk-snarks/4-Construction-Properties.md:210
#: src/zk-snarks/4-Construction-Properties.md:212
#: src/zk-snarks/4-Construction-Properties.md:215
#: src/zk-snarks/4-Construction-Properties.md:219
#: src/zk-snarks/4-Construction-Properties.md:271
#: src/zk-snarks/4-Construction-Properties.md:309
#: src/zk-snarks/4-Construction-Properties.md:340
#: src/zk-snarks/4-Construction-Properties.md:349
#: src/zk-snarks/4-Construction-Properties.md:359
#: src/zk-snarks/4-Construction-Properties.md:436
#: src/zk-snarks/5-Pinocchio-Protocol.md:92
#: src/zk-snarks/5-Pinocchio-Protocol.md:94
#: src/zk-snarks/5-Pinocchio-Protocol.md:109
#: src/zk-snarks/5-Pinocchio-Protocol.md:129
#: src/zk-snarks/5-Pinocchio-Protocol.md:131
#: src/zk-snarks/5-Pinocchio-Protocol.md:132
#: src/zk-snarks/5-Pinocchio-Protocol.md:133
#: src/zk-snarks/5-Pinocchio-Protocol.md:142
#: src/zk-snarks/5-Pinocchio-Protocol.md:143
#: src/zk-snarks/5-Pinocchio-Protocol.md:145
#: src/zk-snarks/5-Pinocchio-Protocol.md:147
#: src/zk-snarks/5-Pinocchio-Protocol.md:151
#: src/zk-snarks/5-Pinocchio-Protocol.md:152
#: src/zk-snarks/5-Pinocchio-Protocol.md:154
#: src/zk-snarks/5-Pinocchio-Protocol.md:155
#: src/zk-snarks/5-Pinocchio-Protocol.md:157
#: src/zk-snarks/5-Pinocchio-Protocol.md:160
#: src/zk-snarks/5-Pinocchio-Protocol.md:165
#: src/zk-snarks/5-Pinocchio-Protocol.md:202
#: src/zk-snarks/5-Pinocchio-Protocol.md:209
#: src/zk-snarks/5-Pinocchio-Protocol.md:212
#: src/zk-snarks/5-Pinocchio-Protocol.md:225
#: src/zk-everything/zk-learning-miles/KZG.md:199
#: src/zk-everything/zk-learning-miles/KZG.md:207
#: src/zk-everything/zk-learning-miles/KZG.md:209
#: src/zk-everything/zk-learning-miles/KZG.md:211
#: src/zk-everything/zk-learning-miles/KZG.md:213
#: src/zk-everything/zk-learning-miles/KZG.md:246
#: src/zk-everything/zk-learning-miles/KZG.md:248
#: src/zk-everything/zk-learning-miles/KZG.md:250
#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:350 SNARKs.md:352 SNARKs.md:354 SNARKs.md:363
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:58
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:64
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:83
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:87
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:91
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:134
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:145
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:152
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:396
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:448
#: src/zk-everything/zk-everything-joe/Hyrax.md:58
#: src/zk-everything/zk-everything-joe/Hyrax.md:64
#: src/zk-everything/zk-everything-joe/Hyrax.md:70
#: src/zk-everything/zk-everything-joe/Hyrax.md:133
#: src/zk-everything/zk-everything-joe/Hyrax.md:140
#: src/zk-everything/zk-everything-joe/Hyrax.md:162
#: src/zk-everything/zk-everything-joe/Hyrax.md:168
#: src/zk-everything/zk-everything-joe/Hyrax.md:181
#: src/zk-everything/zk-everything-joe/Hyrax.md:195
#: src/zk-everything/zk-everything-joe/Hyrax.md:198
#: src/zk-everything/zk-everything-joe/Hyrax.md:214
#: src/zk-everything/zk-everything-joe/Hyrax.md:228
#: src/zk-everything/zk-everything-joe/Hyrax.md:282 src/public
#: goods/第二章.md:17 goods/第二章.md:80 goods/第二章.md:89
#: goods/第二章.md:103 goods/第二章.md:125 goods/4-Proving-System.md:55
#: goods/4-Proving-System.md:60 goods/4-Proving-System.md:124
#: goods/4-Proving-System.md:145 goods/4-Proving-System.md:157
#: goods/4-Proving-System.md:169 goods/4-Proving-System.md:171
#: goods/4-Proving-System.md:177
msgid "h"
msgstr "h"

#: src/zkp-intro/1/zkp-back.md:200 src/halo2/tmp/Zordle.md:79
msgid "ree"
msgstr "ree"

#: src/zkp-intro/1/zkp-back.md:200
#: src/plonk-intro-cn/plonk-arithmetization.md:151
#: src/plonk-intro-cn/plonk-arithmetization.md:155
#: src/plonk-intro-cn/plonk-arithmetization.md:237
#: src/plonk-intro-cn/plonk-arithmetization.md:239
#: src/plonk-intro-cn/plonk-arithmetization.md:241
#: src/plonk-intro-cn/plonk-arithmetization.md:249
#: src/plonk-intro-cn/plonk-arithmetization.md:257
#: src/plonk-intro-cn/plonk-constraints.md:116
#: src/plonk-intro-cn/plonk-constraints.md:125
#: src/plonk-intro-cn/plonk-constraints.md:127
#: src/plonk-intro-cn/plonk-constraints.md:129
#: src/plonk-intro-cn/plonk-constraints.md:133
#: src/plonk-intro-cn/plonk-constraints.md:159
#: src/plonk-intro-cn/plonk-constraints.md:163
#: src/plonk-intro-cn/plonk-constraints.md:175
#: src/plonk-intro-cn/plonk-constraints.md:185
#: src/plonk-intro-cn/plonk-constraints.md:199
#: src/plonk-intro-cn/plonk-polycom.md:29
#: src/plonk-intro-cn/plonk-polycom.md:33
#: src/plonk-intro-cn/plonk-polycom.md:35
#: src/plonk-intro-cn/plonk-polycom.md:41
#: src/plonk-intro-cn/plonk-polycom.md:53
#: src/plonk-intro-cn/plonk-polycom.md:55
#: src/plonk-intro-cn/plonk-polycom.md:61
#: src/plonk-intro-cn/plonk-polycom.md:69
#: src/plonk-intro-cn/plonk-polycom.md:73
#: src/plonk-intro-cn/plonk-polycom.md:75
#: src/plonk-intro-cn/plonk-polycom.md:81
#: src/plonk-intro-cn/plonk-polycom.md:107
#: src/plonk-intro-cn/plonk-polycom.md:109
#: src/plonk-intro-cn/plonk-polycom.md:111
#: src/plonk-intro-cn/plonk-polycom.md:117
#: src/plonk-intro-cn/plonk-polycom.md:124
#: src/plonk-intro-cn/plonk-polycom.md:134
#: src/plonk-intro-cn/plonk-polycom.md:136
#: src/plonk-intro-cn/plonk-polycom.md:197
#: src/plonk-intro-cn/plonk-randomizing.md:41
#: src/plonk-intro-cn/plonk-randomizing.md:149
#: src/plonk-intro-cn/plonk-randomizing.md:159
#: src/plonk-intro-cn/plonk-lookup.md:265
#: src/plonk-intro-cn/plonk-lookup.md:269
#: src/plonk-intro-cn/plonk-lookup.md:304
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:212
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:213
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:218
#: src/zk-snarks/4-Construction-Properties.md:46
#: src/zk-snarks/4-Construction-Properties.md:49
#: src/halo2/tmp/9-decomposed.md:53 src/halo2/tmp/9-decomposed.md:99
#: src/halo2/tmp/9-decomposed.md:101 src/halo2/tmp/9-decomposed.md:108
#: src/halo2/tmp/9-decomposed.md:126 src/halo2/tmp/9-decomposed.md:130
#: src/halo2/tmp/9-decomposed.md:133 src/zk-everything/BabySNARK tutorial.md:31
#: tutorial.md:33 tutorial.md:38 tutorial.md:150
#: src/zk-everything/zk-learning-miles/KZG.md:203
#: src/zk-everything/zk-learning-miles/KZG.md:209
#: src/zk-everything/zk-learning-miles/KZG.md:213
#: src/zk-everything/zk-learning-miles/KZG.md:246
#: src/zk-everything/zk-learning-miles/KZG.md:250
#: src/zk-everything/zk-learning-miles/KZG.md:318
#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:198 SNARKs.md:395 SNARKs.md:403
#: src/zk-everything/zk-everything-joe/Hyrax.md:122
#: src/zk-everything/zk-everything-joe/Hyrax.md:147
#: src/zk-everything/zk-everything-joe/Hyrax.md:162
#: src/zk-everything/zk-everything-joe/Hyrax.md:168
#: src/zk-everything/zk-everything-joe/Hyrax.md:181
#: src/zk-everything/zk-everything-joe/Hyrax.md:198
#: src/zk-everything/zk-everything-joe/Hyrax.md:201
#: src/zk-everything/zk-everything-joe/Hyrax.md:203
#: src/zk-everything/zk-everything-joe/Hyrax.md:208
#: src/zk-everything/zk-everything-joe/Hyrax.md:214
#: src/zk-everything/zk-everything-joe/Hyrax.md:216
#: src/zk-everything/zk-everything-joe/Hyrax.md:223
#: src/zk-everything/zk-everything-joe/Hyrax.md:228
#: src/zk-everything/zk-everything-joe/Spartan.md:382
#: src/zk-everything/zk-everything-joe/Spartan.md:394
#: src/zk-everything/zk-everything-joe/Spartan.md:401
#: src/zk-everything/zk-everything-joe/Spartan.md:441
#: src/zk-everything/zk-everything-joe/Spartan.md:445
#: src/zk-everything/zk-everything-joe/Spartan.md:450
#: src/zk-everything/zk-everything-joe/Spartan.md:455 src/Nova/SuperNova.md:31
#: src/public goods/第二章.md:26 goods/第二章.md:33 goods/第二章.md:34
#: goods/第二章.md:97 goods/第二章.md:125 goods/第二章.md:175
#: goods/4-Proving-System.md:204 goods/4-Proving-System.md:207
msgid "C"
msgstr "C"

#: src/zkp-intro/1/zkp-back.md:200
#: src/plonk-intro-cn/plonk-arithmetization.md:20
#: src/plonk-intro-cn/plonk-arithmetization.md:22
#: src/plonk-intro-cn/plonk-arithmetization.md:35
#: src/plonk-intro-cn/plonk-arithmetization.md:41
#: src/plonk-intro-cn/plonk-arithmetization.md:45
#: src/plonk-intro-cn/plonk-arithmetization.md:47
#: src/plonk-intro-cn/plonk-arithmetization.md:51
#: src/plonk-intro-cn/plonk-arithmetization.md:55
#: src/plonk-intro-cn/plonk-arithmetization.md:57
#: src/plonk-intro-cn/plonk-arithmetization.md:87
#: src/plonk-intro-cn/plonk-arithmetization.md:91
#: src/plonk-intro-cn/plonk-arithmetization.md:93
#: src/plonk-intro-cn/plonk-arithmetization.md:101
#: src/plonk-intro-cn/plonk-arithmetization.md:105
#: src/plonk-intro-cn/plonk-arithmetization.md:109
#: src/plonk-intro-cn/plonk-arithmetization.md:115
#: src/plonk-intro-cn/plonk-arithmetization.md:123
#: src/plonk-intro-cn/plonk-arithmetization.md:143
#: src/plonk-intro-cn/plonk-arithmetization.md:147
#: src/plonk-intro-cn/plonk-arithmetization.md:159
#: src/plonk-intro-cn/plonk-arithmetization.md:163
#: src/plonk-intro-cn/plonk-arithmetization.md:179
#: src/plonk-intro-cn/plonk-arithmetization.md:227
#: src/plonk-intro-cn/plonk-arithmetization.md:231
#: src/plonk-intro-cn/plonk-arithmetization.md:233
#: src/plonk-intro-cn/plonk-arithmetization.md:239
#: src/plonk-intro-cn/plonk-arithmetization.md:243
#: src/plonk-intro-cn/plonk-permutation.md:11
#: src/plonk-intro-cn/plonk-constraints.md:57
#: src/plonk-intro-cn/plonk-constraints.md:125
#: src/plonk-intro-cn/plonk-polycom.md:35
#: src/plonk-intro-cn/plonk-randomizing.md:19
#: src/plonk-intro-cn/plonk-randomizing.md:59
#: src/plonk-intro-cn/plonk-randomizing.md:61
#: src/plonk-intro-cn/plonk-randomizing.md:65
#: src/plonk-intro-cn/plonk-randomizing.md:69
#: src/plonk-intro-cn/plonk-lookup.md:161
#: src/plonk-intro-cn/plonk-lookup.md:163
#: src/plonk-intro-cn/plonk-lookup.md:165
#: src/plonk-intro-cn/plonk-lookup.md:169
#: src/plonk-intro-cn/plonk-lookup.md:173
#: src/plonk-intro-cn/plonk-lookup.md:175
#: src/plonk-intro-cn/plonk-lookup.md:188
#: src/plonk-intro-cn/plonk-lookup.md:196
#: src/plonk-intro-cn/plonk-lookup.md:200
#: src/plonk-intro-cn/plonk-lookup.md:206
#: src/plonk-intro-cn/plonk-lookup.md:208
#: src/plonk-intro-cn/plonk-lookup.md:210
#: src/plonk-intro-cn/plonk-lookup.md:212
#: src/plonk-intro-cn/plonk-lookup.md:214
#: src/plonk-intro-cn/plonk-lookup.md:218
#: src/plonk-intro-cn/plonk-lookup.md:224
#: src/plonk-intro-cn/plonk-lookup.md:238
#: src/plonk-intro-cn/plonk-lookup.md:279
#: src/plonk-intro-cn/plonk-lookup.md:297
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:24
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:252
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:254
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:256
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:260
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:261
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:262
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:269
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:271
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:272
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:279
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:313
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:26
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:194
#: src/zk-snarks/3-General-Purpose-Computation.md:64
#: src/zk-snarks/3-General-Purpose-Computation.md:66
#: src/zk-snarks/3-General-Purpose-Computation.md:68
#: src/zk-snarks/3-General-Purpose-Computation.md:74
#: src/zk-snarks/3-General-Purpose-Computation.md:75
#: src/zk-snarks/3-General-Purpose-Computation.md:79
#: src/zk-snarks/3-General-Purpose-Computation.md:81
#: src/zk-snarks/3-General-Purpose-Computation.md:83
#: src/zk-snarks/3-General-Purpose-Computation.md:90
#: src/zk-snarks/3-General-Purpose-Computation.md:96
#: src/zk-snarks/3-General-Purpose-Computation.md:98
#: src/zk-snarks/3-General-Purpose-Computation.md:100
#: src/zk-snarks/3-General-Purpose-Computation.md:102
#: src/zk-snarks/3-General-Purpose-Computation.md:104
#: src/zk-snarks/3-General-Purpose-Computation.md:105
#: src/zk-snarks/3-General-Purpose-Computation.md:108
#: src/zk-snarks/3-General-Purpose-Computation.md:137
#: src/zk-snarks/3-General-Purpose-Computation.md:143
#: src/zk-snarks/3-General-Purpose-Computation.md:149
#: src/zk-snarks/3-General-Purpose-Computation.md:153
#: src/zk-snarks/3-General-Purpose-Computation.md:155
#: src/zk-snarks/3-General-Purpose-Computation.md:165
#: src/zk-snarks/3-General-Purpose-Computation.md:171
#: src/zk-snarks/3-General-Purpose-Computation.md:180
#: src/zk-snarks/3-General-Purpose-Computation.md:182
#: src/zk-snarks/3-General-Purpose-Computation.md:184
#: src/zk-snarks/4-Construction-Properties.md:49
#: src/zk-snarks/4-Construction-Properties.md:51
#: src/zk-snarks/4-Construction-Properties.md:62
#: src/zk-snarks/4-Construction-Properties.md:65
#: src/zk-snarks/4-Construction-Properties.md:67
#: src/zk-snarks/4-Construction-Properties.md:98
#: src/zk-snarks/4-Construction-Properties.md:121
#: src/zk-snarks/4-Construction-Properties.md:139
#: src/zk-snarks/4-Construction-Properties.md:155
#: src/zk-snarks/4-Construction-Properties.md:156
#: src/zk-snarks/4-Construction-Properties.md:162
#: src/zk-snarks/4-Construction-Properties.md:193
#: src/zk-snarks/4-Construction-Properties.md:199
#: src/zk-snarks/4-Construction-Properties.md:207
#: src/zk-snarks/4-Construction-Properties.md:209
#: src/zk-snarks/4-Construction-Properties.md:221
#: src/zk-snarks/4-Construction-Properties.md:233
#: src/zk-snarks/4-Construction-Properties.md:239
#: src/zk-snarks/4-Construction-Properties.md:242
#: src/zk-snarks/4-Construction-Properties.md:244
#: src/zk-snarks/4-Construction-Properties.md:245
#: src/zk-snarks/4-Construction-Properties.md:249
#: src/zk-snarks/4-Construction-Properties.md:251
#: src/zk-snarks/4-Construction-Properties.md:253
#: src/zk-snarks/4-Construction-Properties.md:263
#: src/zk-snarks/4-Construction-Properties.md:271
#: src/zk-snarks/4-Construction-Properties.md:273
#: src/zk-snarks/4-Construction-Properties.md:275
#: src/zk-snarks/4-Construction-Properties.md:277
#: src/zk-snarks/4-Construction-Properties.md:279
#: src/zk-snarks/4-Construction-Properties.md:284
#: src/zk-snarks/4-Construction-Properties.md:286
#: src/zk-snarks/4-Construction-Properties.md:289
#: src/zk-snarks/4-Construction-Properties.md:290
#: src/zk-snarks/4-Construction-Properties.md:291
#: src/zk-snarks/4-Construction-Properties.md:296
#: src/zk-snarks/4-Construction-Properties.md:298
#: src/zk-snarks/4-Construction-Properties.md:300
#: src/zk-snarks/4-Construction-Properties.md:304
#: src/zk-snarks/4-Construction-Properties.md:307
#: src/zk-snarks/4-Construction-Properties.md:313
#: src/zk-snarks/4-Construction-Properties.md:317
#: src/zk-snarks/4-Construction-Properties.md:339
#: src/zk-snarks/4-Construction-Properties.md:345
#: src/zk-snarks/4-Construction-Properties.md:349
#: src/zk-snarks/4-Construction-Properties.md:357
#: src/zk-snarks/4-Construction-Properties.md:363
#: src/zk-snarks/4-Construction-Properties.md:364
#: src/zk-snarks/4-Construction-Properties.md:368
#: src/zk-snarks/4-Construction-Properties.md:370
#: src/zk-snarks/4-Construction-Properties.md:377
#: src/zk-snarks/4-Construction-Properties.md:379
#: src/zk-snarks/4-Construction-Properties.md:381
#: src/zk-snarks/4-Construction-Properties.md:384
#: src/zk-snarks/4-Construction-Properties.md:385
#: src/zk-snarks/4-Construction-Properties.md:392
#: src/zk-snarks/4-Construction-Properties.md:394
#: src/zk-snarks/4-Construction-Properties.md:395
#: src/zk-snarks/4-Construction-Properties.md:400
#: src/zk-snarks/4-Construction-Properties.md:401
#: src/zk-snarks/4-Construction-Properties.md:405
#: src/zk-snarks/4-Construction-Properties.md:407
#: src/zk-snarks/4-Construction-Properties.md:408
#: src/zk-snarks/4-Construction-Properties.md:409
#: src/zk-snarks/4-Construction-Properties.md:419
#: src/zk-snarks/4-Construction-Properties.md:420
#: src/zk-snarks/4-Construction-Properties.md:422
#: src/zk-snarks/4-Construction-Properties.md:424
#: src/zk-snarks/4-Construction-Properties.md:428
#: src/zk-snarks/4-Construction-Properties.md:432
#: src/zk-snarks/4-Construction-Properties.md:434
#: src/zk-snarks/4-Construction-Properties.md:436
#: src/zk-snarks/4-Construction-Properties.md:438
#: src/zk-snarks/4-Construction-Properties.md:440
#: src/zk-snarks/4-Construction-Properties.md:441
#: src/zk-snarks/4-Construction-Properties.md:443
#: src/zk-snarks/5-Pinocchio-Protocol.md:45
#: src/zk-snarks/5-Pinocchio-Protocol.md:46
#: src/zk-snarks/5-Pinocchio-Protocol.md:48
#: src/zk-snarks/5-Pinocchio-Protocol.md:50
#: src/zk-snarks/5-Pinocchio-Protocol.md:52
#: src/zk-snarks/5-Pinocchio-Protocol.md:62
#: src/zk-snarks/5-Pinocchio-Protocol.md:83
#: src/zk-snarks/5-Pinocchio-Protocol.md:87
#: src/zk-snarks/5-Pinocchio-Protocol.md:89
#: src/zk-snarks/5-Pinocchio-Protocol.md:94
#: src/zk-snarks/5-Pinocchio-Protocol.md:98
#: src/zk-snarks/5-Pinocchio-Protocol.md:103
#: src/zk-snarks/5-Pinocchio-Protocol.md:106
#: src/zk-snarks/5-Pinocchio-Protocol.md:109
#: src/zk-snarks/5-Pinocchio-Protocol.md:111
#: src/zk-snarks/5-Pinocchio-Protocol.md:118
#: src/zk-snarks/5-Pinocchio-Protocol.md:142
#: src/zk-snarks/5-Pinocchio-Protocol.md:145
#: src/zk-snarks/5-Pinocchio-Protocol.md:146
#: src/zk-snarks/5-Pinocchio-Protocol.md:151
#: src/zk-snarks/5-Pinocchio-Protocol.md:152
#: src/zk-snarks/5-Pinocchio-Protocol.md:157
#: src/zk-snarks/5-Pinocchio-Protocol.md:160
#: src/zk-snarks/5-Pinocchio-Protocol.md:163
#: src/zk-snarks/5-Pinocchio-Protocol.md:165
#: src/zk-snarks/5-Pinocchio-Protocol.md:166
#: src/zk-snarks/5-Pinocchio-Protocol.md:170
#: src/zk-snarks/5-Pinocchio-Protocol.md:173
#: src/zk-snarks/5-Pinocchio-Protocol.md:188
#: src/zk-snarks/5-Pinocchio-Protocol.md:189
#: src/zk-snarks/5-Pinocchio-Protocol.md:190
#: src/zk-snarks/5-Pinocchio-Protocol.md:192
#: src/zk-snarks/5-Pinocchio-Protocol.md:195
#: src/zk-snarks/5-Pinocchio-Protocol.md:200
#: src/zk-snarks/5-Pinocchio-Protocol.md:202
#: src/zk-snarks/5-Pinocchio-Protocol.md:205
#: src/zk-snarks/5-Pinocchio-Protocol.md:207
#: src/zk-snarks/5-Pinocchio-Protocol.md:209
#: src/zk-snarks/5-Pinocchio-Protocol.md:212
#: src/zk-snarks/5-Pinocchio-Protocol.md:214
#: src/zk-snarks/5-Pinocchio-Protocol.md:215
#: src/zk-snarks/5-Pinocchio-Protocol.md:219
#: src/zk-snarks/5-Pinocchio-Protocol.md:225 src/halo2/chap-1/index.md:11
#: src/halo2/tmp/1-Simple-Example.md:152 src/halo2/tmp/1-Simple-Example.md:553
#: src/halo2/tmp/Zordle.md:80
#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:289 src/zk-everything/zk-everything-joe/Spartan.md:350 src/public
#: goods/第二章.md:17 goods/第二章.md:125 goods/第二章.md:146
#: goods/第二章.md:175
msgid "o"
msgstr "o"

#: src/zkp-intro/1/zkp-back.md:200 src/plonk-intro-cn/plonk-randomizing.md:19
#: src/plonk-intro-cn/plonk-randomizing.md:59
#: src/plonk-intro-cn/plonk-randomizing.md:61
#: src/plonk-intro-cn/plonk-randomizing.md:65
#: src/plonk-intro-cn/plonk-randomizing.md:69
#: src/plonk-intro-cn/plonk-lookup.md:125
#: src/plonk-intro-cn/plonk-lookup.md:137
#: src/plonk-intro-cn/plonk-lookup.md:139
#: src/plonk-intro-cn/plonk-lookup.md:161
#: src/plonk-intro-cn/plonk-lookup.md:163
#: src/plonk-intro-cn/plonk-lookup.md:165
#: src/plonk-intro-cn/plonk-lookup.md:169
#: src/plonk-intro-cn/plonk-lookup.md:173
#: src/plonk-intro-cn/plonk-lookup.md:175
#: src/plonk-intro-cn/plonk-lookup.md:188
#: src/plonk-intro-cn/plonk-lookup.md:196
#: src/plonk-intro-cn/plonk-lookup.md:200
#: src/plonk-intro-cn/plonk-lookup.md:206
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:126
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:194
#: src/zk-snarks/3-General-Purpose-Computation.md:41
#: src/zk-snarks/3-General-Purpose-Computation.md:42
#: src/zk-snarks/3-General-Purpose-Computation.md:64
#: src/zk-snarks/3-General-Purpose-Computation.md:66
#: src/zk-snarks/3-General-Purpose-Computation.md:68
#: src/zk-snarks/3-General-Purpose-Computation.md:74
#: src/zk-snarks/3-General-Purpose-Computation.md:75
#: src/zk-snarks/3-General-Purpose-Computation.md:79
#: src/zk-snarks/3-General-Purpose-Computation.md:81
#: src/zk-snarks/3-General-Purpose-Computation.md:83
#: src/zk-snarks/3-General-Purpose-Computation.md:90
#: src/zk-snarks/3-General-Purpose-Computation.md:96
#: src/zk-snarks/3-General-Purpose-Computation.md:97
#: src/zk-snarks/3-General-Purpose-Computation.md:98
#: src/zk-snarks/3-General-Purpose-Computation.md:100
#: src/zk-snarks/3-General-Purpose-Computation.md:102
#: src/zk-snarks/3-General-Purpose-Computation.md:105
#: src/zk-snarks/3-General-Purpose-Computation.md:108
#: src/zk-snarks/3-General-Purpose-Computation.md:143
#: src/zk-snarks/3-General-Purpose-Computation.md:149
#: src/zk-snarks/3-General-Purpose-Computation.md:153
#: src/zk-snarks/3-General-Purpose-Computation.md:155
#: src/zk-snarks/3-General-Purpose-Computation.md:161
#: src/zk-snarks/3-General-Purpose-Computation.md:165
#: src/zk-snarks/3-General-Purpose-Computation.md:171
#: src/zk-snarks/3-General-Purpose-Computation.md:180
#: src/zk-snarks/3-General-Purpose-Computation.md:182
#: src/zk-snarks/3-General-Purpose-Computation.md:184
#: src/zk-snarks/3-General-Purpose-Computation.md:215
#: src/zk-snarks/3-General-Purpose-Computation.md:216
#: src/zk-snarks/3-General-Purpose-Computation.md:231
#: src/zk-snarks/3-General-Purpose-Computation.md:242
#: src/zk-snarks/3-General-Purpose-Computation.md:244
#: src/zk-snarks/3-General-Purpose-Computation.md:248
#: src/zk-snarks/3-General-Purpose-Computation.md:249
#: src/zk-snarks/3-General-Purpose-Computation.md:250
#: src/zk-snarks/3-General-Purpose-Computation.md:251
#: src/zk-snarks/3-General-Purpose-Computation.md:252
#: src/zk-snarks/3-General-Purpose-Computation.md:256
#: src/zk-snarks/3-General-Purpose-Computation.md:257
#: src/zk-snarks/3-General-Purpose-Computation.md:264
#: src/zk-snarks/3-General-Purpose-Computation.md:266
#: src/zk-snarks/3-General-Purpose-Computation.md:271
#: src/zk-snarks/3-General-Purpose-Computation.md:276
#: src/zk-snarks/3-General-Purpose-Computation.md:278
#: src/zk-snarks/3-General-Purpose-Computation.md:279
#: src/zk-snarks/3-General-Purpose-Computation.md:280
#: src/zk-snarks/3-General-Purpose-Computation.md:284
#: src/zk-snarks/3-General-Purpose-Computation.md:295
#: src/zk-snarks/3-General-Purpose-Computation.md:319
#: src/zk-snarks/3-General-Purpose-Computation.md:320
#: src/zk-snarks/3-General-Purpose-Computation.md:326
#: src/zk-snarks/3-General-Purpose-Computation.md:331
#: src/zk-snarks/3-General-Purpose-Computation.md:340
#: src/zk-snarks/3-General-Purpose-Computation.md:347
#: src/zk-snarks/3-General-Purpose-Computation.md:349
#: src/zk-snarks/3-General-Purpose-Computation.md:350
#: src/zk-snarks/3-General-Purpose-Computation.md:351
#: src/zk-snarks/3-General-Purpose-Computation.md:356
#: src/zk-snarks/3-General-Purpose-Computation.md:358
#: src/zk-snarks/3-General-Purpose-Computation.md:360
#: src/zk-snarks/3-General-Purpose-Computation.md:366
#: src/zk-snarks/3-General-Purpose-Computation.md:379
#: src/zk-snarks/3-General-Purpose-Computation.md:381
#: src/zk-snarks/3-General-Purpose-Computation.md:384
#: src/zk-snarks/4-Construction-Properties.md:49
#: src/zk-snarks/4-Construction-Properties.md:51
#: src/zk-snarks/4-Construction-Properties.md:65
#: src/zk-snarks/4-Construction-Properties.md:67
#: src/zk-snarks/4-Construction-Properties.md:98
#: src/zk-snarks/4-Construction-Properties.md:119
#: src/zk-snarks/4-Construction-Properties.md:133
#: src/zk-snarks/4-Construction-Properties.md:134
#: src/zk-snarks/4-Construction-Properties.md:155
#: src/zk-snarks/4-Construction-Properties.md:156
#: src/zk-snarks/4-Construction-Properties.md:162
#: src/zk-snarks/4-Construction-Properties.md:164
#: src/zk-snarks/4-Construction-Properties.md:195
#: src/zk-snarks/4-Construction-Properties.md:199
#: src/zk-snarks/4-Construction-Properties.md:205
#: src/zk-snarks/4-Construction-Properties.md:207
#: src/zk-snarks/4-Construction-Properties.md:209
#: src/zk-snarks/4-Construction-Properties.md:221
#: src/zk-snarks/4-Construction-Properties.md:239
#: src/zk-snarks/4-Construction-Properties.md:242
#: src/zk-snarks/4-Construction-Properties.md:244
#: src/zk-snarks/4-Construction-Properties.md:245
#: src/zk-snarks/4-Construction-Properties.md:249
#: src/zk-snarks/4-Construction-Properties.md:251
#: src/zk-snarks/4-Construction-Properties.md:253
#: src/zk-snarks/4-Construction-Properties.md:263
#: src/zk-snarks/4-Construction-Properties.md:271
#: src/zk-snarks/4-Construction-Properties.md:273
#: src/zk-snarks/4-Construction-Properties.md:275
#: src/zk-snarks/4-Construction-Properties.md:279
#: src/zk-snarks/4-Construction-Properties.md:284
#: src/zk-snarks/4-Construction-Properties.md:286
#: src/zk-snarks/4-Construction-Properties.md:296
#: src/zk-snarks/4-Construction-Properties.md:298
#: src/zk-snarks/4-Construction-Properties.md:300
#: src/zk-snarks/4-Construction-Properties.md:304
#: src/zk-snarks/4-Construction-Properties.md:307
#: src/zk-snarks/4-Construction-Properties.md:313
#: src/zk-snarks/4-Construction-Properties.md:317
#: src/zk-snarks/4-Construction-Properties.md:318
#: src/zk-snarks/4-Construction-Properties.md:326
#: src/zk-snarks/4-Construction-Properties.md:331
#: src/zk-snarks/4-Construction-Properties.md:333
#: src/zk-snarks/4-Construction-Properties.md:335
#: src/zk-snarks/4-Construction-Properties.md:338
#: src/zk-snarks/4-Construction-Properties.md:341
#: src/zk-snarks/4-Construction-Properties.md:342
#: src/zk-snarks/4-Construction-Properties.md:345
#: src/zk-snarks/4-Construction-Properties.md:349
#: src/zk-snarks/4-Construction-Properties.md:353
#: src/zk-snarks/4-Construction-Properties.md:357
#: src/zk-snarks/4-Construction-Properties.md:363
#: src/zk-snarks/4-Construction-Properties.md:364
#: src/zk-snarks/4-Construction-Properties.md:368
#: src/zk-snarks/4-Construction-Properties.md:370
#: src/zk-snarks/4-Construction-Properties.md:374
#: src/zk-snarks/4-Construction-Properties.md:379
#: src/zk-snarks/4-Construction-Properties.md:381
#: src/zk-snarks/4-Construction-Properties.md:384
#: src/zk-snarks/4-Construction-Properties.md:385
#: src/zk-snarks/4-Construction-Properties.md:392
#: src/zk-snarks/4-Construction-Properties.md:394
#: src/zk-snarks/4-Construction-Properties.md:395
#: src/zk-snarks/4-Construction-Properties.md:400
#: src/zk-snarks/4-Construction-Properties.md:401
#: src/zk-snarks/4-Construction-Properties.md:405
#: src/zk-snarks/4-Construction-Properties.md:406
#: src/zk-snarks/4-Construction-Properties.md:407
#: src/zk-snarks/4-Construction-Properties.md:408
#: src/zk-snarks/4-Construction-Properties.md:409
#: src/zk-snarks/4-Construction-Properties.md:410
#: src/zk-snarks/4-Construction-Properties.md:419
#: src/zk-snarks/4-Construction-Properties.md:420
#: src/zk-snarks/4-Construction-Properties.md:422
#: src/zk-snarks/4-Construction-Properties.md:424
#: src/zk-snarks/4-Construction-Properties.md:428
#: src/zk-snarks/4-Construction-Properties.md:431
#: src/zk-snarks/4-Construction-Properties.md:434
#: src/zk-snarks/4-Construction-Properties.md:436
#: src/zk-snarks/4-Construction-Properties.md:438
#: src/zk-snarks/4-Construction-Properties.md:440
#: src/zk-snarks/4-Construction-Properties.md:441
#: src/zk-snarks/4-Construction-Properties.md:443
#: src/zk-snarks/5-Pinocchio-Protocol.md:45
#: src/zk-snarks/5-Pinocchio-Protocol.md:67
#: src/zk-snarks/5-Pinocchio-Protocol.md:83
#: src/zk-snarks/5-Pinocchio-Protocol.md:84
#: src/zk-snarks/5-Pinocchio-Protocol.md:87
#: src/zk-snarks/5-Pinocchio-Protocol.md:89
#: src/zk-snarks/5-Pinocchio-Protocol.md:94
#: src/zk-snarks/5-Pinocchio-Protocol.md:97
#: src/zk-snarks/5-Pinocchio-Protocol.md:102
#: src/zk-snarks/5-Pinocchio-Protocol.md:106
#: src/zk-snarks/5-Pinocchio-Protocol.md:109
#: src/zk-snarks/5-Pinocchio-Protocol.md:111
#: src/zk-snarks/5-Pinocchio-Protocol.md:139
#: src/zk-snarks/5-Pinocchio-Protocol.md:142
#: src/zk-snarks/5-Pinocchio-Protocol.md:145
#: src/zk-snarks/5-Pinocchio-Protocol.md:146
#: src/zk-snarks/5-Pinocchio-Protocol.md:147
#: src/zk-snarks/5-Pinocchio-Protocol.md:151
#: src/zk-snarks/5-Pinocchio-Protocol.md:152
#: src/zk-snarks/5-Pinocchio-Protocol.md:155
#: src/zk-snarks/5-Pinocchio-Protocol.md:157
#: src/zk-snarks/5-Pinocchio-Protocol.md:160
#: src/zk-snarks/5-Pinocchio-Protocol.md:163
#: src/zk-snarks/5-Pinocchio-Protocol.md:165
#: src/zk-snarks/5-Pinocchio-Protocol.md:166
#: src/zk-snarks/5-Pinocchio-Protocol.md:168
#: src/zk-snarks/5-Pinocchio-Protocol.md:170
#: src/zk-snarks/5-Pinocchio-Protocol.md:173
#: src/zk-snarks/5-Pinocchio-Protocol.md:188
#: src/zk-snarks/5-Pinocchio-Protocol.md:189
#: src/zk-snarks/5-Pinocchio-Protocol.md:190
#: src/zk-snarks/5-Pinocchio-Protocol.md:192
#: src/zk-snarks/5-Pinocchio-Protocol.md:195
#: src/zk-snarks/5-Pinocchio-Protocol.md:199
#: src/zk-snarks/5-Pinocchio-Protocol.md:200
#: src/zk-snarks/5-Pinocchio-Protocol.md:202
#: src/zk-snarks/5-Pinocchio-Protocol.md:204
#: src/zk-snarks/5-Pinocchio-Protocol.md:207
#: src/zk-snarks/5-Pinocchio-Protocol.md:209
#: src/zk-snarks/5-Pinocchio-Protocol.md:212
#: src/zk-snarks/5-Pinocchio-Protocol.md:214
#: src/zk-snarks/5-Pinocchio-Protocol.md:218
#: src/zk-snarks/5-Pinocchio-Protocol.md:222
#: src/zk-snarks/5-Pinocchio-Protocol.md:225
#: src/halo2/tmp/3-Fibonacci-example-2.md:189
#: src/halo2/tmp/3-Fibonacci-example-2.md:393
#: src/halo2/tmp/3-Fibonacci-example-2.md:426
#: src/halo2/tmp/4-IsZero-Check-example-3.md:127
#: src/halo2/tmp/4-IsZero-Check-example-3.md:128
#: src/halo2/tmp/9-decomposed.md:39 src/halo2/tmp/9-decomposed.md:40
#: src/halo2/tmp/9-decomposed.md:43 src/halo2/tmp/9-decomposed.md:44
#: src/halo2/tmp/9-decomposed.md:47 src/halo2/tmp/9-decomposed.md:48
#: src/halo2/tmp/9-decomposed.md:101 src/halo2/tmp/9-decomposed.md:104
#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:238 Zeroknowledge.md:239
#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:289 src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:58
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:64
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:87
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:134
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:145
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:152
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:396
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:448
#: src/zk-everything/zk-everything-joe/Hyrax.md:58
#: src/zk-everything/zk-everything-joe/Hyrax.md:64
#: src/zk-everything/zk-everything-joe/Hyrax.md:70
#: src/zk-everything/zk-everything-joe/Hyrax.md:98
#: src/zk-everything/zk-everything-joe/Hyrax.md:191
#: src/zk-everything/zk-everything-joe/Hyrax.md:269
#: src/zk-everything/zk-everything-joe/Hyrax.md:276
#: src/zk-everything/zk-everything-joe/Hyrax.md:292
#: src/zk-everything/zk-everything-joe/Hyrax.md:297
#: src/zk-everything/zk-everything-joe/Hyrax.md:302
#: src/zk-everything/zk-everything-joe/Spartan.md:23
#: src/zk-everything/zk-everything-joe/Spartan.md:24
#: src/zk-everything/zk-everything-joe/Spartan.md:25
#: src/zk-everything/zk-everything-joe/Spartan.md:26
#: src/zk-everything/zk-everything-joe/Spartan.md:110
#: src/zk-everything/zk-everything-joe/Spartan.md:117
#: src/zk-everything/zk-everything-joe/Spartan.md:118
#: src/zk-everything/zk-everything-joe/Spartan.md:122
#: src/zk-everything/zk-everything-joe/Spartan.md:236
#: src/zk-everything/zk-everything-joe/Spartan.md:334
#: src/zk-everything/zk-everything-joe/Spartan.md:339
#: src/zk-everything/zk-everything-joe/Spartan.md:343
#: src/zk-everything/zk-everything-joe/Spartan.md:344
#: src/zk-everything/zk-everything-joe/Spartan.md:346
#: src/zk-everything/zk-everything-joe/Spartan.md:347
#: src/zk-everything/zk-everything-joe/Spartan.md:350
#: src/zk-everything/zk-everything-joe/Spartan.md:353
#: src/zk-everything/zk-everything-joe/Spartan.md:355
#: src/zk-everything/zk-everything-joe/Spartan.md:359
#: src/zk-everything/zk-everything-joe/Spartan.md:360
#: src/zk-everything/zk-everything-joe/Spartan.md:361 src/Nova/SuperNova.md:12
#: src/Nova/SuperNova.md:30 src/Nova/SuperNova.md:66 src/Nova/SuperNova.md:68
#: src/public goods/第二章.md:125 goods/第二章.md:129
msgid "l"
msgstr "l"

#: src/zkp-intro/1/zkp-back.md:200 src/zkp-intro/4/zkp-rom.md:151
#: src/plonk-intro-cn/plonk-arithmetization.md:20
#: src/plonk-intro-cn/plonk-arithmetization.md:22
#: src/plonk-intro-cn/plonk-arithmetization.md:37
#: src/plonk-intro-cn/plonk-arithmetization.md:43
#: src/plonk-intro-cn/plonk-arithmetization.md:45
#: src/plonk-intro-cn/plonk-arithmetization.md:49
#: src/plonk-intro-cn/plonk-arithmetization.md:51
#: src/plonk-intro-cn/plonk-arithmetization.md:55
#: src/plonk-intro-cn/plonk-arithmetization.md:57
#: src/plonk-intro-cn/plonk-arithmetization.md:59
#: src/plonk-intro-cn/plonk-arithmetization.md:61
#: src/plonk-intro-cn/plonk-arithmetization.md:63
#: src/plonk-intro-cn/plonk-arithmetization.md:65
#: src/plonk-intro-cn/plonk-arithmetization.md:87
#: src/plonk-intro-cn/plonk-arithmetization.md:93
#: src/plonk-intro-cn/plonk-arithmetization.md:103
#: src/plonk-intro-cn/plonk-arithmetization.md:115
#: src/plonk-intro-cn/plonk-arithmetization.md:119
#: src/plonk-intro-cn/plonk-arithmetization.md:155
#: src/plonk-intro-cn/plonk-arithmetization.md:187
#: src/plonk-intro-cn/plonk-arithmetization.md:191
#: src/plonk-intro-cn/plonk-arithmetization.md:197
#: src/plonk-intro-cn/plonk-arithmetization.md:201
#: src/plonk-intro-cn/plonk-arithmetization.md:211
#: src/plonk-intro-cn/plonk-arithmetization.md:213
#: src/plonk-intro-cn/plonk-arithmetization.md:217
#: src/plonk-intro-cn/plonk-arithmetization.md:227
#: src/plonk-intro-cn/plonk-arithmetization.md:239
#: src/plonk-intro-cn/plonk-arithmetization.md:241
#: src/plonk-intro-cn/plonk-arithmetization.md:243
#: src/plonk-intro-cn/plonk-arithmetization.md:247
#: src/plonk-intro-cn/plonk-arithmetization.md:249
#: src/plonk-intro-cn/plonk-arithmetization.md:257
#: src/plonk-intro-cn/plonk-arithmetization.md:259
#: src/plonk-intro-cn/plonk-lagrange-basis.md:10
#: src/plonk-intro-cn/plonk-lagrange-basis.md:18
#: src/plonk-intro-cn/plonk-lagrange-basis.md:20
#: src/plonk-intro-cn/plonk-lagrange-basis.md:22
#: src/plonk-intro-cn/plonk-lagrange-basis.md:28
#: src/plonk-intro-cn/plonk-lagrange-basis.md:30
#: src/plonk-intro-cn/plonk-lagrange-basis.md:32
#: src/plonk-intro-cn/plonk-lagrange-basis.md:34
#: src/plonk-intro-cn/plonk-lagrange-basis.md:36
#: src/plonk-intro-cn/plonk-lagrange-basis.md:38
#: src/plonk-intro-cn/plonk-lagrange-basis.md:40
#: src/plonk-intro-cn/plonk-lagrange-basis.md:42
#: src/plonk-intro-cn/plonk-lagrange-basis.md:44
#: src/plonk-intro-cn/plonk-lagrange-basis.md:46
#: src/plonk-intro-cn/plonk-lagrange-basis.md:54
#: src/plonk-intro-cn/plonk-lagrange-basis.md:58
#: src/plonk-intro-cn/plonk-lagrange-basis.md:60
#: src/plonk-intro-cn/plonk-lagrange-basis.md:62
#: src/plonk-intro-cn/plonk-lagrange-basis.md:64
#: src/plonk-intro-cn/plonk-lagrange-basis.md:66
#: src/plonk-intro-cn/plonk-lagrange-basis.md:70
#: src/plonk-intro-cn/plonk-lagrange-basis.md:76
#: src/plonk-intro-cn/plonk-lagrange-basis.md:78
#: src/plonk-intro-cn/plonk-lagrange-basis.md:80
#: src/plonk-intro-cn/plonk-lagrange-basis.md:89
#: src/plonk-intro-cn/plonk-lagrange-basis.md:93
#: src/plonk-intro-cn/plonk-lagrange-basis.md:101
#: src/plonk-intro-cn/plonk-lagrange-basis.md:105
#: src/plonk-intro-cn/plonk-lagrange-basis.md:109
#: src/plonk-intro-cn/plonk-lagrange-basis.md:111
#: src/plonk-intro-cn/plonk-lagrange-basis.md:113
#: src/plonk-intro-cn/plonk-lagrange-basis.md:115
#: src/plonk-intro-cn/plonk-lagrange-basis.md:117
#: src/plonk-intro-cn/plonk-lagrange-basis.md:119
#: src/plonk-intro-cn/plonk-lagrange-basis.md:121
#: src/plonk-intro-cn/plonk-lagrange-basis.md:123
#: src/plonk-intro-cn/plonk-lagrange-basis.md:129
#: src/plonk-intro-cn/plonk-lagrange-basis.md:131
#: src/plonk-intro-cn/plonk-lagrange-basis.md:135
#: src/plonk-intro-cn/plonk-lagrange-basis.md:137
#: src/plonk-intro-cn/plonk-lagrange-basis.md:139
#: src/plonk-intro-cn/plonk-lagrange-basis.md:143
#: src/plonk-intro-cn/plonk-lagrange-basis.md:147
#: src/plonk-intro-cn/plonk-lagrange-basis.md:149
#: src/plonk-intro-cn/plonk-lagrange-basis.md:151
#: src/plonk-intro-cn/plonk-lagrange-basis.md:161
#: src/plonk-intro-cn/plonk-lagrange-basis.md:172
#: src/plonk-intro-cn/plonk-permutation.md:5
#: src/plonk-intro-cn/plonk-permutation.md:21
#: src/plonk-intro-cn/plonk-permutation.md:23
#: src/plonk-intro-cn/plonk-permutation.md:76
#: src/plonk-intro-cn/plonk-permutation.md:80
#: src/plonk-intro-cn/plonk-permutation.md:84
#: src/plonk-intro-cn/plonk-permutation.md:92
#: src/plonk-intro-cn/plonk-permutation.md:96
#: src/plonk-intro-cn/plonk-permutation.md:98
#: src/plonk-intro-cn/plonk-permutation.md:110
#: src/plonk-intro-cn/plonk-permutation.md:112
#: src/plonk-intro-cn/plonk-permutation.md:114
#: src/plonk-intro-cn/plonk-permutation.md:116
#: src/plonk-intro-cn/plonk-permutation.md:124
#: src/plonk-intro-cn/plonk-permutation.md:128
#: src/plonk-intro-cn/plonk-permutation.md:140
#: src/plonk-intro-cn/plonk-permutation.md:142
#: src/plonk-intro-cn/plonk-permutation.md:144
#: src/plonk-intro-cn/plonk-permutation.md:148
#: src/plonk-intro-cn/plonk-permutation.md:150
#: src/plonk-intro-cn/plonk-permutation.md:156
#: src/plonk-intro-cn/plonk-permutation.md:158
#: src/plonk-intro-cn/plonk-permutation.md:159
#: src/plonk-intro-cn/plonk-permutation.md:161
#: src/plonk-intro-cn/plonk-permutation.md:162
#: src/plonk-intro-cn/plonk-permutation.md:174
#: src/plonk-intro-cn/plonk-permutation.md:176
#: src/plonk-intro-cn/plonk-permutation.md:177
#: src/plonk-intro-cn/plonk-permutation.md:179
#: src/plonk-intro-cn/plonk-permutation.md:180
#: src/plonk-intro-cn/plonk-permutation.md:190
#: src/plonk-intro-cn/plonk-permutation.md:192
#: src/plonk-intro-cn/plonk-permutation.md:196
#: src/plonk-intro-cn/plonk-permutation.md:198
#: src/plonk-intro-cn/plonk-permutation.md:202
#: src/plonk-intro-cn/plonk-permutation.md:204
#: src/plonk-intro-cn/plonk-permutation.md:206
#: src/plonk-intro-cn/plonk-permutation.md:208
#: src/plonk-intro-cn/plonk-permutation.md:212
#: src/plonk-intro-cn/plonk-constraints.md:7
#: src/plonk-intro-cn/plonk-constraints.md:9
#: src/plonk-intro-cn/plonk-constraints.md:13
#: src/plonk-intro-cn/plonk-constraints.md:17
#: src/plonk-intro-cn/plonk-constraints.md:21
#: src/plonk-intro-cn/plonk-constraints.md:25
#: src/plonk-intro-cn/plonk-constraints.md:27
#: src/plonk-intro-cn/plonk-constraints.md:29
#: src/plonk-intro-cn/plonk-constraints.md:35
#: src/plonk-intro-cn/plonk-constraints.md:37
#: src/plonk-intro-cn/plonk-constraints.md:39
#: src/plonk-intro-cn/plonk-constraints.md:45
#: src/plonk-intro-cn/plonk-constraints.md:69
#: src/plonk-intro-cn/plonk-constraints.md:71
#: src/plonk-intro-cn/plonk-constraints.md:75
#: src/plonk-intro-cn/plonk-constraints.md:77
#: src/plonk-intro-cn/plonk-constraints.md:81
#: src/plonk-intro-cn/plonk-constraints.md:85
#: src/plonk-intro-cn/plonk-constraints.md:99
#: src/plonk-intro-cn/plonk-constraints.md:101
#: src/plonk-intro-cn/plonk-constraints.md:103
#: src/plonk-intro-cn/plonk-constraints.md:109
#: src/plonk-intro-cn/plonk-constraints.md:127
#: src/plonk-intro-cn/plonk-constraints.md:129
#: src/plonk-intro-cn/plonk-constraints.md:133
#: src/plonk-intro-cn/plonk-constraints.md:141
#: src/plonk-intro-cn/plonk-constraints.md:143
#: src/plonk-intro-cn/plonk-constraints.md:145
#: src/plonk-intro-cn/plonk-constraints.md:149
#: src/plonk-intro-cn/plonk-constraints.md:153
#: src/plonk-intro-cn/plonk-constraints.md:155
#: src/plonk-intro-cn/plonk-constraints.md:159
#: src/plonk-intro-cn/plonk-constraints.md:161
#: src/plonk-intro-cn/plonk-constraints.md:163
#: src/plonk-intro-cn/plonk-constraints.md:167
#: src/plonk-intro-cn/plonk-constraints.md:169
#: src/plonk-intro-cn/plonk-constraints.md:173
#: src/plonk-intro-cn/plonk-constraints.md:175
#: src/plonk-intro-cn/plonk-constraints.md:179
#: src/plonk-intro-cn/plonk-constraints.md:181
#: src/plonk-intro-cn/plonk-constraints.md:184
#: src/plonk-intro-cn/plonk-constraints.md:185
#: src/plonk-intro-cn/plonk-constraints.md:186
#: src/plonk-intro-cn/plonk-constraints.md:187
#: src/plonk-intro-cn/plonk-constraints.md:188
#: src/plonk-intro-cn/plonk-constraints.md:191
#: src/plonk-intro-cn/plonk-constraints.md:192
#: src/plonk-intro-cn/plonk-constraints.md:193
#: src/plonk-intro-cn/plonk-constraints.md:194
#: src/plonk-intro-cn/plonk-constraints.md:195
#: src/plonk-intro-cn/plonk-constraints.md:199
#: src/plonk-intro-cn/plonk-polycom.md:9 src/plonk-intro-cn/plonk-polycom.md:15
#: src/plonk-intro-cn/plonk-polycom.md:21
#: src/plonk-intro-cn/plonk-polycom.md:23
#: src/plonk-intro-cn/plonk-polycom.md:25
#: src/plonk-intro-cn/plonk-polycom.md:29
#: src/plonk-intro-cn/plonk-polycom.md:35
#: src/plonk-intro-cn/plonk-polycom.md:37
#: src/plonk-intro-cn/plonk-polycom.md:47
#: src/plonk-intro-cn/plonk-polycom.md:51
#: src/plonk-intro-cn/plonk-polycom.md:53
#: src/plonk-intro-cn/plonk-polycom.md:55
#: src/plonk-intro-cn/plonk-polycom.md:61
#: src/plonk-intro-cn/plonk-polycom.md:63
#: src/plonk-intro-cn/plonk-polycom.md:65
#: src/plonk-intro-cn/plonk-polycom.md:67
#: src/plonk-intro-cn/plonk-polycom.md:69
#: src/plonk-intro-cn/plonk-polycom.md:71
#: src/plonk-intro-cn/plonk-polycom.md:73
#: src/plonk-intro-cn/plonk-polycom.md:75
#: src/plonk-intro-cn/plonk-polycom.md:79
#: src/plonk-intro-cn/plonk-polycom.md:81
#: src/plonk-intro-cn/plonk-polycom.md:87
#: src/plonk-intro-cn/plonk-polycom.md:89
#: src/plonk-intro-cn/plonk-polycom.md:91
#: src/plonk-intro-cn/plonk-polycom.md:93
#: src/plonk-intro-cn/plonk-polycom.md:97
#: src/plonk-intro-cn/plonk-polycom.md:99
#: src/plonk-intro-cn/plonk-polycom.md:101
#: src/plonk-intro-cn/plonk-polycom.md:103
#: src/plonk-intro-cn/plonk-polycom.md:105
#: src/plonk-intro-cn/plonk-polycom.md:117
#: src/plonk-intro-cn/plonk-polycom.md:124
#: src/plonk-intro-cn/plonk-polycom.md:126
#: src/plonk-intro-cn/plonk-polycom.md:128
#: src/plonk-intro-cn/plonk-polycom.md:132
#: src/plonk-intro-cn/plonk-polycom.md:136
#: src/plonk-intro-cn/plonk-polycom.md:141
#: src/plonk-intro-cn/plonk-polycom.md:143
#: src/plonk-intro-cn/plonk-polycom.md:145
#: src/plonk-intro-cn/plonk-polycom.md:147
#: src/plonk-intro-cn/plonk-polycom.md:151
#: src/plonk-intro-cn/plonk-polycom.md:155
#: src/plonk-intro-cn/plonk-polycom.md:157
#: src/plonk-intro-cn/plonk-polycom.md:161
#: src/plonk-intro-cn/plonk-polycom.md:163
#: src/plonk-intro-cn/plonk-polycom.md:167
#: src/plonk-intro-cn/plonk-polycom.md:169
#: src/plonk-intro-cn/plonk-polycom.md:171
#: src/plonk-intro-cn/plonk-polycom.md:175
#: src/plonk-intro-cn/plonk-polycom.md:179
#: src/plonk-intro-cn/plonk-polycom.md:181
#: src/plonk-intro-cn/plonk-polycom.md:183
#: src/plonk-intro-cn/plonk-polycom.md:185
#: src/plonk-intro-cn/plonk-polycom.md:187
#: src/plonk-intro-cn/plonk-polycom.md:193
#: src/plonk-intro-cn/plonk-polycom.md:197
#: src/plonk-intro-cn/plonk-polycom.md:199
#: src/plonk-intro-cn/plonk-polycom.md:201
#: src/plonk-intro-cn/plonk-polycom.md:205
#: src/plonk-intro-cn/plonk-polycom.md:209
#: src/plonk-intro-cn/plonk-polycom.md:211
#: src/plonk-intro-cn/plonk-polycom.md:213
#: src/plonk-intro-cn/plonk-polycom.md:215
#: src/plonk-intro-cn/plonk-polycom.md:217
#: src/plonk-intro-cn/plonk-polycom.md:221
#: src/plonk-intro-cn/plonk-polycom.md:229
#: src/plonk-intro-cn/plonk-randomizing.md:6
#: src/plonk-intro-cn/plonk-randomizing.md:9
#: src/plonk-intro-cn/plonk-randomizing.md:17
#: src/plonk-intro-cn/plonk-randomizing.md:18
#: src/plonk-intro-cn/plonk-randomizing.md:19
#: src/plonk-intro-cn/plonk-randomizing.md:21
#: src/plonk-intro-cn/plonk-randomizing.md:31
#: src/plonk-intro-cn/plonk-randomizing.md:33
#: src/plonk-intro-cn/plonk-randomizing.md:37
#: src/plonk-intro-cn/plonk-randomizing.md:39
#: src/plonk-intro-cn/plonk-randomizing.md:41
#: src/plonk-intro-cn/plonk-randomizing.md:45
#: src/plonk-intro-cn/plonk-randomizing.md:47
#: src/plonk-intro-cn/plonk-randomizing.md:49
#: src/plonk-intro-cn/plonk-randomizing.md:51
#: src/plonk-intro-cn/plonk-randomizing.md:53
#: src/plonk-intro-cn/plonk-randomizing.md:55
#: src/plonk-intro-cn/plonk-randomizing.md:57
#: src/plonk-intro-cn/plonk-randomizing.md:59
#: src/plonk-intro-cn/plonk-randomizing.md:61
#: src/plonk-intro-cn/plonk-randomizing.md:63
#: src/plonk-intro-cn/plonk-randomizing.md:65
#: src/plonk-intro-cn/plonk-randomizing.md:69
#: src/plonk-intro-cn/plonk-randomizing.md:71
#: src/plonk-intro-cn/plonk-randomizing.md:73
#: src/plonk-intro-cn/plonk-randomizing.md:85
#: src/plonk-intro-cn/plonk-randomizing.md:86
#: src/plonk-intro-cn/plonk-randomizing.md:88
#: src/plonk-intro-cn/plonk-randomizing.md:90
#: src/plonk-intro-cn/plonk-randomizing.md:92
#: src/plonk-intro-cn/plonk-randomizing.md:93
#: src/plonk-intro-cn/plonk-randomizing.md:95
#: src/plonk-intro-cn/plonk-randomizing.md:97
#: src/plonk-intro-cn/plonk-randomizing.md:106
#: src/plonk-intro-cn/plonk-randomizing.md:121
#: src/plonk-intro-cn/plonk-randomizing.md:123
#: src/plonk-intro-cn/plonk-randomizing.md:125
#: src/plonk-intro-cn/plonk-randomizing.md:127
#: src/plonk-intro-cn/plonk-randomizing.md:129
#: src/plonk-intro-cn/plonk-randomizing.md:133
#: src/plonk-intro-cn/plonk-randomizing.md:141
#: src/plonk-intro-cn/plonk-randomizing.md:143
#: src/plonk-intro-cn/plonk-randomizing.md:145
#: src/plonk-intro-cn/plonk-randomizing.md:149
#: src/plonk-intro-cn/plonk-randomizing.md:151
#: src/plonk-intro-cn/plonk-randomizing.md:153
#: src/plonk-intro-cn/plonk-randomizing.md:155
#: src/plonk-intro-cn/plonk-randomizing.md:159
#: src/plonk-intro-cn/plonk-randomizing.md:161
#: src/plonk-intro-cn/plonk-randomizing.md:163
#: src/plonk-intro-cn/plonk-lookup.md:33 src/plonk-intro-cn/plonk-lookup.md:41
#: src/plonk-intro-cn/plonk-lookup.md:43 src/plonk-intro-cn/plonk-lookup.md:47
#: src/plonk-intro-cn/plonk-lookup.md:51 src/plonk-intro-cn/plonk-lookup.md:57
#: src/plonk-intro-cn/plonk-lookup.md:59 src/plonk-intro-cn/plonk-lookup.md:61
#: src/plonk-intro-cn/plonk-lookup.md:63 src/plonk-intro-cn/plonk-lookup.md:65
#: src/plonk-intro-cn/plonk-lookup.md:67 src/plonk-intro-cn/plonk-lookup.md:69
#: src/plonk-intro-cn/plonk-lookup.md:79 src/plonk-intro-cn/plonk-lookup.md:81
#: src/plonk-intro-cn/plonk-lookup.md:85 src/plonk-intro-cn/plonk-lookup.md:87
#: src/plonk-intro-cn/plonk-lookup.md:91 src/plonk-intro-cn/plonk-lookup.md:93
#: src/plonk-intro-cn/plonk-lookup.md:97 src/plonk-intro-cn/plonk-lookup.md:101
#: src/plonk-intro-cn/plonk-lookup.md:111
#: src/plonk-intro-cn/plonk-lookup.md:119
#: src/plonk-intro-cn/plonk-lookup.md:121
#: src/plonk-intro-cn/plonk-lookup.md:123
#: src/plonk-intro-cn/plonk-lookup.md:125
#: src/plonk-intro-cn/plonk-lookup.md:129
#: src/plonk-intro-cn/plonk-lookup.md:131
#: src/plonk-intro-cn/plonk-lookup.md:133
#: src/plonk-intro-cn/plonk-lookup.md:137
#: src/plonk-intro-cn/plonk-lookup.md:139
#: src/plonk-intro-cn/plonk-lookup.md:149
#: src/plonk-intro-cn/plonk-lookup.md:153
#: src/plonk-intro-cn/plonk-lookup.md:157
#: src/plonk-intro-cn/plonk-lookup.md:165
#: src/plonk-intro-cn/plonk-lookup.md:169
#: src/plonk-intro-cn/plonk-lookup.md:173
#: src/plonk-intro-cn/plonk-lookup.md:175
#: src/plonk-intro-cn/plonk-lookup.md:190
#: src/plonk-intro-cn/plonk-lookup.md:192
#: src/plonk-intro-cn/plonk-lookup.md:194
#: src/plonk-intro-cn/plonk-lookup.md:196
#: src/plonk-intro-cn/plonk-lookup.md:198
#: src/plonk-intro-cn/plonk-lookup.md:200
#: src/plonk-intro-cn/plonk-lookup.md:210
#: src/plonk-intro-cn/plonk-lookup.md:212
#: src/plonk-intro-cn/plonk-lookup.md:214
#: src/plonk-intro-cn/plonk-lookup.md:216
#: src/plonk-intro-cn/plonk-lookup.md:218
#: src/plonk-intro-cn/plonk-lookup.md:220
#: src/plonk-intro-cn/plonk-lookup.md:228
#: src/plonk-intro-cn/plonk-lookup.md:230
#: src/plonk-intro-cn/plonk-lookup.md:232
#: src/plonk-intro-cn/plonk-lookup.md:234
#: src/plonk-intro-cn/plonk-lookup.md:238
#: src/plonk-intro-cn/plonk-lookup.md:244
#: src/plonk-intro-cn/plonk-lookup.md:261
#: src/plonk-intro-cn/plonk-lookup.md:265
#: src/plonk-intro-cn/plonk-lookup.md:267
#: src/plonk-intro-cn/plonk-lookup.md:269
#: src/plonk-intro-cn/plonk-lookup.md:273
#: src/plonk-intro-cn/plonk-lookup.md:275
#: src/plonk-intro-cn/plonk-lookup.md:277
#: src/plonk-intro-cn/plonk-lookup.md:279
#: src/plonk-intro-cn/plonk-lookup.md:281
#: src/plonk-intro-cn/plonk-lookup.md:283
#: src/plonk-intro-cn/plonk-lookup.md:285
#: src/plonk-intro-cn/plonk-lookup.md:289
#: src/plonk-intro-cn/plonk-lookup.md:291
#: src/plonk-intro-cn/plonk-lookup.md:293
#: src/plonk-intro-cn/plonk-lookup.md:297
#: src/plonk-intro-cn/plonk-lookup.md:302
#: src/plonk-intro-cn/plonk-lookup.md:304
#: src/plonk-intro-cn/plonk-lookup.md:306
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:24
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:103
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:106
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:111
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:112
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:114
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:115
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:116
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:118
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:120
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:128
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:130
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:137
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:138
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:143
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:146
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:148
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:149
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:150
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:152
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:158
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:159
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:160
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:166
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:167
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:168
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:174
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:186
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:252
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:254
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:256
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:260
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:261
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:262
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:269
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:271
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:272
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:279
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:308
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:313
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:316
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:317
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:318
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:324
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:325
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:326
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:327
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:330
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:331
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:332
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:333
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:334
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:335
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:337
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:341
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:342
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:343
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:346
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:349
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:350
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:26
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:30
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:34
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:35
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:42
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:43
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:45
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:47
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:48
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:50
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:51
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:52
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:53
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:57
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:58
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:64
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:67
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:68
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:79
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:81
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:85
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:107
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:111
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:112
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:116
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:122
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:123
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:126
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:128
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:132
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:139
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:149
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:152
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:164
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:169
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:170
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:175
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:176
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:185
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:188
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:189
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:193
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:194
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:196
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:198
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:207
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:209
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:211
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:213
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:215
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:229
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:231
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:232
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:235
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:237
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:243
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:247
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:260
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:265
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:266
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:269
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:270
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:271
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:272
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:274
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:277
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:279
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:280
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:282
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:283
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:286
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:287
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:289
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:293
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:298
#: src/zk-snarks/3-General-Purpose-Computation.md:39
#: src/zk-snarks/3-General-Purpose-Computation.md:41
#: src/zk-snarks/3-General-Purpose-Computation.md:42
#: src/zk-snarks/3-General-Purpose-Computation.md:64
#: src/zk-snarks/3-General-Purpose-Computation.md:66
#: src/zk-snarks/3-General-Purpose-Computation.md:68
#: src/zk-snarks/3-General-Purpose-Computation.md:70
#: src/zk-snarks/3-General-Purpose-Computation.md:74
#: src/zk-snarks/3-General-Purpose-Computation.md:75
#: src/zk-snarks/3-General-Purpose-Computation.md:79
#: src/zk-snarks/3-General-Purpose-Computation.md:81
#: src/zk-snarks/3-General-Purpose-Computation.md:83
#: src/zk-snarks/3-General-Purpose-Computation.md:90
#: src/zk-snarks/3-General-Purpose-Computation.md:96
#: src/zk-snarks/3-General-Purpose-Computation.md:97
#: src/zk-snarks/3-General-Purpose-Computation.md:98
#: src/zk-snarks/3-General-Purpose-Computation.md:100
#: src/zk-snarks/3-General-Purpose-Computation.md:102
#: src/zk-snarks/3-General-Purpose-Computation.md:104
#: src/zk-snarks/3-General-Purpose-Computation.md:105
#: src/zk-snarks/3-General-Purpose-Computation.md:108
#: src/zk-snarks/3-General-Purpose-Computation.md:112
#: src/zk-snarks/3-General-Purpose-Computation.md:143
#: src/zk-snarks/3-General-Purpose-Computation.md:149
#: src/zk-snarks/3-General-Purpose-Computation.md:153
#: src/zk-snarks/3-General-Purpose-Computation.md:155
#: src/zk-snarks/3-General-Purpose-Computation.md:157
#: src/zk-snarks/3-General-Purpose-Computation.md:159
#: src/zk-snarks/3-General-Purpose-Computation.md:161
#: src/zk-snarks/3-General-Purpose-Computation.md:165
#: src/zk-snarks/3-General-Purpose-Computation.md:171
#: src/zk-snarks/3-General-Purpose-Computation.md:173
#: src/zk-snarks/3-General-Purpose-Computation.md:180
#: src/zk-snarks/3-General-Purpose-Computation.md:182
#: src/zk-snarks/3-General-Purpose-Computation.md:184
#: src/zk-snarks/3-General-Purpose-Computation.md:213
#: src/zk-snarks/3-General-Purpose-Computation.md:215
#: src/zk-snarks/3-General-Purpose-Computation.md:216
#: src/zk-snarks/3-General-Purpose-Computation.md:231
#: src/zk-snarks/3-General-Purpose-Computation.md:242
#: src/zk-snarks/3-General-Purpose-Computation.md:244
#: src/zk-snarks/3-General-Purpose-Computation.md:245
#: src/zk-snarks/3-General-Purpose-Computation.md:248
#: src/zk-snarks/3-General-Purpose-Computation.md:249
#: src/zk-snarks/3-General-Purpose-Computation.md:250
#: src/zk-snarks/3-General-Purpose-Computation.md:251
#: src/zk-snarks/3-General-Purpose-Computation.md:252
#: src/zk-snarks/3-General-Purpose-Computation.md:256
#: src/zk-snarks/3-General-Purpose-Computation.md:257
#: src/zk-snarks/3-General-Purpose-Computation.md:264
#: src/zk-snarks/3-General-Purpose-Computation.md:266
#: src/zk-snarks/3-General-Purpose-Computation.md:268
#: src/zk-snarks/3-General-Purpose-Computation.md:271
#: src/zk-snarks/3-General-Purpose-Computation.md:276
#: src/zk-snarks/3-General-Purpose-Computation.md:278
#: src/zk-snarks/3-General-Purpose-Computation.md:279
#: src/zk-snarks/3-General-Purpose-Computation.md:280
#: src/zk-snarks/3-General-Purpose-Computation.md:284
#: src/zk-snarks/3-General-Purpose-Computation.md:295
#: src/zk-snarks/3-General-Purpose-Computation.md:319
#: src/zk-snarks/3-General-Purpose-Computation.md:320
#: src/zk-snarks/3-General-Purpose-Computation.md:326
#: src/zk-snarks/3-General-Purpose-Computation.md:331
#: src/zk-snarks/3-General-Purpose-Computation.md:338
#: src/zk-snarks/3-General-Purpose-Computation.md:340
#: src/zk-snarks/3-General-Purpose-Computation.md:342
#: src/zk-snarks/3-General-Purpose-Computation.md:347
#: src/zk-snarks/3-General-Purpose-Computation.md:349
#: src/zk-snarks/3-General-Purpose-Computation.md:350
#: src/zk-snarks/3-General-Purpose-Computation.md:351
#: src/zk-snarks/3-General-Purpose-Computation.md:352
#: src/zk-snarks/3-General-Purpose-Computation.md:356
#: src/zk-snarks/3-General-Purpose-Computation.md:358
#: src/zk-snarks/3-General-Purpose-Computation.md:360
#: src/zk-snarks/3-General-Purpose-Computation.md:361
#: src/zk-snarks/3-General-Purpose-Computation.md:364
#: src/zk-snarks/3-General-Purpose-Computation.md:366
#: src/zk-snarks/3-General-Purpose-Computation.md:368
#: src/zk-snarks/3-General-Purpose-Computation.md:369
#: src/zk-snarks/3-General-Purpose-Computation.md:374
#: src/zk-snarks/3-General-Purpose-Computation.md:379
#: src/zk-snarks/3-General-Purpose-Computation.md:381
#: src/zk-snarks/3-General-Purpose-Computation.md:384
#: src/zk-snarks/4-Construction-Properties.md:62
#: src/zk-snarks/4-Construction-Properties.md:76
#: src/zk-snarks/4-Construction-Properties.md:77
#: src/zk-snarks/4-Construction-Properties.md:79
#: src/zk-snarks/4-Construction-Properties.md:83
#: src/zk-snarks/4-Construction-Properties.md:98
#: src/zk-snarks/4-Construction-Properties.md:105
#: src/zk-snarks/4-Construction-Properties.md:108
#: src/zk-snarks/4-Construction-Properties.md:112
#: src/zk-snarks/4-Construction-Properties.md:113
#: src/zk-snarks/4-Construction-Properties.md:119
#: src/zk-snarks/4-Construction-Properties.md:120
#: src/zk-snarks/4-Construction-Properties.md:121
#: src/zk-snarks/4-Construction-Properties.md:127
#: src/zk-snarks/4-Construction-Properties.md:128
#: src/zk-snarks/4-Construction-Properties.md:130
#: src/zk-snarks/4-Construction-Properties.md:133
#: src/zk-snarks/4-Construction-Properties.md:134
#: src/zk-snarks/4-Construction-Properties.md:135
#: src/zk-snarks/4-Construction-Properties.md:136
#: src/zk-snarks/4-Construction-Properties.md:137
#: src/zk-snarks/4-Construction-Properties.md:138
#: src/zk-snarks/4-Construction-Properties.md:139
#: src/zk-snarks/4-Construction-Properties.md:151
#: src/zk-snarks/4-Construction-Properties.md:155
#: src/zk-snarks/4-Construction-Properties.md:156
#: src/zk-snarks/4-Construction-Properties.md:162
#: src/zk-snarks/4-Construction-Properties.md:164
#: src/zk-snarks/4-Construction-Properties.md:170
#: src/zk-snarks/4-Construction-Properties.md:171
#: src/zk-snarks/4-Construction-Properties.md:172
#: src/zk-snarks/4-Construction-Properties.md:176
#: src/zk-snarks/4-Construction-Properties.md:178
#: src/zk-snarks/4-Construction-Properties.md:184
#: src/zk-snarks/4-Construction-Properties.md:195
#: src/zk-snarks/4-Construction-Properties.md:197
#: src/zk-snarks/4-Construction-Properties.md:199
#: src/zk-snarks/4-Construction-Properties.md:200
#: src/zk-snarks/4-Construction-Properties.md:205
#: src/zk-snarks/4-Construction-Properties.md:207
#: src/zk-snarks/4-Construction-Properties.md:209
#: src/zk-snarks/4-Construction-Properties.md:210
#: src/zk-snarks/4-Construction-Properties.md:212
#: src/zk-snarks/4-Construction-Properties.md:215
#: src/zk-snarks/4-Construction-Properties.md:217
#: src/zk-snarks/4-Construction-Properties.md:219
#: src/zk-snarks/4-Construction-Properties.md:221
#: src/zk-snarks/4-Construction-Properties.md:233
#: src/zk-snarks/4-Construction-Properties.md:234
#: src/zk-snarks/4-Construction-Properties.md:235
#: src/zk-snarks/4-Construction-Properties.md:244
#: src/zk-snarks/4-Construction-Properties.md:245
#: src/zk-snarks/4-Construction-Properties.md:249
#: src/zk-snarks/4-Construction-Properties.md:253
#: src/zk-snarks/4-Construction-Properties.md:263
#: src/zk-snarks/4-Construction-Properties.md:271
#: src/zk-snarks/4-Construction-Properties.md:273
#: src/zk-snarks/4-Construction-Properties.md:275
#: src/zk-snarks/4-Construction-Properties.md:279
#: src/zk-snarks/4-Construction-Properties.md:280
#: src/zk-snarks/4-Construction-Properties.md:282
#: src/zk-snarks/4-Construction-Properties.md:284
#: src/zk-snarks/4-Construction-Properties.md:286
#: src/zk-snarks/4-Construction-Properties.md:287
#: src/zk-snarks/4-Construction-Properties.md:290
#: src/zk-snarks/4-Construction-Properties.md:298
#: src/zk-snarks/4-Construction-Properties.md:300
#: src/zk-snarks/4-Construction-Properties.md:304
#: src/zk-snarks/4-Construction-Properties.md:306
#: src/zk-snarks/4-Construction-Properties.md:307
#: src/zk-snarks/4-Construction-Properties.md:308
#: src/zk-snarks/4-Construction-Properties.md:309
#: src/zk-snarks/4-Construction-Properties.md:313
#: src/zk-snarks/4-Construction-Properties.md:315
#: src/zk-snarks/4-Construction-Properties.md:317
#: src/zk-snarks/4-Construction-Properties.md:326
#: src/zk-snarks/4-Construction-Properties.md:331
#: src/zk-snarks/4-Construction-Properties.md:333
#: src/zk-snarks/4-Construction-Properties.md:338
#: src/zk-snarks/4-Construction-Properties.md:339
#: src/zk-snarks/4-Construction-Properties.md:340
#: src/zk-snarks/4-Construction-Properties.md:341
#: src/zk-snarks/4-Construction-Properties.md:342
#: src/zk-snarks/4-Construction-Properties.md:345
#: src/zk-snarks/4-Construction-Properties.md:349
#: src/zk-snarks/4-Construction-Properties.md:353
#: src/zk-snarks/4-Construction-Properties.md:357
#: src/zk-snarks/4-Construction-Properties.md:359
#: src/zk-snarks/4-Construction-Properties.md:363
#: src/zk-snarks/4-Construction-Properties.md:364
#: src/zk-snarks/4-Construction-Properties.md:368
#: src/zk-snarks/4-Construction-Properties.md:370
#: src/zk-snarks/4-Construction-Properties.md:374
#: src/zk-snarks/4-Construction-Properties.md:375
#: src/zk-snarks/4-Construction-Properties.md:376
#: src/zk-snarks/4-Construction-Properties.md:377
#: src/zk-snarks/4-Construction-Properties.md:379
#: src/zk-snarks/4-Construction-Properties.md:381
#: src/zk-snarks/4-Construction-Properties.md:384
#: src/zk-snarks/4-Construction-Properties.md:385
#: src/zk-snarks/4-Construction-Properties.md:391
#: src/zk-snarks/4-Construction-Properties.md:393
#: src/zk-snarks/4-Construction-Properties.md:394
#: src/zk-snarks/4-Construction-Properties.md:395
#: src/zk-snarks/4-Construction-Properties.md:397
#: src/zk-snarks/4-Construction-Properties.md:401
#: src/zk-snarks/4-Construction-Properties.md:405
#: src/zk-snarks/4-Construction-Properties.md:406
#: src/zk-snarks/4-Construction-Properties.md:407
#: src/zk-snarks/4-Construction-Properties.md:408
#: src/zk-snarks/4-Construction-Properties.md:409
#: src/zk-snarks/4-Construction-Properties.md:422
#: src/zk-snarks/4-Construction-Properties.md:424
#: src/zk-snarks/4-Construction-Properties.md:428
#: src/zk-snarks/4-Construction-Properties.md:431
#: src/zk-snarks/4-Construction-Properties.md:434
#: src/zk-snarks/4-Construction-Properties.md:436
#: src/zk-snarks/4-Construction-Properties.md:441
#: src/zk-snarks/4-Construction-Properties.md:443
#: src/zk-snarks/5-Pinocchio-Protocol.md:28
#: src/zk-snarks/5-Pinocchio-Protocol.md:32
#: src/zk-snarks/5-Pinocchio-Protocol.md:34
#: src/zk-snarks/5-Pinocchio-Protocol.md:44
#: src/zk-snarks/5-Pinocchio-Protocol.md:65
#: src/zk-snarks/5-Pinocchio-Protocol.md:67
#: src/zk-snarks/5-Pinocchio-Protocol.md:83
#: src/zk-snarks/5-Pinocchio-Protocol.md:84
#: src/zk-snarks/5-Pinocchio-Protocol.md:85
#: src/zk-snarks/5-Pinocchio-Protocol.md:87
#: src/zk-snarks/5-Pinocchio-Protocol.md:89
#: src/zk-snarks/5-Pinocchio-Protocol.md:92
#: src/zk-snarks/5-Pinocchio-Protocol.md:94
#: src/zk-snarks/5-Pinocchio-Protocol.md:97
#: src/zk-snarks/5-Pinocchio-Protocol.md:98
#: src/zk-snarks/5-Pinocchio-Protocol.md:102
#: src/zk-snarks/5-Pinocchio-Protocol.md:103
#: src/zk-snarks/5-Pinocchio-Protocol.md:106
#: src/zk-snarks/5-Pinocchio-Protocol.md:109
#: src/zk-snarks/5-Pinocchio-Protocol.md:111
#: src/zk-snarks/5-Pinocchio-Protocol.md:129
#: src/zk-snarks/5-Pinocchio-Protocol.md:131
#: src/zk-snarks/5-Pinocchio-Protocol.md:132
#: src/zk-snarks/5-Pinocchio-Protocol.md:133
#: src/zk-snarks/5-Pinocchio-Protocol.md:135
#: src/zk-snarks/5-Pinocchio-Protocol.md:136
#: src/zk-snarks/5-Pinocchio-Protocol.md:137
#: src/zk-snarks/5-Pinocchio-Protocol.md:142
#: src/zk-snarks/5-Pinocchio-Protocol.md:143
#: src/zk-snarks/5-Pinocchio-Protocol.md:145
#: src/zk-snarks/5-Pinocchio-Protocol.md:147
#: src/zk-snarks/5-Pinocchio-Protocol.md:151
#: src/zk-snarks/5-Pinocchio-Protocol.md:152
#: src/zk-snarks/5-Pinocchio-Protocol.md:154
#: src/zk-snarks/5-Pinocchio-Protocol.md:155
#: src/zk-snarks/5-Pinocchio-Protocol.md:157
#: src/zk-snarks/5-Pinocchio-Protocol.md:159
#: src/zk-snarks/5-Pinocchio-Protocol.md:160
#: src/zk-snarks/5-Pinocchio-Protocol.md:163
#: src/zk-snarks/5-Pinocchio-Protocol.md:165
#: src/zk-snarks/5-Pinocchio-Protocol.md:170
#: src/zk-snarks/5-Pinocchio-Protocol.md:173
#: src/zk-snarks/5-Pinocchio-Protocol.md:187
#: src/zk-snarks/5-Pinocchio-Protocol.md:188
#: src/zk-snarks/5-Pinocchio-Protocol.md:192
#: src/zk-snarks/5-Pinocchio-Protocol.md:195
#: src/zk-snarks/5-Pinocchio-Protocol.md:198
#: src/zk-snarks/5-Pinocchio-Protocol.md:199
#: src/zk-snarks/5-Pinocchio-Protocol.md:202
#: src/zk-snarks/5-Pinocchio-Protocol.md:204
#: src/zk-snarks/5-Pinocchio-Protocol.md:205
#: src/zk-snarks/5-Pinocchio-Protocol.md:207
#: src/zk-snarks/5-Pinocchio-Protocol.md:209
#: src/zk-snarks/5-Pinocchio-Protocol.md:212
#: src/zk-snarks/5-Pinocchio-Protocol.md:214
#: src/zk-snarks/5-Pinocchio-Protocol.md:215
#: src/zk-snarks/5-Pinocchio-Protocol.md:218
#: src/zk-snarks/5-Pinocchio-Protocol.md:222
#: src/zk-snarks/5-Pinocchio-Protocol.md:225
#: src/halo2/tmp/1-Simple-Example.md:151 src/halo2/tmp/1-Simple-Example.md:152
#: src/halo2/tmp/1-Simple-Example.md:552 src/halo2/tmp/1-Simple-Example.md:553
#: src/halo2/tmp/2-Fibonacci-example-1.md:19
#: src/halo2/tmp/3-Fibonacci-example-2.md:84
#: src/halo2/tmp/3-Fibonacci-example-2.md:269 src/halo2/tmp/9-decomposed.md:22
#: src/halo2/tmp/9-decomposed.md:30 src/halo2/tmp/9-decomposed.md:40
#: src/halo2/tmp/9-decomposed.md:42 src/halo2/tmp/9-decomposed.md:43
#: src/halo2/tmp/9-decomposed.md:46 src/halo2/tmp/9-decomposed.md:47
#: src/halo2/tmp/9-decomposed.md:53 src/halo2/tmp/9-decomposed.md:101
#: src/halo2/tmp/9-decomposed.md:106 src/halo2/tmp/9-decomposed.md:108
#: src/halo2/tmp/9-decomposed.md:139 src/halo2/tmp/9-decomposed.md:142
#: src/halo2/tmp/9-decomposed.md:216 src/halo2/tmp/Hammster.md:23
#: src/zk-everything/BabySNARK tutorial.md:33 tutorial.md:35 tutorial.md:124
#: tutorial.md:125 tutorial.md:126 tutorial.md:127 tutorial.md:129
#: tutorial.md:131 tutorial.md:140 tutorial.md:145 tutorial.md:148
#: tutorial.md:150 tutorial.md:156 tutorial.md:158 tutorial.md:163
#: tutorial.md:165 tutorial.md:168 tutorial.md:177 tutorial.md:181
#: src/zk-everything/zk-learning-miles/KZG.md:10
#: src/zk-everything/zk-learning-miles/KZG.md:12
#: src/zk-everything/zk-learning-miles/KZG.md:41
#: src/zk-everything/zk-learning-miles/KZG.md:83
#: src/zk-everything/zk-learning-miles/KZG.md:96
#: src/zk-everything/zk-learning-miles/KZG.md:106
#: src/zk-everything/zk-learning-miles/KZG.md:110
#: src/zk-everything/zk-learning-miles/KZG.md:114
#: src/zk-everything/zk-learning-miles/KZG.md:120
#: src/zk-everything/zk-learning-miles/KZG.md:142
#: src/zk-everything/zk-learning-miles/KZG.md:145
#: src/zk-everything/zk-learning-miles/KZG.md:164
#: src/zk-everything/zk-learning-miles/KZG.md:170
#: src/zk-everything/zk-learning-miles/KZG.md:183
#: src/zk-everything/zk-learning-miles/KZG.md:185
#: src/zk-everything/zk-learning-miles/KZG.md:203
#: src/zk-everything/zk-learning-miles/KZG.md:209
#: src/zk-everything/zk-learning-miles/KZG.md:211
#: src/zk-everything/zk-learning-miles/KZG.md:213
#: src/zk-everything/zk-learning-miles/KZG.md:222
#: src/zk-everything/zk-learning-miles/KZG.md:226
#: src/zk-everything/zk-learning-miles/KZG.md:246
#: src/zk-everything/zk-learning-miles/KZG.md:248
#: src/zk-everything/zk-learning-miles/KZG.md:250
#: src/zk-everything/zk-learning-miles/KZG.md:262
#: src/zk-everything/zk-learning-miles/KZG.md:270
#: src/zk-everything/zk-learning-miles/KZG.md:272
#: src/zk-everything/zk-learning-miles/KZG.md:274
#: src/zk-everything/zk-learning-miles/KZG.md:276
#: src/zk-everything/zk-learning-miles/KZG.md:317
#: src/zk-everything/zk-learning-miles/KZG.md:318
#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:42 Zeroknowledge.md:207 Zeroknowledge.md:238
#: Zeroknowledge.md:239
#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:197 SNARKs.md:198 SNARKs.md:269 SNARKs.md:270 SNARKs.md:272
#: SNARKs.md:273 SNARKs.md:284 SNARKs.md:289 SNARKs.md:296 SNARKs.md:310
#: SNARKs.md:312 SNARKs.md:316 SNARKs.md:324 SNARKs.md:354 SNARKs.md:362
#: SNARKs.md:364 SNARKs.md:370 SNARKs.md:379 SNARKs.md:383 SNARKs.md:387
#: SNARKs.md:395 SNARKs.md:403 SNARKs.md:407 SNARKs.md:408 SNARKs.md:410
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:44
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:50
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:58
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:64
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:79
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:83
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:87
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:91
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:111
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:119
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:122
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:128
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:132
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:134
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:145
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:152
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:160
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:162
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:170
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:174
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:176
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:182
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:188
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:194
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:202
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:204
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:212
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:216
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:218
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:224
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:230
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:236
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:244
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:246
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:255
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:259
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:262
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:268
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:275
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:281
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:289
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:292
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:301
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:305
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:307
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:314
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:319
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:325
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:333
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:336
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:343
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:347
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:349
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:355
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:361
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:367
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:377
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:383
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:390
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:396
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:405
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:412
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:418
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:424
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:428
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:430
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:434
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:436
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:440
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:442
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:446
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:448
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:452
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:454
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:460
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:486
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:490
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:493
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:497
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:500
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:506
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:512
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:514
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:520
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:526
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:530
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:532
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:538
#: src/zk-everything/zk-everything-joe/Hyrax.md:58
#: src/zk-everything/zk-everything-joe/Hyrax.md:64
#: src/zk-everything/zk-everything-joe/Hyrax.md:70
#: src/zk-everything/zk-everything-joe/Hyrax.md:86
#: src/zk-everything/zk-everything-joe/Hyrax.md:92
#: src/zk-everything/zk-everything-joe/Hyrax.md:98
#: src/zk-everything/zk-everything-joe/Hyrax.md:116
#: src/zk-everything/zk-everything-joe/Hyrax.md:191
#: src/zk-everything/zk-everything-joe/Hyrax.md:201
#: src/zk-everything/zk-everything-joe/Hyrax.md:203
#: src/zk-everything/zk-everything-joe/Hyrax.md:216
#: src/zk-everything/zk-everything-joe/Hyrax.md:223
#: src/zk-everything/zk-everything-joe/Hyrax.md:228
#: src/zk-everything/zk-everything-joe/Hyrax.md:245
#: src/zk-everything/zk-everything-joe/Hyrax.md:250
#: src/zk-everything/zk-everything-joe/Hyrax.md:254
#: src/zk-everything/zk-everything-joe/Hyrax.md:263
#: src/zk-everything/zk-everything-joe/Hyrax.md:292
#: src/zk-everything/zk-everything-joe/Hyrax.md:297
#: src/zk-everything/zk-everything-joe/Hyrax.md:302
#: src/zk-everything/zk-everything-joe/Hyrax.md:311
#: src/zk-everything/zk-everything-joe/Spartan.md:23
#: src/zk-everything/zk-everything-joe/Spartan.md:24
#: src/zk-everything/zk-everything-joe/Spartan.md:25
#: src/zk-everything/zk-everything-joe/Spartan.md:26
#: src/zk-everything/zk-everything-joe/Spartan.md:115
#: src/zk-everything/zk-everything-joe/Spartan.md:118
#: src/zk-everything/zk-everything-joe/Spartan.md:122
#: src/zk-everything/zk-everything-joe/Spartan.md:136
#: src/zk-everything/zk-everything-joe/Spartan.md:143
#: src/zk-everything/zk-everything-joe/Spartan.md:148
#: src/zk-everything/zk-everything-joe/Spartan.md:169
#: src/zk-everything/zk-everything-joe/Spartan.md:172
#: src/zk-everything/zk-everything-joe/Spartan.md:177
#: src/zk-everything/zk-everything-joe/Spartan.md:182
#: src/zk-everything/zk-everything-joe/Spartan.md:195
#: src/zk-everything/zk-everything-joe/Spartan.md:200
#: src/zk-everything/zk-everything-joe/Spartan.md:232
#: src/zk-everything/zk-everything-joe/Spartan.md:236
#: src/zk-everything/zk-everything-joe/Spartan.md:240
#: src/zk-everything/zk-everything-joe/Spartan.md:242
#: src/zk-everything/zk-everything-joe/Spartan.md:252
#: src/zk-everything/zk-everything-joe/Spartan.md:254
#: src/zk-everything/zk-everything-joe/Spartan.md:263
#: src/zk-everything/zk-everything-joe/Spartan.md:264
#: src/zk-everything/zk-everything-joe/Spartan.md:274
#: src/zk-everything/zk-everything-joe/Spartan.md:275
#: src/zk-everything/zk-everything-joe/Spartan.md:304
#: src/zk-everything/zk-everything-joe/Spartan.md:319
#: src/zk-everything/zk-everything-joe/Spartan.md:323
#: src/zk-everything/zk-everything-joe/Spartan.md:327
#: src/zk-everything/zk-everything-joe/Spartan.md:339
#: src/zk-everything/zk-everything-joe/Spartan.md:343
#: src/zk-everything/zk-everything-joe/Spartan.md:344
#: src/zk-everything/zk-everything-joe/Spartan.md:346
#: src/zk-everything/zk-everything-joe/Spartan.md:347
#: src/zk-everything/zk-everything-joe/Spartan.md:349
#: src/zk-everything/zk-everything-joe/Spartan.md:350
#: src/zk-everything/zk-everything-joe/Spartan.md:353
#: src/zk-everything/zk-everything-joe/Spartan.md:355
#: src/zk-everything/zk-everything-joe/Spartan.md:359
#: src/zk-everything/zk-everything-joe/Spartan.md:361
#: src/zk-everything/zk-everything-joe/Spartan.md:377
#: src/zk-everything/zk-everything-joe/Spartan.md:394
#: src/zk-everything/zk-everything-joe/Spartan.md:401
#: src/zk-everything/zk-everything-joe/Spartan.md:406
#: src/zk-everything/zk-everything-joe/Spartan.md:411
#: src/zk-everything/zk-everything-joe/Spartan.md:416
#: src/zk-everything/zk-everything-joe/Spartan.md:422
#: src/zk-everything/zk-everything-joe/Spartan.md:428
#: src/zk-everything/zk-everything-joe/Spartan.md:436
#: src/zk-everything/zk-everything-joe/Spartan.md:441
#: src/zk-everything/zk-everything-joe/Spartan.md:445
#: src/zk-everything/zk-everything-joe/Spartan.md:450
#: src/zk-everything/zk-everything-joe/Spartan.md:455
#: src/zk-everything/zk-everything-joe/Spartan.md:458 src/Nova/SuperNova.md:12
#: src/Nova/SuperNova.md:14 src/Nova/SuperNova.md:19 src/Nova/SuperNova.md:66
#: src/public goods/第二章.md:10 goods/第二章.md:33 goods/第二章.md:52
#: goods/第二章.md:54 goods/第二章.md:56 goods/第二章.md:80
#: goods/第二章.md:84 goods/第二章.md:86 goods/第二章.md:88
#: goods/第二章.md:89 goods/第二章.md:91 goods/第二章.md:97
#: goods/第二章.md:103 goods/第二章.md:147 goods/第二章.md:160
#: goods/第二章.md:162 goods/第二章.md:164 goods/第二章.md:170
#: goods/第二章.md:171 goods/第二章.md:175 goods/第二章.md:177
#: goods/4-Proving-System.md:55 goods/4-Proving-System.md:60
#: goods/4-Proving-System.md:62 goods/4-Proving-System.md:106
#: goods/4-Proving-System.md:107 goods/4-Proving-System.md:111
#: goods/4-Proving-System.md:124 goods/4-Proving-System.md:126
#: goods/4-Proving-System.md:127 goods/4-Proving-System.md:129
#: goods/4-Proving-System.md:136 goods/4-Proving-System.md:145
#: goods/4-Proving-System.md:149 goods/4-Proving-System.md:151
#: goods/4-Proving-System.md:155 goods/4-Proving-System.md:157
#: goods/4-Proving-System.md:169 goods/4-Proving-System.md:171
#: goods/4-Proving-System.md:173 goods/4-Proving-System.md:177
#: goods/4-Proving-System.md:204 goods/4-Proving-System.md:206
#: goods/4-Proving-System.md:207 goods/4-Proving-System.md:208
#: goods/4-Proving-System.md:209 src/materials/ZK-Materials.md:600
msgid "("
msgstr "("

#: src/zkp-intro/1/zkp-back.md:200
#: src/plonk-intro-cn/plonk-arithmetization.md:20
#: src/plonk-intro-cn/plonk-arithmetization.md:37
#: src/plonk-intro-cn/plonk-arithmetization.md:43
#: src/plonk-intro-cn/plonk-arithmetization.md:45
#: src/plonk-intro-cn/plonk-arithmetization.md:51
#: src/plonk-intro-cn/plonk-arithmetization.md:55
#: src/plonk-intro-cn/plonk-arithmetization.md:57
#: src/plonk-intro-cn/plonk-arithmetization.md:59
#: src/plonk-intro-cn/plonk-arithmetization.md:63
#: src/plonk-intro-cn/plonk-arithmetization.md:87
#: src/plonk-intro-cn/plonk-arithmetization.md:115
#: src/plonk-intro-cn/plonk-arithmetization.md:119
#: src/plonk-intro-cn/plonk-arithmetization.md:123
#: src/plonk-intro-cn/plonk-arithmetization.md:141
#: src/plonk-intro-cn/plonk-arithmetization.md:142
#: src/plonk-intro-cn/plonk-arithmetization.md:143
#: src/plonk-intro-cn/plonk-arithmetization.md:155
#: src/plonk-intro-cn/plonk-arithmetization.md:159
#: src/plonk-intro-cn/plonk-arithmetization.md:163
#: src/plonk-intro-cn/plonk-arithmetization.md:181
#: src/plonk-intro-cn/plonk-arithmetization.md:187
#: src/plonk-intro-cn/plonk-arithmetization.md:189
#: src/plonk-intro-cn/plonk-arithmetization.md:191
#: src/plonk-intro-cn/plonk-arithmetization.md:197
#: src/plonk-intro-cn/plonk-arithmetization.md:199
#: src/plonk-intro-cn/plonk-arithmetization.md:201
#: src/plonk-intro-cn/plonk-arithmetization.md:205
#: src/plonk-intro-cn/plonk-arithmetization.md:227
#: src/plonk-intro-cn/plonk-arithmetization.md:233
#: src/plonk-intro-cn/plonk-arithmetization.md:239
#: src/plonk-intro-cn/plonk-arithmetization.md:241
#: src/plonk-intro-cn/plonk-arithmetization.md:249
#: src/plonk-intro-cn/plonk-arithmetization.md:257
#: src/plonk-intro-cn/plonk-lagrange-basis.md:10
#: src/plonk-intro-cn/plonk-lagrange-basis.md:18
#: src/plonk-intro-cn/plonk-lagrange-basis.md:20
#: src/plonk-intro-cn/plonk-lagrange-basis.md:22
#: src/plonk-intro-cn/plonk-lagrange-basis.md:24
#: src/plonk-intro-cn/plonk-lagrange-basis.md:28
#: src/plonk-intro-cn/plonk-lagrange-basis.md:30
#: src/plonk-intro-cn/plonk-lagrange-basis.md:32
#: src/plonk-intro-cn/plonk-lagrange-basis.md:34
#: src/plonk-intro-cn/plonk-lagrange-basis.md:36
#: src/plonk-intro-cn/plonk-lagrange-basis.md:38
#: src/plonk-intro-cn/plonk-lagrange-basis.md:42
#: src/plonk-intro-cn/plonk-lagrange-basis.md:44
#: src/plonk-intro-cn/plonk-lagrange-basis.md:46
#: src/plonk-intro-cn/plonk-lagrange-basis.md:50
#: src/plonk-intro-cn/plonk-lagrange-basis.md:54
#: src/plonk-intro-cn/plonk-lagrange-basis.md:60
#: src/plonk-intro-cn/plonk-lagrange-basis.md:62
#: src/plonk-intro-cn/plonk-lagrange-basis.md:66
#: src/plonk-intro-cn/plonk-lagrange-basis.md:68
#: src/plonk-intro-cn/plonk-lagrange-basis.md:78
#: src/plonk-intro-cn/plonk-lagrange-basis.md:80
#: src/plonk-intro-cn/plonk-lagrange-basis.md:82
#: src/plonk-intro-cn/plonk-lagrange-basis.md:83
#: src/plonk-intro-cn/plonk-lagrange-basis.md:85
#: src/plonk-intro-cn/plonk-lagrange-basis.md:89
#: src/plonk-intro-cn/plonk-lagrange-basis.md:91
#: src/plonk-intro-cn/plonk-lagrange-basis.md:93
#: src/plonk-intro-cn/plonk-lagrange-basis.md:95
#: src/plonk-intro-cn/plonk-lagrange-basis.md:101
#: src/plonk-intro-cn/plonk-lagrange-basis.md:103
#: src/plonk-intro-cn/plonk-lagrange-basis.md:105
#: src/plonk-intro-cn/plonk-lagrange-basis.md:109
#: src/plonk-intro-cn/plonk-lagrange-basis.md:111
#: src/plonk-intro-cn/plonk-lagrange-basis.md:113
#: src/plonk-intro-cn/plonk-lagrange-basis.md:115
#: src/plonk-intro-cn/plonk-lagrange-basis.md:119
#: src/plonk-intro-cn/plonk-lagrange-basis.md:129
#: src/plonk-intro-cn/plonk-lagrange-basis.md:131
#: src/plonk-intro-cn/plonk-lagrange-basis.md:135
#: src/plonk-intro-cn/plonk-lagrange-basis.md:137
#: src/plonk-intro-cn/plonk-lagrange-basis.md:139
#: src/plonk-intro-cn/plonk-lagrange-basis.md:143
#: src/plonk-intro-cn/plonk-lagrange-basis.md:147
#: src/plonk-intro-cn/plonk-lagrange-basis.md:151
#: src/plonk-intro-cn/plonk-lagrange-basis.md:153
#: src/plonk-intro-cn/plonk-lagrange-basis.md:161
#: src/plonk-intro-cn/plonk-lagrange-basis.md:170
#: src/plonk-intro-cn/plonk-lagrange-basis.md:172
#: src/plonk-intro-cn/plonk-permutation.md:13
#: src/plonk-intro-cn/plonk-permutation.md:19
#: src/plonk-intro-cn/plonk-permutation.md:21
#: src/plonk-intro-cn/plonk-permutation.md:23
#: src/plonk-intro-cn/plonk-permutation.md:38
#: src/plonk-intro-cn/plonk-permutation.md:48
#: src/plonk-intro-cn/plonk-permutation.md:58
#: src/plonk-intro-cn/plonk-permutation.md:68
#: src/plonk-intro-cn/plonk-permutation.md:72
#: src/plonk-intro-cn/plonk-permutation.md:76
#: src/plonk-intro-cn/plonk-permutation.md:80
#: src/plonk-intro-cn/plonk-permutation.md:82
#: src/plonk-intro-cn/plonk-permutation.md:84
#: src/plonk-intro-cn/plonk-permutation.md:86
#: src/plonk-intro-cn/plonk-permutation.md:88
#: src/plonk-intro-cn/plonk-permutation.md:90
#: src/plonk-intro-cn/plonk-permutation.md:92
#: src/plonk-intro-cn/plonk-permutation.md:96
#: src/plonk-intro-cn/plonk-permutation.md:98
#: src/plonk-intro-cn/plonk-permutation.md:108
#: src/plonk-intro-cn/plonk-permutation.md:110
#: src/plonk-intro-cn/plonk-permutation.md:112
#: src/plonk-intro-cn/plonk-permutation.md:116
#: src/plonk-intro-cn/plonk-permutation.md:120
#: src/plonk-intro-cn/plonk-permutation.md:124
#: src/plonk-intro-cn/plonk-permutation.md:128
#: src/plonk-intro-cn/plonk-permutation.md:140
#: src/plonk-intro-cn/plonk-permutation.md:144
#: src/plonk-intro-cn/plonk-permutation.md:148
#: src/plonk-intro-cn/plonk-permutation.md:156
#: src/plonk-intro-cn/plonk-permutation.md:158
#: src/plonk-intro-cn/plonk-permutation.md:159
#: src/plonk-intro-cn/plonk-permutation.md:161
#: src/plonk-intro-cn/plonk-permutation.md:162
#: src/plonk-intro-cn/plonk-permutation.md:174
#: src/plonk-intro-cn/plonk-permutation.md:198
#: src/plonk-intro-cn/plonk-permutation.md:204
#: src/plonk-intro-cn/plonk-permutation.md:206
#: src/plonk-intro-cn/plonk-permutation.md:208
#: src/plonk-intro-cn/plonk-permutation.md:212
#: src/plonk-intro-cn/plonk-constraints.md:9
#: src/plonk-intro-cn/plonk-constraints.md:13
#: src/plonk-intro-cn/plonk-constraints.md:17
#: src/plonk-intro-cn/plonk-constraints.md:19
#: src/plonk-intro-cn/plonk-constraints.md:21
#: src/plonk-intro-cn/plonk-constraints.md:25
#: src/plonk-intro-cn/plonk-constraints.md:27
#: src/plonk-intro-cn/plonk-constraints.md:35
#: src/plonk-intro-cn/plonk-constraints.md:37
#: src/plonk-intro-cn/plonk-constraints.md:39
#: src/plonk-intro-cn/plonk-constraints.md:41
#: src/plonk-intro-cn/plonk-constraints.md:45
#: src/plonk-intro-cn/plonk-constraints.md:47
#: src/plonk-intro-cn/plonk-constraints.md:59
#: src/plonk-intro-cn/plonk-constraints.md:71
#: src/plonk-intro-cn/plonk-constraints.md:73
#: src/plonk-intro-cn/plonk-constraints.md:77
#: src/plonk-intro-cn/plonk-constraints.md:81
#: src/plonk-intro-cn/plonk-constraints.md:85
#: src/plonk-intro-cn/plonk-constraints.md:89
#: src/plonk-intro-cn/plonk-constraints.md:93
#: src/plonk-intro-cn/plonk-constraints.md:97
#: src/plonk-intro-cn/plonk-constraints.md:99
#: src/plonk-intro-cn/plonk-constraints.md:101
#: src/plonk-intro-cn/plonk-constraints.md:103
#: src/plonk-intro-cn/plonk-constraints.md:125
#: src/plonk-intro-cn/plonk-constraints.md:127
#: src/plonk-intro-cn/plonk-constraints.md:133
#: src/plonk-intro-cn/plonk-constraints.md:141
#: src/plonk-intro-cn/plonk-constraints.md:143
#: src/plonk-intro-cn/plonk-constraints.md:145
#: src/plonk-intro-cn/plonk-constraints.md:149
#: src/plonk-intro-cn/plonk-constraints.md:151
#: src/plonk-intro-cn/plonk-constraints.md:153
#: src/plonk-intro-cn/plonk-constraints.md:155
#: src/plonk-intro-cn/plonk-constraints.md:163
#: src/plonk-intro-cn/plonk-constraints.md:169
#: src/plonk-intro-cn/plonk-constraints.md:175
#: src/plonk-intro-cn/plonk-constraints.md:179
#: src/plonk-intro-cn/plonk-constraints.md:181
#: src/plonk-intro-cn/plonk-constraints.md:184
#: src/plonk-intro-cn/plonk-constraints.md:185
#: src/plonk-intro-cn/plonk-constraints.md:186
#: src/plonk-intro-cn/plonk-constraints.md:187
#: src/plonk-intro-cn/plonk-constraints.md:188
#: src/plonk-intro-cn/plonk-constraints.md:191
#: src/plonk-intro-cn/plonk-constraints.md:192
#: src/plonk-intro-cn/plonk-constraints.md:199
#: src/plonk-intro-cn/plonk-polycom.md:9 src/plonk-intro-cn/plonk-polycom.md:15
#: src/plonk-intro-cn/plonk-polycom.md:21
#: src/plonk-intro-cn/plonk-polycom.md:29
#: src/plonk-intro-cn/plonk-polycom.md:33
#: src/plonk-intro-cn/plonk-polycom.md:35
#: src/plonk-intro-cn/plonk-polycom.md:47
#: src/plonk-intro-cn/plonk-polycom.md:53
#: src/plonk-intro-cn/plonk-polycom.md:59
#: src/plonk-intro-cn/plonk-polycom.md:61
#: src/plonk-intro-cn/plonk-polycom.md:63
#: src/plonk-intro-cn/plonk-polycom.md:65
#: src/plonk-intro-cn/plonk-polycom.md:67
#: src/plonk-intro-cn/plonk-polycom.md:69
#: src/plonk-intro-cn/plonk-polycom.md:71
#: src/plonk-intro-cn/plonk-polycom.md:75
#: src/plonk-intro-cn/plonk-polycom.md:79
#: src/plonk-intro-cn/plonk-polycom.md:81
#: src/plonk-intro-cn/plonk-polycom.md:87
#: src/plonk-intro-cn/plonk-polycom.md:89
#: src/plonk-intro-cn/plonk-polycom.md:93
#: src/plonk-intro-cn/plonk-polycom.md:97
#: src/plonk-intro-cn/plonk-polycom.md:101
#: src/plonk-intro-cn/plonk-polycom.md:103
#: src/plonk-intro-cn/plonk-polycom.md:105
#: src/plonk-intro-cn/plonk-polycom.md:109
#: src/plonk-intro-cn/plonk-polycom.md:113
#: src/plonk-intro-cn/plonk-polycom.md:117
#: src/plonk-intro-cn/plonk-polycom.md:124
#: src/plonk-intro-cn/plonk-polycom.md:128
#: src/plonk-intro-cn/plonk-polycom.md:132
#: src/plonk-intro-cn/plonk-polycom.md:134
#: src/plonk-intro-cn/plonk-polycom.md:136
#: src/plonk-intro-cn/plonk-polycom.md:143
#: src/plonk-intro-cn/plonk-polycom.md:147
#: src/plonk-intro-cn/plonk-polycom.md:151
#: src/plonk-intro-cn/plonk-polycom.md:155
#: src/plonk-intro-cn/plonk-polycom.md:159
#: src/plonk-intro-cn/plonk-polycom.md:161
#: src/plonk-intro-cn/plonk-polycom.md:167
#: src/plonk-intro-cn/plonk-polycom.md:169
#: src/plonk-intro-cn/plonk-polycom.md:175
#: src/plonk-intro-cn/plonk-polycom.md:179
#: src/plonk-intro-cn/plonk-polycom.md:183
#: src/plonk-intro-cn/plonk-polycom.md:185
#: src/plonk-intro-cn/plonk-polycom.md:187
#: src/plonk-intro-cn/plonk-polycom.md:193
#: src/plonk-intro-cn/plonk-polycom.md:197
#: src/plonk-intro-cn/plonk-polycom.md:201
#: src/plonk-intro-cn/plonk-polycom.md:203
#: src/plonk-intro-cn/plonk-polycom.md:205
#: src/plonk-intro-cn/plonk-polycom.md:209
#: src/plonk-intro-cn/plonk-polycom.md:211
#: src/plonk-intro-cn/plonk-polycom.md:213
#: src/plonk-intro-cn/plonk-polycom.md:217
#: src/plonk-intro-cn/plonk-polycom.md:221
#: src/plonk-intro-cn/plonk-polycom.md:223
#: src/plonk-intro-cn/plonk-polycom.md:225
#: src/plonk-intro-cn/plonk-polycom.md:229
#: src/plonk-intro-cn/plonk-randomizing.md:15
#: src/plonk-intro-cn/plonk-randomizing.md:21
#: src/plonk-intro-cn/plonk-randomizing.md:33
#: src/plonk-intro-cn/plonk-randomizing.md:35
#: src/plonk-intro-cn/plonk-randomizing.md:39
#: src/plonk-intro-cn/plonk-randomizing.md:41
#: src/plonk-intro-cn/plonk-randomizing.md:47
#: src/plonk-intro-cn/plonk-randomizing.md:51
#: src/plonk-intro-cn/plonk-randomizing.md:57
#: src/plonk-intro-cn/plonk-randomizing.md:61
#: src/plonk-intro-cn/plonk-randomizing.md:65
#: src/plonk-intro-cn/plonk-randomizing.md:69
#: src/plonk-intro-cn/plonk-randomizing.md:73
#: src/plonk-intro-cn/plonk-randomizing.md:90
#: src/plonk-intro-cn/plonk-randomizing.md:92
#: src/plonk-intro-cn/plonk-randomizing.md:93
#: src/plonk-intro-cn/plonk-randomizing.md:97
#: src/plonk-intro-cn/plonk-randomizing.md:101
#: src/plonk-intro-cn/plonk-randomizing.md:106
#: src/plonk-intro-cn/plonk-randomizing.md:110
#: src/plonk-intro-cn/plonk-randomizing.md:112
#: src/plonk-intro-cn/plonk-randomizing.md:119
#: src/plonk-intro-cn/plonk-randomizing.md:121
#: src/plonk-intro-cn/plonk-randomizing.md:123
#: src/plonk-intro-cn/plonk-randomizing.md:125
#: src/plonk-intro-cn/plonk-randomizing.md:129
#: src/plonk-intro-cn/plonk-randomizing.md:141
#: src/plonk-intro-cn/plonk-randomizing.md:143
#: src/plonk-intro-cn/plonk-randomizing.md:145
#: src/plonk-intro-cn/plonk-randomizing.md:149
#: src/plonk-intro-cn/plonk-randomizing.md:151
#: src/plonk-intro-cn/plonk-randomizing.md:153
#: src/plonk-intro-cn/plonk-randomizing.md:155
#: src/plonk-intro-cn/plonk-randomizing.md:159
#: src/plonk-intro-cn/plonk-randomizing.md:163
#: src/plonk-intro-cn/plonk-lookup.md:41 src/plonk-intro-cn/plonk-lookup.md:43
#: src/plonk-intro-cn/plonk-lookup.md:47 src/plonk-intro-cn/plonk-lookup.md:51
#: src/plonk-intro-cn/plonk-lookup.md:55 src/plonk-intro-cn/plonk-lookup.md:59
#: src/plonk-intro-cn/plonk-lookup.md:61 src/plonk-intro-cn/plonk-lookup.md:63
#: src/plonk-intro-cn/plonk-lookup.md:67 src/plonk-intro-cn/plonk-lookup.md:69
#: src/plonk-intro-cn/plonk-lookup.md:87 src/plonk-intro-cn/plonk-lookup.md:93
#: src/plonk-intro-cn/plonk-lookup.md:101
#: src/plonk-intro-cn/plonk-lookup.md:111
#: src/plonk-intro-cn/plonk-lookup.md:113
#: src/plonk-intro-cn/plonk-lookup.md:115
#: src/plonk-intro-cn/plonk-lookup.md:117
#: src/plonk-intro-cn/plonk-lookup.md:121
#: src/plonk-intro-cn/plonk-lookup.md:123
#: src/plonk-intro-cn/plonk-lookup.md:125
#: src/plonk-intro-cn/plonk-lookup.md:127
#: src/plonk-intro-cn/plonk-lookup.md:129
#: src/plonk-intro-cn/plonk-lookup.md:131
#: src/plonk-intro-cn/plonk-lookup.md:133
#: src/plonk-intro-cn/plonk-lookup.md:135
#: src/plonk-intro-cn/plonk-lookup.md:137
#: src/plonk-intro-cn/plonk-lookup.md:139
#: src/plonk-intro-cn/plonk-lookup.md:141
#: src/plonk-intro-cn/plonk-lookup.md:145
#: src/plonk-intro-cn/plonk-lookup.md:149
#: src/plonk-intro-cn/plonk-lookup.md:153
#: src/plonk-intro-cn/plonk-lookup.md:157
#: src/plonk-intro-cn/plonk-lookup.md:163
#: src/plonk-intro-cn/plonk-lookup.md:165
#: src/plonk-intro-cn/plonk-lookup.md:169
#: src/plonk-intro-cn/plonk-lookup.md:173
#: src/plonk-intro-cn/plonk-lookup.md:175
#: src/plonk-intro-cn/plonk-lookup.md:188
#: src/plonk-intro-cn/plonk-lookup.md:190
#: src/plonk-intro-cn/plonk-lookup.md:192
#: src/plonk-intro-cn/plonk-lookup.md:196
#: src/plonk-intro-cn/plonk-lookup.md:200
#: src/plonk-intro-cn/plonk-lookup.md:210
#: src/plonk-intro-cn/plonk-lookup.md:212
#: src/plonk-intro-cn/plonk-lookup.md:214
#: src/plonk-intro-cn/plonk-lookup.md:216
#: src/plonk-intro-cn/plonk-lookup.md:218
#: src/plonk-intro-cn/plonk-lookup.md:220
#: src/plonk-intro-cn/plonk-lookup.md:224
#: src/plonk-intro-cn/plonk-lookup.md:226
#: src/plonk-intro-cn/plonk-lookup.md:228
#: src/plonk-intro-cn/plonk-lookup.md:230
#: src/plonk-intro-cn/plonk-lookup.md:234
#: src/plonk-intro-cn/plonk-lookup.md:238
#: src/plonk-intro-cn/plonk-lookup.md:244
#: src/plonk-intro-cn/plonk-lookup.md:247
#: src/plonk-intro-cn/plonk-lookup.md:251
#: src/plonk-intro-cn/plonk-lookup.md:269
#: src/plonk-intro-cn/plonk-lookup.md:273
#: src/plonk-intro-cn/plonk-lookup.md:275
#: src/plonk-intro-cn/plonk-lookup.md:277
#: src/plonk-intro-cn/plonk-lookup.md:285
#: src/plonk-intro-cn/plonk-lookup.md:289
#: src/plonk-intro-cn/plonk-lookup.md:293
#: src/plonk-intro-cn/plonk-lookup.md:297
#: src/plonk-intro-cn/plonk-lookup.md:304
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:24
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:59
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:96
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:103
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:106
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:114
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:115
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:116
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:118
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:128
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:130
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:137
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:138
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:139
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:143
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:144
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:148
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:150
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:159
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:160
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:183
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:186
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:190
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:194
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:198
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:252
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:254
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:256
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:260
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:261
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:262
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:269
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:271
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:272
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:279
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:308
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:313
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:316
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:317
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:318
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:324
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:331
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:333
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:334
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:337
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:341
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:343
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:346
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:349
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:350
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:26
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:30
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:34
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:42
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:43
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:47
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:48
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:51
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:52
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:53
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:64
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:67
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:68
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:79
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:81
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:85
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:111
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:112
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:126
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:128
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:152
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:170
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:175
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:176
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:193
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:194
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:196
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:198
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:209
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:213
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:218
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:229
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:231
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:232
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:235
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:237
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:247
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:269
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:270
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:274
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:279
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:280
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:282
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:283
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:286
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:289
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:298
#: src/zk-snarks/3-General-Purpose-Computation.md:39
#: src/zk-snarks/3-General-Purpose-Computation.md:50
#: src/zk-snarks/3-General-Purpose-Computation.md:64
#: src/zk-snarks/3-General-Purpose-Computation.md:66
#: src/zk-snarks/3-General-Purpose-Computation.md:68
#: src/zk-snarks/3-General-Purpose-Computation.md:70
#: src/zk-snarks/3-General-Purpose-Computation.md:72
#: src/zk-snarks/3-General-Purpose-Computation.md:74
#: src/zk-snarks/3-General-Purpose-Computation.md:75
#: src/zk-snarks/3-General-Purpose-Computation.md:79
#: src/zk-snarks/3-General-Purpose-Computation.md:83
#: src/zk-snarks/3-General-Purpose-Computation.md:90
#: src/zk-snarks/3-General-Purpose-Computation.md:92
#: src/zk-snarks/3-General-Purpose-Computation.md:96
#: src/zk-snarks/3-General-Purpose-Computation.md:98
#: src/zk-snarks/3-General-Purpose-Computation.md:102
#: src/zk-snarks/3-General-Purpose-Computation.md:105
#: src/zk-snarks/3-General-Purpose-Computation.md:108
#: src/zk-snarks/3-General-Purpose-Computation.md:112
#: src/zk-snarks/3-General-Purpose-Computation.md:122
#: src/zk-snarks/3-General-Purpose-Computation.md:141
#: src/zk-snarks/3-General-Purpose-Computation.md:143
#: src/zk-snarks/3-General-Purpose-Computation.md:149
#: src/zk-snarks/3-General-Purpose-Computation.md:155
#: src/zk-snarks/3-General-Purpose-Computation.md:159
#: src/zk-snarks/3-General-Purpose-Computation.md:171
#: src/zk-snarks/3-General-Purpose-Computation.md:173
#: src/zk-snarks/3-General-Purpose-Computation.md:180
#: src/zk-snarks/3-General-Purpose-Computation.md:184
#: src/zk-snarks/3-General-Purpose-Computation.md:196
#: src/zk-snarks/3-General-Purpose-Computation.md:213
#: src/zk-snarks/3-General-Purpose-Computation.md:220
#: src/zk-snarks/3-General-Purpose-Computation.md:257
#: src/zk-snarks/3-General-Purpose-Computation.md:266
#: src/zk-snarks/3-General-Purpose-Computation.md:268
#: src/zk-snarks/3-General-Purpose-Computation.md:271
#: src/zk-snarks/3-General-Purpose-Computation.md:276
#: src/zk-snarks/3-General-Purpose-Computation.md:280
#: src/zk-snarks/3-General-Purpose-Computation.md:295
#: src/zk-snarks/3-General-Purpose-Computation.md:315
#: src/zk-snarks/3-General-Purpose-Computation.md:326
#: src/zk-snarks/3-General-Purpose-Computation.md:331
#: src/zk-snarks/3-General-Purpose-Computation.md:340
#: src/zk-snarks/3-General-Purpose-Computation.md:358
#: src/zk-snarks/3-General-Purpose-Computation.md:360
#: src/zk-snarks/3-General-Purpose-Computation.md:366
#: src/zk-snarks/3-General-Purpose-Computation.md:381
#: src/zk-snarks/3-General-Purpose-Computation.md:384
#: src/zk-snarks/4-Construction-Properties.md:29
#: src/zk-snarks/4-Construction-Properties.md:46
#: src/zk-snarks/4-Construction-Properties.md:49
#: src/zk-snarks/4-Construction-Properties.md:62
#: src/zk-snarks/4-Construction-Properties.md:67
#: src/zk-snarks/4-Construction-Properties.md:76
#: src/zk-snarks/4-Construction-Properties.md:77
#: src/zk-snarks/4-Construction-Properties.md:80
#: src/zk-snarks/4-Construction-Properties.md:83
#: src/zk-snarks/4-Construction-Properties.md:85
#: src/zk-snarks/4-Construction-Properties.md:86
#: src/zk-snarks/4-Construction-Properties.md:98
#: src/zk-snarks/4-Construction-Properties.md:105
#: src/zk-snarks/4-Construction-Properties.md:108
#: src/zk-snarks/4-Construction-Properties.md:111
#: src/zk-snarks/4-Construction-Properties.md:112
#: src/zk-snarks/4-Construction-Properties.md:113
#: src/zk-snarks/4-Construction-Properties.md:119
#: src/zk-snarks/4-Construction-Properties.md:120
#: src/zk-snarks/4-Construction-Properties.md:121
#: src/zk-snarks/4-Construction-Properties.md:127
#: src/zk-snarks/4-Construction-Properties.md:128
#: src/zk-snarks/4-Construction-Properties.md:130
#: src/zk-snarks/4-Construction-Properties.md:133
#: src/zk-snarks/4-Construction-Properties.md:134
#: src/zk-snarks/4-Construction-Properties.md:135
#: src/zk-snarks/4-Construction-Properties.md:136
#: src/zk-snarks/4-Construction-Properties.md:137
#: src/zk-snarks/4-Construction-Properties.md:138
#: src/zk-snarks/4-Construction-Properties.md:139
#: src/zk-snarks/4-Construction-Properties.md:149
#: src/zk-snarks/4-Construction-Properties.md:150
#: src/zk-snarks/4-Construction-Properties.md:151
#: src/zk-snarks/4-Construction-Properties.md:155
#: src/zk-snarks/4-Construction-Properties.md:168
#: src/zk-snarks/4-Construction-Properties.md:170
#: src/zk-snarks/4-Construction-Properties.md:171
#: src/zk-snarks/4-Construction-Properties.md:176
#: src/zk-snarks/4-Construction-Properties.md:178
#: src/zk-snarks/4-Construction-Properties.md:184
#: src/zk-snarks/4-Construction-Properties.md:195
#: src/zk-snarks/4-Construction-Properties.md:197
#: src/zk-snarks/4-Construction-Properties.md:205
#: src/zk-snarks/4-Construction-Properties.md:207
#: src/zk-snarks/4-Construction-Properties.md:209
#: src/zk-snarks/4-Construction-Properties.md:217
#: src/zk-snarks/4-Construction-Properties.md:219
#: src/zk-snarks/4-Construction-Properties.md:233
#: src/zk-snarks/4-Construction-Properties.md:234
#: src/zk-snarks/4-Construction-Properties.md:235
#: src/zk-snarks/4-Construction-Properties.md:249
#: src/zk-snarks/4-Construction-Properties.md:277
#: src/zk-snarks/4-Construction-Properties.md:279
#: src/zk-snarks/4-Construction-Properties.md:286
#: src/zk-snarks/4-Construction-Properties.md:287
#: src/zk-snarks/4-Construction-Properties.md:289
#: src/zk-snarks/4-Construction-Properties.md:290
#: src/zk-snarks/4-Construction-Properties.md:291
#: src/zk-snarks/4-Construction-Properties.md:304
#: src/zk-snarks/4-Construction-Properties.md:307
#: src/zk-snarks/4-Construction-Properties.md:313
#: src/zk-snarks/4-Construction-Properties.md:315
#: src/zk-snarks/4-Construction-Properties.md:318
#: src/zk-snarks/4-Construction-Properties.md:326
#: src/zk-snarks/4-Construction-Properties.md:330
#: src/zk-snarks/4-Construction-Properties.md:331
#: src/zk-snarks/4-Construction-Properties.md:333
#: src/zk-snarks/4-Construction-Properties.md:338
#: src/zk-snarks/4-Construction-Properties.md:339
#: src/zk-snarks/4-Construction-Properties.md:340
#: src/zk-snarks/4-Construction-Properties.md:341
#: src/zk-snarks/4-Construction-Properties.md:342
#: src/zk-snarks/4-Construction-Properties.md:345
#: src/zk-snarks/4-Construction-Properties.md:353
#: src/zk-snarks/4-Construction-Properties.md:357
#: src/zk-snarks/4-Construction-Properties.md:359
#: src/zk-snarks/4-Construction-Properties.md:365
#: src/zk-snarks/4-Construction-Properties.md:368
#: src/zk-snarks/4-Construction-Properties.md:370
#: src/zk-snarks/4-Construction-Properties.md:371
#: src/zk-snarks/4-Construction-Properties.md:374
#: src/zk-snarks/4-Construction-Properties.md:375
#: src/zk-snarks/4-Construction-Properties.md:376
#: src/zk-snarks/4-Construction-Properties.md:377
#: src/zk-snarks/4-Construction-Properties.md:379
#: src/zk-snarks/4-Construction-Properties.md:381
#: src/zk-snarks/4-Construction-Properties.md:384
#: src/zk-snarks/4-Construction-Properties.md:394
#: src/zk-snarks/4-Construction-Properties.md:395
#: src/zk-snarks/4-Construction-Properties.md:405
#: src/zk-snarks/4-Construction-Properties.md:406
#: src/zk-snarks/4-Construction-Properties.md:408
#: src/zk-snarks/4-Construction-Properties.md:409
#: src/zk-snarks/4-Construction-Properties.md:419
#: src/zk-snarks/4-Construction-Properties.md:420
#: src/zk-snarks/4-Construction-Properties.md:428
#: src/zk-snarks/4-Construction-Properties.md:431
#: src/zk-snarks/4-Construction-Properties.md:434
#: src/zk-snarks/4-Construction-Properties.md:436
#: src/zk-snarks/4-Construction-Properties.md:443
#: src/zk-snarks/5-Pinocchio-Protocol.md:26
#: src/zk-snarks/5-Pinocchio-Protocol.md:28
#: src/zk-snarks/5-Pinocchio-Protocol.md:29
#: src/zk-snarks/5-Pinocchio-Protocol.md:31
#: src/zk-snarks/5-Pinocchio-Protocol.md:32
#: src/zk-snarks/5-Pinocchio-Protocol.md:34
#: src/zk-snarks/5-Pinocchio-Protocol.md:45
#: src/zk-snarks/5-Pinocchio-Protocol.md:52
#: src/zk-snarks/5-Pinocchio-Protocol.md:67
#: src/zk-snarks/5-Pinocchio-Protocol.md:83
#: src/zk-snarks/5-Pinocchio-Protocol.md:84
#: src/zk-snarks/5-Pinocchio-Protocol.md:92
#: src/zk-snarks/5-Pinocchio-Protocol.md:97
#: src/zk-snarks/5-Pinocchio-Protocol.md:102
#: src/zk-snarks/5-Pinocchio-Protocol.md:106
#: src/zk-snarks/5-Pinocchio-Protocol.md:109
#: src/zk-snarks/5-Pinocchio-Protocol.md:118
#: src/zk-snarks/5-Pinocchio-Protocol.md:129
#: src/zk-snarks/5-Pinocchio-Protocol.md:131
#: src/zk-snarks/5-Pinocchio-Protocol.md:133
#: src/zk-snarks/5-Pinocchio-Protocol.md:135
#: src/zk-snarks/5-Pinocchio-Protocol.md:136
#: src/zk-snarks/5-Pinocchio-Protocol.md:137
#: src/zk-snarks/5-Pinocchio-Protocol.md:142
#: src/zk-snarks/5-Pinocchio-Protocol.md:145
#: src/zk-snarks/5-Pinocchio-Protocol.md:146
#: src/zk-snarks/5-Pinocchio-Protocol.md:147
#: src/zk-snarks/5-Pinocchio-Protocol.md:151
#: src/zk-snarks/5-Pinocchio-Protocol.md:152
#: src/zk-snarks/5-Pinocchio-Protocol.md:157
#: src/zk-snarks/5-Pinocchio-Protocol.md:160
#: src/zk-snarks/5-Pinocchio-Protocol.md:163
#: src/zk-snarks/5-Pinocchio-Protocol.md:165
#: src/zk-snarks/5-Pinocchio-Protocol.md:168
#: src/zk-snarks/5-Pinocchio-Protocol.md:170
#: src/zk-snarks/5-Pinocchio-Protocol.md:187
#: src/zk-snarks/5-Pinocchio-Protocol.md:190
#: src/zk-snarks/5-Pinocchio-Protocol.md:199
#: src/zk-snarks/5-Pinocchio-Protocol.md:202
#: src/zk-snarks/5-Pinocchio-Protocol.md:204
#: src/zk-snarks/5-Pinocchio-Protocol.md:207
#: src/zk-snarks/5-Pinocchio-Protocol.md:214
#: src/zk-snarks/5-Pinocchio-Protocol.md:218
#: src/zk-snarks/5-Pinocchio-Protocol.md:222
#: src/zk-snarks/5-Pinocchio-Protocol.md:225 src/halo2/chap-1/index.md:11
#: src/halo2/tmp/halo2-learning-materials.md:62
#: src/halo2/tmp/1-Simple-Example.md:41 src/halo2/tmp/1-Simple-Example.md:439
#: src/halo2/tmp/2-Fibonacci-example-1.md:19
#: src/halo2/tmp/3-Fibonacci-example-2.md:84
#: src/halo2/tmp/3-Fibonacci-example-2.md:269
#: src/halo2/tmp/4-IsZero-Check-example-3.md:127
#: src/halo2/tmp/9-decomposed.md:21 src/halo2/tmp/9-decomposed.md:22
#: src/halo2/tmp/9-decomposed.md:26 src/halo2/tmp/9-decomposed.md:27
#: src/halo2/tmp/9-decomposed.md:29 src/halo2/tmp/9-decomposed.md:30
#: src/halo2/tmp/9-decomposed.md:37 src/halo2/tmp/9-decomposed.md:39
#: src/halo2/tmp/9-decomposed.md:40 src/halo2/tmp/9-decomposed.md:42
#: src/halo2/tmp/9-decomposed.md:43 src/halo2/tmp/9-decomposed.md:44
#: src/halo2/tmp/9-decomposed.md:46 src/halo2/tmp/9-decomposed.md:47
#: src/halo2/tmp/9-decomposed.md:48 src/halo2/tmp/9-decomposed.md:53
#: src/halo2/tmp/9-decomposed.md:99 src/halo2/tmp/9-decomposed.md:101
#: src/halo2/tmp/9-decomposed.md:104 src/halo2/tmp/9-decomposed.md:106
#: src/halo2/tmp/9-decomposed.md:108 src/halo2/tmp/9-decomposed.md:130
#: src/halo2/tmp/9-decomposed.md:139 src/halo2/tmp/9-decomposed.md:142
#: src/halo2/tmp/9-decomposed.md:216 src/zk-everything/BabySNARK tutorial.md:33
#: tutorial.md:35 tutorial.md:38 tutorial.md:124 tutorial.md:125
#: tutorial.md:126 tutorial.md:129 tutorial.md:131 tutorial.md:140
#: tutorial.md:145 tutorial.md:148 tutorial.md:150 tutorial.md:156
#: tutorial.md:163 tutorial.md:165 tutorial.md:168 tutorial.md:172
#: tutorial.md:177 tutorial.md:181
#: src/zk-everything/zk-learning-miles/KZG.md:10
#: src/zk-everything/zk-learning-miles/KZG.md:12
#: src/zk-everything/zk-learning-miles/KZG.md:96
#: src/zk-everything/zk-learning-miles/KZG.md:106
#: src/zk-everything/zk-learning-miles/KZG.md:110
#: src/zk-everything/zk-learning-miles/KZG.md:114
#: src/zk-everything/zk-learning-miles/KZG.md:120
#: src/zk-everything/zk-learning-miles/KZG.md:142
#: src/zk-everything/zk-learning-miles/KZG.md:145
#: src/zk-everything/zk-learning-miles/KZG.md:170
#: src/zk-everything/zk-learning-miles/KZG.md:183
#: src/zk-everything/zk-learning-miles/KZG.md:185
#: src/zk-everything/zk-learning-miles/KZG.md:199
#: src/zk-everything/zk-learning-miles/KZG.md:203
#: src/zk-everything/zk-learning-miles/KZG.md:205
#: src/zk-everything/zk-learning-miles/KZG.md:207
#: src/zk-everything/zk-learning-miles/KZG.md:209
#: src/zk-everything/zk-learning-miles/KZG.md:211
#: src/zk-everything/zk-learning-miles/KZG.md:213
#: src/zk-everything/zk-learning-miles/KZG.md:222
#: src/zk-everything/zk-learning-miles/KZG.md:226
#: src/zk-everything/zk-learning-miles/KZG.md:246
#: src/zk-everything/zk-learning-miles/KZG.md:248
#: src/zk-everything/zk-learning-miles/KZG.md:250
#: src/zk-everything/zk-learning-miles/KZG.md:270
#: src/zk-everything/zk-learning-miles/KZG.md:272
#: src/zk-everything/zk-learning-miles/KZG.md:274
#: src/zk-everything/zk-learning-miles/KZG.md:276
#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:42 Zeroknowledge.md:238 Zeroknowledge.md:239
#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:147 SNARKs.md:272 SNARKs.md:273 SNARKs.md:296 SNARKs.md:302
#: SNARKs.md:312 SNARKs.md:316 SNARKs.md:320 SNARKs.md:324 SNARKs.md:352
#: SNARKs.md:354 SNARKs.md:364 SNARKs.md:369 SNARKs.md:370 SNARKs.md:371
#: SNARKs.md:373 SNARKs.md:374 SNARKs.md:379 SNARKs.md:383 SNARKs.md:387
#: SNARKs.md:395 SNARKs.md:403 SNARKs.md:407 SNARKs.md:408 SNARKs.md:410
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:44
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:50
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:58
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:64
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:101
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:119
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:128
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:132
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:134
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:145
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:152
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:170
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:176
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:182
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:188
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:192
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:194
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:202
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:212
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:218
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:224
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:230
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:234
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:236
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:244
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:255
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:262
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:268
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:275
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:279
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:281
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:289
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:301
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:307
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:314
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:319
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:323
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:325
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:333
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:343
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:349
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:355
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:361
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:365
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:367
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:377
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:383
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:390
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:396
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:405
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:412
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:418
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:424
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:430
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:436
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:442
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:448
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:454
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:460
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:486
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:490
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:493
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:500
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:504
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:506
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:514
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:526
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:532
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:538
#: src/zk-everything/zk-everything-joe/Hyrax.md:48
#: src/zk-everything/zk-everything-joe/Hyrax.md:58
#: src/zk-everything/zk-everything-joe/Hyrax.md:64
#: src/zk-everything/zk-everything-joe/Hyrax.md:70
#: src/zk-everything/zk-everything-joe/Hyrax.md:80
#: src/zk-everything/zk-everything-joe/Hyrax.md:86
#: src/zk-everything/zk-everything-joe/Hyrax.md:92
#: src/zk-everything/zk-everything-joe/Hyrax.md:98
#: src/zk-everything/zk-everything-joe/Hyrax.md:102
#: src/zk-everything/zk-everything-joe/Hyrax.md:108
#: src/zk-everything/zk-everything-joe/Hyrax.md:116
#: src/zk-everything/zk-everything-joe/Hyrax.md:122
#: src/zk-everything/zk-everything-joe/Hyrax.md:133
#: src/zk-everything/zk-everything-joe/Hyrax.md:140
#: src/zk-everything/zk-everything-joe/Hyrax.md:147
#: src/zk-everything/zk-everything-joe/Hyrax.md:156
#: src/zk-everything/zk-everything-joe/Hyrax.md:162
#: src/zk-everything/zk-everything-joe/Hyrax.md:168
#: src/zk-everything/zk-everything-joe/Hyrax.md:173
#: src/zk-everything/zk-everything-joe/Hyrax.md:181
#: src/zk-everything/zk-everything-joe/Hyrax.md:191
#: src/zk-everything/zk-everything-joe/Hyrax.md:195
#: src/zk-everything/zk-everything-joe/Hyrax.md:198
#: src/zk-everything/zk-everything-joe/Hyrax.md:201
#: src/zk-everything/zk-everything-joe/Hyrax.md:203
#: src/zk-everything/zk-everything-joe/Hyrax.md:207
#: src/zk-everything/zk-everything-joe/Hyrax.md:208
#: src/zk-everything/zk-everything-joe/Hyrax.md:214
#: src/zk-everything/zk-everything-joe/Hyrax.md:216
#: src/zk-everything/zk-everything-joe/Hyrax.md:223
#: src/zk-everything/zk-everything-joe/Hyrax.md:228
#: src/zk-everything/zk-everything-joe/Hyrax.md:245
#: src/zk-everything/zk-everything-joe/Hyrax.md:250
#: src/zk-everything/zk-everything-joe/Hyrax.md:269
#: src/zk-everything/zk-everything-joe/Hyrax.md:277
#: src/zk-everything/zk-everything-joe/Hyrax.md:282
#: src/zk-everything/zk-everything-joe/Hyrax.md:292
#: src/zk-everything/zk-everything-joe/Hyrax.md:297
#: src/zk-everything/zk-everything-joe/Hyrax.md:302
#: src/zk-everything/zk-everything-joe/Hyrax.md:310
#: src/zk-everything/zk-everything-joe/Hyrax.md:311
#: src/zk-everything/zk-everything-joe/Hyrax.md:314
#: src/zk-everything/zk-everything-joe/Hyrax.md:324
#: src/zk-everything/zk-everything-joe/Spartan.md:110
#: src/zk-everything/zk-everything-joe/Spartan.md:115
#: src/zk-everything/zk-everything-joe/Spartan.md:118
#: src/zk-everything/zk-everything-joe/Spartan.md:122
#: src/zk-everything/zk-everything-joe/Spartan.md:126
#: src/zk-everything/zk-everything-joe/Spartan.md:136
#: src/zk-everything/zk-everything-joe/Spartan.md:142
#: src/zk-everything/zk-everything-joe/Spartan.md:143
#: src/zk-everything/zk-everything-joe/Spartan.md:147
#: src/zk-everything/zk-everything-joe/Spartan.md:148
#: src/zk-everything/zk-everything-joe/Spartan.md:154
#: src/zk-everything/zk-everything-joe/Spartan.md:155
#: src/zk-everything/zk-everything-joe/Spartan.md:166
#: src/zk-everything/zk-everything-joe/Spartan.md:169
#: src/zk-everything/zk-everything-joe/Spartan.md:172
#: src/zk-everything/zk-everything-joe/Spartan.md:177
#: src/zk-everything/zk-everything-joe/Spartan.md:182
#: src/zk-everything/zk-everything-joe/Spartan.md:195
#: src/zk-everything/zk-everything-joe/Spartan.md:200
#: src/zk-everything/zk-everything-joe/Spartan.md:232
#: src/zk-everything/zk-everything-joe/Spartan.md:242
#: src/zk-everything/zk-everything-joe/Spartan.md:254
#: src/zk-everything/zk-everything-joe/Spartan.md:264
#: src/zk-everything/zk-everything-joe/Spartan.md:275
#: src/zk-everything/zk-everything-joe/Spartan.md:309
#: src/zk-everything/zk-everything-joe/Spartan.md:312
#: src/zk-everything/zk-everything-joe/Spartan.md:319
#: src/zk-everything/zk-everything-joe/Spartan.md:323
#: src/zk-everything/zk-everything-joe/Spartan.md:334
#: src/zk-everything/zk-everything-joe/Spartan.md:339
#: src/zk-everything/zk-everything-joe/Spartan.md:343
#: src/zk-everything/zk-everything-joe/Spartan.md:344
#: src/zk-everything/zk-everything-joe/Spartan.md:346
#: src/zk-everything/zk-everything-joe/Spartan.md:349
#: src/zk-everything/zk-everything-joe/Spartan.md:350
#: src/zk-everything/zk-everything-joe/Spartan.md:353
#: src/zk-everything/zk-everything-joe/Spartan.md:355
#: src/zk-everything/zk-everything-joe/Spartan.md:360
#: src/zk-everything/zk-everything-joe/Spartan.md:377
#: src/zk-everything/zk-everything-joe/Spartan.md:382
#: src/zk-everything/zk-everything-joe/Spartan.md:389
#: src/zk-everything/zk-everything-joe/Spartan.md:394
#: src/zk-everything/zk-everything-joe/Spartan.md:401
#: src/zk-everything/zk-everything-joe/Spartan.md:406
#: src/zk-everything/zk-everything-joe/Spartan.md:411
#: src/zk-everything/zk-everything-joe/Spartan.md:415
#: src/zk-everything/zk-everything-joe/Spartan.md:416
#: src/zk-everything/zk-everything-joe/Spartan.md:422
#: src/zk-everything/zk-everything-joe/Spartan.md:428
#: src/zk-everything/zk-everything-joe/Spartan.md:436
#: src/zk-everything/zk-everything-joe/Spartan.md:441
#: src/zk-everything/zk-everything-joe/Spartan.md:450
#: src/zk-everything/zk-everything-joe/Spartan.md:455 src/Nova/SuperNova.md:12
#: src/Nova/SuperNova.md:14 src/Nova/SuperNova.md:19 src/Nova/SuperNova.md:30
#: src/Nova/SuperNova.md:66 src/Nova/SuperNova.md:68 src/public
#: goods/第二章.md:10 goods/第二章.md:16 goods/第二章.md:26
#: goods/第二章.md:33 goods/第二章.md:50 goods/第二章.md:52
#: goods/第二章.md:54 goods/第二章.md:56 goods/第二章.md:58
#: goods/第二章.md:59 goods/第二章.md:60 goods/第二章.md:61
#: goods/第二章.md:65 goods/第二章.md:70 goods/第二章.md:72
#: goods/第二章.md:74 goods/第二章.md:80 goods/第二章.md:83
#: goods/第二章.md:84 goods/第二章.md:86 goods/第二章.md:88
#: goods/第二章.md:89 goods/第二章.md:91 goods/第二章.md:97
#: goods/第二章.md:147 goods/第二章.md:156 goods/第二章.md:160
#: goods/第二章.md:162 goods/第二章.md:164 goods/第二章.md:170
#: goods/第二章.md:171 goods/第二章.md:177 goods/4-Proving-System.md:53
#: goods/4-Proving-System.md:55 goods/4-Proving-System.md:56
#: goods/4-Proving-System.md:58 goods/4-Proving-System.md:60
#: goods/4-Proving-System.md:62 goods/4-Proving-System.md:105
#: goods/4-Proving-System.md:106 goods/4-Proving-System.md:120
#: goods/4-Proving-System.md:122 goods/4-Proving-System.md:125
#: goods/4-Proving-System.md:126 goods/4-Proving-System.md:151
#: goods/4-Proving-System.md:155 goods/4-Proving-System.md:157
#: goods/4-Proving-System.md:167 goods/4-Proving-System.md:169
#: goods/4-Proving-System.md:204
msgid "="
msgstr "="

#: src/zkp-intro/1/zkp-back.md:200
#: src/plonk-intro-cn/plonk-arithmetization.md:35
#: src/plonk-intro-cn/plonk-arithmetization.md:37
#: src/plonk-intro-cn/plonk-arithmetization.md:41
#: src/plonk-intro-cn/plonk-arithmetization.md:43
#: src/plonk-intro-cn/plonk-arithmetization.md:45
#: src/plonk-intro-cn/plonk-arithmetization.md:47
#: src/plonk-intro-cn/plonk-arithmetization.md:61
#: src/plonk-intro-cn/plonk-arithmetization.md:63
#: src/plonk-intro-cn/plonk-arithmetization.md:65
#: src/plonk-intro-cn/plonk-arithmetization.md:101
#: src/plonk-intro-cn/plonk-arithmetization.md:105
#: src/plonk-intro-cn/plonk-arithmetization.md:109
#: src/plonk-intro-cn/plonk-arithmetization.md:151
#: src/plonk-intro-cn/plonk-arithmetization.md:155
#: src/plonk-intro-cn/plonk-arithmetization.md:159
#: src/plonk-intro-cn/plonk-arithmetization.md:163
#: src/plonk-intro-cn/plonk-arithmetization.md:187
#: src/plonk-intro-cn/plonk-arithmetization.md:213
#: src/plonk-intro-cn/plonk-arithmetization.md:231
#: src/plonk-intro-cn/plonk-arithmetization.md:237
#: src/plonk-intro-cn/plonk-arithmetization.md:239
#: src/plonk-intro-cn/plonk-arithmetization.md:241
#: src/plonk-intro-cn/plonk-arithmetization.md:249
#: src/plonk-intro-cn/plonk-arithmetization.md:257
#: src/plonk-intro-cn/plonk-lagrange-basis.md:18
#: src/plonk-intro-cn/plonk-lagrange-basis.md:28
#: src/plonk-intro-cn/plonk-lagrange-basis.md:30
#: src/plonk-intro-cn/plonk-lagrange-basis.md:32
#: src/plonk-intro-cn/plonk-lagrange-basis.md:34
#: src/plonk-intro-cn/plonk-lagrange-basis.md:36
#: src/plonk-intro-cn/plonk-lagrange-basis.md:38
#: src/plonk-intro-cn/plonk-lagrange-basis.md:42
#: src/plonk-intro-cn/plonk-lagrange-basis.md:60
#: src/plonk-intro-cn/plonk-lagrange-basis.md:62
#: src/plonk-intro-cn/plonk-lagrange-basis.md:78
#: src/plonk-intro-cn/plonk-lagrange-basis.md:85
#: src/plonk-intro-cn/plonk-lagrange-basis.md:89
#: src/plonk-intro-cn/plonk-lagrange-basis.md:93
#: src/plonk-intro-cn/plonk-lagrange-basis.md:95
#: src/plonk-intro-cn/plonk-lagrange-basis.md:101
#: src/plonk-intro-cn/plonk-lagrange-basis.md:105
#: src/plonk-intro-cn/plonk-lagrange-basis.md:109
#: src/plonk-intro-cn/plonk-lagrange-basis.md:115
#: src/plonk-intro-cn/plonk-lagrange-basis.md:119
#: src/plonk-intro-cn/plonk-lagrange-basis.md:121
#: src/plonk-intro-cn/plonk-lagrange-basis.md:131
#: src/plonk-intro-cn/plonk-lagrange-basis.md:135
#: src/plonk-intro-cn/plonk-lagrange-basis.md:139
#: src/plonk-intro-cn/plonk-lagrange-basis.md:143
#: src/plonk-intro-cn/plonk-lagrange-basis.md:147
#: src/plonk-intro-cn/plonk-lagrange-basis.md:151
#: src/plonk-intro-cn/plonk-lagrange-basis.md:153
#: src/plonk-intro-cn/plonk-permutation.md:11
#: src/plonk-intro-cn/plonk-permutation.md:23
#: src/plonk-intro-cn/plonk-permutation.md:35
#: src/plonk-intro-cn/plonk-permutation.md:36
#: src/plonk-intro-cn/plonk-permutation.md:38
#: src/plonk-intro-cn/plonk-permutation.md:48
#: src/plonk-intro-cn/plonk-permutation.md:58
#: src/plonk-intro-cn/plonk-permutation.md:68
#: src/plonk-intro-cn/plonk-permutation.md:72
#: src/plonk-intro-cn/plonk-permutation.md:76
#: src/plonk-intro-cn/plonk-permutation.md:84
#: src/plonk-intro-cn/plonk-permutation.md:88
#: src/plonk-intro-cn/plonk-permutation.md:90
#: src/plonk-intro-cn/plonk-permutation.md:96
#: src/plonk-intro-cn/plonk-permutation.md:110
#: src/plonk-intro-cn/plonk-permutation.md:112
#: src/plonk-intro-cn/plonk-permutation.md:140
#: src/plonk-intro-cn/plonk-permutation.md:148
#: src/plonk-intro-cn/plonk-permutation.md:158
#: src/plonk-intro-cn/plonk-permutation.md:159
#: src/plonk-intro-cn/plonk-permutation.md:176
#: src/plonk-intro-cn/plonk-permutation.md:177
#: src/plonk-intro-cn/plonk-permutation.md:198
#: src/plonk-intro-cn/plonk-permutation.md:204
#: src/plonk-intro-cn/plonk-permutation.md:208
#: src/plonk-intro-cn/plonk-permutation.md:212
#: src/plonk-intro-cn/plonk-constraints.md:25
#: src/plonk-intro-cn/plonk-constraints.md:35
#: src/plonk-intro-cn/plonk-constraints.md:37
#: src/plonk-intro-cn/plonk-constraints.md:39
#: src/plonk-intro-cn/plonk-constraints.md:41
#: src/plonk-intro-cn/plonk-constraints.md:45
#: src/plonk-intro-cn/plonk-constraints.md:47
#: src/plonk-intro-cn/plonk-constraints.md:57
#: src/plonk-intro-cn/plonk-constraints.md:59
#: src/plonk-intro-cn/plonk-constraints.md:63
#: src/plonk-intro-cn/plonk-constraints.md:67
#: src/plonk-intro-cn/plonk-constraints.md:89
#: src/plonk-intro-cn/plonk-constraints.md:91
#: src/plonk-intro-cn/plonk-constraints.md:93
#: src/plonk-intro-cn/plonk-constraints.md:97
#: src/plonk-intro-cn/plonk-constraints.md:99
#: src/plonk-intro-cn/plonk-constraints.md:101
#: src/plonk-intro-cn/plonk-constraints.md:116
#: src/plonk-intro-cn/plonk-constraints.md:120
#: src/plonk-intro-cn/plonk-constraints.md:125
#: src/plonk-intro-cn/plonk-constraints.md:127
#: src/plonk-intro-cn/plonk-constraints.md:133
#: src/plonk-intro-cn/plonk-constraints.md:141
#: src/plonk-intro-cn/plonk-constraints.md:163
#: src/plonk-intro-cn/plonk-constraints.md:169
#: src/plonk-intro-cn/plonk-constraints.md:175
#: src/plonk-intro-cn/plonk-constraints.md:193
#: src/plonk-intro-cn/plonk-constraints.md:199
#: src/plonk-intro-cn/plonk-polycom.md:21
#: src/plonk-intro-cn/plonk-polycom.md:25
#: src/plonk-intro-cn/plonk-polycom.md:29
#: src/plonk-intro-cn/plonk-polycom.md:33
#: src/plonk-intro-cn/plonk-polycom.md:47
#: src/plonk-intro-cn/plonk-polycom.md:53
#: src/plonk-intro-cn/plonk-polycom.md:117
#: src/plonk-intro-cn/plonk-polycom.md:167
#: src/plonk-intro-cn/plonk-polycom.md:175
#: src/plonk-intro-cn/plonk-polycom.md:189
#: src/plonk-intro-cn/plonk-polycom.md:193
#: src/plonk-intro-cn/plonk-polycom.md:201
#: src/plonk-intro-cn/plonk-randomizing.md:33
#: src/plonk-intro-cn/plonk-randomizing.md:39
#: src/plonk-intro-cn/plonk-randomizing.md:47
#: src/plonk-intro-cn/plonk-randomizing.md:49
#: src/plonk-intro-cn/plonk-randomizing.md:55
#: src/plonk-intro-cn/plonk-randomizing.md:57
#: src/plonk-intro-cn/plonk-randomizing.md:65
#: src/plonk-intro-cn/plonk-randomizing.md:69
#: src/plonk-intro-cn/plonk-randomizing.md:73
#: src/plonk-intro-cn/plonk-randomizing.md:90
#: src/plonk-intro-cn/plonk-randomizing.md:92
#: src/plonk-intro-cn/plonk-randomizing.md:93
#: src/plonk-intro-cn/plonk-randomizing.md:101
#: src/plonk-intro-cn/plonk-randomizing.md:115
#: src/plonk-intro-cn/plonk-randomizing.md:117
#: src/plonk-intro-cn/plonk-randomizing.md:129
#: src/plonk-intro-cn/plonk-randomizing.md:143
#: src/plonk-intro-cn/plonk-randomizing.md:145
#: src/plonk-intro-cn/plonk-randomizing.md:149
#: src/plonk-intro-cn/plonk-randomizing.md:163
#: src/plonk-intro-cn/plonk-lookup.md:41 src/plonk-intro-cn/plonk-lookup.md:59
#: src/plonk-intro-cn/plonk-lookup.md:61 src/plonk-intro-cn/plonk-lookup.md:63
#: src/plonk-intro-cn/plonk-lookup.md:69 src/plonk-intro-cn/plonk-lookup.md:87
#: src/plonk-intro-cn/plonk-lookup.md:93 src/plonk-intro-cn/plonk-lookup.md:101
#: src/plonk-intro-cn/plonk-lookup.md:121
#: src/plonk-intro-cn/plonk-lookup.md:123
#: src/plonk-intro-cn/plonk-lookup.md:127
#: src/plonk-intro-cn/plonk-lookup.md:135
#: src/plonk-intro-cn/plonk-lookup.md:163
#: src/plonk-intro-cn/plonk-lookup.md:169
#: src/plonk-intro-cn/plonk-lookup.md:173
#: src/plonk-intro-cn/plonk-lookup.md:192
#: src/plonk-intro-cn/plonk-lookup.md:196
#: src/plonk-intro-cn/plonk-lookup.md:200
#: src/plonk-intro-cn/plonk-lookup.md:210
#: src/plonk-intro-cn/plonk-lookup.md:212
#: src/plonk-intro-cn/plonk-lookup.md:214
#: src/plonk-intro-cn/plonk-lookup.md:226
#: src/plonk-intro-cn/plonk-lookup.md:228
#: src/plonk-intro-cn/plonk-lookup.md:234
#: src/plonk-intro-cn/plonk-lookup.md:244
#: src/plonk-intro-cn/plonk-lookup.md:269
#: src/plonk-intro-cn/plonk-lookup.md:275
#: src/plonk-intro-cn/plonk-lookup.md:277
#: src/plonk-intro-cn/plonk-lookup.md:285
#: src/plonk-intro-cn/plonk-lookup.md:293
#: src/plonk-intro-cn/plonk-lookup.md:304
#: src/plonk-intro-cn/plonk-lookup.md:306
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:59
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:75
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:95
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:96
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:103
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:106
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:114
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:326
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:332
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:333
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:347
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:348
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:349
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:350
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:357
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:21
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:22
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:32
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:76
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:79
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:81
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:182
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:188
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:198
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:264
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:265
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:269
#: src/zk-snarks/3-General-Purpose-Computation.md:42
#: src/zk-snarks/3-General-Purpose-Computation.md:68
#: src/zk-snarks/3-General-Purpose-Computation.md:79
#: src/zk-snarks/3-General-Purpose-Computation.md:83
#: src/zk-snarks/3-General-Purpose-Computation.md:157
#: src/zk-snarks/3-General-Purpose-Computation.md:182
#: src/zk-snarks/3-General-Purpose-Computation.md:184
#: src/zk-snarks/3-General-Purpose-Computation.md:326
#: src/zk-snarks/3-General-Purpose-Computation.md:381
#: src/zk-snarks/4-Construction-Properties.md:105
#: src/zk-snarks/4-Construction-Properties.md:113
#: src/zk-snarks/4-Construction-Properties.md:127
#: src/zk-snarks/4-Construction-Properties.md:133
#: src/zk-snarks/4-Construction-Properties.md:134
#: src/zk-snarks/4-Construction-Properties.md:318
#: src/zk-snarks/4-Construction-Properties.md:368
#: src/zk-snarks/4-Construction-Properties.md:370
#: src/zk-snarks/4-Construction-Properties.md:406
#: src/zk-snarks/4-Construction-Properties.md:408
#: src/zk-snarks/5-Pinocchio-Protocol.md:28
#: src/zk-snarks/5-Pinocchio-Protocol.md:29
#: src/zk-snarks/5-Pinocchio-Protocol.md:31
#: src/zk-snarks/5-Pinocchio-Protocol.md:32
#: src/zk-snarks/5-Pinocchio-Protocol.md:33
#: src/zk-snarks/5-Pinocchio-Protocol.md:34
#: src/zk-snarks/5-Pinocchio-Protocol.md:52
#: src/zk-snarks/5-Pinocchio-Protocol.md:83
#: src/zk-snarks/5-Pinocchio-Protocol.md:89
#: src/zk-snarks/5-Pinocchio-Protocol.md:97
#: src/zk-snarks/5-Pinocchio-Protocol.md:111
#: src/zk-snarks/5-Pinocchio-Protocol.md:188
#: src/zk-snarks/5-Pinocchio-Protocol.md:192
#: src/zk-snarks/5-Pinocchio-Protocol.md:195
#: src/zk-snarks/5-Pinocchio-Protocol.md:199 src/halo2/chap-1/index.md:32
#: src/halo2/chap-1/index.md:34 src/halo2/chap-1/index.md:36
#: src/halo2/tmp/1-Simple-Example.md:151 src/halo2/tmp/1-Simple-Example.md:152
#: src/halo2/tmp/1-Simple-Example.md:552 src/halo2/tmp/1-Simple-Example.md:553
#: src/halo2/tmp/2-Fibonacci-example-1.md:19
#: src/halo2/tmp/2-Fibonacci-example-1.md:191
#: src/halo2/tmp/3-Fibonacci-example-2.md:84
#: src/halo2/tmp/3-Fibonacci-example-2.md:269
#: src/halo2/tmp/4-IsZero-Check-example-3.md:120
#: src/halo2/tmp/4-IsZero-Check-example-3.md:127
#: src/halo2/tmp/4-IsZero-Check-example-3.md:128
#: src/halo2/tmp/4-IsZero-Check-example-3.md:140
#: src/halo2/tmp/9-decomposed.md:24 src/halo2/tmp/9-decomposed.md:26
#: src/halo2/tmp/9-decomposed.md:30 src/halo2/tmp/9-decomposed.md:39
#: src/halo2/tmp/9-decomposed.md:40 src/halo2/tmp/9-decomposed.md:42
#: src/halo2/tmp/9-decomposed.md:48 src/halo2/tmp/9-decomposed.md:53
#: src/halo2/tmp/9-decomposed.md:61 src/halo2/tmp/9-decomposed.md:101
#: src/halo2/tmp/9-decomposed.md:104 src/halo2/tmp/9-decomposed.md:108
#: src/halo2/tmp/9-decomposed.md:139 src/halo2/tmp/9-decomposed.md:141
#: src/zk-everything/BabySNARK tutorial.md:127 tutorial.md:131 tutorial.md:140
#: tutorial.md:145 tutorial.md:148 tutorial.md:150 tutorial.md:165
#: src/zk-everything/zk-learning-miles/KZG.md:10
#: src/zk-everything/zk-learning-miles/KZG.md:12
#: src/zk-everything/zk-learning-miles/KZG.md:93
#: src/zk-everything/zk-learning-miles/KZG.md:96
#: src/zk-everything/zk-learning-miles/KZG.md:274
#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:42 Zeroknowledge.md:238 Zeroknowledge.md:239
#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:296 SNARKs.md:298 SNARKs.md:301 SNARKs.md:302 SNARKs.md:312
#: SNARKs.md:316 SNARKs.md:324 SNARKs.md:383 SNARKs.md:395 SNARKs.md:403
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:44
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:50
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:58
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:64
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:119
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:122
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:128
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:134
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:152
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:170
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:176
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:182
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:188
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:212
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:218
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:224
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:230
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:255
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:262
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:268
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:275
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:301
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:307
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:314
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:319
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:349
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:355
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:361
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:424
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:430
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:436
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:442
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:446
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:448
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:454
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:460
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:493
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:514
#: src/zk-everything/zk-everything-joe/Hyrax.md:58
#: src/zk-everything/zk-everything-joe/Hyrax.md:64
#: src/zk-everything/zk-everything-joe/Hyrax.md:70
#: src/zk-everything/zk-everything-joe/Hyrax.md:86
#: src/zk-everything/zk-everything-joe/Hyrax.md:92
#: src/zk-everything/zk-everything-joe/Hyrax.md:98
#: src/zk-everything/zk-everything-joe/Hyrax.md:108
#: src/zk-everything/zk-everything-joe/Hyrax.md:110
#: src/zk-everything/zk-everything-joe/Hyrax.md:116
#: src/zk-everything/zk-everything-joe/Hyrax.md:122
#: src/zk-everything/zk-everything-joe/Hyrax.md:147
#: src/zk-everything/zk-everything-joe/Hyrax.md:191
#: src/zk-everything/zk-everything-joe/Hyrax.md:195
#: src/zk-everything/zk-everything-joe/Hyrax.md:198
#: src/zk-everything/zk-everything-joe/Hyrax.md:201
#: src/zk-everything/zk-everything-joe/Hyrax.md:203
#: src/zk-everything/zk-everything-joe/Hyrax.md:208
#: src/zk-everything/zk-everything-joe/Hyrax.md:223
#: src/zk-everything/zk-everything-joe/Hyrax.md:228
#: src/zk-everything/zk-everything-joe/Hyrax.md:277
#: src/zk-everything/zk-everything-joe/Hyrax.md:282
#: src/zk-everything/zk-everything-joe/Hyrax.md:292
#: src/zk-everything/zk-everything-joe/Hyrax.md:297
#: src/zk-everything/zk-everything-joe/Hyrax.md:302
#: src/zk-everything/zk-everything-joe/Hyrax.md:311
#: src/zk-everything/zk-everything-joe/Spartan.md:110
#: src/zk-everything/zk-everything-joe/Spartan.md:118
#: src/zk-everything/zk-everything-joe/Spartan.md:126
#: src/zk-everything/zk-everything-joe/Spartan.md:136
#: src/zk-everything/zk-everything-joe/Spartan.md:142
#: src/zk-everything/zk-everything-joe/Spartan.md:143
#: src/zk-everything/zk-everything-joe/Spartan.md:147
#: src/zk-everything/zk-everything-joe/Spartan.md:148
#: src/zk-everything/zk-everything-joe/Spartan.md:154
#: src/zk-everything/zk-everything-joe/Spartan.md:169
#: src/zk-everything/zk-everything-joe/Spartan.md:172
#: src/zk-everything/zk-everything-joe/Spartan.md:182
#: src/zk-everything/zk-everything-joe/Spartan.md:195
#: src/zk-everything/zk-everything-joe/Spartan.md:246
#: src/zk-everything/zk-everything-joe/Spartan.md:257
#: src/zk-everything/zk-everything-joe/Spartan.md:268
#: src/zk-everything/zk-everything-joe/Spartan.md:278
#: src/zk-everything/zk-everything-joe/Spartan.md:309
#: src/zk-everything/zk-everything-joe/Spartan.md:319
#: src/zk-everything/zk-everything-joe/Spartan.md:334
#: src/zk-everything/zk-everything-joe/Spartan.md:339
#: src/zk-everything/zk-everything-joe/Spartan.md:344
#: src/zk-everything/zk-everything-joe/Spartan.md:349
#: src/zk-everything/zk-everything-joe/Spartan.md:350
#: src/zk-everything/zk-everything-joe/Spartan.md:360
#: src/zk-everything/zk-everything-joe/Spartan.md:382
#: src/zk-everything/zk-everything-joe/Spartan.md:389
#: src/zk-everything/zk-everything-joe/Spartan.md:394
#: src/zk-everything/zk-everything-joe/Spartan.md:396
#: src/zk-everything/zk-everything-joe/Spartan.md:406
#: src/zk-everything/zk-everything-joe/Spartan.md:411
#: src/zk-everything/zk-everything-joe/Spartan.md:416
#: src/zk-everything/zk-everything-joe/Spartan.md:422
#: src/zk-everything/zk-everything-joe/Spartan.md:428
#: src/zk-everything/zk-everything-joe/Spartan.md:436
#: src/zk-everything/zk-everything-joe/Spartan.md:450 src/Nova/SuperNova.md:14
#: src/Nova/SuperNova.md:30 src/Nova/SuperNova.md:68 src/public
#: goods/第二章.md:52 goods/第二章.md:58 goods/第二章.md:59
#: goods/第二章.md:65 goods/第二章.md:70 goods/第二章.md:89
#: goods/第二章.md:97 goods/第二章.md:147 goods/第二章.md:160
#: goods/第二章.md:162 goods/4-Proving-System.md:204
msgid "0"
msgstr "0"

#: src/zkp-intro/1/zkp-back.md:200
#: src/plonk-intro-cn/plonk-arithmetization.md:123
#: src/plonk-intro-cn/plonk-arithmetization.md:231
#: src/plonk-intro-cn/plonk-arithmetization.md:245
#: src/plonk-intro-cn/plonk-lagrange-basis.md:34
#: src/plonk-intro-cn/plonk-permutation.md:124
#: src/plonk-intro-cn/plonk-permutation.md:128
#: src/plonk-intro-cn/plonk-constraints.md:120
#: src/plonk-intro-cn/plonk-constraints.md:153
#: src/plonk-intro-cn/plonk-polycom.md:57
#: src/plonk-intro-cn/plonk-polycom.md:59
#: src/plonk-intro-cn/plonk-polycom.md:61
#: src/plonk-intro-cn/plonk-polycom.md:75
#: src/plonk-intro-cn/plonk-polycom.md:81
#: src/plonk-intro-cn/plonk-polycom.md:105
#: src/plonk-intro-cn/plonk-polycom.md:124
#: src/plonk-intro-cn/plonk-polycom.md:132
#: src/plonk-intro-cn/plonk-polycom.md:136
#: src/plonk-intro-cn/plonk-polycom.md:141
#: src/plonk-intro-cn/plonk-polycom.md:145
#: src/plonk-intro-cn/plonk-polycom.md:147
#: src/plonk-intro-cn/plonk-polycom.md:155
#: src/plonk-intro-cn/plonk-polycom.md:157
#: src/plonk-intro-cn/plonk-polycom.md:169
#: src/plonk-intro-cn/plonk-polycom.md:183
#: src/plonk-intro-cn/plonk-polycom.md:187
#: src/plonk-intro-cn/plonk-polycom.md:197
#: src/plonk-intro-cn/plonk-polycom.md:209
#: src/plonk-intro-cn/plonk-polycom.md:215
#: src/plonk-intro-cn/plonk-polycom.md:217
#: src/plonk-intro-cn/plonk-polycom.md:221
#: src/plonk-intro-cn/plonk-polycom.md:229
#: src/plonk-intro-cn/plonk-randomizing.md:141
#: src/plonk-intro-cn/plonk-randomizing.md:149
#: src/plonk-intro-cn/plonk-randomizing.md:155
#: src/plonk-intro-cn/plonk-randomizing.md:159
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:350
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:235
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:239
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:243
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:245
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:258
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:264
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:271
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:272
#: src/zk-snarks/4-Construction-Properties.md:199
#: src/zk-snarks/4-Construction-Properties.md:210
#: src/zk-snarks/4-Construction-Properties.md:422
#: src/zk-snarks/5-Pinocchio-Protocol.md:87
#: src/zk-snarks/5-Pinocchio-Protocol.md:192 src/halo2/tmp/9-decomposed.md:101
#: src/zk-everything/BabySNARK tutorial.md:145 tutorial.md:185
#: src/zk-everything/zk-learning-miles/KZG.md:41
#: src/zk-everything/zk-learning-miles/KZG.md:93
#: src/zk-everything/zk-learning-miles/KZG.md:96
#: src/zk-everything/zk-learning-miles/KZG.md:199
#: src/zk-everything/zk-learning-miles/KZG.md:201
#: src/zk-everything/zk-learning-miles/KZG.md:203
#: src/zk-everything/zk-learning-miles/KZG.md:205
#: src/zk-everything/zk-learning-miles/KZG.md:207
#: src/zk-everything/zk-learning-miles/KZG.md:209
#: src/zk-everything/zk-learning-miles/KZG.md:211
#: src/zk-everything/zk-learning-miles/KZG.md:213
#: src/zk-everything/zk-learning-miles/KZG.md:222
#: src/zk-everything/zk-learning-miles/KZG.md:246
#: src/zk-everything/zk-learning-miles/KZG.md:248
#: src/zk-everything/zk-learning-miles/KZG.md:250
#: src/zk-everything/zk-learning-miles/KZG.md:317
#: src/zk-everything/zk-learning-miles/KZG.md:318
#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:238 Zeroknowledge.md:239
#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:269 SNARKs.md:270 SNARKs.md:284 SNARKs.md:310 SNARKs.md:312
#: SNARKs.md:324 SNARKs.md:362 SNARKs.md:363 SNARKs.md:368 SNARKs.md:369
#: SNARKs.md:370 SNARKs.md:371 SNARKs.md:374 SNARKs.md:379 SNARKs.md:395
#: SNARKs.md:408
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:145
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:152
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:383
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:405
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:486
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:538
#: src/zk-everything/zk-everything-joe/Hyrax.md:133
#: src/zk-everything/zk-everything-joe/Hyrax.md:140
#: src/zk-everything/zk-everything-joe/Hyrax.md:162
#: src/zk-everything/zk-everything-joe/Hyrax.md:168
#: src/zk-everything/zk-everything-joe/Hyrax.md:181
#: src/zk-everything/zk-everything-joe/Hyrax.md:195
#: src/zk-everything/zk-everything-joe/Hyrax.md:198
#: src/zk-everything/zk-everything-joe/Hyrax.md:207
#: src/zk-everything/zk-everything-joe/Hyrax.md:214
#: src/zk-everything/zk-everything-joe/Hyrax.md:223
#: src/zk-everything/zk-everything-joe/Hyrax.md:228
#: src/zk-everything/zk-everything-joe/Hyrax.md:277
#: src/zk-everything/zk-everything-joe/Hyrax.md:282
#: src/zk-everything/zk-everything-joe/Spartan.md:110
#: src/zk-everything/zk-everything-joe/Spartan.md:122
#: src/zk-everything/zk-everything-joe/Spartan.md:126
#: src/zk-everything/zk-everything-joe/Spartan.md:142
#: src/zk-everything/zk-everything-joe/Spartan.md:147
#: src/zk-everything/zk-everything-joe/Spartan.md:154
#: src/zk-everything/zk-everything-joe/Spartan.md:334
#: src/zk-everything/zk-everything-joe/Spartan.md:360
#: src/zk-everything/zk-everything-joe/Spartan.md:394
#: src/zk-everything/zk-everything-joe/Spartan.md:416
#: src/zk-everything/zk-everything-joe/Spartan.md:450 src/Nova/SuperNova.md:17
#: src/Nova/SuperNova.md:30 src/Nova/SuperNova.md:35 src/Nova/SuperNova.md:66
#: src/Nova/SuperNova.md:68 src/public goods/第二章.md:54
#: goods/第二章.md:56 goods/第二章.md:80 goods/第二章.md:103
msgid "\\]"
msgstr "\\]"

#: src/zkp-intro/1/zkp-back.md:200 src/halo2/tmp/9-decomposed.md:27
#: src/zk-everything/zk-everything-joe/Hyrax.md:263
#: src/zk-everything/zk-everything-joe/Spartan.md:339
#: src/zk-everything/zk-everything-joe/Spartan.md:350
msgid "\\<"
msgstr "\\<"

#: src/zkp-intro/1/zkp-back.md:200
#: src/plonk-intro-cn/plonk-arithmetization.md:20
#: src/plonk-intro-cn/plonk-arithmetization.md:22
#: src/plonk-intro-cn/plonk-arithmetization.md:35
#: src/plonk-intro-cn/plonk-arithmetization.md:37
#: src/plonk-intro-cn/plonk-arithmetization.md:41
#: src/plonk-intro-cn/plonk-arithmetization.md:45
#: src/plonk-intro-cn/plonk-arithmetization.md:47
#: src/plonk-intro-cn/plonk-arithmetization.md:51
#: src/plonk-intro-cn/plonk-arithmetization.md:55
#: src/plonk-intro-cn/plonk-arithmetization.md:57
#: src/plonk-intro-cn/plonk-arithmetization.md:59
#: src/plonk-intro-cn/plonk-arithmetization.md:61
#: src/plonk-intro-cn/plonk-arithmetization.md:63
#: src/plonk-intro-cn/plonk-arithmetization.md:65
#: src/plonk-intro-cn/plonk-arithmetization.md:87
#: src/plonk-intro-cn/plonk-arithmetization.md:91
#: src/plonk-intro-cn/plonk-arithmetization.md:93
#: src/plonk-intro-cn/plonk-arithmetization.md:101
#: src/plonk-intro-cn/plonk-arithmetization.md:103
#: src/plonk-intro-cn/plonk-arithmetization.md:105
#: src/plonk-intro-cn/plonk-arithmetization.md:109
#: src/plonk-intro-cn/plonk-arithmetization.md:115
#: src/plonk-intro-cn/plonk-arithmetization.md:123
#: src/plonk-intro-cn/plonk-arithmetization.md:125
#: src/plonk-intro-cn/plonk-arithmetization.md:135
#: src/plonk-intro-cn/plonk-arithmetization.md:141
#: src/plonk-intro-cn/plonk-arithmetization.md:147
#: src/plonk-intro-cn/plonk-arithmetization.md:151
#: src/plonk-intro-cn/plonk-arithmetization.md:159
#: src/plonk-intro-cn/plonk-arithmetization.md:163
#: src/plonk-intro-cn/plonk-arithmetization.md:177
#: src/plonk-intro-cn/plonk-arithmetization.md:179
#: src/plonk-intro-cn/plonk-arithmetization.md:187
#: src/plonk-intro-cn/plonk-arithmetization.md:189
#: src/plonk-intro-cn/plonk-arithmetization.md:191
#: src/plonk-intro-cn/plonk-arithmetization.md:197
#: src/plonk-intro-cn/plonk-arithmetization.md:199
#: src/plonk-intro-cn/plonk-arithmetization.md:201
#: src/plonk-intro-cn/plonk-arithmetization.md:203
#: src/plonk-intro-cn/plonk-arithmetization.md:205
#: src/plonk-intro-cn/plonk-arithmetization.md:209
#: src/plonk-intro-cn/plonk-arithmetization.md:227
#: src/plonk-intro-cn/plonk-arithmetization.md:231
#: src/plonk-intro-cn/plonk-arithmetization.md:237
#: src/plonk-intro-cn/plonk-arithmetization.md:239
#: src/plonk-intro-cn/plonk-arithmetization.md:243
#: src/plonk-intro-cn/plonk-arithmetization.md:245
#: src/plonk-intro-cn/plonk-arithmetization.md:247
#: src/plonk-intro-cn/plonk-lagrange-basis.md:18
#: src/plonk-intro-cn/plonk-lagrange-basis.md:28
#: src/plonk-intro-cn/plonk-lagrange-basis.md:30
#: src/plonk-intro-cn/plonk-lagrange-basis.md:32
#: src/plonk-intro-cn/plonk-lagrange-basis.md:34
#: src/plonk-intro-cn/plonk-lagrange-basis.md:36
#: src/plonk-intro-cn/plonk-lagrange-basis.md:42
#: src/plonk-intro-cn/plonk-lagrange-basis.md:50
#: src/plonk-intro-cn/plonk-lagrange-basis.md:60
#: src/plonk-intro-cn/plonk-lagrange-basis.md:62
#: src/plonk-intro-cn/plonk-lagrange-basis.md:78
#: src/plonk-intro-cn/plonk-lagrange-basis.md:80
#: src/plonk-intro-cn/plonk-lagrange-basis.md:82
#: src/plonk-intro-cn/plonk-lagrange-basis.md:85
#: src/plonk-intro-cn/plonk-lagrange-basis.md:89
#: src/plonk-intro-cn/plonk-lagrange-basis.md:93
#: src/plonk-intro-cn/plonk-lagrange-basis.md:95
#: src/plonk-intro-cn/plonk-lagrange-basis.md:101
#: src/plonk-intro-cn/plonk-lagrange-basis.md:105
#: src/plonk-intro-cn/plonk-lagrange-basis.md:109
#: src/plonk-intro-cn/plonk-lagrange-basis.md:111
#: src/plonk-intro-cn/plonk-lagrange-basis.md:115
#: src/plonk-intro-cn/plonk-lagrange-basis.md:119
#: src/plonk-intro-cn/plonk-lagrange-basis.md:121
#: src/plonk-intro-cn/plonk-lagrange-basis.md:129
#: src/plonk-intro-cn/plonk-lagrange-basis.md:137
#: src/plonk-intro-cn/plonk-lagrange-basis.md:139
#: src/plonk-intro-cn/plonk-lagrange-basis.md:143
#: src/plonk-intro-cn/plonk-lagrange-basis.md:147
#: src/plonk-intro-cn/plonk-lagrange-basis.md:161
#: src/plonk-intro-cn/plonk-lagrange-basis.md:170
#: src/plonk-intro-cn/plonk-lagrange-basis.md:172
#: src/plonk-intro-cn/plonk-permutation.md:11
#: src/plonk-intro-cn/plonk-permutation.md:13
#: src/plonk-intro-cn/plonk-permutation.md:23
#: src/plonk-intro-cn/plonk-permutation.md:35
#: src/plonk-intro-cn/plonk-permutation.md:36
#: src/plonk-intro-cn/plonk-permutation.md:38
#: src/plonk-intro-cn/plonk-permutation.md:48
#: src/plonk-intro-cn/plonk-permutation.md:58
#: src/plonk-intro-cn/plonk-permutation.md:64
#: src/plonk-intro-cn/plonk-permutation.md:68
#: src/plonk-intro-cn/plonk-permutation.md:72
#: src/plonk-intro-cn/plonk-permutation.md:74
#: src/plonk-intro-cn/plonk-permutation.md:76
#: src/plonk-intro-cn/plonk-permutation.md:80
#: src/plonk-intro-cn/plonk-permutation.md:82
#: src/plonk-intro-cn/plonk-permutation.md:84
#: src/plonk-intro-cn/plonk-permutation.md:86
#: src/plonk-intro-cn/plonk-permutation.md:88
#: src/plonk-intro-cn/plonk-permutation.md:90
#: src/plonk-intro-cn/plonk-permutation.md:96
#: src/plonk-intro-cn/plonk-permutation.md:98
#: src/plonk-intro-cn/plonk-permutation.md:106
#: src/plonk-intro-cn/plonk-permutation.md:112
#: src/plonk-intro-cn/plonk-permutation.md:128
#: src/plonk-intro-cn/plonk-permutation.md:140
#: src/plonk-intro-cn/plonk-permutation.md:144
#: src/plonk-intro-cn/plonk-permutation.md:148
#: src/plonk-intro-cn/plonk-permutation.md:158
#: src/plonk-intro-cn/plonk-permutation.md:159
#: src/plonk-intro-cn/plonk-permutation.md:161
#: src/plonk-intro-cn/plonk-permutation.md:162
#: src/plonk-intro-cn/plonk-permutation.md:176
#: src/plonk-intro-cn/plonk-permutation.md:177
#: src/plonk-intro-cn/plonk-permutation.md:179
#: src/plonk-intro-cn/plonk-permutation.md:180
#: src/plonk-intro-cn/plonk-permutation.md:198
#: src/plonk-intro-cn/plonk-permutation.md:204
#: src/plonk-intro-cn/plonk-permutation.md:212
#: src/plonk-intro-cn/plonk-constraints.md:19
#: src/plonk-intro-cn/plonk-constraints.md:21
#: src/plonk-intro-cn/plonk-constraints.md:25
#: src/plonk-intro-cn/plonk-constraints.md:27
#: src/plonk-intro-cn/plonk-constraints.md:35
#: src/plonk-intro-cn/plonk-constraints.md:37
#: src/plonk-intro-cn/plonk-constraints.md:39
#: src/plonk-intro-cn/plonk-constraints.md:45
#: src/plonk-intro-cn/plonk-constraints.md:47
#: src/plonk-intro-cn/plonk-constraints.md:57
#: src/plonk-intro-cn/plonk-constraints.md:59
#: src/plonk-intro-cn/plonk-constraints.md:63
#: src/plonk-intro-cn/plonk-constraints.md:67
#: src/plonk-intro-cn/plonk-constraints.md:85
#: src/plonk-intro-cn/plonk-constraints.md:89
#: src/plonk-intro-cn/plonk-constraints.md:91
#: src/plonk-intro-cn/plonk-constraints.md:93
#: src/plonk-intro-cn/plonk-constraints.md:95
#: src/plonk-intro-cn/plonk-constraints.md:97
#: src/plonk-intro-cn/plonk-constraints.md:99
#: src/plonk-intro-cn/plonk-constraints.md:101
#: src/plonk-intro-cn/plonk-constraints.md:116
#: src/plonk-intro-cn/plonk-constraints.md:120
#: src/plonk-intro-cn/plonk-constraints.md:141
#: src/plonk-intro-cn/plonk-constraints.md:143
#: src/plonk-intro-cn/plonk-constraints.md:145
#: src/plonk-intro-cn/plonk-constraints.md:149
#: src/plonk-intro-cn/plonk-constraints.md:153
#: src/plonk-intro-cn/plonk-constraints.md:155
#: src/plonk-intro-cn/plonk-constraints.md:169
#: src/plonk-intro-cn/plonk-constraints.md:175
#: src/plonk-intro-cn/plonk-constraints.md:191
#: src/plonk-intro-cn/plonk-constraints.md:192
#: src/plonk-intro-cn/plonk-constraints.md:199
#: src/plonk-intro-cn/plonk-polycom.md:21
#: src/plonk-intro-cn/plonk-polycom.md:25
#: src/plonk-intro-cn/plonk-polycom.md:29
#: src/plonk-intro-cn/plonk-polycom.md:33
#: src/plonk-intro-cn/plonk-polycom.md:47
#: src/plonk-intro-cn/plonk-polycom.md:49
#: src/plonk-intro-cn/plonk-polycom.md:53
#: src/plonk-intro-cn/plonk-polycom.md:57
#: src/plonk-intro-cn/plonk-polycom.md:59
#: src/plonk-intro-cn/plonk-polycom.md:61
#: src/plonk-intro-cn/plonk-polycom.md:71
#: src/plonk-intro-cn/plonk-polycom.md:73
#: src/plonk-intro-cn/plonk-polycom.md:75
#: src/plonk-intro-cn/plonk-polycom.md:81
#: src/plonk-intro-cn/plonk-polycom.md:87
#: src/plonk-intro-cn/plonk-polycom.md:89
#: src/plonk-intro-cn/plonk-polycom.md:91
#: src/plonk-intro-cn/plonk-polycom.md:93
#: src/plonk-intro-cn/plonk-polycom.md:97
#: src/plonk-intro-cn/plonk-polycom.md:101
#: src/plonk-intro-cn/plonk-polycom.md:103
#: src/plonk-intro-cn/plonk-polycom.md:105
#: src/plonk-intro-cn/plonk-polycom.md:109
#: src/plonk-intro-cn/plonk-polycom.md:113
#: src/plonk-intro-cn/plonk-polycom.md:117
#: src/plonk-intro-cn/plonk-polycom.md:124
#: src/plonk-intro-cn/plonk-polycom.md:126
#: src/plonk-intro-cn/plonk-polycom.md:128
#: src/plonk-intro-cn/plonk-polycom.md:132
#: src/plonk-intro-cn/plonk-polycom.md:134
#: src/plonk-intro-cn/plonk-polycom.md:136
#: src/plonk-intro-cn/plonk-polycom.md:141
#: src/plonk-intro-cn/plonk-polycom.md:145
#: src/plonk-intro-cn/plonk-polycom.md:147
#: src/plonk-intro-cn/plonk-polycom.md:155
#: src/plonk-intro-cn/plonk-polycom.md:157
#: src/plonk-intro-cn/plonk-polycom.md:167
#: src/plonk-intro-cn/plonk-polycom.md:169
#: src/plonk-intro-cn/plonk-polycom.md:171
#: src/plonk-intro-cn/plonk-polycom.md:175
#: src/plonk-intro-cn/plonk-polycom.md:183
#: src/plonk-intro-cn/plonk-polycom.md:187
#: src/plonk-intro-cn/plonk-polycom.md:193
#: src/plonk-intro-cn/plonk-polycom.md:197
#: src/plonk-intro-cn/plonk-polycom.md:199
#: src/plonk-intro-cn/plonk-polycom.md:201
#: src/plonk-intro-cn/plonk-polycom.md:205
#: src/plonk-intro-cn/plonk-polycom.md:209
#: src/plonk-intro-cn/plonk-polycom.md:211
#: src/plonk-intro-cn/plonk-polycom.md:213
#: src/plonk-intro-cn/plonk-polycom.md:215
#: src/plonk-intro-cn/plonk-polycom.md:217
#: src/plonk-intro-cn/plonk-polycom.md:221
#: src/plonk-intro-cn/plonk-polycom.md:225
#: src/plonk-intro-cn/plonk-polycom.md:229
#: src/plonk-intro-cn/plonk-randomizing.md:33
#: src/plonk-intro-cn/plonk-randomizing.md:47
#: src/plonk-intro-cn/plonk-randomizing.md:49
#: src/plonk-intro-cn/plonk-randomizing.md:55
#: src/plonk-intro-cn/plonk-randomizing.md:57
#: src/plonk-intro-cn/plonk-randomizing.md:65
#: src/plonk-intro-cn/plonk-randomizing.md:69
#: src/plonk-intro-cn/plonk-randomizing.md:73
#: src/plonk-intro-cn/plonk-randomizing.md:90
#: src/plonk-intro-cn/plonk-randomizing.md:92
#: src/plonk-intro-cn/plonk-randomizing.md:93
#: src/plonk-intro-cn/plonk-randomizing.md:97
#: src/plonk-intro-cn/plonk-randomizing.md:101
#: src/plonk-intro-cn/plonk-randomizing.md:103
#: src/plonk-intro-cn/plonk-randomizing.md:104
#: src/plonk-intro-cn/plonk-randomizing.md:106
#: src/plonk-intro-cn/plonk-randomizing.md:110
#: src/plonk-intro-cn/plonk-randomizing.md:112
#: src/plonk-intro-cn/plonk-randomizing.md:113
#: src/plonk-intro-cn/plonk-randomizing.md:115
#: src/plonk-intro-cn/plonk-randomizing.md:117
#: src/plonk-intro-cn/plonk-randomizing.md:119
#: src/plonk-intro-cn/plonk-randomizing.md:123
#: src/plonk-intro-cn/plonk-randomizing.md:125
#: src/plonk-intro-cn/plonk-randomizing.md:127
#: src/plonk-intro-cn/plonk-randomizing.md:129
#: src/plonk-intro-cn/plonk-randomizing.md:141
#: src/plonk-intro-cn/plonk-randomizing.md:143
#: src/plonk-intro-cn/plonk-randomizing.md:145
#: src/plonk-intro-cn/plonk-randomizing.md:149
#: src/plonk-intro-cn/plonk-randomizing.md:155
#: src/plonk-intro-cn/plonk-randomizing.md:159
#: src/plonk-intro-cn/plonk-randomizing.md:163
#: src/plonk-intro-cn/plonk-lookup.md:17 src/plonk-intro-cn/plonk-lookup.md:19
#: src/plonk-intro-cn/plonk-lookup.md:41 src/plonk-intro-cn/plonk-lookup.md:43
#: src/plonk-intro-cn/plonk-lookup.md:47 src/plonk-intro-cn/plonk-lookup.md:51
#: src/plonk-intro-cn/plonk-lookup.md:55 src/plonk-intro-cn/plonk-lookup.md:59
#: src/plonk-intro-cn/plonk-lookup.md:67 src/plonk-intro-cn/plonk-lookup.md:69
#: src/plonk-intro-cn/plonk-lookup.md:83 src/plonk-intro-cn/plonk-lookup.md:87
#: src/plonk-intro-cn/plonk-lookup.md:93 src/plonk-intro-cn/plonk-lookup.md:97
#: src/plonk-intro-cn/plonk-lookup.md:101
#: src/plonk-intro-cn/plonk-lookup.md:111
#: src/plonk-intro-cn/plonk-lookup.md:115
#: src/plonk-intro-cn/plonk-lookup.md:117
#: src/plonk-intro-cn/plonk-lookup.md:121
#: src/plonk-intro-cn/plonk-lookup.md:123
#: src/plonk-intro-cn/plonk-lookup.md:125
#: src/plonk-intro-cn/plonk-lookup.md:127
#: src/plonk-intro-cn/plonk-lookup.md:129
#: src/plonk-intro-cn/plonk-lookup.md:131
#: src/plonk-intro-cn/plonk-lookup.md:133
#: src/plonk-intro-cn/plonk-lookup.md:135
#: src/plonk-intro-cn/plonk-lookup.md:137
#: src/plonk-intro-cn/plonk-lookup.md:139
#: src/plonk-intro-cn/plonk-lookup.md:145
#: src/plonk-intro-cn/plonk-lookup.md:149
#: src/plonk-intro-cn/plonk-lookup.md:153
#: src/plonk-intro-cn/plonk-lookup.md:157
#: src/plonk-intro-cn/plonk-lookup.md:163
#: src/plonk-intro-cn/plonk-lookup.md:165
#: src/plonk-intro-cn/plonk-lookup.md:167
#: src/plonk-intro-cn/plonk-lookup.md:169
#: src/plonk-intro-cn/plonk-lookup.md:173
#: src/plonk-intro-cn/plonk-lookup.md:175
#: src/plonk-intro-cn/plonk-lookup.md:190
#: src/plonk-intro-cn/plonk-lookup.md:192
#: src/plonk-intro-cn/plonk-lookup.md:196
#: src/plonk-intro-cn/plonk-lookup.md:200
#: src/plonk-intro-cn/plonk-lookup.md:210
#: src/plonk-intro-cn/plonk-lookup.md:212
#: src/plonk-intro-cn/plonk-lookup.md:214
#: src/plonk-intro-cn/plonk-lookup.md:216
#: src/plonk-intro-cn/plonk-lookup.md:218
#: src/plonk-intro-cn/plonk-lookup.md:220
#: src/plonk-intro-cn/plonk-lookup.md:226
#: src/plonk-intro-cn/plonk-lookup.md:228
#: src/plonk-intro-cn/plonk-lookup.md:230
#: src/plonk-intro-cn/plonk-lookup.md:234
#: src/plonk-intro-cn/plonk-lookup.md:238
#: src/plonk-intro-cn/plonk-lookup.md:244
#: src/plonk-intro-cn/plonk-lookup.md:247
#: src/plonk-intro-cn/plonk-lookup.md:251
#: src/plonk-intro-cn/plonk-lookup.md:265
#: src/plonk-intro-cn/plonk-lookup.md:273
#: src/plonk-intro-cn/plonk-lookup.md:275
#: src/plonk-intro-cn/plonk-lookup.md:281
#: src/plonk-intro-cn/plonk-lookup.md:285
#: src/plonk-intro-cn/plonk-lookup.md:289
#: src/plonk-intro-cn/plonk-lookup.md:293
#: src/plonk-intro-cn/plonk-lookup.md:297
#: src/plonk-intro-cn/plonk-lookup.md:304
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:59
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:75
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:95
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:103
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:106
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:111
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:112
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:114
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:116
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:198
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:252
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:271
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:308
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:316
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:318
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:326
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:332
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:333
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:347
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:348
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:349
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:350
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:355
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:357
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:21
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:22
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:32
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:76
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:79
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:81
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:170
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:182
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:188
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:194
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:198
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:224
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:229
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:231
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:232
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:239
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:258
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:265
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:269
#: src/zk-snarks/3-General-Purpose-Computation.md:39
#: src/zk-snarks/3-General-Purpose-Computation.md:41
#: src/zk-snarks/3-General-Purpose-Computation.md:75
#: src/zk-snarks/3-General-Purpose-Computation.md:83
#: src/zk-snarks/3-General-Purpose-Computation.md:92
#: src/zk-snarks/3-General-Purpose-Computation.md:122
#: src/zk-snarks/3-General-Purpose-Computation.md:141
#: src/zk-snarks/3-General-Purpose-Computation.md:143
#: src/zk-snarks/3-General-Purpose-Computation.md:157
#: src/zk-snarks/3-General-Purpose-Computation.md:159
#: src/zk-snarks/3-General-Purpose-Computation.md:171
#: src/zk-snarks/3-General-Purpose-Computation.md:182
#: src/zk-snarks/3-General-Purpose-Computation.md:196
#: src/zk-snarks/3-General-Purpose-Computation.md:213
#: src/zk-snarks/3-General-Purpose-Computation.md:215
#: src/zk-snarks/3-General-Purpose-Computation.md:220
#: src/zk-snarks/3-General-Purpose-Computation.md:237
#: src/zk-snarks/3-General-Purpose-Computation.md:315
#: src/zk-snarks/3-General-Purpose-Computation.md:326
#: src/zk-snarks/4-Construction-Properties.md:29
#: src/zk-snarks/4-Construction-Properties.md:48
#: src/zk-snarks/4-Construction-Properties.md:62
#: src/zk-snarks/4-Construction-Properties.md:63
#: src/zk-snarks/4-Construction-Properties.md:65
#: src/zk-snarks/4-Construction-Properties.md:67
#: src/zk-snarks/4-Construction-Properties.md:77
#: src/zk-snarks/4-Construction-Properties.md:80
#: src/zk-snarks/4-Construction-Properties.md:83
#: src/zk-snarks/4-Construction-Properties.md:105
#: src/zk-snarks/4-Construction-Properties.md:111
#: src/zk-snarks/4-Construction-Properties.md:112
#: src/zk-snarks/4-Construction-Properties.md:113
#: src/zk-snarks/4-Construction-Properties.md:127
#: src/zk-snarks/4-Construction-Properties.md:128
#: src/zk-snarks/4-Construction-Properties.md:133
#: src/zk-snarks/4-Construction-Properties.md:134
#: src/zk-snarks/4-Construction-Properties.md:138
#: src/zk-snarks/4-Construction-Properties.md:139
#: src/zk-snarks/4-Construction-Properties.md:149
#: src/zk-snarks/4-Construction-Properties.md:155
#: src/zk-snarks/4-Construction-Properties.md:164
#: src/zk-snarks/4-Construction-Properties.md:168
#: src/zk-snarks/4-Construction-Properties.md:170
#: src/zk-snarks/4-Construction-Properties.md:171
#: src/zk-snarks/4-Construction-Properties.md:172
#: src/zk-snarks/4-Construction-Properties.md:178
#: src/zk-snarks/4-Construction-Properties.md:184
#: src/zk-snarks/4-Construction-Properties.md:193
#: src/zk-snarks/4-Construction-Properties.md:195
#: src/zk-snarks/4-Construction-Properties.md:197
#: src/zk-snarks/4-Construction-Properties.md:199
#: src/zk-snarks/4-Construction-Properties.md:203
#: src/zk-snarks/4-Construction-Properties.md:205
#: src/zk-snarks/4-Construction-Properties.md:206
#: src/zk-snarks/4-Construction-Properties.md:207
#: src/zk-snarks/4-Construction-Properties.md:209
#: src/zk-snarks/4-Construction-Properties.md:221
#: src/zk-snarks/4-Construction-Properties.md:233
#: src/zk-snarks/4-Construction-Properties.md:244
#: src/zk-snarks/4-Construction-Properties.md:249
#: src/zk-snarks/4-Construction-Properties.md:265
#: src/zk-snarks/4-Construction-Properties.md:277
#: src/zk-snarks/4-Construction-Properties.md:279
#: src/zk-snarks/4-Construction-Properties.md:282
#: src/zk-snarks/4-Construction-Properties.md:298
#: src/zk-snarks/4-Construction-Properties.md:304
#: src/zk-snarks/4-Construction-Properties.md:307
#: src/zk-snarks/4-Construction-Properties.md:330
#: src/zk-snarks/4-Construction-Properties.md:331
#: src/zk-snarks/4-Construction-Properties.md:333
#: src/zk-snarks/4-Construction-Properties.md:338
#: src/zk-snarks/4-Construction-Properties.md:339
#: src/zk-snarks/4-Construction-Properties.md:341
#: src/zk-snarks/4-Construction-Properties.md:345
#: src/zk-snarks/4-Construction-Properties.md:353
#: src/zk-snarks/4-Construction-Properties.md:357
#: src/zk-snarks/4-Construction-Properties.md:368
#: src/zk-snarks/4-Construction-Properties.md:376
#: src/zk-snarks/4-Construction-Properties.md:406
#: src/zk-snarks/4-Construction-Properties.md:407
#: src/zk-snarks/4-Construction-Properties.md:408
#: src/zk-snarks/4-Construction-Properties.md:409
#: src/zk-snarks/4-Construction-Properties.md:428
#: src/zk-snarks/5-Pinocchio-Protocol.md:28
#: src/zk-snarks/5-Pinocchio-Protocol.md:29
#: src/zk-snarks/5-Pinocchio-Protocol.md:31
#: src/zk-snarks/5-Pinocchio-Protocol.md:32
#: src/zk-snarks/5-Pinocchio-Protocol.md:33
#: src/zk-snarks/5-Pinocchio-Protocol.md:44
#: src/zk-snarks/5-Pinocchio-Protocol.md:45
#: src/zk-snarks/5-Pinocchio-Protocol.md:83
#: src/zk-snarks/5-Pinocchio-Protocol.md:84
#: src/zk-snarks/5-Pinocchio-Protocol.md:87
#: src/zk-snarks/5-Pinocchio-Protocol.md:96
#: src/zk-snarks/5-Pinocchio-Protocol.md:97
#: src/zk-snarks/5-Pinocchio-Protocol.md:106
#: src/zk-snarks/5-Pinocchio-Protocol.md:111
#: src/zk-snarks/5-Pinocchio-Protocol.md:118
#: src/zk-snarks/5-Pinocchio-Protocol.md:136
#: src/zk-snarks/5-Pinocchio-Protocol.md:152
#: src/zk-snarks/5-Pinocchio-Protocol.md:154
#: src/zk-snarks/5-Pinocchio-Protocol.md:187
#: src/zk-snarks/5-Pinocchio-Protocol.md:192
#: src/zk-snarks/5-Pinocchio-Protocol.md:195
#: src/zk-snarks/5-Pinocchio-Protocol.md:198
#: src/zk-snarks/5-Pinocchio-Protocol.md:199
#: src/zk-snarks/5-Pinocchio-Protocol.md:204
#: src/zk-snarks/5-Pinocchio-Protocol.md:207
#: src/zk-snarks/5-Pinocchio-Protocol.md:214 src/halo2/chap-1/index.md:31
#: src/halo2/chap-1/index.md:33 src/halo2/chap-1/index.md:35
#: src/halo2/tmp/1-Simple-Example.md:151 src/halo2/tmp/1-Simple-Example.md:552
#: src/halo2/tmp/2-Fibonacci-example-1.md:19
#: src/halo2/tmp/2-Fibonacci-example-1.md:191
#: src/halo2/tmp/2-Fibonacci-example-1.md:205
#: src/halo2/tmp/7-Range-Check-lookup(example-2).md:137
#: src/halo2/tmp/7-Range-Check-lookup(example-2).md:138
#: src/halo2/tmp/9-decomposed.md:24 src/halo2/tmp/9-decomposed.md:26
#: src/halo2/tmp/9-decomposed.md:27 src/halo2/tmp/9-decomposed.md:30
#: src/halo2/tmp/9-decomposed.md:42 src/halo2/tmp/9-decomposed.md:43
#: src/halo2/tmp/9-decomposed.md:46 src/halo2/tmp/9-decomposed.md:53
#: src/halo2/tmp/9-decomposed.md:101 src/halo2/tmp/9-decomposed.md:106
#: src/halo2/tmp/9-decomposed.md:108 src/halo2/tmp/9-decomposed.md:139
#: src/halo2/tmp/9-decomposed.md:141 src/halo2/tmp/9-decomposed.md:142
#: src/halo2/tmp/9-decomposed.md:176 src/halo2/tmp/9-decomposed.md:216
#: src/zk-everything/BabySNARK tutorial.md:31 tutorial.md:35 tutorial.md:123
#: tutorial.md:127 tutorial.md:129 tutorial.md:131 tutorial.md:140
#: tutorial.md:145 tutorial.md:148 tutorial.md:150 tutorial.md:156
#: tutorial.md:163 tutorial.md:165 tutorial.md:172 tutorial.md:177
#: tutorial.md:185 src/zk-everything/zk-learning-miles/KZG.md:10
#: src/zk-everything/zk-learning-miles/KZG.md:93
#: src/zk-everything/zk-learning-miles/KZG.md:142
#: src/zk-everything/zk-learning-miles/KZG.md:145
#: src/zk-everything/zk-learning-miles/KZG.md:164
#: src/zk-everything/zk-learning-miles/KZG.md:183
#: src/zk-everything/zk-learning-miles/KZG.md:185
#: src/zk-everything/zk-learning-miles/KZG.md:197
#: src/zk-everything/zk-learning-miles/KZG.md:199
#: src/zk-everything/zk-learning-miles/KZG.md:201
#: src/zk-everything/zk-learning-miles/KZG.md:203
#: src/zk-everything/zk-learning-miles/KZG.md:205
#: src/zk-everything/zk-learning-miles/KZG.md:209
#: src/zk-everything/zk-learning-miles/KZG.md:213
#: src/zk-everything/zk-learning-miles/KZG.md:246
#: src/zk-everything/zk-learning-miles/KZG.md:250
#: src/zk-everything/zk-learning-miles/KZG.md:262
#: src/zk-everything/zk-learning-miles/KZG.md:276
#: src/zk-everything/zk-learning-miles/KZG.md:317
#: src/zk-everything/zk-learning-miles/KZG.md:318
#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:42 Zeroknowledge.md:207 Zeroknowledge.md:238
#: Zeroknowledge.md:239
#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:253 SNARKs.md:270 SNARKs.md:272 SNARKs.md:273 SNARKs.md:298
#: SNARKs.md:301 SNARKs.md:302 SNARKs.md:362 SNARKs.md:364 SNARKs.md:368
#: SNARKs.md:369 SNARKs.md:370 SNARKs.md:371 SNARKs.md:372 SNARKs.md:373
#: SNARKs.md:383 SNARKs.md:387 SNARKs.md:395 SNARKs.md:398 SNARKs.md:410
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:50
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:58
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:64
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:79
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:101
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:119
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:122
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:128
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:132
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:134
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:145
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:152
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:160
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:162
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:170
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:174
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:176
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:182
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:188
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:192
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:194
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:202
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:204
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:212
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:218
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:224
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:230
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:244
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:246
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:255
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:262
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:268
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:275
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:289
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:292
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:301
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:307
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:314
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:319
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:325
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:333
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:343
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:349
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:355
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:361
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:365
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:367
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:377
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:383
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:390
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:396
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:405
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:412
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:418
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:424
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:430
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:436
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:440
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:442
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:446
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:448
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:454
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:460
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:486
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:493
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:514
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:520
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:526
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:532
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:538
#: src/zk-everything/zk-everything-joe/Hyrax.md:48
#: src/zk-everything/zk-everything-joe/Hyrax.md:58
#: src/zk-everything/zk-everything-joe/Hyrax.md:64
#: src/zk-everything/zk-everything-joe/Hyrax.md:70
#: src/zk-everything/zk-everything-joe/Hyrax.md:86
#: src/zk-everything/zk-everything-joe/Hyrax.md:92
#: src/zk-everything/zk-everything-joe/Hyrax.md:98
#: src/zk-everything/zk-everything-joe/Hyrax.md:102
#: src/zk-everything/zk-everything-joe/Hyrax.md:116
#: src/zk-everything/zk-everything-joe/Hyrax.md:122
#: src/zk-everything/zk-everything-joe/Hyrax.md:140
#: src/zk-everything/zk-everything-joe/Hyrax.md:147
#: src/zk-everything/zk-everything-joe/Hyrax.md:149
#: src/zk-everything/zk-everything-joe/Hyrax.md:168
#: src/zk-everything/zk-everything-joe/Hyrax.md:173
#: src/zk-everything/zk-everything-joe/Hyrax.md:181
#: src/zk-everything/zk-everything-joe/Hyrax.md:191
#: src/zk-everything/zk-everything-joe/Hyrax.md:195
#: src/zk-everything/zk-everything-joe/Hyrax.md:203
#: src/zk-everything/zk-everything-joe/Hyrax.md:208
#: src/zk-everything/zk-everything-joe/Hyrax.md:214
#: src/zk-everything/zk-everything-joe/Hyrax.md:216
#: src/zk-everything/zk-everything-joe/Hyrax.md:223
#: src/zk-everything/zk-everything-joe/Hyrax.md:228
#: src/zk-everything/zk-everything-joe/Hyrax.md:250
#: src/zk-everything/zk-everything-joe/Hyrax.md:277
#: src/zk-everything/zk-everything-joe/Hyrax.md:282
#: src/zk-everything/zk-everything-joe/Hyrax.md:284
#: src/zk-everything/zk-everything-joe/Hyrax.md:292
#: src/zk-everything/zk-everything-joe/Hyrax.md:297
#: src/zk-everything/zk-everything-joe/Hyrax.md:302
#: src/zk-everything/zk-everything-joe/Hyrax.md:311
#: src/zk-everything/zk-everything-joe/Hyrax.md:314
#: src/zk-everything/zk-everything-joe/Spartan.md:110
#: src/zk-everything/zk-everything-joe/Spartan.md:118
#: src/zk-everything/zk-everything-joe/Spartan.md:122
#: src/zk-everything/zk-everything-joe/Spartan.md:126
#: src/zk-everything/zk-everything-joe/Spartan.md:136
#: src/zk-everything/zk-everything-joe/Spartan.md:142
#: src/zk-everything/zk-everything-joe/Spartan.md:143
#: src/zk-everything/zk-everything-joe/Spartan.md:147
#: src/zk-everything/zk-everything-joe/Spartan.md:148
#: src/zk-everything/zk-everything-joe/Spartan.md:154
#: src/zk-everything/zk-everything-joe/Spartan.md:169
#: src/zk-everything/zk-everything-joe/Spartan.md:172
#: src/zk-everything/zk-everything-joe/Spartan.md:176
#: src/zk-everything/zk-everything-joe/Spartan.md:177
#: src/zk-everything/zk-everything-joe/Spartan.md:182
#: src/zk-everything/zk-everything-joe/Spartan.md:195
#: src/zk-everything/zk-everything-joe/Spartan.md:200
#: src/zk-everything/zk-everything-joe/Spartan.md:232
#: src/zk-everything/zk-everything-joe/Spartan.md:236
#: src/zk-everything/zk-everything-joe/Spartan.md:240
#: src/zk-everything/zk-everything-joe/Spartan.md:246
#: src/zk-everything/zk-everything-joe/Spartan.md:252
#: src/zk-everything/zk-everything-joe/Spartan.md:257
#: src/zk-everything/zk-everything-joe/Spartan.md:263
#: src/zk-everything/zk-everything-joe/Spartan.md:268
#: src/zk-everything/zk-everything-joe/Spartan.md:274
#: src/zk-everything/zk-everything-joe/Spartan.md:278
#: src/zk-everything/zk-everything-joe/Spartan.md:309
#: src/zk-everything/zk-everything-joe/Spartan.md:319
#: src/zk-everything/zk-everything-joe/Spartan.md:334
#: src/zk-everything/zk-everything-joe/Spartan.md:344
#: src/zk-everything/zk-everything-joe/Spartan.md:347
#: src/zk-everything/zk-everything-joe/Spartan.md:350
#: src/zk-everything/zk-everything-joe/Spartan.md:360
#: src/zk-everything/zk-everything-joe/Spartan.md:382
#: src/zk-everything/zk-everything-joe/Spartan.md:389
#: src/zk-everything/zk-everything-joe/Spartan.md:394
#: src/zk-everything/zk-everything-joe/Spartan.md:396
#: src/zk-everything/zk-everything-joe/Spartan.md:406
#: src/zk-everything/zk-everything-joe/Spartan.md:411
#: src/zk-everything/zk-everything-joe/Spartan.md:416
#: src/zk-everything/zk-everything-joe/Spartan.md:428
#: src/zk-everything/zk-everything-joe/Spartan.md:436
#: src/zk-everything/zk-everything-joe/Spartan.md:450 src/Nova/SuperNova.md:12
#: src/Nova/SuperNova.md:14 src/Nova/SuperNova.md:31 src/Nova/SuperNova.md:66
#: src/public goods/第二章.md:9 goods/第二章.md:10 goods/第二章.md:17
#: goods/第二章.md:18 goods/第二章.md:19 goods/第二章.md:20
#: goods/第二章.md:25 goods/第二章.md:33 goods/第二章.md:52
#: goods/第二章.md:58 goods/第二章.md:60 goods/第二章.md:65
#: goods/第二章.md:70 goods/第二章.md:74 goods/第二章.md:80
#: goods/第二章.md:81 goods/第二章.md:89 goods/第二章.md:97
#: goods/第二章.md:103 goods/第二章.md:107 goods/第二章.md:129
#: goods/第二章.md:147 goods/第二章.md:158 goods/第二章.md:160
#: goods/第二章.md:162 goods/第二章.md:164 goods/第二章.md:177
#: goods/4-Proving-System.md:105 goods/4-Proving-System.md:111
#: goods/4-Proving-System.md:125 goods/4-Proving-System.md:131
#: goods/4-Proving-System.md:149 goods/4-Proving-System.md:155
msgid "1"
msgstr "1"

#: src/zkp-intro/1/zkp-back.md:200
#: src/plonk-intro-cn/plonk-arithmetization.md:155
#: src/plonk-intro-cn/plonk-arithmetization.md:239
#: src/plonk-intro-cn/plonk-arithmetization.md:241
#: src/plonk-intro-cn/plonk-arithmetization.md:249
#: src/plonk-intro-cn/plonk-arithmetization.md:257
#: src/plonk-intro-cn/plonk-lagrange-basis.md:18
#: src/plonk-intro-cn/plonk-lagrange-basis.md:30
#: src/plonk-intro-cn/plonk-lagrange-basis.md:32
#: src/plonk-intro-cn/plonk-lagrange-basis.md:34
#: src/plonk-intro-cn/plonk-lagrange-basis.md:36
#: src/plonk-intro-cn/plonk-lagrange-basis.md:42
#: src/plonk-intro-cn/plonk-lagrange-basis.md:54
#: src/plonk-intro-cn/plonk-lagrange-basis.md:58
#: src/plonk-intro-cn/plonk-lagrange-basis.md:60
#: src/plonk-intro-cn/plonk-lagrange-basis.md:62
#: src/plonk-intro-cn/plonk-lagrange-basis.md:64
#: src/plonk-intro-cn/plonk-lagrange-basis.md:66
#: src/plonk-intro-cn/plonk-lagrange-basis.md:78
#: src/plonk-intro-cn/plonk-lagrange-basis.md:80
#: src/plonk-intro-cn/plonk-lagrange-basis.md:82
#: src/plonk-intro-cn/plonk-lagrange-basis.md:83
#: src/plonk-intro-cn/plonk-lagrange-basis.md:85
#: src/plonk-intro-cn/plonk-lagrange-basis.md:101
#: src/plonk-intro-cn/plonk-lagrange-basis.md:105
#: src/plonk-intro-cn/plonk-lagrange-basis.md:111
#: src/plonk-intro-cn/plonk-lagrange-basis.md:113
#: src/plonk-intro-cn/plonk-lagrange-basis.md:119
#: src/plonk-intro-cn/plonk-lagrange-basis.md:121
#: src/plonk-intro-cn/plonk-lagrange-basis.md:129
#: src/plonk-intro-cn/plonk-lagrange-basis.md:131
#: src/plonk-intro-cn/plonk-lagrange-basis.md:135
#: src/plonk-intro-cn/plonk-lagrange-basis.md:137
#: src/plonk-intro-cn/plonk-lagrange-basis.md:139
#: src/plonk-intro-cn/plonk-lagrange-basis.md:143
#: src/plonk-intro-cn/plonk-lagrange-basis.md:147
#: src/plonk-intro-cn/plonk-lagrange-basis.md:151
#: src/plonk-intro-cn/plonk-lagrange-basis.md:172
#: src/plonk-intro-cn/plonk-permutation.md:48
#: src/plonk-intro-cn/plonk-permutation.md:58
#: src/plonk-intro-cn/plonk-permutation.md:68
#: src/plonk-intro-cn/plonk-permutation.md:76
#: src/plonk-intro-cn/plonk-permutation.md:80
#: src/plonk-intro-cn/plonk-permutation.md:82
#: src/plonk-intro-cn/plonk-permutation.md:84
#: src/plonk-intro-cn/plonk-permutation.md:86
#: src/plonk-intro-cn/plonk-permutation.md:88
#: src/plonk-intro-cn/plonk-permutation.md:96
#: src/plonk-intro-cn/plonk-permutation.md:98
#: src/plonk-intro-cn/plonk-permutation.md:112
#: src/plonk-intro-cn/plonk-permutation.md:116
#: src/plonk-intro-cn/plonk-permutation.md:124
#: src/plonk-intro-cn/plonk-permutation.md:128
#: src/plonk-intro-cn/plonk-permutation.md:140
#: src/plonk-intro-cn/plonk-permutation.md:144
#: src/plonk-intro-cn/plonk-permutation.md:148
#: src/plonk-intro-cn/plonk-permutation.md:161
#: src/plonk-intro-cn/plonk-permutation.md:162
#: src/plonk-intro-cn/plonk-permutation.md:179
#: src/plonk-intro-cn/plonk-permutation.md:180
#: src/plonk-intro-cn/plonk-permutation.md:204
#: src/plonk-intro-cn/plonk-permutation.md:212
#: src/plonk-intro-cn/plonk-constraints.md:93
#: src/plonk-intro-cn/plonk-constraints.md:99
#: src/plonk-intro-cn/plonk-constraints.md:127
#: src/plonk-intro-cn/plonk-constraints.md:133
#: src/plonk-intro-cn/plonk-constraints.md:153
#: src/plonk-intro-cn/plonk-constraints.md:155
#: src/plonk-intro-cn/plonk-constraints.md:163
#: src/plonk-intro-cn/plonk-constraints.md:169
#: src/plonk-intro-cn/plonk-constraints.md:175
#: src/plonk-intro-cn/plonk-constraints.md:199
#: src/plonk-intro-cn/plonk-polycom.md:47
#: src/plonk-intro-cn/plonk-polycom.md:53
#: src/plonk-intro-cn/plonk-polycom.md:59
#: src/plonk-intro-cn/plonk-polycom.md:65
#: src/plonk-intro-cn/plonk-polycom.md:67
#: src/plonk-intro-cn/plonk-polycom.md:69
#: src/plonk-intro-cn/plonk-polycom.md:71
#: src/plonk-intro-cn/plonk-polycom.md:75
#: src/plonk-intro-cn/plonk-polycom.md:79
#: src/plonk-intro-cn/plonk-polycom.md:81
#: src/plonk-intro-cn/plonk-polycom.md:89
#: src/plonk-intro-cn/plonk-polycom.md:97
#: src/plonk-intro-cn/plonk-polycom.md:117
#: src/plonk-intro-cn/plonk-polycom.md:136
#: src/plonk-intro-cn/plonk-polycom.md:179
#: src/plonk-intro-cn/plonk-polycom.md:183
#: src/plonk-intro-cn/plonk-polycom.md:187
#: src/plonk-intro-cn/plonk-polycom.md:213
#: src/plonk-intro-cn/plonk-polycom.md:229
#: src/plonk-intro-cn/plonk-randomizing.md:33
#: src/plonk-intro-cn/plonk-randomizing.md:41
#: src/plonk-intro-cn/plonk-randomizing.md:65
#: src/plonk-intro-cn/plonk-randomizing.md:69
#: src/plonk-intro-cn/plonk-randomizing.md:90
#: src/plonk-intro-cn/plonk-randomizing.md:92
#: src/plonk-intro-cn/plonk-randomizing.md:93
#: src/plonk-intro-cn/plonk-randomizing.md:101
#: src/plonk-intro-cn/plonk-randomizing.md:103
#: src/plonk-intro-cn/plonk-randomizing.md:104
#: src/plonk-intro-cn/plonk-randomizing.md:106
#: src/plonk-intro-cn/plonk-randomizing.md:110
#: src/plonk-intro-cn/plonk-randomizing.md:112
#: src/plonk-intro-cn/plonk-randomizing.md:115
#: src/plonk-intro-cn/plonk-randomizing.md:117
#: src/plonk-intro-cn/plonk-randomizing.md:119
#: src/plonk-intro-cn/plonk-randomizing.md:121
#: src/plonk-intro-cn/plonk-randomizing.md:123
#: src/plonk-intro-cn/plonk-randomizing.md:125
#: src/plonk-intro-cn/plonk-randomizing.md:127
#: src/plonk-intro-cn/plonk-randomizing.md:129
#: src/plonk-intro-cn/plonk-randomizing.md:143
#: src/plonk-intro-cn/plonk-randomizing.md:145
#: src/plonk-intro-cn/plonk-randomizing.md:149
#: src/plonk-intro-cn/plonk-randomizing.md:153
#: src/plonk-intro-cn/plonk-randomizing.md:159
#: src/plonk-intro-cn/plonk-lookup.md:41 src/plonk-intro-cn/plonk-lookup.md:55
#: src/plonk-intro-cn/plonk-lookup.md:59 src/plonk-intro-cn/plonk-lookup.md:63
#: src/plonk-intro-cn/plonk-lookup.md:69 src/plonk-intro-cn/plonk-lookup.md:87
#: src/plonk-intro-cn/plonk-lookup.md:93 src/plonk-intro-cn/plonk-lookup.md:97
#: src/plonk-intro-cn/plonk-lookup.md:101
#: src/plonk-intro-cn/plonk-lookup.md:125
#: src/plonk-intro-cn/plonk-lookup.md:131
#: src/plonk-intro-cn/plonk-lookup.md:139
#: src/plonk-intro-cn/plonk-lookup.md:163
#: src/plonk-intro-cn/plonk-lookup.md:167
#: src/plonk-intro-cn/plonk-lookup.md:169
#: src/plonk-intro-cn/plonk-lookup.md:173
#: src/plonk-intro-cn/plonk-lookup.md:196
#: src/plonk-intro-cn/plonk-lookup.md:200
#: src/plonk-intro-cn/plonk-lookup.md:210
#: src/plonk-intro-cn/plonk-lookup.md:212
#: src/plonk-intro-cn/plonk-lookup.md:234
#: src/plonk-intro-cn/plonk-lookup.md:269
#: src/plonk-intro-cn/plonk-lookup.md:275
#: src/plonk-intro-cn/plonk-lookup.md:285
#: src/plonk-intro-cn/plonk-lookup.md:293
#: src/plonk-intro-cn/plonk-lookup.md:304
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:59
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:103
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:106
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:111
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:112
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:114
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:116
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:150
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:194
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:308
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:316
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:318
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:88
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:229
#: src/zk-snarks/3-General-Purpose-Computation.md:39
#: src/zk-snarks/3-General-Purpose-Computation.md:68
#: src/zk-snarks/3-General-Purpose-Computation.md:70
#: src/zk-snarks/3-General-Purpose-Computation.md:79
#: src/zk-snarks/3-General-Purpose-Computation.md:90
#: src/zk-snarks/3-General-Purpose-Computation.md:98
#: src/zk-snarks/3-General-Purpose-Computation.md:149
#: src/zk-snarks/3-General-Purpose-Computation.md:159
#: src/zk-snarks/3-General-Purpose-Computation.md:171
#: src/zk-snarks/3-General-Purpose-Computation.md:173
#: src/zk-snarks/3-General-Purpose-Computation.md:182
#: src/zk-snarks/3-General-Purpose-Computation.md:184
#: src/zk-snarks/4-Construction-Properties.md:29
#: src/zk-snarks/4-Construction-Properties.md:82
#: src/zk-snarks/4-Construction-Properties.md:83
#: src/zk-snarks/4-Construction-Properties.md:105
#: src/zk-snarks/4-Construction-Properties.md:108
#: src/zk-snarks/4-Construction-Properties.md:112
#: src/zk-snarks/4-Construction-Properties.md:113
#: src/zk-snarks/4-Construction-Properties.md:128
#: src/zk-snarks/4-Construction-Properties.md:133
#: src/zk-snarks/4-Construction-Properties.md:134
#: src/zk-snarks/4-Construction-Properties.md:135
#: src/zk-snarks/4-Construction-Properties.md:136
#: src/zk-snarks/4-Construction-Properties.md:137
#: src/zk-snarks/4-Construction-Properties.md:138
#: src/zk-snarks/4-Construction-Properties.md:139
#: src/zk-snarks/4-Construction-Properties.md:151
#: src/zk-snarks/4-Construction-Properties.md:155
#: src/zk-snarks/4-Construction-Properties.md:170
#: src/zk-snarks/4-Construction-Properties.md:171
#: src/zk-snarks/4-Construction-Properties.md:172
#: src/zk-snarks/4-Construction-Properties.md:176
#: src/zk-snarks/4-Construction-Properties.md:178
#: src/zk-snarks/4-Construction-Properties.md:184
#: src/zk-snarks/4-Construction-Properties.md:195
#: src/zk-snarks/4-Construction-Properties.md:197
#: src/zk-snarks/4-Construction-Properties.md:205
#: src/zk-snarks/4-Construction-Properties.md:289
#: src/zk-snarks/4-Construction-Properties.md:290
#: src/zk-snarks/4-Construction-Properties.md:291
#: src/zk-snarks/4-Construction-Properties.md:340
#: src/zk-snarks/5-Pinocchio-Protocol.md:28
#: src/zk-snarks/5-Pinocchio-Protocol.md:76
#: src/zk-snarks/5-Pinocchio-Protocol.md:84
#: src/zk-snarks/5-Pinocchio-Protocol.md:92
#: src/zk-snarks/5-Pinocchio-Protocol.md:131
#: src/zk-snarks/5-Pinocchio-Protocol.md:142
#: src/zk-snarks/5-Pinocchio-Protocol.md:145
#: src/zk-snarks/5-Pinocchio-Protocol.md:147
#: src/zk-snarks/5-Pinocchio-Protocol.md:151
#: src/zk-snarks/5-Pinocchio-Protocol.md:152
#: src/zk-snarks/5-Pinocchio-Protocol.md:157
#: src/zk-snarks/5-Pinocchio-Protocol.md:160
#: src/zk-snarks/5-Pinocchio-Protocol.md:163
#: src/zk-snarks/5-Pinocchio-Protocol.md:165
#: src/zk-snarks/5-Pinocchio-Protocol.md:170
#: src/zk-snarks/5-Pinocchio-Protocol.md:202
#: src/zk-snarks/5-Pinocchio-Protocol.md:204
#: src/halo2/tmp/3-Fibonacci-example-2.md:84
#: src/halo2/tmp/3-Fibonacci-example-2.md:269 src/halo2/tmp/9-decomposed.md:24
#: src/halo2/tmp/9-decomposed.md:27 src/halo2/tmp/9-decomposed.md:30
#: src/halo2/tmp/9-decomposed.md:42 src/halo2/tmp/9-decomposed.md:46
#: src/halo2/tmp/9-decomposed.md:53 src/halo2/tmp/9-decomposed.md:101
#: src/halo2/tmp/9-decomposed.md:106 src/halo2/tmp/9-decomposed.md:108
#: src/halo2/tmp/9-decomposed.md:126 src/halo2/tmp/9-decomposed.md:127
#: src/halo2/tmp/9-decomposed.md:139 src/halo2/tmp/9-decomposed.md:142
#: src/halo2/tmp/9-decomposed.md:216 src/halo2/tmp/9-decomposed.md:273
#: src/zk-everything/BabySNARK tutorial.md:116 tutorial.md:131 tutorial.md:140
#: tutorial.md:148 tutorial.md:163 tutorial.md:165 tutorial.md:168
#: tutorial.md:172 tutorial.md:177
#: src/zk-everything/zk-learning-miles/KZG.md:10
#: src/zk-everything/zk-learning-miles/KZG.md:12
#: src/zk-everything/zk-learning-miles/KZG.md:106
#: src/zk-everything/zk-learning-miles/KZG.md:110
#: src/zk-everything/zk-learning-miles/KZG.md:114
#: src/zk-everything/zk-learning-miles/KZG.md:185
#: src/zk-everything/zk-learning-miles/KZG.md:203
#: src/zk-everything/zk-learning-miles/KZG.md:207
#: src/zk-everything/zk-learning-miles/KZG.md:209
#: src/zk-everything/zk-learning-miles/KZG.md:211
#: src/zk-everything/zk-learning-miles/KZG.md:213
#: src/zk-everything/zk-learning-miles/KZG.md:222
#: src/zk-everything/zk-learning-miles/KZG.md:246
#: src/zk-everything/zk-learning-miles/KZG.md:248
#: src/zk-everything/zk-learning-miles/KZG.md:250
#: src/zk-everything/zk-learning-miles/KZG.md:270
#: src/zk-everything/zk-learning-miles/KZG.md:272
#: src/zk-everything/zk-learning-miles/KZG.md:274
#: src/zk-everything/zk-learning-miles/KZG.md:276
#: src/zk-everything/zk-learning-miles/KZG.md:318
#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:207 Zeroknowledge.md:238
#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:197 SNARKs.md:198 SNARKs.md:324 SNARKs.md:368 SNARKs.md:369
#: SNARKs.md:370 SNARKs.md:371 SNARKs.md:372 SNARKs.md:373 SNARKs.md:383
#: SNARKs.md:407 SNARKs.md:410
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:58
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:64
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:79
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:128
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:145
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:152
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:162
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:170
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:204
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:212
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:246
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:255
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:292
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:301
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:336
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:343
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:383
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:396
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:405
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:418
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:460
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:486
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:526
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:532
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:538
#: src/zk-everything/zk-everything-joe/Hyrax.md:98
#: src/zk-everything/zk-everything-joe/Hyrax.md:191
#: src/zk-everything/zk-everything-joe/Hyrax.md:207
#: src/zk-everything/zk-everything-joe/Hyrax.md:208
#: src/zk-everything/zk-everything-joe/Hyrax.md:223
#: src/zk-everything/zk-everything-joe/Hyrax.md:228
#: src/zk-everything/zk-everything-joe/Hyrax.md:250
#: src/zk-everything/zk-everything-joe/Hyrax.md:297
#: src/zk-everything/zk-everything-joe/Spartan.md:118
#: src/zk-everything/zk-everything-joe/Spartan.md:177
#: src/zk-everything/zk-everything-joe/Spartan.md:344
#: src/zk-everything/zk-everything-joe/Spartan.md:350
#: src/zk-everything/zk-everything-joe/Spartan.md:394
#: src/zk-everything/zk-everything-joe/Spartan.md:401
#: src/zk-everything/zk-everything-joe/Spartan.md:411
#: src/zk-everything/zk-everything-joe/Spartan.md:416
#: src/zk-everything/zk-everything-joe/Spartan.md:436
#: src/zk-everything/zk-everything-joe/Spartan.md:441
#: src/zk-everything/zk-everything-joe/Spartan.md:450 src/Nova/SuperNova.md:14
#: src/Nova/SuperNova.md:17 src/public goods/第二章.md:52
#: goods/第二章.md:54 goods/第二章.md:56 goods/第二章.md:58
#: goods/第二章.md:60 goods/第二章.md:65 goods/第二章.md:74
#: goods/第二章.md:80 goods/第二章.md:89 goods/第二章.md:97
#: goods/第二章.md:103 goods/第二章.md:107 goods/第二章.md:111
#: goods/第二章.md:125 goods/第二章.md:129 goods/第二章.md:146
#: goods/第二章.md:147 goods/第二章.md:158 goods/第二章.md:160
#: goods/第二章.md:162 goods/第二章.md:164 goods/第二章.md:177
#: goods/4-Proving-System.md:105 goods/4-Proving-System.md:111
#: goods/4-Proving-System.md:125 goods/4-Proving-System.md:131
#: goods/4-Proving-System.md:149 goods/4-Proving-System.md:155
msgid "−"
msgstr "−"

#: src/zkp-intro/1/zkp-back.md:200 src/zkp-intro/4/zkp-rom.md:151
#: src/plonk-intro-cn/plonk-arithmetization.md:97
#: src/plonk-intro-cn/plonk-arithmetization.md:99
#: src/plonk-intro-cn/plonk-arithmetization.md:145
#: src/plonk-intro-cn/plonk-arithmetization.md:149
#: src/plonk-intro-cn/plonk-lagrange-basis.md:18
#: src/plonk-intro-cn/plonk-lagrange-basis.md:50
#: src/plonk-intro-cn/plonk-lagrange-basis.md:62
#: src/plonk-intro-cn/plonk-lagrange-basis.md:70
#: src/plonk-intro-cn/plonk-lagrange-basis.md:76
#: src/plonk-intro-cn/plonk-lagrange-basis.md:78
#: src/plonk-intro-cn/plonk-lagrange-basis.md:143
#: src/plonk-intro-cn/plonk-lagrange-basis.md:147
#: src/plonk-intro-cn/plonk-permutation.md:48
#: src/plonk-intro-cn/plonk-permutation.md:58
#: src/plonk-intro-cn/plonk-permutation.md:82
#: src/plonk-intro-cn/plonk-permutation.md:84
#: src/plonk-intro-cn/plonk-permutation.md:86
#: src/plonk-intro-cn/plonk-permutation.md:88
#: src/plonk-intro-cn/plonk-permutation.md:90
#: src/plonk-intro-cn/plonk-permutation.md:98
#: src/plonk-intro-cn/plonk-permutation.md:112
#: src/plonk-intro-cn/plonk-permutation.md:124
#: src/plonk-intro-cn/plonk-permutation.md:128
#: src/plonk-intro-cn/plonk-permutation.md:140
#: src/plonk-intro-cn/plonk-permutation.md:144
#: src/plonk-intro-cn/plonk-permutation.md:148
#: src/plonk-intro-cn/plonk-permutation.md:161
#: src/plonk-intro-cn/plonk-permutation.md:162
#: src/plonk-intro-cn/plonk-permutation.md:179
#: src/plonk-intro-cn/plonk-permutation.md:180
#: src/plonk-intro-cn/plonk-polycom.md:21
#: src/plonk-intro-cn/plonk-polycom.md:25
#: src/plonk-intro-cn/plonk-polycom.md:29
#: src/plonk-intro-cn/plonk-polycom.md:33
#: src/plonk-intro-cn/plonk-polycom.md:53
#: src/plonk-intro-cn/plonk-polycom.md:59
#: src/plonk-intro-cn/plonk-randomizing.md:33
#: src/plonk-intro-cn/plonk-randomizing.md:35
#: src/plonk-intro-cn/plonk-randomizing.md:69
#: src/plonk-intro-cn/plonk-randomizing.md:143
#: src/plonk-intro-cn/plonk-randomizing.md:145
#: src/plonk-intro-cn/plonk-randomizing.md:149
#: src/plonk-intro-cn/plonk-lookup.md:33 src/plonk-intro-cn/plonk-lookup.md:41
#: src/plonk-intro-cn/plonk-lookup.md:208
#: src/plonk-intro-cn/plonk-lookup.md:210
#: src/plonk-intro-cn/plonk-lookup.md:212
#: src/plonk-intro-cn/plonk-lookup.md:214
#: src/plonk-intro-cn/plonk-lookup.md:218
#: src/plonk-intro-cn/plonk-lookup.md:224
#: src/plonk-intro-cn/plonk-lookup.md:238
#: src/plonk-intro-cn/plonk-lookup.md:279
#: src/plonk-intro-cn/plonk-lookup.md:297
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:95
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:103
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:269
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:271
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:272
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:279
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:281
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:313
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:332
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:337
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:349
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:350
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:26
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:42
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:43
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:47
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:172
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:177
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:194
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:298
#: src/zk-snarks/3-General-Purpose-Computation.md:137
#: src/zk-snarks/3-General-Purpose-Computation.md:226
#: src/zk-snarks/3-General-Purpose-Computation.md:295
#: src/zk-snarks/4-Construction-Properties.md:48
#: src/zk-snarks/4-Construction-Properties.md:63
#: src/zk-snarks/4-Construction-Properties.md:65
#: src/zk-snarks/4-Construction-Properties.md:67
#: src/zk-snarks/4-Construction-Properties.md:192
#: src/zk-snarks/4-Construction-Properties.md:195
#: src/zk-snarks/4-Construction-Properties.md:199
#: src/zk-snarks/4-Construction-Properties.md:203
#: src/zk-snarks/4-Construction-Properties.md:204
#: src/zk-snarks/4-Construction-Properties.md:205
#: src/zk-snarks/4-Construction-Properties.md:206
#: src/zk-snarks/4-Construction-Properties.md:207
#: src/zk-snarks/4-Construction-Properties.md:209
#: src/zk-snarks/4-Construction-Properties.md:221
#: src/zk-snarks/4-Construction-Properties.md:244
#: src/zk-snarks/4-Construction-Properties.md:249
#: src/zk-snarks/4-Construction-Properties.md:277
#: src/zk-snarks/4-Construction-Properties.md:298
#: src/zk-snarks/4-Construction-Properties.md:304
#: src/zk-snarks/4-Construction-Properties.md:307
#: src/zk-snarks/4-Construction-Properties.md:407
#: src/zk-snarks/4-Construction-Properties.md:422
#: src/zk-snarks/4-Construction-Properties.md:428
#: src/zk-snarks/5-Pinocchio-Protocol.md:45
#: src/zk-snarks/5-Pinocchio-Protocol.md:46
#: src/zk-snarks/5-Pinocchio-Protocol.md:48
#: src/zk-snarks/5-Pinocchio-Protocol.md:50
#: src/zk-snarks/5-Pinocchio-Protocol.md:52
#: src/zk-snarks/5-Pinocchio-Protocol.md:62
#: src/zk-snarks/5-Pinocchio-Protocol.md:82
#: src/zk-snarks/5-Pinocchio-Protocol.md:83
#: src/zk-snarks/5-Pinocchio-Protocol.md:84
#: src/zk-snarks/5-Pinocchio-Protocol.md:87
#: src/zk-snarks/5-Pinocchio-Protocol.md:106
#: src/zk-snarks/5-Pinocchio-Protocol.md:118
#: src/zk-snarks/5-Pinocchio-Protocol.md:136
#: src/zk-snarks/5-Pinocchio-Protocol.md:187
#: src/zk-snarks/5-Pinocchio-Protocol.md:188
#: src/zk-snarks/5-Pinocchio-Protocol.md:192
#: src/zk-snarks/5-Pinocchio-Protocol.md:198
#: src/zk-snarks/5-Pinocchio-Protocol.md:199
#: src/zk-snarks/5-Pinocchio-Protocol.md:204
#: src/zk-snarks/5-Pinocchio-Protocol.md:207 src/halo2/chap-1/index.md:11
#: src/halo2/tmp/9-decomposed.md:21 src/halo2/tmp/9-decomposed.md:24
#: src/halo2/tmp/9-decomposed.md:30 src/halo2/tmp/9-decomposed.md:101
#: src/halo2/tmp/9-decomposed.md:126 src/halo2/tmp/9-decomposed.md:127
#: src/halo2/tmp/9-decomposed.md:273 src/halo2/tmp/Zordle.md:79
#: src/zk-everything/BabySNARK tutorial.md:31 tutorial.md:129 tutorial.md:154
#: src/zk-everything/zk-learning-miles/KZG.md:12
#: src/zk-everything/zk-learning-miles/KZG.md:93
#: src/zk-everything/zk-learning-miles/KZG.md:96
#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:238 Zeroknowledge.md:239
#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:350 SNARKs.md:362 SNARKs.md:364 SNARKs.md:381
#: src/zk-everything/zk-everything-joe/Hyrax.md:140
#: src/zk-everything/zk-everything-joe/Hyrax.md:306
#: src/zk-everything/zk-everything-joe/Spartan.md:304
#: src/zk-everything/zk-everything-joe/Spartan.md:312
#: src/zk-everything/zk-everything-joe/Spartan.md:314
#: src/zk-everything/zk-everything-joe/Spartan.md:327
#: src/zk-everything/zk-everything-joe/Spartan.md:339
#: src/zk-everything/zk-everything-joe/Spartan.md:350 src/Nova/SuperNova.md:14
#: src/Nova/SuperNova.md:30 src/public goods/第二章.md:9
#: goods/第二章.md:10 goods/第二章.md:16 goods/第二章.md:17
#: goods/第二章.md:18 goods/第二章.md:19 goods/第二章.md:20
#: goods/第二章.md:25 goods/第二章.md:26 goods/第二章.md:33
#: goods/第二章.md:52 goods/第二章.md:54 goods/第二章.md:56
#: goods/第二章.md:58 goods/第二章.md:61 goods/第二章.md:65
#: goods/第二章.md:70 goods/第二章.md:80 goods/第二章.md:83
#: goods/第二章.md:89 goods/第二章.md:97 goods/第二章.md:103
#: goods/第二章.md:107 goods/第二章.md:125 goods/第二章.md:129
#: goods/第二章.md:146 goods/4-Proving-System.md:58
#: goods/4-Proving-System.md:157
msgid "n"
msgstr "n"

#: src/zkp-intro/1/zkp-back.md:202
msgid ""
"这里 `|E|` 是图中所有边的个数， 如果 `n` 足够大，这个概率 `Pr` 会变得非常非常"
"小，变得「微不足道」。"
msgstr ""
"这里 `|E|` 是图中所有边的个数， 如果 `n` 足够大，这个概率 `Pr` 会变得非常非常"
"小，变得「微不足道」。"

#: src/zkp-intro/1/zkp-back.md:204
msgid ""
"可是，Bob 每次看到的局部染色情况都是 Alice 变换过后的结果，无论 Bob 看多少"
"次，都不能拼出一个完整的三染色答案出来。实际上，Bob 在这个过程中，虽然获得了"
"很多「信息」，但是却没有获得真正的「知识」。"
msgstr ""
"可是，Bob 每次看到的局部染色情况都是 Alice 变换过后的结果，无论 Bob 看多少"
"次，都不能拼出一个完整的三染色答案出来。实际上，Bob 在这个过程中，虽然获得了"
"很多「信息」，但是却没有获得真正的「知识」。"

#: src/zkp-intro/1/zkp-back.md:206
msgid "信息 vs. 知识"
msgstr "信息 vs. 知识"

#: src/zkp-intro/1/zkp-back.md:208
msgid "信息 「Information」"
msgstr "信息 「Information」"

#: src/zkp-intro/1/zkp-back.md:209
msgid "知识 「Knowledge」"
msgstr "知识 「Knowledge」"

#: src/zkp-intro/1/zkp-back.md:211
msgid ""
"在地图三染色问题的交互证明中，当重复交互很多次之后，Bob 得到了大量的信息，但"
"是这好比 Alice 发给 Bob 一堆随机数一样，Bob 并没有「知道」更多的东西。打个比"
"方，如果 Alice 告诉 Bob 「1+1=2」，Bob 得到了这个信息，可是 Bob 并没有额外获"
"取更多的「知识」，因为这个事实人人皆知。"
msgstr ""
"在地图三染色问题的交互证明中，当重复交互很多次之后，Bob 得到了大量的信息，但"
"是这好比 Alice 发给 Bob 一堆随机数一样，Bob 并没有「知道」更多的东西。打个比"
"方，如果 Alice 告诉 Bob 「1+1=2」，Bob 得到了这个信息，可是 Bob 并没有额外获"
"取更多的「知识」，因为这个事实人人皆知。"

#: src/zkp-intro/1/zkp-back.md:213
msgid ""
"假如 Alice 告诉 Bob `2^2^41-1`这个数是一个质数，很显然这个是「知识」，因为要"
"算出来这个数是不是一个质数，这需要耗费大量的算力。"
msgstr ""
"假如 Alice 告诉 Bob `2^2^41-1`这个数是一个质数，很显然这个是「知识」，因为要"
"算出来这个数是不是一个质数，这需要耗费大量的算力。"

#: src/zkp-intro/1/zkp-back.md:215
msgid ""
"假如 Alice 告诉 Bob，总共有两个顶点用了绿颜色，那么 Bob 就获得了宝贵的「知"
"识」，因为基于他刚刚获取的这个信息，Bob 可以用更短的时间用一台图灵机去求解三"
"染色问题。假如 Alice 又透露给 Bob，最左边的顶点颜色是用橙色，那么很显然，这个"
"「信息」对于 Bob 求解问题并没有实质上的帮助。"
msgstr ""
"假如 Alice 告诉 Bob，总共有两个顶点用了绿颜色，那么 Bob 就获得了宝贵的「知"
"识」，因为基于他刚刚获取的这个信息，Bob 可以用更短的时间用一台图灵机去求解三"
"染色问题。假如 Alice 又透露给 Bob，最左边的顶点颜色是用橙色，那么很显然，这个"
"「信息」对于 Bob 求解问题并没有实质上的帮助。"

#: src/zkp-intro/1/zkp-back.md:217
msgid ""
"我们可以尝试定义一下，如果 Bob 在交互过程中获得的「信息」，可以帮助提升 Bob "
"直接破解 Alice 秘密的能力，那么我们说 Bob 「获得了知识」。由此可见，知识这个"
"词的定义与 Bob 的计算能力相关，如果信息并不能增加 Bob 的计算能力，那么信息不"
"能被称为「知识」。比如在 Alice 与 Bob 交互过程中，Alice 每次都掷一个硬币，然"
"后告诉 Bob 结果，从信息角度看，Bob 得到的信息只是一个「事件」，然而 Bob 并没"
"有得到任何「知识」，因为 Bob 完全可以自己来掷硬币。"
msgstr ""
"我们可以尝试定义一下，如果 Bob 在交互过程中获得的「信息」，可以帮助提升 Bob "
"直接破解 Alice 秘密的能力，那么我们说 Bob 「获得了知识」。由此可见，知识这个"
"词的定义与 Bob 的计算能力相关，如果信息并不能增加 Bob 的计算能力，那么信息不"
"能被称为「知识」。比如在 Alice 与 Bob 交互过程中，Alice 每次都掷一个硬币，然"
"后告诉 Bob 结果，从信息角度看，Bob 得到的信息只是一个「事件」，然而 Bob 并没"
"有得到任何「知识」，因为 Bob 完全可以自己来掷硬币。"

#: src/zkp-intro/1/zkp-back.md:219
msgid ""
"下面引用『Foundations of Cryptography—— Basic Tools』一书\\[10\\]中的总结"
msgstr ""
"下面引用『Foundations of Cryptography—— Basic Tools』一书\\[10\\]中的总结"

#: src/zkp-intro/1/zkp-back.md:221
msgid "「知识」是与「计算难度」相关，而「信息」则不是"
msgstr "「知识」是与「计算难度」相关，而「信息」则不是"

#: src/zkp-intro/1/zkp-back.md:223
msgid "「知识」是与公共所知的东西有关，而「信息」主要与部分公开的东西有关"
msgstr "「知识」是与公共所知的东西有关，而「信息」主要与部分公开的东西有关"

#: src/zkp-intro/1/zkp-back.md:225
msgid ""
"注：曾有人问我，这里的信息与知识的定义是否与 Kolmogorov 复杂性有关。根据算法"
"信息论，一段字符串的信息量可以用产生字符串的最小程序的长度来测量。这个问题我"
"不是很懂，希望路过的专业人士留言。"
msgstr ""
"注：曾有人问我，这里的信息与知识的定义是否与 Kolmogorov 复杂性有关。根据算法"
"信息论，一段字符串的信息量可以用产生字符串的最小程序的长度来测量。这个问题我"
"不是很懂，希望路过的专业人士留言。"

#: src/zkp-intro/1/zkp-back.md:227
msgid "可验证计算与电路可满足性问题"
msgstr "可验证计算与电路可满足性问题"

#: src/zkp-intro/1/zkp-back.md:229
msgid ""
"看了上面的地图三染色问题，大家是不是没有感觉，好像这只是一个学术问题，如何跟"
"现实问题关联起来？地图三染色问题是一个 NP-Complete 问题，这是「计算理论」中的"
"一个名词。另外有一个叫做「电路可满足问题」也是同样是 NP-Complete 问题。NP-"
"Complete 是一类问题，他的求解过程是多项式时间内难以完成的，即「求解困难」，但"
"是验证解的过程是多项式时间可以完成的，即「验证简单」。"
msgstr ""
"看了上面的地图三染色问题，大家是不是没有感觉，好像这只是一个学术问题，如何跟"
"现实问题关联起来？地图三染色问题是一个 NP-Complete 问题，这是「计算理论」中的"
"一个名词。另外有一个叫做「电路可满足问题」也是同样是 NP-Complete 问题。NP-"
"Complete 是一类问题，他的求解过程是多项式时间内难以完成的，即「求解困难」，但"
"是验证解的过程是多项式时间可以完成的，即「验证简单」。"

#: src/zkp-intro/1/zkp-back.md:231
msgid "那什么是电路呢？下面是三个不同的「算术电路」："
msgstr "那什么是电路呢？下面是三个不同的「算术电路」："

#: src/zkp-intro/1/zkp-back.md:233
msgid "![circuits](img/circuits.png)"
msgstr "![circuits](img/circuits.png)"

#: src/zkp-intro/1/zkp-back.md:235
msgid ""
"可以看到一个电路由很多个门组成，其中有加法门，还有乘法门。每一个门有几个输入"
"引脚，有几个输出引脚。每一个门做一次加法运算，或乘法运算。别看这么简单，我们"
"平时跑的（没有死循环）代码，都可以用算术电路来表示。"
msgstr ""
"可以看到一个电路由很多个门组成，其中有加法门，还有乘法门。每一个门有几个输入"
"引脚，有几个输出引脚。每一个门做一次加法运算，或乘法运算。别看这么简单，我们"
"平时跑的（没有死循环）代码，都可以用算术电路来表示。"

#: src/zkp-intro/1/zkp-back.md:237
msgid ""
"这意味着什么呢？我们下面结合「零知识证明」与「电路可满足性问题」来试着解决数"
"据的隐私保护问题。"
msgstr ""
"这意味着什么呢？我们下面结合「零知识证明」与「电路可满足性问题」来试着解决数"
"据的隐私保护问题。"

#: src/zkp-intro/1/zkp-back.md:239
msgid ""
"下面请思考一个场景：Bob 交给 Alice 一段代码 `P`，和一个输入 `x`，让 Alice 来"
"运行一遍，然后把运行结果告诉 Bob。可能这个计算需要消耗资源，而 Bob 把计算过程"
"外包给了 Alice。然后 Alice 运行了一遍，得到了结果 `y`。然后把 `y` 告诉 Bob。"
"下面问题来了："
msgstr ""
"下面请思考一个场景：Bob 交给 Alice 一段代码 `P`，和一个输入 `x`，让 Alice 来"
"运行一遍，然后把运行结果告诉 Bob。可能这个计算需要消耗资源，而 Bob 把计算过程"
"外包给了 Alice。然后 Alice 运行了一遍，得到了结果 `y`。然后把 `y` 告诉 Bob。"
"下面问题来了："

#: src/zkp-intro/1/zkp-back.md:241
msgid ""
"如何让 Bob 在不运行代码的前提下，相信代码 `P` 运行的结果一定是 `y` 呢？ "
msgstr ""
"如何让 Bob 在不运行代码的前提下，相信代码 `P` 运行的结果一定是 `y` 呢？ "

#: src/zkp-intro/1/zkp-back.md:243
msgid "这里是思考时间，大家可以想个五分钟 ……"
msgstr "这里是思考时间，大家可以想个五分钟 ……"

#: src/zkp-intro/1/zkp-back.md:245
msgid "（五分钟后……）"
msgstr "（五分钟后……）"

#: src/zkp-intro/1/zkp-back.md:247
msgid ""
"Alice 的一种做法是可以把整个计算过程用手机拍下来，这个视频里面包含了计算机 "
"CPU，还有内存，在整个运行过程中的每一晶体管的状态。很显然这么做是不现实的。那"
"么有没有更可行的方案呢？"
msgstr ""
"Alice 的一种做法是可以把整个计算过程用手机拍下来，这个视频里面包含了计算机 "
"CPU，还有内存，在整个运行过程中的每一晶体管的状态。很显然这么做是不现实的。那"
"么有没有更可行的方案呢？"

#: src/zkp-intro/1/zkp-back.md:249
msgid ""
"答案是 Bob 把程序 `P` 转换成一个完全等价的算术电路，然后把电路交给 Alice。"
"Alice 只要计算这个电路就可以了，然后这个过程是可以用手机拍下来的，或者用纸记"
"下来，如果电路规模没有那么大的话。Alice 只要把参数 6 输入到电路，然后记录下电"
"路在运算过程中，所有与门相连的引脚线上的值。并且最后的电路输出引脚的值等于 "
"`y`，那么 Bob 就能确信 Alice 确实进行了计算。Alice 需要把电路的所有门的输入与"
"输出写到一张纸上，交给 Bob，这张纸就是一个计算证明。"
msgstr ""
"答案是 Bob 把程序 `P` 转换成一个完全等价的算术电路，然后把电路交给 Alice。"
"Alice 只要计算这个电路就可以了，然后这个过程是可以用手机拍下来的，或者用纸记"
"下来，如果电路规模没有那么大的话。Alice 只要把参数 6 输入到电路，然后记录下电"
"路在运算过程中，所有与门相连的引脚线上的值。并且最后的电路输出引脚的值等于 "
"`y`，那么 Bob 就能确信 Alice 确实进行了计算。Alice 需要把电路的所有门的输入与"
"输出写到一张纸上，交给 Bob，这张纸就是一个计算证明。"

#: src/zkp-intro/1/zkp-back.md:251
msgid ""
"这样 Bob 完全可以在不重复计算电路的情况下来验证这张纸上的证明对不对，验证过程"
"很简单："
msgstr ""
"这样 Bob 完全可以在不重复计算电路的情况下来验证这张纸上的证明对不对，验证过程"
"很简单："

#: src/zkp-intro/1/zkp-back.md:253
msgid ""
"**Bob 依次检查每一个门的输入输出能不能满足一个加法等式或者一个乘法等式**。"
msgstr ""
"**Bob 依次检查每一个门的输入输出能不能满足一个加法等式或者一个乘法等式**。"

#: src/zkp-intro/1/zkp-back.md:255
msgid ""
"比如 1 号门是一个加法门，它的两个输入是 3，4，输出是7，那么很容易就知道这个门"
"的计算是正确的。当 Bob 检查完所有的门之后，就能确信："
msgstr ""
"比如 1 号门是一个加法门，它的两个输入是 3，4，输出是7，那么很容易就知道这个门"
"的计算是正确的。当 Bob 检查完所有的门之后，就能确信："

#: src/zkp-intro/1/zkp-back.md:257
msgid "Alice 确确实实进行了计算，没有作弊。"
msgstr "Alice 确确实实进行了计算，没有作弊。"

#: src/zkp-intro/1/zkp-back.md:259
msgid "这张纸上的内容就是「满足」算术电路 `P` 的一个解「Solution」。"
msgstr "这张纸上的内容就是「满足」算术电路 `P` 的一个解「Solution」。"

#: src/zkp-intro/1/zkp-back.md:261
msgid ""
"所谓的电路可满足性就是指，存在满足电路的一个解。如果这个解的输出值等于一个确"
"定值，那么这个解就能「表示」电路的计算过程。"
msgstr ""
"所谓的电路可满足性就是指，存在满足电路的一个解。如果这个解的输出值等于一个确"
"定值，那么这个解就能「表示」电路的计算过程。"

#: src/zkp-intro/1/zkp-back.md:263
msgid ""
"对于 Alice 而言，Bob 如果用这种方式验证，她完全没有作弊的空间。但是这种方法很"
"显然有个弊端："
msgstr ""
"对于 Alice 而言，Bob 如果用这种方式验证，她完全没有作弊的空间。但是这种方法很"
"显然有个弊端："

#: src/zkp-intro/1/zkp-back.md:265
msgid "弊端一：如果电路比较大，那么证明就很大，Bob 检查证明的工作量也很大。"
msgstr "弊端一：如果电路比较大，那么证明就很大，Bob 检查证明的工作量也很大。"

#: src/zkp-intro/1/zkp-back.md:266
msgid "弊端二：Bob 在验证过程中，知道了所有的电路运算细节，包括输入。"
msgstr "弊端二：Bob 在验证过程中，知道了所有的电路运算细节，包括输入。"

#: src/zkp-intro/1/zkp-back.md:268
msgid "黑科技"
msgstr "黑科技"

#: src/zkp-intro/1/zkp-back.md:270
msgid ""
"我们再对刚才的 Alice 与 Bob 的场景做些修改。假如，Alice 自己还有一个秘密，比"
"如说网银密码。而 Bob 想知道 Alice 的网银密码的长度是不是 20 位长。而 Alice 想"
"了下，告诉他密码长度应该问题不大。这时候 Bob 把一个计算字符串长度的代码转换成"
"了电路 Q，并且发给 Alice。Alice 用电路 Q 算了一下自己的密码，然后把电路所有门"
"的引脚发给了 Bob，并带上运算结果 20。"
msgstr ""
"我们再对刚才的 Alice 与 Bob 的场景做些修改。假如，Alice 自己还有一个秘密，比"
"如说网银密码。而 Bob 想知道 Alice 的网银密码的长度是不是 20 位长。而 Alice 想"
"了下，告诉他密码长度应该问题不大。这时候 Bob 把一个计算字符串长度的代码转换成"
"了电路 Q，并且发给 Alice。Alice 用电路 Q 算了一下自己的密码，然后把电路所有门"
"的引脚发给了 Bob，并带上运算结果 20。"

#: src/zkp-intro/1/zkp-back.md:272
msgid ""
"Wai……t，这是有问题的，Bob 拿到电路运算过程中的所有内部细节之后，不就知道密码"
"了吗？是的，Alice 显然不能这么做。那么 Alice 应该怎么做？"
msgstr ""
"Wai……t，这是有问题的，Bob 拿到电路运算过程中的所有内部细节之后，不就知道密码"
"了吗？是的，Alice 显然不能这么做。那么 Alice 应该怎么做？"

#: src/zkp-intro/1/zkp-back.md:274
msgid ""
"答案是有很多种办法，热爱区块链技术的读者最耳熟的就是 zkSNARK\\[11\\]，还有"
"zkSTARK\\[12\\]，子弹证明BulletProof\\[13\\]，以及一些比较小众的技术，都可以"
"帮 Alice 做到："
msgstr ""
"答案是有很多种办法，热爱区块链技术的读者最耳熟的就是 zkSNARK\\[11\\]，还有"
"zkSTARK\\[12\\]，子弹证明BulletProof\\[13\\]，以及一些比较小众的技术，都可以"
"帮 Alice 做到："

#: src/zkp-intro/1/zkp-back.md:276
msgid ""
"Alice 以一种零知识的方式，向 Bob 证明她计算过了电路，并且使用了她的秘密输入。"
msgstr ""
"Alice 以一种零知识的方式，向 Bob 证明她计算过了电路，并且使用了她的秘密输入。"

#: src/zkp-intro/1/zkp-back.md:278
msgid ""
"换句话说，这些「零知识的电路可满足性证明协议」为 Alice 提供了强大的武器来向 "
"Bob 证明她的网银密码长度为 20，并且除此之外， Bob 再也得不到任何其它有用的信"
"息。除了网银密码，Alice 理论上可以向 Bob 证明任何她的隐私数据的某些特性，但是"
"并不暴露任何别的信息。"
msgstr ""
"换句话说，这些「零知识的电路可满足性证明协议」为 Alice 提供了强大的武器来向 "
"Bob 证明她的网银密码长度为 20，并且除此之外， Bob 再也得不到任何其它有用的信"
"息。除了网银密码，Alice 理论上可以向 Bob 证明任何她的隐私数据的某些特性，但是"
"并不暴露任何别的信息。"

#: src/zkp-intro/1/zkp-back.md:280
msgid ""
"「零知识的电路可满足性证明协议」提供了一种最直接的保护隐私/敏感数据的技术"
msgstr ""
"「零知识的电路可满足性证明协议」提供了一种最直接的保护隐私/敏感数据的技术"

#: src/zkp-intro/1/zkp-back.md:282
msgid ""
"最近几年来，零知识证明构造技术发展日新月异，并且在区块链技术领域得到了越来越"
"多的应用。最新的零知识证明技术，有的技术可以让 Bob 高速验证证明（在移动设备上"
"几毫秒验证完成）；有的技术可以让所有吃瓜群众帮忙验证（非交互式零知识证明）；"
"有的技术支持非常小的证明大小（小到几十个字节）。后续文章我们会逐步展开介绍。"
msgstr ""
"最近几年来，零知识证明构造技术发展日新月异，并且在区块链技术领域得到了越来越"
"多的应用。最新的零知识证明技术，有的技术可以让 Bob 高速验证证明（在移动设备上"
"几毫秒验证完成）；有的技术可以让所有吃瓜群众帮忙验证（非交互式零知识证明）；"
"有的技术支持非常小的证明大小（小到几十个字节）。后续文章我们会逐步展开介绍。"

#: src/zkp-intro/1/zkp-back.md:284
msgid "写在最后"
msgstr "写在最后"

#: src/zkp-intro/1/zkp-back.md:286
msgid ""
"无论是精妙的数论定理，地图三染色问题，还是电路可满足性问题。证明存在的意义是"
"什么？所有的证明都体现了「证明」与「验证」的「不对称性」。证明可能是一个非常"
"耗费算力，或者脑力的活动，无论是耗时几百年的「费马大定理」，还是比特币中的 "
"POW 证明，这些证明都凝结了在寻找证明过程中所消耗的能量，证明过程可能是超乎寻"
"常的复杂，偶尔需要天才横空出世。而验证过程一定（或者应该）是一个非常简单的，"
"机械的，在（多项式）有效时间内且能终止的活动。某种意义上，这个不对称性真正体"
"现了证明的意义，展示了零知识证明的价值。"
msgstr ""
"无论是精妙的数论定理，地图三染色问题，还是电路可满足性问题。证明存在的意义是"
"什么？所有的证明都体现了「证明」与「验证」的「不对称性」。证明可能是一个非常"
"耗费算力，或者脑力的活动，无论是耗时几百年的「费马大定理」，还是比特币中的 "
"POW 证明，这些证明都凝结了在寻找证明过程中所消耗的能量，证明过程可能是超乎寻"
"常的复杂，偶尔需要天才横空出世。而验证过程一定（或者应该）是一个非常简单的，"
"机械的，在（多项式）有效时间内且能终止的活动。某种意义上，这个不对称性真正体"
"现了证明的意义，展示了零知识证明的价值。"

#: src/zkp-intro/1/zkp-back.md:288
msgid ""
"粗略看，「证明」是「逻辑」的产物，但「逻辑」与「计算」却又有着密不可分的联"
"系，大家可能模模糊糊感觉到一些关于「证明」与「计算」之间的关联，它们贯穿始"
"终：如机械推理、证明表达、交互计算 。这是一个有趣但更宏大的哲学问题。"
msgstr ""
"粗略看，「证明」是「逻辑」的产物，但「逻辑」与「计算」却又有着密不可分的联"
"系，大家可能模模糊糊感觉到一些关于「证明」与「计算」之间的关联，它们贯穿始"
"终：如机械推理、证明表达、交互计算 。这是一个有趣但更宏大的哲学问题。"

#: src/zkp-intro/1/zkp-back.md:292 src/zkp-intro/2/zkp-simu.md:261
#: src/zkp-intro/3/zkp-pok.md:335 src/zkp-intro/4/zkp-rom.md:330
#: src/zkp-intro/5/zkp-crs.md:395
#: src/plonk-intro-cn/plonk-arithmetization.md:261
#: src/plonk-intro-cn/plonk-constraints.md:201
#: src/plonk-intro-cn/plonk-randomizing.md:167 src/Nova/SuperNova.md:126
msgid "参考文献"
msgstr "参考文献"

#: src/zkp-intro/1/zkp-back.md:294
msgid ""
"\\[1\\] 西蒙, 辛格, 薛密. 费马大定理: 一个困惑了世间智者 358 年的谜\\[M\\]. "
"上海译文出版社, 1998."
msgstr ""
"\\[1\\] 西蒙, 辛格, 薛密. 费马大定理: 一个困惑了世间智者 358 年的谜\\[M\\]. "
"上海译文出版社, 1998."

#: src/zkp-intro/1/zkp-back.md:295
msgid ""
"\\[2\\]  Alec Wilkinson. The Pursuit of Beauty: Yitang Zhang solves a pure-"
"math mystery. The New Yorker. Feb. 2015."
msgstr ""
"\\[2\\]  Alec Wilkinson. The Pursuit of Beauty: Yitang Zhang solves a pure-"
"math mystery. The New Yorker. Feb. 2015."

#: src/zkp-intro/1/zkp-back.md:296
msgid ""
"\\[3\\] 马丁, 戴维斯, 张卜天. 逻辑的引擎\\[M\\]. 湖南科学技术出版社, 2012."
msgstr ""
"\\[3\\] 马丁, 戴维斯, 张卜天. 逻辑的引擎\\[M\\]. 湖南科学技术出版社, 2012."

#: src/zkp-intro/1/zkp-back.md:297
msgid ""
"\\[4\\] Raymond Smullyan. Gödel's Incompleteness Theorems, Oxford Univ."
"Press. 1991."
msgstr ""
"\\[4\\] Raymond Smullyan. Gödel's Incompleteness Theorems, Oxford Univ."
"Press. 1991."

#: src/zkp-intro/1/zkp-back.md:298
msgid ""
"\\[5\\] Turing, Alan. \"On computable numbers, with an application to the "
"Entscheidungsproblem.\" _Proceedings of the London mathematical society_ 2.1 "
"(1937): 230-265."
msgstr ""
"\\[5\\] Turing, Alan. \"On computable numbers, with an application to the "
"Entscheidungsproblem.\" _Proceedings of the London mathematical society_ 2.1 "
"(1937): 230-265."

#: src/zkp-intro/1/zkp-back.md:299
msgid ""
"\\[6\\] Pierce, Benjamin C., et al. \"Software foundations.\" 中文译文: "
"\\<https://github.com/Coq-zh/SF-zh"
msgstr ""
"\\[6\\] Pierce, Benjamin C., et al. \"Software foundations.\" 中文译文: "
"\\<https://github.com/Coq-zh/SF-zh"

#: src/zkp-intro/1/zkp-back.md:300
msgid ""
"\\[7\\] Kolata, Gina. \"Computer math proof shows reasoning power.\" _Math "
"Horizons_ 4.3 (1997): 22-25."
msgstr ""
"\\[7\\] Kolata, Gina. \"Computer math proof shows reasoning power.\" _Math "
"Horizons_ 4.3 (1997): 22-25."

#: src/zkp-intro/1/zkp-back.md:301
msgid ""
"\\[8\\] Goldwasser, Shafi, Silvio Micali, and Charles Rackoff. \"The "
"knowledge complexity of interactive proof systems.\" _SIAM Journal on "
"computing_ 18.1 (1989): 186-208."
msgstr ""
"\\[8\\] Goldwasser, Shafi, Silvio Micali, and Charles Rackoff. \"The "
"knowledge complexity of interactive proof systems.\" _SIAM Journal on "
"computing_ 18.1 (1989): 186-208."

#: src/zkp-intro/1/zkp-back.md:302 src/zkp-intro/2/zkp-simu.md:271
msgid ""
"\\[9\\] zkPoD: 区块链，零知识证明与形式化验证，实现无中介、零信任的公平交易. "
"安比实验室. 2019."
msgstr ""
"\\[9\\] zkPoD: 区块链，零知识证明与形式化验证，实现无中介、零信任的公平交易. "
"安比实验室. 2019."

#: src/zkp-intro/1/zkp-back.md:303
msgid ""
"\\[10\\] Oded, Goldreich. \"Foundations of cryptography basic tools."
"\" (2001). "
msgstr ""
"\\[10\\] Oded, Goldreich. \"Foundations of cryptography basic tools."
"\" (2001). "

#: src/zkp-intro/1/zkp-back.md:304
msgid ""
"\\[11\\] Gennaro, Rosario, et al. \"Quadratic span programs and succinct "
"NIZKs without PCPs.\" Annual International Conference on the Theory and "
"Applications of Cryptographic Techniques. Springer Berlin, Heidelberg, 2013."
msgstr ""
"\\[11\\] Gennaro, Rosario, et al. \"Quadratic span programs and succinct "
"NIZKs without PCPs.\" Annual International Conference on the Theory and "
"Applications of Cryptographic Techniques. Springer Berlin, Heidelberg, 2013."

#: src/zkp-intro/1/zkp-back.md:306
msgid ""
"\\[12\\] Ben-Sasson, Eli, et al. \"Scalable, transparent, and post-quantum "
"secure computational integrity.\" _IACR Cryptology ePrint Archive_ 2018 "
"(2018): 46."
msgstr ""
"\\[12\\] Ben-Sasson, Eli, et al. \"Scalable, transparent, and post-quantum "
"secure computational integrity.\" _IACR Cryptology ePrint Archive_ 2018 "
"(2018): 46."

#: src/zkp-intro/1/zkp-back.md:307
msgid ""
"\\[13\\] Bünz, Benedikt, et al. \"Bulletproofs: Short proofs for "
"confidential transactions and more.\" 2018 IEEE Symposium on Security and "
"Privacy (SP). IEEE, 2018."
msgstr ""
"\\[13\\] Bünz, Benedikt, et al. \"Bulletproofs: Short proofs for "
"confidential transactions and more.\" 2018 IEEE Symposium on Security and "
"Privacy (SP). IEEE, 2018."

#: src/zkp-intro/2/zkp-simu.md:3
msgid "理解「模拟」"
msgstr "理解「模拟」"

#: src/zkp-intro/2/zkp-simu.md:5
msgid "_探索零知识证明系列（二）_"
msgstr "_探索零知识证明系列（二）_"

#: src/zkp-intro/2/zkp-simu.md:7
msgid "[安全的定义与不可区分性](#安全的定义与不可区分性)"
msgstr "[安全的定义与不可区分性](#安全的定义与不可区分性)"

#: src/zkp-intro/2/zkp-simu.md:8
msgid "[遇见模拟器](#遇见模拟器)"
msgstr "[遇见模拟器](#遇见模拟器)"

#: src/zkp-intro/2/zkp-simu.md:9
msgid "[区分两个世界](#区分两个世界)"
msgstr "[区分两个世界](#区分两个世界)"

#: src/zkp-intro/2/zkp-simu.md:10
msgid "[地图三染色问题的零知识证明](#地图三染色问题的零知识证明)"
msgstr "[地图三染色问题的零知识证明](#地图三染色问题的零知识证明)"

#: src/zkp-intro/2/zkp-simu.md:11
msgid "[不诚实的 Bob](#不诚实的-bob)"
msgstr "[不诚实的 Bob](#不诚实的-bob)"

#: src/zkp-intro/2/zkp-simu.md:12
msgid "[阿里巴巴、洞穴与芝麻开门](#阿里巴巴洞穴与芝麻开门)"
msgstr "[阿里巴巴、洞穴与芝麻开门](#阿里巴巴洞穴与芝麻开门)"

#: src/zkp-intro/2/zkp-simu.md:13
msgid "[模拟与图灵机](#模拟与图灵机)"
msgstr "[模拟与图灵机](#模拟与图灵机)"

#: src/zkp-intro/2/zkp-simu.md:14
msgid "[柏拉图的洞穴寓言](#柏拉图的洞穴寓言)"
msgstr "[柏拉图的洞穴寓言](#柏拉图的洞穴寓言)"

#: src/zkp-intro/2/zkp-simu.md:15 src/zkp-intro/3/zkp-pok.md:14
#: src/zkp-intro/4/zkp-rom.md:15 src/zkp-intro/5/zkp-crs.md:15
msgid "[未完待续](#未完待续)"
msgstr "[未完待续](#未完待续)"

#: src/zkp-intro/2/zkp-simu.md:18
msgid "I know that I know nothing  —— 苏格拉底"
msgstr "I know that I know nothing  —— 苏格拉底"

#: src/zkp-intro/2/zkp-simu.md:21
msgid ""
"相信很多人都听说过零知识证明，但是只有极少数人听说过模拟，然而模拟是理解零知"
"识的关键。"
msgstr ""
"相信很多人都听说过零知识证明，但是只有极少数人听说过模拟，然而模拟是理解零知"
"识的关键。"

#: src/zkp-intro/2/zkp-simu.md:23
msgid ""
"我们在第一篇文章『初识「零知识」与「证明」』（链接）\\[1\\]中介绍了一个简单的"
"零知识交互系统：地图三染色问题。那么这个系统真的是零知识的吗？我们为什么要相"
"信这个结论呢？有证明吗？在  Alice 与 Bob 的对话过程中，如果不零知识，Alice就"
"被坑了。交互式系统的设计者「我」需要让 Alice 确信，这个对话确实是零知识的。"
msgstr ""
"我们在第一篇文章『初识「零知识」与「证明」』（链接）\\[1\\]中介绍了一个简单的"
"零知识交互系统：地图三染色问题。那么这个系统真的是零知识的吗？我们为什么要相"
"信这个结论呢？有证明吗？在  Alice 与 Bob 的对话过程中，如果不零知识，Alice就"
"被坑了。交互式系统的设计者「我」需要让 Alice 确信，这个对话确实是零知识的。"

#: src/zkp-intro/2/zkp-simu.md:25
msgid ""
"如果从直觉主义角度解释，要证明一个交互系统中存在信息泄露，那么你只需要指证："
"第几个 bit 导致信息泄露即可；但如果要证明不存在信息泄露，那么你要对着所有信息"
"流中的所有 bit 说，这从1，2，3，4，5，……  编号的 bit 都没泄露任何信息。看官"
"们，这是不是很难？"
msgstr ""
"如果从直觉主义角度解释，要证明一个交互系统中存在信息泄露，那么你只需要指证："
"第几个 bit 导致信息泄露即可；但如果要证明不存在信息泄露，那么你要对着所有信息"
"流中的所有 bit 说，这从1，2，3，4，5，……  编号的 bit 都没泄露任何信息。看官"
"们，这是不是很难？"

#: src/zkp-intro/2/zkp-simu.md:27
msgid "本文约八千字，略微烧脑。"
msgstr "本文约八千字，略微烧脑。"

#: src/zkp-intro/2/zkp-simu.md:29
msgid "安全的定义与不可区分性"
msgstr "安全的定义与不可区分性"

#: src/zkp-intro/2/zkp-simu.md:31
msgid ""
"首先，一个交互式系统，也就是一个对话，它的「零知识」需要证明。毕竟，现代密码"
"学是建立在严格的形式化系统之上。在证明之前，还需要明确「安全假设」到底有哪"
"些。所谓安全假设，比如我们说一个系统的权限隔离做得无比精确，每一个用户只能看"
"到被授权的信息，但是这基于一个安全假设：管理员账号没有被破解。又比如在手机银"
"行软件里，只能通过短信认证码，才能完成转账功能，这也基于一个安全假设：你的手"
"机 SIM 卡没有被克隆。如果我们深入地分析每一个我们感觉安全的系统，都存在大量的"
"似乎不那么稳固的安全假设。比特币私钥安全吗？比特币账户的安全假设也不少：首先"
"你的助记词不能让别人知道，手机钱包里私钥保存加密算法足够强，密钥派生算法正"
"规，你不能忘记助记词，等等等。"
msgstr ""
"首先，一个交互式系统，也就是一个对话，它的「零知识」需要证明。毕竟，现代密码"
"学是建立在严格的形式化系统之上。在证明之前，还需要明确「安全假设」到底有哪"
"些。所谓安全假设，比如我们说一个系统的权限隔离做得无比精确，每一个用户只能看"
"到被授权的信息，但是这基于一个安全假设：管理员账号没有被破解。又比如在手机银"
"行软件里，只能通过短信认证码，才能完成转账功能，这也基于一个安全假设：你的手"
"机 SIM 卡没有被克隆。如果我们深入地分析每一个我们感觉安全的系统，都存在大量的"
"似乎不那么稳固的安全假设。比特币私钥安全吗？比特币账户的安全假设也不少：首先"
"你的助记词不能让别人知道，手机钱包里私钥保存加密算法足够强，密钥派生算法正"
"规，你不能忘记助记词，等等等。"

#: src/zkp-intro/2/zkp-simu.md:33
msgid ""
"脱离安全假设来谈安全都是在耍流氓。一切安全都有前提的。只有经过数学证明之后，"
"大家才能够确信这个 算法/方案 的安全性基于一些**非常明确**的「安全假设」。"
msgstr ""
"脱离安全假设来谈安全都是在耍流氓。一切安全都有前提的。只有经过数学证明之后，"
"大家才能够确信这个 算法/方案 的安全性基于一些**非常明确**的「安全假设」。"

#: src/zkp-intro/2/zkp-simu.md:35
msgid ""
"在证明之前，还缺少一个东西，那就是「安全定义」。在多数人的认知系统中，安全就"
"是一个框，什么都可以往里装。大家应该好好提醒下自己，当谈论安全二字的时候，有"
"没有想过到底什么是安全？怎么算安全？"
msgstr ""
"在证明之前，还缺少一个东西，那就是「安全定义」。在多数人的认知系统中，安全就"
"是一个框，什么都可以往里装。大家应该好好提醒下自己，当谈论安全二字的时候，有"
"没有想过到底什么是安全？怎么算安全？"

#: src/zkp-intro/2/zkp-simu.md:37
msgid "「安全」需要有一个数学意义上的严格定义"
msgstr "「安全」需要有一个数学意义上的严格定义"

#: src/zkp-intro/2/zkp-simu.md:39
msgid ""
"伟大的科学家香农（Claude Shannon）从信息论的角度给出了一个非常靠谱的安全性定"
"义\\[2\\]："
msgstr ""
"伟大的科学家香农（Claude Shannon）从信息论的角度给出了一个非常靠谱的安全性定"
"义\\[2\\]："

#: src/zkp-intro/2/zkp-simu.md:41
msgid ""
"完美安全：假设你是一个攻击者，你通过密文获取不到任何有价值的信息，破解的唯一"
"手段就是靠瞎蒙。"
msgstr ""
"完美安全：假设你是一个攻击者，你通过密文获取不到任何有价值的信息，破解的唯一"
"手段就是靠瞎蒙。"

#: src/zkp-intro/2/zkp-simu.md:43
msgid ""
"大家想一想，这个定义很有趣，通过密文获取不到信息，这就意味着你没有获得任何额"
"外的计算能力，能够帮助让你以更短的时间来计算出明文。"
msgstr ""
"大家想一想，这个定义很有趣，通过密文获取不到信息，这就意味着你没有获得任何额"
"外的计算能力，能够帮助让你以更短的时间来计算出明文。"

#: src/zkp-intro/2/zkp-simu.md:45
msgid ""
"但是这个定义太完美，以至于使用的加密算法都很难满足这个安全性定义。后来 "
"Goldwasser 与 Micali 等人写了另一篇载入史册的经典『概率加密』\\[2\\]。"
msgstr ""
"但是这个定义太完美，以至于使用的加密算法都很难满足这个安全性定义。后来 "
"Goldwasser 与 Micali 等人写了另一篇载入史册的经典『概率加密』\\[2\\]。"

#: src/zkp-intro/2/zkp-simu.md:47
msgid "![](img/probenc.png)"
msgstr "![](img/probenc.png)"

#: src/zkp-intro/2/zkp-simu.md:49
msgid ""
"在这篇论文中定义了这样一个概念：语义安全。所谓语义安全在完美安全的定义上放松"
"了些要求。"
msgstr ""
"在这篇论文中定义了这样一个概念：语义安全。所谓语义安全在完美安全的定义上放松"
"了些要求。"

#: src/zkp-intro/2/zkp-simu.md:51
msgid ""
"语义安全：假设你是一个攻击者，你通过密文在多项式时间内计算不出来任何有价值的"
"信息。"
msgstr ""
"语义安全：假设你是一个攻击者，你通过密文在多项式时间内计算不出来任何有价值的"
"信息。"

#: src/zkp-intro/2/zkp-simu.md:53
msgid ""
"好了，这个看起来靠谱多了。接下来一个问题就是，怎么理解「计算不出来信息」这个"
"概念？这看来要对信息进行度量，信息的定义又是什么呢？"
msgstr ""
"好了，这个看起来靠谱多了。接下来一个问题就是，怎么理解「计算不出来信息」这个"
"概念？这看来要对信息进行度量，信息的定义又是什么呢？"

#: src/zkp-intro/2/zkp-simu.md:55
msgid ""
"我们又引入一个概念——「不可区分性」，来重新表述加密算法的安全性：假设你是一个"
"攻击者，而我有一个加密算法："
msgstr ""
"我们又引入一个概念——「不可区分性」，来重新表述加密算法的安全性：假设你是一个"
"攻击者，而我有一个加密算法："

#: src/zkp-intro/2/zkp-simu.md:57
msgid ""
"你随机产生两段等长的明文，`m1`=「白日依山尽，黄河入海流」，`m2`=「烫烫烫烫"
"烫，烫烫烫烫烫」"
msgstr ""
"你随机产生两段等长的明文，`m1`=「白日依山尽，黄河入海流」，`m2`=「烫烫烫烫"
"烫，烫烫烫烫烫」"

#: src/zkp-intro/2/zkp-simu.md:58
msgid "你把这两段明文，`m1` 与 `m2` 交给我"
msgstr "你把这两段明文，`m1` 与 `m2` 交给我"

#: src/zkp-intro/2/zkp-simu.md:59
msgid "我随机挑选一个明文，不告诉你是哪一个，然后进行加密，产生一个密文 `c`"
msgstr "我随机挑选一个明文，不告诉你是哪一个，然后进行加密，产生一个密文 `c`"

#: src/zkp-intro/2/zkp-simu.md:60
msgid ""
"我把密文 `c` 出示给你看，让你猜这个`c` 究竟是由唐诗加密产生，还是乱码加密产生"
msgstr ""
"我把密文 `c` 出示给你看，让你猜这个`c` 究竟是由唐诗加密产生，还是乱码加密产生"

#: src/zkp-intro/2/zkp-simu.md:61
msgid ""
"如果你用一台计算机来破解`c`，在多项式时间内破解不出来，也就是说你没办法区分"
"`c`的来源，那么就说明加密算法是语义安全的"
msgstr ""
"如果你用一台计算机来破解`c`，在多项式时间内破解不出来，也就是说你没办法区分"
"`c`的来源，那么就说明加密算法是语义安全的"

#: src/zkp-intro/2/zkp-simu.md:63
msgid ""
"OK，理解完「不可区分性」，我们再回到「零知识」，如何证明一个交互式系统是「零"
"知识」呢？首先我们要定义下零知识这个概念。"
msgstr ""
"OK，理解完「不可区分性」，我们再回到「零知识」，如何证明一个交互式系统是「零"
"知识」呢？首先我们要定义下零知识这个概念。"

#: src/zkp-intro/2/zkp-simu.md:65
msgid ""
"注：不可区分性是概率意义上的不可区分；在学术上，它可以分为「完全不可区分」，"
"「统计不可区分」，还有「计算不可区分」。在本文中，我们暂时不需要理解这些概念"
"的差别。"
msgstr ""
"注：不可区分性是概率意义上的不可区分；在学术上，它可以分为「完全不可区分」，"
"「统计不可区分」，还有「计算不可区分」。在本文中，我们暂时不需要理解这些概念"
"的差别。"

#: src/zkp-intro/2/zkp-simu.md:67
msgid "遇见模拟器"
msgstr "遇见模拟器"

#: src/zkp-intro/2/zkp-simu.md:69
msgid ""
"先开个脑洞，设想在平行宇宙中，有两个平行的世界，一个叫做「理想世界」（Ideal "
"World），另一个叫做「现实世界」（Real World）。我们每一个个体可以在两个平行世"
"界中愉快地玩耍，但是两个世界的普通人无法互相感知，也无法互相沟通。"
msgstr ""
"先开个脑洞，设想在平行宇宙中，有两个平行的世界，一个叫做「理想世界」（Ideal "
"World），另一个叫做「现实世界」（Real World）。我们每一个个体可以在两个平行世"
"界中愉快地玩耍，但是两个世界的普通人无法互相感知，也无法互相沟通。"

#: src/zkp-intro/2/zkp-simu.md:71
msgid ""
"假设「你」是一个很厉害的密码破解者，而且「你」不是普通人，具备在平行宇宙之间"
"穿梭的能力。而 Alice 有一个地图三染色的答案，你的目的是通过和 Alice 对话来获"
"取地图三染色的答案，会话的过程参考上一篇文章的「地图三染色问题」协议。"
msgstr ""
"假设「你」是一个很厉害的密码破解者，而且「你」不是普通人，具备在平行宇宙之间"
"穿梭的能力。而 Alice 有一个地图三染色的答案，你的目的是通过和 Alice 对话来获"
"取地图三染色的答案，会话的过程参考上一篇文章的「地图三染色问题」协议。"

#: src/zkp-intro/2/zkp-simu.md:73
msgid ""
"继续脑洞，Alice 只存在「现实世界」中；在「理想世界」，Alice 被「替换」成了一"
"个长相与声音一模一样的个体，我们称替身为 Zlice。下一步，把「你」同时放入两个"
"世界中，但不让你知道是你当前位于哪一个世界。你的两个分身所面对的都是一个 "
"“Alice”模样的人。"
msgstr ""
"继续脑洞，Alice 只存在「现实世界」中；在「理想世界」，Alice 被「替换」成了一"
"个长相与声音一模一样的个体，我们称替身为 Zlice。下一步，把「你」同时放入两个"
"世界中，但不让你知道是你当前位于哪一个世界。你的两个分身所面对的都是一个 "
"“Alice”模样的人。"

#: src/zkp-intro/2/zkp-simu.md:75
msgid ""
"再重复一遍，在「现实世界」中， 与你对话的是一个真实的，并且诚实的 Alice；而在"
"「理想世界」中，与你对话的是  Zlice （假 Alice），Zlice 虽然相貌语言与 Alice "
"并无二致，但差异是，Zlice 并不知道「知识」，即不知道一个三染色问题的答案。"
msgstr ""
"再重复一遍，在「现实世界」中， 与你对话的是一个真实的，并且诚实的 Alice；而在"
"「理想世界」中，与你对话的是  Zlice （假 Alice），Zlice 虽然相貌语言与 Alice "
"并无二致，但差异是，Zlice 并不知道「知识」，即不知道一个三染色问题的答案。"

#: src/zkp-intro/2/zkp-simu.md:77
msgid ""
"接下来在这两个世界中，你的两个分身将同时与真假 Alice 进行对话。神奇的事情发生"
"了，最终在两个世界中，你的两个分身都被说服了，都经过`n`轮挑战，没有发现对方作"
"弊，即「你」的两个分身都认为对方确实知道「答案」。换句话说，「你」没有能力"
"「区分」出来自己到底在 「现实世界」 还是 「理想世界」，当然也没能力「区分」和"
"自己对话的究竟是 Alice 还是 Zlice。不仅如此，对于吃瓜群众我而言，如果把「我」"
"作为观察者放入任何一个世界中，我会和你一样「无法区分」出来眼前的 这个长相为 "
"“Alice” 的人到底是真还是假。"
msgstr ""
"接下来在这两个世界中，你的两个分身将同时与真假 Alice 进行对话。神奇的事情发生"
"了，最终在两个世界中，你的两个分身都被说服了，都经过`n`轮挑战，没有发现对方作"
"弊，即「你」的两个分身都认为对方确实知道「答案」。换句话说，「你」没有能力"
"「区分」出来自己到底在 「现实世界」 还是 「理想世界」，当然也没能力「区分」和"
"自己对话的究竟是 Alice 还是 Zlice。不仅如此，对于吃瓜群众我而言，如果把「我」"
"作为观察者放入任何一个世界中，我会和你一样「无法区分」出来眼前的 这个长相为 "
"“Alice” 的人到底是真还是假。"

#: src/zkp-intro/2/zkp-simu.md:79
msgid "![](img/indist.png)"
msgstr "![](img/indist.png)"

#: src/zkp-intro/2/zkp-simu.md:81
msgid "下面是烧脑结论："
msgstr "下面是烧脑结论："

#: src/zkp-intro/2/zkp-simu.md:83
msgid ""
"这个交互系统为何是「零知识」？因为 Zlice 是没有任何知识，而且她和 Alice 不可"
"区分。"
msgstr ""
"这个交互系统为何是「零知识」？因为 Zlice 是没有任何知识，而且她和 Alice 不可"
"区分。"

#: src/zkp-intro/2/zkp-simu.md:85
msgid ""
"我再换个方式解释：因为你和我都没办法区分我们究竟是在哪个世界中，两个世界发生"
"的交互过程几乎不可区分，而且其中一个世界中根本就不存在知识，因此，我们说这个"
"交互协议——「地图三染色问题」是「零知识的」。"
msgstr ""
"我再换个方式解释：因为你和我都没办法区分我们究竟是在哪个世界中，两个世界发生"
"的交互过程几乎不可区分，而且其中一个世界中根本就不存在知识，因此，我们说这个"
"交互协议——「地图三染色问题」是「零知识的」。"

#: src/zkp-intro/2/zkp-simu.md:87
msgid ""
"这里还有个前提，`理想世界`必须是算法可构造的。然后，有一个「神」，他通过算法"
"「模拟」了一个「理想世界」，其中构造了一个算法叫做 Zlice，她没有「知识」作为"
"输入，也即「零知识」；除此之外，「理想世界」与「现实世界」一模一样。"
msgstr ""
"这里还有个前提，`理想世界`必须是算法可构造的。然后，有一个「神」，他通过算法"
"「模拟」了一个「理想世界」，其中构造了一个算法叫做 Zlice，她没有「知识」作为"
"输入，也即「零知识」；除此之外，「理想世界」与「现实世界」一模一样。"

#: src/zkp-intro/2/zkp-simu.md:89
msgid ""
"设想你在对话过程中，如果真 Alice 泄露了信息，那么你就能立即区分出面前这个人"
"是 真 Alice 还是 Zlice，**Zlice 是不可能伪装泄露信息的**。因此可以得出结论："
msgstr ""
"设想你在对话过程中，如果真 Alice 泄露了信息，那么你就能立即区分出面前这个人"
"是 真 Alice 还是 Zlice，**Zlice 是不可能伪装泄露信息的**。因此可以得出结论："

#: src/zkp-intro/2/zkp-simu.md:91
msgid "真Alice 没有泄露任何信息。"
msgstr "真Alice 没有泄露任何信息。"

#: src/zkp-intro/2/zkp-simu.md:93
msgid ""
"这个神，被称为「模拟器」（Simulator），而在理想世界中，和你对话的这个 Zlice "
"幻象其实也是「模拟器」，你在理想世界中，所有能感知到的东西都是模拟器「模拟」"
"出来的。"
msgstr ""
"这个神，被称为「模拟器」（Simulator），而在理想世界中，和你对话的这个 Zlice "
"幻象其实也是「模拟器」，你在理想世界中，所有能感知到的东西都是模拟器「模拟」"
"出来的。"

#: src/zkp-intro/2/zkp-simu.md:95
msgid "好了，到这里，我们用「模拟器」这个概念对「零知识」进行了定义。"
msgstr "好了，到这里，我们用「模拟器」这个概念对「零知识」进行了定义。"

#: src/zkp-intro/2/zkp-simu.md:97
msgid "接下来，我们开始进入证明零知识的环节。"
msgstr "接下来，我们开始进入证明零知识的环节。"

#: src/zkp-intro/2/zkp-simu.md:99
msgid "区分两个世界"
msgstr "区分两个世界"

#: src/zkp-intro/2/zkp-simu.md:101
msgid "_（Save World State as Snapshot X）_"
msgstr "_（Save World State as Snapshot X）_"

#: src/zkp-intro/2/zkp-simu.md:103
msgid ""
"证明的零知识过程，等价于构造（寻找）一个「模拟」算法，这个算法能够让模拟器来"
"模拟出一个「没有知识」的理想世界。如果这个算法存在，而且两个世界不可区分，那"
"么就证明完毕。"
msgstr ""
"证明的零知识过程，等价于构造（寻找）一个「模拟」算法，这个算法能够让模拟器来"
"模拟出一个「没有知识」的理想世界。如果这个算法存在，而且两个世界不可区分，那"
"么就证明完毕。"

#: src/zkp-intro/2/zkp-simu.md:105
msgid "等等，可能「你」会觉得哪里不对劲。"
msgstr "等等，可能「你」会觉得哪里不对劲。"

#: src/zkp-intro/2/zkp-simu.md:107
msgid ""
"假如说真的存在这种算法，而且它能够在没有知识的情况下骗过我，那么在「现实世"
"界」中，不排除真  Alice 也使用了这样的算法来欺骗我。这样一来，我岂不是在两个"
"世界中都被欺骗了。那么这个交互协议就失去意义了。"
msgstr ""
"假如说真的存在这种算法，而且它能够在没有知识的情况下骗过我，那么在「现实世"
"界」中，不排除真  Alice 也使用了这样的算法来欺骗我。这样一来，我岂不是在两个"
"世界中都被欺骗了。那么这个交互协议就失去意义了。"

#: src/zkp-intro/2/zkp-simu.md:109
msgid "![](img/inception.jpg)"
msgstr "![](img/inception.jpg)"

#: src/zkp-intro/2/zkp-simu.md:111
msgid ""
"其实，这里有个关键点，借用电影『盗梦空间』中的剧照，在「理想世界」中有点东西"
"是和「现实世界」本质不同的。这个东西是区分两个世界的关键，而它要让我们「无法"
"感知」。这个东西不是梦境中的陀螺，它是一种「超能力」，模拟器 Simulator 所具备"
"的超能力。"
msgstr ""
"其实，这里有个关键点，借用电影『盗梦空间』中的剧照，在「理想世界」中有点东西"
"是和「现实世界」本质不同的。这个东西是区分两个世界的关键，而它要让我们「无法"
"感知」。这个东西不是梦境中的陀螺，它是一种「超能力」，模拟器 Simulator 所具备"
"的超能力。"

#: src/zkp-intro/2/zkp-simu.md:113
msgid "比如这样一种超能力：「时光倒流」。"
msgstr "比如这样一种超能力：「时光倒流」。"

#: src/zkp-intro/2/zkp-simu.md:115
msgid "![](img/time-rewind.jpg)"
msgstr "![](img/time-rewind.jpg)"

#: src/zkp-intro/2/zkp-simu.md:117
msgid ""
"（上图是电影『土拨鼠之日』的剧照，剧中主人公每次睡醒都会回到2月2日的早上，这"
"样他永远活在同一天里）"
msgstr ""
"（上图是电影『土拨鼠之日』的剧照，剧中主人公每次睡醒都会回到2月2日的早上，这"
"样他永远活在同一天里）"

#: src/zkp-intro/2/zkp-simu.md:119
msgid ""
"等等，各位看官，不是刚才我们一直在讨论不可区分性吗？怎么两个世界又需要区分"
"啦？“我糊涂了”。不要慌，所谓的不可区分性针对的是理想世界中的个体认知而言。而"
"「可区分性」是对位于世界外部的神而言。"
msgstr ""
"等等，各位看官，不是刚才我们一直在讨论不可区分性吗？怎么两个世界又需要区分"
"啦？“我糊涂了”。不要慌，所谓的不可区分性针对的是理想世界中的个体认知而言。而"
"「可区分性」是对位于世界外部的神而言。"

#: src/zkp-intro/2/zkp-simu.md:121
msgid ""
"设想下在我们周围，如果有一个人有时空穿越能力，或者他能让时间回退到一年前，那"
"么我们这些凡夫俗子完全是一脸茫（meng）然（bi）的，无从感知。那么，如果「模拟"
"器」可以在他构造出的「理想世界」中实现「时间倒流」，那么他就可以达成一些神奇"
"的事情，从而骗过作为验证者身份的「你」，也能骗过观察者「我」。对于「你」而"
"言，你明白，在「理想世界」中，时间是可以回退的，但是在「现实世界」中，显然真 "
"Alice 不可能拥有超能力。虽然你和我不能区分在哪个世界里，但是**至少我们知道在"
"两个世界中的其中「现实世界」里，对面那个Alice是没办法欺骗我们的**，当然我们却"
"不能说出我们到底在哪个世界中。"
msgstr ""
"设想下在我们周围，如果有一个人有时空穿越能力，或者他能让时间回退到一年前，那"
"么我们这些凡夫俗子完全是一脸茫（meng）然（bi）的，无从感知。那么，如果「模拟"
"器」可以在他构造出的「理想世界」中实现「时间倒流」，那么他就可以达成一些神奇"
"的事情，从而骗过作为验证者身份的「你」，也能骗过观察者「我」。对于「你」而"
"言，你明白，在「理想世界」中，时间是可以回退的，但是在「现实世界」中，显然真 "
"Alice 不可能拥有超能力。虽然你和我不能区分在哪个世界里，但是**至少我们知道在"
"两个世界中的其中「现实世界」里，对面那个Alice是没办法欺骗我们的**，当然我们却"
"不能说出我们到底在哪个世界中。"

#: src/zkp-intro/2/zkp-simu.md:123
msgid ""
"到此，交互协议的「零知识」已经证明完了。各位是否已经明白了？我再给大家再梳理"
"下证明思路："
msgstr ""
"到此，交互协议的「零知识」已经证明完了。各位是否已经明白了？我再给大家再梳理"
"下证明思路："

#: src/zkp-intro/2/zkp-simu.md:125
msgid ""
"首先「零知识」是为了保护 Alice 的利益，因为 Alice 不想在交互过程中透露更多的"
"信息给 Bob，不想让 Bob 知道她所拥有的秘密 `w`，甚至不想让 Bob 从交互的过程中"
"分析出哪怕一丁点的信息。那么怎么保证这一点呢？「模拟器」这时候登场了，它能模"
"拟出一个和现实世界外表一模一样的「理想世界」，然后「模拟器」在这个世界中可以"
"轻松地骗过任何一个对手，让对方无法分辨自己是在现实世界中，还是理想世界中。因"
"为「模拟器」手里没有那个秘密 `w`，「理想世界」是零知识的。又因为两个世界的不"
"可区分性，所以我们可以得出结论：Alice 的交互协议是「零知识」的。"
msgstr ""
"首先「零知识」是为了保护 Alice 的利益，因为 Alice 不想在交互过程中透露更多的"
"信息给 Bob，不想让 Bob 知道她所拥有的秘密 `w`，甚至不想让 Bob 从交互的过程中"
"分析出哪怕一丁点的信息。那么怎么保证这一点呢？「模拟器」这时候登场了，它能模"
"拟出一个和现实世界外表一模一样的「理想世界」，然后「模拟器」在这个世界中可以"
"轻松地骗过任何一个对手，让对方无法分辨自己是在现实世界中，还是理想世界中。因"
"为「模拟器」手里没有那个秘密 `w`，「理想世界」是零知识的。又因为两个世界的不"
"可区分性，所以我们可以得出结论：Alice 的交互协议是「零知识」的。"

#: src/zkp-intro/2/zkp-simu.md:127
msgid "我们来看一个具体的例子，上一篇文章\\[1\\]中提到的地图3染色问题。"
msgstr "我们来看一个具体的例子，上一篇文章\\[1\\]中提到的地图3染色问题。"

#: src/zkp-intro/2/zkp-simu.md:129
msgid "地图三染色问题的零知识证明"
msgstr "地图三染色问题的零知识证明"

#: src/zkp-intro/2/zkp-simu.md:131
msgid "回忆一下「地图三染色问题交互系统」："
msgstr "回忆一下「地图三染色问题交互系统」："

#: src/zkp-intro/2/zkp-simu.md:133
msgid "![](img/3c-123.png)"
msgstr "![](img/3c-123.png)"

#: src/zkp-intro/2/zkp-simu.md:135
msgid ""
"第一步：Alice 把地图染色答案做一次完全置换，然后将所有顶点盖上纸片，交给 Bob"
msgstr ""
"第一步：Alice 把地图染色答案做一次完全置换，然后将所有顶点盖上纸片，交给 Bob"

#: src/zkp-intro/2/zkp-simu.md:136
msgid "第二步：Bob 随机挑选一条边"
msgstr "第二步：Bob 随机挑选一条边"

#: src/zkp-intro/2/zkp-simu.md:137
msgid ""
"第三步： Alice 打开指定边的两端顶点的纸片，Bob检验两个顶点的颜色是否相同，如"
"果不同则通过，如果相同则失败"
msgstr ""
"第三步： Alice 打开指定边的两端顶点的纸片，Bob检验两个顶点的颜色是否相同，如"
"果不同则通过，如果相同则失败"

#: src/zkp-intro/2/zkp-simu.md:138
msgid "回到第一步，重复 `n` 遍"
msgstr "回到第一步，重复 `n` 遍"

#: src/zkp-intro/2/zkp-simu.md:140
msgid ""
"我们接下来就来证明上述这个交互是零知识的，这里先假设验证者 Bob 是诚实的，这有"
"助于大家理解这个证明过程。然后我们再讨论，如果 Bob 不诚实的证明方法。"
msgstr ""
"我们接下来就来证明上述这个交互是零知识的，这里先假设验证者 Bob 是诚实的，这有"
"助于大家理解这个证明过程。然后我们再讨论，如果 Bob 不诚实的证明方法。"

#: src/zkp-intro/2/zkp-simu.md:142
msgid "![](img/3c-zk0.png)"
msgstr "![](img/3c-zk0.png)"

#: src/zkp-intro/2/zkp-simu.md:144
msgid ""
"在「理想世界」中，跟 Bob 对话的是一个「模拟器」，它模拟出了整个世界的样子。"
"Bob 按照三染色问题的交互协议进行交互。模拟器并没有一个三染色答案，它索性把所"
"有的顶点都染成了灰色。"
msgstr ""
"在「理想世界」中，跟 Bob 对话的是一个「模拟器」，它模拟出了整个世界的样子。"
"Bob 按照三染色问题的交互协议进行交互。模拟器并没有一个三染色答案，它索性把所"
"有的顶点都染成了灰色。"

#: src/zkp-intro/2/zkp-simu.md:146
msgid "![](img/3c-zk1.png)"
msgstr "![](img/3c-zk1.png)"

#: src/zkp-intro/2/zkp-simu.md:148
msgid "首先，模拟器模仿 Alice ，把每个顶点用纸片盖起来。然后发给 Bob。"
msgstr "首先，模拟器模仿 Alice ，把每个顶点用纸片盖起来。然后发给 Bob。"

#: src/zkp-intro/2/zkp-simu.md:150
msgid "![](img/3c-zk2.png)"
msgstr "![](img/3c-zk2.png)"

#: src/zkp-intro/2/zkp-simu.md:152
msgid "Bob 随机挑选了一条边，挑战证明者。"
msgstr "Bob 随机挑选了一条边，挑战证明者。"

#: src/zkp-intro/2/zkp-simu.md:154
msgid "![](img/3c-zk3.png)"
msgstr "![](img/3c-zk3.png)"

#: src/zkp-intro/2/zkp-simu.md:156
msgid "模拟器这时候不能打开纸片，因为这条边两端的颜色都是灰色啊。"
msgstr "模拟器这时候不能打开纸片，因为这条边两端的颜色都是灰色啊。"

#: src/zkp-intro/2/zkp-simu.md:158
msgid "![](img/3c-zk4.png)"
msgstr "![](img/3c-zk4.png)"

#: src/zkp-intro/2/zkp-simu.md:160
msgid ""
"这时候，模拟器要发挥「超能力」了，他运用时间倒流的技能，回到对话第一步之前。"
msgstr ""
"这时候，模拟器要发挥「超能力」了，他运用时间倒流的技能，回到对话第一步之前。"

#: src/zkp-intro/2/zkp-simu.md:162
msgid "![](img/3c-zk5.png)"
msgstr "![](img/3c-zk5.png)"

#: src/zkp-intro/2/zkp-simu.md:164
msgid ""
"模拟器现在处于第一步，他把最下面那条边的两端染上任意不同的颜色，然后重新盖上"
"纸片，并发给 Bob。"
msgstr ""
"模拟器现在处于第一步，他把最下面那条边的两端染上任意不同的颜色，然后重新盖上"
"纸片，并发给 Bob。"

#: src/zkp-intro/2/zkp-simu.md:166
msgid "![](img/3c-zk6.png)"
msgstr "![](img/3c-zk6.png)"

#: src/zkp-intro/2/zkp-simu.md:168
msgid ""
"Bob 这时候无法感知到时间已经倒退回第一步了，对他来说，一切都是新鲜的，他「诚"
"实」地再次选择了最下面的边。"
msgstr ""
"Bob 这时候无法感知到时间已经倒退回第一步了，对他来说，一切都是新鲜的，他「诚"
"实」地再次选择了最下面的边。"

#: src/zkp-intro/2/zkp-simu.md:170
msgid "![](img/3c-zk7.png)"
msgstr "![](img/3c-zk7.png)"

#: src/zkp-intro/2/zkp-simu.md:172
msgid ""
"这时候模拟器就可以放心地打开纸片，让 Bob 检查。Bob 很显然会被骗过。然后 Bob "
"一轮轮地重复这个过程，每一次模拟器都能用时间倒流的方式骗过 Bob。"
msgstr ""
"这时候模拟器就可以放心地打开纸片，让 Bob 检查。Bob 很显然会被骗过。然后 Bob "
"一轮轮地重复这个过程，每一次模拟器都能用时间倒流的方式骗过 Bob。"

#: src/zkp-intro/2/zkp-simu.md:174
msgid ""
"于是在理想世界中，模拟器并没有任何三染色答案的「知识」，却同样能骗过Bob，并且"
"从概率上来看，与「现实世界」中被观察到的交互过程高度地一致（完全一致的概率分"
"布）。于是上面的过程**展示了模拟器的算法的存在性，也就相当于证明了交互系统的"
"「零知识性质」**。"
msgstr ""
"于是在理想世界中，模拟器并没有任何三染色答案的「知识」，却同样能骗过Bob，并且"
"从概率上来看，与「现实世界」中被观察到的交互过程高度地一致（完全一致的概率分"
"布）。于是上面的过程**展示了模拟器的算法的存在性，也就相当于证明了交互系统的"
"「零知识性质」**。"

#: src/zkp-intro/2/zkp-simu.md:176
msgid "不诚实的 Bob"
msgstr "不诚实的 Bob"

#: src/zkp-intro/2/zkp-simu.md:178
msgid ""
"在上面的证明过程中，有一个相当强的假设，就是每次时间倒流之后，Bob都会选择同一"
"条边。如果 Bob 每次都会换一条不同的边呢？没关系，如果在模拟器第一次实施时间倒"
"流之后，Bob又选择了不同的边，那么模拟器可以把颜色打乱之后，再次运行时间倒流，"
"在多次时间倒流之后，Bob 极大的概率总会一次选择模拟器进行染色的那条边，然后这"
"时候模拟器才走到第三步，打开纸片。"
msgstr ""
"在上面的证明过程中，有一个相当强的假设，就是每次时间倒流之后，Bob都会选择同一"
"条边。如果 Bob 每次都会换一条不同的边呢？没关系，如果在模拟器第一次实施时间倒"
"流之后，Bob又选择了不同的边，那么模拟器可以把颜色打乱之后，再次运行时间倒流，"
"在多次时间倒流之后，Bob 极大的概率总会一次选择模拟器进行染色的那条边，然后这"
"时候模拟器才走到第三步，打开纸片。"

#: src/zkp-intro/2/zkp-simu.md:180
msgid "阿里巴巴、洞穴与芝麻开门"
msgstr "阿里巴巴、洞穴与芝麻开门"

#: src/zkp-intro/2/zkp-simu.md:182
msgid ""
"在网上众多的讲解「零知识证明」的中文科普文章中，有一个例子流传非常广，这就是"
"阿里巴巴与强盗的故事。可惜地是，这些不同版本的故事都**只讲了一半**。那么我接"
"下来讲一个不一样的「阿里巴巴」与「四十大盗」的故事："
msgstr ""
"在网上众多的讲解「零知识证明」的中文科普文章中，有一个例子流传非常广，这就是"
"阿里巴巴与强盗的故事。可惜地是，这些不同版本的故事都**只讲了一半**。那么我接"
"下来讲一个不一样的「阿里巴巴」与「四十大盗」的故事："

#: src/zkp-intro/2/zkp-simu.md:184
msgid ""
"在很久很久以前，在一个叫做巴格达的城市里，住着一个人叫阿里巴巴。每天阿里巴巴"
"会到集市上买东西。"
msgstr ""
"在很久很久以前，在一个叫做巴格达的城市里，住着一个人叫阿里巴巴。每天阿里巴巴"
"会到集市上买东西。"

#: src/zkp-intro/2/zkp-simu.md:186
msgid ""
"有一天，阿里巴巴被一个盗贼抢了钱包，于是他一路追着盗贼到了一个山洞口，然后盗"
"贼就消失了。阿里巴巴发现洞口里面有两条岔路，如下图所示。"
msgstr ""
"有一天，阿里巴巴被一个盗贼抢了钱包，于是他一路追着盗贼到了一个山洞口，然后盗"
"贼就消失了。阿里巴巴发现洞口里面有两条岔路，如下图所示。"

#: src/zkp-intro/2/zkp-simu.md:188
msgid "![](img/alibaba2.jpg)"
msgstr "![](img/alibaba2.jpg)"

#: src/zkp-intro/2/zkp-simu.md:190
msgid ""
"阿里巴巴不知道盗贼往哪边跑了，于是他决定去「左边」岔道看看，很快阿里巴巴就发"
"现这是个死胡同，也不见盗贼踪影。然后他又去「右边」岔道检查，也是个死胡同，不"
"见盗贼踪影。阿里巴巴自言自语道：「该死的盗贼跑哪去了呢？」"
msgstr ""
"阿里巴巴不知道盗贼往哪边跑了，于是他决定去「左边」岔道看看，很快阿里巴巴就发"
"现这是个死胡同，也不见盗贼踪影。然后他又去「右边」岔道检查，也是个死胡同，不"
"见盗贼踪影。阿里巴巴自言自语道：「该死的盗贼跑哪去了呢？」"

#: src/zkp-intro/2/zkp-simu.md:192
msgid ""
"第二天，阿里巴巴又去集市买东西，这次另一个盗贼抢了他的篮子，然后阿里巴巴追着"
"这个盗贼到了昨天同样的山洞口，然后盗贼又不见了，这一次阿里巴巴决定先去「右"
"边」岔道看看，没有发现盗贼，然后再去左边看看，也同样不见盗贼。这好奇怪。"
msgstr ""
"第二天，阿里巴巴又去集市买东西，这次另一个盗贼抢了他的篮子，然后阿里巴巴追着"
"这个盗贼到了昨天同样的山洞口，然后盗贼又不见了，这一次阿里巴巴决定先去「右"
"边」岔道看看，没有发现盗贼，然后再去左边看看，也同样不见盗贼。这好奇怪。"

#: src/zkp-intro/2/zkp-simu.md:194
msgid ""
"第三天，第四天，……，第四十天，同样的故事上演，阿里巴巴追着第四十个大盗到了神"
"秘的洞口，盗贼就消失了。阿里巴巴想，这个山洞里面一定有机关，于是他躲在「右"
"边」岔道的尽头，耐心地等了很长时间，这时一个盗贼跑了进来，走道岔道尽头之后，"
"念了一个咒语「芝麻开门」。这时候墙壁居然打开了，盗贼跑进去之后，然后墙壁又合"
"上了，这时候另一个受害者追了进来，找了半天，一无所获。"
msgstr ""
"第三天，第四天，……，第四十天，同样的故事上演，阿里巴巴追着第四十个大盗到了神"
"秘的洞口，盗贼就消失了。阿里巴巴想，这个山洞里面一定有机关，于是他躲在「右"
"边」岔道的尽头，耐心地等了很长时间，这时一个盗贼跑了进来，走道岔道尽头之后，"
"念了一个咒语「芝麻开门」。这时候墙壁居然打开了，盗贼跑进去之后，然后墙壁又合"
"上了，这时候另一个受害者追了进来，找了半天，一无所获。"

#: src/zkp-intro/2/zkp-simu.md:196
msgid ""
"阿里巴巴随后等他们走了之后，试验了一下这个咒语，果然非常有效，而且阿里巴巴发"
"现这个墙壁通向「左边」岔道。后来，阿里巴巴找到了更换咒语的办法，并且把一个新"
"咒语和洞穴的地理位置写在了一张羊皮纸上。"
msgstr ""
"阿里巴巴随后等他们走了之后，试验了一下这个咒语，果然非常有效，而且阿里巴巴发"
"现这个墙壁通向「左边」岔道。后来，阿里巴巴找到了更换咒语的办法，并且把一个新"
"咒语和洞穴的地理位置写在了一张羊皮纸上。"

#: src/zkp-intro/2/zkp-simu.md:198
msgid "注：到这里，故事并没有结束.... （上字幕）很久很久以后"
msgstr "注：到这里，故事并没有结束.... （上字幕）很久很久以后"

#: src/zkp-intro/2/zkp-simu.md:200
msgid ""
"在很多年后，到了80年代，阿里巴巴的羊皮纸流落到了几个密码学家手里，他们跑到巴"
"格达，找到了洞穴的位置，尽管过了几个世纪，咒语居然仍然有效，这几个密码学家兴"
"奋地打开墙壁，在两个岔道之间跑来跑去。"
msgstr ""
"在很多年后，到了80年代，阿里巴巴的羊皮纸流落到了几个密码学家手里，他们跑到巴"
"格达，找到了洞穴的位置，尽管过了几个世纪，咒语居然仍然有效，这几个密码学家兴"
"奋地打开墙壁，在两个岔道之间跑来跑去。"

#: src/zkp-intro/2/zkp-simu.md:202
msgid ""
"一家电视台很快知道了这个奇异事件，一个密码学家 Mick Ali（与密码学家 Micali 发"
"音相似）决定向电视观众展示他知道这个咒语，首先，电视节目主持人把摄像机架在洞"
"口，然后让所有人都在山洞口等待，这时候 Mick Ali一个人进入到山洞中，然后主持人"
"抛一个硬币，来决定让 Mick Ali 从哪个岔道跑出来。为了纪念阿里巴巴与四十大盗，"
"Mick Ali 重复了四十遍每次都成功。"
msgstr ""
"一家电视台很快知道了这个奇异事件，一个密码学家 Mick Ali（与密码学家 Micali 发"
"音相似）决定向电视观众展示他知道这个咒语，首先，电视节目主持人把摄像机架在洞"
"口，然后让所有人都在山洞口等待，这时候 Mick Ali一个人进入到山洞中，然后主持人"
"抛一个硬币，来决定让 Mick Ali 从哪个岔道跑出来。为了纪念阿里巴巴与四十大盗，"
"Mick Ali 重复了四十遍每次都成功。"

#: src/zkp-intro/2/zkp-simu.md:204
msgid ""
"节目非常成功。但很快，另外一个电视台眼红，也想拍一个类似的节目，但是Mick Ali "
"因为签了独家协议，没办法参与这个新节目。怎么办呢？第二个电视台的主持人心生一"
"计，他找了一个和 Mick Ali 很像的演员，穿着打扮、姿态和说话口音都模仿 Mick "
"Ali。然后他们开拍了，每次主持人掷硬币后，都让这个演员跑出来，但是很显然，演员"
"并不知道咒语，没办法打开那个墙壁。于是有时候演员碰巧会成功，有时候则会失败，"
"于是演员很辛苦，重复了将近一百次，才成功了四十次。最后这个狡猾的新节目主持"
"人，把**录制视频进行了剪辑**，只保留了成功的片段，错误的片段都删除了。然后这"
"个新节目和 Mick Ali 的节目在同一时间，不同频道播出。然后观众们**完全无法区分"
"**哪个视频是真的，哪个视频是假的。第一个电视台的主持人完全明白 Mick Ali 是真"
"正知道墙壁的咒语的人，但是他却不能把这个事实传递给无辜的观众们。"
msgstr ""
"节目非常成功。但很快，另外一个电视台眼红，也想拍一个类似的节目，但是Mick Ali "
"因为签了独家协议，没办法参与这个新节目。怎么办呢？第二个电视台的主持人心生一"
"计，他找了一个和 Mick Ali 很像的演员，穿着打扮、姿态和说话口音都模仿 Mick "
"Ali。然后他们开拍了，每次主持人掷硬币后，都让这个演员跑出来，但是很显然，演员"
"并不知道咒语，没办法打开那个墙壁。于是有时候演员碰巧会成功，有时候则会失败，"
"于是演员很辛苦，重复了将近一百次，才成功了四十次。最后这个狡猾的新节目主持"
"人，把**录制视频进行了剪辑**，只保留了成功的片段，错误的片段都删除了。然后这"
"个新节目和 Mick Ali 的节目在同一时间，不同频道播出。然后观众们**完全无法区分"
"**哪个视频是真的，哪个视频是假的。第一个电视台的主持人完全明白 Mick Ali 是真"
"正知道墙壁的咒语的人，但是他却不能把这个事实传递给无辜的观众们。"

#: src/zkp-intro/2/zkp-simu.md:206
msgid ""
"看到这里，大家是不是对「模拟」慢慢有了感觉？这里第二个电视台的主持人通过剪辑"
"视频的方式，而不是「时间倒流」。他对「理想世界」，也就是电视中播出的内容所在"
"的世界，进行了外部干预，达到了同样的效果。对理想世界而言，这种剪辑本质上就是"
"一种超能力。"
msgstr ""
"看到这里，大家是不是对「模拟」慢慢有了感觉？这里第二个电视台的主持人通过剪辑"
"视频的方式，而不是「时间倒流」。他对「理想世界」，也就是电视中播出的内容所在"
"的世界，进行了外部干预，达到了同样的效果。对理想世界而言，这种剪辑本质上就是"
"一种超能力。"

#: src/zkp-intro/2/zkp-simu.md:208
msgid ""
"这个故事其实来源于一篇论文『如何向你的孩子解释零知识证明』（How to Explain "
"Zero-Knowledge Protocols to Your Children）\\[3\\]，发表在1989年的美密会议"
"上。"
msgstr ""
"这个故事其实来源于一篇论文『如何向你的孩子解释零知识证明』（How to Explain "
"Zero-Knowledge Protocols to Your Children）\\[3\\]，发表在1989年的美密会议"
"上。"

#: src/zkp-intro/2/zkp-simu.md:210
msgid "![](img/alibaba.png)"
msgstr "![](img/alibaba.png)"

#: src/zkp-intro/2/zkp-simu.md:212
msgid "模拟与图灵机"
msgstr "模拟与图灵机"

#: src/zkp-intro/2/zkp-simu.md:214
msgid ""
"一谈到超能力，大家有没有觉得这玩意不科学。是的，如果我们无脑地用「超能力」来"
"解释任何事情，那么我们逻辑就无法自恰（Consistent）。**在理想世界中，模拟器是"
"不能随便开挂的**，比如模拟器肯定不能直接修改 Bob 的内部状态，比如 Bob 在验证"
"步骤明明验证失败，但是模拟器强硬去把验证结果改为「接受」，这会导致我们可以证"
"明：「任何的交互系统都是零知识的」，这个错误结论。"
msgstr ""
"一谈到超能力，大家有没有觉得这玩意不科学。是的，如果我们无脑地用「超能力」来"
"解释任何事情，那么我们逻辑就无法自恰（Consistent）。**在理想世界中，模拟器是"
"不能随便开挂的**，比如模拟器肯定不能直接修改 Bob 的内部状态，比如 Bob 在验证"
"步骤明明验证失败，但是模拟器强硬去把验证结果改为「接受」，这会导致我们可以证"
"明：「任何的交互系统都是零知识的」，这个错误结论。"

#: src/zkp-intro/2/zkp-simu.md:216
msgid "模拟器不是理想世界中全能的上帝"
msgstr "模拟器不是理想世界中全能的上帝"

#: src/zkp-intro/2/zkp-simu.md:218
msgid ""
"那么模拟器到底可以是什么呢？模拟器其实只是一个图灵机。所谓的「时间倒流」，"
"「剪辑录像」这类的所谓超能力并不是玄乎的超自然能力，而是图灵机可以实现的功"
"能。计算机专业的朋友们肯定都用过 VMWare，虚拟机之类的软件，本文讲的「模拟器」"
"完全可以想象成一个「虚拟机」软件，它能虚拟出一个计算机环境，这个虚拟环境就是"
"我们上文说的「理想世界」。「时间倒流」如何解释呢？不知道大家有没有用过虚拟机"
"软件的「快照」功能（Snapshot），使用快照的时候，虚拟机软件可以把整个虚拟计算"
"机的所有状态保存下来，然后在任意时刻，虚拟机软件都可以重新回到保存快照的位置"
"继续运行。"
msgstr ""
"那么模拟器到底可以是什么呢？模拟器其实只是一个图灵机。所谓的「时间倒流」，"
"「剪辑录像」这类的所谓超能力并不是玄乎的超自然能力，而是图灵机可以实现的功"
"能。计算机专业的朋友们肯定都用过 VMWare，虚拟机之类的软件，本文讲的「模拟器」"
"完全可以想象成一个「虚拟机」软件，它能虚拟出一个计算机环境，这个虚拟环境就是"
"我们上文说的「理想世界」。「时间倒流」如何解释呢？不知道大家有没有用过虚拟机"
"软件的「快照」功能（Snapshot），使用快照的时候，虚拟机软件可以把整个虚拟计算"
"机的所有状态保存下来，然后在任意时刻，虚拟机软件都可以重新回到保存快照的位置"
"继续运行。"

#: src/zkp-intro/2/zkp-simu.md:220
msgid ""
"注：其实所谓时间倒流是计算机中的一个基本操作，在程序语言理论中有一个概念叫做 "
"Continuation。抽象地讲，Continuation 表示从现在开始到未来的计算。Continuation"
"这是控制流的一个显式抽象，而 goto，call-with-current-continuation，甚至 "
"thread scheduling  都可以看做是操作 Continuation 的操作符。比如采用call/cc，"
"也就是call-with-current-continuation 就可以轻松地实现「回溯」功能。保存快照可"
"以理解为保存当前的 Continuation，而回到过去的某一刻，就是应用这个"
"Continuation。"
msgstr ""
"注：其实所谓时间倒流是计算机中的一个基本操作，在程序语言理论中有一个概念叫做 "
"Continuation。抽象地讲，Continuation 表示从现在开始到未来的计算。Continuation"
"这是控制流的一个显式抽象，而 goto，call-with-current-continuation，甚至 "
"thread scheduling  都可以看做是操作 Continuation 的操作符。比如采用call/cc，"
"也就是call-with-current-continuation 就可以轻松地实现「回溯」功能。保存快照可"
"以理解为保存当前的 Continuation，而回到过去的某一刻，就是应用这个"
"Continuation。"

#: src/zkp-intro/2/zkp-simu.md:222
msgid ""
"不管 Zlice 还是 Bob，还有我们的每一个观察者，都是一个个可执行程序。**这些程序"
"被拷贝到了虚拟机里**。Zlice 与 Bob 的会话实际上就是这两个程序之间的通讯。观察"
"者是 Hook 在 Zlice 与 Bob 进程 IO 上的程序。在上文的地图三染色「理想世界」的"
"诚实 Bob，实际上是 Bob 进程调用了虚拟机的「随机数发生器」，而这个随机数发生器"
"是能被 Zlice 操纵的。「现实世界」是外部运行虚拟机软件的计算机环境。"
msgstr ""
"不管 Zlice 还是 Bob，还有我们的每一个观察者，都是一个个可执行程序。**这些程序"
"被拷贝到了虚拟机里**。Zlice 与 Bob 的会话实际上就是这两个程序之间的通讯。观察"
"者是 Hook 在 Zlice 与 Bob 进程 IO 上的程序。在上文的地图三染色「理想世界」的"
"诚实 Bob，实际上是 Bob 进程调用了虚拟机的「随机数发生器」，而这个随机数发生器"
"是能被 Zlice 操纵的。「现实世界」是外部运行虚拟机软件的计算机环境。"

#: src/zkp-intro/2/zkp-simu.md:224
msgid "大家是不是又有所悟，我再强调一下："
msgstr "大家是不是又有所悟，我再强调一下："

#: src/zkp-intro/2/zkp-simu.md:226
msgid ""
"证明零知识的过程，就是要寻找一个算法，或者更通俗点说，写出一段代码，它运行在"
"外部计算机系统中，但是实现了虚拟机的功能。而且在虚拟机中，需要有一个不带有"
"「知识」作为输入的 Zlice，可以骗过放入虚拟机运行的 Bob。"
msgstr ""
"证明零知识的过程，就是要寻找一个算法，或者更通俗点说，写出一段代码，它运行在"
"外部计算机系统中，但是实现了虚拟机的功能。而且在虚拟机中，需要有一个不带有"
"「知识」作为输入的 Zlice，可以骗过放入虚拟机运行的 Bob。"

#: src/zkp-intro/2/zkp-simu.md:228
msgid ""
"如果还没理解上面我这句话，请**时光回退**到『区分两个世界』这一小节，重新思考"
"模拟。:P _（Load World State from Snapshot X）_"
msgstr ""
"如果还没理解上面我这句话，请**时光回退**到『区分两个世界』这一小节，重新思考"
"模拟。:P _（Load World State from Snapshot X）_"

#: src/zkp-intro/2/zkp-simu.md:231
msgid "柏拉图的洞穴寓言"
msgstr "柏拉图的洞穴寓言"

#: src/zkp-intro/2/zkp-simu.md:233
msgid ""
"模拟无处不在，哥德尔不完备性定理就使用了模拟的概念，用哥德尔数（Godel "
"Numbers）模拟了形式算术。图灵提出了「Universal Turing Machine」（通用图灵机）"
"的概念，这种图灵机可以模拟自身。"
msgstr ""
"模拟无处不在，哥德尔不完备性定理就使用了模拟的概念，用哥德尔数（Godel "
"Numbers）模拟了形式算术。图灵提出了「Universal Turing Machine」（通用图灵机）"
"的概念，这种图灵机可以模拟自身。"

#: src/zkp-intro/2/zkp-simu.md:235
msgid ""
"但最早的「模拟」概念，出自『理想国』一书的第七卷\\[4\\]中，古希腊哲学家柏拉图"
"讲了这么一则寓言——Allegory of Cave："
msgstr ""
"但最早的「模拟」概念，出自『理想国』一书的第七卷\\[4\\]中，古希腊哲学家柏拉图"
"讲了这么一则寓言——Allegory of Cave："

#: src/zkp-intro/2/zkp-simu.md:237
msgid "![plato's cave](img/plato-cave.jpeg)"
msgstr "![plato's cave](img/plato-cave.jpeg)"

#: src/zkp-intro/2/zkp-simu.md:239
msgid ""
"设想在一个暗无天日的山洞中，有一排被锁链锁住的囚徒，他们从小就只能看到前方的"
"墙壁。这些囚徒们身后是一堵墙，再后面有一堆放着火，在火与墙壁之间，有一些人举"
"着道具和木偶来回走，这样道具木偶就会在火光映射下在墙壁上投下影子。而这些囚徒"
"们整天就只能看着这些影子。因为这些囚徒们从打出生起，所闻所见就只是前方洞壁上"
"的各种影子，他们会以为所看到的这些影子就是真实的世界。"
msgstr ""
"设想在一个暗无天日的山洞中，有一排被锁链锁住的囚徒，他们从小就只能看到前方的"
"墙壁。这些囚徒们身后是一堵墙，再后面有一堆放着火，在火与墙壁之间，有一些人举"
"着道具和木偶来回走，这样道具木偶就会在火光映射下在墙壁上投下影子。而这些囚徒"
"们整天就只能看着这些影子。因为这些囚徒们从打出生起，所闻所见就只是前方洞壁上"
"的各种影子，他们会以为所看到的这些影子就是真实的世界。"

#: src/zkp-intro/2/zkp-simu.md:241
msgid ""
"然而有一天，一个囚徒偶然挣脱锁链，他回头看到了火。但是他从小到大仅能看到暗淡"
"的影子，他第一次看到了明亮的火光。看到了道具和木偶，假如有人告诉他，这些道具"
"和木偶才是实物，他一定会嗤之以鼻，会坚持认为影子才是真实的。"
msgstr ""
"然而有一天，一个囚徒偶然挣脱锁链，他回头看到了火。但是他从小到大仅能看到暗淡"
"的影子，他第一次看到了明亮的火光。看到了道具和木偶，假如有人告诉他，这些道具"
"和木偶才是实物，他一定会嗤之以鼻，会坚持认为影子才是真实的。"

#: src/zkp-intro/2/zkp-simu.md:243
msgid ""
"柏拉图假设说，如果这个囚徒强制拖出洞穴，到外面去看到真实的世界， 一开始囚徒会"
"不适应真实世界的光亮而感到刺目眩晕，他会因此而愤怒。 但是当他慢慢适应了这个世"
"界，看到太阳，树木，河流，看到星空，他逐渐明白，这个世界比洞穴中那个世界更为"
"优越高级。他再也不想回到黑暗的洞穴生活中了。"
msgstr ""
"柏拉图假设说，如果这个囚徒强制拖出洞穴，到外面去看到真实的世界， 一开始囚徒会"
"不适应真实世界的光亮而感到刺目眩晕，他会因此而愤怒。 但是当他慢慢适应了这个世"
"界，看到太阳，树木，河流，看到星空，他逐渐明白，这个世界比洞穴中那个世界更为"
"优越高级。他再也不想回到黑暗的洞穴生活中了。"

#: src/zkp-intro/2/zkp-simu.md:245
msgid ""
"过了一段时间，他对洞穴中的囚徒心生怜悯，于是想去把他们都带出来。但是当他再次"
"返回洞穴中，他因为已经适应了外面明亮的世界，回到洞穴中反而看不清楚。被锁的囚"
"徒们反而认为他的视力受损，胡言乱语，是个疯子，最后当他想尽办法把这群囚徒带出"
"洞穴时，被囚徒们联手杀死。"
msgstr ""
"过了一段时间，他对洞穴中的囚徒心生怜悯，于是想去把他们都带出来。但是当他再次"
"返回洞穴中，他因为已经适应了外面明亮的世界，回到洞穴中反而看不清楚。被锁的囚"
"徒们反而认为他的视力受损，胡言乱语，是个疯子，最后当他想尽办法把这群囚徒带出"
"洞穴时，被囚徒们联手杀死。"

#: src/zkp-intro/2/zkp-simu.md:247
msgid ""
"这是则人类命运的寓言，就和那一排被锁链锁着的囚徒类似， 我们以为眼睛看到的就是"
"世界的真相,但实际上，那也许是幻象，就像洞穴墙壁上投下的影子一样。"
msgstr ""
"这是则人类命运的寓言，就和那一排被锁链锁着的囚徒类似， 我们以为眼睛看到的就是"
"世界的真相,但实际上，那也许是幻象，就像洞穴墙壁上投下的影子一样。"

#: src/zkp-intro/2/zkp-simu.md:249 src/zkp-intro/3/zkp-pok.md:324
#: src/zkp-intro/4/zkp-rom.md:314 src/zkp-intro/5/zkp-crs.md:383
msgid "未完待续"
msgstr "未完待续"

#: src/zkp-intro/2/zkp-simu.md:251
msgid ""
"本文章介绍了理解零知识所需的关键概念——模拟。任何一个零知识的协议，都可以通过"
"构造一个「理想世界」来理解。第一次接触这个概念的读者需要反复琢磨。"
msgstr ""
"本文章介绍了理解零知识所需的关键概念——模拟。任何一个零知识的协议，都可以通过"
"构造一个「理想世界」来理解。第一次接触这个概念的读者需要反复琢磨。"

#: src/zkp-intro/2/zkp-simu.md:253
msgid "计算机科学中有两个方法论至关重要，第一个是「抽象」，第二个是「模拟」"
msgstr "计算机科学中有两个方法论至关重要，第一个是「抽象」，第二个是「模拟」"

#: src/zkp-intro/2/zkp-simu.md:255
msgid ""
"回顾一下在地图三染色问题中，Bob 在「理想世界」与「现实世界」中的对话。虽然 "
"Bob 无法区分两个世界，但是有一点，他可以确信：现实世界中，Alice 没有超能力。"
msgstr ""
"回顾一下在地图三染色问题中，Bob 在「理想世界」与「现实世界」中的对话。虽然 "
"Bob 无法区分两个世界，但是有一点，他可以确信：现实世界中，Alice 没有超能力。"

#: src/zkp-intro/2/zkp-simu.md:257
msgid ""
"问题来了，Alice 没有超能力，并不能直接证明 Alice 真的有答案。万一这个交互协议"
"并不能保证 Alice 一定有知识呢？「零知识」保护了 Alice 的利益，谁来保证 Bob 的"
"利益呢？这个问题留给下一篇。"
msgstr ""
"问题来了，Alice 没有超能力，并不能直接证明 Alice 真的有答案。万一这个交互协议"
"并不能保证 Alice 一定有知识呢？「零知识」保护了 Alice 的利益，谁来保证 Bob 的"
"利益呢？这个问题留给下一篇。"

#: src/zkp-intro/2/zkp-simu.md:259
msgid ""
"_致谢_: 本文受密码学教授 Matthew Green 发表在2014年与2017年的两篇个人博客文章"
"\\[10-11\\]启发。\\*"
msgstr ""
"_致谢_: 本文受密码学教授 Matthew Green 发表在2014年与2017年的两篇个人博客文章"
"\\[10-11\\]启发。\\*"

#: src/zkp-intro/2/zkp-simu.md:263
msgid "\\[1\\] 初识「零知识」与「证明」. 安比实验室. 2019."
msgstr "\\[1\\] 初识「零知识」与「证明」. 安比实验室. 2019."

#: src/zkp-intro/2/zkp-simu.md:264
msgid ""
"\\[2\\] Shafi Goldwasser and Silvio Micali, Probabilistic Encryption, "
"Special issue of Journal of Computer and Systems Sciences, Vol. 28, No. 2, "
"pages 270-299, April 1984."
msgstr ""
"\\[2\\] Shafi Goldwasser and Silvio Micali, Probabilistic Encryption, "
"Special issue of Journal of Computer and Systems Sciences, Vol. 28, No. 2, "
"pages 270-299, April 1984."

#: src/zkp-intro/2/zkp-simu.md:265
msgid ""
"\\[3\\]Quisquater, J.J., Quisquater, M., Quisquater, M., Quisquater, M., "
"Guillou, L., Guillou, M.A., Guillou, G., Guillou, A., Guillou, G. and "
"Guillou, S., 1989, August. How to explain zero-knowledge protocols to your "
"children. In _Conference on the Theory and Application of Cryptology_ (pp. "
"628-631). Springer, New York, NY."
msgstr ""
"\\[3\\]Quisquater, J.J., Quisquater, M., Quisquater, M., Quisquater, M., "
"Guillou, L., Guillou, M.A., Guillou, G., Guillou, A., Guillou, G. and "
"Guillou, S., 1989, August. How to explain zero-knowledge protocols to your "
"children. In _Conference on the Theory and Application of Cryptology_ (pp. "
"628-631). Springer, New York, NY."

#: src/zkp-intro/2/zkp-simu.md:266
msgid ""
"\\[4\\] 柏拉图 and 吴献书, 1986. 理想国 (Vol. 1, No. 986, p. 1). 商务印书馆."
msgstr ""
"\\[4\\] 柏拉图 and 吴献书, 1986. 理想国 (Vol. 1, No. 986, p. 1). 商务印书馆."

#: src/zkp-intro/2/zkp-simu.md:267
msgid ""
"\\[5\\] Goldwasser, Shafi, Silvio Micali, and Charles Rackoff. \"The "
"knowledge complexity of interactive proof systems.\" _SIAM Journal on "
"computing_ 18.1 (1989): 186-208."
msgstr ""
"\\[5\\] Goldwasser, Shafi, Silvio Micali, and Charles Rackoff. \"The "
"knowledge complexity of interactive proof systems.\" _SIAM Journal on "
"computing_ 18.1 (1989): 186-208."

#: src/zkp-intro/2/zkp-simu.md:268
msgid ""
"\\[6\\] Oded, Goldreich. \"Foundations of cryptography basic tools."
"\" (2001). "
msgstr ""
"\\[6\\] Oded, Goldreich. \"Foundations of cryptography basic tools."
"\" (2001). "

#: src/zkp-intro/2/zkp-simu.md:269
msgid ""
"\\[7\\] Rackoff, Charles, and Daniel R. Simon. \"Non-interactive zero-"
"knowledge proof of knowledge and chosen ciphertext attack.\" Annual "
"International Cryptology Conference. Springer, Berlin, Heidelberg, 1991."
msgstr ""
"\\[7\\] Rackoff, Charles, and Daniel R. Simon. \"Non-interactive zero-"
"knowledge proof of knowledge and chosen ciphertext attack.\" Annual "
"International Cryptology Conference. Springer, Berlin, Heidelberg, 1991."

#: src/zkp-intro/2/zkp-simu.md:270
msgid ""
"\\[8\\] Goldreich, Oded, Silvio Micali, and Avi Wigderson. \"Proofs that "
"yield nothing but their validity or all languages in NP have zero-knowledge "
"proof systems.\" Journal of the ACM (JACM) 38.3 (1991): 690-728."
msgstr ""
"\\[8\\] Goldreich, Oded, Silvio Micali, and Avi Wigderson. \"Proofs that "
"yield nothing but their validity or all languages in NP have zero-knowledge "
"proof systems.\" Journal of the ACM (JACM) 38.3 (1991): 690-728."

#: src/zkp-intro/2/zkp-simu.md:272
msgid ""
"\\[10\\] Matthew Green. Zero Knowledge Proofs: An illustrated prime. 2014. "
"https://blog.cryptographyengineering.com/2014/11/27/zero-knowledge-proofs-"
"illustrated-primer/"
msgstr ""
"\\[10\\] Matthew Green. Zero Knowledge Proofs: An illustrated prime. 2014. "
"https://blog.cryptographyengineering.com/2014/11/27/zero-knowledge-proofs-"
"illustrated-primer/"

#: src/zkp-intro/2/zkp-simu.md:273
msgid ""
"\\[11\\] Matthew Green. Zero Knowledge Proofs: An illustrated primer, Part "
"2. 2017. https://blog.cryptographyengineering.com/2017/01/21/zero-knowledge-"
"proofs-an-illustrated-primer-part-2/"
msgstr ""
"\\[11\\] Matthew Green. Zero Knowledge Proofs: An illustrated primer, Part "
"2. 2017. https://blog.cryptographyengineering.com/2017/01/21/zero-knowledge-"
"proofs-an-illustrated-primer-part-2/"

#: src/zkp-intro/3/zkp-pok.md:3
msgid "寻找「知识」"
msgstr "寻找「知识」"

#: src/zkp-intro/3/zkp-pok.md:5
msgid "_探索零知识证明系列（三）_"
msgstr "_探索零知识证明系列（三）_"

#: src/zkp-intro/3/zkp-pok.md:7
msgid "[「零知识」vs. 「可靠性」](#零知识vs-可靠性)"
msgstr "[「零知识」vs. 「可靠性」](#零知识vs-可靠性)"

#: src/zkp-intro/3/zkp-pok.md:8
msgid "[简洁的 Schnorr 协议](#简洁的-schnorr-协议)"
msgstr "[简洁的 Schnorr 协议](#简洁的-schnorr-协议)"

#: src/zkp-intro/3/zkp-pok.md:9
msgid "[证明零知识](#证明零知识)"
msgstr "[证明零知识](#证明零知识)"

#: src/zkp-intro/3/zkp-pok.md:10
msgid "[再遇模拟器](#再遇模拟器)"
msgstr "[再遇模拟器](#再遇模拟器)"

#: src/zkp-intro/3/zkp-pok.md:11
msgid "[Proof of Knowledge ：「知识证明」](#proof-of-knowledge-知识证明)"
msgstr "[Proof of Knowledge ：「知识证明」](#proof-of-knowledge-知识证明)"

#: src/zkp-intro/3/zkp-pok.md:12
msgid "[解读 ECDSA 签名攻击](#解读-ecdsa-签名攻击)"
msgstr "[解读 ECDSA 签名攻击](#解读-ecdsa-签名攻击)"

#: src/zkp-intro/3/zkp-pok.md:13
msgid "[脑洞：我们生活在模拟世界中吗](#脑洞我们生活在模拟世界中吗)"
msgstr "[脑洞：我们生活在模拟世界中吗](#脑洞我们生活在模拟世界中吗)"

#: src/zkp-intro/3/zkp-pok.md:17
msgid ""
"And what, Socrates, is the food of the soul? Surely, I said, knowledge is "
"the food of the soul.  苏格拉底，什么是灵魂的食物？我说过，当然是知识。  —— "
"柏拉图"
msgstr ""
"And what, Socrates, is the food of the soul? Surely, I said, knowledge is "
"the food of the soul.  苏格拉底，什么是灵魂的食物？我说过，当然是知识。  —— "
"柏拉图"

#: src/zkp-intro/3/zkp-pok.md:20
msgid ""
"导言：有些理论非常有趣，零知识证明便是其中之一，摸索了许久，想写点什么，与大"
"家一起讨论。本文是『探索零知识证明』系列的第三篇。全文约 8,000 字，少量数学公"
"式。"
msgstr ""
"导言：有些理论非常有趣，零知识证明便是其中之一，摸索了许久，想写点什么，与大"
"家一起讨论。本文是『探索零知识证明』系列的第三篇。全文约 8,000 字，少量数学公"
"式。"

#: src/zkp-intro/3/zkp-pok.md:22
msgid ""
"本文将在 [Github](https://github.com/sec-bit/learning-zkp/)   进行更新与修"
"正。"
msgstr ""
"本文将在 [Github](https://github.com/sec-bit/learning-zkp/)   进行更新与修"
"正。"

#: src/zkp-intro/3/zkp-pok.md:25
msgid "「零知识」vs. 「可靠性」"
msgstr "「零知识」vs. 「可靠性」"

#: src/zkp-intro/3/zkp-pok.md:27
msgid "我们在许多介绍零知识证明的文章中都能看到这样三个性质："
msgstr "我们在许多介绍零知识证明的文章中都能看到这样三个性质："

#: src/zkp-intro/3/zkp-pok.md:29
msgid "Completeness —— 完备性"
msgstr "Completeness —— 完备性"

#: src/zkp-intro/3/zkp-pok.md:30
msgid "Soundness —— 可靠性"
msgstr "Soundness —— 可靠性"

#: src/zkp-intro/3/zkp-pok.md:31
msgid "Zero-Knowledge —— 零知识"
msgstr "Zero-Knowledge —— 零知识"

#: src/zkp-intro/3/zkp-pok.md:33
msgid "但是少有文章深入解释这个特性背后的深意和洞见。"
msgstr "但是少有文章深入解释这个特性背后的深意和洞见。"

#: src/zkp-intro/3/zkp-pok.md:35
msgid ""
"在『[系列（二）理解「模拟」](https://github.com/sec-bit/learning-zkp/blob/"
"master/zkp-intro/2/zkp-simu.md)』一文中，我们介绍了「模拟器」这个概念。许多介"
"绍文章也避而不谈「模拟」，但「模拟」可以说是安全协议中核心的核心，因为它是定"
"义「安全性」的重要武器。"
msgstr ""
"在『[系列（二）理解「模拟」](https://github.com/sec-bit/learning-zkp/blob/"
"master/zkp-intro/2/zkp-simu.md)』一文中，我们介绍了「模拟器」这个概念。许多介"
"绍文章也避而不谈「模拟」，但「模拟」可以说是安全协议中核心的核心，因为它是定"
"义「安全性」的重要武器。"

#: src/zkp-intro/3/zkp-pok.md:37
msgid ""
"通常，我们定义安全会采用这样一种方式，首先列出一些安全事件，然后说明：如果一"
"个系统安全，那么列出来的安全事件都不会发生。"
msgstr ""
"通常，我们定义安全会采用这样一种方式，首先列出一些安全事件，然后说明：如果一"
"个系统安全，那么列出来的安全事件都不会发生。"

#: src/zkp-intro/3/zkp-pok.md:39
msgid ""
"Rather than giving a list of the events that are _not allowed_ to occur, it "
"(the definition of zero-knowledge proof) gives a maximalist _simulation_ "
"condition."
msgstr ""
"Rather than giving a list of the events that are _not allowed_ to occur, it "
"(the definition of zero-knowledge proof) gives a maximalist _simulation_ "
"condition."

#: src/zkp-intro/3/zkp-pok.md:41
msgid "— Boaz Barak"
msgstr "— Boaz Barak"

#: src/zkp-intro/3/zkp-pok.md:43
msgid ""
"借用密码学家 Boaz Barak 的话，翻译一下，「零知识证明」并不是通过给出一个**不"
"允许发生的事件列表**来定义，而是直接给出了一个最极致的「模拟条件」。"
msgstr ""
"借用密码学家 Boaz Barak 的话，翻译一下，「零知识证明」并不是通过给出一个**不"
"允许发生的事件列表**来定义，而是直接给出了一个最极致的「模拟条件」。"

#: src/zkp-intro/3/zkp-pok.md:45
msgid ""
"所谓「模拟条件」是指，通过「模拟」方法来实现一个「理想世界」，使之与「现实世"
"界」不可区分；而由于在理想世界中不存在知识，所以可以推导出结论：现实世界满足"
"「零知识」。"
msgstr ""
"所谓「模拟条件」是指，通过「模拟」方法来实现一个「理想世界」，使之与「现实世"
"界」不可区分；而由于在理想世界中不存在知识，所以可以推导出结论：现实世界满足"
"「零知识」。"

#: src/zkp-intro/3/zkp-pok.md:47
msgid ""
"我们继续分析下一个交互系统（安全协议）的三个性质：「完备性」、「可靠性」与"
"「零知识」。"
msgstr ""
"我们继续分析下一个交互系统（安全协议）的三个性质：「完备性」、「可靠性」与"
"「零知识」。"

#: src/zkp-intro/3/zkp-pok.md:49
msgid "可靠性（Soundness）：Alice 在没有知识的情况下不能通过 Bob 的验证。"
msgstr "可靠性（Soundness）：Alice 在没有知识的情况下不能通过 Bob 的验证。"

#: src/zkp-intro/3/zkp-pok.md:51
msgid "完备性（Completeness）：Alice 在有知识的情况下可以通过 Bob 的验证。"
msgstr "完备性（Completeness）：Alice 在有知识的情况下可以通过 Bob 的验证。"

#: src/zkp-intro/3/zkp-pok.md:53
msgid ""
"零知识（Zero-knowledge）：Alice 在交互的过程中不会泄露关于知识的任何信息。"
msgstr ""
"零知识（Zero-knowledge）：Alice 在交互的过程中不会泄露关于知识的任何信息。"

#: src/zkp-intro/3/zkp-pok.md:55
msgid ""
"我们可以看出来「可靠性」和「完备性」有一种「对称性」。可靠性保证了恶意的 "
"Alice 一定失败，而完备性保证了诚实的 Alice 一定成功。"
msgstr ""
"我们可以看出来「可靠性」和「完备性」有一种「对称性」。可靠性保证了恶意的 "
"Alice 一定失败，而完备性保证了诚实的 Alice 一定成功。"

#: src/zkp-intro/3/zkp-pok.md:57
msgid ""
"「完备性」比较容易证明，只要 Alice 诚实，Bob 也诚实，那么皆大欢喜。这好比，写"
"好一段代码，喂了一个测试用例，跑完通过收工。"
msgstr ""
"「完备性」比较容易证明，只要 Alice 诚实，Bob 也诚实，那么皆大欢喜。这好比，写"
"好一段代码，喂了一个测试用例，跑完通过收工。"

#: src/zkp-intro/3/zkp-pok.md:59
msgid ""
"我们来想想「可靠性」应该如何定义？这个可靠性的逆否命题是：（在现实世界中）如"
"果 Alice 能通过 Bob 的验证，那么 Alice 一定有知识。或者说：Alice 知道那……个"
"「秘密」！"
msgstr ""
"我们来想想「可靠性」应该如何定义？这个可靠性的逆否命题是：（在现实世界中）如"
"果 Alice 能通过 Bob 的验证，那么 Alice 一定有知识。或者说：Alice 知道那……个"
"「秘密」！"

#: src/zkp-intro/3/zkp-pok.md:61
msgid "下面的问题是如何证明 Alice 知道一个「秘密」？"
msgstr "下面的问题是如何证明 Alice 知道一个「秘密」？"

#: src/zkp-intro/3/zkp-pok.md:63
msgid ""
"这好像也很难，对不对？假如我们需要证明一台机器知道一个「秘密」，最简单的办法"
"就是我们在机器的硬盘里，或者内存中找到这个「秘密」，但是这样暴露了秘密。如果"
"这台机器是黑盒子呢？或者是 Alice 呢？我们没有读心术，猜不到她心里的那个秘密。"
msgstr ""
"这好像也很难，对不对？假如我们需要证明一台机器知道一个「秘密」，最简单的办法"
"就是我们在机器的硬盘里，或者内存中找到这个「秘密」，但是这样暴露了秘密。如果"
"这台机器是黑盒子呢？或者是 Alice 呢？我们没有读心术，猜不到她心里的那个秘密。"

#: src/zkp-intro/3/zkp-pok.md:65
msgid "如何定义「To Know」？"
msgstr "如何定义「To Know」？"

#: src/zkp-intro/3/zkp-pok.md:67
msgid ""
"「零知识」保证了 验证者 Bob 没有（计算）能力来把和「知识」有关的信息「抽取」"
"出来。不能抽取的「知识」不代表不存在。「可靠性」保证了知识的「存在性」。"
msgstr ""
"「零知识」保证了 验证者 Bob 没有（计算）能力来把和「知识」有关的信息「抽取」"
"出来。不能抽取的「知识」不代表不存在。「可靠性」保证了知识的「存在性」。"

#: src/zkp-intro/3/zkp-pok.md:69
msgid "只有「知识」在存在的前提下，保证「零知识」才有意义"
msgstr "只有「知识」在存在的前提下，保证「零知识」才有意义"

#: src/zkp-intro/3/zkp-pok.md:71
msgid "本文将探讨「可靠性」和「To Know」。"
msgstr "本文将探讨「可靠性」和「To Know」。"

#: src/zkp-intro/3/zkp-pok.md:75
msgid ""
"为了进一步分析「知识」，接下来首先介绍一个非常简洁，用途广泛的零知识证明系统 "
"—— Schnorr 协议。这个协议代表了一大类的安全协议，所谓的 Σ-协议，而且 Schnorr "
"协议扩展也是 [零知识数据交换协议 zkPoD](https://github.com/sec-bit/zkPoD-"
"node) \\[1\\] 的核心技术之一。"
msgstr ""
"为了进一步分析「知识」，接下来首先介绍一个非常简洁，用途广泛的零知识证明系统 "
"—— Schnorr 协议。这个协议代表了一大类的安全协议，所谓的 Σ-协议，而且 Schnorr "
"协议扩展也是 [零知识数据交换协议 zkPoD](https://github.com/sec-bit/zkPoD-"
"node) \\[1\\] 的核心技术之一。"

#: src/zkp-intro/3/zkp-pok.md:77 src/public goods/4-Proving-System.md:5
msgid "简洁的 Schnorr 协议"
msgstr "简洁的 Schnorr 协议"

#: src/zkp-intro/3/zkp-pok.md:79
msgid ""
"Alice 拥有一个秘密数字，`a`，我们可以把这个数字想象成「私钥」，然后把它「映"
"射」到椭圆曲线群上的一个点 `a*G`，简写为 `aG`。这个点我们把它当做「公钥」。"
msgstr ""
"Alice 拥有一个秘密数字，`a`，我们可以把这个数字想象成「私钥」，然后把它「映"
"射」到椭圆曲线群上的一个点 `a*G`，简写为 `aG`。这个点我们把它当做「公钥」。"

#: src/zkp-intro/3/zkp-pok.md:81
msgid "`sk = a`"
msgstr "`sk = a`"

#: src/zkp-intro/3/zkp-pok.md:83 src/public goods/4-Proving-System.md:10
msgid "`PK = aG`"
msgstr "`PK = aG`"

#: src/zkp-intro/3/zkp-pok.md:85
msgid ""
"请注意「映射」这个词，我们这里先简要介绍「同态」这个概念。椭圆曲线群有限域之"
"间存在着一种同态映射关系。有限域，我们用 `Zq`这个符号表示，其中素数 `q`是指有"
"限域的大小，它是指从 `0, 1, 2, …, q-1` 这样一个整数集合。而在一条椭圆曲线上，"
"我们通过一个基点，`G`，可以产生一个「循环群」，标记为 `0G, G, 2G, …, "
"(q-1)G`，正好是数量为 `q`个 曲线点的集合。任意两个曲线点正好可以进行一种「特"
"殊的二元运算」，`G + G = 2G`，`2G + 3G = 5G`，看起来这个二元运算好像和「加"
"法」类似，满足交换律和结合律。于是我们就用 `+`这个符号来表示。之所以把这个群"
"称为循环群，因为把群的最后一个元素 `(q-1)G`，再加上一个 `G`就回卷到群的第一个"
"元素 `0G`。"
msgstr ""
"请注意「映射」这个词，我们这里先简要介绍「同态」这个概念。椭圆曲线群有限域之"
"间存在着一种同态映射关系。有限域，我们用 `Zq`这个符号表示，其中素数 `q`是指有"
"限域的大小，它是指从 `0, 1, 2, …, q-1` 这样一个整数集合。而在一条椭圆曲线上，"
"我们通过一个基点，`G`，可以产生一个「循环群」，标记为 `0G, G, 2G, …, "
"(q-1)G`，正好是数量为 `q`个 曲线点的集合。任意两个曲线点正好可以进行一种「特"
"殊的二元运算」，`G + G = 2G`，`2G + 3G = 5G`，看起来这个二元运算好像和「加"
"法」类似，满足交换律和结合律。于是我们就用 `+`这个符号来表示。之所以把这个群"
"称为循环群，因为把群的最后一个元素 `(q-1)G`，再加上一个 `G`就回卷到群的第一个"
"元素 `0G`。"

#: src/zkp-intro/3/zkp-pok.md:87
msgid ""
"给任意一个有限域上的整数 `r`，我们就可以在循环群中找到一个对应的点 `rG`，或者"
"用一个标量乘法来表示 `r*G`。但是反过来计算是很「困难」的，这是一个「密码学难"
"题」—— 被称为离散对数难题\\[2\\]。"
msgstr ""
"给任意一个有限域上的整数 `r`，我们就可以在循环群中找到一个对应的点 `rG`，或者"
"用一个标量乘法来表示 `r*G`。但是反过来计算是很「困难」的，这是一个「密码学难"
"题」—— 被称为离散对数难题\\[2\\]。"

#: src/zkp-intro/3/zkp-pok.md:89
msgid ""
"也就是说，如果任意给一个椭圆曲线循环群上的点 `R`，那么到底是有限域中的哪一个"
"整数对应 `R`，这个计算是很难的，如果有限域足够大，比如说 256bit 这么大，我们"
"姑且可以认为这个反向计算是不可能做到的。"
msgstr ""
"也就是说，如果任意给一个椭圆曲线循环群上的点 `R`，那么到底是有限域中的哪一个"
"整数对应 `R`，这个计算是很难的，如果有限域足够大，比如说 256bit 这么大，我们"
"姑且可以认为这个反向计算是不可能做到的。"

#: src/zkp-intro/3/zkp-pok.md:91
msgid ""
"Schnorr 协议充分利用了有限域和循环群之间单向映射，实现了最简单的零知识证明安"
"全协议：Alice 向 Bob 证明她拥有 `PK` 对应的私钥 `sk`。"
msgstr ""
"Schnorr 协议充分利用了有限域和循环群之间单向映射，实现了最简单的零知识证明安"
"全协议：Alice 向 Bob 证明她拥有 `PK` 对应的私钥 `sk`。"

#: src/zkp-intro/3/zkp-pok.md:93 src/zkp-intro/3/zkp-pok.md:146
#: src/zkp-intro/4/zkp-rom.md:105
msgid "![](img/schnorr.png)"
msgstr "![](img/schnorr.png)"

#: src/zkp-intro/3/zkp-pok.md:95
msgid ""
"第一步：为了保证零知识，Alice 需要先产生一个随机数，`r`，这个随机数的用途是用"
"来保护私钥无法被 Bob 抽取出来。这个随机数也需要映射到椭圆曲线群上，`rG`。"
msgstr ""
"第一步：为了保证零知识，Alice 需要先产生一个随机数，`r`，这个随机数的用途是用"
"来保护私钥无法被 Bob 抽取出来。这个随机数也需要映射到椭圆曲线群上，`rG`。"

#: src/zkp-intro/3/zkp-pok.md:97
msgid "第二步：Bob 要提供一个随机数进行挑战，我们把它称为 `c`。"
msgstr "第二步：Bob 要提供一个随机数进行挑战，我们把它称为 `c`。"

#: src/zkp-intro/3/zkp-pok.md:99
msgid ""
"第三步：Alice 根据挑战数计算 `z = r + a * c`，同时把 `z`发给 Bob，Bob通过下面"
"的式子进行检验："
msgstr ""
"第三步：Alice 根据挑战数计算 `z = r + a * c`，同时把 `z`发给 Bob，Bob通过下面"
"的式子进行检验："

#: src/zkp-intro/3/zkp-pok.md:105
msgid ""
"大家可以看到 Bob  在第三步「同态地」检验 `z` 的计算过程。如果这个式子成立，那"
"么就能证明 Alice 确实有私钥 `a`。可是，这是为什么呢？"
msgstr ""
"大家可以看到 Bob  在第三步「同态地」检验 `z` 的计算过程。如果这个式子成立，那"
"么就能证明 Alice 确实有私钥 `a`。可是，这是为什么呢？"

#: src/zkp-intro/3/zkp-pok.md:107
msgid "`z` 的计算和验证过程很有趣，有几个关键技巧："
msgstr "`z` 的计算和验证过程很有趣，有几个关键技巧："

#: src/zkp-intro/3/zkp-pok.md:109
msgid ""
"首先 Bob 必须给出一个「随机」挑战数，然后 Bob 在椭圆曲线上同态地检查 `z` 。如"
"果我们把挑战数 `c` 看成是一个未知数，那么 `r+a*c=z` 可以看成是一个一元一次方"
"程，其中 `r` 与 `a` 是方程系数。请注意在 `c` 未知的前提下，如果 `r + a*x = "
"r' + a'*x` 要成立，那么根据 Schwatz-Zippel 定理\\[3\\]，极大概率上 `r=r'`，"
"`a=a'` 都成立。也就是说， Alice 在 `c` 未知的前提下，想找到另一对不同的 `r'`,"
"`a'` 来计算 `z` 骗过 Bob 是几乎不可能的。这个随机挑战数 `c` 实现了`r` 和 `a` "
"的限制。虽然 Bob 随机选了一个数，但是由于 Alice 事先不知道，所以 Alice 不得不"
"使用私钥 `a` 来计算 `z`。这里的关键： `c` 必须是个随机数。"
msgstr ""
"首先 Bob 必须给出一个「随机」挑战数，然后 Bob 在椭圆曲线上同态地检查 `z` 。如"
"果我们把挑战数 `c` 看成是一个未知数，那么 `r+a*c=z` 可以看成是一个一元一次方"
"程，其中 `r` 与 `a` 是方程系数。请注意在 `c` 未知的前提下，如果 `r + a*x = "
"r' + a'*x` 要成立，那么根据 Schwatz-Zippel 定理\\[3\\]，极大概率上 `r=r'`，"
"`a=a'` 都成立。也就是说， Alice 在 `c` 未知的前提下，想找到另一对不同的 `r'`,"
"`a'` 来计算 `z` 骗过 Bob 是几乎不可能的。这个随机挑战数 `c` 实现了`r` 和 `a` "
"的限制。虽然 Bob 随机选了一个数，但是由于 Alice 事先不知道，所以 Alice 不得不"
"使用私钥 `a` 来计算 `z`。这里的关键： `c` 必须是个随机数。"

#: src/zkp-intro/3/zkp-pok.md:110
msgid ""
"Bob 验证是在椭圆曲线群上完成。Bob 不知道`r`，但是他知道 `r` 映射到曲线上的点"
"`R`；Bob 也不知道 `a`，但是他知道 `a` 映射到曲线群上的点 `PK`，即 `a*G`。通过"
"同态映射与Schwatz-Zippel 定理，Bob 可以校验 `z` 的计算过程是否正确，从而知道 "
"Alice 确实是通过 `r` 和 `a` 计算得出的 `z`，但是又不暴露 `r` 与 `a` 的值。 "
msgstr ""
"Bob 验证是在椭圆曲线群上完成。Bob 不知道`r`，但是他知道 `r` 映射到曲线上的点"
"`R`；Bob 也不知道 `a`，但是他知道 `a` 映射到曲线群上的点 `PK`，即 `a*G`。通过"
"同态映射与Schwatz-Zippel 定理，Bob 可以校验 `z` 的计算过程是否正确，从而知道 "
"Alice 确实是通过 `r` 和 `a` 计算得出的 `z`，但是又不暴露 `r` 与 `a` 的值。 "

#: src/zkp-intro/3/zkp-pok.md:111
msgid ""
"还有，在协议第一步中产生的随机数 `r` 保证了 `a` 的保密性。因为任何一个秘密当"
"和一个符合「一致性分布」的随机数相加之后的和仍然符合「一致性分布」。"
msgstr ""
"还有，在协议第一步中产生的随机数 `r` 保证了 `a` 的保密性。因为任何一个秘密当"
"和一个符合「一致性分布」的随机数相加之后的和仍然符合「一致性分布」。"

#: src/zkp-intro/3/zkp-pok.md:113
msgid "证明零知识"
msgstr "证明零知识"

#: src/zkp-intro/3/zkp-pok.md:115
msgid ""
"我们这里看一下 Schnorr 协议如何证明一个弱一些的「零知识」性质——「SHVZK」："
msgstr ""
"我们这里看一下 Schnorr 协议如何证明一个弱一些的「零知识」性质——「SHVZK」："

#: src/zkp-intro/3/zkp-pok.md:117
msgid ""
"注：这里我们证明的仅仅是 Special Honest Verifier Zero-Knowledge（SHVZK）。"
"SHVZK 要求协议中的 Bob 的行为不能不按常理出牌，比如他必须按协议约定，在第二步"
"时，去传送带上取一个新鲜的随机数，并且立即使用。而通常意义上的「零知识」是不"
"会对 Bob 做任何要求，所以我们说这里是一个弱一些的性质。虽然目前 Schnorr 协议"
"不能证明完全的「零知识」，但经过添加一些协议步骤，就可以达到完全零知识的目"
"的，细节这里不展开，有兴趣的读者请参考文献\\[4\\]。以后我们在讨论 Fiat-"
"Shamir 变换时，还会再次讨论这个问题。"
msgstr ""
"注：这里我们证明的仅仅是 Special Honest Verifier Zero-Knowledge（SHVZK）。"
"SHVZK 要求协议中的 Bob 的行为不能不按常理出牌，比如他必须按协议约定，在第二步"
"时，去传送带上取一个新鲜的随机数，并且立即使用。而通常意义上的「零知识」是不"
"会对 Bob 做任何要求，所以我们说这里是一个弱一些的性质。虽然目前 Schnorr 协议"
"不能证明完全的「零知识」，但经过添加一些协议步骤，就可以达到完全零知识的目"
"的，细节这里不展开，有兴趣的读者请参考文献\\[4\\]。以后我们在讨论 Fiat-"
"Shamir 变换时，还会再次讨论这个问题。"

#: src/zkp-intro/3/zkp-pok.md:119
msgid ""
"首先「模拟器」模拟一个「理想世界」，在理想世界中模拟出一个 Zlice 和 Bob 对"
"话，Zlice 没有 Schnorr 协议中的知识，`sk`，而 Bob 是有公钥 `PK`的。请大家看下"
"图，Bob 需要在 Schnorr 协议中的第二步出示一个随机数 `c`，这里有个额外的要"
"求， 就是 Bob 只能「诚实地」从一个外部「随机数传送带」上拿一个随机数，每一个"
"随机数都必须是事先抛k次「硬币」产生的一个 `2^k` 范围内的一次性分布随机数。"
"Bob 不能采用任何别的方式产生随机数，这就是为何我们要求 Bob 是诚实的。"
msgstr ""
"首先「模拟器」模拟一个「理想世界」，在理想世界中模拟出一个 Zlice 和 Bob 对"
"话，Zlice 没有 Schnorr 协议中的知识，`sk`，而 Bob 是有公钥 `PK`的。请大家看下"
"图，Bob 需要在 Schnorr 协议中的第二步出示一个随机数 `c`，这里有个额外的要"
"求， 就是 Bob 只能「诚实地」从一个外部「随机数传送带」上拿一个随机数，每一个"
"随机数都必须是事先抛k次「硬币」产生的一个 `2^k` 范围内的一次性分布随机数。"
"Bob 不能采用任何别的方式产生随机数，这就是为何我们要求 Bob 是诚实的。"

#: src/zkp-intro/3/zkp-pok.md:121
msgid "下面演示 Zlice 如何骗过 Bob："
msgstr "下面演示 Zlice 如何骗过 Bob："

#: src/zkp-intro/3/zkp-pok.md:123
msgid "![](img/schnorr-sim-1.png)"
msgstr "![](img/schnorr-sim-1.png)"

#: src/zkp-intro/3/zkp-pok.md:125
msgid ""
"序幕：请注意 Zlice 没有关于`sk`的知识，这时 Bob 的随机数传送带上已经预先放置"
"了一些随机数。"
msgstr ""
"序幕：请注意 Zlice 没有关于`sk`的知识，这时 Bob 的随机数传送带上已经预先放置"
"了一些随机数。"

#: src/zkp-intro/3/zkp-pok.md:127
msgid "![](img/schnorr-sim-2.png)"
msgstr "![](img/schnorr-sim-2.png)"

#: src/zkp-intro/3/zkp-pok.md:130
msgid ""
"第一步：Zlice 产生一个一致性分布的随机数`c`，并且利用一个新的「超能力」，将刚"
"刚产生的随机数 `c` 替换掉 Bob 的随机数传送带上第一个随机数。这时候，Bob 无法"
"察觉。"
msgstr ""
"第一步：Zlice 产生一个一致性分布的随机数`c`，并且利用一个新的「超能力」，将刚"
"刚产生的随机数 `c` 替换掉 Bob 的随机数传送带上第一个随机数。这时候，Bob 无法"
"察觉。"

#: src/zkp-intro/3/zkp-pok.md:132
msgid "![](img/schnorr-sim-3.png)"
msgstr "![](img/schnorr-sim-3.png)"

#: src/zkp-intro/3/zkp-pok.md:134
msgid ""
"第二步：Zlice 再次产生一个随机数 `z`，然后计算 `R'=z*G - c*PK`，并将 `R'`发送"
"给 Bob。"
msgstr ""
"第二步：Zlice 再次产生一个随机数 `z`，然后计算 `R'=z*G - c*PK`，并将 `R'`发送"
"给 Bob。"

#: src/zkp-intro/3/zkp-pok.md:136
msgid "![](img/schnorr-sim-4.png)"
msgstr "![](img/schnorr-sim-4.png)"

#: src/zkp-intro/3/zkp-pok.md:138
msgid ""
"第三步：这时候Bob 会从随机数传送带上取得 `c`，并且将 `c` 发送给 Zlice。请注意"
"这个`c` 正好就是第一步中 Zlice 产生的 `c`。"
msgstr ""
"第三步：这时候Bob 会从随机数传送带上取得 `c`，并且将 `c` 发送给 Zlice。请注意"
"这个`c` 正好就是第一步中 Zlice 产生的 `c`。"

#: src/zkp-intro/3/zkp-pok.md:140
msgid "![](img/schnorr-sim-5.png)"
msgstr "![](img/schnorr-sim-5.png)"

#: src/zkp-intro/3/zkp-pok.md:142
msgid ""
"第四步：Zlice 将第三步产生的随机数 `z` 发送给 Bob，Bob 按照 Schnorr 协议的验"
"证公式进行验证，大家可以检查下，这个公式完美成立。"
msgstr ""
"第四步：Zlice 将第三步产生的随机数 `z` 发送给 Bob，Bob 按照 Schnorr 协议的验"
"证公式进行验证，大家可以检查下，这个公式完美成立。"

#: src/zkp-intro/3/zkp-pok.md:144
msgid ""
"大家可以再对比下「现实世界」的 Schnorr 协议，在两个世界中，Bob 都能通过验证。"
msgstr ""
"大家可以再对比下「现实世界」的 Schnorr 协议，在两个世界中，Bob 都能通过验证。"

#: src/zkp-intro/3/zkp-pok.md:148
msgid "但区别是："
msgstr "但区别是："

#: src/zkp-intro/3/zkp-pok.md:150
msgid "在「理想世界中」，Zlice 没有 `sk`；而在「现实世界中」，Alice 有 `sk`"
msgstr "在「理想世界中」，Zlice 没有 `sk`；而在「现实世界中」，Alice 有 `sk`"

#: src/zkp-intro/3/zkp-pok.md:151
msgid ""
"在「理想世界中」，`z` 是一个随机数，没有涉及 `sk`；而在「现实世界中」，`z` 的"
"计算过程里面包含 `sk`"
msgstr ""
"在「理想世界中」，`z` 是一个随机数，没有涉及 `sk`；而在「现实世界中」，`z` 的"
"计算过程里面包含 `sk`"

#: src/zkp-intro/3/zkp-pok.md:152
msgid ""
"在「理想世界中」，Zlice 使用了超能力，替换了 Bob 的随机数；而在「现实世界"
"中」，Alice 看不到 Bob 的随机数传送带，也无法更改传送带上的数字"
msgstr ""
"在「理想世界中」，Zlice 使用了超能力，替换了 Bob 的随机数；而在「现实世界"
"中」，Alice 看不到 Bob 的随机数传送带，也无法更改传送带上的数字"

#: src/zkp-intro/3/zkp-pok.md:154
msgid ""
"这里请大家思考下：Schnorr 协议中，Bob 在第二步发挑战数能不能和第一步对调顺"
"序？也就是说 Bob 能不能先发挑战数，然后 Alice 再发送 `R = r*G`。"
msgstr ""
"这里请大家思考下：Schnorr 协议中，Bob 在第二步发挑战数能不能和第一步对调顺"
"序？也就是说 Bob 能不能先发挑战数，然后 Alice 再发送 `R = r*G`。"

#: src/zkp-intro/3/zkp-pok.md:156
msgid "（两分钟后……）"
msgstr "（两分钟后……）"

#: src/zkp-intro/3/zkp-pok.md:158
msgid "答案是不能。"
msgstr "答案是不能。"

#: src/zkp-intro/3/zkp-pok.md:160
msgid ""
"如果 Alice 能提前知道随机数，那么 （现实世界中的）Alice 就可以按照模拟器 "
"Zlice 做法来欺骗 Bob。"
msgstr ""
"如果 Alice 能提前知道随机数，那么 （现实世界中的）Alice 就可以按照模拟器 "
"Zlice 做法来欺骗 Bob。"

#: src/zkp-intro/3/zkp-pok.md:162
msgid "再遇模拟器"
msgstr "再遇模拟器"

#: src/zkp-intro/3/zkp-pok.md:164
msgid ""
"其实，「可靠性」和「零知识」这两个性质在另一个维度上也是存在着一种对称性。可"
"靠性保证了恶意的 Alice 一定失败，零知识保证了恶意的 Bob （窃取知识）一定不会"
"成功。有趣地是，这种对称性将体现在模拟出来的「理想世界」中。"
msgstr ""
"其实，「可靠性」和「零知识」这两个性质在另一个维度上也是存在着一种对称性。可"
"靠性保证了恶意的 Alice 一定失败，零知识保证了恶意的 Bob （窃取知识）一定不会"
"成功。有趣地是，这种对称性将体现在模拟出来的「理想世界」中。"

#: src/zkp-intro/3/zkp-pok.md:166
msgid ""
"我们分析下可靠性这个定义：Alice 没有知识 **导致** Bob 验证失败。它的逆否命题"
"为：Bob 验证成功 **导致** Alice 一定有知识。"
msgstr ""
"我们分析下可靠性这个定义：Alice 没有知识 **导致** Bob 验证失败。它的逆否命题"
"为：Bob 验证成功 **导致** Alice 一定有知识。"

#: src/zkp-intro/3/zkp-pok.md:168
msgid ""
"**我们再次求助模拟器**，让他在可以发挥超能力的「理想世界」中，去检验 Alice 的"
"知识。"
msgstr ""
"**我们再次求助模拟器**，让他在可以发挥超能力的「理想世界」中，去检验 Alice 的"
"知识。"

#: src/zkp-intro/3/zkp-pok.md:170
msgid ""
"再次，请大家设想在平行宇宙中，有两个世界，一个是叫做「理想世界」，另一个叫做"
"「现实世界」。理想世界有趣的地方在于它是被「模拟器」模拟出来的，同时模拟器可"
"以在理想世界中放入带有超能力的 NPC。这次把 Alice 的两个分身同时放入「理想世"
"界」与「现实世界」。"
msgstr ""
"再次，请大家设想在平行宇宙中，有两个世界，一个是叫做「理想世界」，另一个叫做"
"「现实世界」。理想世界有趣的地方在于它是被「模拟器」模拟出来的，同时模拟器可"
"以在理想世界中放入带有超能力的 NPC。这次把 Alice 的两个分身同时放入「理想世"
"界」与「现实世界」。"

#: src/zkp-intro/3/zkp-pok.md:172
msgid ""
"假设「你」扮演 Bob 的角色，你想知道和你对话的 Alice 是否真的是「可靠的」。 于"
"是把你放入「理想世界」，借助一个具有超能力的 NPC，你可以把对面的 Alice 的知识"
"「抽取」出来。"
msgstr ""
"假设「你」扮演 Bob 的角色，你想知道和你对话的 Alice 是否真的是「可靠的」。 于"
"是把你放入「理想世界」，借助一个具有超能力的 NPC，你可以把对面的 Alice 的知识"
"「抽取」出来。"

#: src/zkp-intro/3/zkp-pok.md:174
msgid ""
"W...hat？我们不是刚刚证明过：协议是零知识的吗？零知识就意味着 Bob 抽取不出任"
"何的「知识」碎片。这里敲黑板，「零知识」是对于「现实世界」而言的。我们现在正"
"在讨论的是神奇的「理想世界」。"
msgstr ""
"W...hat？我们不是刚刚证明过：协议是零知识的吗？零知识就意味着 Bob 抽取不出任"
"何的「知识」碎片。这里敲黑板，「零知识」是对于「现实世界」而言的。我们现在正"
"在讨论的是神奇的「理想世界」。"

#: src/zkp-intro/3/zkp-pok.md:176
msgid ""
"重复一遍，在「理想世界」中，你可以借助一个有超能力的 NPC 来抽取 Alice 的知"
"识，从而可以保证「现实世界」中的 Alice 无法作弊。可以想象一下，一个作弊的 "
"Alice，她肯定没有知识，没有知识也就不可能在「理想世界」中让 NPC 抽取到任何东"
"西。"
msgstr ""
"重复一遍，在「理想世界」中，你可以借助一个有超能力的 NPC 来抽取 Alice 的知"
"识，从而可以保证「现实世界」中的 Alice 无法作弊。可以想象一下，一个作弊的 "
"Alice，她肯定没有知识，没有知识也就不可能在「理想世界」中让 NPC 抽取到任何东"
"西。"

#: src/zkp-intro/3/zkp-pok.md:178
msgid ""
"然而在「现实世界」中，你无法借助 NPC，当然也就看不到 Alice 的知识，也就不会和"
"「零知识」性质冲突。因为两个世界发生的事件是「不可区分」的，我们可以得到这样"
"的结论：在「现实世界」中，Alice 一定是存在知识的。"
msgstr ""
"然而在「现实世界」中，你无法借助 NPC，当然也就看不到 Alice 的知识，也就不会和"
"「零知识」性质冲突。因为两个世界发生的事件是「不可区分」的，我们可以得到这样"
"的结论：在「现实世界」中，Alice 一定是存在知识的。"

#: src/zkp-intro/3/zkp-pok.md:180
msgid ""
"整理一下思路：如何证明在一个交互会话中 Alice 不能作弊呢？我们需要为这个交互会"
"话定义一个「模拟算法」，该算法可以模拟出一个「理想世界」，其中有一个特殊的角"
"色叫做「抽取器」(Extractor)，也就是我们前面说的 NPC，它能够通过「超能力」来"
"「抽取」Alice 的知识，但是让对方「无所察觉」。"
msgstr ""
"整理一下思路：如何证明在一个交互会话中 Alice 不能作弊呢？我们需要为这个交互会"
"话定义一个「模拟算法」，该算法可以模拟出一个「理想世界」，其中有一个特殊的角"
"色叫做「抽取器」(Extractor)，也就是我们前面说的 NPC，它能够通过「超能力」来"
"「抽取」Alice 的知识，但是让对方「无所察觉」。"

#: src/zkp-intro/3/zkp-pok.md:182
msgid ""
"注意，超能力是必不可少的！这一点在『[系列（二）理解「模拟」](https://github."
"com/sec-bit/learning-zkp/blob/master/zkp-intro/2/zkp-simu.md)』有解释，如果模"
"拟器在没有超能力的情况下具备作弊能力，那相当于证明了协议「不可靠」"
"（Unsoudness）。同样地，如果「抽取器」在没有超能力的情况下具备抽取信息能力，"
"那相当于证明了协议不零知（Not-zero-knowledge）。"
msgstr ""
"注意，超能力是必不可少的！这一点在『[系列（二）理解「模拟」](https://github."
"com/sec-bit/learning-zkp/blob/master/zkp-intro/2/zkp-simu.md)』有解释，如果模"
"拟器在没有超能力的情况下具备作弊能力，那相当于证明了协议「不可靠」"
"（Unsoudness）。同样地，如果「抽取器」在没有超能力的情况下具备抽取信息能力，"
"那相当于证明了协议不零知（Not-zero-knowledge）。"

#: src/zkp-intro/3/zkp-pok.md:184
msgid ""
"最后一点，超能力是什么？这个要取决于具体的交互系统的证明，我们接下来就先拿我"
"们刚刚讲过的Schnorr 协议切入。"
msgstr ""
"最后一点，超能力是什么？这个要取决于具体的交互系统的证明，我们接下来就先拿我"
"们刚刚讲过的Schnorr 协议切入。"

#: src/zkp-intro/3/zkp-pok.md:186
msgid "Proof of Knowledge ：「知识证明」"
msgstr "Proof of Knowledge ：「知识证明」"

#: src/zkp-intro/3/zkp-pok.md:188
msgid ""
"我们来证明一下 Schnorr 协议的「可靠性」，看看这个超能力 NPC 如何在「理想世"
"界」中把 Alice 私钥抽取出来。而这个「超能力」，仍然是「时间倒流」。"
msgstr ""
"我们来证明一下 Schnorr 协议的「可靠性」，看看这个超能力 NPC 如何在「理想世"
"界」中把 Alice 私钥抽取出来。而这个「超能力」，仍然是「时间倒流」。"

#: src/zkp-intro/3/zkp-pok.md:190
msgid "![schnorr-extractor-1](img/schnorr-extractor-1.png)"
msgstr "![schnorr-extractor-1](img/schnorr-extractor-1.png)"

#: src/zkp-intro/3/zkp-pok.md:192
msgid ""
"第一步：Alice 选择一个随机数 `r`，并且计算 `R=r*G`，并将 `R` 发给「抽取器」 "
msgstr ""
"第一步：Alice 选择一个随机数 `r`，并且计算 `R=r*G`，并将 `R` 发给「抽取器」 "

#: src/zkp-intro/3/zkp-pok.md:194
msgid "![schnorr-extractor-2](img/schnorr-extractor-2.png)"
msgstr "![schnorr-extractor-2](img/schnorr-extractor-2.png)"

#: src/zkp-intro/3/zkp-pok.md:196
msgid "第二步：抽取器也选择一个随机的挑战数`c`，并且发给 Alice"
msgstr "第二步：抽取器也选择一个随机的挑战数`c`，并且发给 Alice"

#: src/zkp-intro/3/zkp-pok.md:198
msgid "![schnorr-extractor-3](img/schnorr-extractor-3.png)"
msgstr "![schnorr-extractor-3](img/schnorr-extractor-3.png)"

#: src/zkp-intro/3/zkp-pok.md:201
msgid "第三步：Alice 计算并且回应 `z`，然后抽取器检查 `z`是否正确"
msgstr "第三步：Alice 计算并且回应 `z`，然后抽取器检查 `z`是否正确"

#: src/zkp-intro/3/zkp-pok.md:203
msgid "![schnorr-extractor-4](img/schnorr-extractor-4.png)"
msgstr "![schnorr-extractor-4](img/schnorr-extractor-4.png)"

#: src/zkp-intro/3/zkp-pok.md:205
msgid "第四步：抽取器发现  `z` 没有问题之后，发动超能力，将时间倒回第二步之前"
msgstr "第四步：抽取器发现  `z` 没有问题之后，发动超能力，将时间倒回第二步之前"

#: src/zkp-intro/3/zkp-pok.md:207
msgid "![schnorr-extractor-5](img/schnorr-extractor-5.png)"
msgstr "![schnorr-extractor-5](img/schnorr-extractor-5.png)"

#: src/zkp-intro/3/zkp-pok.md:209
msgid ""
"第五步：抽取器再次发送一个不同的随机挑战数 `c'`给 Alice，这时候 Alice 回到第"
"二步，会有一种似曾相识的感觉，但是无法感知到时间倒回这个事实"
msgstr ""
"第五步：抽取器再次发送一个不同的随机挑战数 `c'`给 Alice，这时候 Alice 回到第"
"二步，会有一种似曾相识的感觉，但是无法感知到时间倒回这个事实"

#: src/zkp-intro/3/zkp-pok.md:211
msgid "![schnorr-extractor-6](img/schnorr-extractor-6.png)"
msgstr "![schnorr-extractor-6](img/schnorr-extractor-6.png)"

#: src/zkp-intro/3/zkp-pok.md:213
msgid "第六步：Alice 再次计算了 `z'`，然后发给抽取器检查"
msgstr "第六步：Alice 再次计算了 `z'`，然后发给抽取器检查"

#: src/zkp-intro/3/zkp-pok.md:215
msgid "![schnorr-extractor-7](img/schnorr-extractor-7.png)"
msgstr "![schnorr-extractor-7](img/schnorr-extractor-7.png)"

#: src/zkp-intro/3/zkp-pok.md:217
msgid ""
"第七步：这时候抽取器有了`z`和`z'`，就可以直接推算出 Alice 所拥有的私钥 `a`，"
"达成「知识抽取」"
msgstr ""
"第七步：这时候抽取器有了`z`和`z'`，就可以直接推算出 Alice 所拥有的私钥 `a`，"
"达成「知识抽取」"

#: src/zkp-intro/3/zkp-pok.md:219
msgid ""
"到这里，「可靠性」就基本证明完了。大家是不是对可靠性和零知性的「对称性」有点"
"感觉了？"
msgstr ""
"到这里，「可靠性」就基本证明完了。大家是不是对可靠性和零知性的「对称性」有点"
"感觉了？"

#: src/zkp-intro/3/zkp-pok.md:221
msgid ""
"总结一下：「抽取器」在「理想世界」中，通过时间倒流的超能力，把 Alice 的「知"
"识」完整地「抽取」出来，这就保证了一个没有知识的 Alice 是无法让抽取器达成目"
"标，从而证明了「可靠性」。"
msgstr ""
"总结一下：「抽取器」在「理想世界」中，通过时间倒流的超能力，把 Alice 的「知"
"识」完整地「抽取」出来，这就保证了一个没有知识的 Alice 是无法让抽取器达成目"
"标，从而证明了「可靠性」。"

#: src/zkp-intro/3/zkp-pok.md:223
msgid ""
"注：并不是所有的可靠性都必须要求存在抽取器算法。采用抽取器来证明可靠性的证明"
"系统被称为「Proof of Knowledge」。"
msgstr ""
"注：并不是所有的可靠性都必须要求存在抽取器算法。采用抽取器来证明可靠性的证明"
"系统被称为「Proof of Knowledge」。"

#: src/zkp-intro/3/zkp-pok.md:226
msgid "解读 ECDSA 签名攻击"
msgstr "解读 ECDSA 签名攻击"

#: src/zkp-intro/3/zkp-pok.md:228
msgid ""
"在区块链系统中到处可见的ECDSA 签名方案**也是**一个朴素的零知识证明系统。椭圆"
"曲线数字签名方案 ECDSA 与 Schnorr 协议非常接近，基于 Schnorr 协议的签名方案发"
"表在 1991年的『密码学杂志』\\[5\\]上。1991年，正值美国国家标准局（NIST）选择"
"数字签名算法，优雅的 Schnorr 签名方案居然被申请了专利，因此 NIST 提出了另一套"
"签名方案 DSA（Digital Signature Algorithm），随后这个方案支持了椭圆曲线，于是"
"被称为 ECDSA。中本聪在构思比特币时，选择了 ECDSA 作为签名算法，但是曲线并没有"
"选择 NIST 标准推荐的椭圆曲线 —— secp256-r1，而是 secp256-k1。因为江湖传言，"
"NIST 可能在椭圆曲线参数选择上做了手脚，导致某些机构可以用不为人知的办法求解离"
"散对数难题，从而有能力在「现实世界」中具备超能力。有不少人在怀疑，也许当年中"
"本聪在设计比特币时，也有这种考虑，故意选择了 secp256-k1 这样一条貌似安全性稍"
"弱的曲线。"
msgstr ""
"在区块链系统中到处可见的ECDSA 签名方案**也是**一个朴素的零知识证明系统。椭圆"
"曲线数字签名方案 ECDSA 与 Schnorr 协议非常接近，基于 Schnorr 协议的签名方案发"
"表在 1991年的『密码学杂志』\\[5\\]上。1991年，正值美国国家标准局（NIST）选择"
"数字签名算法，优雅的 Schnorr 签名方案居然被申请了专利，因此 NIST 提出了另一套"
"签名方案 DSA（Digital Signature Algorithm），随后这个方案支持了椭圆曲线，于是"
"被称为 ECDSA。中本聪在构思比特币时，选择了 ECDSA 作为签名算法，但是曲线并没有"
"选择 NIST 标准推荐的椭圆曲线 —— secp256-r1，而是 secp256-k1。因为江湖传言，"
"NIST 可能在椭圆曲线参数选择上做了手脚，导致某些机构可以用不为人知的办法求解离"
"散对数难题，从而有能力在「现实世界」中具备超能力。有不少人在怀疑，也许当年中"
"本聪在设计比特币时，也有这种考虑，故意选择了 secp256-k1 这样一条貌似安全性稍"
"弱的曲线。"

#: src/zkp-intro/3/zkp-pok.md:230
msgid ""
"我们拆解下 ECDSA 签名，用交互的方式定义一个类似 ECDSA 的认证方案，交互见下"
"图。"
msgstr ""
"我们拆解下 ECDSA 签名，用交互的方式定义一个类似 ECDSA 的认证方案，交互见下"
"图。"

#: src/zkp-intro/3/zkp-pok.md:232
msgid "![ecdsa-sig](img/ecdsa.png)"
msgstr "![ecdsa-sig](img/ecdsa.png)"

#: src/zkp-intro/3/zkp-pok.md:234
msgid ""
"第一步：Alice 仍然是选择一个随机数 `k`，并将 `k` 映射到椭圆曲线上，得到点 "
"`K` ，然后发送给 Bob "
msgstr ""
"第一步：Alice 仍然是选择一个随机数 `k`，并将 `k` 映射到椭圆曲线上，得到点 "
"`K` ，然后发送给 Bob "

#: src/zkp-intro/3/zkp-pok.md:236
msgid "第二步：Bob 需要产生两个随机数，`c` 和 `e`，然后交给 Alice "
msgstr "第二步：Bob 需要产生两个随机数，`c` 和 `e`，然后交给 Alice "

#: src/zkp-intro/3/zkp-pok.md:238
msgid "第三步：Alice 计算 `s`，并且发送给 Bob，他来验证 `s` 的计算过程是否正确"
msgstr ""
"第三步：Alice 计算 `s`，并且发送给 Bob，他来验证 `s` 的计算过程是否正确"

#: src/zkp-intro/3/zkp-pok.md:240
msgid ""
"注：对熟悉 ECDSA 签名方案的读者，这里略作解释，Bob 产生的 `c` 对应被签消息的 "
"Hash 值 `Hash(m)`，而 `e` 则是由一个转换函数 `F(K)`来产生。其中 `F(.)` 是取椭"
"圆曲线上的点的 x 坐标经过 `(mod q)` 得到\\[6\\]。"
msgstr ""
"注：对熟悉 ECDSA 签名方案的读者，这里略作解释，Bob 产生的 `c` 对应被签消息的 "
"Hash 值 `Hash(m)`，而 `e` 则是由一个转换函数 `F(K)`来产生。其中 `F(.)` 是取椭"
"圆曲线上的点的 x 坐标经过 `(mod q)` 得到\\[6\\]。"

#: src/zkp-intro/3/zkp-pok.md:242
msgid ""
"江湖上流传着一个说法：ECDSA 签名方案有个严重的安全隐患，如果在两次签名中使用"
"了同一个随机数，那么签名者的私钥将会暴露出来。其实 Schnorr 签名方案也有同样的"
"问题。"
msgstr ""
"江湖上流传着一个说法：ECDSA 签名方案有个严重的安全隐患，如果在两次签名中使用"
"了同一个随机数，那么签名者的私钥将会暴露出来。其实 Schnorr 签名方案也有同样的"
"问题。"

#: src/zkp-intro/3/zkp-pok.md:244
msgid ""
"当年 Sony  PlayStation 3 的工程师在调用 ECDSA 库函数时，本来应该输入随机数的"
"参数位置上，却传入了一个常数。熟悉密码学的黑客们发现了这个严重的后门。2011年1"
"月，神奇小子 Geohot 公开发布了 Sony PS3 的主私钥，这意味着任何用户都可以轻松"
"拿到游戏机的 root 权限。Sony 随后大为光火…… （后续故事大家可以上网搜）"
msgstr ""
"当年 Sony  PlayStation 3 的工程师在调用 ECDSA 库函数时，本来应该输入随机数的"
"参数位置上，却传入了一个常数。熟悉密码学的黑客们发现了这个严重的后门。2011年1"
"月，神奇小子 Geohot 公开发布了 Sony PS3 的主私钥，这意味着任何用户都可以轻松"
"拿到游戏机的 root 权限。Sony 随后大为光火…… （后续故事大家可以上网搜）"

#: src/zkp-intro/3/zkp-pok.md:246
msgid ""
"如果 Alice 在两次交互过程中使用了同一个 `K`，那么 Bob 可以通过发送两个不同的 "
"`c` 和 `c'` 来得到 `s` 和 `s'`，然后通过下面的公式算出私钥 `a`："
msgstr ""
"如果 Alice 在两次交互过程中使用了同一个 `K`，那么 Bob 可以通过发送两个不同的 "
"`c` 和 `c'` 来得到 `s` 和 `s'`，然后通过下面的公式算出私钥 `a`："

#: src/zkp-intro/3/zkp-pok.md:253
msgid ""
"那么我们应该怎么来看这个「安全后门」呢？大家想想看，这个安全后门和我们前面证"
"明过的 Schnorr 协议的可靠性证明几乎一模一样！这个算法正是 ECDSA 认证协议的"
"「可靠性」证明中的「抽取器」算法。只不过在可靠性证明中，为了让 Alice 使用同一"
"个随机数 `k` 来认证两次，「抽取器」需要利用「时间倒流」的超能力。"
msgstr ""
"那么我们应该怎么来看这个「安全后门」呢？大家想想看，这个安全后门和我们前面证"
"明过的 Schnorr 协议的可靠性证明几乎一模一样！这个算法正是 ECDSA 认证协议的"
"「可靠性」证明中的「抽取器」算法。只不过在可靠性证明中，为了让 Alice 使用同一"
"个随机数 `k` 来认证两次，「抽取器」需要利用「时间倒流」的超能力。"

#: src/zkp-intro/3/zkp-pok.md:255
msgid ""
"但是在 Sony PS3 系统中，随机数被不明所以的工程师写成了一个固定不变的值，这样"
"相当于直接赋予了黑客「超能力」，而这是在「现实世界」中。或者说，黑客在不需要"
"「时间倒流」的情况下就能实现「抽取器」。"
msgstr ""
"但是在 Sony PS3 系统中，随机数被不明所以的工程师写成了一个固定不变的值，这样"
"相当于直接赋予了黑客「超能力」，而这是在「现实世界」中。或者说，黑客在不需要"
"「时间倒流」的情况下就能实现「抽取器」。"

#: src/zkp-intro/3/zkp-pok.md:257
msgid ""
"提醒下，不仅仅是随机数不能重复的问题。而是随机数必须是具有密码学安全强度的随"
"机数。"
msgstr ""
"提醒下，不仅仅是随机数不能重复的问题。而是随机数必须是具有密码学安全强度的随"
"机数。"

#: src/zkp-intro/3/zkp-pok.md:259
msgid ""
"设想下，如果随机数 `r` 是通过一个利用「线性同余」原理的伪随机数生成器产生，虽"
"然 `r`的值一直在变化，但是仍然不能阻止「知识抽取」。假设线性同余算法为 `r2= "
"d*r1 + e (mod m)`，还回到 Schnorr 协议的第三步："
msgstr ""
"设想下，如果随机数 `r` 是通过一个利用「线性同余」原理的伪随机数生成器产生，虽"
"然 `r`的值一直在变化，但是仍然不能阻止「知识抽取」。假设线性同余算法为 `r2= "
"d*r1 + e (mod m)`，还回到 Schnorr 协议的第三步："

#: src/zkp-intro/3/zkp-pok.md:265
msgid ""
"如果攻击者让 Alice 连续做两次签名，那么将 `r2` 代入  `r1` 之后，就出现了两个"
"线性方程求解两个未知数 `(r1, a)` 的情况，`z1, z2, c1, c2, d, e` 对于 攻击者是"
"已知的，这个方程组只用初中数学知识就可以求解。"
msgstr ""
"如果攻击者让 Alice 连续做两次签名，那么将 `r2` 代入  `r1` 之后，就出现了两个"
"线性方程求解两个未知数 `(r1, a)` 的情况，`z1, z2, c1, c2, d, e` 对于 攻击者是"
"已知的，这个方程组只用初中数学知识就可以求解。"

#: src/zkp-intro/3/zkp-pok.md:267
msgid ""
"请注意，这并不是 Schnorr 协议（或 ECDSA 协议）的「设计缺陷」，恰恰相反，这是 "
"Schnorr 协议设计比较精巧的地方，它**从原理上保证了协议的可靠性**。类似技巧在"
"密码学协议中频繁出现，达到一目了然的「简洁」。但是也不得不说，如果不清楚协议"
"的内在机制，尤其是区分不清楚「理想世界」与「现实世界」，使用者很容易引入各种"
"花式的「安全漏洞」。"
msgstr ""
"请注意，这并不是 Schnorr 协议（或 ECDSA 协议）的「设计缺陷」，恰恰相反，这是 "
"Schnorr 协议设计比较精巧的地方，它**从原理上保证了协议的可靠性**。类似技巧在"
"密码学协议中频繁出现，达到一目了然的「简洁」。但是也不得不说，如果不清楚协议"
"的内在机制，尤其是区分不清楚「理想世界」与「现实世界」，使用者很容易引入各种"
"花式的「安全漏洞」。"

#: src/zkp-intro/3/zkp-pok.md:269
msgid ""
"作为一个能写出可靠软件的靠谱码农，我们需要了解哪些？彻底理解安全协议的设计机"
"制当然是最好的，但是绝大多数情况下是非常耗费精力的。一般来说，我们把各种密码"
"学工具当做「黑盒」来用，可能是不够的，我们最好还能了解下："
msgstr ""
"作为一个能写出可靠软件的靠谱码农，我们需要了解哪些？彻底理解安全协议的设计机"
"制当然是最好的，但是绝大多数情况下是非常耗费精力的。一般来说，我们把各种密码"
"学工具当做「黑盒」来用，可能是不够的，我们最好还能了解下："

#: src/zkp-intro/3/zkp-pok.md:271
msgid "「安全定义」是什么？"
msgstr "「安全定义」是什么？"

#: src/zkp-intro/3/zkp-pok.md:272
msgid "「安全假设」到底是什么？"
msgstr "「安全假设」到底是什么？"

#: src/zkp-intro/3/zkp-pok.md:273
msgid "「理想世界」中的「超能力」到底是什么？"
msgstr "「理想世界」中的「超能力」到底是什么？"

#: src/zkp-intro/3/zkp-pok.md:275
msgid "脑洞：我们生活在模拟世界中吗"
msgstr "脑洞：我们生活在模拟世界中吗"

#: src/zkp-intro/3/zkp-pok.md:277
msgid ""
"第一次读懂「模拟器」时，我第一时间想到的是电影『黑客帝国』。我们生活所在「现"
"实世界」也许是某一个模拟器模拟出来的「理想世界」，我们所看到、听到的以及感知"
"到的一切都是被「模拟」出来的。在「现实世界」里，我们活在一个母体中。然而我们"
"并不能意识到这一点。"
msgstr ""
"第一次读懂「模拟器」时，我第一时间想到的是电影『黑客帝国』。我们生活所在「现"
"实世界」也许是某一个模拟器模拟出来的「理想世界」，我们所看到、听到的以及感知"
"到的一切都是被「模拟」出来的。在「现实世界」里，我们活在一个母体中。然而我们"
"并不能意识到这一点。"

#: src/zkp-intro/3/zkp-pok.md:279
msgid "![](img/matrix.jpg)"
msgstr "![](img/matrix.jpg)"

#: src/zkp-intro/3/zkp-pok.md:281
msgid "早在春秋战国时期，庄子也在思考类似的问题："
msgstr "早在春秋战国时期，庄子也在思考类似的问题："

#: src/zkp-intro/3/zkp-pok.md:283
msgid ""
"昔者庄周梦为胡蝶，栩栩然胡蝶也，自喻适志与，不知周也。俄然觉，则蘧蘧然周也。"
"不知周之梦为胡蝶与，胡蝶之梦为周与？周与胡蝶，则必有分矣。此之谓物化。——《庄"
"子·齐物论》"
msgstr ""
"昔者庄周梦为胡蝶，栩栩然胡蝶也，自喻适志与，不知周也。俄然觉，则蘧蘧然周也。"
"不知周之梦为胡蝶与，胡蝶之梦为周与？周与胡蝶，则必有分矣。此之谓物化。——《庄"
"子·齐物论》"

#: src/zkp-intro/3/zkp-pok.md:285
msgid ""
"通俗地解释下：庄子有一天睡着了，梦见自己变成了一只蝴蝶，翩翩起舞，醒来之后发"
"现自己还是庄子，在梦中，蝴蝶并不知道自己是庄子。于是庄子沉思到底是他梦中变成"
"了蝴蝶，还是蝴蝶梦中变成了庄子呢？如果梦境足够真实，……"
msgstr ""
"通俗地解释下：庄子有一天睡着了，梦见自己变成了一只蝴蝶，翩翩起舞，醒来之后发"
"现自己还是庄子，在梦中，蝴蝶并不知道自己是庄子。于是庄子沉思到底是他梦中变成"
"了蝴蝶，还是蝴蝶梦中变成了庄子呢？如果梦境足够真实，……"

#: src/zkp-intro/3/zkp-pok.md:287
msgid ""
"「缸中之脑」是美国哲学家 Gilbert Harman 提出的这样一个想法：一个人的大脑可以"
"被放入一个容器里面，然后插上电线，通过模拟各种电信号输入，使得大脑以为自己活"
"在真实世界中。"
msgstr ""
"「缸中之脑」是美国哲学家 Gilbert Harman 提出的这样一个想法：一个人的大脑可以"
"被放入一个容器里面，然后插上电线，通过模拟各种电信号输入，使得大脑以为自己活"
"在真实世界中。"

#: src/zkp-intro/3/zkp-pok.md:289
msgid "![](img/brain-in-a-vat.png)"
msgstr "![](img/brain-in-a-vat.png)"

#: src/zkp-intro/3/zkp-pok.md:291
msgid ""
"这个想法源自哲学家笛卡尔的《第一哲学沉思集》\\[7\\]，在书中他论证我们应该怀疑"
"一切，需要逐一检验所有人类的知识，数学，几何，以及感知到的世界。然而他发现除"
"了「我思故我在」之外，所有的知识都可能不靠谱，因为我们的大脑很可能被一个具有"
"「超能力」的 Evil Demon 所欺骗。"
msgstr ""
"这个想法源自哲学家笛卡尔的《第一哲学沉思集》\\[7\\]，在书中他论证我们应该怀疑"
"一切，需要逐一检验所有人类的知识，数学，几何，以及感知到的世界。然而他发现除"
"了「我思故我在」之外，所有的知识都可能不靠谱，因为我们的大脑很可能被一个具有"
"「超能力」的 Evil Demon 所欺骗。"

#: src/zkp-intro/3/zkp-pok.md:293
msgid ""
"2003 年牛津大学的哲学教授 Nick Bostrom 郑重其事地写了一篇论文『我们生活在计算"
"机模拟世界中吗？』\\[8\\]。认为以下三个事实中，至少有一个成立："
msgstr ""
"2003 年牛津大学的哲学教授 Nick Bostrom 郑重其事地写了一篇论文『我们生活在计算"
"机模拟世界中吗？』\\[8\\]。认为以下三个事实中，至少有一个成立："

#: src/zkp-intro/3/zkp-pok.md:295
msgid "人类文明彻底灭绝。"
msgstr "人类文明彻底灭绝。"

#: src/zkp-intro/3/zkp-pok.md:296
msgid ""
"人类文明已经到达可以完全模拟现实世界的科技水平，但是处于某种原因，没有一个人"
"愿意去创造出一个新的模拟世界，充当上帝的角色。"
msgstr ""
"人类文明已经到达可以完全模拟现实世界的科技水平，但是处于某种原因，没有一个人"
"愿意去创造出一个新的模拟世界，充当上帝的角色。"

#: src/zkp-intro/3/zkp-pok.md:297
msgid "我们现在的人类文明就生活在一个模拟世界中。"
msgstr "我们现在的人类文明就生活在一个模拟世界中。"

#: src/zkp-intro/3/zkp-pok.md:299
msgid ""
"硅谷企业家 Elon Musk 在一次公开采访中，谈到「我们生活在基础现实世界」的概率只"
"有「十亿分之一」。也就是说，他认为我们生活在一个电脑游戏（模拟世界）中，在模"
"拟世界之外，有一个程序员，他开发并操纵了这个世界，我们每个人都是一个游戏角色"
"（ NPC）。"
msgstr ""
"硅谷企业家 Elon Musk 在一次公开采访中，谈到「我们生活在基础现实世界」的概率只"
"有「十亿分之一」。也就是说，他认为我们生活在一个电脑游戏（模拟世界）中，在模"
"拟世界之外，有一个程序员，他开发并操纵了这个世界，我们每个人都是一个游戏角色"
"（ NPC）。"

#: src/zkp-intro/3/zkp-pok.md:301
msgid ""
"在玩腻越狱 iPhone 和自动驾驶之后，神奇小子 Geohot 在今年三月份的「西南偏南」"
"大会上做了一个题为「Jailbreaking the Simulation」的演讲\\[9\\]。他认为，我们"
"被生活在一个模拟世界中，所谓的上帝就是外部世界里活蹦乱跳的码农们，他们编程创"
"造了我们的「现实世界」，当然，他们可能启动了不止一个世界副本。然而，他们可能"
"也生活在一个外层「模拟世界」中。"
msgstr ""
"在玩腻越狱 iPhone 和自动驾驶之后，神奇小子 Geohot 在今年三月份的「西南偏南」"
"大会上做了一个题为「Jailbreaking the Simulation」的演讲\\[9\\]。他认为，我们"
"被生活在一个模拟世界中，所谓的上帝就是外部世界里活蹦乱跳的码农们，他们编程创"
"造了我们的「现实世界」，当然，他们可能启动了不止一个世界副本。然而，他们可能"
"也生活在一个外层「模拟世界」中。"

#: src/zkp-intro/3/zkp-pok.md:303
msgid "![Jailbreaking the Simulation](img/sxsw.jpg)"
msgstr "![Jailbreaking the Simulation](img/sxsw.jpg)"

#: src/zkp-intro/3/zkp-pok.md:305
msgid ""
"如果我们确实生活在模拟世界中，或许我们可以在地球的某个地方找到一个后门——"
"「Simulation Trapdoor」，从而获得「模拟器」的超能力，抽取出不可思议的「秘密知"
"识」。"
msgstr ""
"如果我们确实生活在模拟世界中，或许我们可以在地球的某个地方找到一个后门——"
"「Simulation Trapdoor」，从而获得「模拟器」的超能力，抽取出不可思议的「秘密知"
"识」。"

#: src/zkp-intro/3/zkp-pok.md:307
msgid ""
"如果我们的世界的确是被程序模拟出来的，这个程序也许会有 Bug，如果有 Bug 存在，"
"说不定我们可以利用这个 Bug 进行越狱，跳出「理想世界」，到达外面一层的世界中，"
"与可爱的码农上帝聊一聊。"
msgstr ""
"如果我们的世界的确是被程序模拟出来的，这个程序也许会有 Bug，如果有 Bug 存在，"
"说不定我们可以利用这个 Bug 进行越狱，跳出「理想世界」，到达外面一层的世界中，"
"与可爱的码农上帝聊一聊。"

#: src/zkp-intro/3/zkp-pok.md:309
msgid "这是在开玩笑吗？下面摘自自知乎的一个段子\\[10\\]："
msgstr "这是在开玩笑吗？下面摘自自知乎的一个段子\\[10\\]："

#: src/zkp-intro/3/zkp-pok.md:311
msgid "问题：「如果世界是虚拟的，有哪些实例可以证明？」。"
msgstr "问题：「如果世界是虚拟的，有哪些实例可以证明？」。"

#: src/zkp-intro/3/zkp-pok.md:312
msgid "回答："
msgstr "回答："

#: src/zkp-intro/3/zkp-pok.md:314
msgid ""
"为什么宏观上丰富多彩，但是微观的基本粒子却都是一模一样的？这正和图片富多彩，"
"但是像素是一模一样的一回事"
msgstr ""
"为什么宏观上丰富多彩，但是微观的基本粒子却都是一模一样的？这正和图片富多彩，"
"但是像素是一模一样的一回事"

#: src/zkp-intro/3/zkp-pok.md:315
msgid "为什么光速有上限？因为机器的运行速度有限"
msgstr "为什么光速有上限？因为机器的运行速度有限"

#: src/zkp-intro/3/zkp-pok.md:316
msgid "为什么会有普朗克常量？因为机器的数据精度有限"
msgstr "为什么会有普朗克常量？因为机器的数据精度有限"

#: src/zkp-intro/3/zkp-pok.md:317
msgid "为什么微观粒子都是几率云？这是为了避免系统陷入循环而增加的随机扰动"
msgstr "为什么微观粒子都是几率云？这是为了避免系统陷入循环而增加的随机扰动"

#: src/zkp-intro/3/zkp-pok.md:318
msgid "为什么有泡利不相容原理？看来系统采用的数据组织是多维数组"
msgstr "为什么有泡利不相容原理？看来系统采用的数据组织是多维数组"

#: src/zkp-intro/3/zkp-pok.md:319
msgid ""
"为什么量子计算机运行速度那么快，一瞬间可以尝试所有可能？因为这个本质上是调用"
"了宿主机的接口"
msgstr ""
"为什么量子计算机运行速度那么快，一瞬间可以尝试所有可能？因为这个本质上是调用"
"了宿主机的接口"

#: src/zkp-intro/3/zkp-pok.md:320
msgid "为什么会有量子纠缠？这实际上是引用同一个对象的两个指针"
msgstr "为什么会有量子纠缠？这实际上是引用同一个对象的两个指针"

#: src/zkp-intro/3/zkp-pok.md:321
msgid "为什么会有观察者效应？这显然是lazy updating"
msgstr "为什么会有观察者效应？这显然是lazy updating"

#: src/zkp-intro/3/zkp-pok.md:322
msgid "为什么时间有开端？系统有启动时间"
msgstr "为什么时间有开端？系统有启动时间"

#: src/zkp-intro/3/zkp-pok.md:326
msgid ""
"设计一个密码学协议就好像在走钢丝，如果你想同时做到「零知识」和「可靠性」就意"
"味着既要让协议内容充分随机，又要保证「知识」能够参与协议的交互。如果协议没有"
"正确设计，亦或没有正确工程实现，都将导致系统安全性坍塌。比如可能破坏了零知"
"性，导致「知识」在不经意间泄露；或者也许破坏了可靠性，导致任何人都能伪造证"
"明。而且这种安全性，远比传统的代码底层机制漏洞来得更加严重，并且更难被发现。"
"严格数学论证，这似乎是必不可少的。"
msgstr ""
"设计一个密码学协议就好像在走钢丝，如果你想同时做到「零知识」和「可靠性」就意"
"味着既要让协议内容充分随机，又要保证「知识」能够参与协议的交互。如果协议没有"
"正确设计，亦或没有正确工程实现，都将导致系统安全性坍塌。比如可能破坏了零知"
"性，导致「知识」在不经意间泄露；或者也许破坏了可靠性，导致任何人都能伪造证"
"明。而且这种安全性，远比传统的代码底层机制漏洞来得更加严重，并且更难被发现。"
"严格数学论证，这似乎是必不可少的。"

#: src/zkp-intro/3/zkp-pok.md:328
msgid ""
"我们的世界真的是某个「三体文明」模拟出来的吗？不能排除这个可能性，或许，我们"
"需要认真地重新审视自己的各种执念。不过那又怎么样呢？至少自己的「思想」是真实"
"的。"
msgstr ""
"我们的世界真的是某个「三体文明」模拟出来的吗？不能排除这个可能性，或许，我们"
"需要认真地重新审视自己的各种执念。不过那又怎么样呢？至少自己的「思想」是真实"
"的。"

#: src/zkp-intro/3/zkp-pok.md:330
msgid ""
"If you would be a real seeker after truth, it is necessary that at least "
"once in your life you doubt, as far as possible, all things.  如果你是一个真"
"正的真理探求者，在你人生中至少要有一次，尽可能地质疑所有的事情。 —— 笛卡尔"
msgstr ""
"If you would be a real seeker after truth, it is necessary that at least "
"once in your life you doubt, as far as possible, all things.  如果你是一个真"
"正的真理探求者，在你人生中至少要有一次，尽可能地质疑所有的事情。 —— 笛卡尔"

#: src/zkp-intro/3/zkp-pok.md:333
msgid ""
"_致谢：特别感谢 Shengchao Ding, Jie Zhang，Yu Chen 以及安比实验室小伙伴们"
"(p0n1, even, aphasiayc, Vawheter, yghu, mr)的建议和指正。_"
msgstr ""
"_致谢：特别感谢 Shengchao Ding, Jie Zhang，Yu Chen 以及安比实验室小伙伴们"
"(p0n1, even, aphasiayc, Vawheter, yghu, mr)的建议和指正。_"

#: src/zkp-intro/3/zkp-pok.md:337
msgid ""
"\\[1\\] zkPoD: 区块链，零知识证明与形式化验证，实现无中介、零信任的公平交易. "
"安比实验室. 2019."
msgstr ""
"\\[1\\] zkPoD: 区块链，零知识证明与形式化验证，实现无中介、零信任的公平交易. "
"安比实验室. 2019."

#: src/zkp-intro/3/zkp-pok.md:338
msgid ""
"\\[2\\] Hoffstein, Jeffrey, Jill Pipher, Joseph H. Silverman, and Joseph H. "
"Silverman. An introduction to mathematical cryptography. Vol. 1. New York: "
"springer, 2008."
msgstr ""
"\\[2\\] Hoffstein, Jeffrey, Jill Pipher, Joseph H. Silverman, and Joseph H. "
"Silverman. An introduction to mathematical cryptography. Vol. 1. New York: "
"springer, 2008."

#: src/zkp-intro/3/zkp-pok.md:339
msgid ""
"\\[3\\] Schwartz–Zippel Lemma. Wikipedia.  https://en.wikipedia.org/wiki/"
"Schwartz%E2%80%93Zippel_lemma"
msgstr ""
"\\[3\\] Schwartz–Zippel Lemma. Wikipedia.  https://en.wikipedia.org/wiki/"
"Schwartz%E2%80%93Zippel_lemma"

#: src/zkp-intro/3/zkp-pok.md:340
msgid ""
"\\[4\\] Damgård, Ivan. \"On Σ-protocols.\" _Lecture Notes, University of "
"Aarhus, Department for Computer Science_ (2002)."
msgstr ""
"\\[4\\] Damgård, Ivan. \"On Σ-protocols.\" _Lecture Notes, University of "
"Aarhus, Department for Computer Science_ (2002)."

#: src/zkp-intro/3/zkp-pok.md:341
msgid ""
"\\[5\\] Schnorr, Claus-Peter. \"Efficient signature generation by smart "
"cards.\" _Journal of cryptology_ 4.3 (1991): 161-174."
msgstr ""
"\\[5\\] Schnorr, Claus-Peter. \"Efficient signature generation by smart "
"cards.\" _Journal of cryptology_ 4.3 (1991): 161-174."

#: src/zkp-intro/3/zkp-pok.md:342
msgid ""
"\\[6\\] Brown, Daniel RL. \"Generic groups, collision resistance, and ECDSA."
"\" _Designs, Codes and Cryptography_ 35.1 (2005): 119-152."
msgstr ""
"\\[6\\] Brown, Daniel RL. \"Generic groups, collision resistance, and ECDSA."
"\" _Designs, Codes and Cryptography_ 35.1 (2005): 119-152."

#: src/zkp-intro/3/zkp-pok.md:343
msgid "\\[7\\] 笛卡儿, 徐陶. 第一哲学沉思集. 九州出版社; 2008."
msgstr "\\[7\\] 笛卡儿, 徐陶. 第一哲学沉思集. 九州出版社; 2008."

#: src/zkp-intro/3/zkp-pok.md:344
msgid ""
"\\[8\\] Bostrom, Nick. \"Are we living in a computer simulation?.\" The "
"Philosophical Quarterly 53.211 (2003): 243-255."
msgstr ""
"\\[8\\] Bostrom, Nick. \"Are we living in a computer simulation?.\" The "
"Philosophical Quarterly 53.211 (2003): 243-255."

#: src/zkp-intro/3/zkp-pok.md:345
msgid ""
"\\[9\\] Nick Statt. \"Comma.ai founder George Hotz wants to free humanity "
"from the AI simulation\". Mar 9, 2019. https://www.theverge."
"com/2019/3/9/18258030/george-hotz-ai-simulation-jailbreaking-reality-"
"sxsw-2019"
msgstr ""
"\\[9\\] Nick Statt. \"Comma.ai founder George Hotz wants to free humanity "
"from the AI simulation\". Mar 9, 2019. https://www.theverge."
"com/2019/3/9/18258030/george-hotz-ai-simulation-jailbreaking-reality-"
"sxsw-2019"

#: src/zkp-intro/3/zkp-pok.md:346
msgid ""
"\\[10\\] doing@知乎. \"如果世界是虚拟的，有哪些实例可以证明？\". 2017. "
"https://www.zhihu.com/question/34642204/answer/156671701"
msgstr ""
"\\[10\\] doing@知乎. \"如果世界是虚拟的，有哪些实例可以证明？\". 2017. "
"https://www.zhihu.com/question/34642204/answer/156671701"

#: src/zkp-intro/4/zkp-rom.md:3
msgid "随机「挑战」"
msgstr "随机「挑战」"

#: src/zkp-intro/4/zkp-rom.md:5
msgid "[交互与挑战](#交互与挑战)"
msgstr "[交互与挑战](#交互与挑战)"

#: src/zkp-intro/4/zkp-rom.md:6
msgid "[「非交互」带来的困惑](#非交互带来的困惑)"
msgstr "[「非交互」带来的困惑](#非交互带来的困惑)"

#: src/zkp-intro/4/zkp-rom.md:7
msgid "[回顾 Schnorr 协议](#回顾-schnorr-协议)"
msgstr "[回顾 Schnorr 协议](#回顾-schnorr-协议)"

#: src/zkp-intro/4/zkp-rom.md:8
msgid "[从 NIZK 角度看数字签名](#从-nizk-角度看数字签名)"
msgstr "[从 NIZK 角度看数字签名](#从-nizk-角度看数字签名)"

#: src/zkp-intro/4/zkp-rom.md:9
msgid "[重建信任 —— 随机预言精灵](#重建信任--随机预言精灵)"
msgstr "[重建信任 —— 随机预言精灵](#重建信任--随机预言精灵)"

#: src/zkp-intro/4/zkp-rom.md:10
msgid "[构造根基 —— 被绑架的精灵](#构造根基--被绑架的精灵)"
msgstr "[构造根基 —— 被绑架的精灵](#构造根基--被绑架的精灵)"

#: src/zkp-intro/4/zkp-rom.md:11
msgid ""
"[Fiat-Shamir 变换 —— 从 Public-Coin 到 NIZK](#fiat-shamir-变换--从-public-"
"coin-到-nizk)"
msgstr ""
"[Fiat-Shamir 变换 —— 从 Public-Coin 到 NIZK](#fiat-shamir-变换--从-public-"
"coin-到-nizk)"

#: src/zkp-intro/4/zkp-rom.md:12
msgid "[小心：Fiat-Shamir 变换中的安全隐患](#小心fiat-shamir-变换中的安全隐患)"
msgstr ""
"[小心：Fiat-Shamir 变换中的安全隐患](#小心fiat-shamir-变换中的安全隐患)"

#: src/zkp-intro/4/zkp-rom.md:13
msgid "[交互的威力](#交互的威力)"
msgstr "[交互的威力](#交互的威力)"

#: src/zkp-intro/4/zkp-rom.md:14
msgid "[公共参考串 —— 另一种「信任根基」](#公共参考串--另一种信任根基)"
msgstr "[公共参考串 —— 另一种「信任根基」](#公共参考串--另一种信任根基)"

#: src/zkp-intro/4/zkp-rom.md:18
msgid "_探索零知识证明系列（四）_"
msgstr "_探索零知识证明系列（四）_"

#: src/zkp-intro/4/zkp-rom.md:20
msgid ""
"“Challenges are at times an indication of Lord's trust in you.”   挑战，有时"
"是上天信任你的一种表现。― **D. Todd Christofferson**"
msgstr ""
"“Challenges are at times an indication of Lord's trust in you.”   挑战，有时"
"是上天信任你的一种表现。― **D. Todd Christofferson**"

#: src/zkp-intro/4/zkp-rom.md:22
msgid ""
"本文继续长篇大论零知识证明背后的机制原理，希望帮助大家理解这一类「现代密码学"
"工具」的大致轮廓。本文约8000字，少量数学公式。"
msgstr ""
"本文继续长篇大论零知识证明背后的机制原理，希望帮助大家理解这一类「现代密码学"
"工具」的大致轮廓。本文约8000字，少量数学公式。"

#: src/zkp-intro/4/zkp-rom.md:25
msgid "交互与挑战"
msgstr "交互与挑战"

#: src/zkp-intro/4/zkp-rom.md:27
msgid ""
"我们之前介绍的零知识证明系统都是「交互式」的，需要验证者 Bob 在交互中提供一个"
"或若干个「随机数」来挑战，比如「地图三染色问题」（参看『系列二』）中，验证者 "
"Bob 需要「不断地」随机挑选一条边来挑战 Alice 的答案，直到 Bob 满意为止，而 "
"Alice 的作弊概率会「指数级」地衰减。而让 Bob 相信证明的「基础」取决于 Bob 所"
"挑选的随机数是不是足够随机。如果 Alice 能够提前预测到 Bob 的随机数，灾难就会"
"发生，现实世界就会退化成「理想世界」，而 Alice 就可以立即升级成「模拟器」，通"
"过超能力来愚弄 Bob。"
msgstr ""
"我们之前介绍的零知识证明系统都是「交互式」的，需要验证者 Bob 在交互中提供一个"
"或若干个「随机数」来挑战，比如「地图三染色问题」（参看『系列二』）中，验证者 "
"Bob 需要「不断地」随机挑选一条边来挑战 Alice 的答案，直到 Bob 满意为止，而 "
"Alice 的作弊概率会「指数级」地衰减。而让 Bob 相信证明的「基础」取决于 Bob 所"
"挑选的随机数是不是足够随机。如果 Alice 能够提前预测到 Bob 的随机数，灾难就会"
"发生，现实世界就会退化成「理想世界」，而 Alice 就可以立即升级成「模拟器」，通"
"过超能力来愚弄 Bob。"

#: src/zkp-intro/4/zkp-rom.md:29
msgid ""
"而『系列三』中，我们分析了 Schnorr 协议，协议中虽然验证者 Bob 只需要挑选一个"
"随机数 `c` 来挑战 Alice ，让她计算一个值 `z`，但 Bob 绝对不能让 Alice 有能力"
"来预测到 `c` 的任何知识，否则，Alice 也会变身成模拟器。"
msgstr ""
"而『系列三』中，我们分析了 Schnorr 协议，协议中虽然验证者 Bob 只需要挑选一个"
"随机数 `c` 来挑战 Alice ，让她计算一个值 `z`，但 Bob 绝对不能让 Alice 有能力"
"来预测到 `c` 的任何知识，否则，Alice 也会变身成模拟器。"

#: src/zkp-intro/4/zkp-rom.md:31
msgid "随机数的重要性不言而喻："
msgstr "随机数的重要性不言而喻："

#: src/zkp-intro/4/zkp-rom.md:33 src/zkp-intro/4/zkp-rom.md:58
msgid "通过随机数挑战是交互式零知识证明的「信任根基」。"
msgstr "通过随机数挑战是交互式零知识证明的「信任根基」。"

#: src/zkp-intro/4/zkp-rom.md:35
msgid ""
"但，「交互过程」会限制应用场景。如果能将交互式零知识证明变成「非交互」？这会"
"非常非常激动人心。所谓的非交互可以看成是只有「一轮」的证明过程，即Alice 直接"
"发一个证明给 Bob 进行验证。"
msgstr ""
"但，「交互过程」会限制应用场景。如果能将交互式零知识证明变成「非交互」？这会"
"非常非常激动人心。所谓的非交互可以看成是只有「一轮」的证明过程，即Alice 直接"
"发一个证明给 Bob 进行验证。"

#: src/zkp-intro/4/zkp-rom.md:37
msgid ""
"非交互式零知识证明，英文是 `Non-Interactive Zero Knowledge`，简称 NIZK。它意"
"味整个证明被编码为一个「字符串」，它可以写到一张纸上，通过邮件、聊天工具等各"
"种方式随意发送给任何验证者，字符串甚至可以放在 Github 上随时供大家下载验证。"
msgstr ""
"非交互式零知识证明，英文是 `Non-Interactive Zero Knowledge`，简称 NIZK。它意"
"味整个证明被编码为一个「字符串」，它可以写到一张纸上，通过邮件、聊天工具等各"
"种方式随意发送给任何验证者，字符串甚至可以放在 Github 上随时供大家下载验证。"

#: src/zkp-intro/4/zkp-rom.md:39
msgid ""
"在区块链世界，「NIZK」可以作为共识协议的一部分。因为一个交易**需要多个矿工进"
"行校验**。设想下，如果交易的发送者和每个矿工都要交互一下，让矿工进行挑战，那"
"么共识过程将奇慢无比。而非交互式零知识证明则**可以直接广播给所有的矿工节点"
"**，让他们自行验证。"
msgstr ""
"在区块链世界，「NIZK」可以作为共识协议的一部分。因为一个交易**需要多个矿工进"
"行校验**。设想下，如果交易的发送者和每个矿工都要交互一下，让矿工进行挑战，那"
"么共识过程将奇慢无比。而非交互式零知识证明则**可以直接广播给所有的矿工节点"
"**，让他们自行验证。"

#: src/zkp-intro/4/zkp-rom.md:41
msgid ""
"可能有朋友会问：只让一个矿工挑战不就够了吗？把矿工和交易发送者的交互脚本编码"
"成证明，然后广播给其他矿工，然后其他矿工就直接相信这个挑战过程是可信的，不也"
"可以吗？但是，很显然，这里需要相信第一个交互矿工作为可信第三方，第三方？似乎"
"不是一个好主意……"
msgstr ""
"可能有朋友会问：只让一个矿工挑战不就够了吗？把矿工和交易发送者的交互脚本编码"
"成证明，然后广播给其他矿工，然后其他矿工就直接相信这个挑战过程是可信的，不也"
"可以吗？但是，很显然，这里需要相信第一个交互矿工作为可信第三方，第三方？似乎"
"不是一个好主意……"

#: src/zkp-intro/4/zkp-rom.md:43
msgid ""
"而非交互式零知识证明，以下我们直接说「NIZK」，似乎就很理想了，没有第三方赚差"
"价。"
msgstr ""
"而非交互式零知识证明，以下我们直接说「NIZK」，似乎就很理想了，没有第三方赚差"
"价。"

#: src/zkp-intro/4/zkp-rom.md:45
msgid "「非交互」带来的困惑"
msgstr "「非交互」带来的困惑"

#: src/zkp-intro/4/zkp-rom.md:47
msgid "非交互式零知识证明，NIZK，如果存在，那么它要比交互式证明强大得多。"
msgstr "非交互式零知识证明，NIZK，如果存在，那么它要比交互式证明强大得多。"

#: src/zkp-intro/4/zkp-rom.md:49
msgid ""
"交互式证明，只能取信于一个验证者；而 NIZK 可以取信于多个验证者，以至所有人。"
msgstr ""
"交互式证明，只能取信于一个验证者；而 NIZK 可以取信于多个验证者，以至所有人。"

#: src/zkp-intro/4/zkp-rom.md:50
msgid "交互式证明，只能在交互的那个时刻有效；而 NIZK 将始终有效。"
msgstr "交互式证明，只能在交互的那个时刻有效；而 NIZK 将始终有效。"

#: src/zkp-intro/4/zkp-rom.md:52
msgid "NIZK 不仅可以跨越空间，还能跨越时间"
msgstr "NIZK 不仅可以跨越空间，还能跨越时间"

#: src/zkp-intro/4/zkp-rom.md:54
msgid "听上去很美，不是吗？But, ……"
msgstr "听上去很美，不是吗？But, ……"

#: src/zkp-intro/4/zkp-rom.md:56
msgid "重复下上节的一个结论："
msgstr "重复下上节的一个结论："

#: src/zkp-intro/4/zkp-rom.md:60
msgid "可是如果 NIZK 失去了挑战过程，有什么后果？"
msgstr "可是如果 NIZK 失去了挑战过程，有什么后果？"

#: src/zkp-intro/4/zkp-rom.md:62
msgid ""
"我们已经回忆过「零知识」性质的证明（参考『系列二』），证明过程需要构造一个模"
"拟器（算法），它也和验证者（Bob）在理想世界中进行交互，而验证者 Bob 没有能力"
"区分出来对方是否是真的 Alice 还是一个模拟器。"
msgstr ""
"我们已经回忆过「零知识」性质的证明（参考『系列二』），证明过程需要构造一个模"
"拟器（算法），它也和验证者（Bob）在理想世界中进行交互，而验证者 Bob 没有能力"
"区分出来对方是否是真的 Alice 还是一个模拟器。"

#: src/zkp-intro/4/zkp-rom.md:64
msgid ""
"如果现在考虑下 NIZK 中的 **非交互式**，假如「我」向「你」出示一张纸，上面写着"
"一个「真」证明 `X` ，又假如「你」在看过这张纸之后确实相信我了；又因为协议是"
"「零知识」，那么如果把「我」换成一个模拟器，模拟器也能「伪造」一个假证明 "
"`Y`，能够也让「你」相信。"
msgstr ""
"如果现在考虑下 NIZK 中的 **非交互式**，假如「我」向「你」出示一张纸，上面写着"
"一个「真」证明 `X` ，又假如「你」在看过这张纸之后确实相信我了；又因为协议是"
"「零知识」，那么如果把「我」换成一个模拟器，模拟器也能「伪造」一个假证明 "
"`Y`，能够也让「你」相信。"

#: src/zkp-intro/4/zkp-rom.md:66
msgid "好了，问题来了："
msgstr "好了，问题来了："

#: src/zkp-intro/4/zkp-rom.md:68
msgid ""
"你如何区分 `X` 和 `Y` ，孰真孰假？当然你无法区分，因为协议是零知识的，你必须"
"不能区分"
msgstr ""
"你如何区分 `X` 和 `Y` ，孰真孰假？当然你无法区分，因为协议是零知识的，你必须"
"不能区分"

#: src/zkp-intro/4/zkp-rom.md:69
msgid "我可以同样可以把 `Y` 出示给你看，那岂不是「我」就可以欺骗你了吗？"
msgstr "我可以同样可以把 `Y` 出示给你看，那岂不是「我」就可以欺骗你了吗？"

#: src/zkp-intro/4/zkp-rom.md:71
msgid "是不是不和谐了？请大家在此处思考两分钟。"
msgstr "是不是不和谐了？请大家在此处思考两分钟。"

#: src/zkp-intro/4/zkp-rom.md:73
msgid "(两分钟后……)"
msgstr "(两分钟后……)"

#: src/zkp-intro/4/zkp-rom.md:75
msgid ""
"因为 NIZK 没有了交互，也就没了挑战过程，所有的证明过程都有 Alice 来计算书写，"
"理论上 Alice 确实是想写什么就写什么，没人拦得住，比如 Alice 就写「理想世界」"
"的 假证明 `Y`。"
msgstr ""
"因为 NIZK 没有了交互，也就没了挑战过程，所有的证明过程都有 Alice 来计算书写，"
"理论上 Alice 确实是想写什么就写什么，没人拦得住，比如 Alice 就写「理想世界」"
"的 假证明 `Y`。"

#: src/zkp-intro/4/zkp-rom.md:77
msgid ""
"想必深刻理解模拟器的朋友，在这里会发现一个关键点：模拟器必须**只能**在「理想"
"世界」中构造`Y`，也就是说，`Y` 这么邪恶的东西只能存在于「理想世界」，不能到"
"「现实世界」祸害人间。"
msgstr ""
"想必深刻理解模拟器的朋友，在这里会发现一个关键点：模拟器必须**只能**在「理想"
"世界」中构造`Y`，也就是说，`Y` 这么邪恶的东西只能存在于「理想世界」，不能到"
"「现实世界」祸害人间。"

#: src/zkp-intro/4/zkp-rom.md:79
msgid "继续思考……"
msgstr "继续思考……"

#: src/zkp-intro/4/zkp-rom.md:81
msgid ""
"还有一个更深层次的问题，请大家回忆下「地图三染色问题」，之所以模拟器不能在"
"「现实世界」中为非作歹，核心原因是，他在理想世界中有「时间倒流」的超能力，而"
"在「现实世界」中不存在这种黑魔法。现实世界的「不存在性」是关键。"
msgstr ""
"还有一个更深层次的问题，请大家回忆下「地图三染色问题」，之所以模拟器不能在"
"「现实世界」中为非作歹，核心原因是，他在理想世界中有「时间倒流」的超能力，而"
"在「现实世界」中不存在这种黑魔法。现实世界的「不存在性」是关键。"

#: src/zkp-intro/4/zkp-rom.md:83
msgid ""
"而且，NIZK 中**没有交互**，于是导致了一个严重的后果，模拟器没有办法使用「时间"
"倒流」这个超能力，当然似乎也就不能区分证明者在两个世界中的行为。"
msgstr ""
"而且，NIZK 中**没有交互**，于是导致了一个严重的后果，模拟器没有办法使用「时间"
"倒流」这个超能力，当然似乎也就不能区分证明者在两个世界中的行为。"

#: src/zkp-intro/4/zkp-rom.md:85
msgid ""
"换句话说，如果我们面对任何一个 NIZK 系统，似乎「模拟器」就很难高高在上了，它"
"好像只能飘落人间，成为一个普普通通的凡人。如果，我说如果，按此推论，假设模拟"
"器不再具备超能力，那就意味着 Alice 和模拟器没有区别，Alice 也可以成为一个模拟"
"器，再继续推论，Alice 就可以在「现实世界」中任意欺骗 Bob，那么这个证明系统就"
"不再有价值，因为它失去了「可靠性」。结论：任何的 NIZK 都不可靠。"
msgstr ""
"换句话说，如果我们面对任何一个 NIZK 系统，似乎「模拟器」就很难高高在上了，它"
"好像只能飘落人间，成为一个普普通通的凡人。如果，我说如果，按此推论，假设模拟"
"器不再具备超能力，那就意味着 Alice 和模拟器没有区别，Alice 也可以成为一个模拟"
"器，再继续推论，Alice 就可以在「现实世界」中任意欺骗 Bob，那么这个证明系统就"
"不再有价值，因为它失去了「可靠性」。结论：任何的 NIZK 都不可靠。"

#: src/zkp-intro/4/zkp-rom.md:87
msgid "这一定是哪里出了问题……"
msgstr "这一定是哪里出了问题……"

#: src/zkp-intro/4/zkp-rom.md:89
msgid ""
"上面我们在分析的过程中，提到了交互挑战的缺失。确实，如果 Bob 不参与 Alice 产"
"生证明的过程，证明所包含的每一个 bit 都由 Alice 提供，似乎「证明」本身不存在"
"任何让 Bob 信任的「根基」。这个从「直觉」上似乎说不通。"
msgstr ""
"上面我们在分析的过程中，提到了交互挑战的缺失。确实，如果 Bob 不参与 Alice 产"
"生证明的过程，证明所包含的每一个 bit 都由 Alice 提供，似乎「证明」本身不存在"
"任何让 Bob 信任的「根基」。这个从「直觉」上似乎说不通。"

#: src/zkp-intro/4/zkp-rom.md:91
msgid ""
"那是不是说，没有 Bob 的参与就「彻底」没办法建立「信任根基」了呢？信任的根基还"
"可以从哪里来呢？"
msgstr ""
"那是不是说，没有 Bob 的参与就「彻底」没办法建立「信任根基」了呢？信任的根基还"
"可以从哪里来呢？"

#: src/zkp-intro/4/zkp-rom.md:93
msgid "答案是「第三方」！"
msgstr "答案是「第三方」！"

#: src/zkp-intro/4/zkp-rom.md:95
msgid "Wait ……，协议交互不是只有两方吗？ Alice 和 Bob，哪来第三方？"
msgstr "Wait ……，协议交互不是只有两方吗？ Alice 和 Bob，哪来第三方？"

#: src/zkp-intro/4/zkp-rom.md:97
msgid "需要用特殊的方式引入第三方，而且方法不止一种，我们先研究第一种。"
msgstr "需要用特殊的方式引入第三方，而且方法不止一种，我们先研究第一种。"

#: src/zkp-intro/4/zkp-rom.md:99
msgid "（泪目：不是说的好好的，咱们不引入第三方吗？）"
msgstr "（泪目：不是说的好好的，咱们不引入第三方吗？）"

#: src/zkp-intro/4/zkp-rom.md:101
msgid "回顾 Schnorr 协议"
msgstr "回顾 Schnorr 协议"

#: src/zkp-intro/4/zkp-rom.md:103
msgid ""
"我们再看一下老朋友——Schnorr 协议，它是一个三步协议：第一步，Alice 发送一个承"
"诺，然后第二步 Bob 发送随机数挑战，第三步，Alice 回应挑战。"
msgstr ""
"我们再看一下老朋友——Schnorr 协议，它是一个三步协议：第一步，Alice 发送一个承"
"诺，然后第二步 Bob 发送随机数挑战，第三步，Alice 回应挑战。"

#: src/zkp-intro/4/zkp-rom.md:107
msgid "我们来看，如何把一个三步的 Schnorr 协议变成一步。"
msgstr "我们来看，如何把一个三步的 Schnorr 协议变成一步。"

#: src/zkp-intro/4/zkp-rom.md:109
msgid ""
"看一下 Schnorr 协议的第二步，Bob 需要给出一个随机的挑战数 `c`，这里我们可以"
"让 Alice 用下面这个式子来计算这个挑战数，从而达到去除协议第二步的目的。"
msgstr ""
"看一下 Schnorr 协议的第二步，Bob 需要给出一个随机的挑战数 `c`，这里我们可以"
"让 Alice 用下面这个式子来计算这个挑战数，从而达到去除协议第二步的目的。"

#: src/zkp-intro/4/zkp-rom.md:115
msgid ""
"其中 `R` 是 Alice 发给 Bob 的椭圆曲线点，`PK` 是公钥。大家可以好好看看这个利"
"用 Hash 算法计算 `c` 的式子。这个式子达到了两个目的："
msgstr ""
"其中 `R` 是 Alice 发给 Bob 的椭圆曲线点，`PK` 是公钥。大家可以好好看看这个利"
"用 Hash 算法计算 `c` 的式子。这个式子达到了两个目的："

#: src/zkp-intro/4/zkp-rom.md:117
msgid ""
"Alice 在产生承诺 `R` 之前，没有办法预测 `c`，即使 `c` 最终变相是 Alice 挑选的"
msgstr ""
"Alice 在产生承诺 `R` 之前，没有办法预测 `c`，即使 `c` 最终变相是 Alice 挑选的"

#: src/zkp-intro/4/zkp-rom.md:118
msgid ""
"`c` 通过 Hash 函数计算，会均匀分布在一个整数域内，而且可以作为一个随机数（_"
"注：请大家暂且这么理解，我们在后文再深入讨论_）"
msgstr ""
"`c` 通过 Hash 函数计算，会均匀分布在一个整数域内，而且可以作为一个随机数（_"
"注：请大家暂且这么理解，我们在后文再深入讨论_）"

#: src/zkp-intro/4/zkp-rom.md:120
msgid ""
"请注意：Alice 绝不能在产生 `R` 之前预测到 `c`，不然， Alice 就等于变相具有了"
"「时间倒流」的超能力，从而能任意愚弄 Bob。"
msgstr ""
"请注意：Alice 绝不能在产生 `R` 之前预测到 `c`，不然， Alice 就等于变相具有了"
"「时间倒流」的超能力，从而能任意愚弄 Bob。"

#: src/zkp-intro/4/zkp-rom.md:122
msgid ""
"而一个密码学安全 Hash 函数是「单向」的，比如 SHA256，SHA3，blake2 等等。这样"
"一来，虽然 `c` 是 Alice 计算的，但是 Alice 并没有能力实现通过挑选 `c` 来作"
"弊。因为只要 Alice 一产生 `R`， `c` 就相当于固定下来了。我们假设 Alice 这个凡"
"人在「现实世界」中是没有反向计算 Hash 的能力的。"
msgstr ""
"而一个密码学安全 Hash 函数是「单向」的，比如 SHA256，SHA3，blake2 等等。这样"
"一来，虽然 `c` 是 Alice 计算的，但是 Alice 并没有能力实现通过挑选 `c` 来作"
"弊。因为只要 Alice 一产生 `R`， `c` 就相当于固定下来了。我们假设 Alice 这个凡"
"人在「现实世界」中是没有反向计算 Hash 的能力的。"

#: src/zkp-intro/4/zkp-rom.md:124
msgid "![schnorr-nizk](img/schnorr-nizk.png)"
msgstr "![schnorr-nizk](img/schnorr-nizk.png)"

#: src/zkp-intro/4/zkp-rom.md:126
msgid ""
"看上图，我们利用 Hash 函数，把三步 Schnorr 协议合并为了一步。Alice 可以直接发"
"送：`(R, c, z)`。又因为 Bob 拥有 `PK`，于是 Bob 可以自行计算出 `c`，于是 "
"Alice 可以只发送 `(R, z)` 即可。"
msgstr ""
"看上图，我们利用 Hash 函数，把三步 Schnorr 协议合并为了一步。Alice 可以直接发"
"送：`(R, c, z)`。又因为 Bob 拥有 `PK`，于是 Bob 可以自行计算出 `c`，于是 "
"Alice 可以只发送 `(R, z)` 即可。"

#: src/zkp-intro/4/zkp-rom.md:128
msgid ""
"我们把上面这个方案稍微变下形，就得到了「数字签名」方案。所谓的数字签名，就是"
"「我」向「你」出示一个字符串，比如「白日依山尽，黄河入海流」，然后为了证明这"
"句诗是我出示的，我需要签署某样东西。这个东西能证明我的身份和这句诗进行了关"
"联。"
msgstr ""
"我们把上面这个方案稍微变下形，就得到了「数字签名」方案。所谓的数字签名，就是"
"「我」向「你」出示一个字符串，比如「白日依山尽，黄河入海流」，然后为了证明这"
"句诗是我出示的，我需要签署某样东西。这个东西能证明我的身份和这句诗进行了关"
"联。"

#: src/zkp-intro/4/zkp-rom.md:130
msgid "从 NIZK 角度看数字签名"
msgstr "从 NIZK 角度看数字签名"

#: src/zkp-intro/4/zkp-rom.md:132
msgid ""
"不严格地说，数字签名方案相当于在证明（1）我拥有私钥，并且（2）私钥和消息进行"
"了关联计算。"
msgstr ""
"不严格地说，数字签名方案相当于在证明（1）我拥有私钥，并且（2）私钥和消息进行"
"了关联计算。"

#: src/zkp-intro/4/zkp-rom.md:134
msgid ""
"我首先要证明我的身份，那么这个简单，这正是 Schnorr 协议的功能，能够向对方证明"
"「我拥有私钥」这个陈述。并且这个证明过程是零知识的：不泄露关于「私钥」的任何"
"知识。"
msgstr ""
"我首先要证明我的身份，那么这个简单，这正是 Schnorr 协议的功能，能够向对方证明"
"「我拥有私钥」这个陈述。并且这个证明过程是零知识的：不泄露关于「私钥」的任何"
"知识。"

#: src/zkp-intro/4/zkp-rom.md:136
msgid "那么如何和这句唐诗关联呢？我们修改下计算 `c` 的过程："
msgstr "那么如何和这句唐诗关联呢？我们修改下计算 `c` 的过程："

#: src/zkp-intro/4/zkp-rom.md:138
msgid ""
"```\n"
"m = \"白日依山尽，黄河入海流\"\n"
"c = Hash(m, R)\n"
"```"
msgstr ""
"```\n"
"m = \"白日依山尽，黄河入海流\"\n"
"c = Hash(m, R)\n"
"```"

#: src/zkp-intro/4/zkp-rom.md:143
msgid ""
"这里为了保证攻击者不能随意伪造签名，正是利用了离散对数难题（DLP）与 Hash 函数"
"满足抗第二原象（Secondary Preimage Resistance ）这个假设。"
msgstr ""
"这里为了保证攻击者不能随意伪造签名，正是利用了离散对数难题（DLP）与 Hash 函数"
"满足抗第二原象（Secondary Preimage Resistance ）这个假设。"

#: src/zkp-intro/4/zkp-rom.md:145
msgid ""
"_注：这里严格点讲，为了保证数字签名的不可伪造性，需要证明 Schnorr 协议满足"
"「Simulation Soundness」这个更强的性质。这点请参考文献\\[2\\]_"
msgstr ""
"_注：这里严格点讲，为了保证数字签名的不可伪造性，需要证明 Schnorr 协议满足"
"「Simulation Soundness」这个更强的性质。这点请参考文献\\[2\\]_"

#: src/zkp-intro/4/zkp-rom.md:147
msgid "![](img/schnorr-sig.png)"
msgstr "![](img/schnorr-sig.png)"

#: src/zkp-intro/4/zkp-rom.md:149
msgid ""
"上图就是大家所熟知的数字签名方案 —— Schnorr 签名方案\\[1\\]。在这里还有一个优"
"化，Alice 发给 Bob 的内容不是 `(R, z)` 而是 `(c, z)`，这是因为 `R` 可以通过 "
"`c`, `z` 计算出来。"
msgstr ""
"上图就是大家所熟知的数字签名方案 —— Schnorr 签名方案\\[1\\]。在这里还有一个优"
"化，Alice 发给 Bob 的内容不是 `(R, z)` 而是 `(c, z)`，这是因为 `R` 可以通过 "
"`c`, `z` 计算出来。"

#: src/zkp-intro/4/zkp-rom.md:151
msgid ""
"_注：为什么说这是一个「优化」呢？目前针对椭圆曲线的攻击方法有 Shanks 算法、"
"Lambda 算法 还有 Pollard's rho 算法， 请大家记住他们的算法复杂度大约都是 "
msgstr ""
"_注：为什么说这是一个「优化」呢？目前针对椭圆曲线的攻击方法有 Shanks 算法、"
"Lambda 算法 还有 Pollard's rho 算法， 请大家记住他们的算法复杂度大约都是 "

#: src/zkp-intro/4/zkp-rom.md:151
msgid ""
"\\[3\\]，`n` 是有限域大小的位数。假设我们采用了非常接近 `2^256` 的有限域，也"
"就是说 `z` 是 256bit，那么椭圆曲线群的大小也差不多要接近 256bit，这样一来，"
"把 `2^256` 开平方根后就是 `2^128`，所以说 256bit 椭圆曲线群的安全性只有 "
"128bit。那么，挑战数  `c` 也只需要 128bit 就足够了。这样 Alice 发送 `c` 要比"
"发送 `R` 要更节省空间，而后者至少需要 256bit。`c` 和 `z`两个数值加起来总共 "
"384bit。相比现在流行的 ECDSA 签名方案来说，可以节省`1/4` 的宝贵空间。现在比特"
"币开发团队已经准备将 ECDSA 签名方案改为一种类 Schnorr 协议的签名方案——"
"muSig\\[4\\]，可以实现更灵活地支持多签和聚合。_"
msgstr ""
"\\[3\\]，`n` 是有限域大小的位数。假设我们采用了非常接近 `2^256` 的有限域，也"
"就是说 `z` 是 256bit，那么椭圆曲线群的大小也差不多要接近 256bit，这样一来，"
"把 `2^256` 开平方根后就是 `2^128`，所以说 256bit 椭圆曲线群的安全性只有 "
"128bit。那么，挑战数  `c` 也只需要 128bit 就足够了。这样 Alice 发送 `c` 要比"
"发送 `R` 要更节省空间，而后者至少需要 256bit。`c` 和 `z`两个数值加起来总共 "
"384bit。相比现在流行的 ECDSA 签名方案来说，可以节省`1/4` 的宝贵空间。现在比特"
"币开发团队已经准备将 ECDSA 签名方案改为一种类 Schnorr 协议的签名方案——"
"muSig\\[4\\]，可以实现更灵活地支持多签和聚合。_"

#: src/zkp-intro/4/zkp-rom.md:153
msgid ""
"而采用 Hash 函数的方法来把一个交互式的证明系统变成非交互式的方法被称为 Fiat-"
"Shamir 变换\\[5\\]，它由密码学老前辈 Amos Fiat 和 Adi Shamir 两人在 1986 年提"
"出。"
msgstr ""
"而采用 Hash 函数的方法来把一个交互式的证明系统变成非交互式的方法被称为 Fiat-"
"Shamir 变换\\[5\\]，它由密码学老前辈 Amos Fiat 和 Adi Shamir 两人在 1986 年提"
"出。"

#: src/zkp-intro/4/zkp-rom.md:155
msgid "重建信任 —— 随机预言精灵"
msgstr "重建信任 —— 随机预言精灵"

#: src/zkp-intro/4/zkp-rom.md:157
msgid ""
"前文提到，失去了挑战，似乎失去了证明的「信任根基」。而在 Schnorr 签名方案中，"
"Hash 函数担负起了「挑战者」的角色，这个角色有一个非常学术的名字：「随机预言"
"机」（Random Oracle）\\[6\\]。"
msgstr ""
"前文提到，失去了挑战，似乎失去了证明的「信任根基」。而在 Schnorr 签名方案中，"
"Hash 函数担负起了「挑战者」的角色，这个角色有一个非常学术的名字：「随机预言"
"机」（Random Oracle）\\[6\\]。"

#: src/zkp-intro/4/zkp-rom.md:159
msgid ""
"可是这里为何用 Hash？实际上当 Alice 要产生公共随机数时，需要一个叫做「随机预"
"言机」的玩意儿，这是什么？"
msgstr ""
"可是这里为何用 Hash？实际上当 Alice 要产生公共随机数时，需要一个叫做「随机预"
"言机」的玩意儿，这是什么？"

#: src/zkp-intro/4/zkp-rom.md:161
msgid "开脑洞时间到！"
msgstr "开脑洞时间到！"

#: src/zkp-intro/4/zkp-rom.md:163
msgid ""
"我们设想在「现实世界」中，天上有一位「精灵」，他手持一个双栏表格，左边一栏为"
"字符串，右边一栏为数字。任何人，包括你我，包括 Alice 和 Bob，都可以发字符串给"
"「精灵」。"
msgstr ""
"我们设想在「现实世界」中，天上有一位「精灵」，他手持一个双栏表格，左边一栏为"
"字符串，右边一栏为数字。任何人，包括你我，包括 Alice 和 Bob，都可以发字符串给"
"「精灵」。"

#: src/zkp-intro/4/zkp-rom.md:165
msgid "![](img/ro.png)"
msgstr "![](img/ro.png)"

#: src/zkp-intro/4/zkp-rom.md:167
msgid ""
"精灵在拿到字符串之后，会查表的左边栏，看看表格里有没有这个字符串，下面分两种"
"情况："
msgstr ""
"精灵在拿到字符串之后，会查表的左边栏，看看表格里有没有这个字符串，下面分两种"
"情况："

#: src/zkp-intro/4/zkp-rom.md:169
msgid ""
"情况一：如果左边栏找不到字符串，那么精灵会产生一个「真随机数」，然后把字符串"
"与随机数写入到表格中，然后把随机数返回地面上的凡人。"
msgstr ""
"情况一：如果左边栏找不到字符串，那么精灵会产生一个「真随机数」，然后把字符串"
"与随机数写入到表格中，然后把随机数返回地面上的凡人。"

#: src/zkp-intro/4/zkp-rom.md:170
msgid ""
"情况二：如果左边栏有这个字符串记录，那么精灵会将右边栏里面的数字直接返回给地"
"面。"
msgstr ""
"情况二：如果左边栏有这个字符串记录，那么精灵会将右边栏里面的数字直接返回给地"
"面。"

#: src/zkp-intro/4/zkp-rom.md:172
msgid ""
"大家会发现这个精灵的行为其实很像一个随机数发生器，但是又很不一样，不一样的地"
"方在于当我们发送相同的字符串时，他会返回相同的数。这个精灵就是传说中的「随机"
"预言机」。"
msgstr ""
"大家会发现这个精灵的行为其实很像一个随机数发生器，但是又很不一样，不一样的地"
"方在于当我们发送相同的字符串时，他会返回相同的数。这个精灵就是传说中的「随机"
"预言机」。"

#: src/zkp-intro/4/zkp-rom.md:174
msgid ""
"而在合并 Schnorr 协议过程中，其实我们需要的是一个这样的随机预言精灵，而不是一"
"个 Hash 函数。两者有什么不同的地方？区别就是："
msgstr ""
"而在合并 Schnorr 协议过程中，其实我们需要的是一个这样的随机预言精灵，而不是一"
"个 Hash 函数。两者有什么不同的地方？区别就是："

#: src/zkp-intro/4/zkp-rom.md:176
msgid "随机预言机每次对于新字符串返回的是一个具有一致性分布的「真」随机数"
msgstr "随机预言机每次对于新字符串返回的是一个具有一致性分布的「真」随机数"

#: src/zkp-intro/4/zkp-rom.md:177
msgid "Hash 函数计算的结果并不是一个真正具有一致性分布的随机数"
msgstr "Hash 函数计算的结果并不是一个真正具有一致性分布的随机数"

#: src/zkp-intro/4/zkp-rom.md:179
msgid ""
"那么为什么前面用的是 Hash 函数呢？这是因为在现实世界中，\\*\\*真正的随机预言"
"机不存在！\\*\\*为什么呢？ 事实上，一个 Hash 函数不可能产生真的随机数，因为 "
"Hash 函数是一个「确定性」算法，除了参数以外，再没有其它随机量被引入。"
msgstr ""
"那么为什么前面用的是 Hash 函数呢？这是因为在现实世界中，\\*\\*真正的随机预言"
"机不存在！\\*\\*为什么呢？ 事实上，一个 Hash 函数不可能产生真的随机数，因为 "
"Hash 函数是一个「确定性」算法，除了参数以外，再没有其它随机量被引入。"

#: src/zkp-intro/4/zkp-rom.md:181
msgid ""
"而一个具有密码学安全强度的 Hash 函数「似乎」可以充当一个「伪」随机预言机。那"
"么合并后的安全协议需要额外增加一个很强的安全假设，这就是："
msgstr ""
"而一个具有密码学安全强度的 Hash 函数「似乎」可以充当一个「伪」随机预言机。那"
"么合并后的安全协议需要额外增加一个很强的安全假设，这就是："

#: src/zkp-intro/4/zkp-rom.md:183
msgid "假设：一个密码学安全的 Hash 函数可以近似地模拟传说中的「随机预言机」"
msgstr "假设：一个密码学安全的 Hash 函数可以近似地模拟传说中的「随机预言机」"

#: src/zkp-intro/4/zkp-rom.md:185
msgid ""
"因为这个假设无法被证明，所以我们只能信任这个假设，或者说当做一个公理来用。插"
"一句， Hash 函数的广义抗碰撞性质决定了它的输出可以模拟随机数，同时在很多情况"
"下（并非所有），对 Hash 函数实施攻击难度很高，于是许多的密码学家都在大胆使"
"用。"
msgstr ""
"因为这个假设无法被证明，所以我们只能信任这个假设，或者说当做一个公理来用。插"
"一句， Hash 函数的广义抗碰撞性质决定了它的输出可以模拟随机数，同时在很多情况"
"下（并非所有），对 Hash 函数实施攻击难度很高，于是许多的密码学家都在大胆使"
"用。"

#: src/zkp-intro/4/zkp-rom.md:187
msgid ""
"不使用这个假设的安全模型叫做「标准模型」，而使用这个假设的安全模型当然不能叫"
"「非标准模型」，它有个好听的专有名词，叫做「随机预言模型」。"
msgstr ""
"不使用这个假设的安全模型叫做「标准模型」，而使用这个假设的安全模型当然不能叫"
"「非标准模型」，它有个好听的专有名词，叫做「随机预言模型」。"

#: src/zkp-intro/4/zkp-rom.md:189
msgid ""
"世界上有两种不同类型的人，喜欢甜豆花的，不喜欢甜豆花的。同样，世界上的密码学"
"家分为两种，喜欢随机预言模型的，和不喜欢随机预言模型的\\[6\\]。"
msgstr ""
"世界上有两种不同类型的人，喜欢甜豆花的，不喜欢甜豆花的。同样，世界上的密码学"
"家分为两种，喜欢随机预言模型的，和不喜欢随机预言模型的\\[6\\]。"

#: src/zkp-intro/4/zkp-rom.md:191
msgid "构造根基 —— 被绑架的精灵"
msgstr "构造根基 —— 被绑架的精灵"

#: src/zkp-intro/4/zkp-rom.md:193
msgid ""
"Schnorr 协议经过 Fiat-Shamir  变换之后，就具有 NIZK 性质。这不同于我们证明过"
"的 SHVZK，SHVZK 要求验证者诚实，而 NIZK 则不再对验证者有任何不现实的要求，因"
"为验证者不参与交互，所谓要求诚实的验证者这个问题就不复存在。"
msgstr ""
"Schnorr 协议经过 Fiat-Shamir  变换之后，就具有 NIZK 性质。这不同于我们证明过"
"的 SHVZK，SHVZK 要求验证者诚实，而 NIZK 则不再对验证者有任何不现实的要求，因"
"为验证者不参与交互，所谓要求诚实的验证者这个问题就不复存在。"

#: src/zkp-intro/4/zkp-rom.md:195
msgid ""
"_注：如果验证者 Bob 不诚实会怎样？那么 Bob 有可能抽取出 Alice 的知识。但是对"
"于三步 Schnorr 协议而言，它是否满足「零知识」，目前还处于未知状态。我们在系列"
"三中只证明了它满足一个比较弱的性质：SHVZK_。"
msgstr ""
"_注：如果验证者 Bob 不诚实会怎样？那么 Bob 有可能抽取出 Alice 的知识。但是对"
"于三步 Schnorr 协议而言，它是否满足「零知识」，目前还处于未知状态。我们在系列"
"三中只证明了它满足一个比较弱的性质：SHVZK_。"

#: src/zkp-intro/4/zkp-rom.md:197
msgid ""
"但是，当 Schnorr 协议摇身一变，变成非交互零知识证明系统之后，就真正的「零知"
"识」了。"
msgstr ""
"但是，当 Schnorr 协议摇身一变，变成非交互零知识证明系统之后，就真正的「零知"
"识」了。"

#: src/zkp-intro/4/zkp-rom.md:199
msgid "然而，可能你的问题也来了，这个论断听起来似乎有道理，请问能证明吗？"
msgstr "然而，可能你的问题也来了，这个论断听起来似乎有道理，请问能证明吗？"

#: src/zkp-intro/4/zkp-rom.md:201
msgid "时间到了，“翠花，上模拟器”"
msgstr "时间到了，“翠花，上模拟器”"

#: src/zkp-intro/4/zkp-rom.md:203
msgid ""
"怎么用模拟器大法来构造一个「理想世界」呢？大家可以想一下，我们之前使用过「时"
"间倒流」，还有修改「随机数传送带」超能力来让「模拟器」来作弊。可是没有交互"
"了，这就意味着：「时间倒流」超能力不能用；Bob 的随机数传送带也不存在了，「篡"
"改传送带」这个超能力也不能用！"
msgstr ""
"怎么用模拟器大法来构造一个「理想世界」呢？大家可以想一下，我们之前使用过「时"
"间倒流」，还有修改「随机数传送带」超能力来让「模拟器」来作弊。可是没有交互"
"了，这就意味着：「时间倒流」超能力不能用；Bob 的随机数传送带也不存在了，「篡"
"改传送带」这个超能力也不能用！"

#: src/zkp-intro/4/zkp-rom.md:205
msgid "但模拟器总要具备某种「超能力」，从而能够构建信任的「根基」"
msgstr "但模拟器总要具备某种「超能力」，从而能够构建信任的「根基」"

#: src/zkp-intro/4/zkp-rom.md:207
msgid ""
"（如果模拟器在没有超能力的情况下具备作弊能力，那相当于证明了协议的不可靠"
"性）。"
msgstr ""
"（如果模拟器在没有超能力的情况下具备作弊能力，那相当于证明了协议的不可靠"
"性）。"

#: src/zkp-intro/4/zkp-rom.md:209
msgid "可能大家现在已经猜出来了，模拟器要在「随机预言机」上动手脚。"
msgstr "可能大家现在已经猜出来了，模拟器要在「随机预言机」上动手脚。"

#: src/zkp-intro/4/zkp-rom.md:211
msgid ""
"先考虑下构造一个「理想世界」来证明「零知识」。在理想世界中，模拟器「绑架」了"
"负责提供预言的「精灵」，当 Bob 向精灵索要一个随机数的时候，精灵并没有给一个真"
"随机数，而是给 Zlice（模拟器假扮的 Alice）提前准备好的一个数（也符合一致性分"
"布，保证不可区分性），「精灵」无可奈何地返回 Bob 一个看起来随机，但实际上有后"
"门的数字。**所谓后门，就是这个数字是 Zlice 自己提前选择好的**。"
msgstr ""
"先考虑下构造一个「理想世界」来证明「零知识」。在理想世界中，模拟器「绑架」了"
"负责提供预言的「精灵」，当 Bob 向精灵索要一个随机数的时候，精灵并没有给一个真"
"随机数，而是给 Zlice（模拟器假扮的 Alice）提前准备好的一个数（也符合一致性分"
"布，保证不可区分性），「精灵」无可奈何地返回 Bob 一个看起来随机，但实际上有后"
"门的数字。**所谓后门，就是这个数字是 Zlice 自己提前选择好的**。"

#: src/zkp-intro/4/zkp-rom.md:213
msgid "![](img/schnorrsig-sim1.png)"
msgstr "![](img/schnorrsig-sim1.png)"

#: src/zkp-intro/4/zkp-rom.md:215
msgid "第一步：Zlice 随机选择 `z`，随机选择`c`，计算 `R'=z*G - c*PK` 。"
msgstr "第一步：Zlice 随机选择 `z`，随机选择`c`，计算 `R'=z*G - c*PK` 。"

#: src/zkp-intro/4/zkp-rom.md:217
msgid "![](img/schnorrsig-sim2.png)"
msgstr "![](img/schnorrsig-sim2.png)"

#: src/zkp-intro/4/zkp-rom.md:219
msgid "第二步：Zlice 将 `c` 与 `(m, R')` 写入精灵的表格。"
msgstr "第二步：Zlice 将 `c` 与 `(m, R')` 写入精灵的表格。"

#: src/zkp-intro/4/zkp-rom.md:221
msgid "![](img/schnorrsig-sim3.png)"
msgstr "![](img/schnorrsig-sim3.png)"

#: src/zkp-intro/4/zkp-rom.md:223
msgid "第三步：Zlice 将签名 `(c, z)` 发送给 Bob。"
msgstr "第三步：Zlice 将签名 `(c, z)` 发送给 Bob。"

#: src/zkp-intro/4/zkp-rom.md:225
msgid "![](img/schnorrsig-sim4.png)"
msgstr "![](img/schnorrsig-sim4.png)"

#: src/zkp-intro/4/zkp-rom.md:227
msgid ""
"第四步：Bob 计算 `R=z*G - c*PK`，并向精灵发送 `(m, R)`，精灵返回 `c’`。请注"
"意，这里 Bob 计算出来的 `R` 和 Zlice 计算出来的 `R'` 是相等。"
msgstr ""
"第四步：Bob 计算 `R=z*G - c*PK`，并向精灵发送 `(m, R)`，精灵返回 `c’`。请注"
"意，这里 Bob 计算出来的 `R` 和 Zlice 计算出来的 `R'` 是相等。"

#: src/zkp-intro/4/zkp-rom.md:229
msgid "![](img/schnorrsig-sim5.png)"
msgstr "![](img/schnorrsig-sim5.png)"

#: src/zkp-intro/4/zkp-rom.md:231
msgid ""
"第五步：Bob 验证 `c ?= c'`，看看精灵传回来的随机数和对方发过来的随机数是否相"
"等。如果相等，则验证签名通过；否则，则验证失败。"
msgstr ""
"第五步：Bob 验证 `c ?= c'`，看看精灵传回来的随机数和对方发过来的随机数是否相"
"等。如果相等，则验证签名通过；否则，则验证失败。"

#: src/zkp-intro/4/zkp-rom.md:233
msgid ""
"通过绑架「精灵」，Zlice 同样可以提前预知随机数，这和时间倒流能达到同样的效"
"果。"
msgstr ""
"通过绑架「精灵」，Zlice 同样可以提前预知随机数，这和时间倒流能达到同样的效"
"果。"

#: src/zkp-intro/4/zkp-rom.md:235
msgid "我们已经证明了模拟器 Zlice 的「存在性」，于是我们上面已经证明了 NIZK。"
msgstr "我们已经证明了模拟器 Zlice 的「存在性」，于是我们上面已经证明了 NIZK。"

#: src/zkp-intro/4/zkp-rom.md:237
msgid ""
"接下来我们证明这个这个协议的「可靠性」。设想在另一个「理想世界」中，一个叫做"
"「抽取器」的玩意儿，也同样绑架了精灵。当无辜 Alice 的向「精灵」索要一个随机数"
"时，「精灵」返回了一个 `c1`，「抽取器」从精灵的表格中偷窥到了`c1`，当 Alice "
"计算出来 `z1` 之后，然后这时候「抽取器」仍然可以发动「时间倒流」超能力，让 "
"Alice 倒退到第二步，再次向「精灵」要一个随机数，Alice 发送的字符串显然和第一"
"次发送的字符串是相同的，`(R, m)`。按道理，因为 `(R, m)` 已经写在精灵表格的"
"「左栏」里，所以一个诚实的「精灵」应该返回 `c1`。但是，「抽取器」绑架了精灵，"
"他把表格中对应 `(R, m)` 这一行的「右栏」改成了一个不同的数 `c2`。当 Alice 计"
"算出另一个 `z2` 之后，抽取器就完成了任务，通过下面的方程计算出 Alice 的私钥 "
"`sk`："
msgstr ""
"接下来我们证明这个这个协议的「可靠性」。设想在另一个「理想世界」中，一个叫做"
"「抽取器」的玩意儿，也同样绑架了精灵。当无辜 Alice 的向「精灵」索要一个随机数"
"时，「精灵」返回了一个 `c1`，「抽取器」从精灵的表格中偷窥到了`c1`，当 Alice "
"计算出来 `z1` 之后，然后这时候「抽取器」仍然可以发动「时间倒流」超能力，让 "
"Alice 倒退到第二步，再次向「精灵」要一个随机数，Alice 发送的字符串显然和第一"
"次发送的字符串是相同的，`(R, m)`。按道理，因为 `(R, m)` 已经写在精灵表格的"
"「左栏」里，所以一个诚实的「精灵」应该返回 `c1`。但是，「抽取器」绑架了精灵，"
"他把表格中对应 `(R, m)` 这一行的「右栏」改成了一个不同的数 `c2`。当 Alice 计"
"算出另一个 `z2` 之后，抽取器就完成了任务，通过下面的方程计算出 Alice 的私钥 "
"`sk`："

#: src/zkp-intro/4/zkp-rom.md:243
msgid "Fiat-Shamir 变换 —— 从 Public-Coin 到 NIZK"
msgstr "Fiat-Shamir 变换 —— 从 Public-Coin 到 NIZK"

#: src/zkp-intro/4/zkp-rom.md:245
msgid ""
"不仅仅对于 Schnorr 协议，对于任意的 「Public-Coin 协议」，都可以用 Fiat-"
"Shamir 变换来把整个协议「压缩」成一步交互，也就是一个非交互式的证明系统，这个"
"变换技巧最早来自于 Amos Fiat 与 Adi Shamir 两人的论文『How to Prove "
"Yourself: Practical Solutions to Identification and Signature Problems.』，发"
"表在 1986 年的 Crypto 会议上\\[5\\]。也有一说，这个技巧来源于 Manuel "
"Blum\\[6\\]."
msgstr ""
"不仅仅对于 Schnorr 协议，对于任意的 「Public-Coin 协议」，都可以用 Fiat-"
"Shamir 变换来把整个协议「压缩」成一步交互，也就是一个非交互式的证明系统，这个"
"变换技巧最早来自于 Amos Fiat 与 Adi Shamir 两人的论文『How to Prove "
"Yourself: Practical Solutions to Identification and Signature Problems.』，发"
"表在 1986 年的 Crypto 会议上\\[5\\]。也有一说，这个技巧来源于 Manuel "
"Blum\\[6\\]."

#: src/zkp-intro/4/zkp-rom.md:247
msgid ""
"重复一遍，在 Public-coin 协议中，验证者 Bob 只做一类事情，就是产生一个随机"
"数，然后挑战 Alice 。通过 Fiat-Shamir 变换，可以把 Bob 每一次的「挑战行为」用"
"一次「随机预言」来代替。"
msgstr ""
"重复一遍，在 Public-coin 协议中，验证者 Bob 只做一类事情，就是产生一个随机"
"数，然后挑战 Alice 。通过 Fiat-Shamir 变换，可以把 Bob 每一次的「挑战行为」用"
"一次「随机预言」来代替。"

#: src/zkp-intro/4/zkp-rom.md:249
msgid ""
"而在具体实现中，随机预言需要用一个具有密码学安全强度的 Hash 函数（不能随便"
"选，一定要采用密码学安全的 Hash），而 Hash 函数的参数应该是之前所有的上下文输"
"入。下面是一个示例图，大家可以迅速理解这个 Fiat-Shamir 变换的做法。"
msgstr ""
"而在具体实现中，随机预言需要用一个具有密码学安全强度的 Hash 函数（不能随便"
"选，一定要采用密码学安全的 Hash），而 Hash 函数的参数应该是之前所有的上下文输"
"入。下面是一个示例图，大家可以迅速理解这个 Fiat-Shamir 变换的做法。"

#: src/zkp-intro/4/zkp-rom.md:251
msgid "![](img/fs-transform.png)"
msgstr "![](img/fs-transform.png)"

#: src/zkp-intro/4/zkp-rom.md:253
msgid ""
"前面提到，在非交互式证明系统中，需要引入一个第三方来构建信任的「根基」，使得 "
"Bob 可以完全相信由 Alice 所构造的证明。在这里，第三方就是那个「精灵」，用学术"
"黑话就是「随机预言」（Random Oracle）。这个精灵并不是一个真实存在的第三方，而"
"是一个虚拟的第三方，它同时存在于「现实世界」与「理想世界」。在「现实世界」"
"中，精灵是一个负责任的安静美男子，而在「理想世界」中，它会被「模拟器」绑架。"
msgstr ""
"前面提到，在非交互式证明系统中，需要引入一个第三方来构建信任的「根基」，使得 "
"Bob 可以完全相信由 Alice 所构造的证明。在这里，第三方就是那个「精灵」，用学术"
"黑话就是「随机预言」（Random Oracle）。这个精灵并不是一个真实存在的第三方，而"
"是一个虚拟的第三方，它同时存在于「现实世界」与「理想世界」。在「现实世界」"
"中，精灵是一个负责任的安静美男子，而在「理想世界」中，它会被「模拟器」绑架。"

#: src/zkp-intro/4/zkp-rom.md:255
msgid "Public-Coin 协议还有一个好听的名字， 「Arthur-Merlin 游戏」 ……"
msgstr "Public-Coin 协议还有一个好听的名字， 「Arthur-Merlin 游戏」 ……"

#: src/zkp-intro/4/zkp-rom.md:259
msgid "![圆桌骑士](img/arthur.png)"
msgstr "![圆桌骑士](img/arthur.png)"

#: src/zkp-intro/4/zkp-rom.md:261
msgid ""
"看上图，左边的“白袍”就是 Merlin（魔法师梅林），中间拿剑的帅哥就是 King Arthur"
"（亚瑟王），两个角色来源于中世纪欧洲传说——亚瑟王的圆桌骑士。"
msgstr ""
"看上图，左边的“白袍”就是 Merlin（魔法师梅林），中间拿剑的帅哥就是 King Arthur"
"（亚瑟王），两个角色来源于中世纪欧洲传说——亚瑟王的圆桌骑士。"

#: src/zkp-intro/4/zkp-rom.md:263
msgid ""
"Arthur 是一个不耐烦的国王，他随身携带一个硬币，而 Merlin是一个有着无限制计算"
"能力的神奇魔法师，然后魔法师想说服国王相信某个「论断」为真，于是魔法师会和国"
"王进行到对话，但是由于国王比较懒，他每次只会抛一个硬币，然后「挑战」魔法师，"
"而魔法师需要及时应对，而且需要让国王在 k 轮之后能够相信自己的论断。由于 "
"Merlin 有魔法，所以亚瑟王抛的硬币都能被 Merlin 看到\\[7\\]。"
msgstr ""
"Arthur 是一个不耐烦的国王，他随身携带一个硬币，而 Merlin是一个有着无限制计算"
"能力的神奇魔法师，然后魔法师想说服国王相信某个「论断」为真，于是魔法师会和国"
"王进行到对话，但是由于国王比较懒，他每次只会抛一个硬币，然后「挑战」魔法师，"
"而魔法师需要及时应对，而且需要让国王在 k 轮之后能够相信自己的论断。由于 "
"Merlin 有魔法，所以亚瑟王抛的硬币都能被 Merlin 看到\\[7\\]。"

#: src/zkp-intro/4/zkp-rom.md:265
msgid ""
"这与我们在[『系列一』](https://github.com/sec-bit/learning-zkp/blob/master/"
"zkp-intro/1/zkp-back.md)中提到的交互式证明系统（Interactive Proof System，简"
"称 `IP`）有些神似，但又不同。`IP` 由 Goldwasser，Micali 与 Rackoff（简称GMR）"
"在 1985 年正式提出，它的证明能力覆盖很大一类的计算复杂性问题。而不同的地方在"
"于：在 `IP` 的定义中，证明者 Prover 和 验证者 Verifier 都是可以抛硬币的图灵"
"机，Verifier 可以偷偷抛硬币，并对 Prover 隐藏；而在 Arthur-Merlin 游戏中，国"
"王只能抛硬币，不仅如此，而且抛硬币的结果总会被 Merlin 知道。"
msgstr ""
"这与我们在[『系列一』](https://github.com/sec-bit/learning-zkp/blob/master/"
"zkp-intro/1/zkp-back.md)中提到的交互式证明系统（Interactive Proof System，简"
"称 `IP`）有些神似，但又不同。`IP` 由 Goldwasser，Micali 与 Rackoff（简称GMR）"
"在 1985 年正式提出，它的证明能力覆盖很大一类的计算复杂性问题。而不同的地方在"
"于：在 `IP` 的定义中，证明者 Prover 和 验证者 Verifier 都是可以抛硬币的图灵"
"机，Verifier 可以偷偷抛硬币，并对 Prover 隐藏；而在 Arthur-Merlin 游戏中，国"
"王只能抛硬币，不仅如此，而且抛硬币的结果总会被 Merlin 知道。"

#: src/zkp-intro/4/zkp-rom.md:267
msgid ""
"但是，Fiat-Shamir 变换只能在「随机预言模型」下证明安全，而用 Hash 函数实现随"
"机预言的过程是否安全是缺少安全性证明的。不仅如此，「随机预言模型」下安全的协"
"议可能是有不安全的，已经有人找到了一些反例\\[8\\]；更不幸的是，S. Goldwasser "
"与 Y. Tauman 在 2003 年证明了 Fiat-Shamir 变换本身也是**存在安全反例**的"
"\\[9\\]。但是这并不意味着 Fiat-Shamir 变换不能用，只是在使用过程中要非常小"
"心，不能盲目套用。"
msgstr ""
"但是，Fiat-Shamir 变换只能在「随机预言模型」下证明安全，而用 Hash 函数实现随"
"机预言的过程是否安全是缺少安全性证明的。不仅如此，「随机预言模型」下安全的协"
"议可能是有不安全的，已经有人找到了一些反例\\[8\\]；更不幸的是，S. Goldwasser "
"与 Y. Tauman 在 2003 年证明了 Fiat-Shamir 变换本身也是**存在安全反例**的"
"\\[9\\]。但是这并不意味着 Fiat-Shamir 变换不能用，只是在使用过程中要非常小"
"心，不能盲目套用。"

#: src/zkp-intro/4/zkp-rom.md:269
msgid ""
"尽管如此，人们无法抵挡 Fiat-Shamir 变换的诱惑，其使用极其广泛。值得一提的是，"
"最热的通用非交互零知识证明 zkSNARK 的各种方案中，Fiat-Shamir 变换比比皆是。比"
"如大家可能耳熟能详的 Bulletproofs（子弹证明），此外还有一些暂时还不那么有名的"
"通用零知识证明方案，比如 Hyrax，Ligero，Supersonic，Libra 等（我们后续会抽丝"
"剥茧，逐一解读）。"
msgstr ""
"尽管如此，人们无法抵挡 Fiat-Shamir 变换的诱惑，其使用极其广泛。值得一提的是，"
"最热的通用非交互零知识证明 zkSNARK 的各种方案中，Fiat-Shamir 变换比比皆是。比"
"如大家可能耳熟能详的 Bulletproofs（子弹证明），此外还有一些暂时还不那么有名的"
"通用零知识证明方案，比如 Hyrax，Ligero，Supersonic，Libra 等（我们后续会抽丝"
"剥茧，逐一解读）。"

#: src/zkp-intro/4/zkp-rom.md:272
msgid "小心：Fiat-Shamir 变换中的安全隐患"
msgstr "小心：Fiat-Shamir 变换中的安全隐患"

#: src/zkp-intro/4/zkp-rom.md:274
msgid ""
"在 Fiat-Shamir 变换中，要尤其注意喂给 Hash 函数的参数，在实际的代码实现中，就"
"有这样的案例，漏掉了 Hash 函数的部分参数："
msgstr ""
"在 Fiat-Shamir 变换中，要尤其注意喂给 Hash 函数的参数，在实际的代码实现中，就"
"有这样的案例，漏掉了 Hash 函数的部分参数："

#: src/zkp-intro/4/zkp-rom.md:276
msgid ""
"比如在 `A, Hash(A), B, Hash(B)` 中，第二个 Hash 函数就漏掉了参数A，正确的做法"
"应该是`A, Hash(A), B, Hash(A,B) `。这一类的做法会引入严重的安全漏洞，比如在瑞"
"士的电子投票系统 SwissPost-Scytl 中，就在 Fiat-Shamir 变换的实现代码中多次漏"
"掉了本来应该存在的参数，导致了攻击者不仅可以随意作废选票，还可以任意伪造选"
"票，达到舞弊的目的\\[10\\]。因此在工程实现中，请务必注意。"
msgstr ""
"比如在 `A, Hash(A), B, Hash(B)` 中，第二个 Hash 函数就漏掉了参数A，正确的做法"
"应该是`A, Hash(A), B, Hash(A,B) `。这一类的做法会引入严重的安全漏洞，比如在瑞"
"士的电子投票系统 SwissPost-Scytl 中，就在 Fiat-Shamir 变换的实现代码中多次漏"
"掉了本来应该存在的参数，导致了攻击者不仅可以随意作废选票，还可以任意伪造选"
"票，达到舞弊的目的\\[10\\]。因此在工程实现中，请务必注意。"

#: src/zkp-intro/4/zkp-rom.md:278
msgid ""
"细心读者也许会回看一下 Schnorr 签名，大家会发现 Schnorr 签名中的 Hash 算法似"
"乎也漏掉了一个参数 `PK`，并不是严格的 Fiat-Shamir 变换，这被称为 Weak Fiat-"
"Shamir 变换\\[11\\]，不过这个特例并没有安全问题\\[3\\]，请未成年人不要随意模"
"仿。"
msgstr ""
"细心读者也许会回看一下 Schnorr 签名，大家会发现 Schnorr 签名中的 Hash 算法似"
"乎也漏掉了一个参数 `PK`，并不是严格的 Fiat-Shamir 变换，这被称为 Weak Fiat-"
"Shamir 变换\\[11\\]，不过这个特例并没有安全问题\\[3\\]，请未成年人不要随意模"
"仿。"

#: src/zkp-intro/4/zkp-rom.md:280
msgid ""
"最近一些学者开始在标准模型下研究如何严格证明 Fiat-Shamir 变换的安全性，目前要"
"么引入额外的强安全假设，要么针对某个特定协议进行证明，但似乎进展并不大。"
msgstr ""
"最近一些学者开始在标准模型下研究如何严格证明 Fiat-Shamir 变换的安全性，目前要"
"么引入额外的强安全假设，要么针对某个特定协议进行证明，但似乎进展并不大。"

#: src/zkp-intro/4/zkp-rom.md:282
msgid "交互的威力"
msgstr "交互的威力"

#: src/zkp-intro/4/zkp-rom.md:284
msgid ""
"话说在1985年，当 GMR 三人的论文历经多次被拒之后终于被 STOC’85 接受，另一篇类"
"似的工作也同时被 STOC'85 接受，这就是来自于匈牙利罗兰大学的 László Babai，与"
"来自以色列理工的 Shlomo Moran 两人撰写的论文『Arthur-Merlin Games: A "
"Randomized Proof System, and a Hierarchy of Complexity Classes』\\[7\\]，引入"
"了 Public-coin 交互式协议（顾名思义，Verifier 只公开抛硬币）。"
msgstr ""
"话说在1985年，当 GMR 三人的论文历经多次被拒之后终于被 STOC’85 接受，另一篇类"
"似的工作也同时被 STOC'85 接受，这就是来自于匈牙利罗兰大学的 László Babai，与"
"来自以色列理工的 Shlomo Moran 两人撰写的论文『Arthur-Merlin Games: A "
"Randomized Proof System, and a Hierarchy of Complexity Classes』\\[7\\]，引入"
"了 Public-coin 交互式协议（顾名思义，Verifier 只公开抛硬币）。"

#: src/zkp-intro/4/zkp-rom.md:286
msgid ""
"国王 Arthur 的方法很简单，通过反复地「随机」挑战来检验 Merlin 的论断，这符合"
"我们前面讲述过的直觉：采用随机挑战来构建信任的「根基」。Babai 在论文中证明了"
"一个有趣的结论：`AM[k]=AM[2]`，其中 `k` 表示交互的次数，交互多次产生的效果居"
"然和交互两次等价。所谓交互两次是指：Arthur 发一个挑战数，然后 Merlin 回应。"
msgstr ""
"国王 Arthur 的方法很简单，通过反复地「随机」挑战来检验 Merlin 的论断，这符合"
"我们前面讲述过的直觉：采用随机挑战来构建信任的「根基」。Babai 在论文中证明了"
"一个有趣的结论：`AM[k]=AM[2]`，其中 `k` 表示交互的次数，交互多次产生的效果居"
"然和交互两次等价。所谓交互两次是指：Arthur 发一个挑战数，然后 Merlin 回应。"

#: src/zkp-intro/4/zkp-rom.md:288
msgid ""
"_注：还有一类的问题属于 `MA`，这一类问题的交互顺序与 `AM`不同，`MA`中是 "
"Merlin 先给出证明，然后 Arthur 抛硬币检验。已证明：MA 能处理的问题是 AM 的子"
"集。_"
msgstr ""
"_注：还有一类的问题属于 `MA`，这一类问题的交互顺序与 `AM`不同，`MA`中是 "
"Merlin 先给出证明，然后 Arthur 抛硬币检验。已证明：MA 能处理的问题是 AM 的子"
"集。_"

#: src/zkp-intro/4/zkp-rom.md:290
msgid ""
"不仅如此，Babai 还大胆猜测： `AM[poly]` 与 `IP` 是等价的。这是一个神奇的论"
"断：国王很懒，他只需要通过抛多项式次硬币，就能成功挑战魔法师，而这种方式的表"
"达能力居然完全等价于 GMR 描述的交互式证明系统 `IP`。果不其然，在 STOC'86 会议"
"上，来自 S. Goldwasser 与 M. Sipser 的论文证明了这一点，`AM[poly] == "
"IP`\\[12\\]。"
msgstr ""
"不仅如此，Babai 还大胆猜测： `AM[poly]` 与 `IP` 是等价的。这是一个神奇的论"
"断：国王很懒，他只需要通过抛多项式次硬币，就能成功挑战魔法师，而这种方式的表"
"达能力居然完全等价于 GMR 描述的交互式证明系统 `IP`。果不其然，在 STOC'86 会议"
"上，来自 S. Goldwasser 与 M. Sipser 的论文证明了这一点，`AM[poly] == "
"IP`\\[12\\]。"

#: src/zkp-intro/4/zkp-rom.md:292
msgid "![](img/am-ip.png)"
msgstr "![](img/am-ip.png)"

#: src/zkp-intro/4/zkp-rom.md:294
msgid ""
"这意味着：反复公开的「随机挑战」威力无穷，它等价于任意的交互式证明系统。但是 "
"`AM[poly]` 和别的计算复杂性类的关系如何，是接下来的研究热点。"
msgstr ""
"这意味着：反复公开的「随机挑战」威力无穷，它等价于任意的交互式证明系统。但是 "
"`AM[poly]` 和别的计算复杂性类的关系如何，是接下来的研究热点。"

#: src/zkp-intro/4/zkp-rom.md:296
msgid ""
"三年后，1989 年11月底，距今恰好三十年，年轻的密码学家 Noam Nisan 发出了一封邮"
"件，把自己的临时学术结论发给了几个密码学家，然后他就跑去南美洲度假了。可是他"
"不曾想到，这一个邮件会引爆历史上一场激烈的学术竞赛，M. Blum, S. Kannan, D. "
"Lipton, D. Beaver, J. Feigenbaum, H. Karloff, C. Lund 等等一大群精英开始加入"
"战斗，他们没日没夜地互相讨论，并且竞相发布自己的研究成果，终于在12月26号，刚"
"好一个月，Adi Shamir 证明了下面的结论："
msgstr ""
"三年后，1989 年11月底，距今恰好三十年，年轻的密码学家 Noam Nisan 发出了一封邮"
"件，把自己的临时学术结论发给了几个密码学家，然后他就跑去南美洲度假了。可是他"
"不曾想到，这一个邮件会引爆历史上一场激烈的学术竞赛，M. Blum, S. Kannan, D. "
"Lipton, D. Beaver, J. Feigenbaum, H. Karloff, C. Lund 等等一大群精英开始加入"
"战斗，他们没日没夜地互相讨论，并且竞相发布自己的研究成果，终于在12月26号，刚"
"好一个月，Adi Shamir 证明了下面的结论："

#: src/zkp-intro/4/zkp-rom.md:298
msgid "`AM[poly] == IP == PSPACE`"
msgstr "`AM[poly] == IP == PSPACE`"

#: src/zkp-intro/4/zkp-rom.md:300
msgid "![image-shamir](img/shamir.png)"
msgstr "![image-shamir](img/shamir.png)"

#: src/zkp-intro/4/zkp-rom.md:302
msgid ""
"它解释了「有效证明」这个概念的计算理论特征，并且解释了「交互式证明系统」这个"
"概念所能涵盖的计算能力。"
msgstr ""
"它解释了「有效证明」这个概念的计算理论特征，并且解释了「交互式证明系统」这个"
"概念所能涵盖的计算能力。"

#: src/zkp-intro/4/zkp-rom.md:304
msgid ""
"_注：NP 类 是 PSPACE 类的子集，前者大家比较熟悉，后者关联游戏或者下棋中的制胜"
"策略\\[13\\]。_"
msgstr ""
"_注：NP 类 是 PSPACE 类的子集，前者大家比较熟悉，后者关联游戏或者下棋中的制胜"
"策略\\[13\\]。_"

#: src/zkp-intro/4/zkp-rom.md:306
msgid ""
"而 L. Babai 于是写了一篇文章，名为「Email and the unexpected power of "
"interaction」（电子邮件与交互的始料未及的威力）\\[14\\]，详细阐述了这一整个月"
"在「邮件交互」中精彩纷呈的学术竞赛，以及关于「交互证明」的来龙去脉。"
msgstr ""
"而 L. Babai 于是写了一篇文章，名为「Email and the unexpected power of "
"interaction」（电子邮件与交互的始料未及的威力）\\[14\\]，详细阐述了这一整个月"
"在「邮件交互」中精彩纷呈的学术竞赛，以及关于「交互证明」的来龙去脉。"

#: src/zkp-intro/4/zkp-rom.md:308
msgid "公共参考串 —— 另一种「信任根基」"
msgstr "公共参考串 —— 另一种「信任根基」"

#: src/zkp-intro/4/zkp-rom.md:310
msgid ""
"除了采用「随机预言机」之外，非交互零知识证明系统采用「公共参考串」（Common "
"Reference String），简称「CRS」，完成随机挑战。它是在证明者 Alice 在构造 "
"NIZK 证明之前由一个受信任的第三方产生的随机字符串，CRS 必须由一个受信任的第三"
"方来完成，同时共享给 Alice 和 验证者 Bob。"
msgstr ""
"除了采用「随机预言机」之外，非交互零知识证明系统采用「公共参考串」（Common "
"Reference String），简称「CRS」，完成随机挑战。它是在证明者 Alice 在构造 "
"NIZK 证明之前由一个受信任的第三方产生的随机字符串，CRS 必须由一个受信任的第三"
"方来完成，同时共享给 Alice 和 验证者 Bob。"

#: src/zkp-intro/4/zkp-rom.md:312
msgid ""
"是的，你没看错，这里又出现了「第三方」！虽然第三方不直接参与证明，但是他要保"
"证随机字符串产生过程的可信。而产生 CRS 的过程也被称为「Trusted Setup」，这是"
"大家又爱又恨的玩意儿。显然，在现实场景中引入第三方会让人头疼。CRS 到底用来作"
"什么？Trusted Setup 的信任何去何从？这部分内容将留给本系列的下一篇。"
msgstr ""
"是的，你没看错，这里又出现了「第三方」！虽然第三方不直接参与证明，但是他要保"
"证随机字符串产生过程的可信。而产生 CRS 的过程也被称为「Trusted Setup」，这是"
"大家又爱又恨的玩意儿。显然，在现实场景中引入第三方会让人头疼。CRS 到底用来作"
"什么？Trusted Setup 的信任何去何从？这部分内容将留给本系列的下一篇。"

#: src/zkp-intro/4/zkp-rom.md:316
msgid ""
"非交互式零知识证明 NIZK 的「信任根基」也需要某种形式的随机「挑战」，一种「挑"
"战」形式是交给「随机预言精灵」；另一种「挑战」是通过 Alice 与 Bob 双方共享的"
"随机字符串来实现。两种挑战形式本质上都引入了第三方，并且两者都必须提供可以让"
"「模拟器」利用的「后门」，以使得让模拟器在「理想世界」中具有某种「优势」，而"
"这种优势在「现实世界」中必须失效。"
msgstr ""
"非交互式零知识证明 NIZK 的「信任根基」也需要某种形式的随机「挑战」，一种「挑"
"战」形式是交给「随机预言精灵」；另一种「挑战」是通过 Alice 与 Bob 双方共享的"
"随机字符串来实现。两种挑战形式本质上都引入了第三方，并且两者都必须提供可以让"
"「模拟器」利用的「后门」，以使得让模拟器在「理想世界」中具有某种「优势」，而"
"这种优势在「现实世界」中必须失效。"

#: src/zkp-intro/4/zkp-rom.md:318
msgid ""
"NIZK 散发着无穷魅力，让我不时惊叹，在过去三十多年里，先驱们所探寻到的精妙结"
"论，同时还有如此之多的未知角落，在等待灵感之光的照射。"
msgstr ""
"NIZK 散发着无穷魅力，让我不时惊叹，在过去三十多年里，先驱们所探寻到的精妙结"
"论，同时还有如此之多的未知角落，在等待灵感之光的照射。"

#: src/zkp-intro/4/zkp-rom.md:320
msgid ""
"本系列文章在 Github 上的[项目仓库](https://github.com/sec-bit/learning-zkp/)"
"收到了第一个 Pull Request，来自Jingyu Hu(colortigerhu)，只改了个把字，但那一"
"瞬间，我感受到了生命力。知识交流，思想碰撞，很迷人，不是吗？"
msgstr ""
"本系列文章在 Github 上的[项目仓库](https://github.com/sec-bit/learning-zkp/)"
"收到了第一个 Pull Request，来自Jingyu Hu(colortigerhu)，只改了个把字，但那一"
"瞬间，我感受到了生命力。知识交流，思想碰撞，很迷人，不是吗？"

#: src/zkp-intro/4/zkp-rom.md:322
msgid ""
"“Everyone we interact with becomes a part of us.”  与我们交往互动的每一个人都"
"是我们自身的一部分。 ― **Jodi Aman**"
msgstr ""
"“Everyone we interact with becomes a part of us.”  与我们交往互动的每一个人都"
"是我们自身的一部分。 ― **Jodi Aman**"

#: src/zkp-intro/4/zkp-rom.md:326
msgid ""
"_致谢：特别感谢丁晟超，刘巍然，陈宇的专业建议和指正，感谢安比实验室小伙伴们"
"(p0n1, even, aphasiayc, Vawheter, yghu, mr) 的修改建议。_"
msgstr ""
"_致谢：特别感谢丁晟超，刘巍然，陈宇的专业建议和指正，感谢安比实验室小伙伴们"
"(p0n1, even, aphasiayc, Vawheter, yghu, mr) 的修改建议。_"

#: src/zkp-intro/4/zkp-rom.md:328
msgid "_致谢：自Nisan发起的密码学研究轶事参考自邓老师的文章\\[15\\]。_"
msgstr "_致谢：自Nisan发起的密码学研究轶事参考自邓老师的文章\\[15\\]。_"

#: src/zkp-intro/4/zkp-rom.md:332
msgid ""
"\\[1\\] Schnorr, Claus-Peter. \"Efficient signature generation by smart "
"cards.\" Journal of cryptology 4.3 (1991): 161-174."
msgstr ""
"\\[1\\] Schnorr, Claus-Peter. \"Efficient signature generation by smart "
"cards.\" Journal of cryptology 4.3 (1991): 161-174."

#: src/zkp-intro/4/zkp-rom.md:334
msgid ""
"\\[2\\] Paillier, Pascal, and Damien Vergnaud. \"Discrete-log-based "
"signatures may not be equivalent to discrete log.\" _International "
"Conference on the Theory and Application of Cryptology and Information "
"Security_. Springer, Berlin, Heidelberg, 2005."
msgstr ""
"\\[2\\] Paillier, Pascal, and Damien Vergnaud. \"Discrete-log-based "
"signatures may not be equivalent to discrete log.\" _International "
"Conference on the Theory and Application of Cryptology and Information "
"Security_. Springer, Berlin, Heidelberg, 2005."

#: src/zkp-intro/4/zkp-rom.md:336
msgid ""
"\\[3\\] Pointcheval, David, and Jacques Stern. \"Security arguments for "
"digital signatures and blind signatures.\" _Journal of cryptology_ 13.3 "
"(2000): 361-396."
msgstr ""
"\\[3\\] Pointcheval, David, and Jacques Stern. \"Security arguments for "
"digital signatures and blind signatures.\" _Journal of cryptology_ 13.3 "
"(2000): 361-396."

#: src/zkp-intro/4/zkp-rom.md:338
msgid ""
"\\[4\\] Maxwell, Gregory, Andrew Poelstra, Yannick Seurin, and Pieter "
"Wuille. \"Simple schnorr multi-signatures with applications to bitcoin.\" "
"_Designs, Codes and Cryptography_ 87, no. 9 (2019): 2139-2164."
msgstr ""
"\\[4\\] Maxwell, Gregory, Andrew Poelstra, Yannick Seurin, and Pieter "
"Wuille. \"Simple schnorr multi-signatures with applications to bitcoin.\" "
"_Designs, Codes and Cryptography_ 87, no. 9 (2019): 2139-2164."

#: src/zkp-intro/4/zkp-rom.md:340
msgid ""
"\\[5\\] Fiat, Amos, and Adi Shamir. \"How to prove yourself: Practical "
"solutions to identification and signature problems.\" Conference on the "
"Theory and Application of Cryptographic Techniques. Springer, Berlin, "
"Heidelberg, 1986."
msgstr ""
"\\[5\\] Fiat, Amos, and Adi Shamir. \"How to prove yourself: Practical "
"solutions to identification and signature problems.\" Conference on the "
"Theory and Application of Cryptographic Techniques. Springer, Berlin, "
"Heidelberg, 1986."

#: src/zkp-intro/4/zkp-rom.md:342
msgid ""
"\\[6\\] Bellare, Mihir, and Phillip Rogaway. \"Random Oracles Are Practical: "
"a Paradigm for Designing Efficient Protocols.\" _Proc. of the 1st CCS_ "
"(1995): 62-73."
msgstr ""
"\\[6\\] Bellare, Mihir, and Phillip Rogaway. \"Random Oracles Are Practical: "
"a Paradigm for Designing Efficient Protocols.\" _Proc. of the 1st CCS_ "
"(1995): 62-73."

#: src/zkp-intro/4/zkp-rom.md:344
msgid ""
"\\[7\\] László Babai, and Shlomo Moran. \"Arthur-Merlin games: a randomized "
"proof system, and a hierarchy of complexity classes.\" Journal of Computer "
"and System Sciences 36.2 (1988): 254-276.m"
msgstr ""
"\\[7\\] László Babai, and Shlomo Moran. \"Arthur-Merlin games: a randomized "
"proof system, and a hierarchy of complexity classes.\" Journal of Computer "
"and System Sciences 36.2 (1988): 254-276.m"

#: src/zkp-intro/4/zkp-rom.md:346
msgid ""
"\\[8\\] Canetti, Ran, Oded Goldreich, and Shai Halevi. \"The random oracle "
"methodology, revisited.\" Journal of the ACM (JACM)51.4 (2004): 557-594."
msgstr ""
"\\[8\\] Canetti, Ran, Oded Goldreich, and Shai Halevi. \"The random oracle "
"methodology, revisited.\" Journal of the ACM (JACM)51.4 (2004): 557-594."

#: src/zkp-intro/4/zkp-rom.md:348
msgid ""
"\\[9\\] Shafi Goldwasser, and Yael Tauman . \"On the (in) security of the "
"Fiat-Shamir paradigm.\" _44th Annual IEEE Symposium on Foundations of "
"Computer Science, 2003. Proceedings._. IEEE, 2003."
msgstr ""
"\\[9\\] Shafi Goldwasser, and Yael Tauman . \"On the (in) security of the "
"Fiat-Shamir paradigm.\" _44th Annual IEEE Symposium on Foundations of "
"Computer Science, 2003. Proceedings._. IEEE, 2003."

#: src/zkp-intro/4/zkp-rom.md:350
msgid ""
"\\[10\\]Lewis, Sarah Jamie, Olivier Pereira, and Vanessa Teague. \"Addendum "
"to how not to prove your election outcome: The use of nonadaptive zero "
"knowledge proofs in the ScytlSwissPost Internet voting system, and its "
"implica tions for castasintended verifi cation.\" _Univ. Melbourne, "
"Parkville, Australia_ (2019)."
msgstr ""
"\\[10\\]Lewis, Sarah Jamie, Olivier Pereira, and Vanessa Teague. \"Addendum "
"to how not to prove your election outcome: The use of nonadaptive zero "
"knowledge proofs in the ScytlSwissPost Internet voting system, and its "
"implica tions for castasintended verifi cation.\" _Univ. Melbourne, "
"Parkville, Australia_ (2019)."

#: src/zkp-intro/4/zkp-rom.md:352
msgid ""
"\\[11\\] Bernhard, David, Olivier Pereira, and Bogdan Warinschi. \"How not "
"to prove yourself: Pitfalls of the fiat-shamir heuristic and applications to "
"helios.\" _International Conference on the Theory and Application of "
"Cryptology and Information Security_. Springer, Berlin, Heidelberg, 2012."
msgstr ""
"\\[11\\] Bernhard, David, Olivier Pereira, and Bogdan Warinschi. \"How not "
"to prove yourself: Pitfalls of the fiat-shamir heuristic and applications to "
"helios.\" _International Conference on the Theory and Application of "
"Cryptology and Information Security_. Springer, Berlin, Heidelberg, 2012."

#: src/zkp-intro/4/zkp-rom.md:354
msgid ""
"\\[12\\] Goldwasser, Shafi, and Michael Sipser. \"Private coins versus "
"public coins in interactive proof systems.\" _Proceedings of the eighteenth "
"annual ACM symposium on Theory of computing_. ACM, 1986."
msgstr ""
"\\[12\\] Goldwasser, Shafi, and Michael Sipser. \"Private coins versus "
"public coins in interactive proof systems.\" _Proceedings of the eighteenth "
"annual ACM symposium on Theory of computing_. ACM, 1986."

#: src/zkp-intro/4/zkp-rom.md:356
msgid ""
"\\[13\\] Papadimitriou, Christos H. \"Games against nature.\" _Journal of "
"Computer and System Sciences_ 31.2 (1985): 288-301."
msgstr ""
"\\[13\\] Papadimitriou, Christos H. \"Games against nature.\" _Journal of "
"Computer and System Sciences_ 31.2 (1985): 288-301."

#: src/zkp-intro/4/zkp-rom.md:358
msgid ""
"\\[14\\] Babai, László. \"E-mail and the unexpected power of interaction.\" "
"_Proceedings Fifth Annual Structure in Complexity Theory Conference_. IEEE, "
"1990."
msgstr ""
"\\[14\\] Babai, László. \"E-mail and the unexpected power of interaction.\" "
"_Proceedings Fifth Annual Structure in Complexity Theory Conference_. IEEE, "
"1990."

#: src/zkp-intro/4/zkp-rom.md:360
msgid ""
"\\[15\\] Yi Deng. \"零知识证明：一个略显严肃的科普.\" https://zhuanlan.zhihu."
"com/p/29491567"
msgstr ""
"\\[15\\] Yi Deng. \"零知识证明：一个略显严肃的科普.\" https://zhuanlan.zhihu."
"com/p/29491567"

#: src/zkp-intro/5/zkp-crs.md:3
msgid "埋藏「秘密」"
msgstr "埋藏「秘密」"

#: src/zkp-intro/5/zkp-crs.md:5
msgid "[CRS 的前世今生](#crs-的前世今生)"
msgstr "[CRS 的前世今生](#crs-的前世今生)"

#: src/zkp-intro/5/zkp-crs.md:6
msgid "[哈密尔顿环路问题](#哈密尔顿环路问题)"
msgstr "[哈密尔顿环路问题](#哈密尔顿环路问题)"

#: src/zkp-intro/5/zkp-crs.md:7
msgid "[ZK-HAM 协议](#zk-ham-协议)"
msgstr "[ZK-HAM 协议](#zk-ham-协议)"

#: src/zkp-intro/5/zkp-crs.md:8
msgid "[ZK-HAM 的变形：ZK-HAM-2](#zk-ham-的变形zk-ham-2)"
msgstr "[ZK-HAM 的变形：ZK-HAM-2](#zk-ham-的变形zk-ham-2)"

#: src/zkp-intro/5/zkp-crs.md:9
msgid "[云中的秘密：Hidden Bits](#云中的秘密hidden-bits)"
msgstr "[云中的秘密：Hidden Bits](#云中的秘密hidden-bits)"

#: src/zkp-intro/5/zkp-crs.md:10
msgid "[升级随机性](#升级随机性)"
msgstr "[升级随机性](#升级随机性)"

#: src/zkp-intro/5/zkp-crs.md:11
msgid "[FLS 变换：从 Hidden Bits 到 NIZK](#fls-变换从-hidden-bits-到-nizk)"
msgstr "[FLS 变换：从 Hidden Bits 到 NIZK](#fls-变换从-hidden-bits-到-nizk)"

#: src/zkp-intro/5/zkp-crs.md:12
msgid "[寻找理想的 Trapdoor Permutation](#寻找理想的-trapdoor-permutation)"
msgstr "[寻找理想的 Trapdoor Permutation](#寻找理想的-trapdoor-permutation)"

#: src/zkp-intro/5/zkp-crs.md:13
msgid "[NIZK Proofs  与 NIZK Arguments](#nizk-proofs--与-nizk-arguments)"
msgstr "[NIZK Proofs  与 NIZK Arguments](#nizk-proofs--与-nizk-arguments)"

#: src/zkp-intro/5/zkp-crs.md:14
msgid "[没有秘密的世界](#没有秘密的世界)"
msgstr "[没有秘密的世界](#没有秘密的世界)"

#: src/zkp-intro/5/zkp-crs.md:18
msgid ""
"Once exposed, a secret loses all its power.  一旦泄露，秘密就失去了全部威力  "
"― **Ann Aguirre**"
msgstr ""
"Once exposed, a secret loses all its power.  一旦泄露，秘密就失去了全部威力  "
"― **Ann Aguirre**"

#: src/zkp-intro/5/zkp-crs.md:20
msgid ""
"这已经是本系列的第五篇文章了，这一篇继续深入非交互式零知识证明。 本文约 "
"12,000 字。"
msgstr ""
"这已经是本系列的第五篇文章了，这一篇继续深入非交互式零知识证明。 本文约 "
"12,000 字。"

#: src/zkp-intro/5/zkp-crs.md:23
msgid "**提纲**"
msgstr "**提纲**"

#: src/zkp-intro/5/zkp-crs.md:25 src/zkp-intro/5/zkp-crs.md:42
msgid "CRS 的前世今生"
msgstr "CRS 的前世今生"

#: src/zkp-intro/5/zkp-crs.md:26 src/zkp-intro/5/zkp-crs.md:86
msgid "哈密尔顿环路问题"
msgstr "哈密尔顿环路问题"

#: src/zkp-intro/5/zkp-crs.md:27
msgid "云中的秘密：Hidden Bits "
msgstr "云中的秘密：Hidden Bits "

#: src/zkp-intro/5/zkp-crs.md:28 src/zkp-intro/5/zkp-crs.md:247
msgid "升级随机性"
msgstr "升级随机性"

#: src/zkp-intro/5/zkp-crs.md:29
msgid "FLS变换：从 Hidden Bits 到 NIZK"
msgstr "FLS变换：从 Hidden Bits 到 NIZK"

#: src/zkp-intro/5/zkp-crs.md:30 src/zkp-intro/5/zkp-crs.md:321
msgid "寻找理想的 Trapdoor Permutation"
msgstr "寻找理想的 Trapdoor Permutation"

#: src/zkp-intro/5/zkp-crs.md:31
msgid "NIZK Proof vs. NIZK Argument"
msgstr "NIZK Proof vs. NIZK Argument"

#: src/zkp-intro/5/zkp-crs.md:32 src/zkp-intro/5/zkp-crs.md:351
msgid "没有秘密的世界"
msgstr "没有秘密的世界"

#: src/zkp-intro/5/zkp-crs.md:35
msgid ""
"追到这里的读者想必已对零知识证明有了一个大概的认识。你是否想过这个问题：零知"
"识证明为何可行？这里请大家思考一下（比如[系列一](https://github.com/sec-bit/"
"learning-zkp/blob/master/zkp-intro/1/zkp-back.md) 中的地图三染色问题的流程） "
"…… （此处停留三分钟）下面两个要素 **似乎** 必不可少："
msgstr ""
"追到这里的读者想必已对零知识证明有了一个大概的认识。你是否想过这个问题：零知"
"识证明为何可行？这里请大家思考一下（比如[系列一](https://github.com/sec-bit/"
"learning-zkp/blob/master/zkp-intro/1/zkp-back.md) 中的地图三染色问题的流程） "
"…… （此处停留三分钟）下面两个要素 **似乎** 必不可少："

#: src/zkp-intro/5/zkp-crs.md:37
msgid "「交互」：验证者通过多次反复挑战，把证明者作弊概率降低到一个极小的值"
msgstr "「交互」：验证者通过多次反复挑战，把证明者作弊概率降低到一个极小的值"

#: src/zkp-intro/5/zkp-crs.md:38
msgid "「隐藏随机性」：验证者产生让证明者无法预测的随机数进行挑战"
msgstr "「隐藏随机性」：验证者产生让证明者无法预测的随机数进行挑战"

#: src/zkp-intro/5/zkp-crs.md:40
msgid ""
"然而对于非交互式零知识证明—— NIZK 来说，如何实现上面两点？在 [系列四]"
"(https://github.com/sec-bit/learning-zkp/blob/master/zkp-intro/4/zkp-rom.md) "
"我们介绍了如何采用「随机预言机」来扮演一个虚拟的「第三方」角色，实现虚拟的"
"「交互」与「随机挑战」。本文将深入讲述另一种方法，如何通过一段共享的字符串去"
"除「交互」与「隐藏随机性」。这个字符串必须事先由「第三方」来随机产生，这就是"
"传说中的「公共参考串」（Common Reference String，简称 CRS）。"
msgstr ""
"然而对于非交互式零知识证明—— NIZK 来说，如何实现上面两点？在 [系列四]"
"(https://github.com/sec-bit/learning-zkp/blob/master/zkp-intro/4/zkp-rom.md) "
"我们介绍了如何采用「随机预言机」来扮演一个虚拟的「第三方」角色，实现虚拟的"
"「交互」与「随机挑战」。本文将深入讲述另一种方法，如何通过一段共享的字符串去"
"除「交互」与「隐藏随机性」。这个字符串必须事先由「第三方」来随机产生，这就是"
"传说中的「公共参考串」（Common Reference String，简称 CRS）。"

#: src/zkp-intro/5/zkp-crs.md:44
msgid ""
"假如我们不借助任何其它手段，限定证明者 Prover 和验证者 Verifier 只能进行「一"
"次交互」来实现「零知识证明」，那么他们只能证明「平凡」问题，也就是计算复杂类 "
"`BPP`（**Bounded-error Probabilistic Polynomial time**），而这个复杂度类大家"
"一般猜想可能等价于 `P`（但还悬而未决，没有被证明！`BPP` 可以理解为 `P` + "
"`Randomness`）。"
msgstr ""
"假如我们不借助任何其它手段，限定证明者 Prover 和验证者 Verifier 只能进行「一"
"次交互」来实现「零知识证明」，那么他们只能证明「平凡」问题，也就是计算复杂类 "
"`BPP`（**Bounded-error Probabilistic Polynomial time**），而这个复杂度类大家"
"一般猜想可能等价于 `P`（但还悬而未决，没有被证明！`BPP` 可以理解为 `P` + "
"`Randomness`）。"

#: src/zkp-intro/5/zkp-crs.md:46
msgid ""
"_注：如果 Prover 与 Verifier 只做一次交互，在这样的 NIZK 系统中，我们很容易能"
"构造一个 Decision Procedure —— Verify(x, Sim(x))，来证明和证伪定理，因此只能"
"证明平凡问题 BPP。_"
msgstr ""
"_注：如果 Prover 与 Verifier 只做一次交互，在这样的 NIZK 系统中，我们很容易能"
"构造一个 Decision Procedure —— Verify(x, Sim(x))，来证明和证伪定理，因此只能"
"证明平凡问题 BPP。_"

#: src/zkp-intro/5/zkp-crs.md:48
msgid ""
"平凡问题虽然也可以零知识证明，但没有意义！怎么理解呢？因为验证者直接可以在多"
"项式时间内根据「输出」求解出「秘密输入」，虽然验证者能够求解，但是「证明」本"
"身并没有额外为验证者提供更多的「知识」。换句话说，不需要证明者出示证明，验证"
"者就知道命题为真，于是证明过程也是零知识的。"
msgstr ""
"平凡问题虽然也可以零知识证明，但没有意义！怎么理解呢？因为验证者直接可以在多"
"项式时间内根据「输出」求解出「秘密输入」，虽然验证者能够求解，但是「证明」本"
"身并没有额外为验证者提供更多的「知识」。换句话说，不需要证明者出示证明，验证"
"者就知道命题为真，于是证明过程也是零知识的。"

#: src/zkp-intro/5/zkp-crs.md:50
msgid ""
"因此，当我们讨论「零知识证明」时，要考虑带「知识」的 `NP` 类问题。大家都知"
"道，`P` 问题是「确定性图灵机」多项式时间内可以求解的复杂类，它的执行路径对于"
"输入 `x`是一个线性的状态转移。而 `NP` 问题是「不确定性图灵机」多项式时间可以"
"求解的问题类。所谓的不确定性图灵机，就是它每次往前走一步是不确定的，有很多个"
"选择，只要任何一个执行路径能到达终止状态，就表示它解决了该问题 `x`。换句话"
"说，它的执行轨迹是一棵树。那么如果我们把不确定性图灵机每一步的路径选择记录下"
"来（这个执行路径的记录叫做 `witness`，也就是我们反复提到的「知识」），那么把"
"`(x, witness)`交给一个确定性图灵机，那么它也能在多项式时间内解决掉 `x` 问题。"
msgstr ""
"因此，当我们讨论「零知识证明」时，要考虑带「知识」的 `NP` 类问题。大家都知"
"道，`P` 问题是「确定性图灵机」多项式时间内可以求解的复杂类，它的执行路径对于"
"输入 `x`是一个线性的状态转移。而 `NP` 问题是「不确定性图灵机」多项式时间可以"
"求解的问题类。所谓的不确定性图灵机，就是它每次往前走一步是不确定的，有很多个"
"选择，只要任何一个执行路径能到达终止状态，就表示它解决了该问题 `x`。换句话"
"说，它的执行轨迹是一棵树。那么如果我们把不确定性图灵机每一步的路径选择记录下"
"来（这个执行路径的记录叫做 `witness`，也就是我们反复提到的「知识」），那么把"
"`(x, witness)`交给一个确定性图灵机，那么它也能在多项式时间内解决掉 `x` 问题。"

#: src/zkp-intro/5/zkp-crs.md:52
msgid "再强调一下，「知识」能提高图灵机的解决问题的能力。"
msgstr "再强调一下，「知识」能提高图灵机的解决问题的能力。"

#: src/zkp-intro/5/zkp-crs.md:54
msgid ""
"`NP` 问题中存在着不想「泄露」给验证者的知识 `witness`，这时，在一个交互式证明"
"系统中，证明者和验证者在「知识」的掌握程度上是不对等的。"
msgstr ""
"`NP` 问题中存在着不想「泄露」给验证者的知识 `witness`，这时，在一个交互式证明"
"系统中，证明者和验证者在「知识」的掌握程度上是不对等的。"

#: src/zkp-intro/5/zkp-crs.md:56
msgid ""
"为了保证证明过程的「零知识」，我们需要保证：**模拟器与验证者的不对等**。可"
"是，模拟器没有 `witness`啊，怎么能让他们不对等呢？上一篇我们介绍了「随机预言"
"机」，我们通过允许让模拟器可以绑架「随机预言精灵」的方式制造不平等。本篇将讲"
"述如何利用 CRS 来制造不平等。"
msgstr ""
"为了保证证明过程的「零知识」，我们需要保证：**模拟器与验证者的不对等**。可"
"是，模拟器没有 `witness`啊，怎么能让他们不对等呢？上一篇我们介绍了「随机预言"
"机」，我们通过允许让模拟器可以绑架「随机预言精灵」的方式制造不平等。本篇将讲"
"述如何利用 CRS 来制造不平等。"

#: src/zkp-intro/5/zkp-crs.md:58
msgid ""
"CRS 是一个在证明之前就已经公开的，并且在证明者与验证者之间共享的，随机字符"
"串。我们怎么来使用 CRS 呢？直觉上，一串双方都「知道」的信息，并不会增加「知"
"识」不对等的情况。"
msgstr ""
"CRS 是一个在证明之前就已经公开的，并且在证明者与验证者之间共享的，随机字符"
"串。我们怎么来使用 CRS 呢？直觉上，一串双方都「知道」的信息，并不会增加「知"
"识」不对等的情况。"

#: src/zkp-intro/5/zkp-crs.md:60
msgid ""
"首先大家会想，能不能直接用 CRS 作为随机挑战数呢？可不可以让 CRS 来代替「随机"
"预言精灵」的角色？答案是不行！"
msgstr ""
"首先大家会想，能不能直接用 CRS 作为随机挑战数呢？可不可以让 CRS 来代替「随机"
"预言精灵」的角色？答案是不行！"

#: src/zkp-intro/5/zkp-crs.md:62
msgid ""
"为什么？这是因为 CRS 是在证明之前就已经产生了，如果证明者 Prover 提前知道了所"
"有的随机挑战数，那么很显然这个随机挑战也就失去了意义。"
msgstr ""
"为什么？这是因为 CRS 是在证明之前就已经产生了，如果证明者 Prover 提前知道了所"
"有的随机挑战数，那么很显然这个随机挑战也就失去了意义。"

#: src/zkp-intro/5/zkp-crs.md:64
msgid ""
"_注：请大家回想下「随机预言机」是如何保证证明者无法提前预测「随机挑战数」的？"
"没想明白的你，请重读系列（四）。_"
msgstr ""
"_注：请大家回想下「随机预言机」是如何保证证明者无法提前预测「随机挑战数」的？"
"没想明白的你，请重读系列（四）。_"

#: src/zkp-intro/5/zkp-crs.md:66
msgid ""
"CRS 的使命就是让「模拟器」与「验证者」不平等。怎么做呢？隐藏一些「秘密」进"
"去。"
msgstr ""
"CRS 的使命就是让「模拟器」与「验证者」不平等。怎么做呢？隐藏一些「秘密」进"
"去。"

#: src/zkp-intro/5/zkp-crs.md:68
msgid ""
"如果进一步追问，隐藏了「秘密」有什么用呢？当然有用啦，在「理想世界」中，模拟"
"器与抽取器才能很开心地玩耍起来（获取某些超能力） ……"
msgstr ""
"如果进一步追问，隐藏了「秘密」有什么用呢？当然有用啦，在「理想世界」中，模拟"
"器与抽取器才能很开心地玩耍起来（获取某些超能力） ……"

#: src/zkp-intro/5/zkp-crs.md:70
msgid ""
"1988年，Manuel Blum，Paul Feldman 和 Silvio Micali 三位先驱发表的论文\t「Non-"
"Interactive Zero-Knowledge and Its Applications」（『非交互式零知识证明及其应"
"用』\\[BFM88\\]）展示了「交互」与「隐藏随机性」的不必要性。他们给出了一个地图"
"三染色问题的 NIZK 证明系统，在一段共享的随机产生的字符串（即CRS）的帮助下。"
msgstr ""
"1988年，Manuel Blum，Paul Feldman 和 Silvio Micali 三位先驱发表的论文\t「Non-"
"Interactive Zero-Knowledge and Its Applications」（『非交互式零知识证明及其应"
"用』\\[BFM88\\]）展示了「交互」与「隐藏随机性」的不必要性。他们给出了一个地图"
"三染色问题的 NIZK 证明系统，在一段共享的随机产生的字符串（即CRS）的帮助下。"

#: src/zkp-intro/5/zkp-crs.md:72
msgid ""
"不过，……，我不会告诉你这个方案需要共享大概 `n^4` 超长的 CRS，其中 `n`是要证明"
"的「命题」的长度。"
msgstr ""
"不过，……，我不会告诉你这个方案需要共享大概 `n^4` 超长的 CRS，其中 `n`是要证明"
"的「命题」的长度。"

#: src/zkp-intro/5/zkp-crs.md:74
msgid ""
"1990 年，Uriel Feige，Dror Lapidot 与 Adi Shamir 三人提出了另一种构造 NP 语言"
"的 NIZK 方案 \\[FLS90\\]。与 \\[BFM88\\] 不一样的是，这个 NIZK 方案不再基于特"
"定的数论假设，而是基于一个密码学工具 Trapdoor Permutation。在这个方案中，FLS "
"提出了「隐藏比特」（Hidden Bits）的概念，然后把 Hidden Bits 藏入了 CRS。对于"
"模拟器而言，就可以通过修改 CRS 中的 Hidden Bits 来达到模拟的效果，从而体现出"
"对验证者 Verifier 的优越性。不过，这个方案需要共享更长的 CRS，超过 `k * "
"n^5`，这里 `k` 是安全参数。"
msgstr ""
"1990 年，Uriel Feige，Dror Lapidot 与 Adi Shamir 三人提出了另一种构造 NP 语言"
"的 NIZK 方案 \\[FLS90\\]。与 \\[BFM88\\] 不一样的是，这个 NIZK 方案不再基于特"
"定的数论假设，而是基于一个密码学工具 Trapdoor Permutation。在这个方案中，FLS "
"提出了「隐藏比特」（Hidden Bits）的概念，然后把 Hidden Bits 藏入了 CRS。对于"
"模拟器而言，就可以通过修改 CRS 中的 Hidden Bits 来达到模拟的效果，从而体现出"
"对验证者 Verifier 的优越性。不过，这个方案需要共享更长的 CRS，超过 `k * "
"n^5`，这里 `k` 是安全参数。"

#: src/zkp-intro/5/zkp-crs.md:76
msgid ""
"此后，Hidden Bits 的思路被很多人采用，值得一提的是，Kilian 与 Petrank 采用了"
"一种更巧妙的方法来使用 Hidden Bits \\[KP98\\]（这里空间太小，写不下:），成功"
"地把 CRS 的长度缩减到了 `k * n^2`。后来 J. Groth 继续优化 ，把 CRS 的长度缩小"
"到了大约 `k*n`\\[Groth10a\\]。"
msgstr ""
"此后，Hidden Bits 的思路被很多人采用，值得一提的是，Kilian 与 Petrank 采用了"
"一种更巧妙的方法来使用 Hidden Bits \\[KP98\\]（这里空间太小，写不下:），成功"
"地把 CRS 的长度缩减到了 `k * n^2`。后来 J. Groth 继续优化 ，把 CRS 的长度缩小"
"到了大约 `k*n`\\[Groth10a\\]。"

#: src/zkp-intro/5/zkp-crs.md:78
msgid ""
"除了 Hidden Bits，J. Groth，R. Ostrovsky 与 A. Sahai  \\[GOS06\\] 使用了同态"
"加密方案 Boneh-Goh-Nissim \\[BGN05\\] 或 Boneh-Boyen-Shacham 来实现 NIZK，他"
"们把加密方案的「公钥」当做是 CRS，同时 Prover 加密作为证明，然后利用同态性质"
"来证明另一个 NP-Complete 问题——布尔电路的可满足性问题。这个方案的最大优点，就"
"是 CRS 长度是固定的，因为只是一个密钥而已，长度只有 `k`。对于模拟器而言，它可"
"以通过超能力，拿到这个公钥所对应的陷门，从而能够实现密封任何信息，但得到相同"
"的密文；对于抽取器而言，它可以用超能力拿到公钥对应的私钥，从而能够解密证明得"
"到「知识」。"
msgstr ""
"除了 Hidden Bits，J. Groth，R. Ostrovsky 与 A. Sahai  \\[GOS06\\] 使用了同态"
"加密方案 Boneh-Goh-Nissim \\[BGN05\\] 或 Boneh-Boyen-Shacham 来实现 NIZK，他"
"们把加密方案的「公钥」当做是 CRS，同时 Prover 加密作为证明，然后利用同态性质"
"来证明另一个 NP-Complete 问题——布尔电路的可满足性问题。这个方案的最大优点，就"
"是 CRS 长度是固定的，因为只是一个密钥而已，长度只有 `k`。对于模拟器而言，它可"
"以通过超能力，拿到这个公钥所对应的陷门，从而能够实现密封任何信息，但得到相同"
"的密文；对于抽取器而言，它可以用超能力拿到公钥对应的私钥，从而能够解密证明得"
"到「知识」。"

#: src/zkp-intro/5/zkp-crs.md:80
msgid ""
"Jens Groth 在 2010 年基于 KEA（Knowledge of Exponent Assumption） 假设与 "
"Pairing 提出了一种新的 NIZK Arguments 方案\\[Gorth10b\\]，这也是后续许许多多 "
"zkSNARKs 方案的起点。这里的 CRS 由一对对的 （`g^x^n, g^⍺x^n`） 构成，被用来实"
"现「知识承诺」。其中 `x` 与 `⍺` 是两个随机数，在产生完 CRS 之后，必须被「遗"
"忘」。有些人把这部分需要遗忘的随机数叫做「Toxic Wastes」，这容易误导读者。他"
"们不仅无毒无害，而且非常有用。他们是被藏入 CRS 的「秘密」，是模拟器的武器。如"
"果模拟器得到了 `x` 与 `⍺`，就能伪造证明，从而保证证明的零知识。而对于抽取器，"
"他能直接通过 KEA 假设内建的抽取函数来抽取知识。"
msgstr ""
"Jens Groth 在 2010 年基于 KEA（Knowledge of Exponent Assumption） 假设与 "
"Pairing 提出了一种新的 NIZK Arguments 方案\\[Gorth10b\\]，这也是后续许许多多 "
"zkSNARKs 方案的起点。这里的 CRS 由一对对的 （`g^x^n, g^⍺x^n`） 构成，被用来实"
"现「知识承诺」。其中 `x` 与 `⍺` 是两个随机数，在产生完 CRS 之后，必须被「遗"
"忘」。有些人把这部分需要遗忘的随机数叫做「Toxic Wastes」，这容易误导读者。他"
"们不仅无毒无害，而且非常有用。他们是被藏入 CRS 的「秘密」，是模拟器的武器。如"
"果模拟器得到了 `x` 与 `⍺`，就能伪造证明，从而保证证明的零知识。而对于抽取器，"
"他能直接通过 KEA 假设内建的抽取函数来抽取知识。"

#: src/zkp-intro/5/zkp-crs.md:82
msgid ""
"最新的 Sonic 方案\\[MBK+19\\]又在 \\[Groth10b\\] 的基础上实现了 Updateable "
"CRS。如果任何人担心 CRS 中的秘密已经被泄露了，他就可以在原有 CRS 基础上打一个"
"补丁，继续往里藏一个秘密，这样就能保证 CRS 的安全性。这里的 CRS 还是"
"「Universal 全局」 的，即 CRS 只需要生成一次，就可以应付所有的命题证明。 这个"
"方案后续被最新的 Plonk\\[GWC19\\]，Marlin\\[CHMMVW19\\] 等方案采用。"
msgstr ""
"最新的 Sonic 方案\\[MBK+19\\]又在 \\[Groth10b\\] 的基础上实现了 Updateable "
"CRS。如果任何人担心 CRS 中的秘密已经被泄露了，他就可以在原有 CRS 基础上打一个"
"补丁，继续往里藏一个秘密，这样就能保证 CRS 的安全性。这里的 CRS 还是"
"「Universal 全局」 的，即 CRS 只需要生成一次，就可以应付所有的命题证明。 这个"
"方案后续被最新的 Plonk\\[GWC19\\]，Marlin\\[CHMMVW19\\] 等方案采用。"

#: src/zkp-intro/5/zkp-crs.md:84
msgid ""
"接下来，我们就从一个简单的例子开始，理解如何基于 CRS 来构造 NIZK。在这之前，"
"我们需要介绍一个 NP-Complete 问题——哈密尔顿环路问题。"
msgstr ""
"接下来，我们就从一个简单的例子开始，理解如何基于 CRS 来构造 NIZK。在这之前，"
"我们需要介绍一个 NP-Complete 问题——哈密尔顿环路问题。"

#: src/zkp-intro/5/zkp-crs.md:88
msgid "想象出一个地图中有若干个城市，城市与城市间可以有公路。"
msgstr "想象出一个地图中有若干个城市，城市与城市间可以有公路。"

#: src/zkp-intro/5/zkp-crs.md:90
msgid ""
"假如给你一副地图，让你找出一条路径，不重复地走遍所有的公路（假设每条公路都是"
"风景美如明信片的 Parkway，或许你想不重复地吃遍每条公路边上的麦当劳，出于某种"
"情怀）。相信你会马上兴奋起来，这不就是小时候学过的「一笔画」么？判断一个地图"
"能否一笔画，这是小学生做的数学题，我们可以计算每个城市连接的公路个数，根据奇"
"偶性分成「奇点」与「偶点」。如果一个地图中存在两个奇点城市，那么你只能从一个"
"奇点城市出发，遍历所有的公路，并且最终到达另一个奇点城市。这条路径就被称为"
"「欧拉路径」（Euler's Path）。"
msgstr ""
"假如给你一副地图，让你找出一条路径，不重复地走遍所有的公路（假设每条公路都是"
"风景美如明信片的 Parkway，或许你想不重复地吃遍每条公路边上的麦当劳，出于某种"
"情怀）。相信你会马上兴奋起来，这不就是小时候学过的「一笔画」么？判断一个地图"
"能否一笔画，这是小学生做的数学题，我们可以计算每个城市连接的公路个数，根据奇"
"偶性分成「奇点」与「偶点」。如果一个地图中存在两个奇点城市，那么你只能从一个"
"奇点城市出发，遍历所有的公路，并且最终到达另一个奇点城市。这条路径就被称为"
"「欧拉路径」（Euler's Path）。"

#: src/zkp-intro/5/zkp-crs.md:92
msgid ""
"如果一个地图中所有的城市都是偶点，那么你可以从任意一个城市出发，轻松地找出一"
"条路径，不重复地遍历所有的公路，并且回到起点。这个环路被称为「欧拉环路」"
"（Euler's Circuit）。"
msgstr ""
"如果一个地图中所有的城市都是偶点，那么你可以从任意一个城市出发，轻松地找出一"
"条路径，不重复地遍历所有的公路，并且回到起点。这个环路被称为「欧拉环路」"
"（Euler's Circuit）。"

#: src/zkp-intro/5/zkp-crs.md:94
msgid ""
"而如果地图存在超过2个以上的奇点，那么就不存在欧拉回路，比如著名的哥德斯堡七桥"
"问题。"
msgstr ""
"而如果地图存在超过2个以上的奇点，那么就不存在欧拉回路，比如著名的哥德斯堡七桥"
"问题。"

#: src/zkp-intro/5/zkp-crs.md:96
msgid "著名的哥德斯堡七桥问题就是这么描述，如果不重复地穿过下面七座桥。"
msgstr "著名的哥德斯堡七桥问题就是这么描述，如果不重复地穿过下面七座桥。"

#: src/zkp-intro/5/zkp-crs.md:98
msgid "![](img/konigsberg.jpg)"
msgstr "![](img/konigsberg.jpg)"

#: src/zkp-intro/5/zkp-crs.md:100
msgid ""
"哥德斯堡七桥地图显然存在多个奇点，不存在欧拉路径。如果给定任何一个地图，是否"
"存在一个欧拉环路，这是一个 `P` 问题，也就是一个计算机可以在 `poly(n)` 多项式"
"时间内寻找。"
msgstr ""
"哥德斯堡七桥地图显然存在多个奇点，不存在欧拉路径。如果给定任何一个地图，是否"
"存在一个欧拉环路，这是一个 `P` 问题，也就是一个计算机可以在 `poly(n)` 多项式"
"时间内寻找。"

#: src/zkp-intro/5/zkp-crs.md:102
msgid "_注：欧拉环路的寻找算法被称为 Fleury算法。_"
msgstr "_注：欧拉环路的寻找算法被称为 Fleury算法。_"

#: src/zkp-intro/5/zkp-crs.md:104
msgid ""
"对于这样一个 `P` 问题， 如果一个证明者 Prover 证明他知道一个欧拉回路，那么他"
"可以直接发送回路的明文，然后验证者 Verifier 验证回路正确与否。请注意，这个过"
"程仍然是零知识的。因为，Verifier 并没有通过 Prover 发送的信息获得任何 **额外"
"的知识**。换句话说，Verifier 并没有因为看到回路，而增强了自身计算能力，因为 "
"Verifier 本来就可以自行计算欧拉回路。"
msgstr ""
"对于这样一个 `P` 问题， 如果一个证明者 Prover 证明他知道一个欧拉回路，那么他"
"可以直接发送回路的明文，然后验证者 Verifier 验证回路正确与否。请注意，这个过"
"程仍然是零知识的。因为，Verifier 并没有通过 Prover 发送的信息获得任何 **额外"
"的知识**。换句话说，Verifier 并没有因为看到回路，而增强了自身计算能力，因为 "
"Verifier 本来就可以自行计算欧拉回路。"

#: src/zkp-intro/5/zkp-crs.md:106
msgid "而我们要讲的是「哈密尔顿环路问题」则是一个 `NP` 问题，描述如下："
msgstr "而我们要讲的是「哈密尔顿环路问题」则是一个 `NP` 问题，描述如下："

#: src/zkp-intro/5/zkp-crs.md:108
msgid "**是否一个地图存在一个环路，能不重复地穿过每一个城市**。"
msgstr "**是否一个地图存在一个环路，能不重复地穿过每一个城市**。"

#: src/zkp-intro/5/zkp-crs.md:110
msgid "比如下面这张地图："
msgstr "比如下面这张地图："

#: src/zkp-intro/5/zkp-crs.md:112
msgid "![](img/map.png)"
msgstr "![](img/map.png)"

#: src/zkp-intro/5/zkp-crs.md:114
msgid ""
"我们用一个矩阵 `V * V ` 的矩阵来表示这个地图，凡是两个城市`（A, B）`有公路相"
"连接，那么就在`(A, B)` 和 `(B, A)`里面填上 `1`，否则填 `0`。这个矩阵被称为"
"「邻接矩阵」，我们可以把这个邻接矩阵拍扁，就变成了一个 `0/1` 比特串。"
msgstr ""
"我们用一个矩阵 `V * V ` 的矩阵来表示这个地图，凡是两个城市`（A, B）`有公路相"
"连接，那么就在`(A, B)` 和 `(B, A)`里面填上 `1`，否则填 `0`。这个矩阵被称为"
"「邻接矩阵」，我们可以把这个邻接矩阵拍扁，就变成了一个 `0/1` 比特串。"

#: src/zkp-intro/5/zkp-crs.md:116
msgid ""
"寻找「哈密尔顿环路」是一个 `NP-Complete` 问题，换句话说，不存在一个算法使得计"
"算机在 `poly(n)` 多项式时间内找到环路。但是，计算机可以在多项式时间内检验一个"
"路径是否是「哈密尔顿环路」。比如这个地图中就有一个带方向的哈密尔顿环路，我们"
"一眼就能验证这个环路确实穿过了每一个城市。如果一个地图有哈密尔顿环路，那么它"
"的矩阵一定是满足下面的特征：每一行一定有一个`1`，每一列一定也有一个`1`。"
msgstr ""
"寻找「哈密尔顿环路」是一个 `NP-Complete` 问题，换句话说，不存在一个算法使得计"
"算机在 `poly(n)` 多项式时间内找到环路。但是，计算机可以在多项式时间内检验一个"
"路径是否是「哈密尔顿环路」。比如这个地图中就有一个带方向的哈密尔顿环路，我们"
"一眼就能验证这个环路确实穿过了每一个城市。如果一个地图有哈密尔顿环路，那么它"
"的矩阵一定是满足下面的特征：每一行一定有一个`1`，每一列一定也有一个`1`。"

#: src/zkp-intro/5/zkp-crs.md:118
msgid "![](img/ham.png)"
msgstr "![](img/ham.png)"

#: src/zkp-intro/5/zkp-crs.md:122
msgid "ZK-HAM 协议"
msgstr "ZK-HAM 协议"

#: src/zkp-intro/5/zkp-crs.md:124
msgid ""
"我们下面给出一个三步交互的 `Sigma` 协议，Alice 向 Bob 证明她「知道」上面这个"
"地图 `G` 的哈密尔顿环路。\t"
msgstr ""
"我们下面给出一个三步交互的 `Sigma` 协议，Alice 向 Bob 证明她「知道」上面这个"
"地图 `G` 的哈密尔顿环路。\t"

#: src/zkp-intro/5/zkp-crs.md:126
msgid "公共输入：`G` 为一个有 6 个顶点的地图，表示为一个 `6*6` 的邻接矩阵"
msgstr "公共输入：`G` 为一个有 6 个顶点的地图，表示为一个 `6*6` 的邻接矩阵"

#: src/zkp-intro/5/zkp-crs.md:127 src/zkp-intro/5/zkp-crs.md:168
msgid "秘密输入：`G`的哈密尔顿环路 `C`（图中橙色的公路）"
msgstr "秘密输入：`G`的哈密尔顿环路 `C`（图中橙色的公路）"

#: src/zkp-intro/5/zkp-crs.md:129
msgid "![](img/3ham1.png)"
msgstr "![](img/3ham1.png)"

#: src/zkp-intro/5/zkp-crs.md:131
msgid ""
"第一步：Alice 随机选择一个「置换」，`Perm(.)`，然后通过这个置换，产生一个新的"
"图 `G'`；然后 Alice 把`G'` 矩阵的每一个单元加密，产生一个新的矩阵发送给 Bob。"
msgstr ""
"第一步：Alice 随机选择一个「置换」，`Perm(.)`，然后通过这个置换，产生一个新的"
"图 `G'`；然后 Alice 把`G'` 矩阵的每一个单元加密，产生一个新的矩阵发送给 Bob。"

#: src/zkp-intro/5/zkp-crs.md:133
msgid ""
"【名词解释】：所谓置换，大家可以想象成用 **鼠标** 随意拖动图中的点，但是点和"
"点之间的连线会跟着点一起被拖动，拖动结束之后形成的图，进行重新编号就得到 "
"`G'`，比如上图左侧的两个图。经过置换变换的图前后是 **同构** 的。其中下图中，"
"每一个顶点上角括号中的标号为拖动之前该顶点在上图中的编号。形式化一点可以这么"
"定义：`Perm()是一个 {1, V} 到 {1, V}的双射函数`新图 `G'`的邻接矩阵，"
"`[perm(i), perm(i+1) ]=1` 当且仅当` [i, i+1]=1`，其中 `i` 是顶点编号，`V` 是"
"顶点个数 。"
msgstr ""
"【名词解释】：所谓置换，大家可以想象成用 **鼠标** 随意拖动图中的点，但是点和"
"点之间的连线会跟着点一起被拖动，拖动结束之后形成的图，进行重新编号就得到 "
"`G'`，比如上图左侧的两个图。经过置换变换的图前后是 **同构** 的。其中下图中，"
"每一个顶点上角括号中的标号为拖动之前该顶点在上图中的编号。形式化一点可以这么"
"定义：`Perm()是一个 {1, V} 到 {1, V}的双射函数`新图 `G'`的邻接矩阵，"
"`[perm(i), perm(i+1) ]=1` 当且仅当` [i, i+1]=1`，其中 `i` 是顶点编号，`V` 是"
"顶点个数 。"

#: src/zkp-intro/5/zkp-crs.md:135
msgid "第二步：Bob 随机选择 `b in {0, 1}}` 进行挑战。"
msgstr "第二步：Bob 随机选择 `b in {0, 1}}` 进行挑战。"

#: src/zkp-intro/5/zkp-crs.md:139
msgid "![](img/3ham2.png)"
msgstr "![](img/3ham2.png)"

#: src/zkp-intro/5/zkp-crs.md:141
msgid ""
"第三步情况（1）：Alice 根据 Bob 第二步发送的值：如果 `b=0`，那么 Alice 发送置"
"换函数 `Perm()`，并且揭示完整的图 `G'`。而 Bob 则确认 `G'`是否是原图 `G` 经过"
"置换无误。"
msgstr ""
"第三步情况（1）：Alice 根据 Bob 第二步发送的值：如果 `b=0`，那么 Alice 发送置"
"换函数 `Perm()`，并且揭示完整的图 `G'`。而 Bob 则确认 `G'`是否是原图 `G` 经过"
"置换无误。"

#: src/zkp-intro/5/zkp-crs.md:143
msgid "![](img/3ham3.png)"
msgstr "![](img/3ham3.png)"

#: src/zkp-intro/5/zkp-crs.md:145
msgid ""
"第三步情况（2）：如果 Bob 第二步发送的`b=1`，那么 Alice 只揭示 `G'`中的哈密尔"
"顿环路 `C'`即可。而 Bob 需要验证 `C'`是否是一个哈密尔顿环路"
msgstr ""
"第三步情况（2）：如果 Bob 第二步发送的`b=1`，那么 Alice 只揭示 `G'`中的哈密尔"
"顿环路 `C'`即可。而 Bob 需要验证 `C'`是否是一个哈密尔顿环路"

#: src/zkp-intro/5/zkp-crs.md:147
msgid "回忆一下三步 Sigma 协议，我们再理解下上面看似复杂的动作："
msgstr "回忆一下三步 Sigma 协议，我们再理解下上面看似复杂的动作："

#: src/zkp-intro/5/zkp-crs.md:149
msgid ""
"第一步：被称为 `Commit`，证明者 Alice 需要把手里的答案进行同态变换，产生一个"
"新答案，然后把每一条边都锁起来，交给 Bob；"
msgstr ""
"第一步：被称为 `Commit`，证明者 Alice 需要把手里的答案进行同态变换，产生一个"
"新答案，然后把每一条边都锁起来，交给 Bob；"

#: src/zkp-intro/5/zkp-crs.md:150
msgid "第二步：Bob 进行随机挑战；"
msgstr "第二步：Bob 进行随机挑战；"

#: src/zkp-intro/5/zkp-crs.md:151
msgid ""
"第三步：Alice 根据 Bob 的随机挑战，做出两种不同的回应。如果 Bob 挑战 `0`，那"
"么Alice 打开第一步的承诺，表示自己在第一步没有作弊；如果 Bob 挑战 `1`，那么 "
"Alice 只解密暴露出哈密尔顿环路的边（公路），其它边则不需解密。Bob 可以轻易地"
"检查地图上露出来的那些边是否构成了一个不重复地经过所有城市的环路。"
msgstr ""
"第三步：Alice 根据 Bob 的随机挑战，做出两种不同的回应。如果 Bob 挑战 `0`，那"
"么Alice 打开第一步的承诺，表示自己在第一步没有作弊；如果 Bob 挑战 `1`，那么 "
"Alice 只解密暴露出哈密尔顿环路的边（公路），其它边则不需解密。Bob 可以轻易地"
"检查地图上露出来的那些边是否构成了一个不重复地经过所有城市的环路。"

#: src/zkp-intro/5/zkp-crs.md:153
msgid ""
"如果这个 Sigma 协议只走一遍的话， Alice 作弊的概率是 50%，如果重复 n 遍，"
"Alice 作弊概率会指数级减小。大家可以试着用「模拟器」和「抽取器」的方法来证明"
"这个协议的「零知识」与「可靠性」。"
msgstr ""
"如果这个 Sigma 协议只走一遍的话， Alice 作弊的概率是 50%，如果重复 n 遍，"
"Alice 作弊概率会指数级减小。大家可以试着用「模拟器」和「抽取器」的方法来证明"
"这个协议的「零知识」与「可靠性」。"

#: src/zkp-intro/5/zkp-crs.md:155
msgid "ZK-HAM 的变形：ZK-HAM-2"
msgstr "ZK-HAM 的变形：ZK-HAM-2"

#: src/zkp-intro/5/zkp-crs.md:157
msgid ""
"接下来把上面的这个三步协议改动一下。大家先考虑下这样一个简单事实：如果一个仅"
"包含环路的子图 `C` 是 图 `G`的子图，`C <= G`那么说明 `G` 包含哈密尔顿环路。"
msgstr ""
"接下来把上面的这个三步协议改动一下。大家先考虑下这样一个简单事实：如果一个仅"
"包含环路的子图 `C` 是 图 `G`的子图，`C <= G`那么说明 `G` 包含哈密尔顿环路。"

#: src/zkp-intro/5/zkp-crs.md:159
msgid ""
"这个事实等价于另一个事实：一个哈密尔顿图 `G` 的补集 `!G` 是环路子图 `C` 的补"
"集 `!C` 的子图。"
msgstr ""
"这个事实等价于另一个事实：一个哈密尔顿图 `G` 的补集 `!G` 是环路子图 `C` 的补"
"集 `!C` 的子图。"

#: src/zkp-intro/5/zkp-crs.md:161
msgid ""
"【名词解释】图的补集：所谓补集就是这样一个新地图，顶点保持不变，旧地图上的边"
"在新地图中不存在，而新地图中的公路在旧地图中不存在，但是两个图重合在一起，就"
"变成了一个完全图（完全图是指任意两个顶点之间都存在一条边）。"
msgstr ""
"【名词解释】图的补集：所谓补集就是这样一个新地图，顶点保持不变，旧地图上的边"
"在新地图中不存在，而新地图中的公路在旧地图中不存在，但是两个图重合在一起，就"
"变成了一个完全图（完全图是指任意两个顶点之间都存在一条边）。"

#: src/zkp-intro/5/zkp-crs.md:163
msgid ""
"用邻接矩阵来理解，就是如果一个图`G`包含一个环路子图`C`，那么`G`矩阵中所有值"
"为 `0` 的单元集合 必然被 `C`矩阵中所有值为`0`的单元集合包含。可以表示为 `!G "
"<= !C`。"
msgstr ""
"用邻接矩阵来理解，就是如果一个图`G`包含一个环路子图`C`，那么`G`矩阵中所有值"
"为 `0` 的单元集合 必然被 `C`矩阵中所有值为`0`的单元集合包含。可以表示为 `!G "
"<= !C`。"

#: src/zkp-intro/5/zkp-crs.md:165
msgid "根据第二个事实，我们可以定义如下的 Sigma 协议："
msgstr "根据第二个事实，我们可以定义如下的 Sigma 协议："

#: src/zkp-intro/5/zkp-crs.md:167
msgid "公共输入：图`G` ，表示为 `6*6` 的邻接矩阵"
msgstr "公共输入：图`G` ，表示为 `6*6` 的邻接矩阵"

#: src/zkp-intro/5/zkp-crs.md:170
msgid "![](img/3ham4.png)"
msgstr "![](img/3ham4.png)"

#: src/zkp-intro/5/zkp-crs.md:172
msgid "第一步："
msgstr "第一步："

#: src/zkp-intro/5/zkp-crs.md:173
msgid ""
"Alice 随机选择一个「置换」，`Perm(.)`，并且通过`C`构造一个哈密尔顿环路子图 "
"`C'=Perm(C)`；"
msgstr ""
"Alice 随机选择一个「置换」，`Perm(.)`，并且通过`C`构造一个哈密尔顿环路子图 "
"`C'=Perm(C)`；"

#: src/zkp-intro/5/zkp-crs.md:174
msgid "然后 Alice 加密 `C'`的每一个单元，把加密后的结果发送给 Bob。"
msgstr "然后 Alice 加密 `C'`的每一个单元，把加密后的结果发送给 Bob。"

#: src/zkp-intro/5/zkp-crs.md:176
msgid "第二步：Bob 随机选择 `b in {0, 1}`进行挑战"
msgstr "第二步：Bob 随机选择 `b in {0, 1}`进行挑战"

#: src/zkp-intro/5/zkp-crs.md:178
msgid "![](img/3ham5.png)"
msgstr "![](img/3ham5.png)"

#: src/zkp-intro/5/zkp-crs.md:180
msgid ""
"第三步情况（1）：如果 `b=0`，Alice 揭示完整的 `C'`，而 Bob 验证这个 `C'` 是否"
"确实是一个哈密尔顿环路子图。"
msgstr ""
"第三步情况（1）：如果 `b=0`，Alice 揭示完整的 `C'`，而 Bob 验证这个 `C'` 是否"
"确实是一个哈密尔顿环路子图。"

#: src/zkp-intro/5/zkp-crs.md:182
msgid "![](img/3ham6.png)"
msgstr "![](img/3ham6.png)"

#: src/zkp-intro/5/zkp-crs.md:184
msgid ""
"第三步情况（2）：如果 `b=1`，Alice 发送 `Perm()`，同时按照 `G'=Perm(G)`中的所"
"有含 `0` 单元所在的位置，揭示 `C'`中所对应的单元；Bob 验证 `C'`所有被揭示单元"
"是否全部为 `0`。"
msgstr ""
"第三步情况（2）：如果 `b=1`，Alice 发送 `Perm()`，同时按照 `G'=Perm(G)`中的所"
"有含 `0` 单元所在的位置，揭示 `C'`中所对应的单元；Bob 验证 `C'`所有被揭示单元"
"是否全部为 `0`。"

#: src/zkp-intro/5/zkp-crs.md:186
msgid "再理解下这三步 Sigma 协议："
msgstr "再理解下这三步 Sigma 协议："

#: src/zkp-intro/5/zkp-crs.md:188
msgid ""
"第一步：证明者 Alice 需要把哈密尔顿子图 `C` 进行置换变换，产生一个新的哈密尔"
"顿子图 `C'`，加密后交给 Bob；"
msgstr ""
"第一步：证明者 Alice 需要把哈密尔顿子图 `C` 进行置换变换，产生一个新的哈密尔"
"顿子图 `C'`，加密后交给 Bob；"

#: src/zkp-intro/5/zkp-crs.md:189
msgid "第二步：Bob 进行随机挑战，`0` 或者 `1`；"
msgstr "第二步：Bob 进行随机挑战，`0` 或者 `1`；"

#: src/zkp-intro/5/zkp-crs.md:190
msgid ""
"第三步：如果 Bob 挑战 `0`，那么 Alice 打开第一步的承诺，展示一个带有唯一环路"
"的图；如果 Bob 挑战 `1`，Alice 则按照 `G'`中的 `0`单元的位置打开承诺，展示承"
"诺中被打开的位置全部为 `0`。"
msgstr ""
"第三步：如果 Bob 挑战 `0`，那么 Alice 打开第一步的承诺，展示一个带有唯一环路"
"的图；如果 Bob 挑战 `1`，Alice 则按照 `G'`中的 `0`单元的位置打开承诺，展示承"
"诺中被打开的位置全部为 `0`。"

#: src/zkp-intro/5/zkp-crs.md:192
msgid ""
"重点来了，大家仔细看看这个新版的 Sigma 协议的第一步。有没有发现什么情况？"
msgstr ""
"重点来了，大家仔细看看这个新版的 Sigma 协议的第一步。有没有发现什么情况？"

#: src/zkp-intro/5/zkp-crs.md:194
msgid "**第一步 Alice 发送的内容是与地图`G`无关的！**"
msgstr "**第一步 Alice 发送的内容是与地图`G`无关的！**"

#: src/zkp-intro/5/zkp-crs.md:196
msgid ""
"同样，第二步 Bob 发送的挑战也是与地图无关的。这样我们可以把第一步发的承诺改成"
"**事先准备好的比特串**，而且我们假设这个比特串由一个可信第三方来产生，这样一"
"来 Bob 就没有必要发送 `b=0` 这个分支，因为可信的第三方是诚实的，他一定是事先"
"准备好一个正确的环路子图。这样，由于 Bob 只需要发送 `1`挑战分支，那么这一步也"
"可以去除。"
msgstr ""
"同样，第二步 Bob 发送的挑战也是与地图无关的。这样我们可以把第一步发的承诺改成"
"**事先准备好的比特串**，而且我们假设这个比特串由一个可信第三方来产生，这样一"
"来 Bob 就没有必要发送 `b=0` 这个分支，因为可信的第三方是诚实的，他一定是事先"
"准备好一个正确的环路子图。这样，由于 Bob 只需要发送 `1`挑战分支，那么这一步也"
"可以去除。"

#: src/zkp-intro/5/zkp-crs.md:198
msgid "于是，三步协议变成了一步，我们成功去除了交互，有望实现 NIZK 。"
msgstr "于是，三步协议变成了一步，我们成功去除了交互，有望实现 NIZK 。"

#: src/zkp-intro/5/zkp-crs.md:200
msgid ""
"我们接下来把 `ZK-HAM-2` 协议的第一步和第二步推到一个事先准备的字符串中，然后"
"只让 Alice 发送第三步的内容给 Bob。如下图所示："
msgstr ""
"我们接下来把 `ZK-HAM-2` 协议的第一步和第二步推到一个事先准备的字符串中，然后"
"只让 Alice 发送第三步的内容给 Bob。如下图所示："

#: src/zkp-intro/5/zkp-crs.md:202
msgid "![](img/3ham7.png)"
msgstr "![](img/3ham7.png)"

#: src/zkp-intro/5/zkp-crs.md:204
msgid ""
"请注意，这里还不算是一个 NIZK 系统，因为这个共享字符串并不能对 Bob 公开，否"
"则 Bob 就能算出环路 `C`。接下来，我们要解释一个新概念：「隐藏比特」（Hidden "
"Bits）\\[FLS90\\]。Hidden Bits 是这样一串随机比特，它们对于验证者 Bob 隐藏，"
"但是对于证明者 Alice 公开。然后在证明过程中，Alice 可以选择性地揭示一部分比特"
"展示给 Bob 看。这是构造 NIZK 证明系统的一个利器，下面我们需要再继续深入 ……"
msgstr ""
"请注意，这里还不算是一个 NIZK 系统，因为这个共享字符串并不能对 Bob 公开，否"
"则 Bob 就能算出环路 `C`。接下来，我们要解释一个新概念：「隐藏比特」（Hidden "
"Bits）\\[FLS90\\]。Hidden Bits 是这样一串随机比特，它们对于验证者 Bob 隐藏，"
"但是对于证明者 Alice 公开。然后在证明过程中，Alice 可以选择性地揭示一部分比特"
"展示给 Bob 看。这是构造 NIZK 证明系统的一个利器，下面我们需要再继续深入 ……"

#: src/zkp-intro/5/zkp-crs.md:206
msgid "云中的秘密：Hidden Bits"
msgstr "云中的秘密：Hidden Bits"

#: src/zkp-intro/5/zkp-crs.md:208
msgid ""
"让我们再次开下脑洞，想象天上有朵云，云后面藏着一串随机产生的比特值，不是 `0` "
"就是 `1`，然后 Alice （证明者）带着一个「超级眼镜」，于是能够看到云后面所有的"
"随机比特串，但是 Bob （验证者）却看不到。同时 Alice 手里还有一个「超级手电"
"筒」，她可以打开手电筒用激光穿透云层，让 Bob 也能看见其中某个或某些比特。当"
"然，Bob 能看到的比特的选择权完全在 Alice 手中。"
msgstr ""
"让我们再次开下脑洞，想象天上有朵云，云后面藏着一串随机产生的比特值，不是 `0` "
"就是 `1`，然后 Alice （证明者）带着一个「超级眼镜」，于是能够看到云后面所有的"
"随机比特串，但是 Bob （验证者）却看不到。同时 Alice 手里还有一个「超级手电"
"筒」，她可以打开手电筒用激光穿透云层，让 Bob 也能看见其中某个或某些比特。当"
"然，Bob 能看到的比特的选择权完全在 Alice 手中。"

#: src/zkp-intro/5/zkp-crs.md:210
msgid "云朵中隐藏的比特串就是所谓的 **Hidden Bits**。"
msgstr "云朵中隐藏的比特串就是所谓的 **Hidden Bits**。"

#: src/zkp-intro/5/zkp-crs.md:212
msgid "![](img/hiddenbits.png)"
msgstr "![](img/hiddenbits.png)"

#: src/zkp-intro/5/zkp-crs.md:214
msgid ""
"接下来我们要通过 Hidden Bits 来完成一个单步交互，完成 `ZK-HAM-2` 协议的功能。"
"在 `ZK-HAM-2` 中的第一步，Alice 产生一个随机的置换 `Perm()`，然后通过 `G` 中"
"的哈密尔顿环路子图 `C` 产生一个变换后的环路子图 `C'=Perm(C)`。这等价于，事先"
"由任何人产生一个随机的哈密尔顿环路子图 `C'`，然后 Alice 根据 `C` 和 `C'` 计算"
"得出一个相应的 `Perm()`。"
msgstr ""
"接下来我们要通过 Hidden Bits 来完成一个单步交互，完成 `ZK-HAM-2` 协议的功能。"
"在 `ZK-HAM-2` 中的第一步，Alice 产生一个随机的置换 `Perm()`，然后通过 `G` 中"
"的哈密尔顿环路子图 `C` 产生一个变换后的环路子图 `C'=Perm(C)`。这等价于，事先"
"由任何人产生一个随机的哈密尔顿环路子图 `C'`，然后 Alice 根据 `C` 和 `C'` 计算"
"得出一个相应的 `Perm()`。"

#: src/zkp-intro/5/zkp-crs.md:216
msgid ""
"假设由某个「第三方」产生了一个随机的环路子图 `C'`，编码成「邻接矩阵」比特串，"
"放到云朵后面。假设 `V` 为顶点（城市）的个数，`E` 为边（公路）的条数。这个邻接"
"矩阵的编码需要一个 `V*V` 长度的比特串，可以解释成一个 `V*V` 的矩阵，其中每一"
"行只包含一个 `1`，每一列也只包含一个 `1`，矩阵的其它单元都为 `0`。"
msgstr ""
"假设由某个「第三方」产生了一个随机的环路子图 `C'`，编码成「邻接矩阵」比特串，"
"放到云朵后面。假设 `V` 为顶点（城市）的个数，`E` 为边（公路）的条数。这个邻接"
"矩阵的编码需要一个 `V*V` 长度的比特串，可以解释成一个 `V*V` 的矩阵，其中每一"
"行只包含一个 `1`，每一列也只包含一个 `1`，矩阵的其它单元都为 `0`。"

#: src/zkp-intro/5/zkp-crs.md:218
msgid "接下来 Alice 如何构造证明呢？这其实很简单："
msgstr "接下来 Alice 如何构造证明呢？这其实很简单："

#: src/zkp-intro/5/zkp-crs.md:220
msgid "![](img/3ham8.png)"
msgstr "![](img/3ham8.png)"

#: src/zkp-intro/5/zkp-crs.md:222
msgid ""
"Alice 通过「超级眼镜」得到了一个随机的哈密尔顿环路子图 `C'`，然后计算得到一个"
"置换 `Perm()`，使得 `Perm(C)=C'`。"
msgstr ""
"Alice 通过「超级眼镜」得到了一个随机的哈密尔顿环路子图 `C'`，然后计算得到一个"
"置换 `Perm()`，使得 `Perm(C)=C'`。"

#: src/zkp-intro/5/zkp-crs.md:224
msgid "Alice 根据 `Perm()` 来计算出一个换后的图 `G'=Perm(G)`"
msgstr "Alice 根据 `Perm()` 来计算出一个换后的图 `G'=Perm(G)`"

#: src/zkp-intro/5/zkp-crs.md:225
msgid ""
"Alice 产生证明，由两部分组成：（1）置换`Perm()` （2）`G'`的邻接矩阵中所有值"
"为 `0` 的单元坐标所对应的 `C'`矩阵的值，相当于 Alice 需要用「超级手电筒」给 "
"Bob 揭示的隐藏比特。"
msgstr ""
"Alice 产生证明，由两部分组成：（1）置换`Perm()` （2）`G'`的邻接矩阵中所有值"
"为 `0` 的单元坐标所对应的 `C'`矩阵的值，相当于 Alice 需要用「超级手电筒」给 "
"Bob 揭示的隐藏比特。"

#: src/zkp-intro/5/zkp-crs.md:227
msgid "那么 Bob 怎么验证这个证明呢？Bob 拿到证明之后，只需要检验两个东西："
msgstr "那么 Bob 怎么验证这个证明呢？Bob 拿到证明之后，只需要检验两个东西："

#: src/zkp-intro/5/zkp-crs.md:229
msgid ""
"`Perm()` 是否是一个合法的置换 `V -> V`，比如不能出现两个顶点映射到同一个顶点"
"的情况。"
msgstr ""
"`Perm()` 是否是一个合法的置换 `V -> V`，比如不能出现两个顶点映射到同一个顶点"
"的情况。"

#: src/zkp-intro/5/zkp-crs.md:230
msgid ""
"对于 `G` 中的每一条「非边」，经过置换之后，Bob 抬头看天上对应的「隐藏比特」，"
"比特值必须为 `0`"
msgstr ""
"对于 `G` 中的每一条「非边」，经过置换之后，Bob 抬头看天上对应的「隐藏比特」，"
"比特值必须为 `0`"

#: src/zkp-intro/5/zkp-crs.md:232
msgid ""
"我们再仔细地深入理解下这个非交互协议。先从「完备性」入手：如果 Alice 没有作"
"弊，那么很显然能够通过 Bob 的验证，这里请大家自行检查。"
msgstr ""
"我们再仔细地深入理解下这个非交互协议。先从「完备性」入手：如果 Alice 没有作"
"弊，那么很显然能够通过 Bob 的验证，这里请大家自行检查。"

#: src/zkp-intro/5/zkp-crs.md:234
msgid ""
"接下来我们分两步简要证明下「可靠性」：首先，因为 Bob 经过验证得知，所有 `G` "
"置换后的非边集合都已被揭示，且全为 `0`，那么可以得出结论，`!G <= !C`，即`G`的"
"非边集合是环路子图 `C`的非边集合的子集。这等价于，`C <= G`，也就是说 `G` 包含"
"一个哈密尔顿环路。这里请注意，这个可靠性概率是 100%。"
msgstr ""
"接下来我们分两步简要证明下「可靠性」：首先，因为 Bob 经过验证得知，所有 `G` "
"置换后的非边集合都已被揭示，且全为 `0`，那么可以得出结论，`!G <= !C`，即`G`的"
"非边集合是环路子图 `C`的非边集合的子集。这等价于，`C <= G`，也就是说 `G` 包含"
"一个哈密尔顿环路。这里请注意，这个可靠性概率是 100%。"

#: src/zkp-intro/5/zkp-crs.md:236
msgid ""
"然后，设想在一个「理想世界」中，Bob 获得了某种超能力（比如拿到 Alice 的「超级"
"眼镜」），不需要 Alice 的超级手电筒，就能看穿云层，得到所有的隐藏比特 `C'`。"
"然后当 Bob 得到 `Perm()`之后，就能通过 `Perm()` 反算出 `C`，于是 Bob 就相当于"
"变身成了一个「抽取器」（Extractor），在理想世界中，它能把 Alice 要证明的知识"
"给成功抽取出来。"
msgstr ""
"然后，设想在一个「理想世界」中，Bob 获得了某种超能力（比如拿到 Alice 的「超级"
"眼镜」），不需要 Alice 的超级手电筒，就能看穿云层，得到所有的隐藏比特 `C'`。"
"然后当 Bob 得到 `Perm()`之后，就能通过 `Perm()` 反算出 `C`，于是 Bob 就相当于"
"变身成了一个「抽取器」（Extractor），在理想世界中，它能把 Alice 要证明的知识"
"给成功抽取出来。"

#: src/zkp-intro/5/zkp-crs.md:238
msgid ""
"那么怎么证明「零知识」呢？Alice 要具备一个超能力，就是在「理想世界」中，可以"
"偷偷修改云朵中的隐藏比特。接下来就简单了，模拟器 Zlice 可以这么欺骗 Bob："
msgstr ""
"那么怎么证明「零知识」呢？Alice 要具备一个超能力，就是在「理想世界」中，可以"
"偷偷修改云朵中的隐藏比特。接下来就简单了，模拟器 Zlice 可以这么欺骗 Bob："

#: src/zkp-intro/5/zkp-crs.md:240
msgid "Zlice 把云朵中的隐藏比特全部置为 `0`"
msgstr "Zlice 把云朵中的隐藏比特全部置为 `0`"

#: src/zkp-intro/5/zkp-crs.md:241
msgid "Zlice 随机产生一个合法的 `Perm()`"
msgstr "Zlice 随机产生一个合法的 `Perm()`"

#: src/zkp-intro/5/zkp-crs.md:243
msgid ""
"大家发现了，关键是，天上隐藏的比特必须是一个可信的字符串，所谓「可信」，就是"
"指它确实应该是一个哈密尔顿环路子图。那么第三方需要可信。"
msgstr ""
"大家发现了，关键是，天上隐藏的比特必须是一个可信的字符串，所谓「可信」，就是"
"指它确实应该是一个哈密尔顿环路子图。那么第三方需要可信。"

#: src/zkp-intro/5/zkp-crs.md:245
msgid ""
"可是，这样一个第三方是不是难以令人满意？Alice 和 Bob 要绝对信任他，不会和对手"
"串谋。如果他和 Alice 串谋，可以把隐藏比特串直接设置为全 `0`；或者他和 Bob 串"
"谋，直接把这个比特串给 Bob 看。这个协议看起来不错，但是很难实用。我们接下来要"
"对这个简单协议进行升级。"
msgstr ""
"可是，这样一个第三方是不是难以令人满意？Alice 和 Bob 要绝对信任他，不会和对手"
"串谋。如果他和 Alice 串谋，可以把隐藏比特串直接设置为全 `0`；或者他和 Bob 串"
"谋，直接把这个比特串给 Bob 看。这个协议看起来不错，但是很难实用。我们接下来要"
"对这个简单协议进行升级。"

#: src/zkp-intro/5/zkp-crs.md:249
msgid ""
"第一个升级是让隐藏比特串变成一个「一致性均匀分布」的随机的隐藏比特串，是一个"
"看起来相当随机的比特串，而不是一个刻意摆放好的哈密尔顿子图。"
msgstr ""
"第一个升级是让隐藏比特串变成一个「一致性均匀分布」的随机的隐藏比特串，是一个"
"看起来相当随机的比特串，而不是一个刻意摆放好的哈密尔顿子图。"

#: src/zkp-intro/5/zkp-crs.md:251
msgid ""
"完全随机意味着比特串中的 `0` 的个数和 `1`出现的概率大概接近。那么接下来一个难"
"题是如何让随机比特串中能出现一个随机的哈密尔顿环路子图矩阵。方法非常简单粗"
"暴：产生一个足够长的随机串，然后从头扫描，直到找到一个随机的哈密尔顿环路为"
"止。"
msgstr ""
"完全随机意味着比特串中的 `0` 的个数和 `1`出现的概率大概接近。那么接下来一个难"
"题是如何让随机比特串中能出现一个随机的哈密尔顿环路子图矩阵。方法非常简单粗"
"暴：产生一个足够长的随机串，然后从头扫描，直到找到一个随机的哈密尔顿环路为"
"止。"

#: src/zkp-intro/5/zkp-crs.md:253
msgid ""
"可是……这个成功概率是不是非常非常小？我们下面给出一个概率没那么小的一种寻找方"
"法。"
msgstr ""
"可是……这个成功概率是不是非常非常小？我们下面给出一个概率没那么小的一种寻找方"
"法。"

#: src/zkp-intro/5/zkp-crs.md:255
msgid ""
"我们先把比特串按照 `5log(V)` 的长度进行切分，然后如果每一个分片中的所有比特全"
"为 `1`，那么我们把这个片段被视为邻接矩阵中的一个值为 `1` 的单元，否则视为一个"
"值为 `0` 的单元。这样每一个矩阵单元出现 `1` 的概率为 `1/(V^5)`。"
msgstr ""
"我们先把比特串按照 `5log(V)` 的长度进行切分，然后如果每一个分片中的所有比特全"
"为 `1`，那么我们把这个片段被视为邻接矩阵中的一个值为 `1` 的单元，否则视为一个"
"值为 `0` 的单元。这样每一个矩阵单元出现 `1` 的概率为 `1/(V^5)`。"

#: src/zkp-intro/5/zkp-crs.md:256
msgid ""
"我们取连续的 `V^6` 个片段，构成一个 `V^3 * V^3` 的大矩阵。如果大矩阵中包含一"
"个 `V*V`的哈密尔顿环路矩阵，并且其他单元（总共 `V^6 - V^2`个） 都为 `0`。那么"
"我们称这个大矩阵为「有用」。"
msgstr ""
"我们取连续的 `V^6` 个片段，构成一个 `V^3 * V^3` 的大矩阵。如果大矩阵中包含一"
"个 `V*V`的哈密尔顿环路矩阵，并且其他单元（总共 `V^6 - V^2`个） 都为 `0`。那么"
"我们称这个大矩阵为「有用」。"

#: src/zkp-intro/5/zkp-crs.md:257
msgid "根据概率计算，出现一个「有用」矩阵的概率为 `1/[V^(3/2)]`。"
msgstr "根据概率计算，出现一个「有用」矩阵的概率为 `1/[V^(3/2)]`。"

#: src/zkp-intro/5/zkp-crs.md:259
msgid ""
"_注：「有用」矩阵的概率计算过程请参考 Fact 4.10.8, 「Foundations of "
"Cryptography, Vol I」by Oded Goldreich，P304。_"
msgstr ""
"_注：「有用」矩阵的概率计算过程请参考 Fact 4.10.8, 「Foundations of "
"Cryptography, Vol I」by Oded Goldreich，P304。_"

#: src/zkp-intro/5/zkp-crs.md:261
msgid ""
"好了，我们需要升级下上一节的协议。因为现在「隐藏比特串」被拆分成了若干个大矩"
"阵，这些大矩阵有些是「有用」的，有些是没用的。"
msgstr ""
"好了，我们需要升级下上一节的协议。因为现在「隐藏比特串」被拆分成了若干个大矩"
"阵，这些大矩阵有些是「有用」的，有些是没用的。"

#: src/zkp-intro/5/zkp-crs.md:263
msgid ""
"接下来 Alice 要来构造证明了，她先戴上超级眼镜，扫描云朵中的 Hidden Bits，这要"
"分两种情况，"
msgstr ""
"接下来 Alice 要来构造证明了，她先戴上超级眼镜，扫描云朵中的 Hidden Bits，这要"
"分两种情况，"

#: src/zkp-intro/5/zkp-crs.md:265
msgid ""
"Case 1：如果 Alice 遇到了一个没用的大矩阵 `M`，Alice 公开 `M` 的所有单元。"
msgstr ""
"Case 1：如果 Alice 遇到了一个没用的大矩阵 `M`，Alice 公开 `M` 的所有单元。"

#: src/zkp-intro/5/zkp-crs.md:267
msgid ""
"Case 2：如果 Alice 遇到了一个「有用」的大矩阵 `M`，这意味着 Alice 得到了一个"
"随机的 哈密尔顿环路 `C'`，然后 Alice 参照上一节的步骤进行证明即可。"
msgstr ""
"Case 2：如果 Alice 遇到了一个「有用」的大矩阵 `M`，这意味着 Alice 得到了一个"
"随机的 哈密尔顿环路 `C'`，然后 Alice 参照上一节的步骤进行证明即可。"

#: src/zkp-intro/5/zkp-crs.md:269
msgid "那么 Bob 怎么验证这个证明呢？我们还要分情况进行讨论，"
msgstr "那么 Bob 怎么验证这个证明呢？我们还要分情况进行讨论，"

#: src/zkp-intro/5/zkp-crs.md:271
msgid ""
"Case 1：如果 Alice 公开了全部的 `M`，那么 Bob 就检查这个 `M` 是否「无用」。如"
"果 `M` 无用，就认为证明有效；否则拒绝。"
msgstr ""
"Case 1：如果 Alice 公开了全部的 `M`，那么 Bob 就检查这个 `M` 是否「无用」。如"
"果 `M` 无用，就认为证明有效；否则拒绝。"

#: src/zkp-intro/5/zkp-crs.md:272
msgid ""
"Case 2：如果 Alice 发送的是形如（`Perm()`，`X`）这样的证明，那么 Bob 按照上一"
"节的验证方法进行验证。"
msgstr ""
"Case 2：如果 Alice 发送的是形如（`Perm()`，`X`）这样的证明，那么 Bob 按照上一"
"节的验证方法进行验证。"

#: src/zkp-intro/5/zkp-crs.md:274
msgid ""
"对于这个协议，Bob 已经不再担心第三方是否作弊，故意产生一个全零的比特串，但是 "
"Alice 仍然担心一旦第三方和 Bob 串谋，那么知识就彻底泄露了。"
msgstr ""
"对于这个协议，Bob 已经不再担心第三方是否作弊，故意产生一个全零的比特串，但是 "
"Alice 仍然担心一旦第三方和 Bob 串谋，那么知识就彻底泄露了。"

#: src/zkp-intro/5/zkp-crs.md:276
msgid ""
"不仅如此，现在的协议还有个很强的限制，Alice 不能在看到隐藏比特之后再选择需要"
"证明的 `G`，否则 Alice 就可以作弊。如果一个证明者选择证明的「命题」与 CRS 无"
"关，那么这个证明者被称为 Non-adaptive Adversary。"
msgstr ""
"不仅如此，现在的协议还有个很强的限制，Alice 不能在看到隐藏比特之后再选择需要"
"证明的 `G`，否则 Alice 就可以作弊。如果一个证明者选择证明的「命题」与 CRS 无"
"关，那么这个证明者被称为 Non-adaptive Adversary。"

#: src/zkp-intro/5/zkp-crs.md:278
msgid "FLS 变换：从 Hidden Bits 到 NIZK"
msgstr "FLS 变换：从 Hidden Bits 到 NIZK"

#: src/zkp-intro/5/zkp-crs.md:280
msgid ""
"接下来，我们再次升级协议，把「隐藏比特串」中的隐藏特性去除，变成「公共参考"
"串」CRS。这里我们要借助一个密码学工具 —— Trapdoor Permutation，陷门置换。"
msgstr ""
"接下来，我们再次升级协议，把「隐藏比特串」中的隐藏特性去除，变成「公共参考"
"串」CRS。这里我们要借助一个密码学工具 —— Trapdoor Permutation，陷门置换。"

#: src/zkp-intro/5/zkp-crs.md:282
msgid ""
"所谓的陷门置换是指一个置换函数 `F(x)`，`x`是一个集合 `S` 中的元素，然后函数 "
"`F(x)` 把`x` 映射到 `S` 中的另一个元素 `y`。同时 `F(x)` 满足单向性，即通过 "
"`y` 很难反算出 `x`；但是如果谁拥有陷门 `t`，就能实现反向计算`F^(-1)(t,y)=x`。"
"陷门置换还可以匹配一个 Hardcore Predicate，`h(x)=0/1`，它能根据 `S` 集合中的"
"元素产生一个一致性分布的 `0/1`比特。介绍完毕，大家是不是有点晕，没关系，晕一"
"晕就习惯了。总之一句话，陷门置换可以对公共参考串和Hidden Bits 进行相互转换。"
msgstr ""
"所谓的陷门置换是指一个置换函数 `F(x)`，`x`是一个集合 `S` 中的元素，然后函数 "
"`F(x)` 把`x` 映射到 `S` 中的另一个元素 `y`。同时 `F(x)` 满足单向性，即通过 "
"`y` 很难反算出 `x`；但是如果谁拥有陷门 `t`，就能实现反向计算`F^(-1)(t,y)=x`。"
"陷门置换还可以匹配一个 Hardcore Predicate，`h(x)=0/1`，它能根据 `S` 集合中的"
"元素产生一个一致性分布的 `0/1`比特。介绍完毕，大家是不是有点晕，没关系，晕一"
"晕就习惯了。总之一句话，陷门置换可以对公共参考串和Hidden Bits 进行相互转换。"

#: src/zkp-intro/5/zkp-crs.md:284
msgid "先假设有这样的密码学工具，然后我们升级协议。"
msgstr "先假设有这样的密码学工具，然后我们升级协议。"

#: src/zkp-intro/5/zkp-crs.md:286
msgid "![](img/fls.png)"
msgstr "![](img/fls.png)"

#: src/zkp-intro/5/zkp-crs.md:288
msgid ""
"我们把公共参考串看成是一个列表，`y1, y2, y3, ..., yn`，列表中的每一项都是集"
"合 `S` 中的元素。然后通过 Hardcore Predicate 产生 Hidden Bits 中的每一个比特"
"位。但是请注意，这里不能直接通过 `h(y)=b` 来产生 Hidden Bits，因为这样一来 "
"Bob 就能自己算出所有的 Hidden Bits，这违反了上一节的协议。为了保证对 Bob 隐"
"藏，我们需要用公共参考串的原象，也就是 `x1, x2, x3, ..., xn` 来产生 Hidden "
"Bits，`h(x)=b`。Bob 虽然不能自己计算 `b1, b2, b3, ..., bn`，但是一旦得到一个 "
"`x`，他就能检验 `F(x)?=y`来判断是否 `x` 是和公共参考串对应，同时再计算 "
"`h(x)=b` 得到被揭示的 Hidden Bits，`b`。"
msgstr ""
"我们把公共参考串看成是一个列表，`y1, y2, y3, ..., yn`，列表中的每一项都是集"
"合 `S` 中的元素。然后通过 Hardcore Predicate 产生 Hidden Bits 中的每一个比特"
"位。但是请注意，这里不能直接通过 `h(y)=b` 来产生 Hidden Bits，因为这样一来 "
"Bob 就能自己算出所有的 Hidden Bits，这违反了上一节的协议。为了保证对 Bob 隐"
"藏，我们需要用公共参考串的原象，也就是 `x1, x2, x3, ..., xn` 来产生 Hidden "
"Bits，`h(x)=b`。Bob 虽然不能自己计算 `b1, b2, b3, ..., bn`，但是一旦得到一个 "
"`x`，他就能检验 `F(x)?=y`来判断是否 `x` 是和公共参考串对应，同时再计算 "
"`h(x)=b` 得到被揭示的 Hidden Bits，`b`。"

#: src/zkp-intro/5/zkp-crs.md:290
msgid ""
"我们可以换一种不太准确，但是更直观的方式来理解，Alice 相当于自己产生一对公私"
"钥。然后Alice 把公共参考串看成是一段「密文」，由于 Alice 有私钥，于是可以对密"
"文进行解密，得到明文，这些明文，对于 Bob 而言就相当于是 Hidden Bits。当 "
"Alice 要「揭示」Hidden Bits 时，就出示相应的明文片段，并且带上公钥，那么 Bob "
"就能通过公钥再次「加密」明文，与公共参考串的密文进行比对，确保 Alice 没有在揭"
"示过程作弊。"
msgstr ""
"我们可以换一种不太准确，但是更直观的方式来理解，Alice 相当于自己产生一对公私"
"钥。然后Alice 把公共参考串看成是一段「密文」，由于 Alice 有私钥，于是可以对密"
"文进行解密，得到明文，这些明文，对于 Bob 而言就相当于是 Hidden Bits。当 "
"Alice 要「揭示」Hidden Bits 时，就出示相应的明文片段，并且带上公钥，那么 Bob "
"就能通过公钥再次「加密」明文，与公共参考串的密文进行比对，确保 Alice 没有在揭"
"示过程作弊。"

#: src/zkp-intro/5/zkp-crs.md:292
msgid "下面是升级后的协议："
msgstr "下面是升级后的协议："

#: src/zkp-intro/5/zkp-crs.md:294
msgid "**对于证明者 Alice**："
msgstr "**对于证明者 Alice**："

#: src/zkp-intro/5/zkp-crs.md:296
msgid "Alice 随机选择一个 Trapdoor Permutation，`(F, h, t)`"
msgstr "Alice 随机选择一个 Trapdoor Permutation，`(F, h, t)`"

#: src/zkp-intro/5/zkp-crs.md:297
msgid "根据公共参考串中的每一个 `yi`，利用陷门反向计算出 `xi = F^(-1)(t, yi)`"
msgstr "根据公共参考串中的每一个 `yi`，利用陷门反向计算出 `xi = F^(-1)(t, yi)`"

#: src/zkp-intro/5/zkp-crs.md:298
msgid "计算 Hidden Bits，`bi=h(xi)`"
msgstr "计算 Hidden Bits，`bi=h(xi)`"

#: src/zkp-intro/5/zkp-crs.md:299
msgid ""
"根据上一节的协议产生证明。假设 Alice 要揭示的 Hidden bits 的位置集合为 `r1,"
"r2,...,rl`，那么 Alice 向 Bob 发送对应位置的 `x`，分别为 `x_r1, x_r2, "
"x_r3, ... x_rl` ，连同`(F, h)`，和证明一起并发给 Bob。"
msgstr ""
"根据上一节的协议产生证明。假设 Alice 要揭示的 Hidden bits 的位置集合为 `r1,"
"r2,...,rl`，那么 Alice 向 Bob 发送对应位置的 `x`，分别为 `x_r1, x_r2, "
"x_r3, ... x_rl` ，连同`(F, h)`，和证明一起并发给 Bob。"

#: src/zkp-intro/5/zkp-crs.md:301
msgid "**对于验证者 Bob**："
msgstr "**对于验证者 Bob**："

#: src/zkp-intro/5/zkp-crs.md:303
msgid "检查 `(F, h)` 是否为一个合法的 Trapdoor Permutation。"
msgstr "检查 `(F, h)` 是否为一个合法的 Trapdoor Permutation。"

#: src/zkp-intro/5/zkp-crs.md:304
msgid ""
"对 `L` 中的每一个元素 `x_r`，计算出被揭示的 Hidden Bits `bi=h(F(x_r))`，然后"
"按照上一节的协议检查证明。"
msgstr ""
"对 `L` 中的每一个元素 `x_r`，计算出被揭示的 Hidden Bits `bi=h(F(x_r))`，然后"
"按照上一节的协议检查证明。"

#: src/zkp-intro/5/zkp-crs.md:306
msgid "这个新协议的「完备性」，请大家自行检查。"
msgstr "这个新协议的「完备性」，请大家自行检查。"

#: src/zkp-intro/5/zkp-crs.md:308
msgid ""
"对于「零知识」，我们需要构造一个「模拟器」Zlice2，它的超能力是修改公共参考"
"串。"
msgstr ""
"对于「零知识」，我们需要构造一个「模拟器」Zlice2，它的超能力是修改公共参考"
"串。"

#: src/zkp-intro/5/zkp-crs.md:310
msgid ""
"模拟器直接调用上一节协议的模拟器 Zlice。得到一个三元组，`(proof, {r}, {b})`"
msgstr ""
"模拟器直接调用上一节协议的模拟器 Zlice。得到一个三元组，`(proof, {r}, {b})`"

#: src/zkp-intro/5/zkp-crs.md:311
msgid ""
"对于每一个公共参考串位置，如果它对应某一个 `r`，模拟器从集合 `S` 中**随机**选"
"择一个 `x_r`，使得 `h(x_r)=b_r`，这里 `b_r`就是 `{b}`中对应 `r` ；然后把 "
"`y_r=F(x_r)` 作为假参考串的一部分。"
msgstr ""
"对于每一个公共参考串位置，如果它对应某一个 `r`，模拟器从集合 `S` 中**随机**选"
"择一个 `x_r`，使得 `h(x_r)=b_r`，这里 `b_r`就是 `{b}`中对应 `r` ；然后把 "
"`y_r=F(x_r)` 作为假参考串的一部分。"

#: src/zkp-intro/5/zkp-crs.md:312
msgid ""
"对于每一个公共参考串位置，如果与 `{r}`无关，那么模拟器随机选一个 `y`即可"
msgstr ""
"对于每一个公共参考串位置，如果与 `{r}`无关，那么模拟器随机选一个 `y`即可"

#: src/zkp-intro/5/zkp-crs.md:313
msgid "模拟器把所有的 `y`拼在一起，得到一个假CRS。"
msgstr "模拟器把所有的 `y`拼在一起，得到一个假CRS。"

#: src/zkp-intro/5/zkp-crs.md:315
msgid ""
"对于「可靠性」，事情变得不那么简单了。因为现在 Alice 有能力挑选 `(F,h,t)`，"
"Alice 可以挑选一个对自己有利，甚至作弊的 `(F, h, t)`，使得她可以控制一次协议"
"运行的 Hidden Bits `{b}`的结果。对于本节升级后的新协议而言，需要重复很多遍，"
"以致于虽然 Alice 可以控制一次协议运行的 Hidden Bits，但是她对其它若干次协议运"
"行的 Hidden Bits 无能为力。换句话说，Alice 无论如何挑选 `(F, h, t)` 都无法完"
"全掌控多次的协议运行。"
msgstr ""
"对于「可靠性」，事情变得不那么简单了。因为现在 Alice 有能力挑选 `(F,h,t)`，"
"Alice 可以挑选一个对自己有利，甚至作弊的 `(F, h, t)`，使得她可以控制一次协议"
"运行的 Hidden Bits `{b}`的结果。对于本节升级后的新协议而言，需要重复很多遍，"
"以致于虽然 Alice 可以控制一次协议运行的 Hidden Bits，但是她对其它若干次协议运"
"行的 Hidden Bits 无能为力。换句话说，Alice 无论如何挑选 `(F, h, t)` 都无法完"
"全掌控多次的协议运行。"

#: src/zkp-intro/5/zkp-crs.md:317
msgid ""
"这个升级变换理论上可以支持任意的 Hidden Bits 模型下的非交互式零知识证明，被称"
"为 FLS Protocol。FLS 变换有很多的好处：首先，这个随机产生的 CRS 可以多次使"
"用，实现所谓的「Multi-Theorem NIZK」；其次，可以实现「Adaptive Soundness」，"
"即 Alice 可以先看到 CRS，然后再选择要证明的内容。最后，这个协议还是"
"「Adaptive Zero-Knowledge」，即 Bob 也可以先看到 CRS，然后再选择要证明的内容"
"给 Alice。"
msgstr ""
"这个升级变换理论上可以支持任意的 Hidden Bits 模型下的非交互式零知识证明，被称"
"为 FLS Protocol。FLS 变换有很多的好处：首先，这个随机产生的 CRS 可以多次使"
"用，实现所谓的「Multi-Theorem NIZK」；其次，可以实现「Adaptive Soundness」，"
"即 Alice 可以先看到 CRS，然后再选择要证明的内容。最后，这个协议还是"
"「Adaptive Zero-Knowledge」，即 Bob 也可以先看到 CRS，然后再选择要证明的内容"
"给 Alice。"

#: src/zkp-intro/5/zkp-crs.md:319
msgid ""
"_注：Adaptive Adversary 是比较符合现实世界的安全情况，比如第二类CCA安全。因"
"为 CRS 是公开的，攻击者可以先分析 CRS，再决定如何发起攻击。_"
msgstr ""
"_注：Adaptive Adversary 是比较符合现实世界的安全情况，比如第二类CCA安全。因"
"为 CRS 是公开的，攻击者可以先分析 CRS，再决定如何发起攻击。_"

#: src/zkp-intro/5/zkp-crs.md:323
msgid ""
"陷门置换 Trapdoor Permutation 最早出现在姚期智老师的论文「Theory and "
"Application of Trapdoor Functions」\\[Yao82\\]中，是公钥密码学的重要基础。在"
"上一节给出的 FLS 变换中，需要一个理想化的 Trapdoor Permutation，所谓的理想化"
"是指，每一个 n-bit 字符串都能唯一变成另一个 n-bit 字符串，并且不会出现「多对"
"一」的映射关系。Alice 需要随机抽样一个 Index，发给 Bob，然后 Bob 要能检查出这"
"个 Index 所对应的 `F()` 是否是一个「完美」的置换。问题来了，怎么 Bob 怎么能在"
"多项式时间内检查出来呢？如果 Bob 不能检查，那么 Alice 就可以抽样一个不完美的 "
"Permutation（比如一个「多对一」的函数），从而可能作弊，破坏「Soundness」这个"
"性质，Bellare 和 Yung 发表在 1996 年的论文最早注意到了这一点，但是并没有完全"
"解决这个问题\\[BY96\\]。"
msgstr ""
"陷门置换 Trapdoor Permutation 最早出现在姚期智老师的论文「Theory and "
"Application of Trapdoor Functions」\\[Yao82\\]中，是公钥密码学的重要基础。在"
"上一节给出的 FLS 变换中，需要一个理想化的 Trapdoor Permutation，所谓的理想化"
"是指，每一个 n-bit 字符串都能唯一变成另一个 n-bit 字符串，并且不会出现「多对"
"一」的映射关系。Alice 需要随机抽样一个 Index，发给 Bob，然后 Bob 要能检查出这"
"个 Index 所对应的 `F()` 是否是一个「完美」的置换。问题来了，怎么 Bob 怎么能在"
"多项式时间内检查出来呢？如果 Bob 不能检查，那么 Alice 就可以抽样一个不完美的 "
"Permutation（比如一个「多对一」的函数），从而可能作弊，破坏「Soundness」这个"
"性质，Bellare 和 Yung 发表在 1996 年的论文最早注意到了这一点，但是并没有完全"
"解决这个问题\\[BY96\\]。"

#: src/zkp-intro/5/zkp-crs.md:325
msgid ""
"如何找到一个桥梁，能够将 Trapdoor Permutation 合适地抽象出来，同时能够对接到"
"密码学工具的实现上，是一个及其有挑战性的工作。随后各路密码学家（包括 Oded "
"Goldreich） 在这方面研究了很长时间，发表了许许多多的论文 ，各种不同类型的 "
"Trapdoor Permutation 被定义、被研究，但是仍然不能让人满意。直到最近（2018年）"
"一个工作是 Ran Canetti 与 Amit Lichtenberg 提出了 Certifiable Injective "
"Trapdoor Function 这样一个新类型\\[RL18\\]，并证明了这种 Trapdoor "
"Permutation 终于能满足 FLS 变换要求。但这是不是故事的结束呢？理论密码学家们估"
"计不会停下探索的脚步。"
msgstr ""
"如何找到一个桥梁，能够将 Trapdoor Permutation 合适地抽象出来，同时能够对接到"
"密码学工具的实现上，是一个及其有挑战性的工作。随后各路密码学家（包括 Oded "
"Goldreich） 在这方面研究了很长时间，发表了许许多多的论文 ，各种不同类型的 "
"Trapdoor Permutation 被定义、被研究，但是仍然不能让人满意。直到最近（2018年）"
"一个工作是 Ran Canetti 与 Amit Lichtenberg 提出了 Certifiable Injective "
"Trapdoor Function 这样一个新类型\\[RL18\\]，并证明了这种 Trapdoor "
"Permutation 终于能满足 FLS 变换要求。但这是不是故事的结束呢？理论密码学家们估"
"计不会停下探索的脚步。"

#: src/zkp-intro/5/zkp-crs.md:327
msgid ""
"除了基于 Trapdoor Permutation 的 FLS 变换 ，还有各式各样的解决方案来升级 "
"Hidden Bits Model，比如采用 Invariant Signature\\[BG90\\]，或 Verifiable "
"Random Generator \\[DN00\\] 来实现 Hidden Bits 的变换，或者弱可验证随机函数 "
"\\[BGRV09\\]， 还有一种叫做 publicly-verifiable trapdoor predicates 的方案"
"\\[CHK03\\]。"
msgstr ""
"除了基于 Trapdoor Permutation 的 FLS 变换 ，还有各式各样的解决方案来升级 "
"Hidden Bits Model，比如采用 Invariant Signature\\[BG90\\]，或 Verifiable "
"Random Generator \\[DN00\\] 来实现 Hidden Bits 的变换，或者弱可验证随机函数 "
"\\[BGRV09\\]， 还有一种叫做 publicly-verifiable trapdoor predicates 的方案"
"\\[CHK03\\]。"

#: src/zkp-intro/5/zkp-crs.md:329
msgid ""
"三十年来，密码学家们发明的 NIZK 方案有很多，但 Hidden Bits 方法是目前已知唯一"
"的办法，(1) 基于「一致性分布」的共享 CRS，(2) 实现任意 NP 语言的 NIZK Proofs"
"（Not Arguments!）。"
msgstr ""
"三十年来，密码学家们发明的 NIZK 方案有很多，但 Hidden Bits 方法是目前已知唯一"
"的办法，(1) 基于「一致性分布」的共享 CRS，(2) 实现任意 NP 语言的 NIZK Proofs"
"（Not Arguments!）。"

#: src/zkp-intro/5/zkp-crs.md:331
msgid "NIZK Proofs  与 NIZK Arguments"
msgstr "NIZK Proofs  与 NIZK Arguments"

#: src/zkp-intro/5/zkp-crs.md:333
msgid ""
"在本文中，我们构造的 NIZK 「证明」系统的可靠性属于「Statistical Soundness」，"
"而零知识则属于「Computational Zero-Knowledge」。这意味着什么呢？这意味着，不"
"管证明者 Alice 的算力有多强大（甚至超多项式），Alice 仍然无法作弊。但是，如果"
"验证者 Bob 拥有超强的计算能力，那么是存在这种可能性：Bob 从证明中抽取到有价值"
"的「知识」。"
msgstr ""
"在本文中，我们构造的 NIZK 「证明」系统的可靠性属于「Statistical Soundness」，"
"而零知识则属于「Computational Zero-Knowledge」。这意味着什么呢？这意味着，不"
"管证明者 Alice 的算力有多强大（甚至超多项式），Alice 仍然无法作弊。但是，如果"
"验证者 Bob 拥有超强的计算能力，那么是存在这种可能性：Bob 从证明中抽取到有价值"
"的「知识」。"

#: src/zkp-intro/5/zkp-crs.md:335
msgid "这又意味着什么？"
msgstr "这又意味着什么？"

#: src/zkp-intro/5/zkp-crs.md:337
msgid ""
"这意味着，对于 NIZK Proofs 来说，它的长度肯定要比「知识」长，知识即 `NP` 问题"
"中的 `witness`。只要 Bob 算力够强，他就可以把证明解密。对于「抽取器」而言，它"
"也需要在没有交互的情况下抽取 `witness` 。证明最短的 NIZK Proofs 当属 Greg "
"Gentry 等人采用「全同态加密」技术构造的 NIZK 方案了 \\[GGI+14\\]，证明长度只"
"是稍稍大于 witness 的长度。"
msgstr ""
"这意味着，对于 NIZK Proofs 来说，它的长度肯定要比「知识」长，知识即 `NP` 问题"
"中的 `witness`。只要 Bob 算力够强，他就可以把证明解密。对于「抽取器」而言，它"
"也需要在没有交互的情况下抽取 `witness` 。证明最短的 NIZK Proofs 当属 Greg "
"Gentry 等人采用「全同态加密」技术构造的 NIZK 方案了 \\[GGI+14\\]，证明长度只"
"是稍稍大于 witness 的长度。"

#: src/zkp-intro/5/zkp-crs.md:339
msgid "那能不能构造证明尺寸小于 witness 的 NIZK 呢？答案是 YES！"
msgstr "那能不能构造证明尺寸小于 witness 的 NIZK 呢？答案是 YES！"

#: src/zkp-intro/5/zkp-crs.md:341
msgid ""
"还有一类的 NIZK 系统被称为 NIZK Arguments：它们的可靠性是「Computational "
"Soundness」，零知识属于「Perfect Zero-Knowledge」或者「Statistical Zero-"
"Knowledge」。这说明，Alice 如果算力超强，那么她是有作弊空间的，但是因为现实世"
"界中，我们可以通过加大安全参数（Security Parameters）来极大地降低 Alice 作弊"
"的可能性，但是能实现非常极致的零知识特性。由于弱化了可靠性，那么我们就可以继"
"续压缩证明的尺寸。"
msgstr ""
"还有一类的 NIZK 系统被称为 NIZK Arguments：它们的可靠性是「Computational "
"Soundness」，零知识属于「Perfect Zero-Knowledge」或者「Statistical Zero-"
"Knowledge」。这说明，Alice 如果算力超强，那么她是有作弊空间的，但是因为现实世"
"界中，我们可以通过加大安全参数（Security Parameters）来极大地降低 Alice 作弊"
"的可能性，但是能实现非常极致的零知识特性。由于弱化了可靠性，那么我们就可以继"
"续压缩证明的尺寸。"

#: src/zkp-intro/5/zkp-crs.md:343
msgid ""
"_注：在本系列中，我们并不刻意区分「证明」与「论证」这两个词。如果需要指明 "
"Arguments 而非 Proofs，会专门强调。_"
msgstr ""
"_注：在本系列中，我们并不刻意区分「证明」与「论证」这两个词。如果需要指明 "
"Arguments 而非 Proofs，会专门强调。_"

#: src/zkp-intro/5/zkp-crs.md:345
msgid ""
"假如说我们要公开一个 NIZK 证明到 Github上，假如过了一百年以后，Github 网站还"
"在，而未来计算机的计算能力已经有了质的飞跃，这时候，一个 NIZK Proof 可能会被"
"算力攻破，泄露知识，而 NIZK Argument 则很大可能性上还保持安全性。"
msgstr ""
"假如说我们要公开一个 NIZK 证明到 Github上，假如过了一百年以后，Github 网站还"
"在，而未来计算机的计算能力已经有了质的飞跃，这时候，一个 NIZK Proof 可能会被"
"算力攻破，泄露知识，而 NIZK Argument 则很大可能性上还保持安全性。"

#: src/zkp-intro/5/zkp-crs.md:347
msgid "现在流行的热词 —— zkSNARK 中的 `AR`正是指代 Argument。"
msgstr "现在流行的热词 —— zkSNARK 中的 `AR`正是指代 Argument。"

#: src/zkp-intro/5/zkp-crs.md:349
msgid ""
"NIZK Argument 可以实现 `O(1)` 常数级长度的证明，即与 `witness` 的长度无关。然"
"而这需要隐藏更多的秘密到 CRS 中。"
msgstr ""
"NIZK Argument 可以实现 `O(1)` 常数级长度的证明，即与 `witness` 的长度无关。然"
"而这需要隐藏更多的秘密到 CRS 中。"

#: src/zkp-intro/5/zkp-crs.md:353
msgid ""
"1956 年，哥德尔在一封寄给冯诺依曼的信中提到了一个著名的问题，「P 是否等于 "
"NP」。后来，这个问题被 Clay 研究所列为七个千禧年难题之一，悬赏百万美金。"
msgstr ""
"1956 年，哥德尔在一封寄给冯诺依曼的信中提到了一个著名的问题，「P 是否等于 "
"NP」。后来，这个问题被 Clay 研究所列为七个千禧年难题之一，悬赏百万美金。"

#: src/zkp-intro/5/zkp-crs.md:355
msgid ""
"零知识证明系统正是为了保护 witness 不泄露的前提下，实现 `NP` 问题的验证。那如"
"果一旦证明了「P == NP」，这会意味着什么？这意味着 witness 不再有多大意义了，"
"反正一个图灵机也可以在多项式时间内找到 witness。零知识证明试图保护的 witness "
"也变得徒劳无益。"
msgstr ""
"零知识证明系统正是为了保护 witness 不泄露的前提下，实现 `NP` 问题的验证。那如"
"果一旦证明了「P == NP」，这会意味着什么？这意味着 witness 不再有多大意义了，"
"反正一个图灵机也可以在多项式时间内找到 witness。零知识证明试图保护的 witness "
"也变得徒劳无益。"

#: src/zkp-intro/5/zkp-crs.md:357
msgid ""
"事实上，如果「P == NP」，现有的公钥密码学、对称加密 AES 与 SM4、哈希算法所依"
"赖的难解问题都可能坍塌，我们可能很难保存秘密。不仅如此，"
msgstr ""
"事实上，如果「P == NP」，现有的公钥密码学、对称加密 AES 与 SM4、哈希算法所依"
"赖的难解问题都可能坍塌，我们可能很难保存秘密。不仅如此，"

#: src/zkp-intro/5/zkp-crs.md:359
msgid ""
"如果 P == NP，我们所处的世界将会变得非常不一样。「Creative Leaps」将不再有价"
"值，求解问题与验证问题之间的鸿沟不复存在。每个能欣赏交响乐的人都会成为莫扎"
"特，每个会推理的人都会变成高斯，每个能判断投资好坏的人都会变成巴菲特。从达尔"
"文进化论的观点出发：如果这就是我们存在的宇宙，为什么我们还没有进化得可以充分"
"利用这个好处？—— Scott Aaronson (2006)"
msgstr ""
"如果 P == NP，我们所处的世界将会变得非常不一样。「Creative Leaps」将不再有价"
"值，求解问题与验证问题之间的鸿沟不复存在。每个能欣赏交响乐的人都会成为莫扎"
"特，每个会推理的人都会变成高斯，每个能判断投资好坏的人都会变成巴菲特。从达尔"
"文进化论的观点出发：如果这就是我们存在的宇宙，为什么我们还没有进化得可以充分"
"利用这个好处？—— Scott Aaronson (2006)"

#: src/zkp-intro/5/zkp-crs.md:361
msgid ""
"对于数学也一样，数学证明的验证过程也是多项式复杂度的，如果「P == NP」，那么也"
"就存在着多项式时间寻找证明的算法（如果证明存在）。这意味着哥德巴赫猜想、黎曼"
"猜想将有可能得到证明，难怪 Lance Fortnow 在博客\\[For04\\]里这么说："
msgstr ""
"对于数学也一样，数学证明的验证过程也是多项式复杂度的，如果「P == NP」，那么也"
"就存在着多项式时间寻找证明的算法（如果证明存在）。这意味着哥德巴赫猜想、黎曼"
"猜想将有可能得到证明，难怪 Lance Fortnow 在博客\\[For04\\]里这么说："

#: src/zkp-intro/5/zkp-crs.md:363
msgid ""
"A person who proves P == NP would walk home from the Clay Institute not with "
"one million-dollar check but with seven. 如果谁能证明 P = NP，那么他不会只拿"
"着一张百万美元支票回家，而是七张。  —— Lance Fortnow (2004)"
msgstr ""
"A person who proves P == NP would walk home from the Clay Institute not with "
"one million-dollar check but with seven. 如果谁能证明 P = NP，那么他不会只拿"
"着一张百万美元支票回家，而是七张。  —— Lance Fortnow (2004)"

#: src/zkp-intro/5/zkp-crs.md:365
msgid ""
"2002年的调查显示，61% 的计算机科学家相信「P != NP」，而十年后，这个比例上升到"
"了 83%\\[Wil12\\]。 而我是被 Scott Aaronson 的如下论断说服的："
msgstr ""
"2002年的调查显示，61% 的计算机科学家相信「P != NP」，而十年后，这个比例上升到"
"了 83%\\[Wil12\\]。 而我是被 Scott Aaronson 的如下论断说服的："

#: src/zkp-intro/5/zkp-crs.md:367
msgid ""
"自指论证：如果 P = NP 是事实，那么这个证明会比较容易被发现；但是如果 P != "
"NP，那么这个证明会比较难发现。所以相信 P != NP 看起来会让 **数学现实** 更一致"
"一些。—— Scott Aaronson (2006) "
msgstr ""
"自指论证：如果 P = NP 是事实，那么这个证明会比较容易被发现；但是如果 P != "
"NP，那么这个证明会比较难发现。所以相信 P != NP 看起来会让 **数学现实** 更一致"
"一些。—— Scott Aaronson (2006) "

#: src/zkp-intro/5/zkp-crs.md:369
msgid ""
"尽管是如此不情愿，如果我们真的生活在一个没有秘密的世界，那会是什么样子？「环"
"形监狱 Panopticon」是 18 世纪英国哲学家 Jeremy Bentham 提出的一个惊悚概念。囚"
"徒们被中心全天候监控，没有任何隐私可言，而且他们对自己是否处于被监控状态也无"
"从得知。这个无比悲观的论调让人浑身不适，但很多人认为，这可能是两百多年前对未"
"来网络数字时代的一则精准寓言。"
msgstr ""
"尽管是如此不情愿，如果我们真的生活在一个没有秘密的世界，那会是什么样子？「环"
"形监狱 Panopticon」是 18 世纪英国哲学家 Jeremy Bentham 提出的一个惊悚概念。囚"
"徒们被中心全天候监控，没有任何隐私可言，而且他们对自己是否处于被监控状态也无"
"从得知。这个无比悲观的论调让人浑身不适，但很多人认为，这可能是两百多年前对未"
"来网络数字时代的一则精准寓言。"

#: src/zkp-intro/5/zkp-crs.md:371
msgid "![](img/panopticon.png)"
msgstr "![](img/panopticon.png)"

#: src/zkp-intro/5/zkp-crs.md:373
msgid ""
"从『Billy Budd』，卡夫卡的『The Trial』，到奥威尔的『1984』，到著名黑客 "
"Kevin Mitnick 写的超级大卖书『隐形的艺术』（教你如何在大数据时代保护自己的信"
"息），似乎，危机四伏，风险不断累积，对末日世界的想象给了作家们很好的素材  …… "
msgstr ""
"从『Billy Budd』，卡夫卡的『The Trial』，到奥威尔的『1984』，到著名黑客 "
"Kevin Mitnick 写的超级大卖书『隐形的艺术』（教你如何在大数据时代保护自己的信"
"息），似乎，危机四伏，风险不断累积，对末日世界的想象给了作家们很好的素材  …… "

#: src/zkp-intro/5/zkp-crs.md:375
msgid ""
"偶尔无意中看到了一本有趣的漫画『The Private Eye』，它描述了一个劫后余生的后现"
"代场景：在未来，我们的所有信息数据都存放在云上，然后突然有一天，这个数据云"
"「爆炸」了，不知道是什么原因（可能是谁不小心打开了潘多拉的魔盒，找到了 P == "
"NP 的构造性证明），反正所有的信息，包括每个人最阴暗的过去，都不再成为秘密；所"
"有的数字化的资产都被抹掉，所有的在线知识库永久丢失；每个人的言行、账单、邮"
"件、聊天消息、银行卡密码、中学考卷、GPS位置信息，写了一半的日记、删除的照片、"
"上网记录，这些信息都将暴露给同事、邻居、 朋友、亲人、甚至任何一个好奇的人。"
msgstr ""
"偶尔无意中看到了一本有趣的漫画『The Private Eye』，它描述了一个劫后余生的后现"
"代场景：在未来，我们的所有信息数据都存放在云上，然后突然有一天，这个数据云"
"「爆炸」了，不知道是什么原因（可能是谁不小心打开了潘多拉的魔盒，找到了 P == "
"NP 的构造性证明），反正所有的信息，包括每个人最阴暗的过去，都不再成为秘密；所"
"有的数字化的资产都被抹掉，所有的在线知识库永久丢失；每个人的言行、账单、邮"
"件、聊天消息、银行卡密码、中学考卷、GPS位置信息，写了一半的日记、删除的照片、"
"上网记录，这些信息都将暴露给同事、邻居、 朋友、亲人、甚至任何一个好奇的人。"

#: src/zkp-intro/5/zkp-crs.md:377
msgid "![](img/private_eye.png)"
msgstr "![](img/private_eye.png)"

#: src/zkp-intro/5/zkp-crs.md:379
msgid ""
"每个人都无地自容，惶惶不可终日，然后逐渐地，大家都选择隐藏自己，人们出门都要"
"戴上面具，以小心翼翼地保护自己的身份，甚至一个人可以选择使用多个身份，国家法"
"律规定任何偷窥行为都将被严惩，获取信息成为了一种至少无上的权力，照相机需要被"
"严格管控，互联网不再存在，人们通讯又回到了电话亭时代 …… "
msgstr ""
"每个人都无地自容，惶惶不可终日，然后逐渐地，大家都选择隐藏自己，人们出门都要"
"戴上面具，以小心翼翼地保护自己的身份，甚至一个人可以选择使用多个身份，国家法"
"律规定任何偷窥行为都将被严惩，获取信息成为了一种至少无上的权力，照相机需要被"
"严格管控，互联网不再存在，人们通讯又回到了电话亭时代 …… "

#: src/zkp-intro/5/zkp-crs.md:381
msgid "这会是人类的终极命运么？"
msgstr "这会是人类的终极命运么？"

#: src/zkp-intro/5/zkp-crs.md:385
msgid ""
"本文开头提到了「隐藏随机性」并不是必要的，我们来回想下 Hidden Bits 模型。这"
"些 Hidden Bits 并没有对 Prover 隐藏，而是敞开了让 Prover 知道，但是由于 "
"Hidden Bits 是「一致性随机分布」的字符串， 所以即使让 Prover 知道了，他仍然逃"
"不过随机挑战的火力。然而在流行的 zkSNARK 方案中，并没有采用「一致性随机分布」"
"的 CRS，而是一组结构化的随机数。不管怎样，用 CRS 来构建「信任根基」的秘密，就"
"是藏在其中的「秘密」。"
msgstr ""
"本文开头提到了「隐藏随机性」并不是必要的，我们来回想下 Hidden Bits 模型。这"
"些 Hidden Bits 并没有对 Prover 隐藏，而是敞开了让 Prover 知道，但是由于 "
"Hidden Bits 是「一致性随机分布」的字符串， 所以即使让 Prover 知道了，他仍然逃"
"不过随机挑战的火力。然而在流行的 zkSNARK 方案中，并没有采用「一致性随机分布」"
"的 CRS，而是一组结构化的随机数。不管怎样，用 CRS 来构建「信任根基」的秘密，就"
"是藏在其中的「秘密」。"

#: src/zkp-intro/5/zkp-crs.md:387
msgid ""
"这符合直觉，保守「秘密」也是一种信任。因为 Alice 不知道 CRS 中隐藏的秘密后"
"门，所以无法作弊。同样，Bob 不知道 CRS 中的秘密，也就没办法获得「知识」。同"
"样，人与人之间的协作既要建立在公开透明的基础上，也要保守秘密。"
msgstr ""
"这符合直觉，保守「秘密」也是一种信任。因为 Alice 不知道 CRS 中隐藏的秘密后"
"门，所以无法作弊。同样，Bob 不知道 CRS 中的秘密，也就没办法获得「知识」。同"
"样，人与人之间的协作既要建立在公开透明的基础上，也要保守秘密。"

#: src/zkp-intro/5/zkp-crs.md:389
msgid ""
"All human beings have three lives: public, private, and secret. 每个人都有三"
"种生活，公开的，私人的，以及秘密的。—— Gabriel García Márqueel "
msgstr ""
"All human beings have three lives: public, private, and secret. 每个人都有三"
"种生活，公开的，私人的，以及秘密的。—— Gabriel García Márqueel "

#: src/zkp-intro/5/zkp-crs.md:391
msgid ""
"_致谢：感谢陈宇，丁晟超，张宇鹏，胡红钢，刘巍然，何德彪，万志国等老师的专业建"
"议和指正，感谢安比实验室小伙伴（p0n1, even, valuka, Vawheter, yghu, mr）的修"
"改建议。本文内容不代表他们观点。_"
msgstr ""
"_致谢：感谢陈宇，丁晟超，张宇鹏，胡红钢，刘巍然，何德彪，万志国等老师的专业建"
"议和指正，感谢安比实验室小伙伴（p0n1, even, valuka, Vawheter, yghu, mr）的修"
"改建议。本文内容不代表他们观点。_"

#: src/zkp-intro/5/zkp-crs.md:393
msgid ""
"最后附上漫画书的链接：[http://panelsyndicate.com/comics/tpeye](http://"
"panelsyndicate.com/comics/tpeye) 作者甚至把创作过程的邮件和草图都放了出来，大"
"家可以体验一下窥视制作过程的快感。"
msgstr ""
"最后附上漫画书的链接：[http://panelsyndicate.com/comics/tpeye](http://"
"panelsyndicate.com/comics/tpeye) 作者甚至把创作过程的邮件和草图都放了出来，大"
"家可以体验一下窥视制作过程的快感。"

#: src/zkp-intro/5/zkp-crs.md:397
msgid ""
"\\[Aar06\\] Aaronson, Scott. _Reasons to believe_, 2006. https://www."
"scottaaronson.com/blog/?p=122"
msgstr ""
"\\[Aar06\\] Aaronson, Scott. _Reasons to believe_, 2006. https://www."
"scottaaronson.com/blog/?p=122"

#: src/zkp-intro/5/zkp-crs.md:398
msgid ""
"\\[BFM88\\] Blum, Manuel, Paul Feldman, and Silvio Micali. \"Non-interactive "
"zero-knowledge and its applications.\" STOC'88. 1988."
msgstr ""
"\\[BFM88\\] Blum, Manuel, Paul Feldman, and Silvio Micali. \"Non-interactive "
"zero-knowledge and its applications.\" STOC'88. 1988."

#: src/zkp-intro/5/zkp-crs.md:399
msgid ""
"\\[BG90\\] Bellare, Mihir, and Shafi Goldwasser. \"New paradigms for digital "
"signatures and message authentication based on non-interactive zero "
"knowledge proofs.\" _Conference on the Theory and Application of "
"Cryptology_. Springer, New York, NY, 1989."
msgstr ""
"\\[BG90\\] Bellare, Mihir, and Shafi Goldwasser. \"New paradigms for digital "
"signatures and message authentication based on non-interactive zero "
"knowledge proofs.\" _Conference on the Theory and Application of "
"Cryptology_. Springer, New York, NY, 1989."

#: src/zkp-intro/5/zkp-crs.md:400
msgid ""
"\\[BGN05\\] Boneh, Dan, Eu-Jin Goh, and Kobbi Nissim. \"Evaluating 2-DNF "
"formulas on ciphertexts.\" _Theory of Cryptography Conference_. Springer, "
"Berlin, Heidelberg, 2005."
msgstr ""
"\\[BGN05\\] Boneh, Dan, Eu-Jin Goh, and Kobbi Nissim. \"Evaluating 2-DNF "
"formulas on ciphertexts.\" _Theory of Cryptography Conference_. Springer, "
"Berlin, Heidelberg, 2005."

#: src/zkp-intro/5/zkp-crs.md:401
msgid ""
"\\[BGRV09\\] Brakerski, Zvika, Shafi Goldwasser, Guy N. Rothblum, and Vinod "
"Vaikuntanathan. \"Weak verifiable random functions.\" In _Theory of "
"Cryptography Conference_, pp. 558-576. Springer, Berlin, Heidelberg, 2009."
msgstr ""
"\\[BGRV09\\] Brakerski, Zvika, Shafi Goldwasser, Guy N. Rothblum, and Vinod "
"Vaikuntanathan. \"Weak verifiable random functions.\" In _Theory of "
"Cryptography Conference_, pp. 558-576. Springer, Berlin, Heidelberg, 2009."

#: src/zkp-intro/5/zkp-crs.md:402
msgid ""
"\\[BY96\\] Bellare, Mihir, and Moti Yung. \"Certifying permutations: "
"Noninteractive zero-knowledge based on any trapdoor permutation.\" _Journal "
"of Cryptology_ 9.3 (1996): 149-166."
msgstr ""
"\\[BY96\\] Bellare, Mihir, and Moti Yung. \"Certifying permutations: "
"Noninteractive zero-knowledge based on any trapdoor permutation.\" _Journal "
"of Cryptology_ 9.3 (1996): 149-166."

#: src/zkp-intro/5/zkp-crs.md:403
msgid ""
"\\[CHK03\\] Canetti, Ran, Shai Halevi, and Jonathan Katz. \"A forward-secure "
"public-key encryption scheme.\" _International Conference on the Theory and "
"Applications of Cryptographic Techniques_. Springer, Berlin, Heidelberg, "
"2003."
msgstr ""
"\\[CHK03\\] Canetti, Ran, Shai Halevi, and Jonathan Katz. \"A forward-secure "
"public-key encryption scheme.\" _International Conference on the Theory and "
"Applications of Cryptographic Techniques_. Springer, Berlin, Heidelberg, "
"2003."

#: src/zkp-intro/5/zkp-crs.md:404
msgid ""
"\\[CHMMVW19\\] Chiesa, Alessandro, et al. _Marlin: Preprocessing zksnarks "
"with universal and updatable srs_. Cryptology ePrint Archive, Report "
"2019/1047, 2019, https://eprint.iacr.org/2019/1047, 2019."
msgstr ""
"\\[CHMMVW19\\] Chiesa, Alessandro, et al. _Marlin: Preprocessing zksnarks "
"with universal and updatable srs_. Cryptology ePrint Archive, Report "
"2019/1047, 2019, https://eprint.iacr.org/2019/1047, 2019."

#: src/zkp-intro/5/zkp-crs.md:405
msgid ""
"\\[DN00\\] Dwork, Cynthia, and Moni Naor. \"Zaps and their applications.\" "
"_Proceedings 41st Annual Symposium on Foundations of Computer Science_. "
"IEEE, 2000."
msgstr ""
"\\[DN00\\] Dwork, Cynthia, and Moni Naor. \"Zaps and their applications.\" "
"_Proceedings 41st Annual Symposium on Foundations of Computer Science_. "
"IEEE, 2000."

#: src/zkp-intro/5/zkp-crs.md:406
msgid ""
"\\[FLS90\\] Feige, Uriel, Dror Lapidot, and Adi Shamir. \"Multiple non-"
"interactive zero knowledge proofs based on a single random string.\" "
"_Proceedings \\[1990\\] 31st Annual Symposium on Foundations of Computer "
"Science_. IEEE, 1990."
msgstr ""
"\\[FLS90\\] Feige, Uriel, Dror Lapidot, and Adi Shamir. \"Multiple non-"
"interactive zero knowledge proofs based on a single random string.\" "
"_Proceedings \\[1990\\] 31st Annual Symposium on Foundations of Computer "
"Science_. IEEE, 1990."

#: src/zkp-intro/5/zkp-crs.md:407
msgid ""
"\\[For04\\] Fortnow, Lance. \"What if P = NP?\". 2004. https://blog."
"computationalcomplexity.org/2004/05/what-if-p-np.html"
msgstr ""
"\\[For04\\] Fortnow, Lance. \"What if P = NP?\". 2004. https://blog."
"computationalcomplexity.org/2004/05/what-if-p-np.html"

#: src/zkp-intro/5/zkp-crs.md:408
msgid ""
"\\[For09\\] Fortnow, Lance. \"The status of the P versus NP problem.\" "
"_Communications of the ACM_ 52.9 (2009): 78-86."
msgstr ""
"\\[For09\\] Fortnow, Lance. \"The status of the P versus NP problem.\" "
"_Communications of the ACM_ 52.9 (2009): 78-86."

#: src/zkp-intro/5/zkp-crs.md:409
msgid ""
"\\[Groth10a\\] Groth, Jens. \"Short non-interactive zero-knowledge proofs.\" "
"_International Conference on the Theory and Application of Cryptology and "
"Information Security_. Springer, Berlin, Heidelberg, 2010."
msgstr ""
"\\[Groth10a\\] Groth, Jens. \"Short non-interactive zero-knowledge proofs.\" "
"_International Conference on the Theory and Application of Cryptology and "
"Information Security_. Springer, Berlin, Heidelberg, 2010."

#: src/zkp-intro/5/zkp-crs.md:410
msgid ""
"\\[Groth10b\\] Groth, Jens. \"Short pairing-based non-interactive zero-"
"knowledge arguments.\" _International Conference on the Theory and "
"Application of Cryptology and Information Security_. Springer, Berlin, "
"Heidelberg, 2010."
msgstr ""
"\\[Groth10b\\] Groth, Jens. \"Short pairing-based non-interactive zero-"
"knowledge arguments.\" _International Conference on the Theory and "
"Application of Cryptology and Information Security_. Springer, Berlin, "
"Heidelberg, 2010."

#: src/zkp-intro/5/zkp-crs.md:411
msgid ""
"\\[GOS06\\] Groth, Jens, Rafail Ostrovsky, and Amit Sahai. \"Perfect non-"
"interactive zero knowledge for NP.\" _Annual International Conference on the "
"Theory and Applications of Cryptographic Techniques_. Springer, Berlin, "
"Heidelberg, 2006."
msgstr ""
"\\[GOS06\\] Groth, Jens, Rafail Ostrovsky, and Amit Sahai. \"Perfect non-"
"interactive zero knowledge for NP.\" _Annual International Conference on the "
"Theory and Applications of Cryptographic Techniques_. Springer, Berlin, "
"Heidelberg, 2006."

#: src/zkp-intro/5/zkp-crs.md:412
msgid ""
"\\[GWC19\\] Gabizon, Ariel, Zachary J. Williamson, and Oana Ciobotaru. "
"_PLONK: Permutations over Lagrange-bases for Oecumenical Noninteractive "
"arguments of Knowledge_. Cryptology ePrint Archive, Report 2019/953, 2019."
msgstr ""
"\\[GWC19\\] Gabizon, Ariel, Zachary J. Williamson, and Oana Ciobotaru. "
"_PLONK: Permutations over Lagrange-bases for Oecumenical Noninteractive "
"arguments of Knowledge_. Cryptology ePrint Archive, Report 2019/953, 2019."

#: src/zkp-intro/5/zkp-crs.md:413
msgid ""
"\\[KP98\\] Kilian, Joe, and Erez Petrank. \"An efficient noninteractive zero-"
"knowledge proof system for NP with general assumptions.\" _Journal of "
"Cryptology_ 11.1 (1998): 1-27."
msgstr ""
"\\[KP98\\] Kilian, Joe, and Erez Petrank. \"An efficient noninteractive zero-"
"knowledge proof system for NP with general assumptions.\" _Journal of "
"Cryptology_ 11.1 (1998): 1-27."

#: src/zkp-intro/5/zkp-crs.md:414
msgid ""
"\\[MBK+19\\] Maller, Mary, et al. \"Sonic: Zero-Knowledge SNARKs from Linear-"
"Size Universal and Updateable Structured Reference Strings.\" _IACR "
"Cryptology ePrint Archive_ 2019 (2019): 99."
msgstr ""
"\\[MBK+19\\] Maller, Mary, et al. \"Sonic: Zero-Knowledge SNARKs from Linear-"
"Size Universal and Updateable Structured Reference Strings.\" _IACR "
"Cryptology ePrint Archive_ 2019 (2019): 99."

#: src/zkp-intro/5/zkp-crs.md:415
msgid ""
"\\[RL18\\] Ran Canetti and Amit Lichtenberg. \"Certifying trapdoor "
"permutations, revisited.\" _Theory of Cryptography Conference_. Springer, "
"Cham, 2018."
msgstr ""
"\\[RL18\\] Ran Canetti and Amit Lichtenberg. \"Certifying trapdoor "
"permutations, revisited.\" _Theory of Cryptography Conference_. Springer, "
"Cham, 2018."

#: src/zkp-intro/5/zkp-crs.md:416
msgid ""
"\\[Wil12\\]Gasarch, William I. \"Guest Column: The Third P=? NP Poll.\" _ACM "
"SIGACT News_ 50.1 (2019): 38-59."
msgstr ""
"\\[Wil12\\]Gasarch, William I. \"Guest Column: The Third P=? NP Poll.\" _ACM "
"SIGACT News_ 50.1 (2019): 38-59."

#: src/zkp-intro/5/zkp-crs.md:417
msgid ""
"\\[Yao82\\] Yao, Andrew C. \"Theory and application of trapdoor functions.\" "
"_23rd Annual Symposium on Foundations of Computer Science (sfcs 1982)_. "
"IEEE, 1982."
msgstr ""
"\\[Yao82\\] Yao, Andrew C. \"Theory and application of trapdoor functions.\" "
"_23rd Annual Symposium on Foundations of Computer Science (sfcs 1982)_. "
"IEEE, 1982."

#: src/plonk-intro-cn/plonk-intro.md:3
msgid "[（一）：Plonkish Arithmetization](./plonk-arithmetization.md)"
msgstr "[（一）：Plonkish Arithmetization](./plonk-arithmetization.md)"

#: src/plonk-intro-cn/plonk-intro.md:4
msgid "[（二）：多项式编码](./plonk-lagrange-basis.md)"
msgstr "[（二）：多项式编码](./plonk-lagrange-basis.md)"

#: src/plonk-intro-cn/plonk-intro.md:5
msgid "[（三）：置换证明](./plonk-permutation.md)"
msgstr "[（三）：置换证明](./plonk-permutation.md)"

#: src/plonk-intro-cn/plonk-intro.md:6
msgid "[（四）：算术约束与拷贝约束](./plonk-constraints.md)"
msgstr "[（四）：算术约束与拷贝约束](./plonk-constraints.md)"

#: src/plonk-intro-cn/plonk-intro.md:7
msgid "[（五）：多项式承诺](./plonk-polycom.md)"
msgstr "[（五）：多项式承诺](./plonk-polycom.md)"

#: src/plonk-intro-cn/plonk-intro.md:8
msgid "[（六）：实现  Zero Knowledge](./plonk-randomizing.md)"
msgstr "[（六）：实现  Zero Knowledge](./plonk-randomizing.md)"

#: src/plonk-intro-cn/plonk-intro.md:9
msgid "[（七）：Lookup Gate](./plonk-lookup.md)"
msgstr "[（七）：Lookup Gate](./plonk-lookup.md)"

#: src/plonk-intro-cn/plonk-arithmetization.md:3
msgid "理解 PLONK（一）：Plonkish Arithmetization"
msgstr "理解 PLONK（一）：Plonkish Arithmetization"

#: src/plonk-intro-cn/plonk-arithmetization.md:6
msgid ""
"算术化是指把计算转换成数学对象，然后进行零知识证明。 Plonkish 算术化是 Plonk "
"证明系统特有的算术化方法，在 Plonkish 出现之前，主流的电路表达形式为 R1CS，"
"被 Pinocchio，Groth16，Bulletproofs 等广泛采用。2019 年 Plonk 方案提出了一种"
"看似复古的电路编码方式，但由于 Plonk 方案将多项式的编码应用到了极致，它不再局"
"限于算术电路中的「加法门」和「乘法门」，而是可以支持更灵活的「自定义门」与"
"「查表门」。"
msgstr ""
"算术化是指把计算转换成数学对象，然后进行零知识证明。 Plonkish 算术化是 Plonk "
"证明系统特有的算术化方法，在 Plonkish 出现之前，主流的电路表达形式为 R1CS，"
"被 Pinocchio，Groth16，Bulletproofs 等广泛采用。2019 年 Plonk 方案提出了一种"
"看似复古的电路编码方式，但由于 Plonk 方案将多项式的编码应用到了极致，它不再局"
"限于算术电路中的「加法门」和「乘法门」，而是可以支持更灵活的「自定义门」与"
"「查表门」。"

#: src/plonk-intro-cn/plonk-arithmetization.md:8
msgid ""
"我们先回顾一下 R1CS 的电路编码，也是相关介绍最多的算术化方案。然后我们对比引"
"入 Plonkish 编码。"
msgstr ""
"我们先回顾一下 R1CS 的电路编码，也是相关介绍最多的算术化方案。然后我们对比引"
"入 Plonkish 编码。"

#: src/plonk-intro-cn/plonk-arithmetization.md:10
msgid "算术电路与 R1CS 算术化"
msgstr "算术电路与 R1CS 算术化"

#: src/plonk-intro-cn/plonk-arithmetization.md:12
msgid ""
"一个算术电路包含若干个乘法门与加法门。每一个门都有「两个输入」引脚和一个「输"
"出」引脚，任何一个输出引脚可以被接驳到多个门的输入引脚上。"
msgstr ""
"一个算术电路包含若干个乘法门与加法门。每一个门都有「两个输入」引脚和一个「输"
"出」引脚，任何一个输出引脚可以被接驳到多个门的输入引脚上。"

#: src/plonk-intro-cn/plonk-arithmetization.md:14
msgid "先看一个非常简单的算术电路："
msgstr "先看一个非常简单的算术电路："

#: src/plonk-intro-cn/plonk-arithmetization.md:16
msgid "![img20230414162317](img/img20230414162317.png)"
msgstr "![img20230414162317](img/img20230414162317.png)"

#: src/plonk-intro-cn/plonk-arithmetization.md:18
#: src/plonk-intro-cn/plonk-arithmetization.md:85
msgid "这个电路表示了这样的一个计算："
msgstr "这个电路表示了这样的一个计算："

#: src/plonk-intro-cn/plonk-arithmetization.md:20
#: src/plonk-intro-cn/plonk-arithmetization.md:22
#: src/plonk-intro-cn/plonk-arithmetization.md:35
#: src/plonk-intro-cn/plonk-arithmetization.md:37
#: src/plonk-intro-cn/plonk-arithmetization.md:39
#: src/plonk-intro-cn/plonk-arithmetization.md:41
#: src/plonk-intro-cn/plonk-arithmetization.md:47
#: src/plonk-intro-cn/plonk-arithmetization.md:51
#: src/plonk-intro-cn/plonk-arithmetization.md:55
#: src/plonk-intro-cn/plonk-arithmetization.md:57
#: src/plonk-intro-cn/plonk-arithmetization.md:87
#: src/plonk-intro-cn/plonk-arithmetization.md:91
#: src/plonk-intro-cn/plonk-arithmetization.md:93
#: src/plonk-intro-cn/plonk-arithmetization.md:101
#: src/plonk-intro-cn/plonk-arithmetization.md:103
#: src/plonk-intro-cn/plonk-arithmetization.md:105
#: src/plonk-intro-cn/plonk-arithmetization.md:107
#: src/plonk-intro-cn/plonk-arithmetization.md:109
#: src/plonk-intro-cn/plonk-arithmetization.md:115
#: src/plonk-intro-cn/plonk-arithmetization.md:123
#: src/plonk-intro-cn/plonk-arithmetization.md:135
#: src/plonk-intro-cn/plonk-arithmetization.md:141
#: src/plonk-intro-cn/plonk-arithmetization.md:142
#: src/plonk-intro-cn/plonk-arithmetization.md:143
#: src/plonk-intro-cn/plonk-arithmetization.md:147
#: src/plonk-intro-cn/plonk-arithmetization.md:159
#: src/plonk-intro-cn/plonk-arithmetization.md:163
#: src/plonk-intro-cn/plonk-arithmetization.md:177
#: src/plonk-intro-cn/plonk-arithmetization.md:179
#: src/plonk-intro-cn/plonk-arithmetization.md:181
#: src/plonk-intro-cn/plonk-arithmetization.md:227
#: src/plonk-intro-cn/plonk-arithmetization.md:231
#: src/plonk-intro-cn/plonk-permutation.md:11
#: src/plonk-intro-cn/plonk-constraints.md:57
#: src/plonk-intro-cn/plonk-polycom.md:9 src/plonk-intro-cn/plonk-polycom.md:13
#: src/plonk-intro-cn/plonk-polycom.md:15
#: src/plonk-intro-cn/plonk-polycom.md:117
#: src/plonk-intro-cn/plonk-randomizing.md:51
#: src/plonk-intro-cn/plonk-randomizing.md:53
#: src/plonk-intro-cn/plonk-lookup.md:59 src/plonk-intro-cn/plonk-lookup.md:63
#: src/plonk-intro-cn/plonk-lookup.md:69
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:59
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:70
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:71
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:95
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:96
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:103
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:106
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:108
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:111
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:112
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:114
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:115
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:116
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:118
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:120
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:128
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:138
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:143
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:146
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:148
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:149
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:150
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:152
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:158
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:159
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:160
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:308
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:310
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:316
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:317
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:318
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:324
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:325
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:327
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:330
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:331
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:332
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:343
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:349
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:64
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:66
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:88
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:107
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:111
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:126
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:193
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:260
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:269
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:270
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:293
#: src/zk-snarks/3-General-Purpose-Computation.md:64
#: src/zk-snarks/3-General-Purpose-Computation.md:70
#: src/zk-snarks/3-General-Purpose-Computation.md:74
#: src/zk-snarks/3-General-Purpose-Computation.md:79
#: src/zk-snarks/3-General-Purpose-Computation.md:81
#: src/zk-snarks/3-General-Purpose-Computation.md:83
#: src/zk-snarks/3-General-Purpose-Computation.md:90
#: src/zk-snarks/3-General-Purpose-Computation.md:92
#: src/zk-snarks/3-General-Purpose-Computation.md:96
#: src/zk-snarks/3-General-Purpose-Computation.md:98
#: src/zk-snarks/3-General-Purpose-Computation.md:104
#: src/zk-snarks/3-General-Purpose-Computation.md:105
#: src/zk-snarks/3-General-Purpose-Computation.md:122
#: src/zk-snarks/3-General-Purpose-Computation.md:143
#: src/zk-snarks/3-General-Purpose-Computation.md:149
#: src/zk-snarks/3-General-Purpose-Computation.md:153
#: src/zk-snarks/3-General-Purpose-Computation.md:155
#: src/zk-snarks/3-General-Purpose-Computation.md:157
#: src/zk-snarks/3-General-Purpose-Computation.md:158
#: src/zk-snarks/3-General-Purpose-Computation.md:159
#: src/zk-snarks/3-General-Purpose-Computation.md:161
#: src/zk-snarks/3-General-Purpose-Computation.md:165
#: src/zk-snarks/3-General-Purpose-Computation.md:171
#: src/zk-snarks/3-General-Purpose-Computation.md:173
#: src/zk-snarks/3-General-Purpose-Computation.md:180
#: src/zk-snarks/3-General-Purpose-Computation.md:182
#: src/zk-snarks/3-General-Purpose-Computation.md:184
#: src/zk-snarks/3-General-Purpose-Computation.md:212
#: src/zk-snarks/3-General-Purpose-Computation.md:215
#: src/zk-snarks/3-General-Purpose-Computation.md:216
#: src/zk-snarks/3-General-Purpose-Computation.md:220
#: src/zk-snarks/3-General-Purpose-Computation.md:231
#: src/zk-snarks/3-General-Purpose-Computation.md:242
#: src/zk-snarks/3-General-Purpose-Computation.md:248
#: src/zk-snarks/3-General-Purpose-Computation.md:249
#: src/zk-snarks/3-General-Purpose-Computation.md:266
#: src/zk-snarks/3-General-Purpose-Computation.md:268
#: src/zk-snarks/3-General-Purpose-Computation.md:271
#: src/zk-snarks/3-General-Purpose-Computation.md:276
#: src/zk-snarks/3-General-Purpose-Computation.md:278
#: src/zk-snarks/3-General-Purpose-Computation.md:279
#: src/zk-snarks/3-General-Purpose-Computation.md:280
#: src/zk-snarks/3-General-Purpose-Computation.md:284
#: src/zk-snarks/3-General-Purpose-Computation.md:319
#: src/zk-snarks/3-General-Purpose-Computation.md:320
#: src/zk-snarks/3-General-Purpose-Computation.md:331
#: src/zk-snarks/3-General-Purpose-Computation.md:338
#: src/zk-snarks/3-General-Purpose-Computation.md:340
#: src/zk-snarks/3-General-Purpose-Computation.md:347
#: src/zk-snarks/3-General-Purpose-Computation.md:374
#: src/zk-snarks/3-General-Purpose-Computation.md:379
#: src/zk-snarks/3-General-Purpose-Computation.md:381
#: src/zk-snarks/3-General-Purpose-Computation.md:384
#: src/zk-snarks/4-Construction-Properties.md:28
#: src/zk-snarks/4-Construction-Properties.md:55
#: src/zk-snarks/4-Construction-Properties.md:98
#: src/zk-snarks/4-Construction-Properties.md:119
#: src/zk-snarks/4-Construction-Properties.md:120
#: src/zk-snarks/4-Construction-Properties.md:121
#: src/zk-snarks/4-Construction-Properties.md:130
#: src/zk-snarks/4-Construction-Properties.md:133
#: src/zk-snarks/4-Construction-Properties.md:134
#: src/zk-snarks/4-Construction-Properties.md:135
#: src/zk-snarks/4-Construction-Properties.md:136
#: src/zk-snarks/4-Construction-Properties.md:137
#: src/zk-snarks/4-Construction-Properties.md:138
#: src/zk-snarks/4-Construction-Properties.md:139
#: src/zk-snarks/4-Construction-Properties.md:155
#: src/zk-snarks/4-Construction-Properties.md:156
#: src/zk-snarks/4-Construction-Properties.md:162
#: src/zk-snarks/4-Construction-Properties.md:164
#: src/zk-snarks/4-Construction-Properties.md:170
#: src/zk-snarks/4-Construction-Properties.md:171
#: src/zk-snarks/4-Construction-Properties.md:176
#: src/zk-snarks/4-Construction-Properties.md:178
#: src/zk-snarks/4-Construction-Properties.md:184
#: src/zk-snarks/4-Construction-Properties.md:195
#: src/zk-snarks/4-Construction-Properties.md:197
#: src/zk-snarks/4-Construction-Properties.md:205
#: src/zk-snarks/4-Construction-Properties.md:221
#: src/zk-snarks/4-Construction-Properties.md:253
#: src/zk-snarks/4-Construction-Properties.md:286
#: src/zk-snarks/4-Construction-Properties.md:333
#: src/zk-snarks/4-Construction-Properties.md:338
#: src/zk-snarks/4-Construction-Properties.md:339
#: src/zk-snarks/4-Construction-Properties.md:340
#: src/zk-snarks/4-Construction-Properties.md:370
#: src/zk-snarks/4-Construction-Properties.md:374
#: src/zk-snarks/4-Construction-Properties.md:375
#: src/zk-snarks/4-Construction-Properties.md:376
#: src/zk-snarks/4-Construction-Properties.md:377
#: src/zk-snarks/4-Construction-Properties.md:385
#: src/zk-snarks/4-Construction-Properties.md:406
#: src/zk-snarks/4-Construction-Properties.md:408
#: src/zk-snarks/5-Pinocchio-Protocol.md:83
#: src/zk-snarks/5-Pinocchio-Protocol.md:84
#: src/zk-snarks/5-Pinocchio-Protocol.md:85
#: src/zk-snarks/5-Pinocchio-Protocol.md:92
#: src/zk-snarks/5-Pinocchio-Protocol.md:111
#: src/zk-snarks/5-Pinocchio-Protocol.md:137
#: src/zk-snarks/5-Pinocchio-Protocol.md:152
#: src/zk-snarks/5-Pinocchio-Protocol.md:188
#: src/zk-snarks/5-Pinocchio-Protocol.md:199
#: src/zk-snarks/5-Pinocchio-Protocol.md:202
#: src/halo2/tmp/2-Fibonacci-example-1.md:19
#: src/halo2/tmp/3-Fibonacci-example-2.md:84
#: src/halo2/tmp/3-Fibonacci-example-2.md:269 src/zk-everything/BabySNARK
#: tutorial.md:116 tutorial.md:124 tutorial.md:125 tutorial.md:126
#: tutorial.md:127 tutorial.md:129 tutorial.md:131 tutorial.md:145
#: tutorial.md:148 src/zk-everything/zk-learning-miles/KZG.md:10
#: src/zk-everything/zk-learning-miles/KZG.md:12
#: src/zk-everything/zk-learning-miles/KZG.md:77
#: src/zk-everything/zk-learning-miles/KZG.md:106
#: src/zk-everything/zk-learning-miles/KZG.md:185
#: src/zk-everything/zk-learning-miles/KZG.md:199
#: src/zk-everything/zk-learning-miles/KZG.md:262
#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:42 Zeroknowledge.md:238 Zeroknowledge.md:239
#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:198 SNARKs.md:272 SNARKs.md:296 SNARKs.md:320 SNARKs.md:381
#: SNARKs.md:395 SNARKs.md:407
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:128
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:132
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:383
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:405
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:486
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:526
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:530
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:532
#: src/zk-everything/zk-everything-joe/Hyrax.md:250
#: src/zk-everything/zk-everything-joe/Spartan.md:115
#: src/zk-everything/zk-everything-joe/Spartan.md:118
#: src/zk-everything/zk-everything-joe/Spartan.md:122
#: src/zk-everything/zk-everything-joe/Spartan.md:319
#: src/zk-everything/zk-everything-joe/Spartan.md:323
#: src/zk-everything/zk-everything-joe/Spartan.md:339
#: src/zk-everything/zk-everything-joe/Spartan.md:343
#: src/zk-everything/zk-everything-joe/Spartan.md:344
#: src/zk-everything/zk-everything-joe/Spartan.md:346
#: src/zk-everything/zk-everything-joe/Spartan.md:347
#: src/zk-everything/zk-everything-joe/Spartan.md:349
#: src/zk-everything/zk-everything-joe/Spartan.md:350
#: src/zk-everything/zk-everything-joe/Spartan.md:359
#: src/zk-everything/zk-everything-joe/Spartan.md:361
#: src/zk-everything/zk-everything-joe/Spartan.md:377
#: src/zk-everything/zk-everything-joe/Spartan.md:394
#: src/zk-everything/zk-everything-joe/Spartan.md:401
#: src/zk-everything/zk-everything-joe/Spartan.md:406
#: src/zk-everything/zk-everything-joe/Spartan.md:411
#: src/zk-everything/zk-everything-joe/Spartan.md:428
#: src/zk-everything/zk-everything-joe/Spartan.md:436
#: src/zk-everything/zk-everything-joe/Spartan.md:441
#: src/zk-everything/zk-everything-joe/Spartan.md:445
#: src/zk-everything/zk-everything-joe/Spartan.md:450
#: src/zk-everything/zk-everything-joe/Spartan.md:455
#: src/zk-everything/zk-everything-joe/Spartan.md:458 src/public
#: goods/第二章.md:17 goods/第二章.md:91 goods/第二章.md:146
#: goods/第二章.md:162 goods/4-Proving-System.md:107
#: goods/4-Proving-System.md:120 goods/4-Proving-System.md:122
#: goods/4-Proving-System.md:127 goods/4-Proving-System.md:155
#: goods/4-Proving-System.md:167 goods/4-Proving-System.md:169
#: goods/4-Proving-System.md:173 goods/4-Proving-System.md:191
#: goods/4-Proving-System.md:201 goods/4-Proving-System.md:202
#: goods/4-Proving-System.md:204 goods/4-Proving-System.md:208
#: goods/4-Proving-System.md:209 src/materials/ZK-Materials.md:600
msgid "x"
msgstr "x"

#: src/plonk-intro-cn/plonk-arithmetization.md:20
#: src/plonk-intro-cn/plonk-arithmetization.md:55
#: src/plonk-intro-cn/plonk-arithmetization.md:87
#: src/plonk-intro-cn/plonk-arithmetization.md:103
#: src/plonk-intro-cn/plonk-arithmetization.md:123
#: src/plonk-intro-cn/plonk-arithmetization.md:141
#: src/plonk-intro-cn/plonk-arithmetization.md:155
#: src/plonk-intro-cn/plonk-arithmetization.md:159
#: src/plonk-intro-cn/plonk-arithmetization.md:163
#: src/plonk-intro-cn/plonk-arithmetization.md:241
#: src/plonk-intro-cn/plonk-arithmetization.md:249
#: src/plonk-intro-cn/plonk-arithmetization.md:257
#: src/plonk-intro-cn/plonk-lagrange-basis.md:14
#: src/plonk-intro-cn/plonk-lagrange-basis.md:18
#: src/plonk-intro-cn/plonk-lagrange-basis.md:20
#: src/plonk-intro-cn/plonk-lagrange-basis.md:22
#: src/plonk-intro-cn/plonk-lagrange-basis.md:24
#: src/plonk-intro-cn/plonk-lagrange-basis.md:36
#: src/plonk-intro-cn/plonk-lagrange-basis.md:42
#: src/plonk-intro-cn/plonk-lagrange-basis.md:82
#: src/plonk-intro-cn/plonk-lagrange-basis.md:83
#: src/plonk-intro-cn/plonk-lagrange-basis.md:105
#: src/plonk-intro-cn/plonk-lagrange-basis.md:119
#: src/plonk-intro-cn/plonk-lagrange-basis.md:143
#: src/plonk-intro-cn/plonk-lagrange-basis.md:147
#: src/plonk-intro-cn/plonk-permutation.md:72
#: src/plonk-intro-cn/plonk-permutation.md:96
#: src/plonk-intro-cn/plonk-permutation.md:174
#: src/plonk-intro-cn/plonk-permutation.md:176
#: src/plonk-intro-cn/plonk-permutation.md:177
#: src/plonk-intro-cn/plonk-permutation.md:179
#: src/plonk-intro-cn/plonk-permutation.md:180
#: src/plonk-intro-cn/plonk-permutation.md:198
#: src/plonk-intro-cn/plonk-permutation.md:204
#: src/plonk-intro-cn/plonk-permutation.md:212
#: src/plonk-intro-cn/plonk-constraints.md:13
#: src/plonk-intro-cn/plonk-constraints.md:17
#: src/plonk-intro-cn/plonk-constraints.md:21
#: src/plonk-intro-cn/plonk-constraints.md:25
#: src/plonk-intro-cn/plonk-constraints.md:27
#: src/plonk-intro-cn/plonk-constraints.md:71
#: src/plonk-intro-cn/plonk-constraints.md:77
#: src/plonk-intro-cn/plonk-constraints.md:89
#: src/plonk-intro-cn/plonk-constraints.md:133
#: src/plonk-intro-cn/plonk-constraints.md:163
#: src/plonk-intro-cn/plonk-constraints.md:175
#: src/plonk-intro-cn/plonk-constraints.md:179
#: src/plonk-intro-cn/plonk-constraints.md:191
#: src/plonk-intro-cn/plonk-constraints.md:192
#: src/plonk-intro-cn/plonk-constraints.md:199
#: src/plonk-intro-cn/plonk-polycom.md:21
#: src/plonk-intro-cn/plonk-polycom.md:33
#: src/plonk-intro-cn/plonk-polycom.md:53
#: src/plonk-intro-cn/plonk-polycom.md:65
#: src/plonk-intro-cn/plonk-polycom.md:79
#: src/plonk-intro-cn/plonk-polycom.md:81
#: src/plonk-intro-cn/plonk-polycom.md:89
#: src/plonk-intro-cn/plonk-polycom.md:93
#: src/plonk-intro-cn/plonk-polycom.md:97
#: src/plonk-intro-cn/plonk-polycom.md:101
#: src/plonk-intro-cn/plonk-polycom.md:105
#: src/plonk-intro-cn/plonk-polycom.md:109
#: src/plonk-intro-cn/plonk-polycom.md:113
#: src/plonk-intro-cn/plonk-polycom.md:132
#: src/plonk-intro-cn/plonk-polycom.md:134
#: src/plonk-intro-cn/plonk-polycom.md:143
#: src/plonk-intro-cn/plonk-polycom.md:147
#: src/plonk-intro-cn/plonk-polycom.md:167
#: src/plonk-intro-cn/plonk-polycom.md:175
#: src/plonk-intro-cn/plonk-polycom.md:193
#: src/plonk-intro-cn/plonk-polycom.md:201
#: src/plonk-intro-cn/plonk-polycom.md:211
#: src/plonk-intro-cn/plonk-polycom.md:213
#: src/plonk-intro-cn/plonk-polycom.md:217
#: src/plonk-intro-cn/plonk-polycom.md:221
#: src/plonk-intro-cn/plonk-polycom.md:225
#: src/plonk-intro-cn/plonk-polycom.md:229
#: src/plonk-intro-cn/plonk-randomizing.md:33
#: src/plonk-intro-cn/plonk-randomizing.md:39
#: src/plonk-intro-cn/plonk-randomizing.md:41
#: src/plonk-intro-cn/plonk-randomizing.md:47
#: src/plonk-intro-cn/plonk-randomizing.md:49
#: src/plonk-intro-cn/plonk-randomizing.md:55
#: src/plonk-intro-cn/plonk-randomizing.md:57
#: src/plonk-intro-cn/plonk-randomizing.md:61
#: src/plonk-intro-cn/plonk-randomizing.md:65
#: src/plonk-intro-cn/plonk-randomizing.md:69
#: src/plonk-intro-cn/plonk-randomizing.md:73
#: src/plonk-intro-cn/plonk-randomizing.md:90
#: src/plonk-intro-cn/plonk-randomizing.md:92
#: src/plonk-intro-cn/plonk-randomizing.md:93
#: src/plonk-intro-cn/plonk-randomizing.md:97
#: src/plonk-intro-cn/plonk-randomizing.md:106
#: src/plonk-intro-cn/plonk-randomizing.md:121
#: src/plonk-intro-cn/plonk-randomizing.md:123
#: src/plonk-intro-cn/plonk-randomizing.md:125
#: src/plonk-intro-cn/plonk-randomizing.md:129
#: src/plonk-intro-cn/plonk-randomizing.md:143
#: src/plonk-intro-cn/plonk-randomizing.md:145
#: src/plonk-intro-cn/plonk-randomizing.md:149
#: src/plonk-intro-cn/plonk-randomizing.md:153
#: src/plonk-intro-cn/plonk-randomizing.md:163
#: src/plonk-intro-cn/plonk-lookup.md:67 src/plonk-intro-cn/plonk-lookup.md:87
#: src/plonk-intro-cn/plonk-lookup.md:93 src/plonk-intro-cn/plonk-lookup.md:101
#: src/plonk-intro-cn/plonk-lookup.md:115
#: src/plonk-intro-cn/plonk-lookup.md:117
#: src/plonk-intro-cn/plonk-lookup.md:125
#: src/plonk-intro-cn/plonk-lookup.md:127
#: src/plonk-intro-cn/plonk-lookup.md:131
#: src/plonk-intro-cn/plonk-lookup.md:135
#: src/plonk-intro-cn/plonk-lookup.md:137
#: src/plonk-intro-cn/plonk-lookup.md:139
#: src/plonk-intro-cn/plonk-lookup.md:145
#: src/plonk-intro-cn/plonk-lookup.md:149
#: src/plonk-intro-cn/plonk-lookup.md:153
#: src/plonk-intro-cn/plonk-lookup.md:157
#: src/plonk-intro-cn/plonk-lookup.md:173
#: src/plonk-intro-cn/plonk-lookup.md:190
#: src/plonk-intro-cn/plonk-lookup.md:200
#: src/plonk-intro-cn/plonk-lookup.md:214
#: src/plonk-intro-cn/plonk-lookup.md:220
#: src/plonk-intro-cn/plonk-lookup.md:230
#: src/plonk-intro-cn/plonk-lookup.md:238
#: src/plonk-intro-cn/plonk-lookup.md:247
#: src/plonk-intro-cn/plonk-lookup.md:251
#: src/plonk-intro-cn/plonk-lookup.md:269
#: src/plonk-intro-cn/plonk-lookup.md:273
#: src/plonk-intro-cn/plonk-lookup.md:275
#: src/plonk-intro-cn/plonk-lookup.md:289
#: src/plonk-intro-cn/plonk-lookup.md:297
#: src/plonk-intro-cn/plonk-lookup.md:304
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:95
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:96
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:106
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:148
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:150
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:190
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:308
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:333
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:349
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:350
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:79
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:81
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:88
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:176
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:198
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:231
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:232
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:269
#: src/zk-snarks/3-General-Purpose-Computation.md:39
#: src/zk-snarks/3-General-Purpose-Computation.md:98
#: src/zk-snarks/3-General-Purpose-Computation.md:105
#: src/zk-snarks/3-General-Purpose-Computation.md:108
#: src/zk-snarks/3-General-Purpose-Computation.md:112
#: src/zk-snarks/3-General-Purpose-Computation.md:149
#: src/zk-snarks/3-General-Purpose-Computation.md:171
#: src/zk-snarks/3-General-Purpose-Computation.md:173
#: src/zk-snarks/3-General-Purpose-Computation.md:266
#: src/zk-snarks/3-General-Purpose-Computation.md:268
#: src/zk-snarks/3-General-Purpose-Computation.md:271
#: src/zk-snarks/3-General-Purpose-Computation.md:276
#: src/zk-snarks/3-General-Purpose-Computation.md:280
#: src/zk-snarks/3-General-Purpose-Computation.md:295
#: src/zk-snarks/3-General-Purpose-Computation.md:331
#: src/zk-snarks/3-General-Purpose-Computation.md:340
#: src/zk-snarks/3-General-Purpose-Computation.md:358
#: src/zk-snarks/3-General-Purpose-Computation.md:360
#: src/zk-snarks/3-General-Purpose-Computation.md:366
#: src/zk-snarks/3-General-Purpose-Computation.md:381
#: src/zk-snarks/4-Construction-Properties.md:62
#: src/zk-snarks/4-Construction-Properties.md:76
#: src/zk-snarks/4-Construction-Properties.md:77
#: src/zk-snarks/4-Construction-Properties.md:83
#: src/zk-snarks/4-Construction-Properties.md:105
#: src/zk-snarks/4-Construction-Properties.md:112
#: src/zk-snarks/4-Construction-Properties.md:119
#: src/zk-snarks/4-Construction-Properties.md:120
#: src/zk-snarks/4-Construction-Properties.md:121
#: src/zk-snarks/4-Construction-Properties.md:133
#: src/zk-snarks/4-Construction-Properties.md:134
#: src/zk-snarks/4-Construction-Properties.md:135
#: src/zk-snarks/4-Construction-Properties.md:136
#: src/zk-snarks/4-Construction-Properties.md:137
#: src/zk-snarks/4-Construction-Properties.md:138
#: src/zk-snarks/4-Construction-Properties.md:139
#: src/zk-snarks/4-Construction-Properties.md:151
#: src/zk-snarks/4-Construction-Properties.md:155
#: src/zk-snarks/4-Construction-Properties.md:164
#: src/zk-snarks/4-Construction-Properties.md:170
#: src/zk-snarks/4-Construction-Properties.md:171
#: src/zk-snarks/4-Construction-Properties.md:178
#: src/zk-snarks/4-Construction-Properties.md:219
#: src/zk-snarks/4-Construction-Properties.md:233
#: src/zk-snarks/4-Construction-Properties.md:271
#: src/zk-snarks/4-Construction-Properties.md:273
#: src/zk-snarks/4-Construction-Properties.md:275
#: src/zk-snarks/4-Construction-Properties.md:279
#: src/zk-snarks/4-Construction-Properties.md:287
#: src/zk-snarks/4-Construction-Properties.md:290
#: src/zk-snarks/4-Construction-Properties.md:298
#: src/zk-snarks/4-Construction-Properties.md:304
#: src/zk-snarks/4-Construction-Properties.md:307
#: src/zk-snarks/4-Construction-Properties.md:313
#: src/zk-snarks/4-Construction-Properties.md:315
#: src/zk-snarks/4-Construction-Properties.md:326
#: src/zk-snarks/4-Construction-Properties.md:333
#: src/zk-snarks/4-Construction-Properties.md:338
#: src/zk-snarks/4-Construction-Properties.md:339
#: src/zk-snarks/4-Construction-Properties.md:345
#: src/zk-snarks/4-Construction-Properties.md:353
#: src/zk-snarks/4-Construction-Properties.md:357
#: src/zk-snarks/4-Construction-Properties.md:374
#: src/zk-snarks/4-Construction-Properties.md:375
#: src/zk-snarks/4-Construction-Properties.md:377
#: src/zk-snarks/4-Construction-Properties.md:379
#: src/zk-snarks/4-Construction-Properties.md:381
#: src/zk-snarks/4-Construction-Properties.md:394
#: src/zk-snarks/4-Construction-Properties.md:395
#: src/zk-snarks/4-Construction-Properties.md:407
#: src/zk-snarks/4-Construction-Properties.md:409
#: src/zk-snarks/4-Construction-Properties.md:436
#: src/zk-snarks/5-Pinocchio-Protocol.md:29
#: src/zk-snarks/5-Pinocchio-Protocol.md:31
#: src/zk-snarks/5-Pinocchio-Protocol.md:32
#: src/zk-snarks/5-Pinocchio-Protocol.md:67
#: src/zk-snarks/5-Pinocchio-Protocol.md:83
#: src/zk-snarks/5-Pinocchio-Protocol.md:84
#: src/zk-snarks/5-Pinocchio-Protocol.md:87
#: src/zk-snarks/5-Pinocchio-Protocol.md:92
#: src/zk-snarks/5-Pinocchio-Protocol.md:106
#: src/zk-snarks/5-Pinocchio-Protocol.md:133
#: src/zk-snarks/5-Pinocchio-Protocol.md:136
#: src/zk-snarks/5-Pinocchio-Protocol.md:151
#: src/zk-snarks/5-Pinocchio-Protocol.md:152
#: src/zk-snarks/5-Pinocchio-Protocol.md:155
#: src/zk-snarks/5-Pinocchio-Protocol.md:157
#: src/zk-snarks/5-Pinocchio-Protocol.md:160
#: src/zk-snarks/5-Pinocchio-Protocol.md:163
#: src/zk-snarks/5-Pinocchio-Protocol.md:165
#: src/zk-snarks/5-Pinocchio-Protocol.md:168
#: src/zk-snarks/5-Pinocchio-Protocol.md:170
#: src/zk-snarks/5-Pinocchio-Protocol.md:187
#: src/zk-snarks/5-Pinocchio-Protocol.md:192
#: src/zk-snarks/5-Pinocchio-Protocol.md:198
#: src/zk-snarks/5-Pinocchio-Protocol.md:199
#: src/zk-snarks/5-Pinocchio-Protocol.md:202
#: src/zk-snarks/5-Pinocchio-Protocol.md:204
#: src/zk-snarks/5-Pinocchio-Protocol.md:207
#: src/halo2/tmp/halo2-learning-materials.md:62
#: src/halo2/tmp/3-Fibonacci-example-2.md:84
#: src/halo2/tmp/3-Fibonacci-example-2.md:269 src/halo2/tmp/9-decomposed.md:24
#: src/halo2/tmp/9-decomposed.md:26 src/halo2/tmp/9-decomposed.md:30
#: src/halo2/tmp/9-decomposed.md:53 src/halo2/tmp/9-decomposed.md:101
#: src/halo2/tmp/9-decomposed.md:106 src/halo2/tmp/9-decomposed.md:139
#: src/halo2/tmp/9-decomposed.md:141 src/halo2/tmp/9-decomposed.md:142
#: src/halo2/tmp/9-decomposed.md:216 src/zk-everything/BabySNARK
#: tutorial.md:116 tutorial.md:123 tutorial.md:129 tutorial.md:131
#: tutorial.md:140 tutorial.md:145 tutorial.md:148 tutorial.md:168
#: src/zk-everything/zk-learning-miles/KZG.md:10
#: src/zk-everything/zk-learning-miles/KZG.md:120
#: src/zk-everything/zk-learning-miles/KZG.md:142
#: src/zk-everything/zk-learning-miles/KZG.md:145
#: src/zk-everything/zk-learning-miles/KZG.md:262
#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:272 SNARKs.md:320 SNARKs.md:364 SNARKs.md:368 SNARKs.md:369
#: SNARKs.md:370 SNARKs.md:371 SNARKs.md:373
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:58
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:64
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:128
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:134
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:145
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:152
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:162
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:170
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:182
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:188
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:194
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:204
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:212
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:224
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:230
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:236
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:246
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:255
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:268
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:275
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:281
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:292
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:301
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:314
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:319
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:325
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:336
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:343
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:355
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:361
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:383
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:396
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:405
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:418
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:436
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:442
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:448
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:454
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:460
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:486
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:514
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:526
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:532
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:538
#: src/zk-everything/zk-everything-joe/Hyrax.md:58
#: src/zk-everything/zk-everything-joe/Hyrax.md:64
#: src/zk-everything/zk-everything-joe/Hyrax.md:70
#: src/zk-everything/zk-everything-joe/Hyrax.md:133
#: src/zk-everything/zk-everything-joe/Hyrax.md:140
#: src/zk-everything/zk-everything-joe/Hyrax.md:147
#: src/zk-everything/zk-everything-joe/Hyrax.md:162
#: src/zk-everything/zk-everything-joe/Hyrax.md:168
#: src/zk-everything/zk-everything-joe/Hyrax.md:173
#: src/zk-everything/zk-everything-joe/Hyrax.md:181
#: src/zk-everything/zk-everything-joe/Hyrax.md:195
#: src/zk-everything/zk-everything-joe/Hyrax.md:198
#: src/zk-everything/zk-everything-joe/Hyrax.md:208
#: src/zk-everything/zk-everything-joe/Hyrax.md:214
#: src/zk-everything/zk-everything-joe/Hyrax.md:223
#: src/zk-everything/zk-everything-joe/Hyrax.md:228
#: src/zk-everything/zk-everything-joe/Hyrax.md:250
#: src/zk-everything/zk-everything-joe/Hyrax.md:276
#: src/zk-everything/zk-everything-joe/Hyrax.md:282
#: src/zk-everything/zk-everything-joe/Hyrax.md:297
#: src/zk-everything/zk-everything-joe/Spartan.md:177
#: src/zk-everything/zk-everything-joe/Spartan.md:350
#: src/zk-everything/zk-everything-joe/Spartan.md:377
#: src/zk-everything/zk-everything-joe/Spartan.md:394
#: src/zk-everything/zk-everything-joe/Spartan.md:411
#: src/zk-everything/zk-everything-joe/Spartan.md:416
#: src/zk-everything/zk-everything-joe/Spartan.md:436
#: src/zk-everything/zk-everything-joe/Spartan.md:450 src/Nova/SuperNova.md:12
#: src/Nova/SuperNova.md:14 src/Nova/SuperNova.md:30 src/public
#: goods/第二章.md:10 goods/第二章.md:17 goods/第二章.md:26
#: goods/第二章.md:33 goods/第二章.md:46 goods/第二章.md:48
#: goods/第二章.md:50 goods/第二章.md:97 goods/4-Proving-System.md:56
#: goods/4-Proving-System.md:58 goods/4-Proving-System.md:62
#: goods/4-Proving-System.md:64 goods/4-Proving-System.md:107
#: goods/4-Proving-System.md:111 goods/4-Proving-System.md:127
#: goods/4-Proving-System.md:149 goods/4-Proving-System.md:155
#: goods/4-Proving-System.md:173 goods/4-Proving-System.md:177
msgid "+"
msgstr "+"

#: src/plonk-intro-cn/plonk-arithmetization.md:20
#: src/plonk-intro-cn/plonk-arithmetization.md:51
#: src/plonk-intro-cn/plonk-arithmetization.md:55
#: src/plonk-intro-cn/plonk-arithmetization.md:59
#: src/plonk-intro-cn/plonk-arithmetization.md:63
#: src/plonk-intro-cn/plonk-arithmetization.md:87
#: src/plonk-intro-cn/plonk-arithmetization.md:119
#: src/plonk-intro-cn/plonk-arithmetization.md:142
#: src/plonk-intro-cn/plonk-arithmetization.md:143
#: src/plonk-intro-cn/plonk-arithmetization.md:155
#: src/plonk-intro-cn/plonk-arithmetization.md:159
#: src/plonk-intro-cn/plonk-arithmetization.md:163
#: src/plonk-intro-cn/plonk-arithmetization.md:241
#: src/plonk-intro-cn/plonk-arithmetization.md:249
#: src/plonk-intro-cn/plonk-arithmetization.md:257
#: src/plonk-intro-cn/plonk-lagrange-basis.md:28
#: src/plonk-intro-cn/plonk-lagrange-basis.md:36
#: src/plonk-intro-cn/plonk-lagrange-basis.md:42
#: src/plonk-intro-cn/plonk-lagrange-basis.md:44
#: src/plonk-intro-cn/plonk-lagrange-basis.md:46
#: src/plonk-intro-cn/plonk-lagrange-basis.md:50
#: src/plonk-intro-cn/plonk-lagrange-basis.md:54
#: src/plonk-intro-cn/plonk-lagrange-basis.md:58
#: src/plonk-intro-cn/plonk-lagrange-basis.md:60
#: src/plonk-intro-cn/plonk-lagrange-basis.md:64
#: src/plonk-intro-cn/plonk-lagrange-basis.md:66
#: src/plonk-intro-cn/plonk-lagrange-basis.md:119
#: src/plonk-intro-cn/plonk-lagrange-basis.md:135
#: src/plonk-intro-cn/plonk-lagrange-basis.md:139
#: src/plonk-intro-cn/plonk-lagrange-basis.md:143
#: src/plonk-intro-cn/plonk-lagrange-basis.md:147
#: src/plonk-intro-cn/plonk-permutation.md:48
#: src/plonk-intro-cn/plonk-permutation.md:58
#: src/plonk-intro-cn/plonk-permutation.md:72
#: src/plonk-intro-cn/plonk-permutation.md:76
#: src/plonk-intro-cn/plonk-permutation.md:80
#: src/plonk-intro-cn/plonk-permutation.md:84
#: src/plonk-intro-cn/plonk-permutation.md:88
#: src/plonk-intro-cn/plonk-permutation.md:92
#: src/plonk-intro-cn/plonk-permutation.md:96
#: src/plonk-intro-cn/plonk-permutation.md:108
#: src/plonk-intro-cn/plonk-permutation.md:174
#: src/plonk-intro-cn/plonk-permutation.md:176
#: src/plonk-intro-cn/plonk-permutation.md:177
#: src/plonk-intro-cn/plonk-permutation.md:179
#: src/plonk-intro-cn/plonk-permutation.md:180
#: src/plonk-intro-cn/plonk-permutation.md:198
#: src/plonk-intro-cn/plonk-permutation.md:204
#: src/plonk-intro-cn/plonk-permutation.md:208
#: src/plonk-intro-cn/plonk-permutation.md:212
#: src/plonk-intro-cn/plonk-constraints.md:7
#: src/plonk-intro-cn/plonk-constraints.md:13
#: src/plonk-intro-cn/plonk-constraints.md:25
#: src/plonk-intro-cn/plonk-constraints.md:29
#: src/plonk-intro-cn/plonk-constraints.md:71
#: src/plonk-intro-cn/plonk-constraints.md:77
#: src/plonk-intro-cn/plonk-constraints.md:89
#: src/plonk-intro-cn/plonk-constraints.md:93
#: src/plonk-intro-cn/plonk-constraints.md:103
#: src/plonk-intro-cn/plonk-constraints.md:149
#: src/plonk-intro-cn/plonk-constraints.md:153
#: src/plonk-intro-cn/plonk-constraints.md:169
#: src/plonk-intro-cn/plonk-constraints.md:175
#: src/plonk-intro-cn/plonk-constraints.md:179
#: src/plonk-intro-cn/plonk-constraints.md:187
#: src/plonk-intro-cn/plonk-constraints.md:191
#: src/plonk-intro-cn/plonk-constraints.md:192
#: src/plonk-intro-cn/plonk-constraints.md:199
#: src/plonk-intro-cn/plonk-polycom.md:65
#: src/plonk-intro-cn/plonk-polycom.md:71
#: src/plonk-intro-cn/plonk-polycom.md:79
#: src/plonk-intro-cn/plonk-polycom.md:81
#: src/plonk-intro-cn/plonk-polycom.md:89
#: src/plonk-intro-cn/plonk-polycom.md:93
#: src/plonk-intro-cn/plonk-polycom.md:97
#: src/plonk-intro-cn/plonk-polycom.md:101
#: src/plonk-intro-cn/plonk-polycom.md:105
#: src/plonk-intro-cn/plonk-polycom.md:113
#: src/plonk-intro-cn/plonk-polycom.md:132
#: src/plonk-intro-cn/plonk-polycom.md:134
#: src/plonk-intro-cn/plonk-polycom.md:151
#: src/plonk-intro-cn/plonk-polycom.md:161
#: src/plonk-intro-cn/plonk-polycom.md:179
#: src/plonk-intro-cn/plonk-polycom.md:183
#: src/plonk-intro-cn/plonk-polycom.md:185
#: src/plonk-intro-cn/plonk-polycom.md:211
#: src/plonk-intro-cn/plonk-polycom.md:213
#: src/plonk-intro-cn/plonk-polycom.md:217
#: src/plonk-intro-cn/plonk-polycom.md:221
#: src/plonk-intro-cn/plonk-polycom.md:225
#: src/plonk-intro-cn/plonk-randomizing.md:15
#: src/plonk-intro-cn/plonk-randomizing.md:21
#: src/plonk-intro-cn/plonk-randomizing.md:41
#: src/plonk-intro-cn/plonk-randomizing.md:47
#: src/plonk-intro-cn/plonk-randomizing.md:57
#: src/plonk-intro-cn/plonk-randomizing.md:61
#: src/plonk-intro-cn/plonk-randomizing.md:69
#: src/plonk-intro-cn/plonk-randomizing.md:73
#: src/plonk-intro-cn/plonk-randomizing.md:90
#: src/plonk-intro-cn/plonk-randomizing.md:92
#: src/plonk-intro-cn/plonk-randomizing.md:93
#: src/plonk-intro-cn/plonk-randomizing.md:97
#: src/plonk-intro-cn/plonk-randomizing.md:101
#: src/plonk-intro-cn/plonk-randomizing.md:106
#: src/plonk-intro-cn/plonk-randomizing.md:110
#: src/plonk-intro-cn/plonk-randomizing.md:121
#: src/plonk-intro-cn/plonk-randomizing.md:123
#: src/plonk-intro-cn/plonk-randomizing.md:125
#: src/plonk-intro-cn/plonk-randomizing.md:129
#: src/plonk-intro-cn/plonk-randomizing.md:149
#: src/plonk-intro-cn/plonk-randomizing.md:153
#: src/plonk-intro-cn/plonk-randomizing.md:159
#: src/plonk-intro-cn/plonk-lookup.md:59 src/plonk-intro-cn/plonk-lookup.md:63
#: src/plonk-intro-cn/plonk-lookup.md:67 src/plonk-intro-cn/plonk-lookup.md:69
#: src/plonk-intro-cn/plonk-lookup.md:87 src/plonk-intro-cn/plonk-lookup.md:93
#: src/plonk-intro-cn/plonk-lookup.md:97 src/plonk-intro-cn/plonk-lookup.md:101
#: src/plonk-intro-cn/plonk-lookup.md:149
#: src/plonk-intro-cn/plonk-lookup.md:157
#: src/plonk-intro-cn/plonk-lookup.md:173
#: src/plonk-intro-cn/plonk-lookup.md:190
#: src/plonk-intro-cn/plonk-lookup.md:192
#: src/plonk-intro-cn/plonk-lookup.md:196
#: src/plonk-intro-cn/plonk-lookup.md:200
#: src/plonk-intro-cn/plonk-lookup.md:214
#: src/plonk-intro-cn/plonk-lookup.md:228
#: src/plonk-intro-cn/plonk-lookup.md:230
#: src/plonk-intro-cn/plonk-lookup.md:238
#: src/plonk-intro-cn/plonk-lookup.md:247
#: src/plonk-intro-cn/plonk-lookup.md:251
#: src/plonk-intro-cn/plonk-lookup.md:273
#: src/plonk-intro-cn/plonk-lookup.md:275
#: src/plonk-intro-cn/plonk-lookup.md:285
#: src/plonk-intro-cn/plonk-lookup.md:289
#: src/plonk-intro-cn/plonk-lookup.md:293
#: src/plonk-intro-cn/plonk-lookup.md:297
#: src/plonk-intro-cn/plonk-lookup.md:304
#: src/plonk-intro-cn/plonk-lookup.md:306
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:111
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:115
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:139
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:144
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:148
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:150
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:159
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:160
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:168
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:190
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:194
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:272
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:308
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:317
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:333
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:341
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:343
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:350
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:26
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:30
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:53
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:64
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:66
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:79
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:81
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:128
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:132
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:176
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:193
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:194
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:196
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:198
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:237
#: src/zk-snarks/3-General-Purpose-Computation.md:39
#: src/zk-snarks/3-General-Purpose-Computation.md:108
#: src/zk-snarks/3-General-Purpose-Computation.md:112
#: src/zk-snarks/3-General-Purpose-Computation.md:182
#: src/zk-snarks/3-General-Purpose-Computation.md:184
#: src/zk-snarks/3-General-Purpose-Computation.md:268
#: src/zk-snarks/3-General-Purpose-Computation.md:271
#: src/zk-snarks/3-General-Purpose-Computation.md:279
#: src/zk-snarks/3-General-Purpose-Computation.md:280
#: src/zk-snarks/3-General-Purpose-Computation.md:295
#: src/zk-snarks/3-General-Purpose-Computation.md:331
#: src/zk-snarks/3-General-Purpose-Computation.md:358
#: src/zk-snarks/3-General-Purpose-Computation.md:360
#: src/zk-snarks/3-General-Purpose-Computation.md:381
#: src/zk-snarks/3-General-Purpose-Computation.md:384
#: src/zk-snarks/4-Construction-Properties.md:46
#: src/zk-snarks/4-Construction-Properties.md:49
#: src/zk-snarks/4-Construction-Properties.md:62
#: src/zk-snarks/4-Construction-Properties.md:67
#: src/zk-snarks/4-Construction-Properties.md:79
#: src/zk-snarks/4-Construction-Properties.md:80
#: src/zk-snarks/4-Construction-Properties.md:83
#: src/zk-snarks/4-Construction-Properties.md:98
#: src/zk-snarks/4-Construction-Properties.md:111
#: src/zk-snarks/4-Construction-Properties.md:112
#: src/zk-snarks/4-Construction-Properties.md:113
#: src/zk-snarks/4-Construction-Properties.md:119
#: src/zk-snarks/4-Construction-Properties.md:120
#: src/zk-snarks/4-Construction-Properties.md:121
#: src/zk-snarks/4-Construction-Properties.md:155
#: src/zk-snarks/4-Construction-Properties.md:162
#: src/zk-snarks/4-Construction-Properties.md:164
#: src/zk-snarks/4-Construction-Properties.md:205
#: src/zk-snarks/4-Construction-Properties.md:207
#: src/zk-snarks/4-Construction-Properties.md:219
#: src/zk-snarks/4-Construction-Properties.md:279
#: src/zk-snarks/4-Construction-Properties.md:287
#: src/zk-snarks/4-Construction-Properties.md:290
#: src/zk-snarks/4-Construction-Properties.md:313
#: src/zk-snarks/4-Construction-Properties.md:315
#: src/zk-snarks/4-Construction-Properties.md:326
#: src/zk-snarks/4-Construction-Properties.md:338
#: src/zk-snarks/4-Construction-Properties.md:339
#: src/zk-snarks/4-Construction-Properties.md:340
#: src/zk-snarks/4-Construction-Properties.md:341
#: src/zk-snarks/4-Construction-Properties.md:342
#: src/zk-snarks/4-Construction-Properties.md:345
#: src/zk-snarks/4-Construction-Properties.md:353
#: src/zk-snarks/4-Construction-Properties.md:357
#: src/zk-snarks/4-Construction-Properties.md:359
#: src/zk-snarks/4-Construction-Properties.md:376
#: src/zk-snarks/4-Construction-Properties.md:379
#: src/zk-snarks/4-Construction-Properties.md:381
#: src/zk-snarks/4-Construction-Properties.md:384
#: src/zk-snarks/4-Construction-Properties.md:394
#: src/zk-snarks/4-Construction-Properties.md:405
#: src/zk-snarks/4-Construction-Properties.md:419
#: src/zk-snarks/4-Construction-Properties.md:428
#: src/zk-snarks/4-Construction-Properties.md:434
#: src/zk-snarks/4-Construction-Properties.md:443
#: src/zk-snarks/5-Pinocchio-Protocol.md:29
#: src/zk-snarks/5-Pinocchio-Protocol.md:31
#: src/zk-snarks/5-Pinocchio-Protocol.md:45
#: src/zk-snarks/5-Pinocchio-Protocol.md:46
#: src/zk-snarks/5-Pinocchio-Protocol.md:50
#: src/zk-snarks/5-Pinocchio-Protocol.md:52
#: src/zk-snarks/5-Pinocchio-Protocol.md:67
#: src/zk-snarks/5-Pinocchio-Protocol.md:92
#: src/zk-snarks/5-Pinocchio-Protocol.md:97
#: src/zk-snarks/5-Pinocchio-Protocol.md:106
#: src/zk-snarks/5-Pinocchio-Protocol.md:118
#: src/zk-snarks/5-Pinocchio-Protocol.md:129
#: src/zk-snarks/5-Pinocchio-Protocol.md:131
#: src/zk-snarks/5-Pinocchio-Protocol.md:137
#: src/zk-snarks/5-Pinocchio-Protocol.md:142
#: src/zk-snarks/5-Pinocchio-Protocol.md:145
#: src/zk-snarks/5-Pinocchio-Protocol.md:146
#: src/zk-snarks/5-Pinocchio-Protocol.md:147
#: src/zk-snarks/5-Pinocchio-Protocol.md:151
#: src/zk-snarks/5-Pinocchio-Protocol.md:157
#: src/zk-snarks/5-Pinocchio-Protocol.md:160
#: src/zk-snarks/5-Pinocchio-Protocol.md:163
#: src/zk-snarks/5-Pinocchio-Protocol.md:165
#: src/zk-snarks/5-Pinocchio-Protocol.md:168
#: src/zk-snarks/5-Pinocchio-Protocol.md:190
#: src/zk-snarks/5-Pinocchio-Protocol.md:199
#: src/zk-snarks/5-Pinocchio-Protocol.md:204
#: src/zk-snarks/5-Pinocchio-Protocol.md:207
#: src/zk-snarks/5-Pinocchio-Protocol.md:214
#: src/zk-snarks/5-Pinocchio-Protocol.md:225
#: src/halo2/tmp/1-Simple-Example.md:41 src/halo2/tmp/1-Simple-Example.md:439
#: src/halo2/tmp/3-Fibonacci-example-2.md:84
#: src/halo2/tmp/3-Fibonacci-example-2.md:269 src/halo2/tmp/9-decomposed.md:24
#: src/halo2/tmp/9-decomposed.md:30 src/zk-everything/BabySNARK tutorial.md:33
#: tutorial.md:35 tutorial.md:38 tutorial.md:131 tutorial.md:172
#: tutorial.md:177 tutorial.md:181
#: src/zk-everything/zk-learning-miles/KZG.md:185
#: src/zk-everything/zk-learning-miles/KZG.md:203
#: src/zk-everything/zk-learning-miles/KZG.md:211
#: src/zk-everything/zk-learning-miles/KZG.md:248
#: src/zk-everything/zk-learning-miles/KZG.md:270
#: src/zk-everything/zk-learning-miles/KZG.md:274
#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:352 SNARKs.md:354 SNARKs.md:369 SNARKs.md:370 SNARKs.md:371
#: SNARKs.md:372 SNARKs.md:373 SNARKs.md:374
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:58
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:64
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:128
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:134
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:145
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:152
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:162
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:170
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:204
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:212
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:246
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:255
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:292
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:301
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:336
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:343
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:383
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:390
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:396
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:405
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:418
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:448
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:454
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:460
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:486
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:514
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:526
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:532
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:538
#: src/zk-everything/zk-everything-joe/Hyrax.md:58
#: src/zk-everything/zk-everything-joe/Hyrax.md:64
#: src/zk-everything/zk-everything-joe/Hyrax.md:70
#: src/zk-everything/zk-everything-joe/Hyrax.md:80
#: src/zk-everything/zk-everything-joe/Hyrax.md:86
#: src/zk-everything/zk-everything-joe/Hyrax.md:92
#: src/zk-everything/zk-everything-joe/Hyrax.md:98
#: src/zk-everything/zk-everything-joe/Hyrax.md:116
#: src/zk-everything/zk-everything-joe/Hyrax.md:122
#: src/zk-everything/zk-everything-joe/Hyrax.md:147
#: src/zk-everything/zk-everything-joe/Hyrax.md:173
#: src/zk-everything/zk-everything-joe/Hyrax.md:181
#: src/zk-everything/zk-everything-joe/Hyrax.md:191
#: src/zk-everything/zk-everything-joe/Hyrax.md:195
#: src/zk-everything/zk-everything-joe/Hyrax.md:201
#: src/zk-everything/zk-everything-joe/Hyrax.md:208
#: src/zk-everything/zk-everything-joe/Hyrax.md:223
#: src/zk-everything/zk-everything-joe/Hyrax.md:228
#: src/zk-everything/zk-everything-joe/Hyrax.md:250
#: src/zk-everything/zk-everything-joe/Hyrax.md:276
#: src/zk-everything/zk-everything-joe/Hyrax.md:292
#: src/zk-everything/zk-everything-joe/Hyrax.md:297
#: src/zk-everything/zk-everything-joe/Hyrax.md:302
#: src/zk-everything/zk-everything-joe/Hyrax.md:314
#: src/zk-everything/zk-everything-joe/Spartan.md:118
#: src/zk-everything/zk-everything-joe/Spartan.md:172
#: src/zk-everything/zk-everything-joe/Spartan.md:177
#: src/zk-everything/zk-everything-joe/Spartan.md:182
#: src/zk-everything/zk-everything-joe/Spartan.md:195
#: src/zk-everything/zk-everything-joe/Spartan.md:200
#: src/zk-everything/zk-everything-joe/Spartan.md:319
#: src/zk-everything/zk-everything-joe/Spartan.md:323
#: src/zk-everything/zk-everything-joe/Spartan.md:339
#: src/zk-everything/zk-everything-joe/Spartan.md:344
#: src/zk-everything/zk-everything-joe/Spartan.md:350
#: src/zk-everything/zk-everything-joe/Spartan.md:353
#: src/zk-everything/zk-everything-joe/Spartan.md:394
#: src/zk-everything/zk-everything-joe/Spartan.md:401
#: src/zk-everything/zk-everything-joe/Spartan.md:411
#: src/zk-everything/zk-everything-joe/Spartan.md:416
#: src/zk-everything/zk-everything-joe/Spartan.md:436
#: src/zk-everything/zk-everything-joe/Spartan.md:441
#: src/zk-everything/zk-everything-joe/Spartan.md:450
#: src/zk-everything/zk-everything-joe/Spartan.md:455 src/public
#: goods/第二章.md:16 goods/第二章.md:58 goods/第二章.md:60
#: goods/第二章.md:65 goods/第二章.md:74 goods/第二章.md:83
#: goods/第二章.md:84 goods/第二章.md:88 goods/第二章.md:89
#: goods/第二章.md:97 goods/第二章.md:147 goods/第二章.md:177
#: goods/4-Proving-System.md:62 goods/4-Proving-System.md:64
#: goods/4-Proving-System.md:105 goods/4-Proving-System.md:107
#: goods/4-Proving-System.md:111 goods/4-Proving-System.md:120
#: goods/4-Proving-System.md:122 goods/4-Proving-System.md:125
#: goods/4-Proving-System.md:127 goods/4-Proving-System.md:149
#: goods/4-Proving-System.md:155 goods/4-Proving-System.md:167
#: goods/4-Proving-System.md:169 goods/4-Proving-System.md:173
#: goods/4-Proving-System.md:177
msgid "⋅"
msgstr "⋅"

#: src/plonk-intro-cn/plonk-arithmetization.md:20
#: src/plonk-intro-cn/plonk-arithmetization.md:22
#: src/plonk-intro-cn/plonk-arithmetization.md:35
#: src/plonk-intro-cn/plonk-arithmetization.md:39
#: src/plonk-intro-cn/plonk-arithmetization.md:41
#: src/plonk-intro-cn/plonk-arithmetization.md:47
#: src/plonk-intro-cn/plonk-arithmetization.md:51
#: src/plonk-intro-cn/plonk-arithmetization.md:55
#: src/plonk-intro-cn/plonk-arithmetization.md:57
#: src/plonk-intro-cn/plonk-arithmetization.md:59
#: src/plonk-intro-cn/plonk-arithmetization.md:61
#: src/plonk-intro-cn/plonk-arithmetization.md:63
#: src/plonk-intro-cn/plonk-arithmetization.md:65
#: src/plonk-intro-cn/plonk-arithmetization.md:87
#: src/plonk-intro-cn/plonk-arithmetization.md:91
#: src/plonk-intro-cn/plonk-arithmetization.md:93
#: src/plonk-intro-cn/plonk-arithmetization.md:101
#: src/plonk-intro-cn/plonk-arithmetization.md:103
#: src/plonk-intro-cn/plonk-arithmetization.md:105
#: src/plonk-intro-cn/plonk-arithmetization.md:109
#: src/plonk-intro-cn/plonk-arithmetization.md:115
#: src/plonk-intro-cn/plonk-arithmetization.md:123
#: src/plonk-intro-cn/plonk-arithmetization.md:135
#: src/plonk-intro-cn/plonk-arithmetization.md:142
#: src/plonk-intro-cn/plonk-arithmetization.md:145
#: src/plonk-intro-cn/plonk-arithmetization.md:147
#: src/plonk-intro-cn/plonk-arithmetization.md:151
#: src/plonk-intro-cn/plonk-arithmetization.md:159
#: src/plonk-intro-cn/plonk-arithmetization.md:163
#: src/plonk-intro-cn/plonk-arithmetization.md:177
#: src/plonk-intro-cn/plonk-arithmetization.md:179
#: src/plonk-intro-cn/plonk-arithmetization.md:187
#: src/plonk-intro-cn/plonk-arithmetization.md:189
#: src/plonk-intro-cn/plonk-arithmetization.md:191
#: src/plonk-intro-cn/plonk-arithmetization.md:197
#: src/plonk-intro-cn/plonk-arithmetization.md:199
#: src/plonk-intro-cn/plonk-arithmetization.md:201
#: src/plonk-intro-cn/plonk-arithmetization.md:203
#: src/plonk-intro-cn/plonk-arithmetization.md:205
#: src/plonk-intro-cn/plonk-arithmetization.md:209
#: src/plonk-intro-cn/plonk-arithmetization.md:227
#: src/plonk-intro-cn/plonk-arithmetization.md:231
#: src/plonk-intro-cn/plonk-arithmetization.md:237
#: src/plonk-intro-cn/plonk-arithmetization.md:245
#: src/plonk-intro-cn/plonk-arithmetization.md:247
#: src/plonk-intro-cn/plonk-lagrange-basis.md:78
#: src/plonk-intro-cn/plonk-lagrange-basis.md:80
#: src/plonk-intro-cn/plonk-lagrange-basis.md:89
#: src/plonk-intro-cn/plonk-lagrange-basis.md:93
#: src/plonk-intro-cn/plonk-lagrange-basis.md:105
#: src/plonk-intro-cn/plonk-permutation.md:11
#: src/plonk-intro-cn/plonk-permutation.md:13
#: src/plonk-intro-cn/plonk-permutation.md:23
#: src/plonk-intro-cn/plonk-permutation.md:35
#: src/plonk-intro-cn/plonk-permutation.md:36
#: src/plonk-intro-cn/plonk-permutation.md:38
#: src/plonk-intro-cn/plonk-permutation.md:58
#: src/plonk-intro-cn/plonk-permutation.md:108
#: src/plonk-intro-cn/plonk-permutation.md:140
#: src/plonk-intro-cn/plonk-permutation.md:144
#: src/plonk-intro-cn/plonk-permutation.md:148
#: src/plonk-intro-cn/plonk-constraints.md:35
#: src/plonk-intro-cn/plonk-constraints.md:37
#: src/plonk-intro-cn/plonk-constraints.md:39
#: src/plonk-intro-cn/plonk-constraints.md:45
#: src/plonk-intro-cn/plonk-constraints.md:57
#: src/plonk-intro-cn/plonk-constraints.md:59
#: src/plonk-intro-cn/plonk-constraints.md:63
#: src/plonk-intro-cn/plonk-constraints.md:67
#: src/plonk-intro-cn/plonk-constraints.md:93
#: src/plonk-intro-cn/plonk-constraints.md:116
#: src/plonk-intro-cn/plonk-constraints.md:120
#: src/plonk-intro-cn/plonk-constraints.md:145
#: src/plonk-intro-cn/plonk-constraints.md:153
#: src/plonk-intro-cn/plonk-constraints.md:155
#: src/plonk-intro-cn/plonk-constraints.md:192
#: src/plonk-intro-cn/plonk-polycom.md:59
#: src/plonk-intro-cn/plonk-polycom.md:167
#: src/plonk-intro-cn/plonk-polycom.md:169
#: src/plonk-intro-cn/plonk-polycom.md:171
#: src/plonk-intro-cn/plonk-polycom.md:175
#: src/plonk-intro-cn/plonk-polycom.md:193
#: src/plonk-intro-cn/plonk-polycom.md:197
#: src/plonk-intro-cn/plonk-polycom.md:199
#: src/plonk-intro-cn/plonk-polycom.md:201
#: src/plonk-intro-cn/plonk-polycom.md:211
#: src/plonk-intro-cn/plonk-polycom.md:213
#: src/plonk-intro-cn/plonk-polycom.md:217
#: src/plonk-intro-cn/plonk-polycom.md:221
#: src/plonk-intro-cn/plonk-polycom.md:225
#: src/plonk-intro-cn/plonk-randomizing.md:9
#: src/plonk-intro-cn/plonk-randomizing.md:101
#: src/plonk-intro-cn/plonk-randomizing.md:112
#: src/plonk-intro-cn/plonk-randomizing.md:113
#: src/plonk-intro-cn/plonk-randomizing.md:115
#: src/plonk-intro-cn/plonk-randomizing.md:117
#: src/plonk-intro-cn/plonk-randomizing.md:119
#: src/plonk-intro-cn/plonk-randomizing.md:121
#: src/plonk-intro-cn/plonk-randomizing.md:123
#: src/plonk-intro-cn/plonk-randomizing.md:125
#: src/plonk-intro-cn/plonk-randomizing.md:127
#: src/plonk-intro-cn/plonk-randomizing.md:129
#: src/plonk-intro-cn/plonk-lookup.md:17 src/plonk-intro-cn/plonk-lookup.md:43
#: src/plonk-intro-cn/plonk-lookup.md:47 src/plonk-intro-cn/plonk-lookup.md:51
#: src/plonk-intro-cn/plonk-lookup.md:93 src/plonk-intro-cn/plonk-lookup.md:101
#: src/plonk-intro-cn/plonk-lookup.md:111
#: src/plonk-intro-cn/plonk-lookup.md:121
#: src/plonk-intro-cn/plonk-lookup.md:123
#: src/plonk-intro-cn/plonk-lookup.md:129
#: src/plonk-intro-cn/plonk-lookup.md:133
#: src/plonk-intro-cn/plonk-lookup.md:165
#: src/plonk-intro-cn/plonk-lookup.md:175
#: src/plonk-intro-cn/plonk-lookup.md:192
#: src/plonk-intro-cn/plonk-lookup.md:210
#: src/plonk-intro-cn/plonk-lookup.md:216
#: src/plonk-intro-cn/plonk-lookup.md:218
#: src/plonk-intro-cn/plonk-lookup.md:220
#: src/plonk-intro-cn/plonk-lookup.md:228
#: src/plonk-intro-cn/plonk-lookup.md:244
#: src/plonk-intro-cn/plonk-lookup.md:265
#: src/plonk-intro-cn/plonk-lookup.md:273
#: src/plonk-intro-cn/plonk-lookup.md:275
#: src/plonk-intro-cn/plonk-lookup.md:293
#: src/plonk-intro-cn/plonk-lookup.md:297
#: src/plonk-intro-cn/plonk-lookup.md:304
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:96
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:106
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:148
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:150
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:183
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:186
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:190
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:194
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:256
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:260
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:261
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:262
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:269
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:271
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:272
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:308
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:355
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:88
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:229
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:232
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:237
#: src/zk-snarks/3-General-Purpose-Computation.md:72
#: src/zk-snarks/3-General-Purpose-Computation.md:74
#: src/zk-snarks/3-General-Purpose-Computation.md:75
#: src/zk-snarks/3-General-Purpose-Computation.md:79
#: src/zk-snarks/3-General-Purpose-Computation.md:92
#: src/zk-snarks/3-General-Purpose-Computation.md:122
#: src/zk-snarks/3-General-Purpose-Computation.md:127
#: src/zk-snarks/3-General-Purpose-Computation.md:141
#: src/zk-snarks/3-General-Purpose-Computation.md:143
#: src/zk-snarks/3-General-Purpose-Computation.md:149
#: src/zk-snarks/3-General-Purpose-Computation.md:157
#: src/zk-snarks/3-General-Purpose-Computation.md:159
#: src/zk-snarks/3-General-Purpose-Computation.md:171
#: src/zk-snarks/3-General-Purpose-Computation.md:173
#: src/zk-snarks/3-General-Purpose-Computation.md:237
#: src/zk-snarks/3-General-Purpose-Computation.md:315
#: src/zk-snarks/3-General-Purpose-Computation.md:326
#: src/zk-snarks/3-General-Purpose-Computation.md:331
#: src/zk-snarks/3-General-Purpose-Computation.md:336
#: src/zk-snarks/3-General-Purpose-Computation.md:384
#: src/zk-snarks/4-Construction-Properties.md:29
#: src/zk-snarks/4-Construction-Properties.md:48
#: src/zk-snarks/4-Construction-Properties.md:76
#: src/zk-snarks/4-Construction-Properties.md:127
#: src/zk-snarks/4-Construction-Properties.md:133
#: src/zk-snarks/4-Construction-Properties.md:134
#: src/zk-snarks/4-Construction-Properties.md:135
#: src/zk-snarks/4-Construction-Properties.md:136
#: src/zk-snarks/4-Construction-Properties.md:137
#: src/zk-snarks/4-Construction-Properties.md:138
#: src/zk-snarks/4-Construction-Properties.md:139
#: src/zk-snarks/4-Construction-Properties.md:149
#: src/zk-snarks/4-Construction-Properties.md:155
#: src/zk-snarks/4-Construction-Properties.md:162
#: src/zk-snarks/4-Construction-Properties.md:164
#: src/zk-snarks/4-Construction-Properties.md:168
#: src/zk-snarks/4-Construction-Properties.md:170
#: src/zk-snarks/4-Construction-Properties.md:171
#: src/zk-snarks/4-Construction-Properties.md:172
#: src/zk-snarks/4-Construction-Properties.md:178
#: src/zk-snarks/4-Construction-Properties.md:184
#: src/zk-snarks/4-Construction-Properties.md:330
#: src/zk-snarks/4-Construction-Properties.md:331
#: src/zk-snarks/4-Construction-Properties.md:333
#: src/zk-snarks/4-Construction-Properties.md:375
#: src/zk-snarks/4-Construction-Properties.md:379
#: src/zk-snarks/4-Construction-Properties.md:381
#: src/zk-snarks/5-Pinocchio-Protocol.md:29
#: src/zk-snarks/5-Pinocchio-Protocol.md:31
#: src/zk-snarks/5-Pinocchio-Protocol.md:32
#: src/zk-snarks/5-Pinocchio-Protocol.md:33
#: src/zk-snarks/5-Pinocchio-Protocol.md:34 src/halo2/tmp/9-decomposed.md:24
#: src/halo2/tmp/9-decomposed.md:29 src/halo2/tmp/9-decomposed.md:30
#: src/halo2/tmp/9-decomposed.md:37 src/halo2/tmp/9-decomposed.md:40
#: src/halo2/tmp/9-decomposed.md:43 src/halo2/tmp/9-decomposed.md:44
#: src/halo2/tmp/9-decomposed.md:47 src/halo2/tmp/9-decomposed.md:48
#: src/halo2/tmp/9-decomposed.md:53 src/halo2/tmp/9-decomposed.md:138
#: src/halo2/tmp/9-decomposed.md:178 src/halo2/tmp/9-decomposed.md:179
#: src/halo2/tmp/9-decomposed.md:180 src/halo2/tmp/9-decomposed.md:181
#: src/halo2/tmp/9-decomposed.md:182 src/zk-everything/BabySNARK
#: tutorial.md:116 src/zk-everything/zk-learning-miles/KZG.md:10
#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:272 SNARKs.md:320
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:50
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:111
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:119
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:122
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:128
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:145
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:152
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:162
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:166
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:170
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:176
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:188
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:192
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:194
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:202
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:204
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:206
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:212
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:218
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:224
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:230
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:236
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:244
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:246
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:255
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:259
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:262
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:268
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:275
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:279
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:281
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:289
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:292
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:301
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:307
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:314
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:319
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:325
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:333
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:343
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:349
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:355
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:361
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:367
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:377
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:383
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:390
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:396
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:405
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:412
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:418
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:424
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:430
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:442
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:448
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:460
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:486
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:490
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:493
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:506
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:520
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:526
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:530
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:532
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:538
#: src/zk-everything/zk-everything-joe/Hyrax.md:86
#: src/zk-everything/zk-everything-joe/Hyrax.md:92
#: src/zk-everything/zk-everything-joe/Hyrax.md:98
#: src/zk-everything/zk-everything-joe/Hyrax.md:102
#: src/zk-everything/zk-everything-joe/Hyrax.md:116
#: src/zk-everything/zk-everything-joe/Hyrax.md:122
#: src/zk-everything/zk-everything-joe/Hyrax.md:147
#: src/zk-everything/zk-everything-joe/Hyrax.md:191
#: src/zk-everything/zk-everything-joe/Hyrax.md:195
#: src/zk-everything/zk-everything-joe/Hyrax.md:203
#: src/zk-everything/zk-everything-joe/Hyrax.md:207
#: src/zk-everything/zk-everything-joe/Hyrax.md:214
#: src/zk-everything/zk-everything-joe/Hyrax.md:216
#: src/zk-everything/zk-everything-joe/Hyrax.md:223
#: src/zk-everything/zk-everything-joe/Hyrax.md:228
#: src/zk-everything/zk-everything-joe/Hyrax.md:245
#: src/zk-everything/zk-everything-joe/Hyrax.md:250
#: src/zk-everything/zk-everything-joe/Hyrax.md:277
#: src/zk-everything/zk-everything-joe/Hyrax.md:282
#: src/zk-everything/zk-everything-joe/Hyrax.md:311
#: src/zk-everything/zk-everything-joe/Spartan.md:110
#: src/zk-everything/zk-everything-joe/Spartan.md:115
#: src/zk-everything/zk-everything-joe/Spartan.md:118
#: src/zk-everything/zk-everything-joe/Spartan.md:126
#: src/zk-everything/zk-everything-joe/Spartan.md:136
#: src/zk-everything/zk-everything-joe/Spartan.md:142
#: src/zk-everything/zk-everything-joe/Spartan.md:143
#: src/zk-everything/zk-everything-joe/Spartan.md:147
#: src/zk-everything/zk-everything-joe/Spartan.md:148
#: src/zk-everything/zk-everything-joe/Spartan.md:154
#: src/zk-everything/zk-everything-joe/Spartan.md:169
#: src/zk-everything/zk-everything-joe/Spartan.md:172
#: src/zk-everything/zk-everything-joe/Spartan.md:182
#: src/zk-everything/zk-everything-joe/Spartan.md:195
#: src/zk-everything/zk-everything-joe/Spartan.md:246
#: src/zk-everything/zk-everything-joe/Spartan.md:257
#: src/zk-everything/zk-everything-joe/Spartan.md:268
#: src/zk-everything/zk-everything-joe/Spartan.md:278
#: src/zk-everything/zk-everything-joe/Spartan.md:309
#: src/zk-everything/zk-everything-joe/Spartan.md:334
#: src/zk-everything/zk-everything-joe/Spartan.md:343
#: src/zk-everything/zk-everything-joe/Spartan.md:344
#: src/zk-everything/zk-everything-joe/Spartan.md:347
#: src/zk-everything/zk-everything-joe/Spartan.md:349
#: src/zk-everything/zk-everything-joe/Spartan.md:360
#: src/zk-everything/zk-everything-joe/Spartan.md:377
#: src/zk-everything/zk-everything-joe/Spartan.md:382
#: src/zk-everything/zk-everything-joe/Spartan.md:394
#: src/zk-everything/zk-everything-joe/Spartan.md:450 src/public
#: goods/第二章.md:86
msgid "3"
msgstr "3"

#: src/plonk-intro-cn/plonk-arithmetization.md:20
#: src/plonk-intro-cn/plonk-arithmetization.md:22
#: src/plonk-intro-cn/plonk-arithmetization.md:35
#: src/plonk-intro-cn/plonk-arithmetization.md:41
#: src/plonk-intro-cn/plonk-arithmetization.md:45
#: src/plonk-intro-cn/plonk-arithmetization.md:47
#: src/plonk-intro-cn/plonk-arithmetization.md:51
#: src/plonk-intro-cn/plonk-arithmetization.md:55
#: src/plonk-intro-cn/plonk-arithmetization.md:57
#: src/plonk-intro-cn/plonk-arithmetization.md:87
#: src/plonk-intro-cn/plonk-arithmetization.md:91
#: src/plonk-intro-cn/plonk-arithmetization.md:93
#: src/plonk-intro-cn/plonk-arithmetization.md:101
#: src/plonk-intro-cn/plonk-arithmetization.md:105
#: src/plonk-intro-cn/plonk-arithmetization.md:109
#: src/plonk-intro-cn/plonk-arithmetization.md:115
#: src/plonk-intro-cn/plonk-arithmetization.md:123
#: src/plonk-intro-cn/plonk-arithmetization.md:143
#: src/plonk-intro-cn/plonk-arithmetization.md:147
#: src/plonk-intro-cn/plonk-arithmetization.md:159
#: src/plonk-intro-cn/plonk-arithmetization.md:163
#: src/plonk-intro-cn/plonk-arithmetization.md:179
#: src/plonk-intro-cn/plonk-arithmetization.md:227
#: src/plonk-intro-cn/plonk-arithmetization.md:231
#: src/plonk-intro-cn/plonk-arithmetization.md:233
#: src/plonk-intro-cn/plonk-arithmetization.md:239
#: src/plonk-intro-cn/plonk-arithmetization.md:243
#: src/plonk-intro-cn/plonk-permutation.md:11
#: src/plonk-intro-cn/plonk-permutation.md:120
#: src/plonk-intro-cn/plonk-constraints.md:57
#: src/plonk-intro-cn/plonk-constraints.md:125
#: src/plonk-intro-cn/plonk-lookup.md:113
#: src/plonk-intro-cn/plonk-lookup.md:117
#: src/plonk-intro-cn/plonk-lookup.md:121
#: src/plonk-intro-cn/plonk-lookup.md:129
#: src/plonk-intro-cn/plonk-lookup.md:131
#: src/plonk-intro-cn/plonk-lookup.md:133
#: src/plonk-intro-cn/plonk-lookup.md:135
#: src/plonk-intro-cn/plonk-lookup.md:137
#: src/plonk-intro-cn/plonk-lookup.md:139
#: src/plonk-intro-cn/plonk-lookup.md:188
#: src/plonk-intro-cn/plonk-lookup.md:224
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:271
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:26
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:194
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:281
#: src/zk-snarks/3-General-Purpose-Computation.md:137
#: src/zk-snarks/3-General-Purpose-Computation.md:233
#: src/zk-snarks/3-General-Purpose-Computation.md:279
#: src/zk-snarks/3-General-Purpose-Computation.md:295
#: src/zk-snarks/3-General-Purpose-Computation.md:306
#: src/zk-snarks/3-General-Purpose-Computation.md:369
#: src/zk-snarks/3-General-Purpose-Computation.md:374
#: src/zk-snarks/4-Construction-Properties.md:46
#: src/zk-snarks/4-Construction-Properties.md:85
#: src/zk-snarks/4-Construction-Properties.md:95
#: src/zk-snarks/4-Construction-Properties.md:271
#: src/zk-snarks/5-Pinocchio-Protocol.md:139
#: src/zk-snarks/5-Pinocchio-Protocol.md:187
#: src/zk-snarks/5-Pinocchio-Protocol.md:198 src/halo2/chap-1/index.md:11
#: src/halo2/tmp/1-Simple-Example.md:152 src/halo2/tmp/1-Simple-Example.md:553
#: src/halo2/tmp/3-Fibonacci-example-2.md:426
#: src/halo2/tmp/4-IsZero-Check-example-3.md:127
#: src/halo2/tmp/4-IsZero-Check-example-3.md:128
#: src/halo2/tmp/9-decomposed.md:39 src/halo2/tmp/9-decomposed.md:40
#: src/halo2/tmp/9-decomposed.md:43 src/halo2/tmp/9-decomposed.md:44
#: src/halo2/tmp/9-decomposed.md:47 src/halo2/tmp/9-decomposed.md:48
#: src/halo2/tmp/9-decomposed.md:101 src/halo2/tmp/9-decomposed.md:104
#: src/halo2/tmp/9-decomposed.md:273
#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:273 SNARKs.md:276
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:58
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:64
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:87
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:134
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:145
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:152
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:396
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:448
#: src/zk-everything/zk-everything-joe/Hyrax.md:58
#: src/zk-everything/zk-everything-joe/Hyrax.md:64
#: src/zk-everything/zk-everything-joe/Hyrax.md:70
#: src/zk-everything/zk-everything-joe/Hyrax.md:98
#: src/zk-everything/zk-everything-joe/Hyrax.md:156
#: src/zk-everything/zk-everything-joe/Hyrax.md:162
#: src/zk-everything/zk-everything-joe/Hyrax.md:166
#: src/zk-everything/zk-everything-joe/Hyrax.md:173
#: src/zk-everything/zk-everything-joe/Hyrax.md:181
#: src/zk-everything/zk-everything-joe/Hyrax.md:191
#: src/zk-everything/zk-everything-joe/Spartan.md:25
#: src/zk-everything/zk-everything-joe/Spartan.md:89
#: src/zk-everything/zk-everything-joe/Spartan.md:93
#: src/zk-everything/zk-everything-joe/Spartan.md:143
#: src/zk-everything/zk-everything-joe/Spartan.md:154
#: src/zk-everything/zk-everything-joe/Spartan.md:155
#: src/zk-everything/zk-everything-joe/Spartan.md:166
#: src/zk-everything/zk-everything-joe/Spartan.md:195
#: src/zk-everything/zk-everything-joe/Spartan.md:200
#: src/zk-everything/zk-everything-joe/Spartan.md:217
#: src/zk-everything/zk-everything-joe/Spartan.md:232
#: src/zk-everything/zk-everything-joe/Spartan.md:263
#: src/zk-everything/zk-everything-joe/Spartan.md:264
#: src/zk-everything/zk-everything-joe/Spartan.md:312
#: src/zk-everything/zk-everything-joe/Spartan.md:314 src/Nova/SuperNova.md:31
#: src/Nova/SuperNova.md:66 src/Nova/SuperNova.md:68 src/public
#: goods/第二章.md:10 goods/第二章.md:17 goods/第二章.md:26
#: goods/第二章.md:33 goods/第二章.md:35 goods/第二章.md:84
#: goods/第二章.md:86 goods/第二章.md:97 goods/第二章.md:125
#: goods/第二章.md:129 goods/第二章.md:146 goods/第二章.md:147
msgid "u"
msgstr "u"

#: src/plonk-intro-cn/plonk-arithmetization.md:20
#: src/plonk-intro-cn/plonk-arithmetization.md:22
#: src/plonk-intro-cn/plonk-arithmetization.md:35
#: src/plonk-intro-cn/plonk-arithmetization.md:41
#: src/plonk-intro-cn/plonk-arithmetization.md:45
#: src/plonk-intro-cn/plonk-arithmetization.md:47
#: src/plonk-intro-cn/plonk-arithmetization.md:51
#: src/plonk-intro-cn/plonk-arithmetization.md:55
#: src/plonk-intro-cn/plonk-arithmetization.md:57
#: src/plonk-intro-cn/plonk-arithmetization.md:87
#: src/plonk-intro-cn/plonk-arithmetization.md:91
#: src/plonk-intro-cn/plonk-arithmetization.md:93
#: src/plonk-intro-cn/plonk-arithmetization.md:101
#: src/plonk-intro-cn/plonk-arithmetization.md:105
#: src/plonk-intro-cn/plonk-arithmetization.md:109
#: src/plonk-intro-cn/plonk-arithmetization.md:115
#: src/plonk-intro-cn/plonk-arithmetization.md:123
#: src/plonk-intro-cn/plonk-arithmetization.md:143
#: src/plonk-intro-cn/plonk-arithmetization.md:147
#: src/plonk-intro-cn/plonk-arithmetization.md:159
#: src/plonk-intro-cn/plonk-arithmetization.md:163
#: src/plonk-intro-cn/plonk-arithmetization.md:179
#: src/plonk-intro-cn/plonk-arithmetization.md:227
#: src/plonk-intro-cn/plonk-arithmetization.md:231
#: src/plonk-intro-cn/plonk-arithmetization.md:233
#: src/plonk-intro-cn/plonk-arithmetization.md:239
#: src/plonk-intro-cn/plonk-arithmetization.md:243
#: src/plonk-intro-cn/plonk-permutation.md:11
#: src/plonk-intro-cn/plonk-permutation.md:120
#: src/plonk-intro-cn/plonk-constraints.md:57
#: src/plonk-intro-cn/plonk-constraints.md:125
#: src/plonk-intro-cn/plonk-constraints.md:173
#: src/plonk-intro-cn/plonk-constraints.md:181
#: src/plonk-intro-cn/plonk-constraints.md:188
#: src/plonk-intro-cn/plonk-constraints.md:199
#: src/plonk-intro-cn/plonk-polycom.md:9 src/plonk-intro-cn/plonk-polycom.md:15
#: src/plonk-intro-cn/plonk-polycom.md:35
#: src/plonk-intro-cn/plonk-randomizing.md:19
#: src/plonk-intro-cn/plonk-randomizing.md:41
#: src/plonk-intro-cn/plonk-randomizing.md:59
#: src/plonk-intro-cn/plonk-randomizing.md:61
#: src/plonk-intro-cn/plonk-randomizing.md:63
#: src/plonk-intro-cn/plonk-randomizing.md:65
#: src/plonk-intro-cn/plonk-randomizing.md:69
#: src/plonk-intro-cn/plonk-randomizing.md:71
#: src/plonk-intro-cn/plonk-randomizing.md:73
#: src/plonk-intro-cn/plonk-lookup.md:41 src/plonk-intro-cn/plonk-lookup.md:43
#: src/plonk-intro-cn/plonk-lookup.md:45 src/plonk-intro-cn/plonk-lookup.md:49
#: src/plonk-intro-cn/plonk-lookup.md:51 src/plonk-intro-cn/plonk-lookup.md:53
#: src/plonk-intro-cn/plonk-lookup.md:55 src/plonk-intro-cn/plonk-lookup.md:57
#: src/plonk-intro-cn/plonk-lookup.md:59 src/plonk-intro-cn/plonk-lookup.md:61
#: src/plonk-intro-cn/plonk-lookup.md:63 src/plonk-intro-cn/plonk-lookup.md:65
#: src/plonk-intro-cn/plonk-lookup.md:67 src/plonk-intro-cn/plonk-lookup.md:75
#: src/plonk-intro-cn/plonk-lookup.md:79 src/plonk-intro-cn/plonk-lookup.md:81
#: src/plonk-intro-cn/plonk-lookup.md:87 src/plonk-intro-cn/plonk-lookup.md:93
#: src/plonk-intro-cn/plonk-lookup.md:97 src/plonk-intro-cn/plonk-lookup.md:101
#: src/plonk-intro-cn/plonk-lookup.md:105
#: src/plonk-intro-cn/plonk-lookup.md:107
#: src/plonk-intro-cn/plonk-lookup.md:109
#: src/plonk-intro-cn/plonk-lookup.md:111
#: src/plonk-intro-cn/plonk-lookup.md:113
#: src/plonk-intro-cn/plonk-lookup.md:115
#: src/plonk-intro-cn/plonk-lookup.md:117
#: src/plonk-intro-cn/plonk-lookup.md:121
#: src/plonk-intro-cn/plonk-lookup.md:125
#: src/plonk-intro-cn/plonk-lookup.md:127
#: src/plonk-intro-cn/plonk-lookup.md:129
#: src/plonk-intro-cn/plonk-lookup.md:131
#: src/plonk-intro-cn/plonk-lookup.md:133
#: src/plonk-intro-cn/plonk-lookup.md:135
#: src/plonk-intro-cn/plonk-lookup.md:137
#: src/plonk-intro-cn/plonk-lookup.md:139
#: src/plonk-intro-cn/plonk-lookup.md:141
#: src/plonk-intro-cn/plonk-lookup.md:145
#: src/plonk-intro-cn/plonk-lookup.md:149
#: src/plonk-intro-cn/plonk-lookup.md:153
#: src/plonk-intro-cn/plonk-lookup.md:157
#: src/plonk-intro-cn/plonk-lookup.md:161
#: src/plonk-intro-cn/plonk-lookup.md:167
#: src/plonk-intro-cn/plonk-lookup.md:173
#: src/plonk-intro-cn/plonk-lookup.md:175
#: src/plonk-intro-cn/plonk-lookup.md:188
#: src/plonk-intro-cn/plonk-lookup.md:200
#: src/plonk-intro-cn/plonk-lookup.md:212
#: src/plonk-intro-cn/plonk-lookup.md:214
#: src/plonk-intro-cn/plonk-lookup.md:216
#: src/plonk-intro-cn/plonk-lookup.md:220
#: src/plonk-intro-cn/plonk-lookup.md:224
#: src/plonk-intro-cn/plonk-lookup.md:238
#: src/plonk-intro-cn/plonk-lookup.md:244
#: src/plonk-intro-cn/plonk-lookup.md:247
#: src/plonk-intro-cn/plonk-lookup.md:259
#: src/plonk-intro-cn/plonk-lookup.md:265
#: src/plonk-intro-cn/plonk-lookup.md:273
#: src/plonk-intro-cn/plonk-lookup.md:275
#: src/plonk-intro-cn/plonk-lookup.md:277
#: src/plonk-intro-cn/plonk-lookup.md:297
#: src/plonk-intro-cn/plonk-lookup.md:302
#: src/plonk-intro-cn/plonk-lookup.md:304
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:114
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:115
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:116
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:118
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:120
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:137
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:138
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:139
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:143
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:144
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:148
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:149
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:150
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:152
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:159
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:160
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:166
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:167
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:168
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:174
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:271
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:272
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:316
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:317
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:318
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:325
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:330
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:331
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:341
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:342
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:343
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:26
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:30
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:111
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:126
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:128
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:132
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:139
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:185
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:189
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:193
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:194
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:260
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:266
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:270
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:281
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:282
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:283
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:293
#: src/zk-snarks/3-General-Purpose-Computation.md:70
#: src/zk-snarks/3-General-Purpose-Computation.md:81
#: src/zk-snarks/3-General-Purpose-Computation.md:83
#: src/zk-snarks/3-General-Purpose-Computation.md:90
#: src/zk-snarks/3-General-Purpose-Computation.md:98
#: src/zk-snarks/3-General-Purpose-Computation.md:102
#: src/zk-snarks/3-General-Purpose-Computation.md:105
#: src/zk-snarks/3-General-Purpose-Computation.md:108
#: src/zk-snarks/3-General-Purpose-Computation.md:137
#: src/zk-snarks/3-General-Purpose-Computation.md:155
#: src/zk-snarks/3-General-Purpose-Computation.md:157
#: src/zk-snarks/3-General-Purpose-Computation.md:159
#: src/zk-snarks/3-General-Purpose-Computation.md:171
#: src/zk-snarks/3-General-Purpose-Computation.md:180
#: src/zk-snarks/3-General-Purpose-Computation.md:182
#: src/zk-snarks/3-General-Purpose-Computation.md:184
#: src/zk-snarks/3-General-Purpose-Computation.md:233
#: src/zk-snarks/3-General-Purpose-Computation.md:279
#: src/zk-snarks/3-General-Purpose-Computation.md:295
#: src/zk-snarks/3-General-Purpose-Computation.md:306
#: src/zk-snarks/3-General-Purpose-Computation.md:366
#: src/zk-snarks/3-General-Purpose-Computation.md:369
#: src/zk-snarks/4-Construction-Properties.md:46
#: src/zk-snarks/4-Construction-Properties.md:85
#: src/zk-snarks/4-Construction-Properties.md:95
#: src/zk-snarks/4-Construction-Properties.md:113
#: src/zk-snarks/4-Construction-Properties.md:130
#: src/zk-snarks/4-Construction-Properties.md:176
#: src/zk-snarks/4-Construction-Properties.md:178
#: src/zk-snarks/4-Construction-Properties.md:184
#: src/zk-snarks/4-Construction-Properties.md:197
#: src/zk-snarks/4-Construction-Properties.md:200
#: src/zk-snarks/4-Construction-Properties.md:205
#: src/zk-snarks/4-Construction-Properties.md:219
#: src/zk-snarks/4-Construction-Properties.md:221
#: src/zk-snarks/4-Construction-Properties.md:245
#: src/zk-snarks/4-Construction-Properties.md:271
#: src/zk-snarks/4-Construction-Properties.md:340
#: src/zk-snarks/4-Construction-Properties.md:359
#: src/zk-snarks/4-Construction-Properties.md:424
#: src/zk-snarks/4-Construction-Properties.md:436
#: src/zk-snarks/4-Construction-Properties.md:441
#: src/zk-snarks/5-Pinocchio-Protocol.md:92
#: src/zk-snarks/5-Pinocchio-Protocol.md:109
#: src/zk-snarks/5-Pinocchio-Protocol.md:129
#: src/zk-snarks/5-Pinocchio-Protocol.md:133
#: src/zk-snarks/5-Pinocchio-Protocol.md:139
#: src/zk-snarks/5-Pinocchio-Protocol.md:142
#: src/zk-snarks/5-Pinocchio-Protocol.md:145
#: src/zk-snarks/5-Pinocchio-Protocol.md:147
#: src/zk-snarks/5-Pinocchio-Protocol.md:151
#: src/zk-snarks/5-Pinocchio-Protocol.md:152
#: src/zk-snarks/5-Pinocchio-Protocol.md:154
#: src/zk-snarks/5-Pinocchio-Protocol.md:155
#: src/zk-snarks/5-Pinocchio-Protocol.md:157
#: src/zk-snarks/5-Pinocchio-Protocol.md:159
#: src/zk-snarks/5-Pinocchio-Protocol.md:160
#: src/zk-snarks/5-Pinocchio-Protocol.md:163
#: src/zk-snarks/5-Pinocchio-Protocol.md:165
#: src/zk-snarks/5-Pinocchio-Protocol.md:168
#: src/zk-snarks/5-Pinocchio-Protocol.md:170
#: src/zk-snarks/5-Pinocchio-Protocol.md:173
#: src/zk-snarks/5-Pinocchio-Protocol.md:188
#: src/zk-snarks/5-Pinocchio-Protocol.md:192
#: src/zk-snarks/5-Pinocchio-Protocol.md:195
#: src/zk-snarks/5-Pinocchio-Protocol.md:202
#: src/zk-snarks/5-Pinocchio-Protocol.md:204
#: src/zk-snarks/5-Pinocchio-Protocol.md:207
#: src/zk-snarks/5-Pinocchio-Protocol.md:225 src/halo2/chap-1/index.md:11
#: src/halo2/tmp/1-Simple-Example.md:152 src/halo2/tmp/1-Simple-Example.md:553
#: src/halo2/tmp/9-decomposed.md:30 src/halo2/tmp/9-decomposed.md:130
#: src/halo2/tmp/9-decomposed.md:273 src/zk-everything/BabySNARK
#: tutorial.md:127 tutorial.md:129 tutorial.md:145 tutorial.md:177
#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:42
#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:197 SNARKs.md:387 SNARKs.md:390
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:416
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:418
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:428
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:434
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:446
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:497
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:500
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:512
#: src/zk-everything/zk-everything-joe/Spartan.md:23
#: src/zk-everything/zk-everything-joe/Spartan.md:24
#: src/zk-everything/zk-everything-joe/Spartan.md:25
#: src/zk-everything/zk-everything-joe/Spartan.md:26
#: src/zk-everything/zk-everything-joe/Spartan.md:89
#: src/zk-everything/zk-everything-joe/Spartan.md:93
#: src/zk-everything/zk-everything-joe/Spartan.md:136
#: src/zk-everything/zk-everything-joe/Spartan.md:143
#: src/zk-everything/zk-everything-joe/Spartan.md:154
#: src/zk-everything/zk-everything-joe/Spartan.md:155
#: src/zk-everything/zk-everything-joe/Spartan.md:166
#: src/zk-everything/zk-everything-joe/Spartan.md:177
#: src/zk-everything/zk-everything-joe/Spartan.md:195
#: src/zk-everything/zk-everything-joe/Spartan.md:200
#: src/zk-everything/zk-everything-joe/Spartan.md:207
#: src/zk-everything/zk-everything-joe/Spartan.md:217
#: src/zk-everything/zk-everything-joe/Spartan.md:232
#: src/zk-everything/zk-everything-joe/Spartan.md:236
#: src/zk-everything/zk-everything-joe/Spartan.md:240
#: src/zk-everything/zk-everything-joe/Spartan.md:242
#: src/zk-everything/zk-everything-joe/Spartan.md:246
#: src/zk-everything/zk-everything-joe/Spartan.md:254
#: src/zk-everything/zk-everything-joe/Spartan.md:257
#: src/zk-everything/zk-everything-joe/Spartan.md:263
#: src/zk-everything/zk-everything-joe/Spartan.md:264
#: src/zk-everything/zk-everything-joe/Spartan.md:268
#: src/zk-everything/zk-everything-joe/Spartan.md:275
#: src/zk-everything/zk-everything-joe/Spartan.md:278
#: src/zk-everything/zk-everything-joe/Spartan.md:353
#: src/zk-everything/zk-everything-joe/Spartan.md:355 src/Nova/SuperNova.md:31
#: src/public goods/第二章.md:9 goods/第二章.md:10 goods/第二章.md:16
#: goods/第二章.md:17 goods/第二章.md:18 goods/第二章.md:19
#: goods/第二章.md:20 goods/第二章.md:25 goods/第二章.md:26
#: goods/第二章.md:33 goods/第二章.md:52 goods/第二章.md:54
#: goods/第二章.md:56 goods/第二章.md:125 goods/第二章.md:129
#: goods/第二章.md:146 goods/4-Proving-System.md:58
#: goods/4-Proving-System.md:157 goods/4-Proving-System.md:192
#: goods/4-Proving-System.md:209
msgid "t"
msgstr "t"

#: src/plonk-intro-cn/plonk-arithmetization.md:22
msgid "电路中有4个变量，其中三个变量为输入变量 "
msgstr "电路中有4个变量，其中三个变量为输入变量 "

#: src/plonk-intro-cn/plonk-arithmetization.md:22
msgid " ，一个输出变量 "
msgstr " ，一个输出变量 "

#: src/plonk-intro-cn/plonk-arithmetization.md:22
msgid "，其中还有一个输入为常数，其值为 "
msgstr "，其中还有一个输入为常数，其值为 "

#: src/plonk-intro-cn/plonk-arithmetization.md:22
#: src/plonk-intro-cn/plonk-arithmetization.md:135
#: src/plonk-intro-cn/plonk-lagrange-basis.md:76
#: src/plonk-intro-cn/plonk-lagrange-basis.md:95
#: src/plonk-intro-cn/plonk-lagrange-basis.md:115
#: src/plonk-intro-cn/plonk-lagrange-basis.md:123
#: src/plonk-intro-cn/plonk-permutation.md:98
#: src/plonk-intro-cn/plonk-permutation.md:106
#: src/plonk-intro-cn/plonk-permutation.md:108
#: src/plonk-intro-cn/plonk-constraints.md:41
#: src/plonk-intro-cn/plonk-constraints.md:47
#: src/plonk-intro-cn/plonk-constraints.md:59
#: src/plonk-intro-cn/plonk-constraints.md:73
#: src/plonk-intro-cn/plonk-constraints.md:153
#: src/plonk-intro-cn/plonk-constraints.md:155
#: src/plonk-intro-cn/plonk-polycom.md:15
#: src/plonk-intro-cn/plonk-polycom.md:23
#: src/plonk-intro-cn/plonk-polycom.md:49
#: src/plonk-intro-cn/plonk-polycom.md:55
#: src/plonk-intro-cn/plonk-polycom.md:61
#: src/plonk-intro-cn/plonk-polycom.md:193
#: src/plonk-intro-cn/plonk-randomizing.md:35
#: src/plonk-intro-cn/plonk-lookup.md:33 src/plonk-intro-cn/plonk-lookup.md:55
#: src/plonk-intro-cn/plonk-lookup.md:107
#: src/plonk-intro-cn/plonk-lookup.md:113
#: src/plonk-intro-cn/plonk-lookup.md:129
#: src/plonk-intro-cn/plonk-lookup.md:131
#: src/plonk-intro-cn/plonk-lookup.md:133
#: src/plonk-intro-cn/plonk-lookup.md:135
#: src/plonk-intro-cn/plonk-lookup.md:137
#: src/plonk-intro-cn/plonk-lookup.md:139
#: src/plonk-intro-cn/plonk-lookup.md:230
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:96
#: src/zk-everything/BabySNARK tutorial.md:127 tutorial.md:150
#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:390 src/zk-everything/zk-everything-joe/Hyrax.md:48
#: src/zk-everything/zk-everything-joe/Hyrax.md:142
#: src/zk-everything/zk-everything-joe/Hyrax.md:254
#: src/zk-everything/zk-everything-joe/Hyrax.md:269
#: src/zk-everything/zk-everything-joe/Hyrax.md:315
#: src/zk-everything/zk-everything-joe/Spartan.md:122 src/Nova/SuperNova.md:12
#: src/public goods/第二章.md:70 goods/4-Proving-System.md:135
msgid "。"
msgstr "。"

#: src/plonk-intro-cn/plonk-arithmetization.md:24
msgid ""
"一个电路有两种状态：「空白态」和「运算态」。当输入变量没有具体值的时候，电路"
"处于「空白态」，这时我们只能描述电路引线之间的关系，即电路的结构拓扑。"
msgstr ""
"一个电路有两种状态：「空白态」和「运算态」。当输入变量没有具体值的时候，电路"
"处于「空白态」，这时我们只能描述电路引线之间的关系，即电路的结构拓扑。"

#: src/plonk-intro-cn/plonk-arithmetization.md:27
msgid "![](img/img20230414162845.png)"
msgstr "![](img/img20230414162845.png)"

#: src/plonk-intro-cn/plonk-arithmetization.md:29
msgid ""
"接下来的问题是，我们要先编码电路的「空白态」，即编码各个门的位置，和他们之间"
"引线连接关系。"
msgstr ""
"接下来的问题是，我们要先编码电路的「空白态」，即编码各个门的位置，和他们之间"
"引线连接关系。"

#: src/plonk-intro-cn/plonk-arithmetization.md:31
msgid ""
"R1CS 是通过图中的乘法门为中心，用三个「选择子」矩阵来「选择」乘法门的「左输"
"入」、「右输入」、「输出」都分别连接了那些变量。"
msgstr ""
"R1CS 是通过图中的乘法门为中心，用三个「选择子」矩阵来「选择」乘法门的「左输"
"入」、「右输入」、「输出」都分别连接了那些变量。"

#: src/plonk-intro-cn/plonk-arithmetization.md:33
msgid "我们先看看图中最上面的乘法门的左输入，可以用下面的表格来描述："
msgstr "我们先看看图中最上面的乘法门的左输入，可以用下面的表格来描述："

#: src/plonk-intro-cn/plonk-arithmetization.md:37
msgid "这个表格只有一行，因此我们可以用一个向量 "
msgstr "这个表格只有一行，因此我们可以用一个向量 "

#: src/plonk-intro-cn/plonk-arithmetization.md:37
#: src/plonk-intro-cn/plonk-arithmetization.md:49
#: src/plonk-intro-cn/plonk-arithmetization.md:51
#: src/plonk-intro-cn/plonk-arithmetization.md:59
#: src/plonk-intro-cn/plonk-arithmetization.md:63
#: src/plonk-intro-cn/plonk-arithmetization.md:77
#: src/plonk-intro-cn/plonk-arithmetization.md:97
#: src/plonk-intro-cn/plonk-arithmetization.md:99
#: src/plonk-intro-cn/plonk-arithmetization.md:119
#: src/plonk-intro-cn/plonk-arithmetization.md:129
#: src/plonk-intro-cn/plonk-arithmetization.md:217 src/zk-everything/BabySNARK
#: tutorial.md:154 tutorial.md:156 tutorial.md:158 src/Nova/SuperNova.md:17
#: src/public goods/第二章.md:16 goods/第二章.md:19 goods/第二章.md:83
msgid "U"
msgstr "U"

#: src/plonk-intro-cn/plonk-arithmetization.md:37
msgid " 来代替，表示乘法门的左输入连接了两个变量， "
msgstr " 来代替，表示乘法门的左输入连接了两个变量， "

#: src/plonk-intro-cn/plonk-arithmetization.md:37
#: src/plonk-intro-cn/plonk-arithmetization.md:177
#: src/plonk-intro-cn/plonk-arithmetization.md:181
#: src/plonk-intro-cn/plonk-arithmetization.md:189
#: src/plonk-intro-cn/plonk-arithmetization.md:205
#: src/plonk-intro-cn/plonk-lagrange-basis.md:10
#: src/plonk-intro-cn/plonk-lagrange-basis.md:28
#: src/plonk-intro-cn/plonk-lagrange-basis.md:40
#: src/plonk-intro-cn/plonk-lagrange-basis.md:149
#: src/plonk-intro-cn/plonk-permutation.md:19
#: src/plonk-intro-cn/plonk-permutation.md:134
#: src/plonk-intro-cn/plonk-permutation.md:164
#: src/plonk-intro-cn/plonk-constraints.md:15
#: src/plonk-intro-cn/plonk-constraints.md:69
#: src/plonk-intro-cn/plonk-constraints.md:153
#: src/plonk-intro-cn/plonk-polycom.md:87
#: src/plonk-intro-cn/plonk-randomizing.md:103
#: src/plonk-intro-cn/plonk-randomizing.md:104
#: src/plonk-intro-cn/plonk-lookup.md:57 src/plonk-intro-cn/plonk-lookup.md:61
#: src/plonk-intro-cn/plonk-lookup.md:135
#: src/plonk-intro-cn/plonk-lookup.md:151
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:174
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:342
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:24
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:29
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:38
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:164
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:185
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:260
#: src/zk-snarks/3-General-Purpose-Computation.md:214
#: src/zk-snarks/3-General-Purpose-Computation.md:220
#: src/zk-snarks/3-General-Purpose-Computation.md:322
#: src/zk-snarks/4-Construction-Properties.md:234
#: src/zk-snarks/4-Construction-Properties.md:331
#: src/zk-snarks/4-Construction-Properties.md:333
#: src/zk-snarks/4-Construction-Properties.md:335
#: src/zk-snarks/5-Pinocchio-Protocol.md:115
#: src/zk-snarks/5-Pinocchio-Protocol.md:136
#: src/zk-snarks/5-Pinocchio-Protocol.md:199
#: src/halo2/tmp/2-Fibonacci-example-1.md:191
#: src/halo2/tmp/2-Fibonacci-example-1.md:205 src/zk-everything/BabySNARK
#: tutorial.md:183 src/zk-everything/zk-everything-joe/Hyrax.md:203
#: src/zk-everything/zk-everything-joe/Hyrax.md:216
#: src/zk-everything/zk-everything-joe/Spartan.md:89
#: src/zk-everything/zk-everything-joe/Spartan.md:346
#: src/zk-everything/zk-everything-joe/Spartan.md:361 src/public
#: goods/4-Proving-System.md:193
msgid " 和 "
msgstr " 和 "

#: src/plonk-intro-cn/plonk-arithmetization.md:37
msgid "。记住，所有的加法门都会被展开成多个变量的相加（或线性组合）。"
msgstr "。记住，所有的加法门都会被展开成多个变量的相加（或线性组合）。"

#: src/plonk-intro-cn/plonk-arithmetization.md:39
msgid "再看看其右输入，连接了一个变量 "
msgstr "再看看其右输入，连接了一个变量 "

#: src/plonk-intro-cn/plonk-arithmetization.md:39
msgid " 和一个常数值，等价于连接了 "
msgstr " 和一个常数值，等价于连接了 "

#: src/plonk-intro-cn/plonk-arithmetization.md:39
msgid " 的两倍，那么右输入的选择子矩阵可以记为 "
msgstr " 的两倍，那么右输入的选择子矩阵可以记为 "

#: src/plonk-intro-cn/plonk-arithmetization.md:43
msgid "这里同样可以用一个行向量 "
msgstr "这里同样可以用一个行向量 "

#: src/plonk-intro-cn/plonk-arithmetization.md:43
#: src/plonk-intro-cn/plonk-arithmetization.md:49
#: src/plonk-intro-cn/plonk-arithmetization.md:51
#: src/plonk-intro-cn/plonk-arithmetization.md:77
#: src/plonk-intro-cn/plonk-arithmetization.md:97
#: src/plonk-intro-cn/plonk-arithmetization.md:103
#: src/plonk-intro-cn/plonk-arithmetization.md:119
#: src/plonk-intro-cn/plonk-arithmetization.md:129
#: src/plonk-intro-cn/plonk-arithmetization.md:217
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:26
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:74
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:98
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:107
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:119
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:125
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:136
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:137
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:138
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:139
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:141
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:143
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:185
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:191
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:278
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:287
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:289
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:295
#: src/zk-snarks/3-General-Purpose-Computation.md:81
#: src/zk-snarks/3-General-Purpose-Computation.md:90
#: src/zk-snarks/3-General-Purpose-Computation.md:98
#: src/zk-snarks/3-General-Purpose-Computation.md:102
#: src/zk-snarks/3-General-Purpose-Computation.md:104
#: src/zk-snarks/3-General-Purpose-Computation.md:107
#: src/zk-snarks/3-General-Purpose-Computation.md:229
#: src/zk-snarks/3-General-Purpose-Computation.md:233
#: src/zk-snarks/3-General-Purpose-Computation.md:235
#: src/zk-snarks/3-General-Purpose-Computation.md:276
#: src/zk-snarks/3-General-Purpose-Computation.md:293
#: src/zk-snarks/3-General-Purpose-Computation.md:295
#: src/zk-snarks/3-General-Purpose-Computation.md:342
#: src/zk-snarks/4-Construction-Properties.md:48
#: src/zk-snarks/4-Construction-Properties.md:210
#: src/zk-snarks/4-Construction-Properties.md:270
#: src/zk-snarks/4-Construction-Properties.md:325
#: src/zk-snarks/4-Construction-Properties.md:326
#: src/zk-snarks/5-Pinocchio-Protocol.md:20
#: src/zk-snarks/5-Pinocchio-Protocol.md:46
#: src/zk-snarks/5-Pinocchio-Protocol.md:58
#: src/zk-snarks/5-Pinocchio-Protocol.md:62
#: src/zk-snarks/5-Pinocchio-Protocol.md:69
#: src/zk-snarks/5-Pinocchio-Protocol.md:71
#: src/zk-snarks/5-Pinocchio-Protocol.md:73
#: src/zk-snarks/5-Pinocchio-Protocol.md:74
#: src/zk-snarks/5-Pinocchio-Protocol.md:76
#: src/zk-snarks/5-Pinocchio-Protocol.md:83
#: src/zk-snarks/5-Pinocchio-Protocol.md:92
#: src/zk-snarks/5-Pinocchio-Protocol.md:96
#: src/zk-snarks/5-Pinocchio-Protocol.md:99
#: src/zk-snarks/5-Pinocchio-Protocol.md:113
#: src/zk-snarks/5-Pinocchio-Protocol.md:115
#: src/zk-snarks/5-Pinocchio-Protocol.md:119
#: src/zk-snarks/5-Pinocchio-Protocol.md:139
#: src/zk-snarks/5-Pinocchio-Protocol.md:168
#: src/zk-snarks/5-Pinocchio-Protocol.md:170
#: src/halo2/tmp/2-Fibonacci-example-1.md:275 src/zk-everything/BabySNARK
#: tutorial.md:124 tutorial.md:177 tutorial.md:181 tutorial.md:183
#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:238 Zeroknowledge.md:239
#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:395 src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:44
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:50
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:58
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:64
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:79
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:83
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:119
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:122
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:134
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:145
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:152
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:383
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:390
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:396
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:405
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:412
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:418
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:424
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:440
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:442
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:446
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:448
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:460
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:486
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:493
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:506
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:524
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:526
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:530
#: src/zk-everything/zk-everything-joe/Hyrax.md:58
#: src/zk-everything/zk-everything-joe/Hyrax.md:64
#: src/zk-everything/zk-everything-joe/Hyrax.md:70
#: src/zk-everything/zk-everything-joe/Hyrax.md:86
#: src/zk-everything/zk-everything-joe/Hyrax.md:92
#: src/zk-everything/zk-everything-joe/Hyrax.md:116
#: src/zk-everything/zk-everything-joe/Hyrax.md:245 src/public
#: goods/第二章.md:16 goods/第二章.md:20 goods/第二章.md:83
#: goods/第二章.md:146 goods/4-Proving-System.md:206
#: goods/4-Proving-System.md:209
msgid "V"
msgstr "V"

#: src/plonk-intro-cn/plonk-arithmetization.md:43
msgid " 来表示，其中的 "
msgstr " 来表示，其中的 "

#: src/plonk-intro-cn/plonk-arithmetization.md:43
msgid " 即为上图中电路的常数引线。"
msgstr " 即为上图中电路的常数引线。"

#: src/plonk-intro-cn/plonk-arithmetization.md:45
msgid "最后乘法门的输出按照上面的方法可以描述为 "
msgstr "最后乘法门的输出按照上面的方法可以描述为 "

#: src/plonk-intro-cn/plonk-arithmetization.md:45
#: src/plonk-intro-cn/plonk-arithmetization.md:49
#: src/plonk-intro-cn/plonk-arithmetization.md:51
#: src/plonk-intro-cn/plonk-arithmetization.md:59
#: src/plonk-intro-cn/plonk-arithmetization.md:63
#: src/plonk-intro-cn/plonk-arithmetization.md:77
#: src/plonk-intro-cn/plonk-arithmetization.md:97
#: src/plonk-intro-cn/plonk-arithmetization.md:107
#: src/plonk-intro-cn/plonk-arithmetization.md:119
#: src/plonk-intro-cn/plonk-arithmetization.md:129
#: src/plonk-intro-cn/plonk-arithmetization.md:145
#: src/plonk-intro-cn/plonk-arithmetization.md:167
#: src/plonk-intro-cn/plonk-arithmetization.md:177
#: src/plonk-intro-cn/plonk-arithmetization.md:183
#: src/plonk-intro-cn/plonk-arithmetization.md:185
#: src/plonk-intro-cn/plonk-arithmetization.md:193
#: src/plonk-intro-cn/plonk-arithmetization.md:211
#: src/plonk-intro-cn/plonk-arithmetization.md:213
#: src/plonk-intro-cn/plonk-arithmetization.md:217
#: src/plonk-intro-cn/plonk-arithmetization.md:221
#: src/plonk-intro-cn/plonk-arithmetization.md:229
#: src/plonk-intro-cn/plonk-arithmetization.md:253
#: src/plonk-intro-cn/plonk-permutation.md:5
#: src/plonk-intro-cn/plonk-permutation.md:9
#: src/plonk-intro-cn/plonk-permutation.md:13
#: src/plonk-intro-cn/plonk-permutation.md:15
#: src/plonk-intro-cn/plonk-permutation.md:40
#: src/plonk-intro-cn/plonk-constraints.md:51
#: src/plonk-intro-cn/plonk-constraints.md:55
#: src/plonk-intro-cn/plonk-constraints.md:69
#: src/plonk-intro-cn/plonk-constraints.md:107
#: src/plonk-intro-cn/plonk-constraints.md:129
#: src/plonk-intro-cn/plonk-constraints.md:161
#: src/plonk-intro-cn/plonk-lookup.md:267 src/halo2/tmp/9-decomposed.md:139
#: src/halo2/tmp/9-decomposed.md:143 src/zk-everything/BabySNARK
#: tutorial.md:125 src/zk-everything/zk-learning-miles/Lecture2:Introduction to
#: Modern SNARKs.md:403 SNARKs.md:407
#: src/zk-everything/zk-everything-joe/Spartan.md:24
#: src/zk-everything/zk-everything-joe/Spartan.md:89
#: src/zk-everything/zk-everything-joe/Spartan.md:93
#: src/zk-everything/zk-everything-joe/Spartan.md:148
#: src/zk-everything/zk-everything-joe/Spartan.md:154
#: src/zk-everything/zk-everything-joe/Spartan.md:155
#: src/zk-everything/zk-everything-joe/Spartan.md:166
#: src/zk-everything/zk-everything-joe/Spartan.md:195
#: src/zk-everything/zk-everything-joe/Spartan.md:200
#: src/zk-everything/zk-everything-joe/Spartan.md:212
#: src/zk-everything/zk-everything-joe/Spartan.md:232
#: src/zk-everything/zk-everything-joe/Spartan.md:252
#: src/zk-everything/zk-everything-joe/Spartan.md:254
#: src/zk-everything/zk-everything-joe/Spartan.md:257
#: src/zk-everything/zk-everything-joe/Spartan.md:278 src/public
#: goods/第二章.md:16 goods/第二章.md:18 goods/第二章.md:35
#: goods/第二章.md:38 goods/第二章.md:40 goods/第二章.md:41
#: goods/第二章.md:83
msgid "W"
msgstr "W"

#: src/plonk-intro-cn/plonk-arithmetization.md:45
msgid "，即输出变量为 "
msgstr "，即输出变量为 "

#: src/plonk-intro-cn/plonk-arithmetization.md:45
#: src/plonk-intro-cn/plonk-arithmetization.md:107
#: src/plonk-intro-cn/plonk-lagrange-basis.md:40
#: src/plonk-intro-cn/plonk-lagrange-basis.md:78
#: src/plonk-intro-cn/plonk-lagrange-basis.md:91
#: src/plonk-intro-cn/plonk-permutation.md:74
#: src/plonk-intro-cn/plonk-permutation.md:82
#: src/plonk-intro-cn/plonk-constraints.md:15
#: src/plonk-intro-cn/plonk-constraints.md:65
#: src/plonk-intro-cn/plonk-constraints.md:91
#: src/plonk-intro-cn/plonk-polycom.md:99
#: src/plonk-intro-cn/plonk-polycom.md:107
#: src/plonk-intro-cn/plonk-polycom.md:215
#: src/plonk-intro-cn/plonk-randomizing.md:59
#: src/plonk-intro-cn/plonk-randomizing.md:63
#: src/plonk-intro-cn/plonk-randomizing.md:113
#: src/plonk-intro-cn/plonk-lookup.md:190
#: src/plonk-intro-cn/plonk-lookup.md:208
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:160
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:202
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:244
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:289
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:333
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:490
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:497 src/public
#: goods/第二章.md:129
msgid "："
msgstr "："

#: src/plonk-intro-cn/plonk-arithmetization.md:49
msgid "有了三个向量 "
msgstr "有了三个向量 "

#: src/plonk-intro-cn/plonk-arithmetization.md:49
msgid "，我们可以通过一个「内积」等式来约束电路的运算："
msgstr "，我们可以通过一个「内积」等式来约束电路的运算："

#: src/plonk-intro-cn/plonk-arithmetization.md:53
msgid "这个等式化简之后正好可以得到："
msgstr "这个等式化简之后正好可以得到："

#: src/plonk-intro-cn/plonk-arithmetization.md:57
msgid "如果我们把这几个变量换成赋值向量 "
msgstr "如果我们把这几个变量换成赋值向量 "

#: src/plonk-intro-cn/plonk-arithmetization.md:57
#: src/plonk-intro-cn/plonk-arithmetization.md:59
#: src/plonk-intro-cn/plonk-arithmetization.md:61
#: src/plonk-intro-cn/plonk-arithmetization.md:63
#: src/plonk-intro-cn/plonk-arithmetization.md:65
#: src/plonk-intro-cn/plonk-arithmetization.md:87
#: src/plonk-intro-cn/plonk-arithmetization.md:91
#: src/plonk-intro-cn/plonk-arithmetization.md:93
#: src/plonk-intro-cn/plonk-arithmetization.md:101
#: src/plonk-intro-cn/plonk-arithmetization.md:105
#: src/plonk-intro-cn/plonk-arithmetization.md:107
#: src/plonk-intro-cn/plonk-arithmetization.md:109
#: src/plonk-intro-cn/plonk-arithmetization.md:115
#: src/plonk-intro-cn/plonk-arithmetization.md:123
#: src/plonk-intro-cn/plonk-arithmetization.md:142
#: src/plonk-intro-cn/plonk-arithmetization.md:147
#: src/plonk-intro-cn/plonk-arithmetization.md:159
#: src/plonk-intro-cn/plonk-arithmetization.md:163
#: src/plonk-intro-cn/plonk-arithmetization.md:179
#: src/plonk-intro-cn/plonk-arithmetization.md:197
#: src/plonk-intro-cn/plonk-arithmetization.md:227
#: src/plonk-intro-cn/plonk-arithmetization.md:231
#: src/plonk-intro-cn/plonk-arithmetization.md:237
#: src/plonk-intro-cn/plonk-arithmetization.md:239
#: src/plonk-intro-cn/plonk-arithmetization.md:243
#: src/plonk-intro-cn/plonk-arithmetization.md:245
#: src/plonk-intro-cn/plonk-arithmetization.md:247
#: src/plonk-intro-cn/plonk-lagrange-basis.md:87
#: src/plonk-intro-cn/plonk-lagrange-basis.md:89
#: src/plonk-intro-cn/plonk-lagrange-basis.md:91
#: src/plonk-intro-cn/plonk-lagrange-basis.md:95
#: src/plonk-intro-cn/plonk-lagrange-basis.md:103
#: src/plonk-intro-cn/plonk-lagrange-basis.md:105
#: src/plonk-intro-cn/plonk-permutation.md:11
#: src/plonk-intro-cn/plonk-permutation.md:13
#: src/plonk-intro-cn/plonk-permutation.md:144
#: src/plonk-intro-cn/plonk-constraints.md:57
#: src/plonk-intro-cn/plonk-constraints.md:63
#: src/plonk-intro-cn/plonk-constraints.md:67
#: src/plonk-intro-cn/plonk-constraints.md:120
#: src/plonk-intro-cn/plonk-randomizing.md:71
#: src/plonk-intro-cn/plonk-randomizing.md:101
#: src/plonk-intro-cn/plonk-randomizing.md:112
#: src/plonk-intro-cn/plonk-randomizing.md:115
#: src/plonk-intro-cn/plonk-randomizing.md:117
#: src/plonk-intro-cn/plonk-randomizing.md:119
#: src/plonk-intro-cn/plonk-randomizing.md:121
#: src/plonk-intro-cn/plonk-randomizing.md:123
#: src/plonk-intro-cn/plonk-randomizing.md:129
#: src/plonk-intro-cn/plonk-lookup.md:17 src/plonk-intro-cn/plonk-lookup.md:43
#: src/plonk-intro-cn/plonk-lookup.md:47 src/plonk-intro-cn/plonk-lookup.md:51
#: src/plonk-intro-cn/plonk-lookup.md:111
#: src/plonk-intro-cn/plonk-lookup.md:129
#: src/plonk-intro-cn/plonk-lookup.md:133
#: src/plonk-intro-cn/plonk-lookup.md:165
#: src/plonk-intro-cn/plonk-lookup.md:175
#: src/plonk-intro-cn/plonk-lookup.md:192
#: src/plonk-intro-cn/plonk-lookup.md:210
#: src/plonk-intro-cn/plonk-lookup.md:216
#: src/plonk-intro-cn/plonk-lookup.md:218
#: src/plonk-intro-cn/plonk-lookup.md:220
#: src/plonk-intro-cn/plonk-lookup.md:228
#: src/plonk-intro-cn/plonk-lookup.md:293
#: src/plonk-intro-cn/plonk-lookup.md:297
#: src/plonk-intro-cn/plonk-lookup.md:304
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:254
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:229
#: src/zk-snarks/3-General-Purpose-Computation.md:41
#: src/zk-snarks/3-General-Purpose-Computation.md:42
#: src/zk-snarks/3-General-Purpose-Computation.md:83
#: src/zk-snarks/3-General-Purpose-Computation.md:171
#: src/zk-snarks/3-General-Purpose-Computation.md:173
#: src/zk-snarks/4-Construction-Properties.md:135
#: src/zk-snarks/4-Construction-Properties.md:136
#: src/zk-snarks/4-Construction-Properties.md:155
#: src/zk-snarks/4-Construction-Properties.md:171
#: src/zk-snarks/4-Construction-Properties.md:178
#: src/zk-snarks/5-Pinocchio-Protocol.md:29
#: src/zk-snarks/5-Pinocchio-Protocol.md:32
#: src/zk-snarks/5-Pinocchio-Protocol.md:34 src/halo2/tmp/9-decomposed.md:21
#: src/halo2/tmp/9-decomposed.md:22 src/halo2/tmp/9-decomposed.md:43
#: src/halo2/tmp/9-decomposed.md:46 src/halo2/tmp/9-decomposed.md:53
#: src/halo2/tmp/9-decomposed.md:179 src/halo2/tmp/9-decomposed.md:183
#: src/halo2/tmp/9-decomposed.md:184 src/halo2/tmp/9-decomposed.md:185
#: src/halo2/tmp/9-decomposed.md:186 src/halo2/tmp/9-decomposed.md:187
#: src/halo2/tmp/9-decomposed.md:188 src/halo2/tmp/9-decomposed.md:189
#: src/halo2/tmp/9-decomposed.md:190 src/zk-everything/BabySNARK
#: tutorial.md:168 tutorial.md:172
#: src/zk-everything/zk-learning-miles/KZG.md:10
#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:272 SNARKs.md:410
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:111
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:132
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:134
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:145
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:152
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:162
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:166
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:170
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:182
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:188
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:204
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:206
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:212
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:218
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:234
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:236
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:244
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:246
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:248
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:255
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:268
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:275
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:281
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:289
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:292
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:301
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:305
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:307
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:314
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:319
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:323
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:325
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:333
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:355
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:361
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:377
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:383
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:390
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:396
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:405
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:412
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:418
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:430
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:448
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:460
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:486
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:506
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:520
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:530
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:532
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:538
#: src/zk-everything/zk-everything-joe/Hyrax.md:48
#: src/zk-everything/zk-everything-joe/Hyrax.md:86
#: src/zk-everything/zk-everything-joe/Hyrax.md:92
#: src/zk-everything/zk-everything-joe/Hyrax.md:98
#: src/zk-everything/zk-everything-joe/Hyrax.md:102
#: src/zk-everything/zk-everything-joe/Hyrax.md:116
#: src/zk-everything/zk-everything-joe/Hyrax.md:122
#: src/zk-everything/zk-everything-joe/Hyrax.md:191
#: src/zk-everything/zk-everything-joe/Hyrax.md:195
#: src/zk-everything/zk-everything-joe/Hyrax.md:203
#: src/zk-everything/zk-everything-joe/Hyrax.md:214
#: src/zk-everything/zk-everything-joe/Hyrax.md:216
#: src/zk-everything/zk-everything-joe/Hyrax.md:223
#: src/zk-everything/zk-everything-joe/Hyrax.md:228
#: src/zk-everything/zk-everything-joe/Hyrax.md:245
#: src/zk-everything/zk-everything-joe/Hyrax.md:250
#: src/zk-everything/zk-everything-joe/Hyrax.md:269
#: src/zk-everything/zk-everything-joe/Hyrax.md:310
#: src/zk-everything/zk-everything-joe/Spartan.md:115
#: src/zk-everything/zk-everything-joe/Spartan.md:118
#: src/zk-everything/zk-everything-joe/Spartan.md:309
#: src/zk-everything/zk-everything-joe/Spartan.md:312
#: src/zk-everything/zk-everything-joe/Spartan.md:334
#: src/zk-everything/zk-everything-joe/Spartan.md:343
#: src/zk-everything/zk-everything-joe/Spartan.md:344
#: src/zk-everything/zk-everything-joe/Spartan.md:347
#: src/zk-everything/zk-everything-joe/Spartan.md:349
#: src/zk-everything/zk-everything-joe/Spartan.md:360
#: src/zk-everything/zk-everything-joe/Spartan.md:389 src/public
#: goods/第二章.md:103
msgid "4"
msgstr "4"

#: src/plonk-intro-cn/plonk-arithmetization.md:57
#: src/plonk-intro-cn/plonk-arithmetization.md:59
#: src/plonk-intro-cn/plonk-arithmetization.md:91
#: src/plonk-intro-cn/plonk-arithmetization.md:93
#: src/plonk-intro-cn/plonk-arithmetization.md:101
#: src/plonk-intro-cn/plonk-arithmetization.md:105
#: src/plonk-intro-cn/plonk-arithmetization.md:107
#: src/plonk-intro-cn/plonk-arithmetization.md:109
#: src/plonk-intro-cn/plonk-arithmetization.md:115
#: src/plonk-intro-cn/plonk-arithmetization.md:123
#: src/plonk-intro-cn/plonk-arithmetization.md:142
#: src/plonk-intro-cn/plonk-arithmetization.md:143
#: src/plonk-intro-cn/plonk-arithmetization.md:147
#: src/plonk-intro-cn/plonk-arithmetization.md:149
#: src/plonk-intro-cn/plonk-arithmetization.md:159
#: src/plonk-intro-cn/plonk-arithmetization.md:163
#: src/plonk-intro-cn/plonk-arithmetization.md:177
#: src/plonk-intro-cn/plonk-arithmetization.md:179
#: src/plonk-intro-cn/plonk-arithmetization.md:181
#: src/plonk-intro-cn/plonk-arithmetization.md:231
#: src/plonk-intro-cn/plonk-lagrange-basis.md:89
#: src/plonk-intro-cn/plonk-lagrange-basis.md:91
#: src/plonk-intro-cn/plonk-lagrange-basis.md:93
#: src/plonk-intro-cn/plonk-lagrange-basis.md:161
#: src/plonk-intro-cn/plonk-permutation.md:11
#: src/plonk-intro-cn/plonk-constraints.md:57
#: src/plonk-intro-cn/plonk-constraints.md:63
#: src/plonk-intro-cn/plonk-constraints.md:67
#: src/plonk-intro-cn/plonk-constraints.md:120
#: src/plonk-intro-cn/plonk-randomizing.md:127
#: src/plonk-intro-cn/plonk-randomizing.md:129
#: src/plonk-intro-cn/plonk-lookup.md:18 src/plonk-intro-cn/plonk-lookup.md:19
#: src/plonk-intro-cn/plonk-lookup.md:43 src/plonk-intro-cn/plonk-lookup.md:51
#: src/plonk-intro-cn/plonk-lookup.md:210
#: src/plonk-intro-cn/plonk-lookup.md:304
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:183
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:186
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:190
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:194
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:252
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:254
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:256
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:258
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:260
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:261
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:262
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:269
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:271
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:272
#: src/zk-snarks/3-General-Purpose-Computation.md:214
#: src/zk-snarks/3-General-Purpose-Computation.md:216
#: src/zk-snarks/4-Construction-Properties.md:133
#: src/zk-snarks/4-Construction-Properties.md:134
#: src/zk-snarks/4-Construction-Properties.md:139
#: src/zk-snarks/4-Construction-Properties.md:155
#: src/zk-snarks/4-Construction-Properties.md:170
#: src/zk-snarks/4-Construction-Properties.md:171
#: src/zk-snarks/4-Construction-Properties.md:178
#: src/zk-snarks/4-Construction-Properties.md:371
#: src/zk-snarks/4-Construction-Properties.md:375
#: src/zk-snarks/5-Pinocchio-Protocol.md:136 src/halo2/tmp/9-decomposed.md:40
#: src/halo2/tmp/9-decomposed.md:42 src/halo2/tmp/9-decomposed.md:53
#: src/halo2/tmp/9-decomposed.md:180 src/halo2/tmp/9-decomposed.md:191
#: src/zk-everything/BabySNARK tutorial.md:116 tutorial.md:168 tutorial.md:172
#: src/zk-everything/zk-learning-miles/KZG.md:10
#: src/zk-everything/zk-learning-miles/KZG.md:12
#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:272 SNARKs.md:320
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:101
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:145
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:152
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:162
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:166
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:194
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:204
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:206
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:236
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:246
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:248
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:281
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:292
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:294
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:325
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:333
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:336
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:343
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:347
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:349
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:355
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:361
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:365
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:367
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:377
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:396
#: src/zk-everything/zk-everything-joe/Hyrax.md:86
#: src/zk-everything/zk-everything-joe/Hyrax.md:92
#: src/zk-everything/zk-everything-joe/Hyrax.md:98
#: src/zk-everything/zk-everything-joe/Hyrax.md:102
#: src/zk-everything/zk-everything-joe/Hyrax.md:116
#: src/zk-everything/zk-everything-joe/Hyrax.md:122
#: src/zk-everything/zk-everything-joe/Hyrax.md:191
#: src/zk-everything/zk-everything-joe/Hyrax.md:195
#: src/zk-everything/zk-everything-joe/Hyrax.md:203
#: src/zk-everything/zk-everything-joe/Hyrax.md:208
#: src/zk-everything/zk-everything-joe/Hyrax.md:214
#: src/zk-everything/zk-everything-joe/Hyrax.md:216
#: src/zk-everything/zk-everything-joe/Hyrax.md:223
#: src/zk-everything/zk-everything-joe/Hyrax.md:228
#: src/zk-everything/zk-everything-joe/Spartan.md:122
msgid "5"
msgstr "5"

#: src/plonk-intro-cn/plonk-arithmetization.md:57
#: src/plonk-intro-cn/plonk-arithmetization.md:59
#: src/plonk-intro-cn/plonk-arithmetization.md:61
#: src/plonk-intro-cn/plonk-arithmetization.md:63
#: src/plonk-intro-cn/plonk-arithmetization.md:65
msgid "70"
msgstr "70"

#: src/plonk-intro-cn/plonk-arithmetization.md:57
msgid "，那么电路的运算可以通过「内积」等式来验证："
msgstr "，那么电路的运算可以通过「内积」等式来验证："

#: src/plonk-intro-cn/plonk-arithmetization.md:59
#: src/plonk-intro-cn/plonk-arithmetization.md:63
#: src/plonk-intro-cn/plonk-arithmetization.md:257
#: src/plonk-intro-cn/plonk-arithmetization.md:259
#: src/plonk-intro-cn/plonk-lagrange-basis.md:151
#: src/plonk-intro-cn/plonk-permutation.md:96
#: src/plonk-intro-cn/plonk-permutation.md:150
#: src/plonk-intro-cn/plonk-permutation.md:174
#: src/plonk-intro-cn/plonk-permutation.md:204
#: src/plonk-intro-cn/plonk-permutation.md:212
#: src/plonk-intro-cn/plonk-constraints.md:141
#: src/plonk-intro-cn/plonk-constraints.md:175
#: src/plonk-intro-cn/plonk-constraints.md:199
#: src/plonk-intro-cn/plonk-polycom.md:35
#: src/plonk-intro-cn/plonk-polycom.md:97
#: src/plonk-intro-cn/plonk-polycom.md:209
#: src/plonk-intro-cn/plonk-randomizing.md:90
#: src/plonk-intro-cn/plonk-randomizing.md:129
#: src/plonk-intro-cn/plonk-lookup.md:59 src/plonk-intro-cn/plonk-lookup.md:63
#: src/plonk-intro-cn/plonk-lookup.md:93 src/plonk-intro-cn/plonk-lookup.md:101
#: src/plonk-intro-cn/plonk-lookup.md:173
#: src/plonk-intro-cn/plonk-lookup.md:196
#: src/plonk-intro-cn/plonk-lookup.md:214
#: src/plonk-intro-cn/plonk-lookup.md:238
#: src/plonk-intro-cn/plonk-lookup.md:304
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:168
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:332
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:333
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:334
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:346
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:42
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:298
#: src/zk-snarks/3-General-Purpose-Computation.md:360
#: src/zk-snarks/3-General-Purpose-Computation.md:366
#: src/zk-snarks/4-Construction-Properties.md:273
#: src/zk-snarks/4-Construction-Properties.md:275
#: src/zk-snarks/4-Construction-Properties.md:381
#: src/zk-snarks/5-Pinocchio-Protocol.md:133
#: src/zk-snarks/5-Pinocchio-Protocol.md:142
#: src/zk-snarks/5-Pinocchio-Protocol.md:147
#: src/zk-snarks/5-Pinocchio-Protocol.md:151
#: src/zk-snarks/5-Pinocchio-Protocol.md:154
#: src/zk-snarks/5-Pinocchio-Protocol.md:157
#: src/zk-snarks/5-Pinocchio-Protocol.md:160 src/zk-everything/BabySNARK
#: tutorial.md:145 src/zk-everything/zk-learning-miles/KZG.md:272
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:58
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:64
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:134
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:145
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:152
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:188
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:230
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:275
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:292
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:301
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:319
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:336
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:343
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:361
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:377
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:390
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:396
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:412
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:418
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:436
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:442
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:448
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:454
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:460
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:490
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:493
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:506
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:514
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:530
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:532
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:538
#: src/zk-everything/zk-everything-joe/Hyrax.md:58
#: src/zk-everything/zk-everything-joe/Hyrax.md:64
#: src/zk-everything/zk-everything-joe/Hyrax.md:70
#: src/zk-everything/zk-everything-joe/Hyrax.md:86
#: src/zk-everything/zk-everything-joe/Hyrax.md:191
#: src/zk-everything/zk-everything-joe/Hyrax.md:245
#: src/zk-everything/zk-everything-joe/Hyrax.md:250
#: src/zk-everything/zk-everything-joe/Spartan.md:115
#: src/zk-everything/zk-everything-joe/Spartan.md:232
#: src/zk-everything/zk-everything-joe/Spartan.md:343
#: src/zk-everything/zk-everything-joe/Spartan.md:349
#: src/zk-everything/zk-everything-joe/Spartan.md:441 src/public
#: goods/4-Proving-System.md:155
msgid "))"
msgstr "))"

#: src/plonk-intro-cn/plonk-arithmetization.md:61
msgid "而一个错误的赋值向量，比如 "
msgstr "而一个错误的赋值向量，比如 "

#: src/plonk-intro-cn/plonk-arithmetization.md:61
msgid " ，则不满足「内积等式」："
msgstr " ，则不满足「内积等式」："

#: src/plonk-intro-cn/plonk-arithmetization.md:63
#: src/plonk-intro-cn/plonk-lagrange-basis.md:34
#: src/plonk-intro-cn/plonk-lagrange-basis.md:50
#: src/plonk-intro-cn/plonk-lagrange-basis.md:109
#: src/plonk-intro-cn/plonk-lagrange-basis.md:111
#: src/plonk-intro-cn/plonk-lagrange-basis.md:115
#: src/plonk-intro-cn/plonk-permutation.md:108
#: src/plonk-intro-cn/plonk-constraints.md:155
#: src/plonk-intro-cn/plonk-polycom.md:15
#: src/plonk-intro-cn/plonk-polycom.md:69
#: src/plonk-intro-cn/plonk-randomizing.md:41
#: src/plonk-intro-cn/plonk-lookup.md:131
#: src/plonk-intro-cn/plonk-lookup.md:139
#: src/zk-snarks/3-General-Purpose-Computation.md:271
#: src/zk-snarks/3-General-Purpose-Computation.md:280
#: src/halo2/tmp/4-IsZero-Check-example-3.md:127
#: src/zk-everything/zk-learning-miles/KZG.md:274 src/Nova/SuperNova.md:68
msgid ""
msgstr ""

#: src/plonk-intro-cn/plonk-arithmetization.md:65
msgid "左边运算结果为 "
msgstr "左边运算结果为 "

#: src/plonk-intro-cn/plonk-arithmetization.md:65
msgid "，右边运算结果为 "
msgstr "，右边运算结果为 "

#: src/plonk-intro-cn/plonk-arithmetization.md:65
msgid "。当然，我们可以验证 "
msgstr "。当然，我们可以验证 "

#: src/plonk-intro-cn/plonk-arithmetization.md:65
msgid " 也是一组合法（满足电路约束）的赋值。"
msgstr " 也是一组合法（满足电路约束）的赋值。"

#: src/plonk-intro-cn/plonk-arithmetization.md:67
msgid ""
"并不是任何一个电路都存在赋值向量。凡是存在合法的赋值向量的电路，被称为可被满"
"足的电路。判断一个电路是否可被满足，是一个 NP-Complete 问题，也是一个 NP 困难"
"问题。"
msgstr ""
"并不是任何一个电路都存在赋值向量。凡是存在合法的赋值向量的电路，被称为可被满"
"足的电路。判断一个电路是否可被满足，是一个 NP-Complete 问题，也是一个 NP 困难"
"问题。"

#: src/plonk-intro-cn/plonk-arithmetization.md:69
msgid ""
"这里例子中的两个乘法门并不相同，上面的乘法门是左右输入中都含有变量，而下面的"
"乘法门只有一边的输入为变量，另一边为常数。对于后者这类「常数乘法门」，后续我"
"们也把他们看作为特殊的「加法门」，如下图所示，左边电路右下的乘法门等价于右边"
"电路的右下加法门。"
msgstr ""
"这里例子中的两个乘法门并不相同，上面的乘法门是左右输入中都含有变量，而下面的"
"乘法门只有一边的输入为变量，另一边为常数。对于后者这类「常数乘法门」，后续我"
"们也把他们看作为特殊的「加法门」，如下图所示，左边电路右下的乘法门等价于右边"
"电路的右下加法门。"

#: src/plonk-intro-cn/plonk-arithmetization.md:73
msgid "![](img/img20230423133455.png)"
msgstr "![](img/img20230423133455.png)"

#: src/plonk-intro-cn/plonk-arithmetization.md:77
msgid "那么如果一个电路含有两个以上的乘法门，我们就不能用 "
msgstr "那么如果一个电路含有两个以上的乘法门，我们就不能用 "

#: src/plonk-intro-cn/plonk-arithmetization.md:77
msgid " 三个向量之间的内积关系来表示运算，而需要构造「三个矩阵」的运算关系。"
msgstr " 三个向量之间的内积关系来表示运算，而需要构造「三个矩阵」的运算关系。"

#: src/plonk-intro-cn/plonk-arithmetization.md:79
msgid "多个乘法门"
msgstr "多个乘法门"

#: src/plonk-intro-cn/plonk-arithmetization.md:81
msgid "比如下图所示电路，有两个乘法门，他们的左右输入都涉及到变量。"
msgstr "比如下图所示电路，有两个乘法门，他们的左右输入都涉及到变量。"

#: src/plonk-intro-cn/plonk-arithmetization.md:83
msgid "![c](img/img20230414170601.png)"
msgstr "![c](img/img20230414170601.png)"

#: src/plonk-intro-cn/plonk-arithmetization.md:89
msgid ""
"我们以**乘法门**为基准，对电路进行编码。第一步将电路中的乘法门依次编号（无所"
"谓编码顺序，只要前后保持一致）。图中的两个乘法门编码为 `#1` 与 `#2`。"
msgstr ""
"我们以**乘法门**为基准，对电路进行编码。第一步将电路中的乘法门依次编号（无所"
"谓编码顺序，只要前后保持一致）。图中的两个乘法门编码为 `#1` 与 `#2`。"

#: src/plonk-intro-cn/plonk-arithmetization.md:91
msgid ""
"然后我们需要为每一个乘法门的中间值引线也给出变量名：比如四个输入变量被记为 "
msgstr ""
"然后我们需要为每一个乘法门的中间值引线也给出变量名：比如四个输入变量被记为 "

#: src/plonk-intro-cn/plonk-arithmetization.md:91
#: src/plonk-intro-cn/plonk-lagrange-basis.md:34
#: src/plonk-intro-cn/plonk-constraints.md:155
#: src/plonk-intro-cn/plonk-randomizing.md:15
#: src/plonk-intro-cn/plonk-randomizing.md:35
#: src/plonk-intro-cn/plonk-lookup.md:273
msgid "，其中 "
msgstr "，其中 "

#: src/plonk-intro-cn/plonk-arithmetization.md:91
msgid " 为第二个乘法门的输出，同时作为第一个乘法门的右输入。而 "
msgstr " 为第二个乘法门的输出，同时作为第一个乘法门的右输入。而 "

#: src/plonk-intro-cn/plonk-arithmetization.md:91
msgid " 为第一个乘法门的输出。于是我们可以得到一个关于变量名的向量："
msgstr " 为第一个乘法门的输出。于是我们可以得到一个关于变量名的向量："

#: src/plonk-intro-cn/plonk-arithmetization.md:95
msgid "该电路的「空白态」可以用下面的三个矩阵来编码："
msgstr "该电路的「空白态」可以用下面的三个矩阵来编码："

#: src/plonk-intro-cn/plonk-arithmetization.md:97
#: src/plonk-intro-cn/plonk-arithmetization.md:145
#: src/plonk-intro-cn/plonk-arithmetization.md:149
#: src/plonk-intro-cn/plonk-arithmetization.md:247
#: src/plonk-intro-cn/plonk-lagrange-basis.md:10
#: src/plonk-intro-cn/plonk-lagrange-basis.md:34
#: src/plonk-intro-cn/plonk-lagrange-basis.md:46
#: src/plonk-intro-cn/plonk-lagrange-basis.md:54
#: src/plonk-intro-cn/plonk-lagrange-basis.md:58
#: src/plonk-intro-cn/plonk-lagrange-basis.md:78
#: src/plonk-intro-cn/plonk-lagrange-basis.md:113
#: src/plonk-intro-cn/plonk-lagrange-basis.md:131
#: src/plonk-intro-cn/plonk-lagrange-basis.md:139
#: src/plonk-intro-cn/plonk-lagrange-basis.md:143
#: src/plonk-intro-cn/plonk-lagrange-basis.md:153
#: src/plonk-intro-cn/plonk-permutation.md:76
#: src/plonk-intro-cn/plonk-permutation.md:80
#: src/plonk-intro-cn/plonk-permutation.md:84
#: src/plonk-intro-cn/plonk-permutation.md:92
#: src/plonk-intro-cn/plonk-permutation.md:124
#: src/plonk-intro-cn/plonk-permutation.md:128
#: src/plonk-intro-cn/plonk-constraints.md:81
#: src/plonk-intro-cn/plonk-constraints.md:85
#: src/plonk-intro-cn/plonk-constraints.md:153
#: src/plonk-intro-cn/plonk-polycom.md:49
#: src/plonk-intro-cn/plonk-polycom.md:73
#: src/plonk-intro-cn/plonk-randomizing.md:51
#: src/plonk-intro-cn/plonk-lookup.md:59 src/plonk-intro-cn/plonk-lookup.md:63
#: src/plonk-intro-cn/plonk-lookup.md:69 src/plonk-intro-cn/plonk-lookup.md:137
#: src/plonk-intro-cn/plonk-lookup.md:139
#: src/plonk-intro-cn/plonk-lookup.md:244
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:324
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:182
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:188
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:229
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:235
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:239
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:243
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:245
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:258
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:264
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:265
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:269
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:271
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:272
#: src/zk-snarks/3-General-Purpose-Computation.md:143
#: src/zk-snarks/3-General-Purpose-Computation.md:157
#: src/zk-snarks/4-Construction-Properties.md:48
#: src/zk-snarks/4-Construction-Properties.md:63
#: src/zk-snarks/4-Construction-Properties.md:65
#: src/zk-snarks/4-Construction-Properties.md:105
#: src/zk-snarks/4-Construction-Properties.md:113
#: src/zk-snarks/4-Construction-Properties.md:193
#: src/zk-snarks/4-Construction-Properties.md:195
#: src/zk-snarks/4-Construction-Properties.md:199
#: src/zk-snarks/4-Construction-Properties.md:203
#: src/zk-snarks/4-Construction-Properties.md:210
#: src/zk-snarks/4-Construction-Properties.md:221
#: src/zk-snarks/4-Construction-Properties.md:244
#: src/zk-snarks/4-Construction-Properties.md:277
#: src/zk-snarks/4-Construction-Properties.md:298
#: src/zk-snarks/4-Construction-Properties.md:304
#: src/zk-snarks/4-Construction-Properties.md:345
#: src/zk-snarks/4-Construction-Properties.md:407
#: src/zk-snarks/4-Construction-Properties.md:422
#: src/zk-snarks/5-Pinocchio-Protocol.md:87
#: src/zk-snarks/5-Pinocchio-Protocol.md:89
#: src/zk-snarks/5-Pinocchio-Protocol.md:136
#: src/zk-snarks/5-Pinocchio-Protocol.md:188
#: src/zk-snarks/5-Pinocchio-Protocol.md:192
#: src/zk-snarks/5-Pinocchio-Protocol.md:195
#: src/zk-snarks/5-Pinocchio-Protocol.md:198 src/zk-everything/BabySNARK
#: tutorial.md:31 tutorial.md:127 tutorial.md:129 tutorial.md:145
#: tutorial.md:150 tutorial.md:165
#: src/zk-everything/zk-learning-miles/KZG.md:41
#: src/zk-everything/zk-learning-miles/KZG.md:262
#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:238 Zeroknowledge.md:239
#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:269 SNARKs.md:273 SNARKs.md:276 SNARKs.md:284 SNARKs.md:310
#: SNARKs.md:324 SNARKs.md:350 SNARKs.md:381 SNARKs.md:407 SNARKs.md:408
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:58
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:64
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:79
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:83
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:87
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:91
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:134
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:152
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:448
#: src/zk-everything/zk-everything-joe/Hyrax.md:58
#: src/zk-everything/zk-everything-joe/Hyrax.md:64
#: src/zk-everything/zk-everything-joe/Hyrax.md:70
#: src/zk-everything/zk-everything-joe/Hyrax.md:292
#: src/zk-everything/zk-everything-joe/Hyrax.md:302
#: src/zk-everything/zk-everything-joe/Spartan.md:319
#: src/zk-everything/zk-everything-joe/Spartan.md:350
#: src/zk-everything/zk-everything-joe/Spartan.md:377
#: src/zk-everything/zk-everything-joe/Spartan.md:394
#: src/zk-everything/zk-everything-joe/Spartan.md:406
#: src/zk-everything/zk-everything-joe/Spartan.md:411
#: src/zk-everything/zk-everything-joe/Spartan.md:422
#: src/zk-everything/zk-everything-joe/Spartan.md:428
#: src/zk-everything/zk-everything-joe/Spartan.md:434
#: src/zk-everything/zk-everything-joe/Spartan.md:436
#: src/zk-everything/zk-everything-joe/Spartan.md:450 src/public
#: goods/第二章.md:54 goods/第二章.md:56 goods/第二章.md:84
#: goods/第二章.md:88 goods/第二章.md:89 goods/第二章.md:156
#: goods/第二章.md:170 goods/第二章.md:171 goods/4-Proving-System.md:105
#: goods/4-Proving-System.md:122 goods/4-Proving-System.md:125
#: goods/4-Proving-System.md:146
msgid "∈"
msgstr "∈"

#: src/plonk-intro-cn/plonk-arithmetization.md:97
#: src/plonk-intro-cn/plonk-arithmetization.md:145
#: src/plonk-intro-cn/plonk-arithmetization.md:149
#: src/plonk-intro-cn/plonk-lagrange-basis.md:10
#: src/plonk-intro-cn/plonk-lagrange-basis.md:54
#: src/plonk-intro-cn/plonk-lagrange-basis.md:56
#: src/plonk-intro-cn/plonk-lagrange-basis.md:72
#: src/plonk-intro-cn/plonk-lagrange-basis.md:78
#: src/plonk-intro-cn/plonk-lagrange-basis.md:87
#: src/plonk-intro-cn/plonk-lagrange-basis.md:89
#: src/plonk-intro-cn/plonk-lagrange-basis.md:161
#: src/plonk-intro-cn/plonk-lagrange-basis.md:170
#: src/plonk-intro-cn/plonk-constraints.md:153
#: src/plonk-intro-cn/plonk-polycom.md:221
#: src/plonk-intro-cn/plonk-polycom.md:229
#: src/plonk-intro-cn/plonk-lookup.md:115
#: src/plonk-intro-cn/plonk-lookup.md:117
#: src/plonk-intro-cn/plonk-lookup.md:125
#: src/plonk-intro-cn/plonk-lookup.md:129
#: src/plonk-intro-cn/plonk-lookup.md:131
#: src/plonk-intro-cn/plonk-lookup.md:133
#: src/plonk-intro-cn/plonk-lookup.md:135
#: src/plonk-intro-cn/plonk-lookup.md:137
#: src/plonk-intro-cn/plonk-lookup.md:139
#: src/plonk-intro-cn/plonk-lookup.md:141
#: src/plonk-intro-cn/plonk-lookup.md:143
#: src/plonk-intro-cn/plonk-lookup.md:188
#: src/plonk-intro-cn/plonk-lookup.md:220
#: src/plonk-intro-cn/plonk-lookup.md:224 src/zk-everything/BabySNARK
#: tutorial.md:31 tutorial.md:123 tutorial.md:129 tutorial.md:145
#: tutorial.md:154 tutorial.md:158
#: src/zk-everything/zk-learning-miles/KZG.md:41
#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:269 SNARKs.md:270 SNARKs.md:273 SNARKs.md:276 SNARKs.md:284
#: SNARKs.md:310 SNARKs.md:312 SNARKs.md:324 SNARKs.md:379 SNARKs.md:381
#: SNARKs.md:403 SNARKs.md:408
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:79
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:83
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:87
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:91
#: src/zk-everything/zk-everything-joe/Spartan.md:377
#: src/zk-everything/zk-everything-joe/Spartan.md:401
#: src/zk-everything/zk-everything-joe/Spartan.md:406
#: src/zk-everything/zk-everything-joe/Spartan.md:411
#: src/zk-everything/zk-everything-joe/Spartan.md:416
#: src/zk-everything/zk-everything-joe/Spartan.md:422
#: src/zk-everything/zk-everything-joe/Spartan.md:428
#: src/zk-everything/zk-everything-joe/Spartan.md:434
#: src/zk-everything/zk-everything-joe/Spartan.md:436 src/Nova/SuperNova.md:12
#: src/Nova/SuperNova.md:14 src/Nova/SuperNova.md:17 src/public
#: goods/第二章.md:89 goods/第二章.md:156 goods/第二章.md:158
#: goods/4-Proving-System.md:105 goods/4-Proving-System.md:106
#: goods/4-Proving-System.md:107 goods/4-Proving-System.md:117
#: goods/4-Proving-System.md:122 goods/4-Proving-System.md:124
#: goods/4-Proving-System.md:125 goods/4-Proving-System.md:126
#: goods/4-Proving-System.md:127 goods/4-Proving-System.md:146
#: goods/4-Proving-System.md:151
msgid "F"
msgstr "F"

#: src/plonk-intro-cn/plonk-arithmetization.md:97
#: src/plonk-intro-cn/plonk-arithmetization.md:145
#: src/plonk-intro-cn/plonk-arithmetization.md:149
#: src/plonk-intro-cn/plonk-polycom.md:49
#: src/plonk-intro-cn/plonk-polycom.md:73
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:186
#: src/zk-snarks/3-General-Purpose-Computation.md:72
#: src/zk-snarks/3-General-Purpose-Computation.md:79
#: src/zk-snarks/3-General-Purpose-Computation.md:83
#: src/zk-snarks/3-General-Purpose-Computation.md:96
#: src/zk-snarks/3-General-Purpose-Computation.md:97
#: src/zk-snarks/3-General-Purpose-Computation.md:98
#: src/zk-snarks/3-General-Purpose-Computation.md:102
#: src/zk-snarks/3-General-Purpose-Computation.md:127
#: src/zk-snarks/3-General-Purpose-Computation.md:137
#: src/zk-snarks/3-General-Purpose-Computation.md:141
#: src/zk-snarks/3-General-Purpose-Computation.md:155
#: src/zk-snarks/3-General-Purpose-Computation.md:161
#: src/zk-snarks/3-General-Purpose-Computation.md:165
#: src/zk-snarks/3-General-Purpose-Computation.md:171
#: src/zk-snarks/3-General-Purpose-Computation.md:180
#: src/zk-snarks/3-General-Purpose-Computation.md:196
#: src/zk-snarks/3-General-Purpose-Computation.md:213
#: src/zk-snarks/3-General-Purpose-Computation.md:315
#: src/zk-snarks/3-General-Purpose-Computation.md:366
#: src/zk-snarks/4-Construction-Properties.md:29
#: src/zk-snarks/4-Construction-Properties.md:46
#: src/zk-snarks/4-Construction-Properties.md:49
#: src/zk-snarks/4-Construction-Properties.md:62
#: src/zk-snarks/4-Construction-Properties.md:67
#: src/zk-snarks/4-Construction-Properties.md:76
#: src/zk-snarks/4-Construction-Properties.md:77
#: src/zk-snarks/4-Construction-Properties.md:83
#: src/zk-snarks/4-Construction-Properties.md:86
#: src/zk-snarks/4-Construction-Properties.md:108
#: src/zk-snarks/4-Construction-Properties.md:111
#: src/zk-snarks/4-Construction-Properties.md:112
#: src/zk-snarks/4-Construction-Properties.md:113
#: src/zk-snarks/4-Construction-Properties.md:150
#: src/zk-snarks/4-Construction-Properties.md:176
#: src/zk-snarks/4-Construction-Properties.md:178
#: src/zk-snarks/4-Construction-Properties.md:184
#: src/zk-snarks/4-Construction-Properties.md:205
#: src/zk-snarks/4-Construction-Properties.md:234
#: src/zk-snarks/4-Construction-Properties.md:235
#: src/zk-snarks/4-Construction-Properties.md:330
#: src/zk-snarks/4-Construction-Properties.md:365
#: src/zk-snarks/5-Pinocchio-Protocol.md:26
#: src/zk-snarks/5-Pinocchio-Protocol.md:28
#: src/zk-snarks/5-Pinocchio-Protocol.md:32
#: src/zk-snarks/5-Pinocchio-Protocol.md:34
#: src/zk-snarks/5-Pinocchio-Protocol.md:45
#: src/zk-snarks/5-Pinocchio-Protocol.md:106
#: src/zk-snarks/5-Pinocchio-Protocol.md:118
#: src/zk-snarks/5-Pinocchio-Protocol.md:151 src/halo2/tmp/9-decomposed.md:42
#: src/halo2/tmp/9-decomposed.md:46 src/zk-everything/BabySNARK tutorial.md:31
#: tutorial.md:154 src/zk-everything/zk-learning-miles/KZG.md:201
#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:42 src/public goods/第二章.md:72 goods/第二章.md:83
msgid "×"
msgstr "×"

#: src/plonk-intro-cn/plonk-arithmetization.md:97
#: src/plonk-intro-cn/plonk-arithmetization.md:99
#: src/plonk-intro-cn/plonk-permutation.md:120
#: src/plonk-intro-cn/plonk-lookup.md:41 src/plonk-intro-cn/plonk-lookup.md:113
#: src/plonk-intro-cn/plonk-lookup.md:117
#: src/plonk-intro-cn/plonk-lookup.md:121
#: src/plonk-intro-cn/plonk-lookup.md:129
#: src/plonk-intro-cn/plonk-lookup.md:131
#: src/plonk-intro-cn/plonk-lookup.md:133
#: src/plonk-intro-cn/plonk-lookup.md:135
#: src/plonk-intro-cn/plonk-lookup.md:137
#: src/plonk-intro-cn/plonk-lookup.md:139
#: src/plonk-intro-cn/plonk-lookup.md:188
#: src/plonk-intro-cn/plonk-lookup.md:224
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:24
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:252
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:254
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:256
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:260
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:261
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:262
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:269
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:271
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:272
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:279
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:313
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:26
#: src/zk-snarks/3-General-Purpose-Computation.md:137
#: src/zk-snarks/4-Construction-Properties.md:111
#: src/zk-snarks/4-Construction-Properties.md:112
#: src/zk-snarks/4-Construction-Properties.md:117
#: src/zk-snarks/4-Construction-Properties.md:120
#: src/zk-snarks/4-Construction-Properties.md:121
#: src/zk-snarks/4-Construction-Properties.md:135
#: src/zk-snarks/4-Construction-Properties.md:139
#: src/zk-snarks/4-Construction-Properties.md:150
#: src/zk-snarks/4-Construction-Properties.md:151
#: src/zk-snarks/4-Construction-Properties.md:155
#: src/zk-snarks/4-Construction-Properties.md:156
#: src/zk-snarks/4-Construction-Properties.md:162
#: src/zk-snarks/4-Construction-Properties.md:171
#: src/zk-snarks/4-Construction-Properties.md:172
#: src/zk-snarks/4-Construction-Properties.md:195
#: src/zk-snarks/4-Construction-Properties.md:271
#: src/zk-snarks/5-Pinocchio-Protocol.md:83
#: src/zk-snarks/5-Pinocchio-Protocol.md:84
#: src/zk-snarks/5-Pinocchio-Protocol.md:87
#: src/zk-snarks/5-Pinocchio-Protocol.md:89
#: src/zk-snarks/5-Pinocchio-Protocol.md:97
#: src/zk-snarks/5-Pinocchio-Protocol.md:187
#: src/zk-snarks/5-Pinocchio-Protocol.md:192
#: src/zk-snarks/5-Pinocchio-Protocol.md:195
#: src/zk-snarks/5-Pinocchio-Protocol.md:198
#: src/zk-snarks/5-Pinocchio-Protocol.md:204
#: src/zk-snarks/5-Pinocchio-Protocol.md:207
#: src/zk-snarks/5-Pinocchio-Protocol.md:214 src/halo2/tmp/9-decomposed.md:21
#: src/halo2/tmp/9-decomposed.md:25 src/halo2/tmp/9-decomposed.md:26
#: src/halo2/tmp/9-decomposed.md:27 src/halo2/tmp/9-decomposed.md:29
#: src/halo2/tmp/9-decomposed.md:31 src/halo2/tmp/9-decomposed.md:273
#: src/zk-everything/BabySNARK tutorial.md:31 tutorial.md:35 tutorial.md:123
#: tutorial.md:127 tutorial.md:129 tutorial.md:131 tutorial.md:145
#: tutorial.md:148 tutorial.md:154 tutorial.md:158 tutorial.md:185
#: src/zk-everything/zk-learning-miles/KZG.md:45
#: src/zk-everything/zk-learning-miles/KZG.md:106
#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:242 SNARKs.md:244 SNARKs.md:254 SNARKs.md:258 SNARKs.md:261
#: SNARKs.md:263 SNARKs.md:284 SNARKs.md:302 SNARKs.md:342 SNARKs.md:398
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:58
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:64
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:87
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:134
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:145
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:152
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:396
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:448
#: src/zk-everything/zk-everything-joe/Hyrax.md:58
#: src/zk-everything/zk-everything-joe/Hyrax.md:64
#: src/zk-everything/zk-everything-joe/Hyrax.md:70
#: src/zk-everything/zk-everything-joe/Hyrax.md:98
#: src/zk-everything/zk-everything-joe/Hyrax.md:191
#: src/zk-everything/zk-everything-joe/Spartan.md:117
#: src/zk-everything/zk-everything-joe/Spartan.md:118
#: src/zk-everything/zk-everything-joe/Spartan.md:135
#: src/zk-everything/zk-everything-joe/Spartan.md:142
#: src/zk-everything/zk-everything-joe/Spartan.md:154
#: src/zk-everything/zk-everything-joe/Spartan.md:242
#: src/zk-everything/zk-everything-joe/Spartan.md:246
#: src/zk-everything/zk-everything-joe/Spartan.md:264
#: src/zk-everything/zk-everything-joe/Spartan.md:268
#: src/zk-everything/zk-everything-joe/Spartan.md:312
#: src/zk-everything/zk-everything-joe/Spartan.md:314
#: src/zk-everything/zk-everything-joe/Spartan.md:323
#: src/zk-everything/zk-everything-joe/Spartan.md:327
#: src/zk-everything/zk-everything-joe/Spartan.md:343
#: src/zk-everything/zk-everything-joe/Spartan.md:344
#: src/zk-everything/zk-everything-joe/Spartan.md:361 src/Nova/SuperNova.md:35
#: src/Nova/SuperNova.md:66 src/Nova/SuperNova.md:68 src/public
#: goods/第二章.md:10 goods/第二章.md:12 goods/第二章.md:13
#: goods/第二章.md:14 goods/第二章.md:15 goods/第二章.md:17
#: goods/第二章.md:29 goods/第二章.md:30 goods/第二章.md:31
#: goods/第二章.md:32 goods/第二章.md:80 goods/第二章.md:83
#: goods/第二章.md:125 goods/第二章.md:129 goods/第二章.md:147
#: goods/第二章.md:175 goods/4-Proving-System.md:107
#: goods/4-Proving-System.md:111 goods/4-Proving-System.md:124
#: goods/4-Proving-System.md:127 goods/4-Proving-System.md:145
#: goods/4-Proving-System.md:149 goods/4-Proving-System.md:155
#: goods/4-Proving-System.md:157 goods/4-Proving-System.md:169
#: goods/4-Proving-System.md:171 goods/4-Proving-System.md:177
msgid "m"
msgstr "m"

#: src/plonk-intro-cn/plonk-arithmetization.md:99
#: src/plonk-intro-cn/plonk-permutation.md:98
#: src/plonk-intro-cn/plonk-constraints.md:91
#: src/plonk-intro-cn/plonk-constraints.md:147
#: src/plonk-intro-cn/plonk-randomizing.md:92 src/zk-everything/BabySNARK
#: tutorial.md:35 tutorial.md:158
msgid "其中 "
msgstr "其中 "

#: src/plonk-intro-cn/plonk-arithmetization.md:99
msgid " 为乘法门的数量，而 "
msgstr " 为乘法门的数量，而 "

#: src/plonk-intro-cn/plonk-arithmetization.md:99
msgid " 大致为引线的数量。每一个矩阵的第 "
msgstr " 大致为引线的数量。每一个矩阵的第 "

#: src/plonk-intro-cn/plonk-arithmetization.md:99
#: src/plonk-intro-cn/plonk-arithmetization.md:101
#: src/plonk-intro-cn/plonk-arithmetization.md:105
#: src/plonk-intro-cn/plonk-arithmetization.md:109
#: src/plonk-intro-cn/plonk-arithmetization.md:147
#: src/plonk-intro-cn/plonk-arithmetization.md:151
#: src/plonk-intro-cn/plonk-arithmetization.md:179
#: src/plonk-intro-cn/plonk-arithmetization.md:209
#: src/plonk-intro-cn/plonk-arithmetization.md:231
#: src/plonk-intro-cn/plonk-arithmetization.md:237
#: src/plonk-intro-cn/plonk-arithmetization.md:245
#: src/plonk-intro-cn/plonk-arithmetization.md:247
#: src/plonk-intro-cn/plonk-arithmetization.md:249
#: src/plonk-intro-cn/plonk-lagrange-basis.md:20
#: src/plonk-intro-cn/plonk-lagrange-basis.md:28
#: src/plonk-intro-cn/plonk-lagrange-basis.md:34
#: src/plonk-intro-cn/plonk-lagrange-basis.md:38
#: src/plonk-intro-cn/plonk-lagrange-basis.md:44
#: src/plonk-intro-cn/plonk-lagrange-basis.md:83
#: src/plonk-intro-cn/plonk-lagrange-basis.md:85
#: src/plonk-intro-cn/plonk-lagrange-basis.md:101
#: src/plonk-intro-cn/plonk-lagrange-basis.md:103
#: src/plonk-intro-cn/plonk-lagrange-basis.md:109
#: src/plonk-intro-cn/plonk-lagrange-basis.md:111
#: src/plonk-intro-cn/plonk-lagrange-basis.md:113
#: src/plonk-intro-cn/plonk-lagrange-basis.md:115
#: src/plonk-intro-cn/plonk-permutation.md:11
#: src/plonk-intro-cn/plonk-permutation.md:21
#: src/plonk-intro-cn/plonk-permutation.md:58
#: src/plonk-intro-cn/plonk-permutation.md:62
#: src/plonk-intro-cn/plonk-permutation.md:68
#: src/plonk-intro-cn/plonk-permutation.md:88
#: src/plonk-intro-cn/plonk-permutation.md:110
#: src/plonk-intro-cn/plonk-permutation.md:114
#: src/plonk-intro-cn/plonk-permutation.md:116
#: src/plonk-intro-cn/plonk-permutation.md:120
#: src/plonk-intro-cn/plonk-permutation.md:122
#: src/plonk-intro-cn/plonk-permutation.md:124
#: src/plonk-intro-cn/plonk-permutation.md:128
#: src/plonk-intro-cn/plonk-permutation.md:134
#: src/plonk-intro-cn/plonk-permutation.md:144
#: src/plonk-intro-cn/plonk-permutation.md:148
#: src/plonk-intro-cn/plonk-permutation.md:150
#: src/plonk-intro-cn/plonk-permutation.md:156
#: src/plonk-intro-cn/plonk-permutation.md:174
#: src/plonk-intro-cn/plonk-permutation.md:190
#: src/plonk-intro-cn/plonk-permutation.md:198
#: src/plonk-intro-cn/plonk-permutation.md:204
#: src/plonk-intro-cn/plonk-permutation.md:208
#: src/plonk-intro-cn/plonk-permutation.md:212
#: src/plonk-intro-cn/plonk-constraints.md:9
#: src/plonk-intro-cn/plonk-constraints.md:13
#: src/plonk-intro-cn/plonk-constraints.md:17
#: src/plonk-intro-cn/plonk-constraints.md:21
#: src/plonk-intro-cn/plonk-constraints.md:25
#: src/plonk-intro-cn/plonk-constraints.md:27
#: src/plonk-intro-cn/plonk-constraints.md:57
#: src/plonk-intro-cn/plonk-constraints.md:63
#: src/plonk-intro-cn/plonk-constraints.md:67
#: src/plonk-intro-cn/plonk-constraints.md:69
#: src/plonk-intro-cn/plonk-constraints.md:71
#: src/plonk-intro-cn/plonk-constraints.md:75
#: src/plonk-intro-cn/plonk-constraints.md:77
#: src/plonk-intro-cn/plonk-constraints.md:89
#: src/plonk-intro-cn/plonk-constraints.md:93
#: src/plonk-intro-cn/plonk-constraints.md:116
#: src/plonk-intro-cn/plonk-constraints.md:120
#: src/plonk-intro-cn/plonk-constraints.md:141
#: src/plonk-intro-cn/plonk-constraints.md:143
#: src/plonk-intro-cn/plonk-constraints.md:145
#: src/plonk-intro-cn/plonk-constraints.md:147
#: src/plonk-intro-cn/plonk-constraints.md:149
#: src/plonk-intro-cn/plonk-constraints.md:153
#: src/plonk-intro-cn/plonk-constraints.md:155
#: src/plonk-intro-cn/plonk-constraints.md:179
#: src/plonk-intro-cn/plonk-randomizing.md:88
#: src/plonk-intro-cn/plonk-randomizing.md:92
#: src/plonk-intro-cn/plonk-randomizing.md:97
#: src/plonk-intro-cn/plonk-randomizing.md:99
#: src/plonk-intro-cn/plonk-randomizing.md:101
#: src/plonk-intro-cn/plonk-randomizing.md:112
#: src/plonk-intro-cn/plonk-randomizing.md:115
#: src/plonk-intro-cn/plonk-randomizing.md:117
#: src/plonk-intro-cn/plonk-randomizing.md:149
#: src/plonk-intro-cn/plonk-lookup.md:55 src/plonk-intro-cn/plonk-lookup.md:87
#: src/plonk-intro-cn/plonk-lookup.md:107
#: src/plonk-intro-cn/plonk-lookup.md:109
#: src/plonk-intro-cn/plonk-lookup.md:113
#: src/plonk-intro-cn/plonk-lookup.md:115
#: src/plonk-intro-cn/plonk-lookup.md:117
#: src/plonk-intro-cn/plonk-lookup.md:119
#: src/plonk-intro-cn/plonk-lookup.md:121
#: src/plonk-intro-cn/plonk-lookup.md:125
#: src/plonk-intro-cn/plonk-lookup.md:127
#: src/plonk-intro-cn/plonk-lookup.md:129
#: src/plonk-intro-cn/plonk-lookup.md:131
#: src/plonk-intro-cn/plonk-lookup.md:133
#: src/plonk-intro-cn/plonk-lookup.md:135
#: src/plonk-intro-cn/plonk-lookup.md:137
#: src/plonk-intro-cn/plonk-lookup.md:139
#: src/plonk-intro-cn/plonk-lookup.md:145
#: src/plonk-intro-cn/plonk-lookup.md:149
#: src/plonk-intro-cn/plonk-lookup.md:153
#: src/plonk-intro-cn/plonk-lookup.md:157
#: src/plonk-intro-cn/plonk-lookup.md:173
#: src/plonk-intro-cn/plonk-lookup.md:188
#: src/plonk-intro-cn/plonk-lookup.md:214
#: src/plonk-intro-cn/plonk-lookup.md:220
#: src/plonk-intro-cn/plonk-lookup.md:224
#: src/plonk-intro-cn/plonk-lookup.md:244
#: src/plonk-intro-cn/plonk-lookup.md:275
#: src/plonk-intro-cn/plonk-lookup.md:277
#: src/plonk-intro-cn/plonk-lookup.md:289
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:269
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:271
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:272
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:324
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:21
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:26
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:96
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:182
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:183
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:188
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:194
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:207
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:209
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:211
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:213
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:215
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:216
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:218
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:229
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:235
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:239
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:243
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:245
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:247
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:258
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:264
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:265
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:269
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:271
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:272
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:281
#: src/zk-snarks/3-General-Purpose-Computation.md:137
#: src/zk-snarks/3-General-Purpose-Computation.md:295
#: src/zk-snarks/3-General-Purpose-Computation.md:379
#: src/zk-snarks/4-Construction-Properties.md:63
#: src/zk-snarks/4-Construction-Properties.md:65
#: src/zk-snarks/4-Construction-Properties.md:67
#: src/zk-snarks/4-Construction-Properties.md:85
#: src/zk-snarks/4-Construction-Properties.md:113
#: src/zk-snarks/4-Construction-Properties.md:193
#: src/zk-snarks/4-Construction-Properties.md:195
#: src/zk-snarks/4-Construction-Properties.md:199
#: src/zk-snarks/4-Construction-Properties.md:203
#: src/zk-snarks/4-Construction-Properties.md:205
#: src/zk-snarks/4-Construction-Properties.md:207
#: src/zk-snarks/4-Construction-Properties.md:209
#: src/zk-snarks/4-Construction-Properties.md:221
#: src/zk-snarks/4-Construction-Properties.md:244
#: src/zk-snarks/4-Construction-Properties.md:249
#: src/zk-snarks/4-Construction-Properties.md:261
#: src/zk-snarks/4-Construction-Properties.md:262
#: src/zk-snarks/4-Construction-Properties.md:263
#: src/zk-snarks/4-Construction-Properties.md:264
#: src/zk-snarks/4-Construction-Properties.md:265
#: src/zk-snarks/4-Construction-Properties.md:271
#: src/zk-snarks/4-Construction-Properties.md:273
#: src/zk-snarks/4-Construction-Properties.md:275
#: src/zk-snarks/4-Construction-Properties.md:276
#: src/zk-snarks/4-Construction-Properties.md:277
#: src/zk-snarks/4-Construction-Properties.md:279
#: src/zk-snarks/4-Construction-Properties.md:282
#: src/zk-snarks/4-Construction-Properties.md:284
#: src/zk-snarks/4-Construction-Properties.md:298
#: src/zk-snarks/4-Construction-Properties.md:304
#: src/zk-snarks/4-Construction-Properties.md:306
#: src/zk-snarks/4-Construction-Properties.md:307
#: src/zk-snarks/4-Construction-Properties.md:345
#: src/zk-snarks/4-Construction-Properties.md:347
#: src/zk-snarks/4-Construction-Properties.md:407
#: src/zk-snarks/4-Construction-Properties.md:422
#: src/zk-snarks/4-Construction-Properties.md:428
#: src/zk-snarks/5-Pinocchio-Protocol.md:45
#: src/zk-snarks/5-Pinocchio-Protocol.md:87
#: src/zk-snarks/5-Pinocchio-Protocol.md:89
#: src/zk-snarks/5-Pinocchio-Protocol.md:97
#: src/zk-snarks/5-Pinocchio-Protocol.md:106
#: src/zk-snarks/5-Pinocchio-Protocol.md:136
#: src/zk-snarks/5-Pinocchio-Protocol.md:188
#: src/zk-snarks/5-Pinocchio-Protocol.md:192
#: src/zk-snarks/5-Pinocchio-Protocol.md:195
#: src/zk-snarks/5-Pinocchio-Protocol.md:198
#: src/zk-snarks/5-Pinocchio-Protocol.md:199
#: src/zk-snarks/5-Pinocchio-Protocol.md:204
#: src/zk-snarks/5-Pinocchio-Protocol.md:207
#: src/zk-snarks/5-Pinocchio-Protocol.md:214 src/halo2/chap-1/index.md:11
#: src/halo2/tmp/2-Fibonacci-example-1.md:275 src/halo2/tmp/9-decomposed.md:30
#: src/halo2/tmp/9-decomposed.md:101 src/halo2/tmp/9-decomposed.md:106
#: src/halo2/tmp/9-decomposed.md:141 src/halo2/tmp/9-decomposed.md:142
#: src/halo2/tmp/9-decomposed.md:146 src/halo2/tmp/9-decomposed.md:216
#: src/zk-everything/BabySNARK tutorial.md:33 tutorial.md:35 tutorial.md:124
#: tutorial.md:125 tutorial.md:126 tutorial.md:127 tutorial.md:131
#: tutorial.md:145 tutorial.md:148
#: src/zk-everything/zk-learning-miles/KZG.md:12
#: src/zk-everything/zk-learning-miles/KZG.md:96
#: src/zk-everything/zk-learning-miles/KZG.md:201
#: src/zk-everything/zk-learning-miles/KZG.md:205
#: src/zk-everything/zk-learning-miles/KZG.md:207
#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:273 SNARKs.md:296
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:58
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:64
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:79
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:83
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:87
#: src/zk-everything/zk-everything-joe/Hyrax.md:62
#: src/zk-everything/zk-everything-joe/Hyrax.md:68
#: src/zk-everything/zk-everything-joe/Hyrax.md:133
#: src/zk-everything/zk-everything-joe/Hyrax.md:134
#: src/zk-everything/zk-everything-joe/Hyrax.md:140
#: src/zk-everything/zk-everything-joe/Hyrax.md:142
#: src/zk-everything/zk-everything-joe/Hyrax.md:149
#: src/zk-everything/zk-everything-joe/Hyrax.md:162
#: src/zk-everything/zk-everything-joe/Hyrax.md:168
#: src/zk-everything/zk-everything-joe/Hyrax.md:181
#: src/zk-everything/zk-everything-joe/Hyrax.md:191
#: src/zk-everything/zk-everything-joe/Hyrax.md:195
#: src/zk-everything/zk-everything-joe/Hyrax.md:208
#: src/zk-everything/zk-everything-joe/Hyrax.md:214
#: src/zk-everything/zk-everything-joe/Hyrax.md:223
#: src/zk-everything/zk-everything-joe/Hyrax.md:228
#: src/zk-everything/zk-everything-joe/Hyrax.md:276
#: src/zk-everything/zk-everything-joe/Spartan.md:23
#: src/zk-everything/zk-everything-joe/Spartan.md:24
#: src/zk-everything/zk-everything-joe/Spartan.md:25
#: src/zk-everything/zk-everything-joe/Spartan.md:26
#: src/zk-everything/zk-everything-joe/Spartan.md:89
#: src/zk-everything/zk-everything-joe/Spartan.md:93
#: src/zk-everything/zk-everything-joe/Spartan.md:118
#: src/zk-everything/zk-everything-joe/Spartan.md:143
#: src/zk-everything/zk-everything-joe/Spartan.md:154
#: src/zk-everything/zk-everything-joe/Spartan.md:155
#: src/zk-everything/zk-everything-joe/Spartan.md:166
#: src/zk-everything/zk-everything-joe/Spartan.md:195
#: src/zk-everything/zk-everything-joe/Spartan.md:200
#: src/zk-everything/zk-everything-joe/Spartan.md:217
#: src/zk-everything/zk-everything-joe/Spartan.md:232
#: src/zk-everything/zk-everything-joe/Spartan.md:263
#: src/zk-everything/zk-everything-joe/Spartan.md:264
#: src/zk-everything/zk-everything-joe/Spartan.md:344
#: src/zk-everything/zk-everything-joe/Spartan.md:350
#: src/zk-everything/zk-everything-joe/Spartan.md:411
#: src/zk-everything/zk-everything-joe/Spartan.md:436 src/Nova/SuperNova.md:12
#: src/Nova/SuperNova.md:14 src/Nova/SuperNova.md:17 src/Nova/SuperNova.md:19
#: src/Nova/SuperNova.md:27 src/Nova/SuperNova.md:30 src/Nova/SuperNova.md:31
#: src/Nova/SuperNova.md:34 src/Nova/SuperNova.md:35 src/Nova/SuperNova.md:66
#: src/Nova/SuperNova.md:68 src/public goods/第二章.md:10
#: goods/第二章.md:13 goods/第二章.md:14 goods/第二章.md:15
#: goods/第二章.md:26 goods/第二章.md:30 goods/第二章.md:31
#: goods/第二章.md:32 goods/第二章.md:54 goods/第二章.md:56
#: goods/第二章.md:60 goods/第二章.md:65 goods/第二章.md:67
#: goods/第二章.md:72 goods/第二章.md:74 goods/第二章.md:80
#: goods/第二章.md:84 goods/第二章.md:86 goods/第二章.md:89
#: goods/第二章.md:97 goods/第二章.md:103 goods/第二章.md:125
#: goods/第二章.md:129 goods/第二章.md:146 goods/第二章.md:160
#: goods/第二章.md:162 goods/4-Proving-System.md:62
#: src/materials/ZK-Materials.md:600
msgid "i"
msgstr "i"

#: src/plonk-intro-cn/plonk-arithmetization.md:99
msgid " 行「选择」了第 "
msgstr " 行「选择」了第 "

#: src/plonk-intro-cn/plonk-arithmetization.md:99
msgid " 个乘法门的输入输出变量。比如我们定义电路的左输入矩阵  "
msgstr " 个乘法门的输入输出变量。比如我们定义电路的左输入矩阵  "

#: src/plonk-intro-cn/plonk-arithmetization.md:99
#: src/plonk-intro-cn/plonk-polycom.md:91
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:216
#: src/zk-snarks/3-General-Purpose-Computation.md:331 src/public
#: goods/4-Proving-System.md:141
msgid " ："
msgstr " ："

#: src/plonk-intro-cn/plonk-arithmetization.md:103
msgid "其中第一个乘法门的左输入为 "
msgstr "其中第一个乘法门的左输入为 "

#: src/plonk-intro-cn/plonk-arithmetization.md:103
msgid "， 第二个乘法门的左输入为 "
msgstr "， 第二个乘法门的左输入为 "

#: src/plonk-intro-cn/plonk-arithmetization.md:103
msgid "。右输入矩阵 "
msgstr "。右输入矩阵 "

#: src/plonk-intro-cn/plonk-arithmetization.md:103
msgid " 定义为："
msgstr " 定义为："

#: src/plonk-intro-cn/plonk-arithmetization.md:107
msgid "其中1号门的右输入为 "
msgstr "其中1号门的右输入为 "

#: src/plonk-intro-cn/plonk-arithmetization.md:107
msgid "，第二个乘法门的右输入为 "
msgstr "，第二个乘法门的右输入为 "

#: src/plonk-intro-cn/plonk-arithmetization.md:107
msgid "。最后定义输出矩阵 "
msgstr "。最后定义输出矩阵 "

#: src/plonk-intro-cn/plonk-arithmetization.md:111
msgid "我们把所有的引线赋值看作为一个向量： "
msgstr "我们把所有的引线赋值看作为一个向量： "

#: src/plonk-intro-cn/plonk-arithmetization.md:111
#: src/plonk-intro-cn/plonk-arithmetization.md:115
#: src/plonk-intro-cn/plonk-arithmetization.md:119
#: src/plonk-intro-cn/plonk-arithmetization.md:147
#: src/plonk-intro-cn/plonk-arithmetization.md:155
#: src/plonk-intro-cn/plonk-arithmetization.md:177
#: src/plonk-intro-cn/plonk-arithmetization.md:179
#: src/plonk-intro-cn/plonk-arithmetization.md:187
#: src/plonk-intro-cn/plonk-arithmetization.md:189
#: src/plonk-intro-cn/plonk-arithmetization.md:191
#: src/plonk-intro-cn/plonk-arithmetization.md:197
#: src/plonk-intro-cn/plonk-arithmetization.md:199
#: src/plonk-intro-cn/plonk-arithmetization.md:201
#: src/plonk-intro-cn/plonk-arithmetization.md:203
#: src/plonk-intro-cn/plonk-arithmetization.md:205
#: src/plonk-intro-cn/plonk-arithmetization.md:209
#: src/plonk-intro-cn/plonk-arithmetization.md:231
#: src/plonk-intro-cn/plonk-arithmetization.md:241
#: src/plonk-intro-cn/plonk-arithmetization.md:245
#: src/plonk-intro-cn/plonk-arithmetization.md:249
#: src/plonk-intro-cn/plonk-arithmetization.md:257
#: src/plonk-intro-cn/plonk-arithmetization.md:259
#: src/plonk-intro-cn/plonk-lagrange-basis.md:14
#: src/plonk-intro-cn/plonk-lagrange-basis.md:18
#: src/plonk-intro-cn/plonk-lagrange-basis.md:20
#: src/plonk-intro-cn/plonk-lagrange-basis.md:22
#: src/plonk-intro-cn/plonk-lagrange-basis.md:24
#: src/plonk-intro-cn/plonk-lagrange-basis.md:28
#: src/plonk-intro-cn/plonk-lagrange-basis.md:30
#: src/plonk-intro-cn/plonk-lagrange-basis.md:32
#: src/plonk-intro-cn/plonk-lagrange-basis.md:34
#: src/plonk-intro-cn/plonk-lagrange-basis.md:36
#: src/plonk-intro-cn/plonk-lagrange-basis.md:38
#: src/plonk-intro-cn/plonk-lagrange-basis.md:44
#: src/plonk-intro-cn/plonk-lagrange-basis.md:46
#: src/plonk-intro-cn/plonk-lagrange-basis.md:50
#: src/plonk-intro-cn/plonk-lagrange-basis.md:54
#: src/plonk-intro-cn/plonk-lagrange-basis.md:58
#: src/plonk-intro-cn/plonk-lagrange-basis.md:64
#: src/plonk-intro-cn/plonk-lagrange-basis.md:66
#: src/plonk-intro-cn/plonk-lagrange-basis.md:119
#: src/plonk-intro-cn/plonk-lagrange-basis.md:121
#: src/plonk-intro-cn/plonk-lagrange-basis.md:129
#: src/plonk-intro-cn/plonk-lagrange-basis.md:131
#: src/plonk-intro-cn/plonk-lagrange-basis.md:135
#: src/plonk-intro-cn/plonk-lagrange-basis.md:137
#: src/plonk-intro-cn/plonk-lagrange-basis.md:139
#: src/plonk-intro-cn/plonk-lagrange-basis.md:143
#: src/plonk-intro-cn/plonk-lagrange-basis.md:147
#: src/plonk-intro-cn/plonk-lagrange-basis.md:149
#: src/plonk-intro-cn/plonk-lagrange-basis.md:151
#: src/plonk-intro-cn/plonk-permutation.md:11
#: src/plonk-intro-cn/plonk-permutation.md:13
#: src/plonk-intro-cn/plonk-permutation.md:19
#: src/plonk-intro-cn/plonk-permutation.md:21
#: src/plonk-intro-cn/plonk-permutation.md:23
#: src/plonk-intro-cn/plonk-permutation.md:35
#: src/plonk-intro-cn/plonk-permutation.md:36
#: src/plonk-intro-cn/plonk-permutation.md:38
#: src/plonk-intro-cn/plonk-permutation.md:140
#: src/plonk-intro-cn/plonk-permutation.md:142
#: src/plonk-intro-cn/plonk-permutation.md:146
#: src/plonk-intro-cn/plonk-permutation.md:148
#: src/plonk-intro-cn/plonk-permutation.md:150
#: src/plonk-intro-cn/plonk-permutation.md:156
#: src/plonk-intro-cn/plonk-permutation.md:158
#: src/plonk-intro-cn/plonk-permutation.md:159
#: src/plonk-intro-cn/plonk-permutation.md:161
#: src/plonk-intro-cn/plonk-permutation.md:162
#: src/plonk-intro-cn/plonk-permutation.md:164
#: src/plonk-intro-cn/plonk-permutation.md:174
#: src/plonk-intro-cn/plonk-permutation.md:176
#: src/plonk-intro-cn/plonk-permutation.md:177
#: src/plonk-intro-cn/plonk-permutation.md:179
#: src/plonk-intro-cn/plonk-permutation.md:180
#: src/plonk-intro-cn/plonk-permutation.md:182
#: src/plonk-intro-cn/plonk-permutation.md:188
#: src/plonk-intro-cn/plonk-permutation.md:192
#: src/plonk-intro-cn/plonk-permutation.md:198
#: src/plonk-intro-cn/plonk-permutation.md:204
#: src/plonk-intro-cn/plonk-permutation.md:208
#: src/plonk-intro-cn/plonk-permutation.md:212
#: src/plonk-intro-cn/plonk-constraints.md:7
#: src/plonk-intro-cn/plonk-constraints.md:9
#: src/plonk-intro-cn/plonk-constraints.md:11
#: src/plonk-intro-cn/plonk-constraints.md:13
#: src/plonk-intro-cn/plonk-constraints.md:15
#: src/plonk-intro-cn/plonk-constraints.md:17
#: src/plonk-intro-cn/plonk-constraints.md:21
#: src/plonk-intro-cn/plonk-constraints.md:25
#: src/plonk-intro-cn/plonk-constraints.md:27
#: src/plonk-intro-cn/plonk-constraints.md:29
#: src/plonk-intro-cn/plonk-constraints.md:35
#: src/plonk-intro-cn/plonk-constraints.md:37
#: src/plonk-intro-cn/plonk-constraints.md:39
#: src/plonk-intro-cn/plonk-constraints.md:41
#: src/plonk-intro-cn/plonk-constraints.md:43
#: src/plonk-intro-cn/plonk-constraints.md:45
#: src/plonk-intro-cn/plonk-constraints.md:47
#: src/plonk-intro-cn/plonk-constraints.md:57
#: src/plonk-intro-cn/plonk-constraints.md:59
#: src/plonk-intro-cn/plonk-constraints.md:63
#: src/plonk-intro-cn/plonk-constraints.md:65
#: src/plonk-intro-cn/plonk-constraints.md:67
#: src/plonk-intro-cn/plonk-constraints.md:69
#: src/plonk-intro-cn/plonk-constraints.md:71
#: src/plonk-intro-cn/plonk-constraints.md:73
#: src/plonk-intro-cn/plonk-constraints.md:75
#: src/plonk-intro-cn/plonk-constraints.md:77
#: src/plonk-intro-cn/plonk-constraints.md:120
#: src/plonk-intro-cn/plonk-constraints.md:133
#: src/plonk-intro-cn/plonk-constraints.md:141
#: src/plonk-intro-cn/plonk-constraints.md:143
#: src/plonk-intro-cn/plonk-constraints.md:145
#: src/plonk-intro-cn/plonk-constraints.md:149
#: src/plonk-intro-cn/plonk-constraints.md:159
#: src/plonk-intro-cn/plonk-constraints.md:161
#: src/plonk-intro-cn/plonk-constraints.md:163
#: src/plonk-intro-cn/plonk-constraints.md:175
#: src/plonk-intro-cn/plonk-constraints.md:179
#: src/plonk-intro-cn/plonk-constraints.md:184
#: src/plonk-intro-cn/plonk-constraints.md:186
#: src/plonk-intro-cn/plonk-constraints.md:191
#: src/plonk-intro-cn/plonk-constraints.md:192
#: src/plonk-intro-cn/plonk-constraints.md:199
#: src/plonk-intro-cn/plonk-polycom.md:21
#: src/plonk-intro-cn/plonk-polycom.md:25
#: src/plonk-intro-cn/plonk-polycom.md:29
#: src/plonk-intro-cn/plonk-polycom.md:33
#: src/plonk-intro-cn/plonk-polycom.md:53
#: src/plonk-intro-cn/plonk-randomizing.md:17
#: src/plonk-intro-cn/plonk-randomizing.md:31
#: src/plonk-intro-cn/plonk-randomizing.md:33
#: src/plonk-intro-cn/plonk-randomizing.md:37
#: src/plonk-intro-cn/plonk-randomizing.md:39
#: src/plonk-intro-cn/plonk-randomizing.md:41
#: src/plonk-intro-cn/plonk-randomizing.md:45
#: src/plonk-intro-cn/plonk-randomizing.md:47
#: src/plonk-intro-cn/plonk-randomizing.md:51
#: src/plonk-intro-cn/plonk-randomizing.md:53
#: src/plonk-intro-cn/plonk-randomizing.md:85
#: src/plonk-intro-cn/plonk-randomizing.md:88
#: src/plonk-intro-cn/plonk-randomizing.md:90
#: src/plonk-intro-cn/plonk-randomizing.md:92
#: src/plonk-intro-cn/plonk-randomizing.md:93
#: src/plonk-intro-cn/plonk-randomizing.md:97
#: src/plonk-intro-cn/plonk-randomizing.md:103
#: src/plonk-intro-cn/plonk-randomizing.md:115
#: src/plonk-intro-cn/plonk-randomizing.md:117
#: src/plonk-intro-cn/plonk-randomizing.md:127
#: src/plonk-intro-cn/plonk-randomizing.md:129
#: src/plonk-intro-cn/plonk-randomizing.md:133
#: src/plonk-intro-cn/plonk-lookup.md:119
#: src/plonk-intro-cn/plonk-lookup.md:121
#: src/plonk-intro-cn/plonk-lookup.md:123
#: src/plonk-intro-cn/plonk-lookup.md:190
#: src/plonk-intro-cn/plonk-lookup.md:230
#: src/plonk-intro-cn/plonk-lookup.md:261
#: src/plonk-intro-cn/plonk-lookup.md:265
#: src/plonk-intro-cn/plonk-lookup.md:267
#: src/plonk-intro-cn/plonk-lookup.md:269
#: src/plonk-intro-cn/plonk-lookup.md:275
#: src/plonk-intro-cn/plonk-lookup.md:289
#: src/plonk-intro-cn/plonk-lookup.md:304
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:103
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:105
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:271
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:272
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:26
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:38
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:40
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:42
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:43
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:45
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:47
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:48
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:52
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:53
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:57
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:62
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:151
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:152
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:164
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:170
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:175
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:176
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:194
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:247
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:298
#: src/zk-snarks/3-General-Purpose-Computation.md:39
#: src/zk-snarks/3-General-Purpose-Computation.md:41
#: src/zk-snarks/3-General-Purpose-Computation.md:42
#: src/zk-snarks/3-General-Purpose-Computation.md:66
#: src/zk-snarks/3-General-Purpose-Computation.md:68
#: src/zk-snarks/3-General-Purpose-Computation.md:70
#: src/zk-snarks/3-General-Purpose-Computation.md:75
#: src/zk-snarks/3-General-Purpose-Computation.md:79
#: src/zk-snarks/3-General-Purpose-Computation.md:98
#: src/zk-snarks/3-General-Purpose-Computation.md:112
#: src/zk-snarks/3-General-Purpose-Computation.md:127
#: src/zk-snarks/3-General-Purpose-Computation.md:137
#: src/zk-snarks/3-General-Purpose-Computation.md:196
#: src/zk-snarks/3-General-Purpose-Computation.md:198
#: src/zk-snarks/3-General-Purpose-Computation.md:213
#: src/zk-snarks/3-General-Purpose-Computation.md:214
#: src/zk-snarks/3-General-Purpose-Computation.md:215
#: src/zk-snarks/3-General-Purpose-Computation.md:216
#: src/zk-snarks/3-General-Purpose-Computation.md:218
#: src/zk-snarks/3-General-Purpose-Computation.md:248
#: src/zk-snarks/3-General-Purpose-Computation.md:249
#: src/zk-snarks/3-General-Purpose-Computation.md:266
#: src/zk-snarks/3-General-Purpose-Computation.md:268
#: src/zk-snarks/3-General-Purpose-Computation.md:271
#: src/zk-snarks/3-General-Purpose-Computation.md:276
#: src/zk-snarks/3-General-Purpose-Computation.md:279
#: src/zk-snarks/3-General-Purpose-Computation.md:280
#: src/zk-snarks/3-General-Purpose-Computation.md:295
#: src/zk-snarks/3-General-Purpose-Computation.md:313
#: src/zk-snarks/3-General-Purpose-Computation.md:315
#: src/zk-snarks/3-General-Purpose-Computation.md:320
#: src/zk-snarks/3-General-Purpose-Computation.md:322
#: src/zk-snarks/3-General-Purpose-Computation.md:326
#: src/zk-snarks/3-General-Purpose-Computation.md:331
#: src/zk-snarks/3-General-Purpose-Computation.md:336
#: src/zk-snarks/3-General-Purpose-Computation.md:340
#: src/zk-snarks/3-General-Purpose-Computation.md:347
#: src/zk-snarks/3-General-Purpose-Computation.md:349
#: src/zk-snarks/3-General-Purpose-Computation.md:350
#: src/zk-snarks/3-General-Purpose-Computation.md:351
#: src/zk-snarks/3-General-Purpose-Computation.md:355
#: src/zk-snarks/3-General-Purpose-Computation.md:356
#: src/zk-snarks/3-General-Purpose-Computation.md:358
#: src/zk-snarks/3-General-Purpose-Computation.md:360
#: src/zk-snarks/3-General-Purpose-Computation.md:366
#: src/zk-snarks/3-General-Purpose-Computation.md:381
#: src/zk-snarks/3-General-Purpose-Computation.md:384
#: src/zk-snarks/4-Construction-Properties.md:29
#: src/zk-snarks/4-Construction-Properties.md:46
#: src/zk-snarks/4-Construction-Properties.md:62
#: src/zk-snarks/4-Construction-Properties.md:76
#: src/zk-snarks/4-Construction-Properties.md:77
#: src/zk-snarks/4-Construction-Properties.md:82
#: src/zk-snarks/4-Construction-Properties.md:83
#: src/zk-snarks/4-Construction-Properties.md:85
#: src/zk-snarks/4-Construction-Properties.md:86
#: src/zk-snarks/4-Construction-Properties.md:105
#: src/zk-snarks/4-Construction-Properties.md:108
#: src/zk-snarks/4-Construction-Properties.md:111
#: src/zk-snarks/4-Construction-Properties.md:112
#: src/zk-snarks/4-Construction-Properties.md:117
#: src/zk-snarks/4-Construction-Properties.md:119
#: src/zk-snarks/4-Construction-Properties.md:120
#: src/zk-snarks/4-Construction-Properties.md:121
#: src/zk-snarks/4-Construction-Properties.md:128
#: src/zk-snarks/4-Construction-Properties.md:133
#: src/zk-snarks/4-Construction-Properties.md:136
#: src/zk-snarks/4-Construction-Properties.md:149
#: src/zk-snarks/4-Construction-Properties.md:150
#: src/zk-snarks/4-Construction-Properties.md:151
#: src/zk-snarks/4-Construction-Properties.md:155
#: src/zk-snarks/4-Construction-Properties.md:156
#: src/zk-snarks/4-Construction-Properties.md:162
#: src/zk-snarks/4-Construction-Properties.md:164
#: src/zk-snarks/4-Construction-Properties.md:168
#: src/zk-snarks/4-Construction-Properties.md:170
#: src/zk-snarks/4-Construction-Properties.md:171
#: src/zk-snarks/4-Construction-Properties.md:172
#: src/zk-snarks/4-Construction-Properties.md:174
#: src/zk-snarks/4-Construction-Properties.md:195
#: src/zk-snarks/4-Construction-Properties.md:271
#: src/zk-snarks/4-Construction-Properties.md:315
#: src/zk-snarks/4-Construction-Properties.md:330
#: src/zk-snarks/4-Construction-Properties.md:331
#: src/zk-snarks/4-Construction-Properties.md:333
#: src/zk-snarks/4-Construction-Properties.md:338
#: src/zk-snarks/4-Construction-Properties.md:341
#: src/zk-snarks/4-Construction-Properties.md:342
#: src/zk-snarks/4-Construction-Properties.md:345
#: src/zk-snarks/4-Construction-Properties.md:353
#: src/zk-snarks/4-Construction-Properties.md:357
#: src/zk-snarks/4-Construction-Properties.md:365
#: src/zk-snarks/4-Construction-Properties.md:368
#: src/zk-snarks/4-Construction-Properties.md:370
#: src/zk-snarks/4-Construction-Properties.md:371
#: src/zk-snarks/4-Construction-Properties.md:374
#: src/zk-snarks/4-Construction-Properties.md:375
#: src/zk-snarks/4-Construction-Properties.md:376
#: src/zk-snarks/4-Construction-Properties.md:377
#: src/zk-snarks/4-Construction-Properties.md:379
#: src/zk-snarks/4-Construction-Properties.md:381
#: src/zk-snarks/4-Construction-Properties.md:385
#: src/zk-snarks/5-Pinocchio-Protocol.md:25
#: src/zk-snarks/5-Pinocchio-Protocol.md:26
#: src/zk-snarks/5-Pinocchio-Protocol.md:27
#: src/zk-snarks/5-Pinocchio-Protocol.md:28
#: src/zk-snarks/5-Pinocchio-Protocol.md:29
#: src/zk-snarks/5-Pinocchio-Protocol.md:31
#: src/zk-snarks/5-Pinocchio-Protocol.md:32
#: src/zk-snarks/5-Pinocchio-Protocol.md:118 src/halo2/chap-1/index.md:11
#: src/halo2/chap-1/index.md:28 src/halo2/tmp/halo2-learning-materials.md:62
#: src/halo2/tmp/1-Simple-Example.md:40 src/halo2/tmp/1-Simple-Example.md:41
#: src/halo2/tmp/1-Simple-Example.md:151 src/halo2/tmp/1-Simple-Example.md:152
#: src/halo2/tmp/1-Simple-Example.md:438 src/halo2/tmp/1-Simple-Example.md:439
#: src/halo2/tmp/1-Simple-Example.md:552 src/halo2/tmp/1-Simple-Example.md:553
#: src/halo2/tmp/2-Fibonacci-example-1.md:191
#: src/halo2/tmp/2-Fibonacci-example-1.md:205
#: src/halo2/tmp/4-IsZero-Check-example-3.md:127
#: src/halo2/tmp/4-IsZero-Check-example-3.md:128
#: src/halo2/tmp/4-IsZero-Check-example-3.md:190
#: src/halo2/tmp/9-decomposed.md:30 src/halo2/tmp/9-decomposed.md:39
#: src/halo2/tmp/9-decomposed.md:40 src/halo2/tmp/9-decomposed.md:43
#: src/halo2/tmp/9-decomposed.md:44 src/halo2/tmp/9-decomposed.md:47
#: src/halo2/tmp/9-decomposed.md:48 src/halo2/tmp/9-decomposed.md:101
#: src/halo2/tmp/9-decomposed.md:104 src/halo2/tmp/Hammster.md:23
#: src/zk-everything/BabySNARK tutorial.md:140 tutorial.md:156 tutorial.md:158
#: tutorial.md:160 tutorial.md:161 tutorial.md:163 tutorial.md:165
#: tutorial.md:168 tutorial.md:172
#: src/zk-everything/zk-learning-miles/KZG.md:142
#: src/zk-everything/zk-learning-miles/KZG.md:145
#: src/zk-everything/zk-learning-miles/KZG.md:170
#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:296 SNARKs.md:298 SNARKs.md:301 SNARKs.md:302 SNARKs.md:352
#: SNARKs.md:354 SNARKs.md:369 SNARKs.md:370 SNARKs.md:372 SNARKs.md:373
#: SNARKs.md:374 SNARKs.md:395
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:58
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:64
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:87
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:134
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:145
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:152
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:396
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:448
#: src/zk-everything/zk-everything-joe/Hyrax.md:58
#: src/zk-everything/zk-everything-joe/Hyrax.md:64
#: src/zk-everything/zk-everything-joe/Hyrax.md:70
#: src/zk-everything/zk-everything-joe/Hyrax.md:98
#: src/zk-everything/zk-everything-joe/Hyrax.md:191
#: src/zk-everything/zk-everything-joe/Spartan.md:110
#: src/zk-everything/zk-everything-joe/Spartan.md:122
#: src/zk-everything/zk-everything-joe/Spartan.md:126
#: src/zk-everything/zk-everything-joe/Spartan.md:142
#: src/zk-everything/zk-everything-joe/Spartan.md:147
#: src/zk-everything/zk-everything-joe/Spartan.md:154
#: src/zk-everything/zk-everything-joe/Spartan.md:177
#: src/zk-everything/zk-everything-joe/Spartan.md:236
#: src/zk-everything/zk-everything-joe/Spartan.md:242
#: src/zk-everything/zk-everything-joe/Spartan.md:246
#: src/zk-everything/zk-everything-joe/Spartan.md:254
#: src/zk-everything/zk-everything-joe/Spartan.md:257
#: src/zk-everything/zk-everything-joe/Spartan.md:264
#: src/zk-everything/zk-everything-joe/Spartan.md:268
#: src/zk-everything/zk-everything-joe/Spartan.md:275
#: src/zk-everything/zk-everything-joe/Spartan.md:278
#: src/zk-everything/zk-everything-joe/Spartan.md:334
#: src/zk-everything/zk-everything-joe/Spartan.md:339
#: src/zk-everything/zk-everything-joe/Spartan.md:346
#: src/zk-everything/zk-everything-joe/Spartan.md:347
#: src/zk-everything/zk-everything-joe/Spartan.md:350
#: src/zk-everything/zk-everything-joe/Spartan.md:353
#: src/zk-everything/zk-everything-joe/Spartan.md:355
#: src/zk-everything/zk-everything-joe/Spartan.md:359
#: src/zk-everything/zk-everything-joe/Spartan.md:360
#: src/zk-everything/zk-everything-joe/Spartan.md:361 src/Nova/SuperNova.md:66
#: src/Nova/SuperNova.md:68 src/public goods/第二章.md:16
#: goods/第二章.md:17 goods/第二章.md:18 goods/第二章.md:19
#: goods/第二章.md:20 goods/第二章.md:21 goods/第二章.md:80
#: goods/第二章.md:83 goods/第二章.md:84 goods/第二章.md:86
#: goods/第二章.md:88 goods/第二章.md:89 goods/第二章.md:103
#: goods/第二章.md:125 goods/第二章.md:129 goods/第二章.md:170
#: goods/第二章.md:171 goods/4-Proving-System.md:12
#: goods/4-Proving-System.md:24 goods/4-Proving-System.md:53
#: goods/4-Proving-System.md:56 goods/4-Proving-System.md:58
#: goods/4-Proving-System.md:60 goods/4-Proving-System.md:62
#: goods/4-Proving-System.md:64 goods/4-Proving-System.md:124
#: goods/4-Proving-System.md:145 goods/4-Proving-System.md:157
msgid "a"
msgstr "a"

#: src/plonk-intro-cn/plonk-arithmetization.md:111
msgid " （这里用字母 "
msgstr " （这里用字母 "

#: src/plonk-intro-cn/plonk-arithmetization.md:111
msgid "，取自 Assignments 首字母）"
msgstr "，取自 Assignments 首字母）"

#: src/plonk-intro-cn/plonk-arithmetization.md:113
msgid "在上面的例子中，「赋值向量」为"
msgstr "在上面的例子中，「赋值向量」为"

#: src/plonk-intro-cn/plonk-arithmetization.md:117
msgid "于是我们可以轻易地检验下面的等式"
msgstr "于是我们可以轻易地检验下面的等式"

#: src/plonk-intro-cn/plonk-arithmetization.md:119
#: src/plonk-intro-cn/plonk-arithmetization.md:121
#: src/plonk-intro-cn/plonk-arithmetization.md:123
#: src/plonk-intro-cn/plonk-arithmetization.md:155
#: src/plonk-intro-cn/plonk-arithmetization.md:159
#: src/plonk-intro-cn/plonk-arithmetization.md:241
#: src/plonk-intro-cn/plonk-arithmetization.md:249
#: src/plonk-intro-cn/plonk-lagrange-basis.md:28
#: src/plonk-intro-cn/plonk-lagrange-basis.md:44 src/zk-everything/BabySNARK
#: tutorial.md:38 tutorial.md:156 tutorial.md:158 src/public
#: goods/第二章.md:16 goods/第二章.md:33 goods/第二章.md:72
#: goods/第二章.md:83 goods/第二章.md:97
msgid "∘"
msgstr "∘"

#: src/plonk-intro-cn/plonk-arithmetization.md:121
msgid "其中符号 "
msgstr "其中符号 "

#: src/plonk-intro-cn/plonk-arithmetization.md:121
msgid ""
" 为 Hadamard Product，表示「按位乘法」。展开上面的按位乘法等式，我们可以得到"
"这个电路的运算过程："
msgstr ""
" 为 Hadamard Product，表示「按位乘法」。展开上面的按位乘法等式，我们可以得到"
"这个电路的运算过程："

#: src/plonk-intro-cn/plonk-arithmetization.md:123
#: src/plonk-intro-cn/plonk-arithmetization.md:231
#: src/plonk-intro-cn/plonk-arithmetization.md:245
#: src/plonk-intro-cn/plonk-lagrange-basis.md:34
#: src/plonk-intro-cn/plonk-permutation.md:124
#: src/plonk-intro-cn/plonk-permutation.md:128
#: src/plonk-intro-cn/plonk-permutation.md:190
#: src/plonk-intro-cn/plonk-permutation.md:192
#: src/plonk-intro-cn/plonk-permutation.md:196
#: src/plonk-intro-cn/plonk-permutation.md:202
#: src/plonk-intro-cn/plonk-permutation.md:208
#: src/plonk-intro-cn/plonk-constraints.md:120
#: src/plonk-intro-cn/plonk-constraints.md:153
#: src/plonk-intro-cn/plonk-constraints.md:159
#: src/plonk-intro-cn/plonk-constraints.md:161
#: src/plonk-intro-cn/plonk-constraints.md:167
#: src/plonk-intro-cn/plonk-constraints.md:173
#: src/plonk-intro-cn/plonk-polycom.md:57
#: src/plonk-intro-cn/plonk-polycom.md:59
#: src/plonk-intro-cn/plonk-polycom.md:61
#: src/plonk-intro-cn/plonk-polycom.md:69
#: src/plonk-intro-cn/plonk-polycom.md:75
#: src/plonk-intro-cn/plonk-polycom.md:81
#: src/plonk-intro-cn/plonk-polycom.md:105
#: src/plonk-intro-cn/plonk-polycom.md:124
#: src/plonk-intro-cn/plonk-polycom.md:132
#: src/plonk-intro-cn/plonk-polycom.md:136
#: src/plonk-intro-cn/plonk-polycom.md:141
#: src/plonk-intro-cn/plonk-polycom.md:145
#: src/plonk-intro-cn/plonk-polycom.md:147
#: src/plonk-intro-cn/plonk-polycom.md:155
#: src/plonk-intro-cn/plonk-polycom.md:157
#: src/plonk-intro-cn/plonk-polycom.md:169
#: src/plonk-intro-cn/plonk-polycom.md:183
#: src/plonk-intro-cn/plonk-polycom.md:187
#: src/plonk-intro-cn/plonk-polycom.md:197
#: src/plonk-intro-cn/plonk-polycom.md:209
#: src/plonk-intro-cn/plonk-polycom.md:215
#: src/plonk-intro-cn/plonk-polycom.md:217
#: src/plonk-intro-cn/plonk-polycom.md:221
#: src/plonk-intro-cn/plonk-polycom.md:229
#: src/plonk-intro-cn/plonk-randomizing.md:53
#: src/plonk-intro-cn/plonk-randomizing.md:55
#: src/plonk-intro-cn/plonk-randomizing.md:141
#: src/plonk-intro-cn/plonk-randomizing.md:149
#: src/plonk-intro-cn/plonk-randomizing.md:159
#: src/plonk-intro-cn/plonk-lookup.md:81 src/plonk-intro-cn/plonk-lookup.md:85
#: src/plonk-intro-cn/plonk-lookup.md:91 src/plonk-intro-cn/plonk-lookup.md:244
#: src/plonk-intro-cn/plonk-lookup.md:265
#: src/plonk-intro-cn/plonk-lookup.md:267
#: src/plonk-intro-cn/plonk-lookup.md:273
#: src/plonk-intro-cn/plonk-lookup.md:279
#: src/plonk-intro-cn/plonk-lookup.md:283
#: src/plonk-intro-cn/plonk-lookup.md:291
#: src/plonk-intro-cn/plonk-lookup.md:302
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:350
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:235
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:239
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:243
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:245
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:258
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:264
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:271
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:272
#: src/zk-snarks/4-Construction-Properties.md:199
#: src/zk-snarks/4-Construction-Properties.md:210
#: src/zk-snarks/4-Construction-Properties.md:422
#: src/zk-snarks/5-Pinocchio-Protocol.md:87
#: src/zk-snarks/5-Pinocchio-Protocol.md:192 src/halo2/tmp/9-decomposed.md:61
#: src/halo2/tmp/9-decomposed.md:101 src/halo2/tmp/9-decomposed.md:133
#: src/halo2/tmp/9-decomposed.md:134 src/zk-everything/BabySNARK
#: tutorial.md:145 tutorial.md:185
#: src/zk-everything/zk-learning-miles/KZG.md:41
#: src/zk-everything/zk-learning-miles/KZG.md:93
#: src/zk-everything/zk-learning-miles/KZG.md:96
#: src/zk-everything/zk-learning-miles/KZG.md:120
#: src/zk-everything/zk-learning-miles/KZG.md:199
#: src/zk-everything/zk-learning-miles/KZG.md:201
#: src/zk-everything/zk-learning-miles/KZG.md:203
#: src/zk-everything/zk-learning-miles/KZG.md:205
#: src/zk-everything/zk-learning-miles/KZG.md:207
#: src/zk-everything/zk-learning-miles/KZG.md:209
#: src/zk-everything/zk-learning-miles/KZG.md:211
#: src/zk-everything/zk-learning-miles/KZG.md:213
#: src/zk-everything/zk-learning-miles/KZG.md:222
#: src/zk-everything/zk-learning-miles/KZG.md:226
#: src/zk-everything/zk-learning-miles/KZG.md:246
#: src/zk-everything/zk-learning-miles/KZG.md:248
#: src/zk-everything/zk-learning-miles/KZG.md:250
#: src/zk-everything/zk-learning-miles/KZG.md:317
#: src/zk-everything/zk-learning-miles/KZG.md:318
#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:269 SNARKs.md:270 SNARKs.md:284 SNARKs.md:310 SNARKs.md:312
#: SNARKs.md:324 SNARKs.md:362 SNARKs.md:363 SNARKs.md:368 SNARKs.md:369
#: SNARKs.md:370 SNARKs.md:371 SNARKs.md:374 SNARKs.md:379 SNARKs.md:395
#: SNARKs.md:408 src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:64
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:134
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:145
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:152
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:383
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:396
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:405
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:448
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:486
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:538
#: src/zk-everything/zk-everything-joe/Hyrax.md:58
#: src/zk-everything/zk-everything-joe/Hyrax.md:64
#: src/zk-everything/zk-everything-joe/Hyrax.md:70
#: src/zk-everything/zk-everything-joe/Hyrax.md:133
#: src/zk-everything/zk-everything-joe/Hyrax.md:140
#: src/zk-everything/zk-everything-joe/Hyrax.md:162
#: src/zk-everything/zk-everything-joe/Hyrax.md:168
#: src/zk-everything/zk-everything-joe/Hyrax.md:181
#: src/zk-everything/zk-everything-joe/Hyrax.md:195
#: src/zk-everything/zk-everything-joe/Hyrax.md:198
#: src/zk-everything/zk-everything-joe/Hyrax.md:207
#: src/zk-everything/zk-everything-joe/Hyrax.md:214
#: src/zk-everything/zk-everything-joe/Hyrax.md:223
#: src/zk-everything/zk-everything-joe/Hyrax.md:228
#: src/zk-everything/zk-everything-joe/Hyrax.md:277
#: src/zk-everything/zk-everything-joe/Hyrax.md:282
#: src/zk-everything/zk-everything-joe/Spartan.md:110
#: src/zk-everything/zk-everything-joe/Spartan.md:122
#: src/zk-everything/zk-everything-joe/Spartan.md:126
#: src/zk-everything/zk-everything-joe/Spartan.md:142
#: src/zk-everything/zk-everything-joe/Spartan.md:147
#: src/zk-everything/zk-everything-joe/Spartan.md:154
#: src/zk-everything/zk-everything-joe/Spartan.md:334
#: src/zk-everything/zk-everything-joe/Spartan.md:350
#: src/zk-everything/zk-everything-joe/Spartan.md:360
#: src/zk-everything/zk-everything-joe/Spartan.md:411
#: src/zk-everything/zk-everything-joe/Spartan.md:416
#: src/zk-everything/zk-everything-joe/Spartan.md:436
#: src/zk-everything/zk-everything-joe/Spartan.md:450 src/Nova/SuperNova.md:17
#: src/Nova/SuperNova.md:30 src/Nova/SuperNova.md:35 src/Nova/SuperNova.md:66
#: src/Nova/SuperNova.md:68 src/public goods/第二章.md:54
#: goods/第二章.md:56 goods/第二章.md:80 goods/第二章.md:103
msgid "\\["
msgstr "\\["

#: src/plonk-intro-cn/plonk-arithmetization.md:125
msgid "请注意，通常「赋值向量」中需要一个固定赋值为 "
msgstr "请注意，通常「赋值向量」中需要一个固定赋值为 "

#: src/plonk-intro-cn/plonk-arithmetization.md:125
msgid " 的变量，这是为了处理加法门中的常量输入。"
msgstr " 的变量，这是为了处理加法门中的常量输入。"

#: src/plonk-intro-cn/plonk-arithmetization.md:127
msgid "优缺点"
msgstr "优缺点"

#: src/plonk-intro-cn/plonk-arithmetization.md:129
msgid "由于 R1CS 编码以乘法门为中心，于是电路中的加法门并不会增加 "
msgstr "由于 R1CS 编码以乘法门为中心，于是电路中的加法门并不会增加 "

#: src/plonk-intro-cn/plonk-arithmetization.md:129
msgid ""
" 矩阵的行数，因而对 Prover 的性能影响不大。R1CS 电路的编码清晰简单，利于在其"
"上构造各种 SNARK 方案。"
msgstr ""
" 矩阵的行数，因而对 Prover 的性能影响不大。R1CS 电路的编码清晰简单，利于在其"
"上构造各种 SNARK 方案。"

#: src/plonk-intro-cn/plonk-arithmetization.md:131
msgid ""
"在 2019 年 Plonk 论文中的编码方案同时需要编码加法门与乘法门，看起来因此会增加"
"约束的数量，降低 Proving 性能。但 Plonk 团队随后陆续引入了除乘法与加法外的运"
"算门，比如实现范围检查的门，实现异或运算的门等等。不仅如此，Plonk 支持任何其"
"输入输出满足多项式关系的门，即 Custom Gate，还有适用于实现 RAM 的状态转换门"
"等，随着查表门的提出，Plonk 方案逐步成为许多应用的首选方案，其编码方式也有了"
"一个专门的名词：Plonkish。"
msgstr ""
"在 2019 年 Plonk 论文中的编码方案同时需要编码加法门与乘法门，看起来因此会增加"
"约束的数量，降低 Proving 性能。但 Plonk 团队随后陆续引入了除乘法与加法外的运"
"算门，比如实现范围检查的门，实现异或运算的门等等。不仅如此，Plonk 支持任何其"
"输入输出满足多项式关系的门，即 Custom Gate，还有适用于实现 RAM 的状态转换门"
"等，随着查表门的提出，Plonk 方案逐步成为许多应用的首选方案，其编码方式也有了"
"一个专门的名词：Plonkish。"

#: src/plonk-intro-cn/plonk-arithmetization.md:133
msgid "Plonkish 算术门"
msgstr "Plonkish 算术门"

#: src/plonk-intro-cn/plonk-arithmetization.md:135
msgid "回看下例子电路，我们把三个门全都编号， "
msgstr "回看下例子电路，我们把三个门全都编号， "

#: src/plonk-intro-cn/plonk-arithmetization.md:135
msgid "，同时把加法门的输出值也标记为变量 "
msgstr "，同时把加法门的输出值也标记为变量 "

#: src/plonk-intro-cn/plonk-arithmetization.md:135
#: src/plonk-intro-cn/plonk-arithmetization.md:141
#: src/plonk-intro-cn/plonk-arithmetization.md:143
#: src/plonk-intro-cn/plonk-arithmetization.md:147
#: src/plonk-intro-cn/plonk-arithmetization.md:159
#: src/plonk-intro-cn/plonk-arithmetization.md:163
#: src/plonk-intro-cn/plonk-arithmetization.md:177
#: src/plonk-intro-cn/plonk-arithmetization.md:179
#: src/plonk-intro-cn/plonk-arithmetization.md:181
#: src/plonk-intro-cn/plonk-arithmetization.md:231
#: src/plonk-intro-cn/plonk-lagrange-basis.md:89
#: src/plonk-intro-cn/plonk-permutation.md:11
#: src/plonk-intro-cn/plonk-permutation.md:108
#: src/plonk-intro-cn/plonk-constraints.md:57
#: src/plonk-intro-cn/plonk-constraints.md:63
#: src/plonk-intro-cn/plonk-constraints.md:67
#: src/plonk-intro-cn/plonk-constraints.md:120
#: src/plonk-intro-cn/plonk-polycom.md:173
#: src/plonk-intro-cn/plonk-polycom.md:193
#: src/plonk-intro-cn/plonk-randomizing.md:127
#: src/plonk-intro-cn/plonk-randomizing.md:129
#: src/plonk-intro-cn/plonk-lookup.md:18 src/plonk-intro-cn/plonk-lookup.md:43
#: src/plonk-intro-cn/plonk-lookup.md:51
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:148
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:150
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:186
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:256
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:269
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:271
#: src/zk-snarks/3-General-Purpose-Computation.md:72
#: src/zk-snarks/3-General-Purpose-Computation.md:74
#: src/zk-snarks/3-General-Purpose-Computation.md:75
#: src/zk-snarks/3-General-Purpose-Computation.md:79
#: src/zk-snarks/3-General-Purpose-Computation.md:83
#: src/zk-snarks/3-General-Purpose-Computation.md:141
#: src/zk-snarks/3-General-Purpose-Computation.md:143
#: src/zk-snarks/3-General-Purpose-Computation.md:149
#: src/zk-snarks/4-Construction-Properties.md:137
#: src/zk-snarks/4-Construction-Properties.md:150
#: src/zk-snarks/4-Construction-Properties.md:151
#: src/zk-snarks/4-Construction-Properties.md:155
#: src/zk-snarks/4-Construction-Properties.md:162
#: src/zk-snarks/4-Construction-Properties.md:171
#: src/zk-snarks/4-Construction-Properties.md:172
#: src/halo2/tmp/9-decomposed.md:53 src/halo2/tmp/9-decomposed.md:181
#: src/zk-everything/zk-learning-miles/KZG.md:10
#: src/zk-everything/zk-learning-miles/KZG.md:12
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:194
#: src/zk-everything/zk-everything-joe/Hyrax.md:191
msgid "6"
msgstr "6"

#: src/plonk-intro-cn/plonk-arithmetization.md:137
#: src/plonk-intro-cn/plonk-constraints.md:112
msgid "![](img/img20230414202348.png)"
msgstr "![](img/img20230414202348.png)"

#: src/plonk-intro-cn/plonk-arithmetization.md:139
msgid "显然，上面的电路满足三个约束："
msgstr "显然，上面的电路满足三个约束："

#: src/plonk-intro-cn/plonk-arithmetization.md:145
msgid "我们定义一个矩阵 "
msgstr "我们定义一个矩阵 "

#: src/plonk-intro-cn/plonk-arithmetization.md:145
msgid " 来表示约束（ "
msgstr " 来表示约束（ "

#: src/plonk-intro-cn/plonk-arithmetization.md:145
msgid " 为算术门的数量）："
msgstr " 为算术门的数量）："

#: src/plonk-intro-cn/plonk-arithmetization.md:147
#: src/plonk-intro-cn/plonk-arithmetization.md:155
#: src/plonk-intro-cn/plonk-arithmetization.md:177
#: src/plonk-intro-cn/plonk-arithmetization.md:179
#: src/plonk-intro-cn/plonk-arithmetization.md:187
#: src/plonk-intro-cn/plonk-arithmetization.md:189
#: src/plonk-intro-cn/plonk-arithmetization.md:191
#: src/plonk-intro-cn/plonk-arithmetization.md:209
#: src/plonk-intro-cn/plonk-arithmetization.md:231
#: src/plonk-intro-cn/plonk-arithmetization.md:239
#: src/plonk-intro-cn/plonk-arithmetization.md:241
#: src/plonk-intro-cn/plonk-arithmetization.md:243
#: src/plonk-intro-cn/plonk-arithmetization.md:245
#: src/plonk-intro-cn/plonk-arithmetization.md:249
#: src/plonk-intro-cn/plonk-arithmetization.md:257
#: src/plonk-intro-cn/plonk-arithmetization.md:259
#: src/plonk-intro-cn/plonk-lagrange-basis.md:30
#: src/plonk-intro-cn/plonk-lagrange-basis.md:32
#: src/plonk-intro-cn/plonk-lagrange-basis.md:34
#: src/plonk-intro-cn/plonk-lagrange-basis.md:38
#: src/plonk-intro-cn/plonk-lagrange-basis.md:44
#: src/plonk-intro-cn/plonk-lagrange-basis.md:60
#: src/plonk-intro-cn/plonk-lagrange-basis.md:62
#: src/plonk-intro-cn/plonk-lagrange-basis.md:109
#: src/plonk-intro-cn/plonk-permutation.md:11
#: src/plonk-intro-cn/plonk-permutation.md:13
#: src/plonk-intro-cn/plonk-constraints.md:57
#: src/plonk-intro-cn/plonk-constraints.md:59
#: src/plonk-intro-cn/plonk-constraints.md:69
#: src/plonk-intro-cn/plonk-constraints.md:71
#: src/plonk-intro-cn/plonk-constraints.md:73
#: src/plonk-intro-cn/plonk-constraints.md:75
#: src/plonk-intro-cn/plonk-constraints.md:77
#: src/plonk-intro-cn/plonk-constraints.md:127
#: src/plonk-intro-cn/plonk-constraints.md:133
#: src/plonk-intro-cn/plonk-constraints.md:161
#: src/plonk-intro-cn/plonk-constraints.md:163
#: src/plonk-intro-cn/plonk-constraints.md:175
#: src/plonk-intro-cn/plonk-constraints.md:179
#: src/plonk-intro-cn/plonk-constraints.md:184
#: src/plonk-intro-cn/plonk-constraints.md:191
#: src/plonk-intro-cn/plonk-constraints.md:192
#: src/plonk-intro-cn/plonk-constraints.md:199
#: src/plonk-intro-cn/plonk-randomizing.md:17
#: src/plonk-intro-cn/plonk-randomizing.md:19
#: src/plonk-intro-cn/plonk-randomizing.md:31
#: src/plonk-intro-cn/plonk-randomizing.md:33
#: src/plonk-intro-cn/plonk-randomizing.md:37
#: src/plonk-intro-cn/plonk-randomizing.md:39
#: src/plonk-intro-cn/plonk-randomizing.md:41
#: src/plonk-intro-cn/plonk-randomizing.md:45
#: src/plonk-intro-cn/plonk-randomizing.md:47
#: src/plonk-intro-cn/plonk-randomizing.md:51
#: src/plonk-intro-cn/plonk-randomizing.md:53
#: src/plonk-intro-cn/plonk-randomizing.md:59
#: src/plonk-intro-cn/plonk-randomizing.md:61
#: src/plonk-intro-cn/plonk-randomizing.md:65
#: src/plonk-intro-cn/plonk-randomizing.md:69
#: src/plonk-intro-cn/plonk-randomizing.md:85
#: src/plonk-intro-cn/plonk-randomizing.md:88
#: src/plonk-intro-cn/plonk-randomizing.md:90
#: src/plonk-intro-cn/plonk-randomizing.md:92
#: src/plonk-intro-cn/plonk-randomizing.md:93
#: src/plonk-intro-cn/plonk-randomizing.md:97
#: src/plonk-intro-cn/plonk-randomizing.md:103
#: src/plonk-intro-cn/plonk-randomizing.md:104
#: src/plonk-intro-cn/plonk-randomizing.md:112
#: src/plonk-intro-cn/plonk-randomizing.md:115
#: src/plonk-intro-cn/plonk-randomizing.md:127
#: src/plonk-intro-cn/plonk-randomizing.md:129
#: src/plonk-intro-cn/plonk-randomizing.md:133
#: src/plonk-intro-cn/plonk-lookup.md:261
#: src/plonk-intro-cn/plonk-lookup.md:267
#: src/plonk-intro-cn/plonk-lookup.md:269
#: src/plonk-intro-cn/plonk-lookup.md:275
#: src/plonk-intro-cn/plonk-lookup.md:289
#: src/plonk-intro-cn/plonk-lookup.md:304
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:194
#: src/zk-snarks/3-General-Purpose-Computation.md:39
#: src/zk-snarks/3-General-Purpose-Computation.md:366
#: src/zk-snarks/4-Construction-Properties.md:105
#: src/zk-snarks/4-Construction-Properties.md:108
#: src/zk-snarks/4-Construction-Properties.md:112
#: src/zk-snarks/4-Construction-Properties.md:113
#: src/zk-snarks/4-Construction-Properties.md:115
#: src/zk-snarks/4-Construction-Properties.md:117
#: src/zk-snarks/4-Construction-Properties.md:119
#: src/zk-snarks/4-Construction-Properties.md:134
#: src/zk-snarks/4-Construction-Properties.md:138
#: src/zk-snarks/4-Construction-Properties.md:149
#: src/zk-snarks/4-Construction-Properties.md:151
#: src/zk-snarks/4-Construction-Properties.md:155
#: src/zk-snarks/4-Construction-Properties.md:156
#: src/zk-snarks/4-Construction-Properties.md:162
#: src/zk-snarks/4-Construction-Properties.md:164
#: src/zk-snarks/4-Construction-Properties.md:168
#: src/zk-snarks/4-Construction-Properties.md:170
#: src/zk-snarks/4-Construction-Properties.md:171
#: src/zk-snarks/4-Construction-Properties.md:172
#: src/zk-snarks/4-Construction-Properties.md:287
#: src/zk-snarks/4-Construction-Properties.md:290 src/halo2/chap-1/index.md:11
#: src/halo2/tmp/3-Fibonacci-example-2.md:39
#: src/halo2/tmp/3-Fibonacci-example-2.md:231
#: src/halo2/tmp/3-Fibonacci-example-2.md:427 src/halo2/tmp/Zordle.md:80
#: src/zk-everything/BabySNARK tutorial.md:125 tutorial.md:131 tutorial.md:181
#: tutorial.md:183 src/zk-everything/zk-learning-miles/KZG.md:270
#: src/zk-everything/zk-learning-miles/KZG.md:272
#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:42
#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:147 SNARKs.md:395 SNARKs.md:407
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:526
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:530
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:532
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:538
#: src/zk-everything/zk-everything-joe/Hyrax.md:168
#: src/zk-everything/zk-everything-joe/Hyrax.md:181
#: src/zk-everything/zk-everything-joe/Hyrax.md:250
#: src/zk-everything/zk-everything-joe/Hyrax.md:254
#: src/zk-everything/zk-everything-joe/Hyrax.md:263
#: src/zk-everything/zk-everything-joe/Hyrax.md:269
#: src/zk-everything/zk-everything-joe/Hyrax.md:276
#: src/zk-everything/zk-everything-joe/Hyrax.md:277
#: src/zk-everything/zk-everything-joe/Hyrax.md:282
#: src/zk-everything/zk-everything-joe/Hyrax.md:292
#: src/zk-everything/zk-everything-joe/Hyrax.md:297
#: src/zk-everything/zk-everything-joe/Hyrax.md:302
#: src/zk-everything/zk-everything-joe/Hyrax.md:310
#: src/zk-everything/zk-everything-joe/Spartan.md:23
#: src/zk-everything/zk-everything-joe/Spartan.md:24
#: src/zk-everything/zk-everything-joe/Spartan.md:25
#: src/zk-everything/zk-everything-joe/Spartan.md:26
#: src/zk-everything/zk-everything-joe/Spartan.md:110
#: src/zk-everything/zk-everything-joe/Spartan.md:117
#: src/zk-everything/zk-everything-joe/Spartan.md:118
#: src/zk-everything/zk-everything-joe/Spartan.md:122
#: src/zk-everything/zk-everything-joe/Spartan.md:126
#: src/zk-everything/zk-everything-joe/Spartan.md:135
#: src/zk-everything/zk-everything-joe/Spartan.md:136
#: src/zk-everything/zk-everything-joe/Spartan.md:142
#: src/zk-everything/zk-everything-joe/Spartan.md:143
#: src/zk-everything/zk-everything-joe/Spartan.md:147
#: src/zk-everything/zk-everything-joe/Spartan.md:148
#: src/zk-everything/zk-everything-joe/Spartan.md:154
#: src/zk-everything/zk-everything-joe/Spartan.md:155
#: src/zk-everything/zk-everything-joe/Spartan.md:166
#: src/zk-everything/zk-everything-joe/Spartan.md:195
#: src/zk-everything/zk-everything-joe/Spartan.md:200
#: src/zk-everything/zk-everything-joe/Spartan.md:207
#: src/zk-everything/zk-everything-joe/Spartan.md:212
#: src/zk-everything/zk-everything-joe/Spartan.md:217
#: src/zk-everything/zk-everything-joe/Spartan.md:222
#: src/zk-everything/zk-everything-joe/Spartan.md:232
#: src/zk-everything/zk-everything-joe/Spartan.md:240
#: src/zk-everything/zk-everything-joe/Spartan.md:252
#: src/zk-everything/zk-everything-joe/Spartan.md:263
#: src/zk-everything/zk-everything-joe/Spartan.md:274
#: src/zk-everything/zk-everything-joe/Spartan.md:334
#: src/zk-everything/zk-everything-joe/Spartan.md:339
#: src/zk-everything/zk-everything-joe/Spartan.md:343
#: src/zk-everything/zk-everything-joe/Spartan.md:344
#: src/zk-everything/zk-everything-joe/Spartan.md:346
#: src/zk-everything/zk-everything-joe/Spartan.md:347
#: src/zk-everything/zk-everything-joe/Spartan.md:350
#: src/zk-everything/zk-everything-joe/Spartan.md:353
#: src/zk-everything/zk-everything-joe/Spartan.md:355
#: src/zk-everything/zk-everything-joe/Spartan.md:359
#: src/zk-everything/zk-everything-joe/Spartan.md:360
#: src/zk-everything/zk-everything-joe/Spartan.md:361 src/Nova/SuperNova.md:12
#: src/Nova/SuperNova.md:14 src/Nova/SuperNova.md:19 src/public
#: goods/第二章.md:10 goods/第二章.md:26 goods/第二章.md:33
#: goods/第二章.md:35 goods/第二章.md:84 goods/第二章.md:86
#: goods/第二章.md:97 goods/4-Proving-System.md:192
#: goods/4-Proving-System.md:204 goods/4-Proving-System.md:208
msgid "w"
msgstr "w"

#: src/plonk-intro-cn/plonk-arithmetization.md:147
#: src/plonk-intro-cn/plonk-arithmetization.md:155
#: src/plonk-intro-cn/plonk-arithmetization.md:177
#: src/plonk-intro-cn/plonk-arithmetization.md:179
#: src/plonk-intro-cn/plonk-arithmetization.md:187
#: src/plonk-intro-cn/plonk-arithmetization.md:189
#: src/plonk-intro-cn/plonk-arithmetization.md:191
#: src/plonk-intro-cn/plonk-arithmetization.md:197
#: src/plonk-intro-cn/plonk-arithmetization.md:201
#: src/plonk-intro-cn/plonk-arithmetization.md:209
#: src/plonk-intro-cn/plonk-arithmetization.md:231
#: src/plonk-intro-cn/plonk-arithmetization.md:241
#: src/plonk-intro-cn/plonk-arithmetization.md:245
#: src/plonk-intro-cn/plonk-arithmetization.md:249
#: src/plonk-intro-cn/plonk-arithmetization.md:257
#: src/plonk-intro-cn/plonk-arithmetization.md:259
#: src/plonk-intro-cn/plonk-lagrange-basis.md:14
#: src/plonk-intro-cn/plonk-lagrange-basis.md:18
#: src/plonk-intro-cn/plonk-lagrange-basis.md:20
#: src/plonk-intro-cn/plonk-lagrange-basis.md:22
#: src/plonk-intro-cn/plonk-lagrange-basis.md:24
#: src/plonk-intro-cn/plonk-lagrange-basis.md:28
#: src/plonk-intro-cn/plonk-lagrange-basis.md:40
#: src/plonk-intro-cn/plonk-lagrange-basis.md:42
#: src/plonk-intro-cn/plonk-lagrange-basis.md:44
#: src/plonk-intro-cn/plonk-lagrange-basis.md:46
#: src/plonk-intro-cn/plonk-lagrange-basis.md:50
#: src/plonk-intro-cn/plonk-lagrange-basis.md:54
#: src/plonk-intro-cn/plonk-lagrange-basis.md:58
#: src/plonk-intro-cn/plonk-lagrange-basis.md:64
#: src/plonk-intro-cn/plonk-lagrange-basis.md:66
#: src/plonk-intro-cn/plonk-lagrange-basis.md:149
#: src/plonk-intro-cn/plonk-lagrange-basis.md:151
#: src/plonk-intro-cn/plonk-permutation.md:11
#: src/plonk-intro-cn/plonk-permutation.md:13
#: src/plonk-intro-cn/plonk-permutation.md:140
#: src/plonk-intro-cn/plonk-permutation.md:142
#: src/plonk-intro-cn/plonk-permutation.md:146
#: src/plonk-intro-cn/plonk-permutation.md:148
#: src/plonk-intro-cn/plonk-permutation.md:150
#: src/plonk-intro-cn/plonk-permutation.md:156
#: src/plonk-intro-cn/plonk-permutation.md:158
#: src/plonk-intro-cn/plonk-permutation.md:159
#: src/plonk-intro-cn/plonk-permutation.md:161
#: src/plonk-intro-cn/plonk-permutation.md:162
#: src/plonk-intro-cn/plonk-permutation.md:164
#: src/plonk-intro-cn/plonk-permutation.md:174
#: src/plonk-intro-cn/plonk-permutation.md:176
#: src/plonk-intro-cn/plonk-permutation.md:177
#: src/plonk-intro-cn/plonk-permutation.md:179
#: src/plonk-intro-cn/plonk-permutation.md:180
#: src/plonk-intro-cn/plonk-permutation.md:182
#: src/plonk-intro-cn/plonk-permutation.md:188
#: src/plonk-intro-cn/plonk-permutation.md:192
#: src/plonk-intro-cn/plonk-permutation.md:198
#: src/plonk-intro-cn/plonk-permutation.md:204
#: src/plonk-intro-cn/plonk-permutation.md:208
#: src/plonk-intro-cn/plonk-permutation.md:212
#: src/plonk-intro-cn/plonk-constraints.md:7
#: src/plonk-intro-cn/plonk-constraints.md:9
#: src/plonk-intro-cn/plonk-constraints.md:11
#: src/plonk-intro-cn/plonk-constraints.md:13
#: src/plonk-intro-cn/plonk-constraints.md:15
#: src/plonk-intro-cn/plonk-constraints.md:17
#: src/plonk-intro-cn/plonk-constraints.md:21
#: src/plonk-intro-cn/plonk-constraints.md:25
#: src/plonk-intro-cn/plonk-constraints.md:27
#: src/plonk-intro-cn/plonk-constraints.md:29
#: src/plonk-intro-cn/plonk-constraints.md:57
#: src/plonk-intro-cn/plonk-constraints.md:59
#: src/plonk-intro-cn/plonk-constraints.md:63
#: src/plonk-intro-cn/plonk-constraints.md:65
#: src/plonk-intro-cn/plonk-constraints.md:67
#: src/plonk-intro-cn/plonk-constraints.md:69
#: src/plonk-intro-cn/plonk-constraints.md:71
#: src/plonk-intro-cn/plonk-constraints.md:73
#: src/plonk-intro-cn/plonk-constraints.md:75
#: src/plonk-intro-cn/plonk-constraints.md:77
#: src/plonk-intro-cn/plonk-constraints.md:120
#: src/plonk-intro-cn/plonk-constraints.md:133
#: src/plonk-intro-cn/plonk-constraints.md:141
#: src/plonk-intro-cn/plonk-constraints.md:145
#: src/plonk-intro-cn/plonk-constraints.md:149
#: src/plonk-intro-cn/plonk-constraints.md:159
#: src/plonk-intro-cn/plonk-constraints.md:161
#: src/plonk-intro-cn/plonk-constraints.md:163
#: src/plonk-intro-cn/plonk-constraints.md:175
#: src/plonk-intro-cn/plonk-constraints.md:179
#: src/plonk-intro-cn/plonk-constraints.md:184
#: src/plonk-intro-cn/plonk-constraints.md:186
#: src/plonk-intro-cn/plonk-constraints.md:191
#: src/plonk-intro-cn/plonk-constraints.md:192
#: src/plonk-intro-cn/plonk-constraints.md:199
#: src/plonk-intro-cn/plonk-randomizing.md:17
#: src/plonk-intro-cn/plonk-randomizing.md:39
#: src/plonk-intro-cn/plonk-randomizing.md:41
#: src/plonk-intro-cn/plonk-randomizing.md:47
#: src/plonk-intro-cn/plonk-randomizing.md:49
#: src/plonk-intro-cn/plonk-randomizing.md:55
#: src/plonk-intro-cn/plonk-randomizing.md:57
#: src/plonk-intro-cn/plonk-randomizing.md:65
#: src/plonk-intro-cn/plonk-randomizing.md:69
#: src/plonk-intro-cn/plonk-randomizing.md:73
#: src/plonk-intro-cn/plonk-randomizing.md:85
#: src/plonk-intro-cn/plonk-randomizing.md:90
#: src/plonk-intro-cn/plonk-randomizing.md:92
#: src/plonk-intro-cn/plonk-randomizing.md:93
#: src/plonk-intro-cn/plonk-randomizing.md:97
#: src/plonk-intro-cn/plonk-randomizing.md:104
#: src/plonk-intro-cn/plonk-randomizing.md:112
#: src/plonk-intro-cn/plonk-randomizing.md:115
#: src/plonk-intro-cn/plonk-randomizing.md:117
#: src/plonk-intro-cn/plonk-randomizing.md:127
#: src/plonk-intro-cn/plonk-randomizing.md:129
#: src/plonk-intro-cn/plonk-randomizing.md:133
#: src/plonk-intro-cn/plonk-lookup.md:119
#: src/plonk-intro-cn/plonk-lookup.md:121
#: src/plonk-intro-cn/plonk-lookup.md:123
#: src/plonk-intro-cn/plonk-lookup.md:190
#: src/plonk-intro-cn/plonk-lookup.md:230
#: src/plonk-intro-cn/plonk-lookup.md:261
#: src/plonk-intro-cn/plonk-lookup.md:265
#: src/plonk-intro-cn/plonk-lookup.md:267
#: src/plonk-intro-cn/plonk-lookup.md:269
#: src/plonk-intro-cn/plonk-lookup.md:275
#: src/plonk-intro-cn/plonk-lookup.md:289
#: src/plonk-intro-cn/plonk-lookup.md:304
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:43
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:45
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:47
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:48
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:50
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:51
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:58
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:151
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:152
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:164
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:170
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:175
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:176
#: src/zk-snarks/3-General-Purpose-Computation.md:39
#: src/zk-snarks/3-General-Purpose-Computation.md:112
#: src/zk-snarks/3-General-Purpose-Computation.md:127
#: src/zk-snarks/3-General-Purpose-Computation.md:137
#: src/zk-snarks/3-General-Purpose-Computation.md:196
#: src/zk-snarks/3-General-Purpose-Computation.md:213
#: src/zk-snarks/3-General-Purpose-Computation.md:266
#: src/zk-snarks/3-General-Purpose-Computation.md:268
#: src/zk-snarks/3-General-Purpose-Computation.md:276
#: src/zk-snarks/3-General-Purpose-Computation.md:315
#: src/zk-snarks/3-General-Purpose-Computation.md:347
#: src/zk-snarks/3-General-Purpose-Computation.md:381
#: src/zk-snarks/4-Construction-Properties.md:29
#: src/zk-snarks/4-Construction-Properties.md:46
#: src/zk-snarks/4-Construction-Properties.md:62
#: src/zk-snarks/4-Construction-Properties.md:76
#: src/zk-snarks/4-Construction-Properties.md:77
#: src/zk-snarks/4-Construction-Properties.md:82
#: src/zk-snarks/4-Construction-Properties.md:83
#: src/zk-snarks/4-Construction-Properties.md:86
#: src/zk-snarks/4-Construction-Properties.md:105
#: src/zk-snarks/4-Construction-Properties.md:108
#: src/zk-snarks/4-Construction-Properties.md:111
#: src/zk-snarks/4-Construction-Properties.md:112
#: src/zk-snarks/4-Construction-Properties.md:113
#: src/zk-snarks/4-Construction-Properties.md:117
#: src/zk-snarks/4-Construction-Properties.md:120
#: src/zk-snarks/4-Construction-Properties.md:121
#: src/zk-snarks/4-Construction-Properties.md:137
#: src/zk-snarks/4-Construction-Properties.md:149
#: src/zk-snarks/4-Construction-Properties.md:150
#: src/zk-snarks/4-Construction-Properties.md:151
#: src/zk-snarks/4-Construction-Properties.md:155
#: src/zk-snarks/4-Construction-Properties.md:168
#: src/zk-snarks/4-Construction-Properties.md:171
#: src/zk-snarks/4-Construction-Properties.md:172
#: src/zk-snarks/4-Construction-Properties.md:315
#: src/zk-snarks/4-Construction-Properties.md:330
#: src/zk-snarks/4-Construction-Properties.md:339
#: src/zk-snarks/4-Construction-Properties.md:345
#: src/zk-snarks/4-Construction-Properties.md:365
#: src/zk-snarks/4-Construction-Properties.md:368
#: src/zk-snarks/4-Construction-Properties.md:370
#: src/zk-snarks/4-Construction-Properties.md:371
#: src/zk-snarks/4-Construction-Properties.md:374
#: src/zk-snarks/4-Construction-Properties.md:375
#: src/zk-snarks/4-Construction-Properties.md:377
#: src/zk-snarks/4-Construction-Properties.md:379
#: src/zk-snarks/4-Construction-Properties.md:381
#: src/zk-snarks/4-Construction-Properties.md:385
#: src/zk-snarks/5-Pinocchio-Protocol.md:31
#: src/zk-snarks/5-Pinocchio-Protocol.md:32
#: src/zk-snarks/5-Pinocchio-Protocol.md:33
#: src/zk-snarks/5-Pinocchio-Protocol.md:34 src/halo2/chap-1/index.md:11
#: src/halo2/chap-1/index.md:29 src/halo2/chap-1/index.md:31
#: src/halo2/tmp/halo2-learning-materials.md:62
#: src/halo2/tmp/1-Simple-Example.md:40 src/halo2/tmp/1-Simple-Example.md:41
#: src/halo2/tmp/1-Simple-Example.md:151 src/halo2/tmp/1-Simple-Example.md:438
#: src/halo2/tmp/1-Simple-Example.md:439 src/halo2/tmp/1-Simple-Example.md:552
#: src/halo2/tmp/4-IsZero-Check-example-3.md:190
#: src/halo2/tmp/9-decomposed.md:24 src/halo2/tmp/9-decomposed.md:30
#: src/halo2/tmp/9-decomposed.md:101 src/halo2/tmp/Hammster.md:23
#: src/zk-everything/BabySNARK tutorial.md:140 tutorial.md:160 tutorial.md:165
#: tutorial.md:168 tutorial.md:172
#: src/zk-everything/zk-learning-miles/KZG.md:142
#: src/zk-everything/zk-learning-miles/KZG.md:145
#: src/zk-everything/zk-learning-miles/KZG.md:170
#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:352 SNARKs.md:354 SNARKs.md:371 SNARKs.md:372 SNARKs.md:373
#: SNARKs.md:374 src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:58
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:64
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:79
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:83
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:87
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:91
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:101
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:122
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:134
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:152
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:448
#: src/zk-everything/zk-everything-joe/Hyrax.md:48
#: src/zk-everything/zk-everything-joe/Hyrax.md:58
#: src/zk-everything/zk-everything-joe/Hyrax.md:62
#: src/zk-everything/zk-everything-joe/Hyrax.md:64
#: src/zk-everything/zk-everything-joe/Hyrax.md:68
#: src/zk-everything/zk-everything-joe/Hyrax.md:70
#: src/zk-everything/zk-everything-joe/Hyrax.md:292
#: src/zk-everything/zk-everything-joe/Hyrax.md:296
#: src/zk-everything/zk-everything-joe/Hyrax.md:297
#: src/zk-everything/zk-everything-joe/Hyrax.md:302 src/public
#: goods/第二章.md:58 goods/第二章.md:60 goods/第二章.md:65
#: goods/第二章.md:74 goods/第二章.md:86 goods/第二章.md:88
#: goods/第二章.md:89 goods/第二章.md:97 goods/第二章.md:125
#: goods/第二章.md:170
msgid "b"
msgstr "b"

#: src/plonk-intro-cn/plonk-arithmetization.md:149
msgid "为了区分加法和乘法，我们再定一个向量 "
msgstr "为了区分加法和乘法，我们再定一个向量 "

#: src/plonk-intro-cn/plonk-arithmetization.md:149
#: src/plonk-intro-cn/plonk-arithmetization.md:167
#: src/plonk-intro-cn/plonk-arithmetization.md:169
#: src/plonk-intro-cn/plonk-arithmetization.md:173
#: src/plonk-intro-cn/plonk-arithmetization.md:211
#: src/plonk-intro-cn/plonk-arithmetization.md:213
#: src/plonk-intro-cn/plonk-arithmetization.md:227
#: src/plonk-intro-cn/plonk-arithmetization.md:233
#: src/plonk-intro-cn/plonk-arithmetization.md:235
#: src/plonk-intro-cn/plonk-permutation.md:5
#: src/plonk-intro-cn/plonk-constraints.md:109
#: src/plonk-intro-cn/plonk-constraints.md:114
#: src/plonk-intro-cn/plonk-constraints.md:125 src/zk-everything/BabySNARK
#: tutorial.md:123 src/zk-everything/zk-everything-joe/Hyrax.md:80
#: src/zk-everything/zk-everything-joe/Hyrax.md:108
#: src/zk-everything/zk-everything-joe/Hyrax.md:120
#: src/zk-everything/zk-everything-joe/Hyrax.md:191
#: src/zk-everything/zk-everything-joe/Hyrax.md:197
#: src/zk-everything/zk-everything-joe/Spartan.md:411
#: src/zk-everything/zk-everything-joe/Spartan.md:416
#: src/zk-everything/zk-everything-joe/Spartan.md:422
#: src/zk-everything/zk-everything-joe/Spartan.md:436 src/public
#: goods/第二章.md:34
msgid "Q"
msgstr "Q"

#: src/plonk-intro-cn/plonk-arithmetization.md:149
msgid " 来表示运算符"
msgstr " 来表示运算符"

#: src/plonk-intro-cn/plonk-arithmetization.md:151
#: src/plonk-intro-cn/plonk-arithmetization.md:155
#: src/plonk-intro-cn/plonk-arithmetization.md:237
#: src/plonk-intro-cn/plonk-arithmetization.md:239
#: src/plonk-intro-cn/plonk-arithmetization.md:241
#: src/plonk-intro-cn/plonk-arithmetization.md:249
#: src/plonk-intro-cn/plonk-arithmetization.md:257
#: src/plonk-intro-cn/plonk-lagrange-basis.md:54
#: src/plonk-intro-cn/plonk-lagrange-basis.md:60
#: src/plonk-intro-cn/plonk-lagrange-basis.md:62
#: src/plonk-intro-cn/plonk-lagrange-basis.md:64
#: src/plonk-intro-cn/plonk-lagrange-basis.md:66
#: src/plonk-intro-cn/plonk-lagrange-basis.md:135
#: src/plonk-intro-cn/plonk-lagrange-basis.md:147
#: src/plonk-intro-cn/plonk-permutation.md:48
#: src/plonk-intro-cn/plonk-permutation.md:58
#: src/plonk-intro-cn/plonk-permutation.md:62
#: src/plonk-intro-cn/plonk-permutation.md:68
#: src/plonk-intro-cn/plonk-permutation.md:72
#: src/plonk-intro-cn/plonk-permutation.md:80
#: src/plonk-intro-cn/plonk-permutation.md:86
#: src/plonk-intro-cn/plonk-permutation.md:88
#: src/plonk-intro-cn/plonk-permutation.md:92
#: src/plonk-intro-cn/plonk-permutation.md:96
#: src/plonk-intro-cn/plonk-permutation.md:110
#: src/plonk-intro-cn/plonk-permutation.md:112
#: src/plonk-intro-cn/plonk-permutation.md:114
#: src/plonk-intro-cn/plonk-permutation.md:116
#: src/plonk-intro-cn/plonk-permutation.md:120
#: src/plonk-intro-cn/plonk-permutation.md:122
#: src/plonk-intro-cn/plonk-permutation.md:124
#: src/plonk-intro-cn/plonk-permutation.md:128
#: src/plonk-intro-cn/plonk-permutation.md:134
#: src/plonk-intro-cn/plonk-permutation.md:202
#: src/plonk-intro-cn/plonk-permutation.md:206
#: src/plonk-intro-cn/plonk-permutation.md:208
#: src/plonk-intro-cn/plonk-permutation.md:212
#: src/plonk-intro-cn/plonk-constraints.md:116
#: src/plonk-intro-cn/plonk-constraints.md:125
#: src/plonk-intro-cn/plonk-constraints.md:127
#: src/plonk-intro-cn/plonk-constraints.md:129
#: src/plonk-intro-cn/plonk-constraints.md:133
#: src/plonk-intro-cn/plonk-constraints.md:159
#: src/plonk-intro-cn/plonk-constraints.md:163
#: src/plonk-intro-cn/plonk-constraints.md:175
#: src/plonk-intro-cn/plonk-constraints.md:185
#: src/plonk-intro-cn/plonk-constraints.md:199
#: src/plonk-intro-cn/plonk-polycom.md:65
#: src/plonk-intro-cn/plonk-polycom.md:67
#: src/plonk-intro-cn/plonk-polycom.md:69
#: src/plonk-intro-cn/plonk-polycom.md:71
#: src/plonk-intro-cn/plonk-polycom.md:75
#: src/plonk-intro-cn/plonk-polycom.md:79
#: src/plonk-intro-cn/plonk-polycom.md:81
#: src/plonk-intro-cn/plonk-polycom.md:89
#: src/plonk-intro-cn/plonk-polycom.md:97
#: src/plonk-intro-cn/plonk-polycom.md:99
#: src/plonk-intro-cn/plonk-polycom.md:101
#: src/plonk-intro-cn/plonk-polycom.md:103
#: src/plonk-intro-cn/plonk-polycom.md:105
#: src/plonk-intro-cn/plonk-polycom.md:132
#: src/plonk-intro-cn/plonk-polycom.md:209
#: src/plonk-intro-cn/plonk-polycom.md:213
#: src/plonk-intro-cn/plonk-polycom.md:229
#: src/plonk-intro-cn/plonk-randomizing.md:41
#: src/plonk-intro-cn/plonk-randomizing.md:153
#: src/plonk-intro-cn/plonk-randomizing.md:155
#: src/plonk-intro-cn/plonk-randomizing.md:159
#: src/plonk-intro-cn/plonk-lookup.md:91 src/plonk-intro-cn/plonk-lookup.md:93
#: src/plonk-intro-cn/plonk-lookup.md:97 src/plonk-intro-cn/plonk-lookup.md:101
#: src/plonk-intro-cn/plonk-lookup.md:261
#: src/plonk-intro-cn/plonk-lookup.md:265
#: src/plonk-intro-cn/plonk-lookup.md:269
#: src/plonk-intro-cn/plonk-lookup.md:275
#: src/plonk-intro-cn/plonk-lookup.md:277
#: src/plonk-intro-cn/plonk-lookup.md:304
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:26
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:194
#: src/zk-snarks/3-General-Purpose-Computation.md:295
#: src/zk-everything/zk-learning-miles/KZG.md:106
#: src/zk-everything/zk-learning-miles/KZG.md:110
#: src/zk-everything/zk-learning-miles/KZG.md:114
#: src/zk-everything/zk-learning-miles/KZG.md:120
#: src/zk-everything/zk-learning-miles/KZG.md:203
#: src/zk-everything/zk-learning-miles/KZG.md:211
#: src/zk-everything/zk-learning-miles/KZG.md:222
#: src/zk-everything/zk-learning-miles/KZG.md:226
#: src/zk-everything/zk-learning-miles/KZG.md:248
#: src/zk-everything/zk-learning-miles/KZG.md:262
#: src/zk-everything/zk-learning-miles/KZG.md:270
#: src/zk-everything/zk-learning-miles/KZG.md:272
#: src/zk-everything/zk-learning-miles/KZG.md:276
#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:408 SNARKs.md:410 SNARKs.md:412 SNARKs.md:414
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:58
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:64
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:79
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:87
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:91
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:132
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:134
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:145
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:152
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:396
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:448
#: src/zk-everything/zk-everything-joe/Hyrax.md:58
#: src/zk-everything/zk-everything-joe/Hyrax.md:64
#: src/zk-everything/zk-everything-joe/Hyrax.md:70
#: src/zk-everything/zk-everything-joe/Hyrax.md:98
#: src/zk-everything/zk-everything-joe/Hyrax.md:191
#: src/zk-everything/zk-everything-joe/Spartan.md:118
#: src/zk-everything/zk-everything-joe/Spartan.md:122
#: src/zk-everything/zk-everything-joe/Spartan.md:319
#: src/zk-everything/zk-everything-joe/Spartan.md:339
#: src/zk-everything/zk-everything-joe/Spartan.md:344
#: src/zk-everything/zk-everything-joe/Spartan.md:346
#: src/zk-everything/zk-everything-joe/Spartan.md:350
#: src/zk-everything/zk-everything-joe/Spartan.md:441
#: src/zk-everything/zk-everything-joe/Spartan.md:445
#: src/zk-everything/zk-everything-joe/Spartan.md:450 src/public
#: goods/第二章.md:26 goods/第二章.md:33 goods/第二章.md:34
#: goods/第二章.md:91 goods/第二章.md:97 goods/第二章.md:147
#: goods/第二章.md:164 goods/第二章.md:175 goods/第二章.md:177
#: goods/4-Proving-System.md:117 goods/4-Proving-System.md:120
#: goods/4-Proving-System.md:166 goods/4-Proving-System.md:173
msgid "q"
msgstr "q"

#: src/plonk-intro-cn/plonk-arithmetization.md:151
#: src/plonk-intro-cn/plonk-arithmetization.md:155
#: src/plonk-intro-cn/plonk-arithmetization.md:237
#: src/plonk-intro-cn/plonk-arithmetization.md:239
#: src/plonk-intro-cn/plonk-arithmetization.md:241
#: src/plonk-intro-cn/plonk-arithmetization.md:249
#: src/plonk-intro-cn/plonk-arithmetization.md:257
#: src/plonk-intro-cn/plonk-lagrange-basis.md:34
#: src/plonk-intro-cn/plonk-lagrange-basis.md:36
#: src/plonk-intro-cn/plonk-lagrange-basis.md:38
#: src/plonk-intro-cn/plonk-lagrange-basis.md:42
#: src/plonk-intro-cn/plonk-lagrange-basis.md:109
#: src/plonk-intro-cn/plonk-lagrange-basis.md:111
#: src/plonk-intro-cn/plonk-lagrange-basis.md:113
#: src/plonk-intro-cn/plonk-lagrange-basis.md:115
#: src/plonk-intro-cn/plonk-lagrange-basis.md:119
#: src/plonk-intro-cn/plonk-lagrange-basis.md:131
#: src/plonk-intro-cn/plonk-lagrange-basis.md:135
#: src/plonk-intro-cn/plonk-lagrange-basis.md:139
#: src/plonk-intro-cn/plonk-lagrange-basis.md:143
#: src/plonk-intro-cn/plonk-lagrange-basis.md:147
#: src/plonk-intro-cn/plonk-permutation.md:76
#: src/plonk-intro-cn/plonk-permutation.md:84
#: src/plonk-intro-cn/plonk-permutation.md:96
#: src/plonk-intro-cn/plonk-permutation.md:204
#: src/plonk-intro-cn/plonk-permutation.md:208
#: src/plonk-intro-cn/plonk-permutation.md:212
#: src/plonk-intro-cn/plonk-constraints.md:116
#: src/plonk-intro-cn/plonk-constraints.md:125
#: src/plonk-intro-cn/plonk-constraints.md:133
#: src/plonk-intro-cn/plonk-constraints.md:159
#: src/plonk-intro-cn/plonk-constraints.md:163
#: src/plonk-intro-cn/plonk-constraints.md:169
#: src/plonk-intro-cn/plonk-constraints.md:175
#: src/plonk-intro-cn/plonk-constraints.md:185
#: src/plonk-intro-cn/plonk-constraints.md:193
#: src/plonk-intro-cn/plonk-constraints.md:199
#: src/plonk-intro-cn/plonk-polycom.md:179
#: src/plonk-intro-cn/plonk-polycom.md:181
#: src/plonk-intro-cn/plonk-polycom.md:183
#: src/plonk-intro-cn/plonk-polycom.md:185
#: src/plonk-intro-cn/plonk-polycom.md:187
#: src/plonk-intro-cn/plonk-polycom.md:209
#: src/plonk-intro-cn/plonk-polycom.md:211
#: src/plonk-intro-cn/plonk-polycom.md:213
#: src/plonk-intro-cn/plonk-polycom.md:215
#: src/plonk-intro-cn/plonk-polycom.md:217
#: src/plonk-intro-cn/plonk-polycom.md:221
#: src/plonk-intro-cn/plonk-randomizing.md:33
#: src/plonk-intro-cn/plonk-randomizing.md:41
#: src/plonk-intro-cn/plonk-randomizing.md:90
#: src/plonk-intro-cn/plonk-randomizing.md:92
#: src/plonk-intro-cn/plonk-randomizing.md:93
#: src/plonk-intro-cn/plonk-randomizing.md:129
#: src/plonk-intro-cn/plonk-lookup.md:63 src/plonk-intro-cn/plonk-lookup.md:69
#: src/plonk-intro-cn/plonk-lookup.md:87 src/plonk-intro-cn/plonk-lookup.md:93
#: src/plonk-intro-cn/plonk-lookup.md:101
#: src/plonk-intro-cn/plonk-lookup.md:196
#: src/plonk-intro-cn/plonk-lookup.md:234
#: src/plonk-intro-cn/plonk-lookup.md:265
#: src/plonk-intro-cn/plonk-lookup.md:269
#: src/plonk-intro-cn/plonk-lookup.md:285
#: src/plonk-intro-cn/plonk-lookup.md:293
#: src/plonk-intro-cn/plonk-lookup.md:304
#: src/plonk-intro-cn/plonk-lookup.md:306
#: src/zk-snarks/3-General-Purpose-Computation.md:338
#: src/zk-snarks/3-General-Purpose-Computation.md:340
#: src/zk-snarks/3-General-Purpose-Computation.md:342
#: src/zk-snarks/3-General-Purpose-Computation.md:358
#: src/zk-snarks/3-General-Purpose-Computation.md:360
#: src/zk-snarks/3-General-Purpose-Computation.md:361
#: src/zk-snarks/3-General-Purpose-Computation.md:364
#: src/zk-snarks/3-General-Purpose-Computation.md:366
#: src/zk-snarks/3-General-Purpose-Computation.md:368
#: src/zk-snarks/3-General-Purpose-Computation.md:369
#: src/zk-snarks/3-General-Purpose-Computation.md:379
#: src/zk-snarks/4-Construction-Properties.md:119
#: src/zk-snarks/4-Construction-Properties.md:127
#: src/zk-snarks/4-Construction-Properties.md:155
#: src/zk-snarks/4-Construction-Properties.md:164
#: src/zk-snarks/4-Construction-Properties.md:170
#: src/zk-snarks/4-Construction-Properties.md:176
#: src/zk-snarks/4-Construction-Properties.md:178
#: src/zk-snarks/4-Construction-Properties.md:184
#: src/zk-snarks/4-Construction-Properties.md:193
#: src/zk-snarks/4-Construction-Properties.md:195
#: src/zk-snarks/4-Construction-Properties.md:205
#: src/zk-snarks/4-Construction-Properties.md:207
#: src/zk-snarks/4-Construction-Properties.md:212
#: src/zk-snarks/4-Construction-Properties.md:215
#: src/zk-snarks/4-Construction-Properties.md:217
#: src/zk-snarks/4-Construction-Properties.md:219
#: src/zk-snarks/4-Construction-Properties.md:233
#: src/zk-snarks/4-Construction-Properties.md:234
#: src/zk-snarks/4-Construction-Properties.md:235
#: src/zk-snarks/4-Construction-Properties.md:249
#: src/zk-snarks/4-Construction-Properties.md:275
#: src/zk-snarks/4-Construction-Properties.md:277
#: src/zk-snarks/4-Construction-Properties.md:279
#: src/zk-snarks/4-Construction-Properties.md:282
#: src/zk-snarks/4-Construction-Properties.md:284
#: src/zk-snarks/4-Construction-Properties.md:287
#: src/zk-snarks/4-Construction-Properties.md:289
#: src/zk-snarks/4-Construction-Properties.md:291
#: src/zk-snarks/4-Construction-Properties.md:307
#: src/zk-snarks/4-Construction-Properties.md:309
#: src/zk-snarks/4-Construction-Properties.md:313
#: src/zk-snarks/4-Construction-Properties.md:338
#: src/zk-snarks/4-Construction-Properties.md:340
#: src/zk-snarks/4-Construction-Properties.md:341
#: src/zk-snarks/4-Construction-Properties.md:345
#: src/zk-snarks/4-Construction-Properties.md:349
#: src/zk-snarks/4-Construction-Properties.md:353
#: src/zk-snarks/4-Construction-Properties.md:357
#: src/zk-snarks/4-Construction-Properties.md:359
#: src/zk-snarks/4-Construction-Properties.md:374
#: src/zk-snarks/4-Construction-Properties.md:379
#: src/zk-snarks/4-Construction-Properties.md:384
#: src/zk-snarks/4-Construction-Properties.md:394
#: src/zk-snarks/4-Construction-Properties.md:395
#: src/zk-snarks/4-Construction-Properties.md:405
#: src/zk-snarks/4-Construction-Properties.md:428
#: src/zk-snarks/4-Construction-Properties.md:431
#: src/zk-snarks/4-Construction-Properties.md:434
#: src/zk-snarks/4-Construction-Properties.md:436
#: src/zk-snarks/4-Construction-Properties.md:443
#: src/zk-snarks/5-Pinocchio-Protocol.md:65
#: src/zk-snarks/5-Pinocchio-Protocol.md:67
#: src/zk-snarks/5-Pinocchio-Protocol.md:83
#: src/zk-snarks/5-Pinocchio-Protocol.md:84
#: src/zk-snarks/5-Pinocchio-Protocol.md:92
#: src/zk-snarks/5-Pinocchio-Protocol.md:94
#: src/zk-snarks/5-Pinocchio-Protocol.md:97
#: src/zk-snarks/5-Pinocchio-Protocol.md:102
#: src/zk-snarks/5-Pinocchio-Protocol.md:106
#: src/zk-snarks/5-Pinocchio-Protocol.md:109
#: src/zk-snarks/5-Pinocchio-Protocol.md:131
#: src/zk-snarks/5-Pinocchio-Protocol.md:132
#: src/zk-snarks/5-Pinocchio-Protocol.md:133
#: src/zk-snarks/5-Pinocchio-Protocol.md:135
#: src/zk-snarks/5-Pinocchio-Protocol.md:136
#: src/zk-snarks/5-Pinocchio-Protocol.md:137
#: src/zk-snarks/5-Pinocchio-Protocol.md:142
#: src/zk-snarks/5-Pinocchio-Protocol.md:145
#: src/zk-snarks/5-Pinocchio-Protocol.md:147
#: src/zk-snarks/5-Pinocchio-Protocol.md:151
#: src/zk-snarks/5-Pinocchio-Protocol.md:152
#: src/zk-snarks/5-Pinocchio-Protocol.md:154
#: src/zk-snarks/5-Pinocchio-Protocol.md:155
#: src/zk-snarks/5-Pinocchio-Protocol.md:157
#: src/zk-snarks/5-Pinocchio-Protocol.md:160
#: src/zk-snarks/5-Pinocchio-Protocol.md:163
#: src/zk-snarks/5-Pinocchio-Protocol.md:165
#: src/zk-snarks/5-Pinocchio-Protocol.md:168
#: src/zk-snarks/5-Pinocchio-Protocol.md:170
#: src/zk-snarks/5-Pinocchio-Protocol.md:199
#: src/zk-snarks/5-Pinocchio-Protocol.md:202
#: src/zk-snarks/5-Pinocchio-Protocol.md:204
#: src/zk-snarks/5-Pinocchio-Protocol.md:209
#: src/zk-snarks/5-Pinocchio-Protocol.md:212
#: src/zk-snarks/5-Pinocchio-Protocol.md:214
#: src/zk-snarks/5-Pinocchio-Protocol.md:218
#: src/zk-snarks/5-Pinocchio-Protocol.md:222
#: src/zk-snarks/5-Pinocchio-Protocol.md:225 src/zk-everything/BabySNARK
#: tutorial.md:140
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:58
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:64
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:83
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:87
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:134
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:145
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:152
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:377
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:390
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:396
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:412
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:418
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:424
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:440
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:442
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:446
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:448
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:490
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:493
#: src/zk-everything/zk-everything-joe/Hyrax.md:58
#: src/zk-everything/zk-everything-joe/Hyrax.md:64
#: src/zk-everything/zk-everything-joe/Hyrax.md:70
#: src/zk-everything/zk-everything-joe/Hyrax.md:86
#: src/zk-everything/zk-everything-joe/Hyrax.md:92
#: src/zk-everything/zk-everything-joe/Hyrax.md:98
#: src/zk-everything/zk-everything-joe/Hyrax.md:116
#: src/zk-everything/zk-everything-joe/Hyrax.md:191
#: src/zk-everything/zk-everything-joe/Hyrax.md:297
#: src/zk-everything/zk-everything-joe/Hyrax.md:302
#: src/zk-everything/zk-everything-joe/Hyrax.md:311
#: src/zk-everything/zk-everything-joe/Hyrax.md:314
#: src/zk-everything/zk-everything-joe/Hyrax.md:315 src/public
#: goods/第二章.md:26 goods/第二章.md:33 goods/第二章.md:34
#: goods/第二章.md:80 goods/第二章.md:81 goods/第二章.md:84
#: goods/第二章.md:86 goods/第二章.md:97 goods/第二章.md:103
#: goods/第二章.md:129
msgid "L"
msgstr "L"

#: src/plonk-intro-cn/plonk-arithmetization.md:151
#: src/plonk-intro-cn/plonk-arithmetization.md:155
#: src/plonk-intro-cn/plonk-arithmetization.md:237
#: src/plonk-intro-cn/plonk-arithmetization.md:239
#: src/plonk-intro-cn/plonk-arithmetization.md:241
#: src/plonk-intro-cn/plonk-arithmetization.md:249
#: src/plonk-intro-cn/plonk-arithmetization.md:257
#: src/plonk-intro-cn/plonk-constraints.md:116
#: src/plonk-intro-cn/plonk-constraints.md:125
#: src/plonk-intro-cn/plonk-constraints.md:133
#: src/plonk-intro-cn/plonk-constraints.md:159
#: src/plonk-intro-cn/plonk-constraints.md:163
#: src/plonk-intro-cn/plonk-constraints.md:175
#: src/plonk-intro-cn/plonk-constraints.md:185
#: src/plonk-intro-cn/plonk-constraints.md:199
#: src/plonk-intro-cn/plonk-randomizing.md:41
#: src/plonk-intro-cn/plonk-lookup.md:265
#: src/plonk-intro-cn/plonk-lookup.md:269
#: src/plonk-intro-cn/plonk-lookup.md:304
#: src/zk-snarks/3-General-Purpose-Computation.md:112
#: src/zk-snarks/4-Construction-Properties.md:120
#: src/zk-snarks/4-Construction-Properties.md:155
#: src/zk-snarks/4-Construction-Properties.md:164
#: src/zk-snarks/4-Construction-Properties.md:171
#: src/zk-snarks/4-Construction-Properties.md:176
#: src/zk-snarks/4-Construction-Properties.md:178
#: src/zk-snarks/4-Construction-Properties.md:184
#: src/zk-snarks/4-Construction-Properties.md:193
#: src/zk-snarks/4-Construction-Properties.md:205
#: src/zk-snarks/4-Construction-Properties.md:207
#: src/zk-snarks/4-Construction-Properties.md:209
#: src/zk-snarks/4-Construction-Properties.md:212
#: src/zk-snarks/4-Construction-Properties.md:215
#: src/zk-snarks/4-Construction-Properties.md:217
#: src/zk-snarks/4-Construction-Properties.md:219
#: src/zk-snarks/4-Construction-Properties.md:234
#: src/zk-snarks/4-Construction-Properties.md:249
#: src/zk-snarks/4-Construction-Properties.md:275
#: src/zk-snarks/4-Construction-Properties.md:277
#: src/zk-snarks/4-Construction-Properties.md:279
#: src/zk-snarks/4-Construction-Properties.md:282
#: src/zk-snarks/4-Construction-Properties.md:284
#: src/zk-snarks/4-Construction-Properties.md:287
#: src/zk-snarks/4-Construction-Properties.md:289
#: src/zk-snarks/4-Construction-Properties.md:290
#: src/zk-snarks/4-Construction-Properties.md:291
#: src/zk-snarks/4-Construction-Properties.md:307
#: src/zk-snarks/4-Construction-Properties.md:309
#: src/zk-snarks/4-Construction-Properties.md:313
#: src/zk-snarks/4-Construction-Properties.md:339
#: src/zk-snarks/4-Construction-Properties.md:340
#: src/zk-snarks/4-Construction-Properties.md:341
#: src/zk-snarks/4-Construction-Properties.md:342
#: src/zk-snarks/4-Construction-Properties.md:345
#: src/zk-snarks/4-Construction-Properties.md:349
#: src/zk-snarks/4-Construction-Properties.md:354
#: src/zk-snarks/4-Construction-Properties.md:357
#: src/zk-snarks/4-Construction-Properties.md:359
#: src/zk-snarks/4-Construction-Properties.md:375
#: src/zk-snarks/4-Construction-Properties.md:379
#: src/zk-snarks/4-Construction-Properties.md:384
#: src/zk-snarks/4-Construction-Properties.md:394
#: src/zk-snarks/4-Construction-Properties.md:395
#: src/zk-snarks/4-Construction-Properties.md:405
#: src/zk-snarks/4-Construction-Properties.md:432
#: src/zk-snarks/4-Construction-Properties.md:434
#: src/zk-snarks/4-Construction-Properties.md:436
#: src/zk-snarks/4-Construction-Properties.md:443
#: src/zk-snarks/5-Pinocchio-Protocol.md:65
#: src/zk-snarks/5-Pinocchio-Protocol.md:83
#: src/zk-snarks/5-Pinocchio-Protocol.md:85
#: src/zk-snarks/5-Pinocchio-Protocol.md:92
#: src/zk-snarks/5-Pinocchio-Protocol.md:94
#: src/zk-snarks/5-Pinocchio-Protocol.md:98
#: src/zk-snarks/5-Pinocchio-Protocol.md:103
#: src/zk-snarks/5-Pinocchio-Protocol.md:106
#: src/zk-snarks/5-Pinocchio-Protocol.md:109
#: src/zk-snarks/5-Pinocchio-Protocol.md:131
#: src/zk-snarks/5-Pinocchio-Protocol.md:132
#: src/zk-snarks/5-Pinocchio-Protocol.md:133
#: src/zk-snarks/5-Pinocchio-Protocol.md:135
#: src/zk-snarks/5-Pinocchio-Protocol.md:136
#: src/zk-snarks/5-Pinocchio-Protocol.md:137
#: src/zk-snarks/5-Pinocchio-Protocol.md:142
#: src/zk-snarks/5-Pinocchio-Protocol.md:145
#: src/zk-snarks/5-Pinocchio-Protocol.md:147
#: src/zk-snarks/5-Pinocchio-Protocol.md:151
#: src/zk-snarks/5-Pinocchio-Protocol.md:152
#: src/zk-snarks/5-Pinocchio-Protocol.md:157
#: src/zk-snarks/5-Pinocchio-Protocol.md:160
#: src/zk-snarks/5-Pinocchio-Protocol.md:163
#: src/zk-snarks/5-Pinocchio-Protocol.md:165
#: src/zk-snarks/5-Pinocchio-Protocol.md:170
#: src/zk-snarks/5-Pinocchio-Protocol.md:199
#: src/zk-snarks/5-Pinocchio-Protocol.md:202
#: src/zk-snarks/5-Pinocchio-Protocol.md:205
#: src/zk-snarks/5-Pinocchio-Protocol.md:209
#: src/zk-snarks/5-Pinocchio-Protocol.md:212
#: src/zk-snarks/5-Pinocchio-Protocol.md:215
#: src/zk-snarks/5-Pinocchio-Protocol.md:219
#: src/zk-snarks/5-Pinocchio-Protocol.md:225 src/zk-everything/BabySNARK
#: tutorial.md:31 src/zk-everything/zk-learning-miles/KZG.md:170
#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:42
#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:362 SNARKs.md:363
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:58
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:64
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:83
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:87
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:134
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:145
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:152
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:377
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:390
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:396
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:412
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:418
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:424
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:440
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:442
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:446
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:448
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:490
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:493
#: src/zk-everything/zk-everything-joe/Hyrax.md:58
#: src/zk-everything/zk-everything-joe/Hyrax.md:64
#: src/zk-everything/zk-everything-joe/Hyrax.md:70
#: src/zk-everything/zk-everything-joe/Hyrax.md:86
#: src/zk-everything/zk-everything-joe/Hyrax.md:92
#: src/zk-everything/zk-everything-joe/Hyrax.md:98
#: src/zk-everything/zk-everything-joe/Hyrax.md:116
#: src/zk-everything/zk-everything-joe/Hyrax.md:191
#: src/zk-everything/zk-everything-joe/Hyrax.md:297
#: src/zk-everything/zk-everything-joe/Hyrax.md:302
#: src/zk-everything/zk-everything-joe/Hyrax.md:311
#: src/zk-everything/zk-everything-joe/Hyrax.md:324
#: src/zk-everything/zk-everything-joe/Spartan.md:148
#: src/zk-everything/zk-everything-joe/Spartan.md:154
#: src/zk-everything/zk-everything-joe/Spartan.md:155
#: src/zk-everything/zk-everything-joe/Spartan.md:166
#: src/zk-everything/zk-everything-joe/Spartan.md:195
#: src/zk-everything/zk-everything-joe/Spartan.md:200
#: src/zk-everything/zk-everything-joe/Spartan.md:222
#: src/zk-everything/zk-everything-joe/Spartan.md:232
#: src/zk-everything/zk-everything-joe/Spartan.md:274 src/public
#: goods/第二章.md:26 goods/第二章.md:33 goods/第二章.md:34
#: goods/第二章.md:97 goods/4-Proving-System.md:105
#: goods/4-Proving-System.md:106 goods/4-Proving-System.md:111
#: goods/4-Proving-System.md:113 goods/4-Proving-System.md:125
#: goods/4-Proving-System.md:126 goods/4-Proving-System.md:135
#: goods/4-Proving-System.md:136 goods/4-Proving-System.md:141
#: goods/4-Proving-System.md:149 goods/4-Proving-System.md:151
#: goods/4-Proving-System.md:155 goods/4-Proving-System.md:169
#: goods/4-Proving-System.md:171 goods/4-Proving-System.md:177
#: goods/4-Proving-System.md:209
msgid "R"
msgstr "R"

#: src/plonk-intro-cn/plonk-arithmetization.md:151
#: src/plonk-intro-cn/plonk-arithmetization.md:155
#: src/plonk-intro-cn/plonk-arithmetization.md:237
#: src/plonk-intro-cn/plonk-arithmetization.md:239
#: src/plonk-intro-cn/plonk-arithmetization.md:241
#: src/plonk-intro-cn/plonk-arithmetization.md:249
#: src/plonk-intro-cn/plonk-arithmetization.md:257
#: src/plonk-intro-cn/plonk-constraints.md:116
#: src/plonk-intro-cn/plonk-constraints.md:125
#: src/plonk-intro-cn/plonk-constraints.md:133
#: src/plonk-intro-cn/plonk-constraints.md:159
#: src/plonk-intro-cn/plonk-constraints.md:163
#: src/plonk-intro-cn/plonk-constraints.md:175
#: src/plonk-intro-cn/plonk-constraints.md:185
#: src/plonk-intro-cn/plonk-constraints.md:199
#: src/plonk-intro-cn/plonk-randomizing.md:41
#: src/plonk-intro-cn/plonk-lookup.md:265
#: src/plonk-intro-cn/plonk-lookup.md:269
#: src/plonk-intro-cn/plonk-lookup.md:304
#: src/zk-everything/zk-everything-joe/Hyrax.md:80
#: src/zk-everything/zk-everything-joe/Hyrax.md:98
#: src/zk-everything/zk-everything-joe/Hyrax.md:102
#: src/zk-everything/zk-everything-joe/Hyrax.md:116
#: src/zk-everything/zk-everything-joe/Hyrax.md:120
#: src/zk-everything/zk-everything-joe/Hyrax.md:122
#: src/zk-everything/zk-everything-joe/Hyrax.md:147
#: src/zk-everything/zk-everything-joe/Hyrax.md:191
#: src/zk-everything/zk-everything-joe/Spartan.md:309
#: src/zk-everything/zk-everything-joe/Spartan.md:319
#: src/zk-everything/zk-everything-joe/Spartan.md:323
#: src/zk-everything/zk-everything-joe/Spartan.md:339
#: src/zk-everything/zk-everything-joe/Spartan.md:347
#: src/zk-everything/zk-everything-joe/Spartan.md:349
#: src/zk-everything/zk-everything-joe/Spartan.md:350 src/public
#: goods/第二章.md:26 goods/第二章.md:33 goods/第二章.md:34
#: goods/第二章.md:80 goods/第二章.md:97 goods/第二章.md:103
#: goods/第二章.md:129 goods/4-Proving-System.md:124
#: goods/4-Proving-System.md:145
msgid "M"
msgstr "M"

#: src/plonk-intro-cn/plonk-arithmetization.md:153
msgid "于是我们可以通过下面的等式来表示三个约束："
msgstr "于是我们可以通过下面的等式来表示三个约束："

#: src/plonk-intro-cn/plonk-arithmetization.md:157
msgid "如果把上面的等式代入并展开，我们可以得到下面的约束等式："
msgstr "如果把上面的等式代入并展开，我们可以得到下面的约束等式："

#: src/plonk-intro-cn/plonk-arithmetization.md:161
msgid "化简后得："
msgstr "化简后得："

#: src/plonk-intro-cn/plonk-arithmetization.md:165
msgid "这正好是三个算术门的计算约束。"
msgstr "这正好是三个算术门的计算约束。"

#: src/plonk-intro-cn/plonk-arithmetization.md:167
msgid "总结下，Plonkish 需要一个矩阵 "
msgstr "总结下，Plonkish 需要一个矩阵 "

#: src/plonk-intro-cn/plonk-arithmetization.md:167
msgid " 来描述电路空白态，而所有的赋值则写入了 "
msgstr " 来描述电路空白态，而所有的赋值则写入了 "

#: src/plonk-intro-cn/plonk-arithmetization.md:167
msgid " 矩阵。对于 Prover 和 Verifier 的交换协议， "
msgstr " 矩阵。对于 Prover 和 Verifier 的交换协议， "

#: src/plonk-intro-cn/plonk-arithmetization.md:167
msgid " 是 Prover 的 witness，属于秘密知识，对 Verifier 保密， "
msgstr " 是 Prover 的 witness，属于秘密知识，对 Verifier 保密， "

#: src/plonk-intro-cn/plonk-arithmetization.md:167
msgid " 矩阵代表了一个实现双方约定共识的电路描述。"
msgstr " 矩阵代表了一个实现双方约定共识的电路描述。"

#: src/plonk-intro-cn/plonk-arithmetization.md:169
msgid "不过仅仅有 "
msgstr "不过仅仅有 "

#: src/plonk-intro-cn/plonk-arithmetization.md:169
msgid " 矩阵是不足以精确描述上面的例子电路。"
msgstr " 矩阵是不足以精确描述上面的例子电路。"

#: src/plonk-intro-cn/plonk-arithmetization.md:171
msgid "复制约束"
msgstr "复制约束"

#: src/plonk-intro-cn/plonk-arithmetization.md:173
msgid "比较下面两个电路，它们的 "
msgstr "比较下面两个电路，它们的 "

#: src/plonk-intro-cn/plonk-arithmetization.md:173
msgid " 矩阵完全相同，但它们却完全不同。"
msgstr " 矩阵完全相同，但它们却完全不同。"

#: src/plonk-intro-cn/plonk-arithmetization.md:175
msgid "![](img/img20230414205219.png)"
msgstr "![](img/img20230414205219.png)"

#: src/plonk-intro-cn/plonk-arithmetization.md:177
msgid "两个电路的区别在于 "
msgstr "两个电路的区别在于 "

#: src/plonk-intro-cn/plonk-arithmetization.md:177
msgid " 是否被接入了 `#1` 号门。如果让 Prover 直接把电路赋值填入 "
msgstr " 是否被接入了 `#1` 号门。如果让 Prover 直接把电路赋值填入 "

#: src/plonk-intro-cn/plonk-arithmetization.md:177
msgid " 表格，一个「诚实的」Prover 会在 "
msgstr " 表格，一个「诚实的」Prover 会在 "

#: src/plonk-intro-cn/plonk-arithmetization.md:177
msgid ""
" 两个位置填上相同的值；而一个「恶意的」Prover 完全可以填上不同的值。如果恶意 "
"Prover 在 "
msgstr ""
" 两个位置填上相同的值；而一个「恶意的」Prover 完全可以填上不同的值。如果恶意 "
"Prover 在 "

#: src/plonk-intro-cn/plonk-arithmetization.md:177
msgid ""
" 也填入不同的值，那么实际上 Prover 证明的是上图右边的电路，而非是和 Verifier "
"共识过的电路（左边)。"
msgstr ""
" 也填入不同的值，那么实际上 Prover 证明的是上图右边的电路，而非是和 Verifier "
"共识过的电路（左边)。"

#: src/plonk-intro-cn/plonk-arithmetization.md:181
msgid "我们需要增加新的约束，强制要求右边电路图中 "
msgstr "我们需要增加新的约束，强制要求右边电路图中 "

#: src/plonk-intro-cn/plonk-arithmetization.md:181
#: src/plonk-intro-cn/plonk-lagrange-basis.md:89
#: src/plonk-intro-cn/plonk-lagrange-basis.md:93
#: src/plonk-intro-cn/plonk-lagrange-basis.md:161
#: src/plonk-intro-cn/plonk-constraints.md:63
#: src/plonk-intro-cn/plonk-constraints.md:67
#: src/plonk-intro-cn/plonk-constraints.md:120
#: src/plonk-intro-cn/plonk-lookup.md:18 src/plonk-intro-cn/plonk-lookup.md:43
#: src/plonk-intro-cn/plonk-lookup.md:51
#: src/zk-snarks/3-General-Purpose-Computation.md:149
#: src/zk-snarks/5-Pinocchio-Protocol.md:32 src/halo2/tmp/9-decomposed.md:37
#: src/halo2/tmp/9-decomposed.md:42 src/halo2/tmp/9-decomposed.md:46
#: src/halo2/tmp/9-decomposed.md:183
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:204
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:212
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:246
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:255
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:292
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:301
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:336
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:343
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:396
#: src/zk-everything/zk-everything-joe/Spartan.md:312
#: src/zk-everything/zk-everything-joe/Spartan.md:389
msgid "8"
msgstr "8"

#: src/plonk-intro-cn/plonk-arithmetization.md:181
msgid ""
"。这等价于我们要求 Prover 把同一个变量填入表格多个位置时，**必须填入相等的值"
"**。"
msgstr ""
"。这等价于我们要求 Prover 把同一个变量填入表格多个位置时，**必须填入相等的值"
"**。"

#: src/plonk-intro-cn/plonk-arithmetization.md:183
msgid ""
"这就需要一类新的约束——「拷贝约束」，即 Copy Constraint。Plonk 采用「置换证"
"明」保证 "
msgstr ""
"这就需要一类新的约束——「拷贝约束」，即 Copy Constraint。Plonk 采用「置换证"
"明」保证 "

#: src/plonk-intro-cn/plonk-arithmetization.md:183
msgid ""
" 表格中多个位置上的值满足拷贝关系。我们继续用上面这个电路图的案例来说明其基本"
"思路："
msgstr ""
" 表格中多个位置上的值满足拷贝关系。我们继续用上面这个电路图的案例来说明其基本"
"思路："

#: src/plonk-intro-cn/plonk-arithmetization.md:185
msgid "设想我们把 "
msgstr "设想我们把 "

#: src/plonk-intro-cn/plonk-arithmetization.md:185
msgid " 表格中的所有位置索引排成一个向量："
msgstr " 表格中的所有位置索引排成一个向量："

#: src/plonk-intro-cn/plonk-arithmetization.md:187
#: src/plonk-intro-cn/plonk-arithmetization.md:191
#: src/plonk-intro-cn/plonk-arithmetization.md:207
#: src/plonk-intro-cn/plonk-arithmetization.md:209
#: src/plonk-intro-cn/plonk-arithmetization.md:211
#: src/plonk-intro-cn/plonk-arithmetization.md:213
#: src/plonk-intro-cn/plonk-arithmetization.md:227
#: src/plonk-intro-cn/plonk-arithmetization.md:243
#: src/plonk-intro-cn/plonk-arithmetization.md:245
#: src/plonk-intro-cn/plonk-arithmetization.md:259
#: src/plonk-intro-cn/plonk-permutation.md:5
#: src/plonk-intro-cn/plonk-permutation.md:19
#: src/plonk-intro-cn/plonk-permutation.md:21
#: src/plonk-intro-cn/plonk-permutation.md:23
#: src/plonk-intro-cn/plonk-permutation.md:144
#: src/plonk-intro-cn/plonk-permutation.md:148
#: src/plonk-intro-cn/plonk-permutation.md:150
#: src/plonk-intro-cn/plonk-permutation.md:156
#: src/plonk-intro-cn/plonk-permutation.md:164
#: src/plonk-intro-cn/plonk-permutation.md:174
#: src/plonk-intro-cn/plonk-permutation.md:186
#: src/plonk-intro-cn/plonk-permutation.md:190
#: src/plonk-intro-cn/plonk-permutation.md:198
#: src/plonk-intro-cn/plonk-permutation.md:204
#: src/plonk-intro-cn/plonk-permutation.md:208
#: src/plonk-intro-cn/plonk-permutation.md:212
#: src/plonk-intro-cn/plonk-constraints.md:7
#: src/plonk-intro-cn/plonk-constraints.md:9
#: src/plonk-intro-cn/plonk-constraints.md:13
#: src/plonk-intro-cn/plonk-constraints.md:37
#: src/plonk-intro-cn/plonk-constraints.md:39
#: src/plonk-intro-cn/plonk-constraints.md:41
#: src/plonk-intro-cn/plonk-constraints.md:45
#: src/plonk-intro-cn/plonk-constraints.md:47
#: src/plonk-intro-cn/plonk-constraints.md:65
#: src/plonk-intro-cn/plonk-constraints.md:67
#: src/plonk-intro-cn/plonk-constraints.md:69
#: src/plonk-intro-cn/plonk-constraints.md:71
#: src/plonk-intro-cn/plonk-constraints.md:75
#: src/plonk-intro-cn/plonk-constraints.md:77
#: src/plonk-intro-cn/plonk-constraints.md:105
#: src/plonk-intro-cn/plonk-constraints.md:107
#: src/plonk-intro-cn/plonk-constraints.md:109
#: src/plonk-intro-cn/plonk-constraints.md:120
#: src/plonk-intro-cn/plonk-constraints.md:141
#: src/plonk-intro-cn/plonk-constraints.md:143
#: src/plonk-intro-cn/plonk-constraints.md:155
#: src/plonk-intro-cn/plonk-constraints.md:159
#: src/plonk-intro-cn/plonk-constraints.md:179
#: src/plonk-intro-cn/plonk-constraints.md:186
#: src/plonk-intro-cn/plonk-constraints.md:192
#: src/plonk-intro-cn/plonk-randomizing.md:97
#: src/plonk-intro-cn/plonk-randomizing.md:117
#: src/plonk-intro-cn/plonk-lookup.md:119
#: src/plonk-intro-cn/plonk-lookup.md:265
#: src/plonk-intro-cn/plonk-lookup.md:289 src/public goods/第二章.md:46
#: goods/第二章.md:48 goods/第二章.md:50 goods/第二章.md:52
#: goods/第二章.md:54 goods/第二章.md:56
msgid "σ"
msgstr "σ"

#: src/plonk-intro-cn/plonk-arithmetization.md:189
msgid "然后把应该相等的两个位置互换，比如上图中要求 "
msgstr "然后把应该相等的两个位置互换，比如上图中要求 "

#: src/plonk-intro-cn/plonk-arithmetization.md:189
msgid " 。于是我们得到了下面的位置向量："
msgstr " 。于是我们得到了下面的位置向量："

#: src/plonk-intro-cn/plonk-arithmetization.md:193
msgid "然后我们要求 Prover 证明：**"
msgstr "然后我们要求 Prover 证明：**"

#: src/plonk-intro-cn/plonk-arithmetization.md:193
msgid ""
" 表格按照上面的置换之后，仍然等于自身**。置换前后的相等性可以保证 Prover 无法"
"作弊。"
msgstr ""
" 表格按照上面的置换之后，仍然等于自身**。置换前后的相等性可以保证 Prover 无法"
"作弊。"

#: src/plonk-intro-cn/plonk-arithmetization.md:195
msgid ""
"再来一个例子，当约束一个向量中有三个（或多个）位置上的值必须相同时，只需要把"
"这三个（或多个）位置的值进行循环移位（左移位或者右移位），然后证明移位后的向"
"量与原向量相等即可。比如："
msgstr ""
"再来一个例子，当约束一个向量中有三个（或多个）位置上的值必须相同时，只需要把"
"这三个（或多个）位置的值进行循环移位（左移位或者右移位），然后证明移位后的向"
"量与原向量相等即可。比如："

#: src/plonk-intro-cn/plonk-arithmetization.md:197
#: src/plonk-intro-cn/plonk-arithmetization.md:201
#: src/plonk-intro-cn/plonk-arithmetization.md:203
#: src/plonk-intro-cn/plonk-arithmetization.md:205
#: src/plonk-intro-cn/plonk-constraints.md:15
#: src/plonk-intro-cn/plonk-constraints.md:17
#: src/plonk-intro-cn/plonk-constraints.md:19
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:206
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:207
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:209
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:211
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:213
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:215
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:218
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:247
#: src/halo2/tmp/3-Fibonacci-example-2.md:84
#: src/halo2/tmp/3-Fibonacci-example-2.md:269 src/zk-everything/BabySNARK
#: tutorial.md:31 tutorial.md:33 tutorial.md:35 tutorial.md:38
#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:350 SNARKs.md:352 SNARKs.md:354 SNARKs.md:369 SNARKs.md:370
#: SNARKs.md:374 src/zk-everything/zk-everything-joe/Spartan.md:25
#: src/zk-everything/zk-everything-joe/Spartan.md:89
#: src/zk-everything/zk-everything-joe/Spartan.md:93
#: src/zk-everything/zk-everything-joe/Spartan.md:143
#: src/zk-everything/zk-everything-joe/Spartan.md:154
#: src/zk-everything/zk-everything-joe/Spartan.md:155
#: src/zk-everything/zk-everything-joe/Spartan.md:166
#: src/zk-everything/zk-everything-joe/Spartan.md:195
#: src/zk-everything/zk-everything-joe/Spartan.md:200
#: src/zk-everything/zk-everything-joe/Spartan.md:217
#: src/zk-everything/zk-everything-joe/Spartan.md:232
#: src/zk-everything/zk-everything-joe/Spartan.md:263
#: src/zk-everything/zk-everything-joe/Spartan.md:264
#: src/zk-everything/zk-everything-joe/Spartan.md:382
#: src/zk-everything/zk-everything-joe/Spartan.md:394
#: src/zk-everything/zk-everything-joe/Spartan.md:396
#: src/zk-everything/zk-everything-joe/Spartan.md:401
#: src/zk-everything/zk-everything-joe/Spartan.md:441
#: src/zk-everything/zk-everything-joe/Spartan.md:445
#: src/zk-everything/zk-everything-joe/Spartan.md:450
#: src/zk-everything/zk-everything-joe/Spartan.md:455
#: src/zk-everything/zk-everything-joe/Spartan.md:458 src/public
#: goods/4-Proving-System.md:209
msgid "A"
msgstr "A"

#: src/plonk-intro-cn/plonk-arithmetization.md:199
msgid "如果要证明 "
msgstr "如果要证明 "

#: src/plonk-intro-cn/plonk-arithmetization.md:199
msgid "，那么只需要证明："
msgstr "，那么只需要证明："

#: src/plonk-intro-cn/plonk-arithmetization.md:201
#: src/plonk-intro-cn/plonk-arithmetization.md:203
#: src/plonk-intro-cn/plonk-arithmetization.md:205
#: src/plonk-intro-cn/plonk-permutation.md:19
#: src/plonk-intro-cn/plonk-permutation.md:21
#: src/plonk-intro-cn/plonk-permutation.md:23
#: src/plonk-intro-cn/plonk-permutation.md:36
#: src/plonk-intro-cn/plonk-permutation.md:40
#: src/plonk-intro-cn/plonk-permutation.md:156
#: src/plonk-intro-cn/plonk-permutation.md:164
#: src/plonk-intro-cn/plonk-permutation.md:174
#: src/plonk-intro-cn/plonk-permutation.md:182
#: src/plonk-intro-cn/plonk-constraints.md:11
#: src/plonk-intro-cn/plonk-constraints.md:13
#: src/plonk-intro-cn/plonk-constraints.md:15
#: src/plonk-intro-cn/plonk-constraints.md:17
#: src/plonk-intro-cn/plonk-constraints.md:21
#: src/plonk-intro-cn/plonk-constraints.md:25
#: src/plonk-intro-cn/plonk-constraints.md:27
#: src/plonk-intro-cn/plonk-constraints.md:69
#: src/plonk-intro-cn/plonk-constraints.md:71
#: src/plonk-intro-cn/plonk-constraints.md:73
#: src/plonk-intro-cn/plonk-polycom.md:15
#: src/plonk-intro-cn/plonk-randomizing.md:39
#: src/plonk-intro-cn/plonk-randomizing.md:41
#: src/plonk-intro-cn/plonk-randomizing.md:45
#: src/plonk-intro-cn/plonk-randomizing.md:47
#: src/plonk-intro-cn/plonk-randomizing.md:51
#: src/plonk-intro-cn/plonk-randomizing.md:53
#: src/plonk-intro-cn/plonk-randomizing.md:57
#: src/plonk-intro-cn/plonk-randomizing.md:65
#: src/plonk-intro-cn/plonk-randomizing.md:69
#: src/plonk-intro-cn/plonk-randomizing.md:90
#: src/plonk-intro-cn/plonk-randomizing.md:92
#: src/plonk-intro-cn/plonk-randomizing.md:93
#: src/plonk-intro-cn/plonk-randomizing.md:127
#: src/plonk-intro-cn/plonk-randomizing.md:129
#: src/plonk-intro-cn/plonk-randomizing.md:151
#: src/plonk-intro-cn/plonk-randomizing.md:155
#: src/plonk-intro-cn/plonk-randomizing.md:159
#: src/plonk-intro-cn/plonk-lookup.md:43 src/plonk-intro-cn/plonk-lookup.md:45
#: src/plonk-intro-cn/plonk-lookup.md:47 src/plonk-intro-cn/plonk-lookup.md:49
#: src/plonk-intro-cn/plonk-lookup.md:51 src/plonk-intro-cn/plonk-lookup.md:53
#: src/plonk-intro-cn/plonk-lookup.md:55 src/plonk-intro-cn/plonk-lookup.md:57
#: src/plonk-intro-cn/plonk-lookup.md:59 src/plonk-intro-cn/plonk-lookup.md:61
#: src/plonk-intro-cn/plonk-lookup.md:63 src/plonk-intro-cn/plonk-lookup.md:65
#: src/plonk-intro-cn/plonk-lookup.md:67 src/plonk-intro-cn/plonk-lookup.md:81
#: src/plonk-intro-cn/plonk-lookup.md:87 src/plonk-intro-cn/plonk-lookup.md:93
#: src/plonk-intro-cn/plonk-lookup.md:97 src/plonk-intro-cn/plonk-lookup.md:101
#: src/plonk-intro-cn/plonk-lookup.md:105
#: src/plonk-intro-cn/plonk-lookup.md:111
#: src/plonk-intro-cn/plonk-lookup.md:291
#: src/plonk-intro-cn/plonk-lookup.md:293
#: src/plonk-intro-cn/plonk-lookup.md:304
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:146
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:148
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:42
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:43
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:45
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:47
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:48
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:50
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:51
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:52
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:57
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:58
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:81
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:82
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:85
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:108
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:112
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:126
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:128
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:191
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:196
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:197
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:198
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:277
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:279
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:286
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:287
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:298
#: src/zk-snarks/3-General-Purpose-Computation.md:257
#: src/zk-snarks/3-General-Purpose-Computation.md:271
#: src/zk-snarks/3-General-Purpose-Computation.md:276
#: src/zk-snarks/3-General-Purpose-Computation.md:279
#: src/zk-snarks/3-General-Purpose-Computation.md:280
#: src/zk-snarks/3-General-Purpose-Computation.md:293
#: src/zk-snarks/3-General-Purpose-Computation.md:295
#: src/zk-snarks/3-General-Purpose-Computation.md:300
#: src/zk-snarks/3-General-Purpose-Computation.md:364
#: src/zk-snarks/3-General-Purpose-Computation.md:366
#: src/zk-snarks/4-Construction-Properties.md:215
#: src/zk-snarks/4-Construction-Properties.md:217
#: src/zk-snarks/4-Construction-Properties.md:233
#: src/zk-snarks/4-Construction-Properties.md:325
#: src/zk-snarks/4-Construction-Properties.md:326
#: src/zk-snarks/4-Construction-Properties.md:327
#: src/zk-snarks/4-Construction-Properties.md:333
#: src/zk-snarks/4-Construction-Properties.md:353
#: src/zk-snarks/4-Construction-Properties.md:354
#: src/zk-snarks/4-Construction-Properties.md:394
#: src/zk-snarks/4-Construction-Properties.md:431
#: src/zk-snarks/5-Pinocchio-Protocol.md:102
#: src/zk-snarks/5-Pinocchio-Protocol.md:205
#: src/zk-snarks/5-Pinocchio-Protocol.md:209
#: src/zk-snarks/5-Pinocchio-Protocol.md:212
#: src/zk-snarks/5-Pinocchio-Protocol.md:218
#: src/zk-snarks/5-Pinocchio-Protocol.md:222 src/zk-everything/BabySNARK
#: tutorial.md:129 src/zk-everything/zk-learning-miles/KZG.md:270
#: src/zk-everything/zk-learning-miles/KZG.md:272
#: src/zk-everything/zk-learning-miles/KZG.md:274
#: src/zk-everything/zk-learning-miles/KZG.md:276
#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:368 SNARKs.md:369 SNARKs.md:370 SNARKs.md:371 SNARKs.md:373
#: SNARKs.md:374 src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:64
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:79
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:83
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:87
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:91
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:132
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:134
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:145
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:152
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:377
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:390
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:396
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:412
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:418
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:424
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:440
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:442
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:446
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:448
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:490
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:493
#: src/zk-everything/zk-everything-joe/Hyrax.md:58
#: src/zk-everything/zk-everything-joe/Hyrax.md:64
#: src/zk-everything/zk-everything-joe/Hyrax.md:70
#: src/zk-everything/zk-everything-joe/Hyrax.md:86
#: src/zk-everything/zk-everything-joe/Hyrax.md:92
#: src/zk-everything/zk-everything-joe/Hyrax.md:98
#: src/zk-everything/zk-everything-joe/Hyrax.md:116
#: src/zk-everything/zk-everything-joe/Hyrax.md:173
#: src/zk-everything/zk-everything-joe/Hyrax.md:181
#: src/zk-everything/zk-everything-joe/Hyrax.md:191
#: src/zk-everything/zk-everything-joe/Hyrax.md:314
#: src/zk-everything/zk-everything-joe/Hyrax.md:315
#: src/zk-everything/zk-everything-joe/Hyrax.md:324
#: src/zk-everything/zk-everything-joe/Spartan.md:353
#: src/zk-everything/zk-everything-joe/Spartan.md:355
#: src/zk-everything/zk-everything-joe/Spartan.md:450
#: src/zk-everything/zk-everything-joe/Spartan.md:455 src/Nova/SuperNova.md:17
#: src/public goods/4-Proving-System.md:60 goods/4-Proving-System.md:62
#: goods/4-Proving-System.md:111 goods/4-Proving-System.md:113
#: goods/4-Proving-System.md:141 goods/4-Proving-System.md:149
#: goods/4-Proving-System.md:151 goods/4-Proving-System.md:155
msgid "′"
msgstr "′"

#: src/plonk-intro-cn/plonk-arithmetization.md:201
#: src/plonk-intro-cn/plonk-arithmetization.md:257
#: src/plonk-intro-cn/plonk-lagrange-basis.md:22
#: src/plonk-intro-cn/plonk-lagrange-basis.md:28
#: src/plonk-intro-cn/plonk-lagrange-basis.md:66
#: src/plonk-intro-cn/plonk-permutation.md:212
#: src/plonk-intro-cn/plonk-constraints.md:199
#: src/plonk-intro-cn/plonk-polycom.md:71
#: src/plonk-intro-cn/plonk-polycom.md:75
#: src/plonk-intro-cn/plonk-polycom.md:81
#: src/plonk-intro-cn/plonk-polycom.md:117
#: src/plonk-intro-cn/plonk-polycom.md:136
#: src/plonk-intro-cn/plonk-polycom.md:143
#: src/plonk-intro-cn/plonk-polycom.md:147
#: src/plonk-intro-cn/plonk-polycom.md:151
#: src/plonk-intro-cn/plonk-polycom.md:155
#: src/plonk-intro-cn/plonk-polycom.md:161
#: src/plonk-intro-cn/plonk-polycom.md:175
#: src/plonk-intro-cn/plonk-polycom.md:187
#: src/plonk-intro-cn/plonk-polycom.md:229
#: src/plonk-intro-cn/plonk-randomizing.md:159
#: src/plonk-intro-cn/plonk-lookup.md:101
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:341
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:26
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:30
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:85
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:194
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:196
#: src/zk-snarks/4-Construction-Properties.md:219
#: src/zk-snarks/4-Construction-Properties.md:287
#: src/zk-snarks/4-Construction-Properties.md:290
#: src/zk-snarks/4-Construction-Properties.md:313
#: src/zk-snarks/4-Construction-Properties.md:353
#: src/zk-snarks/5-Pinocchio-Protocol.md:106
#: src/zk-everything/zk-learning-miles/KZG.md:209
#: src/zk-everything/zk-learning-miles/KZG.md:246
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:134
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:182
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:188
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:224
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:230
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:268
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:275
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:314
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:319
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:355
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:361
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:396
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:442
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:448
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:460
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:493
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:506
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:538
#: src/zk-everything/zk-everything-joe/Hyrax.md:80
#: src/zk-everything/zk-everything-joe/Hyrax.md:116
#: src/zk-everything/zk-everything-joe/Hyrax.md:122
#: src/zk-everything/zk-everything-joe/Hyrax.md:156
#: src/zk-everything/zk-everything-joe/Hyrax.md:181
#: src/zk-everything/zk-everything-joe/Hyrax.md:191
#: src/zk-everything/zk-everything-joe/Hyrax.md:201
#: src/zk-everything/zk-everything-joe/Hyrax.md:228
#: src/zk-everything/zk-everything-joe/Hyrax.md:245
#: src/zk-everything/zk-everything-joe/Hyrax.md:324
#: src/zk-everything/zk-everything-joe/Spartan.md:155
#: src/zk-everything/zk-everything-joe/Spartan.md:166
#: src/zk-everything/zk-everything-joe/Spartan.md:169
#: src/zk-everything/zk-everything-joe/Spartan.md:172
#: src/zk-everything/zk-everything-joe/Spartan.md:182
#: src/zk-everything/zk-everything-joe/Spartan.md:200
#: src/zk-everything/zk-everything-joe/Spartan.md:232
#: src/zk-everything/zk-everything-joe/Spartan.md:242
#: src/zk-everything/zk-everything-joe/Spartan.md:254
#: src/zk-everything/zk-everything-joe/Spartan.md:264
#: src/zk-everything/zk-everything-joe/Spartan.md:275
#: src/zk-everything/zk-everything-joe/Spartan.md:350
#: src/zk-everything/zk-everything-joe/Spartan.md:353
#: src/zk-everything/zk-everything-joe/Spartan.md:355
#: src/zk-everything/zk-everything-joe/Spartan.md:436
#: src/zk-everything/zk-everything-joe/Spartan.md:441
#: src/zk-everything/zk-everything-joe/Spartan.md:450
#: src/zk-everything/zk-everything-joe/Spartan.md:455 src/public
#: goods/第二章.md:147 goods/第二章.md:177 goods/4-Proving-System.md:62
msgid "?"
msgstr "?"

#: src/plonk-intro-cn/plonk-arithmetization.md:203
msgid "在经过置换的向量 "
msgstr "在经过置换的向量 "

#: src/plonk-intro-cn/plonk-arithmetization.md:203
msgid " 中， "
msgstr " 中， "

#: src/plonk-intro-cn/plonk-arithmetization.md:203
msgid " 依次右移交换，即 "
msgstr " 依次右移交换，即 "

#: src/plonk-intro-cn/plonk-arithmetization.md:203
msgid " 放到了原来 "
msgstr " 放到了原来 "

#: src/plonk-intro-cn/plonk-arithmetization.md:203
msgid " 的位置，而 "
msgstr " 的位置，而 "

#: src/plonk-intro-cn/plonk-arithmetization.md:203
msgid " 放到了 "
msgstr " 放到了 "

#: src/plonk-intro-cn/plonk-arithmetization.md:203
msgid " 的位置， "
msgstr " 的位置， "

#: src/plonk-intro-cn/plonk-arithmetization.md:203
msgid " 则放到了 "
msgstr " 则放到了 "

#: src/plonk-intro-cn/plonk-arithmetization.md:203
msgid " 的位置。"
msgstr " 的位置。"

#: src/plonk-intro-cn/plonk-arithmetization.md:205
#: src/plonk-intro-cn/plonk-lagrange-basis.md:44
#: src/plonk-intro-cn/plonk-constraints.md:95
#: src/plonk-intro-cn/plonk-constraints.md:155
#: src/zk-snarks/3-General-Purpose-Computation.md:382
#: src/halo2/tmp/4-IsZero-Check-example-3.md:120
#: src/zk-everything/zk-learning-miles/KZG.md:183
msgid "如果 "
msgstr "如果 "

#: src/plonk-intro-cn/plonk-arithmetization.md:205
#: src/plonk-intro-cn/plonk-lagrange-basis.md:44
msgid " ，那么 "
msgstr " ，那么 "

#: src/plonk-intro-cn/plonk-arithmetization.md:205
msgid " 所有对应位置上的值都应该相等，可得： "
msgstr " 所有对应位置上的值都应该相等，可得： "

#: src/plonk-intro-cn/plonk-arithmetization.md:205
#: src/plonk-intro-cn/plonk-lagrange-basis.md:82
#: src/plonk-intro-cn/plonk-permutation.md:23
#: src/plonk-intro-cn/plonk-permutation.md:38
#: src/plonk-intro-cn/plonk-permutation.md:208
#: src/plonk-intro-cn/plonk-constraints.md:59
#: src/plonk-intro-cn/plonk-constraints.md:69
#: src/plonk-intro-cn/plonk-constraints.md:73
#: src/plonk-intro-cn/plonk-constraints.md:75
#: src/plonk-intro-cn/plonk-constraints.md:159
#: src/plonk-intro-cn/plonk-constraints.md:161
#: src/plonk-intro-cn/plonk-constraints.md:184
#: src/plonk-intro-cn/plonk-constraints.md:185
#: src/plonk-intro-cn/plonk-constraints.md:186
#: src/plonk-intro-cn/plonk-constraints.md:187
#: src/plonk-intro-cn/plonk-polycom.md:57
#: src/plonk-intro-cn/plonk-polycom.md:87
#: src/plonk-intro-cn/plonk-polycom.md:124
#: src/plonk-intro-cn/plonk-polycom.md:126
#: src/plonk-intro-cn/plonk-polycom.md:128
#: src/plonk-intro-cn/plonk-polycom.md:134
#: src/plonk-intro-cn/plonk-polycom.md:169
#: src/plonk-intro-cn/plonk-polycom.md:197
#: src/plonk-intro-cn/plonk-polycom.md:199
#: src/plonk-intro-cn/plonk-polycom.md:205
#: src/plonk-intro-cn/plonk-randomizing.md:19
#: src/plonk-intro-cn/plonk-randomizing.md:59
#: src/plonk-intro-cn/plonk-randomizing.md:92
#: src/plonk-intro-cn/plonk-lookup.md:43 src/plonk-intro-cn/plonk-lookup.md:81
#: src/plonk-intro-cn/plonk-lookup.md:111
#: src/plonk-intro-cn/plonk-lookup.md:123
#: src/plonk-intro-cn/plonk-lookup.md:131
#: src/plonk-intro-cn/plonk-lookup.md:175
#: src/plonk-intro-cn/plonk-lookup.md:216
#: src/plonk-intro-cn/plonk-lookup.md:265
#: src/plonk-intro-cn/plonk-lookup.md:267 src/public goods/第二章.md:26
#: goods/第二章.md:44 goods/第二章.md:46
msgid "， "
msgstr "， "

#: src/plonk-intro-cn/plonk-arithmetization.md:205
#: src/plonk-intro-cn/plonk-permutation.md:38
msgid "，即 "
msgstr "，即 "

#: src/plonk-intro-cn/plonk-arithmetization.md:205
msgid ""
"。这个方法可以适用于任意数量的等价关系。（后续证明两个向量相等的方法请见下"
"章）"
msgstr ""
"。这个方法可以适用于任意数量的等价关系。（后续证明两个向量相等的方法请见下"
"章）"

#: src/plonk-intro-cn/plonk-arithmetization.md:207
msgid "那么如何描述电路赋值表格中的交换呢？我们只需要记录 "
msgstr "那么如何描述电路赋值表格中的交换呢？我们只需要记录 "

#: src/plonk-intro-cn/plonk-arithmetization.md:207
msgid " 向量即可，当然 "
msgstr " 向量即可，当然 "

#: src/plonk-intro-cn/plonk-arithmetization.md:207
msgid " 向量也可以写成表格的形式："
msgstr " 向量也可以写成表格的形式："

#: src/plonk-intro-cn/plonk-arithmetization.md:211
msgid "加上 "
msgstr "加上 "

#: src/plonk-intro-cn/plonk-arithmetization.md:211
msgid " ，空白电路可以描述为 "
msgstr " ，空白电路可以描述为 "

#: src/plonk-intro-cn/plonk-arithmetization.md:211
msgid " ，电路的赋值为 "
msgstr " ，电路的赋值为 "

#: src/plonk-intro-cn/plonk-arithmetization.md:213
msgid "Plonkish"
msgstr "Plonkish"

#: src/plonk-intro-cn/plonk-arithmetization.md:213
#: src/plonk-intro-cn/plonk-polycom.md:57
msgid "≜"
msgstr "≜"

#: src/plonk-intro-cn/plonk-arithmetization.md:213
#: src/plonk-intro-cn/plonk-permutation.md:23
#: src/zk-snarks/3-General-Purpose-Computation.md:75
#: src/zk-snarks/3-General-Purpose-Computation.md:149
#: src/zk-snarks/4-Construction-Properties.md:195
#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:354 SNARKs.md:374
msgid ";"
msgstr ";"

#: src/plonk-intro-cn/plonk-arithmetization.md:215
msgid "再比较"
msgstr "再比较"

#: src/plonk-intro-cn/plonk-arithmetization.md:217
msgid "R1CS 的 "
msgstr "R1CS 的 "

#: src/plonk-intro-cn/plonk-arithmetization.md:217
msgid ""
" 表格的宽度与引线的数量有关，行数跟乘法门数量有关。这个构造相当于把算术电路看"
"成是仅有乘法门构成，但每个门有多个输入引脚（最多为所有引线的数量）。而 "
"Plonkish 则是同等对待加法门与乘法门，并且因为输入引脚只有两个， 所以 "
msgstr ""
" 表格的宽度与引线的数量有关，行数跟乘法门数量有关。这个构造相当于把算术电路看"
"成是仅有乘法门构成，但每个门有多个输入引脚（最多为所有引线的数量）。而 "
"Plonkish 则是同等对待加法门与乘法门，并且因为输入引脚只有两个， 所以 "

#: src/plonk-intro-cn/plonk-arithmetization.md:217
msgid ""
" 表格的宽度固定，仅有三列（如果要支持高级的计算门，表格可以扩展到更多列）。这"
"一特性是 Plonk 可以利用 Permutation Argument 实现拷贝约束的前提。"
msgstr ""
" 表格的宽度固定，仅有三列（如果要支持高级的计算门，表格可以扩展到更多列）。这"
"一特性是 Plonk 可以利用 Permutation Argument 实现拷贝约束的前提。"

#: src/plonk-intro-cn/plonk-arithmetization.md:219
msgid ""
"..., and thus our linear contraints are just wiring constraints that can be "
"reduced to a permutation check. "
msgstr ""
"..., and thus our linear contraints are just wiring constraints that can be "
"reduced to a permutation check. "

#: src/plonk-intro-cn/plonk-arithmetization.md:221
msgid ""
"按照 Plonk 论文的统计，一般情况下，算术电路中加法门的数量是乘法门的两倍。如果"
"这样看来， "
msgstr ""
"按照 Plonk 论文的统计，一般情况下，算术电路中加法门的数量是乘法门的两倍。如果"
"这样看来， "

#: src/plonk-intro-cn/plonk-arithmetization.md:221
msgid " 表格的长度会三倍于 R1CS 的矩阵。但这个让步会带来更多的算术化灵活度。"
msgstr " 表格的长度会三倍于 R1CS 的矩阵。但这个让步会带来更多的算术化灵活度。"

#: src/plonk-intro-cn/plonk-arithmetization.md:223
msgid "电路验证协议框架"
msgstr "电路验证协议框架"

#: src/plonk-intro-cn/plonk-arithmetization.md:225
msgid "有了电路空白结构的描述和赋值，我们可以大致描述下 Plonk 的协议框架。"
msgstr "有了电路空白结构的描述和赋值，我们可以大致描述下 Plonk 的协议框架。"

#: src/plonk-intro-cn/plonk-arithmetization.md:227
msgid "首先 Prover 和 Verifier 会对一个共同的电路进行共识， "
msgstr "首先 Prover 和 Verifier 会对一个共同的电路进行共识， "

#: src/plonk-intro-cn/plonk-arithmetization.md:227
msgid " 。 假设电路的公开输出为 "
msgstr " 。 假设电路的公开输出为 "

#: src/plonk-intro-cn/plonk-arithmetization.md:227
#: src/plonk-intro-cn/plonk-arithmetization.md:233
#: src/plonk-intro-cn/plonk-arithmetization.md:237
#: src/plonk-intro-cn/plonk-arithmetization.md:239
#: src/plonk-intro-cn/plonk-arithmetization.md:243
#: src/plonk-intro-cn/plonk-constraints.md:116
#: src/plonk-intro-cn/plonk-constraints.md:125
msgid "99"
msgstr "99"

#: src/plonk-intro-cn/plonk-arithmetization.md:227
#: src/plonk-intro-cn/plonk-polycom.md:49
#: src/plonk-intro-cn/plonk-polycom.md:103
msgid "，而 "
msgstr "，而 "

#: src/plonk-intro-cn/plonk-arithmetization.md:227
msgid " 为秘密输入。"
msgstr " 为秘密输入。"

#: src/plonk-intro-cn/plonk-arithmetization.md:229
msgid "Prover 填写 "
msgstr "Prover 填写 "

#: src/plonk-intro-cn/plonk-arithmetization.md:229
msgid " 矩阵（Verifier 不可见）："
msgstr " 矩阵（Verifier 不可见）："

#: src/plonk-intro-cn/plonk-arithmetization.md:233
msgid "其中增加的第四行是为了增加一个额外的算术约束： "
msgstr "其中增加的第四行是为了增加一个额外的算术约束： "

#: src/plonk-intro-cn/plonk-arithmetization.md:233
msgid " ，把 "
msgstr " ，把 "

#: src/plonk-intro-cn/plonk-arithmetization.md:233
msgid " 值显示地表示在 "
msgstr " 值显示地表示在 "

#: src/plonk-intro-cn/plonk-arithmetization.md:233
msgid " 矩阵中。"
msgstr " 矩阵中。"

#: src/plonk-intro-cn/plonk-arithmetization.md:235
msgid "相应的那么 Prover 和 Verifier 共识的 "
msgstr "相应的那么 Prover 和 Verifier 共识的 "

#: src/plonk-intro-cn/plonk-arithmetization.md:235
msgid " 矩阵为"
msgstr " 矩阵为"

#: src/plonk-intro-cn/plonk-arithmetization.md:239
msgid "其中第四行约束，保证 "
msgstr "其中第四行约束，保证 "

#: src/plonk-intro-cn/plonk-arithmetization.md:239
msgid "，可以把 "
msgstr "，可以把 "

#: src/plonk-intro-cn/plonk-arithmetization.md:239
msgid " 代入下面的算术约束，可得 "
msgstr " 代入下面的算术约束，可得 "

#: src/plonk-intro-cn/plonk-arithmetization.md:239
#: src/plonk-intro-cn/plonk-lookup.md:139
msgid " ，即 "
msgstr " ，即 "

#: src/plonk-intro-cn/plonk-arithmetization.md:239
#: src/plonk-intro-cn/plonk-lagrange-basis.md:24
#: src/plonk-intro-cn/plonk-lagrange-basis.md:72
#: src/plonk-intro-cn/plonk-constraints.md:141
#: src/plonk-intro-cn/plonk-lookup.md:43 src/zk-everything/BabySNARK
#: tutorial.md:140 tutorial.md:158
msgid " 。"
msgstr " 。"

#: src/plonk-intro-cn/plonk-arithmetization.md:243
msgid "为了保证第一行的 "
msgstr "为了保证第一行的 "

#: src/plonk-intro-cn/plonk-arithmetization.md:243
msgid " 也必须为 "
msgstr " 也必须为 "

#: src/plonk-intro-cn/plonk-arithmetization.md:243
msgid "，这就需要在 "
msgstr "，这就需要在 "

#: src/plonk-intro-cn/plonk-arithmetization.md:243
msgid " 矩阵中添加额外的一条拷贝约束：让 "
msgstr " 矩阵中添加额外的一条拷贝约束：让 "

#: src/plonk-intro-cn/plonk-arithmetization.md:243
msgid " 变量的位置 "
msgstr " 变量的位置 "

#: src/plonk-intro-cn/plonk-arithmetization.md:243
msgid " 与  第四行的输出 "
msgstr " 与  第四行的输出 "

#: src/plonk-intro-cn/plonk-arithmetization.md:243
msgid " 交换对调："
msgstr " 交换对调："

#: src/plonk-intro-cn/plonk-arithmetization.md:247
msgid "如果 Prover 是诚实的，那么对于 "
msgstr "如果 Prover 是诚实的，那么对于 "

#: src/plonk-intro-cn/plonk-arithmetization.md:247
msgid "，下面的算术约束等式成立："
msgstr "，下面的算术约束等式成立："

#: src/plonk-intro-cn/plonk-arithmetization.md:251
msgid "验证协议的大概思路如下："
msgstr "验证协议的大概思路如下："

#: src/plonk-intro-cn/plonk-arithmetization.md:253
msgid "协议开始：Prover 如实填写 "
msgstr "协议开始：Prover 如实填写 "

#: src/plonk-intro-cn/plonk-arithmetization.md:253
msgid " 表格，然后把 "
msgstr " 表格，然后把 "

#: src/plonk-intro-cn/plonk-arithmetization.md:253
msgid ""
" 表格的每一列进行编码，并进行多项式编码，并把编码后的结果发送给 Verifier"
msgstr ""
" 表格的每一列进行编码，并进行多项式编码，并把编码后的结果发送给 Verifier"

#: src/plonk-intro-cn/plonk-arithmetization.md:255
msgid ""
"协议验证阶段：Verifier 与 Prover 通过进一步的交互，验证下面的等式是否成立："
msgstr ""
"协议验证阶段：Verifier 与 Prover 通过进一步的交互，验证下面的等式是否成立："

#: src/plonk-intro-cn/plonk-arithmetization.md:257
#: src/plonk-intro-cn/plonk-arithmetization.md:259
#: src/plonk-intro-cn/plonk-lagrange-basis.md:10
#: src/plonk-intro-cn/plonk-lagrange-basis.md:18
#: src/plonk-intro-cn/plonk-lagrange-basis.md:20
#: src/plonk-intro-cn/plonk-lagrange-basis.md:28
#: src/plonk-intro-cn/plonk-lagrange-basis.md:30
#: src/plonk-intro-cn/plonk-lagrange-basis.md:34
#: src/plonk-intro-cn/plonk-lagrange-basis.md:36
#: src/plonk-intro-cn/plonk-lagrange-basis.md:38
#: src/plonk-intro-cn/plonk-lagrange-basis.md:40
#: src/plonk-intro-cn/plonk-lagrange-basis.md:42
#: src/plonk-intro-cn/plonk-lagrange-basis.md:46
#: src/plonk-intro-cn/plonk-lagrange-basis.md:52
#: src/plonk-intro-cn/plonk-lagrange-basis.md:54
#: src/plonk-intro-cn/plonk-lagrange-basis.md:58
#: src/plonk-intro-cn/plonk-lagrange-basis.md:60
#: src/plonk-intro-cn/plonk-lagrange-basis.md:62
#: src/plonk-intro-cn/plonk-lagrange-basis.md:64
#: src/plonk-intro-cn/plonk-lagrange-basis.md:68
#: src/plonk-intro-cn/plonk-lagrange-basis.md:101
#: src/plonk-intro-cn/plonk-lagrange-basis.md:105
#: src/plonk-intro-cn/plonk-lagrange-basis.md:109
#: src/plonk-intro-cn/plonk-lagrange-basis.md:111
#: src/plonk-intro-cn/plonk-lagrange-basis.md:113
#: src/plonk-intro-cn/plonk-lagrange-basis.md:115
#: src/plonk-intro-cn/plonk-lagrange-basis.md:117
#: src/plonk-intro-cn/plonk-lagrange-basis.md:119
#: src/plonk-intro-cn/plonk-lagrange-basis.md:121
#: src/plonk-intro-cn/plonk-lagrange-basis.md:129
#: src/plonk-intro-cn/plonk-lagrange-basis.md:131
#: src/plonk-intro-cn/plonk-lagrange-basis.md:135
#: src/plonk-intro-cn/plonk-lagrange-basis.md:137
#: src/plonk-intro-cn/plonk-lagrange-basis.md:139
#: src/plonk-intro-cn/plonk-lagrange-basis.md:143
#: src/plonk-intro-cn/plonk-lagrange-basis.md:147
#: src/plonk-intro-cn/plonk-lagrange-basis.md:149
#: src/plonk-intro-cn/plonk-lagrange-basis.md:151
#: src/plonk-intro-cn/plonk-lagrange-basis.md:153
#: src/plonk-intro-cn/plonk-lagrange-basis.md:172
#: src/plonk-intro-cn/plonk-permutation.md:76
#: src/plonk-intro-cn/plonk-permutation.md:80
#: src/plonk-intro-cn/plonk-permutation.md:84
#: src/plonk-intro-cn/plonk-permutation.md:92
#: src/plonk-intro-cn/plonk-permutation.md:96
#: src/plonk-intro-cn/plonk-permutation.md:98
#: src/plonk-intro-cn/plonk-permutation.md:110
#: src/plonk-intro-cn/plonk-permutation.md:112
#: src/plonk-intro-cn/plonk-permutation.md:114
#: src/plonk-intro-cn/plonk-permutation.md:116
#: src/plonk-intro-cn/plonk-permutation.md:142
#: src/plonk-intro-cn/plonk-permutation.md:190
#: src/plonk-intro-cn/plonk-permutation.md:192
#: src/plonk-intro-cn/plonk-permutation.md:196
#: src/plonk-intro-cn/plonk-permutation.md:202
#: src/plonk-intro-cn/plonk-permutation.md:204
#: src/plonk-intro-cn/plonk-permutation.md:206
#: src/plonk-intro-cn/plonk-permutation.md:208
#: src/plonk-intro-cn/plonk-constraints.md:27
#: src/plonk-intro-cn/plonk-constraints.md:75
#: src/plonk-intro-cn/plonk-constraints.md:77
#: src/plonk-intro-cn/plonk-constraints.md:81
#: src/plonk-intro-cn/plonk-constraints.md:85
#: src/plonk-intro-cn/plonk-constraints.md:103
#: src/plonk-intro-cn/plonk-constraints.md:127
#: src/plonk-intro-cn/plonk-constraints.md:129
#: src/plonk-intro-cn/plonk-constraints.md:133
#: src/plonk-intro-cn/plonk-constraints.md:141
#: src/plonk-intro-cn/plonk-constraints.md:143
#: src/plonk-intro-cn/plonk-constraints.md:149
#: src/plonk-intro-cn/plonk-constraints.md:151
#: src/plonk-intro-cn/plonk-constraints.md:159
#: src/plonk-intro-cn/plonk-constraints.md:161
#: src/plonk-intro-cn/plonk-constraints.md:163
#: src/plonk-intro-cn/plonk-constraints.md:167
#: src/plonk-intro-cn/plonk-constraints.md:169
#: src/plonk-intro-cn/plonk-constraints.md:173
#: src/plonk-intro-cn/plonk-constraints.md:175
#: src/plonk-intro-cn/plonk-constraints.md:179
#: src/plonk-intro-cn/plonk-constraints.md:181
#: src/plonk-intro-cn/plonk-polycom.md:21
#: src/plonk-intro-cn/plonk-polycom.md:23
#: src/plonk-intro-cn/plonk-polycom.md:35
#: src/plonk-intro-cn/plonk-polycom.md:37
#: src/plonk-intro-cn/plonk-polycom.md:51
#: src/plonk-intro-cn/plonk-polycom.md:53
#: src/plonk-intro-cn/plonk-polycom.md:55
#: src/plonk-intro-cn/plonk-polycom.md:61
#: src/plonk-intro-cn/plonk-polycom.md:65
#: src/plonk-intro-cn/plonk-polycom.md:67
#: src/plonk-intro-cn/plonk-polycom.md:69
#: src/plonk-intro-cn/plonk-polycom.md:71
#: src/plonk-intro-cn/plonk-polycom.md:73
#: src/plonk-intro-cn/plonk-polycom.md:75
#: src/plonk-intro-cn/plonk-polycom.md:79
#: src/plonk-intro-cn/plonk-polycom.md:81
#: src/plonk-intro-cn/plonk-polycom.md:87
#: src/plonk-intro-cn/plonk-polycom.md:89
#: src/plonk-intro-cn/plonk-polycom.md:91
#: src/plonk-intro-cn/plonk-polycom.md:93
#: src/plonk-intro-cn/plonk-polycom.md:97
#: src/plonk-intro-cn/plonk-polycom.md:99
#: src/plonk-intro-cn/plonk-polycom.md:101
#: src/plonk-intro-cn/plonk-polycom.md:103
#: src/plonk-intro-cn/plonk-polycom.md:126
#: src/plonk-intro-cn/plonk-polycom.md:132
#: src/plonk-intro-cn/plonk-polycom.md:141
#: src/plonk-intro-cn/plonk-polycom.md:143
#: src/plonk-intro-cn/plonk-polycom.md:151
#: src/plonk-intro-cn/plonk-polycom.md:157
#: src/plonk-intro-cn/plonk-polycom.md:159
#: src/plonk-intro-cn/plonk-polycom.md:167
#: src/plonk-intro-cn/plonk-polycom.md:169
#: src/plonk-intro-cn/plonk-polycom.md:179
#: src/plonk-intro-cn/plonk-polycom.md:181
#: src/plonk-intro-cn/plonk-polycom.md:185
#: src/plonk-intro-cn/plonk-polycom.md:193
#: src/plonk-intro-cn/plonk-polycom.md:199
#: src/plonk-intro-cn/plonk-polycom.md:201
#: src/plonk-intro-cn/plonk-polycom.md:203
#: src/plonk-intro-cn/plonk-polycom.md:209
#: src/plonk-intro-cn/plonk-polycom.md:211
#: src/plonk-intro-cn/plonk-polycom.md:213
#: src/plonk-intro-cn/plonk-polycom.md:215
#: src/plonk-intro-cn/plonk-polycom.md:223
#: src/plonk-intro-cn/plonk-randomizing.md:6
#: src/plonk-intro-cn/plonk-randomizing.md:9
#: src/plonk-intro-cn/plonk-randomizing.md:15
#: src/plonk-intro-cn/plonk-randomizing.md:17
#: src/plonk-intro-cn/plonk-randomizing.md:18
#: src/plonk-intro-cn/plonk-randomizing.md:19
#: src/plonk-intro-cn/plonk-randomizing.md:21
#: src/plonk-intro-cn/plonk-randomizing.md:31
#: src/plonk-intro-cn/plonk-randomizing.md:33
#: src/plonk-intro-cn/plonk-randomizing.md:39
#: src/plonk-intro-cn/plonk-randomizing.md:41
#: src/plonk-intro-cn/plonk-randomizing.md:45
#: src/plonk-intro-cn/plonk-randomizing.md:47
#: src/plonk-intro-cn/plonk-randomizing.md:49
#: src/plonk-intro-cn/plonk-randomizing.md:51
#: src/plonk-intro-cn/plonk-randomizing.md:53
#: src/plonk-intro-cn/plonk-randomizing.md:55
#: src/plonk-intro-cn/plonk-randomizing.md:57
#: src/plonk-intro-cn/plonk-randomizing.md:59
#: src/plonk-intro-cn/plonk-randomizing.md:61
#: src/plonk-intro-cn/plonk-randomizing.md:63
#: src/plonk-intro-cn/plonk-randomizing.md:65
#: src/plonk-intro-cn/plonk-randomizing.md:69
#: src/plonk-intro-cn/plonk-randomizing.md:71
#: src/plonk-intro-cn/plonk-randomizing.md:73
#: src/plonk-intro-cn/plonk-randomizing.md:85
#: src/plonk-intro-cn/plonk-randomizing.md:86
#: src/plonk-intro-cn/plonk-randomizing.md:88
#: src/plonk-intro-cn/plonk-randomizing.md:90
#: src/plonk-intro-cn/plonk-randomizing.md:92
#: src/plonk-intro-cn/plonk-randomizing.md:93
#: src/plonk-intro-cn/plonk-randomizing.md:95
#: src/plonk-intro-cn/plonk-randomizing.md:97
#: src/plonk-intro-cn/plonk-randomizing.md:127
#: src/plonk-intro-cn/plonk-randomizing.md:129
#: src/plonk-intro-cn/plonk-randomizing.md:133
#: src/plonk-intro-cn/plonk-randomizing.md:143
#: src/plonk-intro-cn/plonk-randomizing.md:145
#: src/plonk-intro-cn/plonk-randomizing.md:151
#: src/plonk-intro-cn/plonk-randomizing.md:153
#: src/plonk-intro-cn/plonk-randomizing.md:155
#: src/plonk-intro-cn/plonk-randomizing.md:159
#: src/plonk-intro-cn/plonk-randomizing.md:161
#: src/plonk-intro-cn/plonk-randomizing.md:163
#: src/plonk-intro-cn/plonk-lookup.md:57 src/plonk-intro-cn/plonk-lookup.md:59
#: src/plonk-intro-cn/plonk-lookup.md:63 src/plonk-intro-cn/plonk-lookup.md:67
#: src/plonk-intro-cn/plonk-lookup.md:69 src/plonk-intro-cn/plonk-lookup.md:79
#: src/plonk-intro-cn/plonk-lookup.md:81 src/plonk-intro-cn/plonk-lookup.md:85
#: src/plonk-intro-cn/plonk-lookup.md:87 src/plonk-intro-cn/plonk-lookup.md:91
#: src/plonk-intro-cn/plonk-lookup.md:93 src/plonk-intro-cn/plonk-lookup.md:101
#: src/plonk-intro-cn/plonk-lookup.md:194
#: src/plonk-intro-cn/plonk-lookup.md:196
#: src/plonk-intro-cn/plonk-lookup.md:198
#: src/plonk-intro-cn/plonk-lookup.md:200
#: src/plonk-intro-cn/plonk-lookup.md:232
#: src/plonk-intro-cn/plonk-lookup.md:234
#: src/plonk-intro-cn/plonk-lookup.md:238
#: src/plonk-intro-cn/plonk-lookup.md:265
#: src/plonk-intro-cn/plonk-lookup.md:267
#: src/plonk-intro-cn/plonk-lookup.md:269
#: src/plonk-intro-cn/plonk-lookup.md:273
#: src/plonk-intro-cn/plonk-lookup.md:279
#: src/plonk-intro-cn/plonk-lookup.md:283
#: src/plonk-intro-cn/plonk-lookup.md:285
#: src/plonk-intro-cn/plonk-lookup.md:289
#: src/plonk-intro-cn/plonk-lookup.md:291
#: src/plonk-intro-cn/plonk-lookup.md:293
#: src/plonk-intro-cn/plonk-lookup.md:297
#: src/plonk-intro-cn/plonk-lookup.md:302
#: src/plonk-intro-cn/plonk-lookup.md:304
#: src/zk-snarks/4-Construction-Properties.md:170
#: src/zk-snarks/4-Construction-Properties.md:171
#: src/zk-snarks/4-Construction-Properties.md:172
#: src/zk-everything/zk-learning-miles/KZG.md:41
#: src/zk-everything/zk-learning-miles/KZG.md:106
#: src/zk-everything/zk-learning-miles/KZG.md:110
#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:269 SNARKs.md:270 SNARKs.md:284 SNARKs.md:310 SNARKs.md:324
#: SNARKs.md:379 SNARKs.md:403 SNARKs.md:407 SNARKs.md:408
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:390
#: src/zk-everything/zk-everything-joe/Hyrax.md:122
#: src/zk-everything/zk-everything-joe/Hyrax.md:195
#: src/zk-everything/zk-everything-joe/Hyrax.md:201
#: src/zk-everything/zk-everything-joe/Hyrax.md:203
#: src/zk-everything/zk-everything-joe/Hyrax.md:208
#: src/zk-everything/zk-everything-joe/Hyrax.md:223
#: src/zk-everything/zk-everything-joe/Hyrax.md:228 src/public
#: goods/第二章.md:80 goods/第二章.md:84 goods/第二章.md:86
#: goods/第二章.md:88 goods/第二章.md:89 goods/第二章.md:91
#: goods/第二章.md:103 goods/第二章.md:147 goods/第二章.md:160
#: goods/第二章.md:162 goods/第二章.md:164 goods/第二章.md:175
#: goods/4-Proving-System.md:106 goods/4-Proving-System.md:126
#: goods/4-Proving-System.md:151
msgid "X"
msgstr "X"

#: src/plonk-intro-cn/plonk-arithmetization.md:259
msgid "当然这个验证还不够，还要验证 "
msgstr "当然这个验证还不够，还要验证 "

#: src/plonk-intro-cn/plonk-arithmetization.md:259
#: src/plonk-intro-cn/plonk-permutation.md:13
#: src/plonk-intro-cn/plonk-permutation.md:122
#: src/plonk-intro-cn/plonk-permutation.md:142
#: src/plonk-intro-cn/plonk-permutation.md:146
#: src/plonk-intro-cn/plonk-permutation.md:164
#: src/plonk-intro-cn/plonk-permutation.md:182
#: src/plonk-intro-cn/plonk-permutation.md:188
#: src/plonk-intro-cn/plonk-permutation.md:190
#: src/plonk-intro-cn/plonk-permutation.md:192
#: src/plonk-intro-cn/plonk-permutation.md:194
#: src/plonk-intro-cn/plonk-permutation.md:202
#: src/plonk-intro-cn/plonk-permutation.md:208
#: src/plonk-intro-cn/plonk-constraints.md:7
#: src/plonk-intro-cn/plonk-constraints.md:11
#: src/plonk-intro-cn/plonk-constraints.md:37
#: src/plonk-intro-cn/plonk-constraints.md:69
#: src/plonk-intro-cn/plonk-constraints.md:165
#: src/plonk-intro-cn/plonk-polycom.md:91
#: src/plonk-intro-cn/plonk-randomizing.md:15
#: src/plonk-intro-cn/plonk-randomizing.md:112
#: src/plonk-intro-cn/plonk-randomizing.md:127
#: src/plonk-intro-cn/plonk-lookup.md:83 src/plonk-intro-cn/plonk-lookup.md:119
#: src/plonk-intro-cn/plonk-lookup.md:123
#: src/plonk-intro-cn/plonk-lookup.md:127
#: src/plonk-intro-cn/plonk-lookup.md:161
#: src/plonk-intro-cn/plonk-lookup.md:167
#: src/plonk-intro-cn/plonk-lookup.md:206
#: src/plonk-intro-cn/plonk-lookup.md:208
#: src/plonk-intro-cn/plonk-lookup.md:226
#: src/plonk-intro-cn/plonk-lookup.md:273
#: src/plonk-intro-cn/plonk-lookup.md:279
#: src/plonk-intro-cn/plonk-lookup.md:281
#: src/plonk-intro-cn/plonk-lookup.md:306
msgid " 与 "
msgstr " 与 "

#: src/plonk-intro-cn/plonk-arithmetization.md:259
msgid ""
" 之间的关系。还有，Verifier 如何通过多项式来验证电路的运算，请看后续章节。"
msgstr ""
" 之间的关系。还有，Verifier 如何通过多项式来验证电路的运算，请看后续章节。"

#: src/plonk-intro-cn/plonk-arithmetization.md:263
msgid ""
"\\[BG12\\] Bayer, Stephanie, and Jens Groth. \"Efficient zero-knowledge "
"argument for correctness of a shuffle.\" _Annual International Conference on "
"the Theory and Applications of Cryptographic Techniques_. Springer, Berlin, "
"Heidelberg, 2012."
msgstr ""
"\\[BG12\\] Bayer, Stephanie, and Jens Groth. \"Efficient zero-knowledge "
"argument for correctness of a shuffle.\" _Annual International Conference on "
"the Theory and Applications of Cryptographic Techniques_. Springer, Berlin, "
"Heidelberg, 2012."

#: src/plonk-intro-cn/plonk-arithmetization.md:264
msgid ""
"\\[GWC19\\] Ariel Gabizon, Zachary J. Williamson, and Oana Ciobotaru. "
"\"Plonk: Permutations over lagrange-bases for oecumenical noninteractive "
"arguments of knowledge.\" _Cryptology ePrint Archive_ (2019)."
msgstr ""
"\\[GWC19\\] Ariel Gabizon, Zachary J. Williamson, and Oana Ciobotaru. "
"\"Plonk: Permutations over lagrange-bases for oecumenical noninteractive "
"arguments of knowledge.\" _Cryptology ePrint Archive_ (2019)."

#: src/plonk-intro-cn/plonk-lagrange-basis.md:3
msgid "理解 PLONK（二）：多项式编码"
msgstr "理解 PLONK（二）：多项式编码"

#: src/plonk-intro-cn/plonk-lagrange-basis.md:6
msgid ""
"在上篇文章里，我们可以把电路的计算的「合法性检查」转换成一组加法/乘法约束。假"
"如总共有 N 个约束，那么Prover 可以通过多项式编码的方式把多个约束压缩成一个约"
"束，让 Verifier 轻松检查。"
msgstr ""
"在上篇文章里，我们可以把电路的计算的「合法性检查」转换成一组加法/乘法约束。假"
"如总共有 N 个约束，那么Prover 可以通过多项式编码的方式把多个约束压缩成一个约"
"束，让 Verifier 轻松检查。"

#: src/plonk-intro-cn/plonk-lagrange-basis.md:8
msgid "多项式的概率检查"
msgstr "多项式的概率检查"

#: src/plonk-intro-cn/plonk-lagrange-basis.md:10
msgid "把多个约束验证合并的神奇能力来自于「多项式随机挑战」。如果有两个多项式 "
msgstr ""
"把多个约束验证合并的神奇能力来自于「多项式随机挑战」。如果有两个多项式 "

#: src/plonk-intro-cn/plonk-lagrange-basis.md:10
#: src/plonk-intro-cn/plonk-lagrange-basis.md:58
#: src/plonk-intro-cn/plonk-lagrange-basis.md:60
#: src/plonk-intro-cn/plonk-lagrange-basis.md:62
#: src/plonk-intro-cn/plonk-lagrange-basis.md:117
#: src/plonk-intro-cn/plonk-lagrange-basis.md:119
#: src/plonk-intro-cn/plonk-lagrange-basis.md:121
#: src/plonk-intro-cn/plonk-permutation.md:202
#: src/plonk-intro-cn/plonk-permutation.md:204
#: src/plonk-intro-cn/plonk-permutation.md:206
#: src/plonk-intro-cn/plonk-constraints.md:69
#: src/plonk-intro-cn/plonk-constraints.md:71
#: src/plonk-intro-cn/plonk-constraints.md:75
#: src/plonk-intro-cn/plonk-constraints.md:77
#: src/plonk-intro-cn/plonk-constraints.md:81
#: src/plonk-intro-cn/plonk-constraints.md:85
#: src/plonk-intro-cn/plonk-constraints.md:89
#: src/plonk-intro-cn/plonk-constraints.md:93
#: src/plonk-intro-cn/plonk-constraints.md:95
#: src/plonk-intro-cn/plonk-constraints.md:103
#: src/plonk-intro-cn/plonk-constraints.md:169
#: src/plonk-intro-cn/plonk-constraints.md:175
#: src/plonk-intro-cn/plonk-constraints.md:179
#: src/plonk-intro-cn/plonk-constraints.md:191
#: src/plonk-intro-cn/plonk-constraints.md:199
#: src/plonk-intro-cn/plonk-polycom.md:21
#: src/plonk-intro-cn/plonk-polycom.md:23
#: src/plonk-intro-cn/plonk-polycom.md:35
#: src/plonk-intro-cn/plonk-polycom.md:37
#: src/plonk-intro-cn/plonk-polycom.md:51
#: src/plonk-intro-cn/plonk-polycom.md:53
#: src/plonk-intro-cn/plonk-polycom.md:55
#: src/plonk-intro-cn/plonk-polycom.md:61
#: src/plonk-intro-cn/plonk-polycom.md:63
#: src/plonk-intro-cn/plonk-polycom.md:65
#: src/plonk-intro-cn/plonk-polycom.md:67
#: src/plonk-intro-cn/plonk-polycom.md:69
#: src/plonk-intro-cn/plonk-polycom.md:71
#: src/plonk-intro-cn/plonk-polycom.md:73
#: src/plonk-intro-cn/plonk-polycom.md:75
#: src/plonk-intro-cn/plonk-polycom.md:79
#: src/plonk-intro-cn/plonk-polycom.md:81
#: src/plonk-intro-cn/plonk-polycom.md:87
#: src/plonk-intro-cn/plonk-polycom.md:89
#: src/plonk-intro-cn/plonk-polycom.md:91
#: src/plonk-intro-cn/plonk-polycom.md:93
#: src/plonk-intro-cn/plonk-polycom.md:103
#: src/plonk-intro-cn/plonk-polycom.md:124
#: src/plonk-intro-cn/plonk-polycom.md:126
#: src/plonk-intro-cn/plonk-polycom.md:128
#: src/plonk-intro-cn/plonk-polycom.md:132
#: src/plonk-intro-cn/plonk-polycom.md:134
#: src/plonk-intro-cn/plonk-polycom.md:141
#: src/plonk-intro-cn/plonk-polycom.md:143
#: src/plonk-intro-cn/plonk-polycom.md:147
#: src/plonk-intro-cn/plonk-polycom.md:151
#: src/plonk-intro-cn/plonk-polycom.md:155
#: src/plonk-intro-cn/plonk-polycom.md:161
#: src/plonk-intro-cn/plonk-polycom.md:163
#: src/plonk-intro-cn/plonk-polycom.md:167
#: src/plonk-intro-cn/plonk-polycom.md:169
#: src/plonk-intro-cn/plonk-polycom.md:171
#: src/plonk-intro-cn/plonk-polycom.md:175
#: src/plonk-intro-cn/plonk-polycom.md:179
#: src/plonk-intro-cn/plonk-polycom.md:181
#: src/plonk-intro-cn/plonk-polycom.md:183
#: src/plonk-intro-cn/plonk-polycom.md:185
#: src/plonk-intro-cn/plonk-polycom.md:189
#: src/plonk-intro-cn/plonk-polycom.md:193
#: src/plonk-intro-cn/plonk-polycom.md:197
#: src/plonk-intro-cn/plonk-polycom.md:199
#: src/plonk-intro-cn/plonk-polycom.md:201
#: src/plonk-intro-cn/plonk-polycom.md:205
#: src/plonk-intro-cn/plonk-polycom.md:209
#: src/plonk-intro-cn/plonk-polycom.md:211
#: src/plonk-intro-cn/plonk-polycom.md:213
#: src/plonk-intro-cn/plonk-polycom.md:217
#: src/plonk-intro-cn/plonk-polycom.md:221
#: src/plonk-intro-cn/plonk-polycom.md:225
#: src/plonk-intro-cn/plonk-randomizing.md:6
#: src/plonk-intro-cn/plonk-randomizing.md:9
#: src/plonk-intro-cn/plonk-randomizing.md:101
#: src/plonk-intro-cn/plonk-randomizing.md:106
#: src/plonk-intro-cn/plonk-randomizing.md:110
#: src/plonk-intro-cn/plonk-randomizing.md:143
#: src/plonk-intro-cn/plonk-randomizing.md:149
#: src/plonk-intro-cn/plonk-randomizing.md:151
#: src/plonk-intro-cn/plonk-randomizing.md:153
#: src/plonk-intro-cn/plonk-randomizing.md:155
#: src/plonk-intro-cn/plonk-randomizing.md:159
#: src/plonk-intro-cn/plonk-lookup.md:41 src/plonk-intro-cn/plonk-lookup.md:43
#: src/plonk-intro-cn/plonk-lookup.md:45 src/plonk-intro-cn/plonk-lookup.md:47
#: src/plonk-intro-cn/plonk-lookup.md:49 src/plonk-intro-cn/plonk-lookup.md:53
#: src/plonk-intro-cn/plonk-lookup.md:55 src/plonk-intro-cn/plonk-lookup.md:57
#: src/plonk-intro-cn/plonk-lookup.md:59 src/plonk-intro-cn/plonk-lookup.md:61
#: src/plonk-intro-cn/plonk-lookup.md:63 src/plonk-intro-cn/plonk-lookup.md:65
#: src/plonk-intro-cn/plonk-lookup.md:67 src/plonk-intro-cn/plonk-lookup.md:77
#: src/plonk-intro-cn/plonk-lookup.md:81 src/plonk-intro-cn/plonk-lookup.md:87
#: src/plonk-intro-cn/plonk-lookup.md:93 src/plonk-intro-cn/plonk-lookup.md:97
#: src/plonk-intro-cn/plonk-lookup.md:101
#: src/plonk-intro-cn/plonk-lookup.md:107
#: src/plonk-intro-cn/plonk-lookup.md:109
#: src/plonk-intro-cn/plonk-lookup.md:111
#: src/plonk-intro-cn/plonk-lookup.md:113
#: src/plonk-intro-cn/plonk-lookup.md:115
#: src/plonk-intro-cn/plonk-lookup.md:117
#: src/plonk-intro-cn/plonk-lookup.md:125
#: src/plonk-intro-cn/plonk-lookup.md:127
#: src/plonk-intro-cn/plonk-lookup.md:129
#: src/plonk-intro-cn/plonk-lookup.md:131
#: src/plonk-intro-cn/plonk-lookup.md:133
#: src/plonk-intro-cn/plonk-lookup.md:135
#: src/plonk-intro-cn/plonk-lookup.md:137
#: src/plonk-intro-cn/plonk-lookup.md:139
#: src/plonk-intro-cn/plonk-lookup.md:141
#: src/plonk-intro-cn/plonk-lookup.md:145
#: src/plonk-intro-cn/plonk-lookup.md:149
#: src/plonk-intro-cn/plonk-lookup.md:153
#: src/plonk-intro-cn/plonk-lookup.md:157
#: src/plonk-intro-cn/plonk-lookup.md:161
#: src/plonk-intro-cn/plonk-lookup.md:167
#: src/plonk-intro-cn/plonk-lookup.md:173
#: src/plonk-intro-cn/plonk-lookup.md:175
#: src/plonk-intro-cn/plonk-lookup.md:200
#: src/plonk-intro-cn/plonk-lookup.md:212
#: src/plonk-intro-cn/plonk-lookup.md:214
#: src/plonk-intro-cn/plonk-lookup.md:216
#: src/plonk-intro-cn/plonk-lookup.md:220
#: src/plonk-intro-cn/plonk-lookup.md:226
#: src/plonk-intro-cn/plonk-lookup.md:238
#: src/plonk-intro-cn/plonk-lookup.md:244
#: src/plonk-intro-cn/plonk-lookup.md:251
#: src/plonk-intro-cn/plonk-lookup.md:261
#: src/plonk-intro-cn/plonk-lookup.md:273
#: src/plonk-intro-cn/plonk-lookup.md:275
#: src/plonk-intro-cn/plonk-lookup.md:297
#: src/plonk-intro-cn/plonk-lookup.md:304
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:26
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:64
#: src/zk-snarks/3-General-Purpose-Computation.md:39
#: src/zk-snarks/3-General-Purpose-Computation.md:41
#: src/zk-snarks/3-General-Purpose-Computation.md:42
#: src/zk-snarks/4-Construction-Properties.md:85
#: src/zk-snarks/4-Construction-Properties.md:271
#: src/zk-snarks/4-Construction-Properties.md:304
#: src/zk-snarks/5-Pinocchio-Protocol.md:187
#: src/zk-snarks/5-Pinocchio-Protocol.md:198
#: src/halo2/tmp/2-Fibonacci-example-1.md:19
#: src/halo2/tmp/2-Fibonacci-example-1.md:275
#: src/halo2/tmp/3-Fibonacci-example-2.md:189
#: src/halo2/tmp/3-Fibonacci-example-2.md:393 src/halo2/tmp/9-decomposed.md:130
#: src/zk-everything/zk-learning-miles/KZG.md:41
#: src/zk-everything/zk-learning-miles/KZG.md:45
#: src/zk-everything/zk-learning-miles/KZG.md:142
#: src/zk-everything/zk-learning-miles/KZG.md:145
#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:242 SNARKs.md:244 SNARKs.md:254 SNARKs.md:258 SNARKs.md:261
#: SNARKs.md:263 SNARKs.md:269 SNARKs.md:272 SNARKs.md:273 SNARKs.md:276
#: SNARKs.md:284 SNARKs.md:296 SNARKs.md:302 SNARKs.md:310 SNARKs.md:312
#: SNARKs.md:316 SNARKs.md:320 SNARKs.md:324 SNARKs.md:342 SNARKs.md:383
#: SNARKs.md:387 SNARKs.md:390 SNARKs.md:398 SNARKs.md:407 SNARKs.md:408
#: SNARKs.md:410 SNARKs.md:412 SNARKs.md:414
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:162
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:204
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:246
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:292
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:336
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:418
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:424
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:428
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:430
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:434
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:436
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:442
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:446
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:448
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:452
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:454
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:460
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:497
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:500
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:506
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:512
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:514
#: src/zk-everything/zk-everything-joe/Hyrax.md:133
#: src/zk-everything/zk-everything-joe/Hyrax.md:134
#: src/zk-everything/zk-everything-joe/Hyrax.md:140
#: src/zk-everything/zk-everything-joe/Hyrax.md:142
#: src/zk-everything/zk-everything-joe/Spartan.md:377 src/public
#: goods/第二章.md:89 goods/第二章.md:91 goods/第二章.md:146
#: goods/第二章.md:147 goods/第二章.md:162 goods/第二章.md:164
#: goods/第二章.md:169 goods/第二章.md:170 goods/第二章.md:171
#: goods/第二章.md:175 goods/第二章.md:177
msgid "f"
msgstr "f"

#: src/plonk-intro-cn/plonk-lagrange-basis.md:10
#: src/plonk-intro-cn/plonk-lagrange-basis.md:76
#: src/plonk-intro-cn/plonk-lagrange-basis.md:91
#: src/plonk-intro-cn/plonk-lagrange-basis.md:123
#: src/plonk-intro-cn/plonk-lagrange-basis.md:161
#: src/plonk-intro-cn/plonk-lagrange-basis.md:172
#: src/plonk-intro-cn/plonk-constraints.md:69
#: src/plonk-intro-cn/plonk-constraints.md:71
#: src/plonk-intro-cn/plonk-constraints.md:75
#: src/plonk-intro-cn/plonk-constraints.md:77
#: src/plonk-intro-cn/plonk-constraints.md:81
#: src/plonk-intro-cn/plonk-constraints.md:85
#: src/plonk-intro-cn/plonk-constraints.md:89
#: src/plonk-intro-cn/plonk-constraints.md:93
#: src/plonk-intro-cn/plonk-constraints.md:95
#: src/plonk-intro-cn/plonk-constraints.md:103
#: src/plonk-intro-cn/plonk-constraints.md:155
#: src/plonk-intro-cn/plonk-constraints.md:169
#: src/plonk-intro-cn/plonk-constraints.md:175
#: src/plonk-intro-cn/plonk-constraints.md:179
#: src/plonk-intro-cn/plonk-constraints.md:192
#: src/plonk-intro-cn/plonk-constraints.md:199
#: src/plonk-intro-cn/plonk-polycom.md:67
#: src/plonk-intro-cn/plonk-polycom.md:69
#: src/plonk-intro-cn/plonk-polycom.md:91
#: src/plonk-intro-cn/plonk-polycom.md:93
#: src/plonk-intro-cn/plonk-polycom.md:97
#: src/plonk-intro-cn/plonk-polycom.md:107
#: src/plonk-intro-cn/plonk-polycom.md:109
#: src/plonk-intro-cn/plonk-polycom.md:111
#: src/plonk-intro-cn/plonk-polycom.md:113
#: src/plonk-intro-cn/plonk-polycom.md:134
#: src/plonk-intro-cn/plonk-polycom.md:136
#: src/plonk-intro-cn/plonk-polycom.md:141
#: src/plonk-intro-cn/plonk-polycom.md:143
#: src/plonk-intro-cn/plonk-polycom.md:147
#: src/plonk-intro-cn/plonk-polycom.md:151
#: src/plonk-intro-cn/plonk-polycom.md:155
#: src/plonk-intro-cn/plonk-polycom.md:157
#: src/plonk-intro-cn/plonk-polycom.md:161
#: src/plonk-intro-cn/plonk-polycom.md:163
#: src/plonk-intro-cn/plonk-polycom.md:167
#: src/plonk-intro-cn/plonk-polycom.md:169
#: src/plonk-intro-cn/plonk-polycom.md:171
#: src/plonk-intro-cn/plonk-polycom.md:175
#: src/plonk-intro-cn/plonk-polycom.md:179
#: src/plonk-intro-cn/plonk-polycom.md:183
#: src/plonk-intro-cn/plonk-polycom.md:185
#: src/plonk-intro-cn/plonk-polycom.md:193
#: src/plonk-intro-cn/plonk-polycom.md:197
#: src/plonk-intro-cn/plonk-polycom.md:199
#: src/plonk-intro-cn/plonk-polycom.md:201
#: src/plonk-intro-cn/plonk-polycom.md:211
#: src/plonk-intro-cn/plonk-polycom.md:217
#: src/plonk-intro-cn/plonk-randomizing.md:19
#: src/plonk-intro-cn/plonk-randomizing.md:59
#: src/plonk-intro-cn/plonk-randomizing.md:61
#: src/plonk-intro-cn/plonk-randomizing.md:65
#: src/plonk-intro-cn/plonk-randomizing.md:69
#: src/plonk-intro-cn/plonk-randomizing.md:101
#: src/plonk-intro-cn/plonk-randomizing.md:106
#: src/plonk-intro-cn/plonk-randomizing.md:110
#: src/plonk-intro-cn/plonk-lookup.md:33 src/plonk-intro-cn/plonk-lookup.md:285
#: src/plonk-intro-cn/plonk-lookup.md:289
#: src/plonk-intro-cn/plonk-lookup.md:293
#: src/plonk-intro-cn/plonk-lookup.md:297
#: src/plonk-intro-cn/plonk-lookup.md:304
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:24
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:27
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:279
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:282
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:283
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:308
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:313
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:324
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:326
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:332
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:333
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:334
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:335
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:337
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:341
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:342
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:343
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:346
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:348
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:357
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:22
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:26
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:29
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:30
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:32
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:34
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:35
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:66
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:67
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:68
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:76
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:79
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:81
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:82
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:85
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:92
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:108
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:111
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:112
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:116
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:122
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:123
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:126
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:128
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:132
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:149
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:151
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:152
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:164
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:169
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:170
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:172
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:175
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:176
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:177
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:183
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:185
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:188
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:189
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:191
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:194
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:196
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:197
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:198
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:207
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:209
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:211
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:213
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:215
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:229
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:231
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:232
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:235
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:237
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:243
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:247
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:264
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:265
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:266
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:271
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:272
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:274
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:277
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:279
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:280
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:281
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:282
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:283
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:286
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:287
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:289
#: src/zk-snarks/3-General-Purpose-Computation.md:104
#: src/zk-snarks/3-General-Purpose-Computation.md:108
#: src/zk-snarks/3-General-Purpose-Computation.md:112
#: src/zk-snarks/3-General-Purpose-Computation.md:231
#: src/zk-snarks/3-General-Purpose-Computation.md:237
#: src/zk-snarks/3-General-Purpose-Computation.md:244
#: src/zk-snarks/3-General-Purpose-Computation.md:245
#: src/zk-snarks/3-General-Purpose-Computation.md:250
#: src/zk-snarks/3-General-Purpose-Computation.md:251
#: src/zk-snarks/3-General-Purpose-Computation.md:252
#: src/zk-snarks/3-General-Purpose-Computation.md:256
#: src/zk-snarks/3-General-Purpose-Computation.md:257
#: src/zk-snarks/3-General-Purpose-Computation.md:264
#: src/zk-snarks/3-General-Purpose-Computation.md:271
#: src/zk-snarks/3-General-Purpose-Computation.md:279
#: src/zk-snarks/3-General-Purpose-Computation.md:280
#: src/zk-snarks/3-General-Purpose-Computation.md:295
#: src/zk-snarks/3-General-Purpose-Computation.md:300
#: src/zk-snarks/3-General-Purpose-Computation.md:349
#: src/zk-snarks/3-General-Purpose-Computation.md:350
#: src/zk-snarks/3-General-Purpose-Computation.md:351
#: src/zk-snarks/3-General-Purpose-Computation.md:352
#: src/zk-snarks/3-General-Purpose-Computation.md:356
#: src/zk-snarks/3-General-Purpose-Computation.md:358
#: src/zk-snarks/3-General-Purpose-Computation.md:360
#: src/zk-snarks/3-General-Purpose-Computation.md:361
#: src/zk-snarks/3-General-Purpose-Computation.md:364
#: src/zk-snarks/3-General-Purpose-Computation.md:366
#: src/zk-snarks/3-General-Purpose-Computation.md:381
#: src/zk-snarks/3-General-Purpose-Computation.md:384
#: src/zk-snarks/4-Construction-Properties.md:197
#: src/zk-snarks/4-Construction-Properties.md:199
#: src/zk-snarks/4-Construction-Properties.md:200
#: src/zk-snarks/4-Construction-Properties.md:207
#: src/zk-snarks/4-Construction-Properties.md:209
#: src/zk-snarks/4-Construction-Properties.md:210
#: src/zk-snarks/4-Construction-Properties.md:212
#: src/zk-snarks/4-Construction-Properties.md:215
#: src/zk-snarks/4-Construction-Properties.md:217
#: src/zk-snarks/4-Construction-Properties.md:219
#: src/zk-snarks/4-Construction-Properties.md:244
#: src/zk-snarks/4-Construction-Properties.md:245
#: src/zk-snarks/4-Construction-Properties.md:249
#: src/zk-snarks/4-Construction-Properties.md:263
#: src/zk-snarks/4-Construction-Properties.md:271
#: src/zk-snarks/4-Construction-Properties.md:273
#: src/zk-snarks/4-Construction-Properties.md:275
#: src/zk-snarks/4-Construction-Properties.md:276
#: src/zk-snarks/4-Construction-Properties.md:279
#: src/zk-snarks/4-Construction-Properties.md:280
#: src/zk-snarks/4-Construction-Properties.md:298
#: src/zk-snarks/4-Construction-Properties.md:300
#: src/zk-snarks/4-Construction-Properties.md:304
#: src/zk-snarks/4-Construction-Properties.md:306
#: src/zk-snarks/4-Construction-Properties.md:307
#: src/zk-snarks/4-Construction-Properties.md:308
#: src/zk-snarks/4-Construction-Properties.md:309
#: src/zk-snarks/4-Construction-Properties.md:313
#: src/zk-snarks/4-Construction-Properties.md:315
#: src/zk-snarks/4-Construction-Properties.md:317
#: src/zk-snarks/4-Construction-Properties.md:318
#: src/zk-snarks/4-Construction-Properties.md:326
#: src/zk-snarks/4-Construction-Properties.md:327
#: src/zk-snarks/4-Construction-Properties.md:335
#: src/zk-snarks/4-Construction-Properties.md:341
#: src/zk-snarks/4-Construction-Properties.md:342
#: src/zk-snarks/4-Construction-Properties.md:345
#: src/zk-snarks/4-Construction-Properties.md:349
#: src/zk-snarks/4-Construction-Properties.md:353
#: src/zk-snarks/4-Construction-Properties.md:354
#: src/zk-snarks/4-Construction-Properties.md:357
#: src/zk-snarks/4-Construction-Properties.md:359
#: src/zk-snarks/4-Construction-Properties.md:363
#: src/zk-snarks/4-Construction-Properties.md:364
#: src/zk-snarks/4-Construction-Properties.md:379
#: src/zk-snarks/4-Construction-Properties.md:381
#: src/zk-snarks/4-Construction-Properties.md:384
#: src/zk-snarks/4-Construction-Properties.md:392
#: src/zk-snarks/4-Construction-Properties.md:394
#: src/zk-snarks/4-Construction-Properties.md:395
#: src/zk-snarks/4-Construction-Properties.md:401
#: src/zk-snarks/4-Construction-Properties.md:405
#: src/zk-snarks/4-Construction-Properties.md:407
#: src/zk-snarks/4-Construction-Properties.md:409
#: src/zk-snarks/4-Construction-Properties.md:410
#: src/zk-snarks/4-Construction-Properties.md:416
#: src/zk-snarks/4-Construction-Properties.md:420
#: src/zk-snarks/4-Construction-Properties.md:422
#: src/zk-snarks/4-Construction-Properties.md:424
#: src/zk-snarks/4-Construction-Properties.md:428
#: src/zk-snarks/4-Construction-Properties.md:431
#: src/zk-snarks/4-Construction-Properties.md:432
#: src/zk-snarks/4-Construction-Properties.md:434
#: src/zk-snarks/4-Construction-Properties.md:436
#: src/zk-snarks/4-Construction-Properties.md:440
#: src/zk-snarks/4-Construction-Properties.md:441
#: src/zk-snarks/4-Construction-Properties.md:443
#: src/zk-snarks/5-Pinocchio-Protocol.md:65
#: src/zk-snarks/5-Pinocchio-Protocol.md:67
#: src/zk-snarks/5-Pinocchio-Protocol.md:87
#: src/zk-snarks/5-Pinocchio-Protocol.md:89
#: src/zk-snarks/5-Pinocchio-Protocol.md:94
#: src/zk-snarks/5-Pinocchio-Protocol.md:97
#: src/zk-snarks/5-Pinocchio-Protocol.md:98
#: src/zk-snarks/5-Pinocchio-Protocol.md:102
#: src/zk-snarks/5-Pinocchio-Protocol.md:103
#: src/zk-snarks/5-Pinocchio-Protocol.md:106
#: src/zk-snarks/5-Pinocchio-Protocol.md:109
#: src/zk-snarks/5-Pinocchio-Protocol.md:133
#: src/zk-snarks/5-Pinocchio-Protocol.md:135
#: src/zk-snarks/5-Pinocchio-Protocol.md:136
#: src/zk-snarks/5-Pinocchio-Protocol.md:137
#: src/zk-snarks/5-Pinocchio-Protocol.md:154
#: src/zk-snarks/5-Pinocchio-Protocol.md:155
#: src/zk-snarks/5-Pinocchio-Protocol.md:163
#: src/zk-snarks/5-Pinocchio-Protocol.md:168
#: src/zk-snarks/5-Pinocchio-Protocol.md:173
#: src/zk-snarks/5-Pinocchio-Protocol.md:186
#: src/zk-snarks/5-Pinocchio-Protocol.md:190
#: src/zk-snarks/5-Pinocchio-Protocol.md:192
#: src/zk-snarks/5-Pinocchio-Protocol.md:195
#: src/zk-snarks/5-Pinocchio-Protocol.md:204
#: src/zk-snarks/5-Pinocchio-Protocol.md:205
#: src/zk-snarks/5-Pinocchio-Protocol.md:207
#: src/zk-snarks/5-Pinocchio-Protocol.md:209
#: src/zk-snarks/5-Pinocchio-Protocol.md:212
#: src/zk-snarks/5-Pinocchio-Protocol.md:214
#: src/zk-snarks/5-Pinocchio-Protocol.md:215
#: src/zk-snarks/5-Pinocchio-Protocol.md:218
#: src/zk-snarks/5-Pinocchio-Protocol.md:219
#: src/zk-snarks/5-Pinocchio-Protocol.md:222
#: src/zk-snarks/5-Pinocchio-Protocol.md:225
#: src/halo2/tmp/3-Fibonacci-example-2.md:190
#: src/halo2/tmp/3-Fibonacci-example-2.md:394 src/halo2/tmp/Zordle.md:79
#: src/halo2/tmp/Zordle.md:81 src/zk-everything/BabySNARK tutorial.md:140
#: src/zk-everything/zk-learning-miles/KZG.md:77
#: src/zk-everything/zk-learning-miles/KZG.md:83
#: src/zk-everything/zk-learning-miles/KZG.md:199
#: src/zk-everything/zk-learning-miles/KZG.md:205
#: src/zk-everything/zk-learning-miles/KZG.md:211
#: src/zk-everything/zk-learning-miles/KZG.md:213
#: src/zk-everything/zk-learning-miles/KZG.md:248
#: src/zk-everything/zk-learning-miles/KZG.md:250
#: src/zk-everything/zk-learning-miles/KZG.md:262
#: src/zk-everything/zk-learning-miles/KZG.md:276
#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:238 Zeroknowledge.md:239
#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:197 SNARKs.md:198 SNARKs.md:289 SNARKs.md:324 SNARKs.md:342
#: SNARKs.md:350 SNARKs.md:352 SNARKs.md:354 SNARKs.md:362 SNARKs.md:363
#: SNARKs.md:407 SNARKs.md:408 SNARKs.md:410
#: src/zk-everything/zk-everything-joe/Hyrax.md:133
#: src/zk-everything/zk-everything-joe/Hyrax.md:140
#: src/zk-everything/zk-everything-joe/Hyrax.md:142
#: src/zk-everything/zk-everything-joe/Hyrax.md:162
#: src/zk-everything/zk-everything-joe/Hyrax.md:168
#: src/zk-everything/zk-everything-joe/Hyrax.md:181
#: src/zk-everything/zk-everything-joe/Hyrax.md:195
#: src/zk-everything/zk-everything-joe/Hyrax.md:198
#: src/zk-everything/zk-everything-joe/Hyrax.md:214
#: src/zk-everything/zk-everything-joe/Hyrax.md:228
#: src/zk-everything/zk-everything-joe/Hyrax.md:282
#: src/zk-everything/zk-everything-joe/Spartan.md:23
#: src/zk-everything/zk-everything-joe/Spartan.md:24
#: src/zk-everything/zk-everything-joe/Spartan.md:25
#: src/zk-everything/zk-everything-joe/Spartan.md:26
#: src/zk-everything/zk-everything-joe/Spartan.md:312
#: src/zk-everything/zk-everything-joe/Spartan.md:323
#: src/zk-everything/zk-everything-joe/Spartan.md:350 src/public
#: goods/第二章.md:80 goods/第二章.md:103 goods/第二章.md:146
#: goods/4-Proving-System.md:12 goods/4-Proving-System.md:53
#: goods/4-Proving-System.md:55 goods/4-Proving-System.md:58
#: goods/4-Proving-System.md:60 goods/4-Proving-System.md:62
#: goods/4-Proving-System.md:157 src/materials/ZK-Materials.md:600
msgid "g"
msgstr "g"

#: src/plonk-intro-cn/plonk-lagrange-basis.md:10
msgid " 同为两个次数不超过 "
msgstr " 同为两个次数不超过 "

#: src/plonk-intro-cn/plonk-lagrange-basis.md:10
#: src/plonk-intro-cn/plonk-permutation.md:190
#: src/plonk-intro-cn/plonk-permutation.md:204
#: src/plonk-intro-cn/plonk-permutation.md:208
#: src/plonk-intro-cn/plonk-permutation.md:212
#: src/plonk-intro-cn/plonk-constraints.md:63
#: src/plonk-intro-cn/plonk-constraints.md:69
#: src/plonk-intro-cn/plonk-constraints.md:71
#: src/plonk-intro-cn/plonk-constraints.md:75
#: src/plonk-intro-cn/plonk-constraints.md:77
#: src/plonk-intro-cn/plonk-constraints.md:141
#: src/plonk-intro-cn/plonk-constraints.md:143
#: src/plonk-intro-cn/plonk-constraints.md:145
#: src/plonk-intro-cn/plonk-constraints.md:149
#: src/plonk-intro-cn/plonk-constraints.md:179
#: src/plonk-intro-cn/plonk-polycom.md:47
#: src/plonk-intro-cn/plonk-randomizing.md:19
#: src/plonk-intro-cn/plonk-randomizing.md:59
#: src/plonk-intro-cn/plonk-randomizing.md:61
#: src/plonk-intro-cn/plonk-randomizing.md:65
#: src/plonk-intro-cn/plonk-randomizing.md:69
#: src/plonk-intro-cn/plonk-lookup.md:33 src/plonk-intro-cn/plonk-lookup.md:289
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:24
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:75
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:77
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:252
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:254
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:256
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:260
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:261
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:262
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:269
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:271
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:272
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:279
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:313
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:324
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:326
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:327
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:332
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:333
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:348
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:357
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:22
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:26
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:32
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:74
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:76
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:79
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:81
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:169
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:176
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:182
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:188
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:198
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:229
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:235
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:239
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:243
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:245
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:258
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:260
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:264
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:265
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:269
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:271
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:272
#: src/zk-snarks/3-General-Purpose-Computation.md:112
#: src/zk-snarks/3-General-Purpose-Computation.md:137
#: src/zk-snarks/3-General-Purpose-Computation.md:237
#: src/zk-snarks/3-General-Purpose-Computation.md:264
#: src/zk-snarks/3-General-Purpose-Computation.md:295
#: src/zk-snarks/3-General-Purpose-Computation.md:313
#: src/zk-snarks/3-General-Purpose-Computation.md:315
#: src/zk-snarks/3-General-Purpose-Computation.md:320
#: src/zk-snarks/3-General-Purpose-Computation.md:322
#: src/zk-snarks/3-General-Purpose-Computation.md:326
#: src/zk-snarks/3-General-Purpose-Computation.md:331
#: src/zk-snarks/3-General-Purpose-Computation.md:340
#: src/zk-snarks/3-General-Purpose-Computation.md:349
#: src/zk-snarks/3-General-Purpose-Computation.md:351
#: src/zk-snarks/3-General-Purpose-Computation.md:355
#: src/zk-snarks/3-General-Purpose-Computation.md:356
#: src/zk-snarks/3-General-Purpose-Computation.md:358
#: src/zk-snarks/3-General-Purpose-Computation.md:360
#: src/zk-snarks/3-General-Purpose-Computation.md:366
#: src/zk-snarks/4-Construction-Properties.md:76
#: src/zk-snarks/4-Construction-Properties.md:85
#: src/zk-snarks/4-Construction-Properties.md:192
#: src/zk-snarks/4-Construction-Properties.md:193
#: src/zk-snarks/4-Construction-Properties.md:195
#: src/zk-snarks/4-Construction-Properties.md:197
#: src/zk-snarks/4-Construction-Properties.md:199
#: src/zk-snarks/4-Construction-Properties.md:210
#: src/zk-snarks/4-Construction-Properties.md:271
#: src/zk-snarks/4-Construction-Properties.md:315
#: src/zk-snarks/4-Construction-Properties.md:422
#: src/zk-snarks/5-Pinocchio-Protocol.md:87
#: src/zk-snarks/5-Pinocchio-Protocol.md:154
#: src/zk-snarks/5-Pinocchio-Protocol.md:187
#: src/zk-snarks/5-Pinocchio-Protocol.md:192
#: src/halo2/tmp/3-Fibonacci-example-2.md:189
#: src/halo2/tmp/3-Fibonacci-example-2.md:393 src/halo2/tmp/9-decomposed.md:30
#: src/halo2/tmp/9-decomposed.md:101 src/halo2/tmp/9-decomposed.md:130
#: src/zk-everything/BabySNARK tutorial.md:145
#: src/zk-everything/zk-learning-miles/KZG.md:41
#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:198 SNARKs.md:269 SNARKs.md:273 SNARKs.md:276 SNARKs.md:284
#: SNARKs.md:289 SNARKs.md:296 SNARKs.md:298 SNARKs.md:301 SNARKs.md:302
#: SNARKs.md:310 SNARKs.md:312 SNARKs.md:316 SNARKs.md:320 SNARKs.md:324
#: SNARKs.md:379 SNARKs.md:408 src/zk-everything/zk-everything-joe/Hyrax.md:166
#: src/zk-everything/zk-everything-joe/Hyrax.md:168
#: src/zk-everything/zk-everything-joe/Hyrax.md:173
#: src/zk-everything/zk-everything-joe/Hyrax.md:181
#: src/zk-everything/zk-everything-joe/Hyrax.md:213
#: src/zk-everything/zk-everything-joe/Hyrax.md:214
#: src/zk-everything/zk-everything-joe/Hyrax.md:223
#: src/zk-everything/zk-everything-joe/Spartan.md:23
#: src/zk-everything/zk-everything-joe/Spartan.md:24
#: src/zk-everything/zk-everything-joe/Spartan.md:25
#: src/zk-everything/zk-everything-joe/Spartan.md:26
#: src/zk-everything/zk-everything-joe/Spartan.md:89
#: src/zk-everything/zk-everything-joe/Spartan.md:93
#: src/zk-everything/zk-everything-joe/Spartan.md:143
#: src/zk-everything/zk-everything-joe/Spartan.md:154
#: src/zk-everything/zk-everything-joe/Spartan.md:155
#: src/zk-everything/zk-everything-joe/Spartan.md:166
#: src/zk-everything/zk-everything-joe/Spartan.md:195
#: src/zk-everything/zk-everything-joe/Spartan.md:200
#: src/zk-everything/zk-everything-joe/Spartan.md:217
#: src/zk-everything/zk-everything-joe/Spartan.md:232
#: src/zk-everything/zk-everything-joe/Spartan.md:263
#: src/zk-everything/zk-everything-joe/Spartan.md:264 src/public
#: goods/第二章.md:146
msgid "d"
msgstr "d"

#: src/plonk-intro-cn/plonk-lagrange-basis.md:10
msgid " 的多项式。那么 Verifier 只需要给出一个随机挑战值 "
msgstr " 的多项式。那么 Verifier 只需要给出一个随机挑战值 "

#: src/plonk-intro-cn/plonk-lagrange-basis.md:10
#: src/plonk-intro-cn/plonk-lagrange-basis.md:20
#: src/plonk-intro-cn/plonk-lagrange-basis.md:22
#: src/plonk-intro-cn/plonk-lagrange-basis.md:50
#: src/plonk-intro-cn/plonk-lagrange-basis.md:66
#: src/plonk-intro-cn/plonk-lagrange-basis.md:68
#: src/plonk-intro-cn/plonk-lagrange-basis.md:70
#: src/plonk-intro-cn/plonk-lagrange-basis.md:76
#: src/plonk-intro-cn/plonk-permutation.md:100
#: src/plonk-intro-cn/plonk-permutation.md:208
#: src/plonk-intro-cn/plonk-permutation.md:212
#: src/plonk-intro-cn/plonk-constraints.md:29
#: src/plonk-intro-cn/plonk-constraints.md:141
#: src/plonk-intro-cn/plonk-constraints.md:151
#: src/plonk-intro-cn/plonk-constraints.md:183
#: src/plonk-intro-cn/plonk-constraints.md:184
#: src/plonk-intro-cn/plonk-constraints.md:185
#: src/plonk-intro-cn/plonk-constraints.md:186
#: src/plonk-intro-cn/plonk-constraints.md:187
#: src/plonk-intro-cn/plonk-constraints.md:188
#: src/plonk-intro-cn/plonk-constraints.md:191
#: src/plonk-intro-cn/plonk-constraints.md:192
#: src/plonk-intro-cn/plonk-constraints.md:193
#: src/plonk-intro-cn/plonk-constraints.md:194
#: src/plonk-intro-cn/plonk-constraints.md:195
#: src/plonk-intro-cn/plonk-constraints.md:199
#: src/plonk-intro-cn/plonk-polycom.md:35
#: src/plonk-intro-cn/plonk-polycom.md:63
#: src/plonk-intro-cn/plonk-polycom.md:65
#: src/plonk-intro-cn/plonk-polycom.md:67
#: src/plonk-intro-cn/plonk-polycom.md:69
#: src/plonk-intro-cn/plonk-polycom.md:71
#: src/plonk-intro-cn/plonk-polycom.md:75
#: src/plonk-intro-cn/plonk-polycom.md:79
#: src/plonk-intro-cn/plonk-polycom.md:81
#: src/plonk-intro-cn/plonk-polycom.md:87
#: src/plonk-intro-cn/plonk-polycom.md:89
#: src/plonk-intro-cn/plonk-polycom.md:97
#: src/plonk-intro-cn/plonk-polycom.md:103
#: src/plonk-intro-cn/plonk-polycom.md:124
#: src/plonk-intro-cn/plonk-polycom.md:128
#: src/plonk-intro-cn/plonk-polycom.md:136
#: src/plonk-intro-cn/plonk-polycom.md:159
#: src/plonk-intro-cn/plonk-polycom.md:161
#: src/plonk-intro-cn/plonk-polycom.md:163
#: src/plonk-intro-cn/plonk-polycom.md:169
#: src/plonk-intro-cn/plonk-polycom.md:171
#: src/plonk-intro-cn/plonk-polycom.md:175
#: src/plonk-intro-cn/plonk-polycom.md:179
#: src/plonk-intro-cn/plonk-polycom.md:181
#: src/plonk-intro-cn/plonk-polycom.md:187
#: src/plonk-intro-cn/plonk-polycom.md:203
#: src/plonk-intro-cn/plonk-polycom.md:205
#: src/plonk-intro-cn/plonk-polycom.md:209
#: src/plonk-intro-cn/plonk-polycom.md:213
#: src/plonk-intro-cn/plonk-polycom.md:223
#: src/plonk-intro-cn/plonk-polycom.md:229
#: src/plonk-intro-cn/plonk-randomizing.md:15
#: src/plonk-intro-cn/plonk-randomizing.md:21
#: src/plonk-intro-cn/plonk-randomizing.md:37
#: src/plonk-intro-cn/plonk-randomizing.md:151
#: src/plonk-intro-cn/plonk-randomizing.md:153
#: src/plonk-intro-cn/plonk-randomizing.md:155
#: src/plonk-intro-cn/plonk-randomizing.md:159
#: src/plonk-intro-cn/plonk-lookup.md:95 src/plonk-intro-cn/plonk-lookup.md:97
#: src/plonk-intro-cn/plonk-lookup.md:101
#: src/plonk-intro-cn/plonk-lookup.md:306
msgid "ζ"
msgstr "ζ"

#: src/plonk-intro-cn/plonk-lagrange-basis.md:10
msgid "，计算 "
msgstr "，计算 "

#: src/plonk-intro-cn/plonk-lagrange-basis.md:10
#: src/plonk-intro-cn/plonk-lagrange-basis.md:14
msgid " 是否等于 "
msgstr " 是否等于 "

#: src/plonk-intro-cn/plonk-lagrange-basis.md:10
msgid " 即可大概率得知 "
msgstr " 即可大概率得知 "

#: src/plonk-intro-cn/plonk-lagrange-basis.md:10
msgid "，其中出错的概率 "
msgstr "，其中出错的概率 "

#: src/plonk-intro-cn/plonk-lagrange-basis.md:10
#: src/plonk-intro-cn/plonk-lagrange-basis.md:78
#: src/plonk-intro-cn/plonk-randomizing.md:35 src/halo2/tmp/9-decomposed.md:138
#: src/zk-everything/zk-learning-miles/KZG.md:41
#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:239
#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:269 SNARKs.md:270 SNARKs.md:284 SNARKs.md:310 SNARKs.md:312
#: SNARKs.md:316 SNARKs.md:324 SNARKs.md:379 SNARKs.md:408
#: src/Nova/SuperNova.md:12 src/public goods/第二章.md:80
#: goods/第二章.md:103
msgid "≤"
msgstr "≤"

#: src/plonk-intro-cn/plonk-lagrange-basis.md:10
msgid "。只要保证 "
msgstr "。只要保证 "

#: src/plonk-intro-cn/plonk-lagrange-basis.md:10
msgid " 足够大，那么检查出错的概率就可以忽略不计。"
msgstr " 足够大，那么检查出错的概率就可以忽略不计。"

#: src/plonk-intro-cn/plonk-lagrange-basis.md:12
msgid "这个原理被称为 Schwartz-Zippel 定理。"
msgstr "这个原理被称为 Schwartz-Zippel 定理。"

#: src/plonk-intro-cn/plonk-lagrange-basis.md:14
msgid "假如要验证两个向量 "
msgstr "假如要验证两个向量 "

#: src/plonk-intro-cn/plonk-lagrange-basis.md:14
msgid "，为了可以一步挑战验证，我们要先把三个向量编码成多项式。"
msgstr "，为了可以一步挑战验证，我们要先把三个向量编码成多项式。"

#: src/plonk-intro-cn/plonk-lagrange-basis.md:16
msgid "一种最直接的方案是把向量当作多项式的「系数」进行编码"
msgstr "一种最直接的方案是把向量当作多项式的「系数」进行编码"

#: src/plonk-intro-cn/plonk-lagrange-basis.md:18
#: src/plonk-intro-cn/plonk-lagrange-basis.md:36
#: src/plonk-intro-cn/plonk-lagrange-basis.md:42
#: src/plonk-intro-cn/plonk-lagrange-basis.md:60
#: src/plonk-intro-cn/plonk-lagrange-basis.md:62
#: src/plonk-intro-cn/plonk-lagrange-basis.md:119
#: src/plonk-intro-cn/plonk-permutation.md:48
#: src/plonk-intro-cn/plonk-permutation.md:98
#: src/plonk-intro-cn/plonk-permutation.md:112
#: src/plonk-intro-cn/plonk-constraints.md:93
#: src/plonk-intro-cn/plonk-constraints.md:141
#: src/plonk-intro-cn/plonk-constraints.md:143
#: src/plonk-intro-cn/plonk-polycom.md:21
#: src/plonk-intro-cn/plonk-polycom.md:29
#: src/plonk-intro-cn/plonk-polycom.md:33
#: src/plonk-intro-cn/plonk-polycom.md:53
#: src/plonk-intro-cn/plonk-randomizing.md:33
#: src/plonk-intro-cn/plonk-randomizing.md:101
#: src/plonk-intro-cn/plonk-randomizing.md:115
#: src/plonk-intro-cn/plonk-randomizing.md:117
#: src/plonk-intro-cn/plonk-randomizing.md:141
#: src/plonk-intro-cn/plonk-randomizing.md:143
#: src/plonk-intro-cn/plonk-randomizing.md:145
#: src/plonk-intro-cn/plonk-lookup.md:41
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:333
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:229
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:239
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:258
#: src/zk-snarks/4-Construction-Properties.md:48
#: src/zk-snarks/4-Construction-Properties.md:221
#: src/zk-snarks/4-Construction-Properties.md:233
#: src/zk-snarks/4-Construction-Properties.md:401
#: src/zk-snarks/4-Construction-Properties.md:441
#: src/zk-snarks/5-Pinocchio-Protocol.md:136 src/zk-everything/BabySNARK
#: tutorial.md:172
msgid "⋯"
msgstr "⋯"

#: src/plonk-intro-cn/plonk-lagrange-basis.md:20
msgid "显然，如果 "
msgstr "显然，如果 "

#: src/plonk-intro-cn/plonk-lagrange-basis.md:20
#: src/plonk-intro-cn/plonk-lagrange-basis.md:76
#: src/plonk-intro-cn/plonk-constraints.md:153
#: src/plonk-intro-cn/plonk-polycom.md:69
#: src/plonk-intro-cn/plonk-randomizing.md:39
#: src/plonk-intro-cn/plonk-lookup.md:111
#: src/plonk-intro-cn/plonk-lookup.md:127
#: src/plonk-intro-cn/plonk-lookup.md:129
#: src/plonk-intro-cn/plonk-lookup.md:133
#: src/plonk-intro-cn/plonk-lookup.md:165
msgid "，那么 "
msgstr "，那么 "

#: src/plonk-intro-cn/plonk-lagrange-basis.md:20
msgid "。然后我们可以通过挑战一个随机数 "
msgstr "。然后我们可以通过挑战一个随机数 "

#: src/plonk-intro-cn/plonk-lagrange-basis.md:20
msgid " 来检验三个多项式在 "
msgstr " 来检验三个多项式在 "

#: src/plonk-intro-cn/plonk-lagrange-basis.md:20
msgid " 处的取值，验证："
msgstr " 处的取值，验证："

#: src/plonk-intro-cn/plonk-lagrange-basis.md:24
msgid "如果上式成立，那么 "
msgstr "如果上式成立，那么 "

#: src/plonk-intro-cn/plonk-lagrange-basis.md:26
msgid "Lagrange 插值 与 Evaluation Form"
msgstr "Lagrange 插值 与 Evaluation Form"

#: src/plonk-intro-cn/plonk-lagrange-basis.md:28
msgid "假如我们要验证 "
msgstr "假如我们要验证 "

#: src/plonk-intro-cn/plonk-lagrange-basis.md:28
msgid "，用系数编码的方式就不容易处理了，因为 "
msgstr "，用系数编码的方式就不容易处理了，因为 "

#: src/plonk-intro-cn/plonk-lagrange-basis.md:28
msgid " 会产生很多的交叉项。并且 "
msgstr " 会产生很多的交叉项。并且 "

#: src/plonk-intro-cn/plonk-lagrange-basis.md:28
msgid " 的项并不对应到 "
msgstr " 的项并不对应到 "

#: src/plonk-intro-cn/plonk-lagrange-basis.md:28
msgid " 的系数，比如 "
msgstr " 的系数，比如 "

#: src/plonk-intro-cn/plonk-lagrange-basis.md:28
msgid " 的系数出现在 "
msgstr " 的系数出现在 "

#: src/plonk-intro-cn/plonk-lagrange-basis.md:28
msgid " 上，但同时 "
msgstr " 上，但同时 "

#: src/plonk-intro-cn/plonk-lagrange-basis.md:28
msgid " 项的系数组成还有 "
msgstr " 项的系数组成还有 "

#: src/plonk-intro-cn/plonk-lagrange-basis.md:28
msgid "。而 "
msgstr "。而 "

#: src/plonk-intro-cn/plonk-lagrange-basis.md:28
#: src/plonk-intro-cn/plonk-lookup.md:125
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:239
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:278
#: src/zk-everything/BabySNARK tutorial.md:129
msgid " 是 "
msgstr " 是 "

#: src/plonk-intro-cn/plonk-lagrange-basis.md:28
msgid " 的系数。"
msgstr " 的系数。"

#: src/plonk-intro-cn/plonk-lagrange-basis.md:30
msgid ""
"我们需要另一种多项式编码方案，利用 Lagrange Basis。如果我们要构造多项式 "
msgstr ""
"我们需要另一种多项式编码方案，利用 Lagrange Basis。如果我们要构造多项式 "

#: src/plonk-intro-cn/plonk-lagrange-basis.md:30
msgid "，使得它在定义域 "
msgstr "，使得它在定义域 "

#: src/plonk-intro-cn/plonk-lagrange-basis.md:30
#: src/plonk-intro-cn/plonk-lagrange-basis.md:46
#: src/plonk-intro-cn/plonk-lagrange-basis.md:50
#: src/plonk-intro-cn/plonk-lagrange-basis.md:54
#: src/plonk-intro-cn/plonk-lagrange-basis.md:58
#: src/plonk-intro-cn/plonk-lagrange-basis.md:62
#: src/plonk-intro-cn/plonk-lagrange-basis.md:64
#: src/plonk-intro-cn/plonk-lagrange-basis.md:66
#: src/plonk-intro-cn/plonk-lagrange-basis.md:70
#: src/plonk-intro-cn/plonk-lagrange-basis.md:72
#: src/plonk-intro-cn/plonk-lagrange-basis.md:76
#: src/plonk-intro-cn/plonk-lagrange-basis.md:78
#: src/plonk-intro-cn/plonk-lagrange-basis.md:80
#: src/plonk-intro-cn/plonk-lagrange-basis.md:87
#: src/plonk-intro-cn/plonk-lagrange-basis.md:93
#: src/plonk-intro-cn/plonk-lagrange-basis.md:99
#: src/plonk-intro-cn/plonk-lagrange-basis.md:101
#: src/plonk-intro-cn/plonk-lagrange-basis.md:113
#: src/plonk-intro-cn/plonk-lagrange-basis.md:121
#: src/plonk-intro-cn/plonk-lagrange-basis.md:123
#: src/plonk-intro-cn/plonk-lagrange-basis.md:131
#: src/plonk-intro-cn/plonk-lagrange-basis.md:135
#: src/plonk-intro-cn/plonk-lagrange-basis.md:139
#: src/plonk-intro-cn/plonk-lagrange-basis.md:143
#: src/plonk-intro-cn/plonk-lagrange-basis.md:147
#: src/plonk-intro-cn/plonk-lagrange-basis.md:153
#: src/plonk-intro-cn/plonk-lagrange-basis.md:159
#: src/plonk-intro-cn/plonk-lagrange-basis.md:161
#: src/plonk-intro-cn/plonk-lagrange-basis.md:170
#: src/plonk-intro-cn/plonk-lagrange-basis.md:172
#: src/plonk-intro-cn/plonk-permutation.md:76
#: src/plonk-intro-cn/plonk-permutation.md:80
#: src/plonk-intro-cn/plonk-permutation.md:84
#: src/plonk-intro-cn/plonk-permutation.md:92
#: src/plonk-intro-cn/plonk-permutation.md:96
#: src/plonk-intro-cn/plonk-permutation.md:98
#: src/plonk-intro-cn/plonk-permutation.md:206
#: src/plonk-intro-cn/plonk-permutation.md:208
#: src/plonk-intro-cn/plonk-permutation.md:212
#: src/plonk-intro-cn/plonk-constraints.md:81
#: src/plonk-intro-cn/plonk-constraints.md:85
#: src/plonk-intro-cn/plonk-constraints.md:93
#: src/plonk-intro-cn/plonk-constraints.md:99
#: src/plonk-intro-cn/plonk-constraints.md:143
#: src/plonk-intro-cn/plonk-constraints.md:153
#: src/plonk-intro-cn/plonk-constraints.md:181
#: src/plonk-intro-cn/plonk-constraints.md:194
#: src/plonk-intro-cn/plonk-constraints.md:199
#: src/plonk-intro-cn/plonk-polycom.md:47
#: src/plonk-intro-cn/plonk-polycom.md:49
#: src/plonk-intro-cn/plonk-polycom.md:57
#: src/plonk-intro-cn/plonk-polycom.md:117
#: src/plonk-intro-cn/plonk-randomizing.md:15
#: src/plonk-intro-cn/plonk-randomizing.md:35
#: src/plonk-intro-cn/plonk-randomizing.md:41
#: src/plonk-intro-cn/plonk-randomizing.md:45
#: src/plonk-intro-cn/plonk-randomizing.md:47
#: src/plonk-intro-cn/plonk-randomizing.md:51
#: src/plonk-intro-cn/plonk-randomizing.md:57
#: src/plonk-intro-cn/plonk-randomizing.md:73
#: src/plonk-intro-cn/plonk-randomizing.md:77
#: src/plonk-intro-cn/plonk-randomizing.md:101
#: src/plonk-intro-cn/plonk-lookup.md:59 src/plonk-intro-cn/plonk-lookup.md:61
#: src/plonk-intro-cn/plonk-lookup.md:63 src/plonk-intro-cn/plonk-lookup.md:69
#: src/plonk-intro-cn/plonk-lookup.md:93 src/plonk-intro-cn/plonk-lookup.md:101
#: src/plonk-intro-cn/plonk-lookup.md:161
#: src/plonk-intro-cn/plonk-lookup.md:212
#: src/plonk-intro-cn/plonk-lookup.md:304
#: src/plonk-intro-cn/plonk-lookup.md:306 src/zk-everything/BabySNARK
#: tutorial.md:177 src/zk-everything/zk-learning-miles/KZG.md:318
#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:298 SNARKs.md:302
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:418
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:424
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:428
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:434
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:436
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:442
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:446
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:448
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:452
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:454
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:497
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:500
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:506
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:512
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:514
#: src/zk-everything/zk-everything-joe/Spartan.md:23
#: src/zk-everything/zk-everything-joe/Spartan.md:24
#: src/zk-everything/zk-everything-joe/Spartan.md:25
#: src/zk-everything/zk-everything-joe/Spartan.md:26
#: src/zk-everything/zk-everything-joe/Spartan.md:177
#: src/zk-everything/zk-everything-joe/Spartan.md:182
#: src/zk-everything/zk-everything-joe/Spartan.md:195
#: src/zk-everything/zk-everything-joe/Spartan.md:200
#: src/zk-everything/zk-everything-joe/Spartan.md:232
#: src/zk-everything/zk-everything-joe/Spartan.md:236
#: src/zk-everything/zk-everything-joe/Spartan.md:240
#: src/zk-everything/zk-everything-joe/Spartan.md:252
#: src/zk-everything/zk-everything-joe/Spartan.md:263
#: src/zk-everything/zk-everything-joe/Spartan.md:274 src/public
#: goods/第二章.md:80 goods/第二章.md:84 goods/第二章.md:88
#: goods/第二章.md:89 goods/第二章.md:91 goods/第二章.md:103
#: goods/第二章.md:111 goods/第二章.md:146 goods/第二章.md:158
#: goods/第二章.md:162 goods/第二章.md:170 goods/第二章.md:171
#: goods/4-Proving-System.md:60 goods/4-Proving-System.md:124
#: goods/4-Proving-System.md:145 goods/4-Proving-System.md:157
msgid "H"
msgstr "H"

#: src/plonk-intro-cn/plonk-lagrange-basis.md:30
#: src/plonk-intro-cn/plonk-lagrange-basis.md:78
#: src/plonk-intro-cn/plonk-lagrange-basis.md:80
#: src/plonk-intro-cn/plonk-lagrange-basis.md:121
#: src/plonk-intro-cn/plonk-lagrange-basis.md:129
#: src/plonk-intro-cn/plonk-lagrange-basis.md:137
#: src/plonk-intro-cn/plonk-permutation.md:140
#: src/plonk-intro-cn/plonk-permutation.md:144
#: src/plonk-intro-cn/plonk-constraints.md:99
#: src/plonk-intro-cn/plonk-constraints.md:155
#: src/plonk-intro-cn/plonk-polycom.md:25
#: src/plonk-intro-cn/plonk-polycom.md:47
#: src/plonk-intro-cn/plonk-polycom.md:59
#: src/plonk-intro-cn/plonk-lookup.md:139
#: src/plonk-intro-cn/plonk-lookup.md:169
#: src/plonk-intro-cn/plonk-lookup.md:210
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:103
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:111
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:326
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:332
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:333
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:348
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:357
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:21
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:22
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:32
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:79
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:81
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:182
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:188
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:198
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:264
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:265
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:269
#: src/zk-snarks/3-General-Purpose-Computation.md:182
#: src/zk-snarks/3-General-Purpose-Computation.md:237
#: src/zk-snarks/4-Construction-Properties.md:62
#: src/zk-snarks/4-Construction-Properties.md:63
#: src/zk-snarks/4-Construction-Properties.md:65
#: src/zk-snarks/4-Construction-Properties.md:193
#: src/zk-snarks/4-Construction-Properties.md:195
#: src/zk-snarks/4-Construction-Properties.md:197
#: src/zk-snarks/4-Construction-Properties.md:203
#: src/zk-snarks/4-Construction-Properties.md:206
#: src/zk-snarks/4-Construction-Properties.md:207
#: src/zk-snarks/4-Construction-Properties.md:244
#: src/zk-snarks/4-Construction-Properties.md:277
#: src/zk-snarks/4-Construction-Properties.md:298
#: src/zk-snarks/4-Construction-Properties.md:304
#: src/zk-snarks/4-Construction-Properties.md:407
#: src/zk-snarks/5-Pinocchio-Protocol.md:83
#: src/zk-snarks/5-Pinocchio-Protocol.md:84
#: src/zk-snarks/5-Pinocchio-Protocol.md:87
#: src/zk-snarks/5-Pinocchio-Protocol.md:89
#: src/zk-snarks/5-Pinocchio-Protocol.md:192
#: src/zk-snarks/5-Pinocchio-Protocol.md:195
#: src/zk-snarks/5-Pinocchio-Protocol.md:198 src/halo2/tmp/9-decomposed.md:24
#: src/halo2/tmp/9-decomposed.md:26 src/halo2/tmp/9-decomposed.md:30
#: src/zk-everything/BabySNARK tutorial.md:35 tutorial.md:127 tutorial.md:129
#: tutorial.md:145 tutorial.md:150
#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:270 SNARKs.md:272 SNARKs.md:273 SNARKs.md:298 SNARKs.md:301
#: SNARKs.md:302 SNARKs.md:383 src/public goods/第二章.md:9
#: goods/第二章.md:10 goods/第二章.md:12 goods/第二章.md:17
#: goods/第二章.md:18 goods/第二章.md:19 goods/第二章.md:20
#: goods/第二章.md:25 goods/第二章.md:29 goods/第二章.md:33
msgid "…"
msgstr "…"

#: src/plonk-intro-cn/plonk-lagrange-basis.md:30
#: src/plonk-intro-cn/plonk-lagrange-basis.md:32
#: src/plonk-intro-cn/plonk-lagrange-basis.md:34
#: src/plonk-intro-cn/plonk-lagrange-basis.md:36
#: src/plonk-intro-cn/plonk-lagrange-basis.md:42
#: src/plonk-intro-cn/plonk-lagrange-basis.md:60
#: src/plonk-intro-cn/plonk-lagrange-basis.md:78
#: src/plonk-intro-cn/plonk-lagrange-basis.md:80
#: src/plonk-intro-cn/plonk-lagrange-basis.md:82
#: src/plonk-intro-cn/plonk-lagrange-basis.md:83
#: src/plonk-intro-cn/plonk-lagrange-basis.md:85
#: src/plonk-intro-cn/plonk-lagrange-basis.md:101
#: src/plonk-intro-cn/plonk-lagrange-basis.md:103
#: src/plonk-intro-cn/plonk-lagrange-basis.md:117
#: src/plonk-intro-cn/plonk-lagrange-basis.md:119
#: src/plonk-intro-cn/plonk-lagrange-basis.md:121
#: src/plonk-intro-cn/plonk-lagrange-basis.md:123
#: src/plonk-intro-cn/plonk-lagrange-basis.md:129
#: src/plonk-intro-cn/plonk-lagrange-basis.md:137
#: src/plonk-intro-cn/plonk-lagrange-basis.md:139
#: src/plonk-intro-cn/plonk-lagrange-basis.md:172
#: src/plonk-intro-cn/plonk-constraints.md:7
#: src/plonk-intro-cn/plonk-constraints.md:27
#: src/plonk-intro-cn/plonk-constraints.md:93
#: src/plonk-intro-cn/plonk-constraints.md:95
#: src/plonk-intro-cn/plonk-constraints.md:97
#: src/plonk-intro-cn/plonk-constraints.md:99
#: src/plonk-intro-cn/plonk-constraints.md:153
#: src/plonk-intro-cn/plonk-constraints.md:155
#: src/plonk-intro-cn/plonk-randomizing.md:35
#: src/plonk-intro-cn/plonk-randomizing.md:61
#: src/plonk-intro-cn/plonk-randomizing.md:65
#: src/plonk-intro-cn/plonk-randomizing.md:69
#: src/plonk-intro-cn/plonk-randomizing.md:71
#: src/plonk-intro-cn/plonk-randomizing.md:73
#: src/plonk-intro-cn/plonk-randomizing.md:77
#: src/plonk-intro-cn/plonk-randomizing.md:88
#: src/plonk-intro-cn/plonk-randomizing.md:90
#: src/plonk-intro-cn/plonk-randomizing.md:92
#: src/plonk-intro-cn/plonk-randomizing.md:93
#: src/plonk-intro-cn/plonk-randomizing.md:101
#: src/plonk-intro-cn/plonk-randomizing.md:103
#: src/plonk-intro-cn/plonk-randomizing.md:104
#: src/plonk-intro-cn/plonk-randomizing.md:106
#: src/plonk-intro-cn/plonk-randomizing.md:110
#: src/plonk-intro-cn/plonk-randomizing.md:112
#: src/plonk-intro-cn/plonk-randomizing.md:115
#: src/plonk-intro-cn/plonk-randomizing.md:117
#: src/plonk-intro-cn/plonk-randomizing.md:119
#: src/plonk-intro-cn/plonk-randomizing.md:121
#: src/plonk-intro-cn/plonk-randomizing.md:123
#: src/plonk-intro-cn/plonk-randomizing.md:125
#: src/plonk-intro-cn/plonk-randomizing.md:127
#: src/plonk-intro-cn/plonk-randomizing.md:129
#: src/plonk-intro-cn/plonk-lookup.md:87 src/plonk-intro-cn/plonk-lookup.md:111
#: src/plonk-intro-cn/plonk-lookup.md:163
#: src/plonk-intro-cn/plonk-lookup.md:167
#: src/plonk-intro-cn/plonk-lookup.md:169
#: src/plonk-intro-cn/plonk-lookup.md:173
#: src/plonk-intro-cn/plonk-lookup.md:196
#: src/plonk-intro-cn/plonk-lookup.md:200
#: src/plonk-intro-cn/plonk-lookup.md:212
#: src/plonk-intro-cn/plonk-lookup.md:216
#: src/plonk-intro-cn/plonk-lookup.md:244
#: src/plonk-intro-cn/plonk-lookup.md:275 src/halo2/tmp/9-decomposed.md:37
#: src/halo2/tmp/9-decomposed.md:93 src/halo2/tmp/9-decomposed.md:99
#: src/halo2/tmp/9-decomposed.md:101 src/zk-everything/BabySNARK
#: tutorial.md:129 tutorial.md:145 tutorial.md:150
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:64
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:79
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:83
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:87
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:91
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:101
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:122
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:134
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:152
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:448
#: src/zk-everything/zk-everything-joe/Hyrax.md:48
#: src/zk-everything/zk-everything-joe/Hyrax.md:58
#: src/zk-everything/zk-everything-joe/Hyrax.md:62
#: src/zk-everything/zk-everything-joe/Hyrax.md:64
#: src/zk-everything/zk-everything-joe/Hyrax.md:70
msgid "N"
msgstr "N"

#: src/plonk-intro-cn/plonk-lagrange-basis.md:30
msgid " 上的取值为 "
msgstr " 上的取值为 "

#: src/plonk-intro-cn/plonk-lagrange-basis.md:30
#: src/plonk-intro-cn/plonk-constraints.md:7
#: src/plonk-intro-cn/plonk-constraints.md:19
#: src/plonk-intro-cn/plonk-constraints.md:95
#: src/zk-everything/zk-everything-joe/Spartan.md:236
msgid "，即"
msgstr "，即"

#: src/plonk-intro-cn/plonk-lagrange-basis.md:32
#: src/plonk-intro-cn/plonk-permutation.md:58
#: src/plonk-intro-cn/plonk-permutation.md:88
#: src/plonk-intro-cn/plonk-permutation.md:148
#: src/plonk-intro-cn/plonk-permutation.md:160
#: src/plonk-intro-cn/plonk-permutation.md:178
#: src/plonk-intro-cn/plonk-constraints.md:93
#: src/plonk-intro-cn/plonk-randomizing.md:101
#: src/plonk-intro-cn/plonk-randomizing.md:115
#: src/plonk-intro-cn/plonk-randomizing.md:117 src/zk-everything/BabySNARK
#: tutorial.md:172
msgid "⋮"
msgstr "⋮"

#: src/plonk-intro-cn/plonk-lagrange-basis.md:34
msgid "插值需要用到一组插值多项式： "
msgstr "插值需要用到一组插值多项式： "

#: src/plonk-intro-cn/plonk-lagrange-basis.md:34
#: src/plonk-intro-cn/plonk-lagrange-basis.md:113
#: src/plonk-intro-cn/plonk-lagrange-basis.md:153
#: src/plonk-intro-cn/plonk-permutation.md:23
#: src/plonk-intro-cn/plonk-permutation.md:62
#: src/plonk-intro-cn/plonk-permutation.md:80
#: src/plonk-intro-cn/plonk-permutation.md:106
#: src/plonk-intro-cn/plonk-permutation.md:108
#: src/plonk-intro-cn/plonk-permutation.md:110
#: src/plonk-intro-cn/plonk-permutation.md:114
#: src/plonk-intro-cn/plonk-permutation.md:120
#: src/plonk-intro-cn/plonk-permutation.md:122
#: src/plonk-intro-cn/plonk-constraints.md:69
#: src/plonk-intro-cn/plonk-randomizing.md:92
#: src/plonk-intro-cn/plonk-lookup.md:107
#: src/plonk-intro-cn/plonk-lookup.md:109
#: src/plonk-intro-cn/plonk-lookup.md:113
#: src/plonk-intro-cn/plonk-lookup.md:135
#: src/plonk-intro-cn/plonk-lookup.md:137
#: src/plonk-intro-cn/plonk-lookup.md:145
#: src/plonk-intro-cn/plonk-lookup.md:220
#: src/plonk-intro-cn/plonk-lookup.md:275
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:182
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:188
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:258
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:264
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:265
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:269
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:271
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:272
#: src/zk-snarks/3-General-Purpose-Computation.md:143
#: src/zk-snarks/3-General-Purpose-Computation.md:157
#: src/zk-snarks/4-Construction-Properties.md:48
#: src/zk-snarks/4-Construction-Properties.md:63
#: src/zk-snarks/4-Construction-Properties.md:65
#: src/zk-snarks/4-Construction-Properties.md:105
#: src/zk-snarks/4-Construction-Properties.md:113
#: src/zk-snarks/4-Construction-Properties.md:193
#: src/zk-snarks/4-Construction-Properties.md:195
#: src/zk-snarks/4-Construction-Properties.md:199
#: src/zk-snarks/4-Construction-Properties.md:203
#: src/zk-snarks/4-Construction-Properties.md:210
#: src/zk-snarks/4-Construction-Properties.md:212
#: src/zk-snarks/4-Construction-Properties.md:221
#: src/zk-snarks/4-Construction-Properties.md:244
#: src/zk-snarks/4-Construction-Properties.md:277
#: src/zk-snarks/4-Construction-Properties.md:298
#: src/zk-snarks/4-Construction-Properties.md:304
#: src/zk-snarks/4-Construction-Properties.md:309
#: src/zk-snarks/4-Construction-Properties.md:345
#: src/zk-snarks/4-Construction-Properties.md:407
#: src/zk-snarks/4-Construction-Properties.md:422
#: src/zk-snarks/4-Construction-Properties.md:441
#: src/zk-snarks/4-Construction-Properties.md:443
#: src/zk-snarks/5-Pinocchio-Protocol.md:87
#: src/zk-snarks/5-Pinocchio-Protocol.md:89
#: src/zk-snarks/5-Pinocchio-Protocol.md:136
#: src/zk-snarks/5-Pinocchio-Protocol.md:188
#: src/zk-snarks/5-Pinocchio-Protocol.md:192
#: src/zk-snarks/5-Pinocchio-Protocol.md:195
#: src/zk-snarks/5-Pinocchio-Protocol.md:198 src/zk-everything/BabySNARK
#: tutorial.md:124 tutorial.md:125 tutorial.md:126 tutorial.md:127
#: tutorial.md:129 tutorial.md:145 tutorial.md:150 tutorial.md:165
#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:42 Zeroknowledge.md:238 Zeroknowledge.md:239
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:58
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:64
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:87
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:134
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:152
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:448
#: src/zk-everything/zk-everything-joe/Hyrax.md:58
#: src/zk-everything/zk-everything-joe/Hyrax.md:64
#: src/zk-everything/zk-everything-joe/Hyrax.md:70
#: src/zk-everything/zk-everything-joe/Hyrax.md:292
#: src/zk-everything/zk-everything-joe/Hyrax.md:302
#: src/zk-everything/zk-everything-joe/Spartan.md:319
#: src/zk-everything/zk-everything-joe/Spartan.md:350
#: src/zk-everything/zk-everything-joe/Spartan.md:394
#: src/zk-everything/zk-everything-joe/Spartan.md:406
#: src/zk-everything/zk-everything-joe/Spartan.md:411
#: src/zk-everything/zk-everything-joe/Spartan.md:428
#: src/zk-everything/zk-everything-joe/Spartan.md:436
#: src/zk-everything/zk-everything-joe/Spartan.md:450 src/Nova/SuperNova.md:14
#: src/public goods/第二章.md:9 goods/第二章.md:10 goods/第二章.md:12
#: goods/第二章.md:16 goods/第二章.md:17 goods/第二章.md:18
#: goods/第二章.md:19 goods/第二章.md:20 goods/第二章.md:25
#: goods/第二章.md:29 goods/第二章.md:33 goods/第二章.md:34
#: goods/第二章.md:35 goods/第二章.md:158 goods/4-Proving-System.md:58
msgid "{"
msgstr "{"

#: src/plonk-intro-cn/plonk-lagrange-basis.md:34
#: src/plonk-intro-cn/plonk-lagrange-basis.md:113
#: src/plonk-intro-cn/plonk-lagrange-basis.md:153
#: src/plonk-intro-cn/plonk-permutation.md:23
#: src/plonk-intro-cn/plonk-permutation.md:62
#: src/plonk-intro-cn/plonk-permutation.md:80
#: src/plonk-intro-cn/plonk-permutation.md:106
#: src/plonk-intro-cn/plonk-permutation.md:108
#: src/plonk-intro-cn/plonk-permutation.md:110
#: src/plonk-intro-cn/plonk-permutation.md:114
#: src/plonk-intro-cn/plonk-permutation.md:120
#: src/plonk-intro-cn/plonk-permutation.md:122
#: src/plonk-intro-cn/plonk-constraints.md:69
#: src/plonk-intro-cn/plonk-randomizing.md:92
#: src/plonk-intro-cn/plonk-lookup.md:107
#: src/plonk-intro-cn/plonk-lookup.md:109
#: src/plonk-intro-cn/plonk-lookup.md:113
#: src/plonk-intro-cn/plonk-lookup.md:135
#: src/plonk-intro-cn/plonk-lookup.md:137
#: src/plonk-intro-cn/plonk-lookup.md:145
#: src/plonk-intro-cn/plonk-lookup.md:220
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:182
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:188
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:258
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:264
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:265
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:269
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:271
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:272
#: src/zk-snarks/3-General-Purpose-Computation.md:143
#: src/zk-snarks/3-General-Purpose-Computation.md:157
#: src/zk-snarks/4-Construction-Properties.md:48
#: src/zk-snarks/4-Construction-Properties.md:63
#: src/zk-snarks/4-Construction-Properties.md:65
#: src/zk-snarks/4-Construction-Properties.md:105
#: src/zk-snarks/4-Construction-Properties.md:113
#: src/zk-snarks/4-Construction-Properties.md:193
#: src/zk-snarks/4-Construction-Properties.md:195
#: src/zk-snarks/4-Construction-Properties.md:199
#: src/zk-snarks/4-Construction-Properties.md:203
#: src/zk-snarks/4-Construction-Properties.md:210
#: src/zk-snarks/4-Construction-Properties.md:212
#: src/zk-snarks/4-Construction-Properties.md:221
#: src/zk-snarks/4-Construction-Properties.md:244
#: src/zk-snarks/4-Construction-Properties.md:277
#: src/zk-snarks/4-Construction-Properties.md:298
#: src/zk-snarks/4-Construction-Properties.md:304
#: src/zk-snarks/4-Construction-Properties.md:309
#: src/zk-snarks/4-Construction-Properties.md:345
#: src/zk-snarks/4-Construction-Properties.md:407
#: src/zk-snarks/4-Construction-Properties.md:422
#: src/zk-snarks/5-Pinocchio-Protocol.md:87
#: src/zk-snarks/5-Pinocchio-Protocol.md:89
#: src/zk-snarks/5-Pinocchio-Protocol.md:136
#: src/zk-snarks/5-Pinocchio-Protocol.md:188
#: src/zk-snarks/5-Pinocchio-Protocol.md:192
#: src/zk-snarks/5-Pinocchio-Protocol.md:195
#: src/zk-snarks/5-Pinocchio-Protocol.md:198 src/zk-everything/BabySNARK
#: tutorial.md:127 tutorial.md:129 tutorial.md:145 tutorial.md:150
#: tutorial.md:165 src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:42 Zeroknowledge.md:238 Zeroknowledge.md:239
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:58
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:64
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:87
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:134
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:152
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:448
#: src/zk-everything/zk-everything-joe/Hyrax.md:58
#: src/zk-everything/zk-everything-joe/Hyrax.md:64
#: src/zk-everything/zk-everything-joe/Hyrax.md:70
#: src/zk-everything/zk-everything-joe/Hyrax.md:292
#: src/zk-everything/zk-everything-joe/Hyrax.md:302
#: src/zk-everything/zk-everything-joe/Spartan.md:319
#: src/zk-everything/zk-everything-joe/Spartan.md:350
#: src/zk-everything/zk-everything-joe/Spartan.md:394
#: src/zk-everything/zk-everything-joe/Spartan.md:406
#: src/zk-everything/zk-everything-joe/Spartan.md:411
#: src/zk-everything/zk-everything-joe/Spartan.md:428
#: src/zk-everything/zk-everything-joe/Spartan.md:436
#: src/zk-everything/zk-everything-joe/Spartan.md:450 src/Nova/SuperNova.md:14
#: src/public goods/第二章.md:9 goods/第二章.md:10 goods/第二章.md:12
#: goods/第二章.md:16 goods/第二章.md:17 goods/第二章.md:18
#: goods/第二章.md:19 goods/第二章.md:20 goods/第二章.md:25
#: goods/第二章.md:29 goods/第二章.md:33 goods/第二章.md:34
#: goods/第二章.md:35 goods/第二章.md:158
msgid "}"
msgstr "}"

#: src/plonk-intro-cn/plonk-lagrange-basis.md:34
#: src/plonk-intro-cn/plonk-lagrange-basis.md:78
#: src/plonk-intro-cn/plonk-lagrange-basis.md:109
#: src/plonk-intro-cn/plonk-permutation.md:19
#: src/plonk-intro-cn/plonk-lookup.md:113
msgid "，并且 "
msgstr "，并且 "

#: src/plonk-intro-cn/plonk-lagrange-basis.md:34
#: src/plonk-intro-cn/plonk-lagrange-basis.md:50
#: src/plonk-intro-cn/plonk-lagrange-basis.md:109
#: src/plonk-intro-cn/plonk-lagrange-basis.md:111
#: src/plonk-intro-cn/plonk-lagrange-basis.md:113
#: src/plonk-intro-cn/plonk-lagrange-basis.md:115
#: src/plonk-intro-cn/plonk-constraints.md:153
#: src/plonk-intro-cn/plonk-constraints.md:155
#: src/plonk-intro-cn/plonk-lookup.md:87 src/plonk-intro-cn/plonk-lookup.md:125
#: src/plonk-intro-cn/plonk-lookup.md:244
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:92
#: src/zk-snarks/4-Construction-Properties.md:193
#: src/zk-snarks/4-Construction-Properties.md:195
#: src/zk-everything/zk-everything-joe/Hyrax.md:276
#: src/zk-everything/zk-everything-joe/Spartan.md:118
#: src/zk-everything/zk-everything-joe/Spartan.md:344
#: src/zk-everything/zk-everything-joe/Spartan.md:350 src/Nova/SuperNova.md:12
#: src/Nova/SuperNova.md:17 src/public goods/4-Proving-System.md:209
msgid "j"
msgstr "j"

#: src/plonk-intro-cn/plonk-lagrange-basis.md:34
msgid "。然后 "
msgstr "。然后 "

#: src/plonk-intro-cn/plonk-lagrange-basis.md:34
msgid " 可以按如下方式编码："
msgstr " 可以按如下方式编码："

#: src/plonk-intro-cn/plonk-lagrange-basis.md:38
msgid "可以简单心算一下，当 "
msgstr "可以简单心算一下，当 "

#: src/plonk-intro-cn/plonk-lagrange-basis.md:38
msgid " 时，等式右边除了第一项之外，其他项都等于零，于是 "
msgstr " 时，等式右边除了第一项之外，其他项都等于零，于是 "

#: src/plonk-intro-cn/plonk-lagrange-basis.md:38
msgid "。看起来 "
msgstr "。看起来 "

#: src/plonk-intro-cn/plonk-lagrange-basis.md:38
msgid " 像是一个选择器，这组多项式又被称为 Lagrange Polynomials。"
msgstr " 像是一个选择器，这组多项式又被称为 Lagrange Polynomials。"

#: src/plonk-intro-cn/plonk-lagrange-basis.md:40
msgid "我们用同样的方法来编码 "
msgstr "我们用同样的方法来编码 "

#: src/plonk-intro-cn/plonk-lagrange-basis.md:44
msgid " 成立，那么 "
msgstr " 成立，那么 "

#: src/plonk-intro-cn/plonk-lagrange-basis.md:44
#: src/plonk-intro-cn/plonk-randomizing.md:104
#: src/plonk-intro-cn/plonk-lookup.md:125
#: src/plonk-intro-cn/plonk-lookup.md:244
msgid "。如果 "
msgstr "。如果 "

#: src/plonk-intro-cn/plonk-lagrange-basis.md:46
#: src/plonk-intro-cn/plonk-lagrange-basis.md:54
#: src/plonk-intro-cn/plonk-lagrange-basis.md:131
#: src/plonk-intro-cn/plonk-lagrange-basis.md:139
#: src/plonk-intro-cn/plonk-lagrange-basis.md:143
#: src/plonk-intro-cn/plonk-permutation.md:76
#: src/plonk-intro-cn/plonk-permutation.md:80
#: src/plonk-intro-cn/plonk-permutation.md:84
#: src/plonk-intro-cn/plonk-permutation.md:92
#: src/plonk-intro-cn/plonk-constraints.md:153
#: src/plonk-intro-cn/plonk-randomizing.md:51
#: src/plonk-intro-cn/plonk-lookup.md:59 src/plonk-intro-cn/plonk-lookup.md:63
#: src/plonk-intro-cn/plonk-lookup.md:69
#: src/zk-everything/zk-everything-joe/Spartan.md:406
#: src/zk-everything/zk-everything-joe/Spartan.md:411
#: src/zk-everything/zk-everything-joe/Spartan.md:422
#: src/zk-everything/zk-everything-joe/Spartan.md:428 src/public
#: goods/第二章.md:84 goods/第二章.md:89
msgid "∀"
msgstr "∀"

#: src/plonk-intro-cn/plonk-lagrange-basis.md:48
msgid ""
"我们现在已经把两个向量的按位乘积问题转换到了三个多项式之间的关系，接下来的问"
"题是如何进行随机挑战验证。"
msgstr ""
"我们现在已经把两个向量的按位乘积问题转换到了三个多项式之间的关系，接下来的问"
"题是如何进行随机挑战验证。"

#: src/plonk-intro-cn/plonk-lagrange-basis.md:50
msgid "我们发现：如果直接让 Verifier 发送随机数 "
msgstr "我们发现：如果直接让 Verifier 发送随机数 "

#: src/plonk-intro-cn/plonk-lagrange-basis.md:50
msgid " 挑战上面的等式，那么 "
msgstr " 挑战上面的等式，那么 "

#: src/plonk-intro-cn/plonk-lagrange-basis.md:50
msgid " 只能属于 "
msgstr " 只能属于 "

#: src/plonk-intro-cn/plonk-lagrange-basis.md:50
msgid "。如果只存在一个 "
msgstr "。如果只存在一个 "

#: src/plonk-intro-cn/plonk-lagrange-basis.md:50
#: src/zk-snarks/5-Pinocchio-Protocol.md:52 src/zk-everything/BabySNARK
#: tutorial.md:129
msgid " 使得 "
msgstr " 使得 "

#: src/plonk-intro-cn/plonk-lagrange-basis.md:50
msgid "，那么 Verifier 的一次挑战能发现这个错误的概率只有 "
msgstr "，那么 Verifier 的一次挑战能发现这个错误的概率只有 "

#: src/plonk-intro-cn/plonk-lagrange-basis.md:50
msgid ""
"，这样 Verifier 需要挑战多次才能缩小检测出错的概率。不过这样不满足我们的要"
"求，我们希望只通过一次挑战来检测出 Prover 的作弊行为。"
msgstr ""
"，这样 Verifier 需要挑战多次才能缩小检测出错的概率。不过这样不满足我们的要"
"求，我们希望只通过一次挑战来检测出 Prover 的作弊行为。"

#: src/plonk-intro-cn/plonk-lagrange-basis.md:52
msgid "我们可以把上面的等式的 "
msgstr "我们可以把上面的等式的 "

#: src/plonk-intro-cn/plonk-lagrange-basis.md:52
msgid " 取值范围去除，换成下面的等式："
msgstr " 取值范围去除，换成下面的等式："

#: src/plonk-intro-cn/plonk-lagrange-basis.md:54
#: src/plonk-intro-cn/plonk-lagrange-basis.md:62
#: src/plonk-intro-cn/plonk-lagrange-basis.md:64
#: src/plonk-intro-cn/plonk-lagrange-basis.md:66
#: src/plonk-intro-cn/plonk-lagrange-basis.md:70
#: src/plonk-intro-cn/plonk-lagrange-basis.md:76
#: src/plonk-intro-cn/plonk-lagrange-basis.md:101
#: src/plonk-intro-cn/plonk-lagrange-basis.md:135
#: src/plonk-intro-cn/plonk-lagrange-basis.md:147
#: src/plonk-intro-cn/plonk-lagrange-basis.md:172
#: src/plonk-intro-cn/plonk-permutation.md:96
#: src/plonk-intro-cn/plonk-permutation.md:98
#: src/plonk-intro-cn/plonk-permutation.md:196
#: src/plonk-intro-cn/plonk-permutation.md:198
#: src/plonk-intro-cn/plonk-permutation.md:204
#: src/plonk-intro-cn/plonk-permutation.md:206
#: src/plonk-intro-cn/plonk-permutation.md:208
#: src/plonk-intro-cn/plonk-permutation.md:212
#: src/plonk-intro-cn/plonk-constraints.md:23
#: src/plonk-intro-cn/plonk-constraints.md:25
#: src/plonk-intro-cn/plonk-constraints.md:27
#: src/plonk-intro-cn/plonk-constraints.md:29
#: src/plonk-intro-cn/plonk-constraints.md:87
#: src/plonk-intro-cn/plonk-constraints.md:89
#: src/plonk-intro-cn/plonk-constraints.md:91
#: src/plonk-intro-cn/plonk-constraints.md:93
#: src/plonk-intro-cn/plonk-constraints.md:95
#: src/plonk-intro-cn/plonk-constraints.md:97
#: src/plonk-intro-cn/plonk-constraints.md:99
#: src/plonk-intro-cn/plonk-constraints.md:101
#: src/plonk-intro-cn/plonk-constraints.md:103
#: src/plonk-intro-cn/plonk-constraints.md:167
#: src/plonk-intro-cn/plonk-constraints.md:169
#: src/plonk-intro-cn/plonk-constraints.md:175
#: src/plonk-intro-cn/plonk-constraints.md:181
#: src/plonk-intro-cn/plonk-constraints.md:187
#: src/plonk-intro-cn/plonk-constraints.md:194
#: src/plonk-intro-cn/plonk-constraints.md:199
#: src/plonk-intro-cn/plonk-randomizing.md:18
#: src/plonk-intro-cn/plonk-randomizing.md:21
#: src/plonk-intro-cn/plonk-randomizing.md:41
#: src/plonk-intro-cn/plonk-randomizing.md:45
#: src/plonk-intro-cn/plonk-randomizing.md:47
#: src/plonk-intro-cn/plonk-randomizing.md:55
#: src/plonk-intro-cn/plonk-randomizing.md:57
#: src/plonk-intro-cn/plonk-randomizing.md:73
#: src/plonk-intro-cn/plonk-randomizing.md:86
#: src/plonk-intro-cn/plonk-randomizing.md:95
#: src/plonk-intro-cn/plonk-randomizing.md:97
#: src/plonk-intro-cn/plonk-randomizing.md:99
#: src/plonk-intro-cn/plonk-randomizing.md:101
#: src/plonk-intro-cn/plonk-randomizing.md:103
#: src/plonk-intro-cn/plonk-randomizing.md:110
#: src/plonk-intro-cn/plonk-randomizing.md:112
#: src/plonk-intro-cn/plonk-randomizing.md:119
#: src/plonk-intro-cn/plonk-randomizing.md:121
#: src/plonk-intro-cn/plonk-randomizing.md:123
#: src/plonk-intro-cn/plonk-randomizing.md:125
#: src/plonk-intro-cn/plonk-randomizing.md:127
#: src/plonk-intro-cn/plonk-randomizing.md:133
#: src/plonk-intro-cn/plonk-lookup.md:67 src/plonk-intro-cn/plonk-lookup.md:69
#: src/plonk-intro-cn/plonk-lookup.md:85 src/plonk-intro-cn/plonk-lookup.md:87
#: src/plonk-intro-cn/plonk-lookup.md:93 src/plonk-intro-cn/plonk-lookup.md:97
#: src/plonk-intro-cn/plonk-lookup.md:101
#: src/plonk-intro-cn/plonk-lookup.md:171
#: src/plonk-intro-cn/plonk-lookup.md:173
#: src/plonk-intro-cn/plonk-lookup.md:190
#: src/plonk-intro-cn/plonk-lookup.md:192
#: src/plonk-intro-cn/plonk-lookup.md:194
#: src/plonk-intro-cn/plonk-lookup.md:196
#: src/plonk-intro-cn/plonk-lookup.md:198
#: src/plonk-intro-cn/plonk-lookup.md:200
#: src/plonk-intro-cn/plonk-lookup.md:212
#: src/plonk-intro-cn/plonk-lookup.md:214
#: src/plonk-intro-cn/plonk-lookup.md:226
#: src/plonk-intro-cn/plonk-lookup.md:228
#: src/plonk-intro-cn/plonk-lookup.md:232
#: src/plonk-intro-cn/plonk-lookup.md:234
#: src/plonk-intro-cn/plonk-lookup.md:238
#: src/plonk-intro-cn/plonk-lookup.md:283
#: src/plonk-intro-cn/plonk-lookup.md:285
#: src/plonk-intro-cn/plonk-lookup.md:291
#: src/plonk-intro-cn/plonk-lookup.md:293
#: src/plonk-intro-cn/plonk-lookup.md:304
#: src/plonk-intro-cn/plonk-lookup.md:306
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:24
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:29
#: src/zk-snarks/4-Construction-Properties.md:304
#: src/zk-snarks/4-Construction-Properties.md:306
#: src/zk-snarks/4-Construction-Properties.md:307
#: src/halo2/tmp/2-Fibonacci-example-1.md:19 src/halo2/tmp/9-decomposed.md:39
#: src/halo2/tmp/9-decomposed.md:42 src/halo2/tmp/9-decomposed.md:46
#: src/halo2/tmp/9-decomposed.md:104 src/halo2/tmp/9-decomposed.md:106
#: src/halo2/tmp/9-decomposed.md:108 src/halo2/tmp/9-decomposed.md:126
#: src/halo2/tmp/9-decomposed.md:130 src/halo2/tmp/9-decomposed.md:133
#: src/halo2/tmp/9-decomposed.md:141 src/halo2/tmp/9-decomposed.md:142
#: src/halo2/tmp/9-decomposed.md:143 src/halo2/tmp/9-decomposed.md:216
#: src/zk-everything/zk-learning-miles/KZG.md:110
#: src/zk-everything/zk-learning-miles/KZG.md:114
#: src/zk-everything/zk-learning-miles/KZG.md:203
#: src/zk-everything/zk-learning-miles/KZG.md:207
#: src/zk-everything/zk-learning-miles/KZG.md:209
#: src/zk-everything/zk-learning-miles/KZG.md:211
#: src/zk-everything/zk-learning-miles/KZG.md:222
#: src/zk-everything/zk-learning-miles/KZG.md:246
#: src/zk-everything/zk-learning-miles/KZG.md:248
#: src/zk-everything/zk-learning-miles/KZG.md:270
#: src/zk-everything/zk-learning-miles/KZG.md:272
#: src/zk-everything/zk-learning-miles/KZG.md:274
#: src/zk-everything/zk-learning-miles/KZG.md:276
#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:238 Zeroknowledge.md:239
#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:352 SNARKs.md:354 SNARKs.md:372 SNARKs.md:373 SNARKs.md:374
#: src/zk-everything/zk-everything-joe/Hyrax.md:223
#: src/zk-everything/zk-everything-joe/Hyrax.md:228
#: src/zk-everything/zk-everything-joe/Spartan.md:388
#: src/zk-everything/zk-everything-joe/Spartan.md:389
#: src/zk-everything/zk-everything-joe/Spartan.md:394
#: src/zk-everything/zk-everything-joe/Spartan.md:450
#: src/zk-everything/zk-everything-joe/Spartan.md:455
#: src/zk-everything/zk-everything-joe/Spartan.md:458 src/Nova/SuperNova.md:12
#: src/Nova/SuperNova.md:14 src/Nova/SuperNova.md:19 src/Nova/SuperNova.md:30
#: src/public goods/第二章.md:89 goods/第二章.md:91
msgid "z"
msgstr "z"

#: src/plonk-intro-cn/plonk-lagrange-basis.md:56
msgid "这个等式在整个 "
msgstr "这个等式在整个 "

#: src/plonk-intro-cn/plonk-lagrange-basis.md:56
msgid " 定义域上都成立。这是为何？"
msgstr " 定义域上都成立。这是为何？"

#: src/plonk-intro-cn/plonk-lagrange-basis.md:58
msgid "首先我们看等式左边的多项式： "
msgstr "首先我们看等式左边的多项式： "

#: src/plonk-intro-cn/plonk-lagrange-basis.md:58
msgid "，不妨定义为 "
msgstr "，不妨定义为 "

#: src/plonk-intro-cn/plonk-lagrange-basis.md:58
msgid "。我们可以看到 "
msgstr "。我们可以看到 "

#: src/plonk-intro-cn/plonk-lagrange-basis.md:58
#: src/plonk-intro-cn/plonk-lagrange-basis.md:115
#: src/plonk-intro-cn/plonk-polycom.md:35
#: src/plonk-intro-cn/plonk-polycom.md:67
#: src/plonk-intro-cn/plonk-polycom.md:103
#: src/plonk-intro-cn/plonk-polycom.md:157
#: src/plonk-intro-cn/plonk-polycom.md:179
#: src/plonk-intro-cn/plonk-randomizing.md:45
#: src/plonk-intro-cn/plonk-randomizing.md:151
#: src/plonk-intro-cn/plonk-lookup.md:61
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:160
#: src/halo2/tmp/1-Simple-Example.md:152 src/halo2/tmp/1-Simple-Example.md:553
msgid " 在 "
msgstr " 在 "

#: src/plonk-intro-cn/plonk-lagrange-basis.md:58
msgid " 上等于零，那么意味着 "
msgstr " 上等于零，那么意味着 "

#: src/plonk-intro-cn/plonk-lagrange-basis.md:58
msgid " 恰好是 "
msgstr " 恰好是 "

#: src/plonk-intro-cn/plonk-lagrange-basis.md:58
msgid " 的「根集合」。于是 "
msgstr " 的「根集合」。于是 "

#: src/plonk-intro-cn/plonk-lagrange-basis.md:58
msgid " 可以按照下面的方式进行因式分解："
msgstr " 可以按照下面的方式进行因式分解："

#: src/plonk-intro-cn/plonk-lagrange-basis.md:62
msgid "换个说法， "
msgstr "换个说法， "

#: src/plonk-intro-cn/plonk-lagrange-basis.md:62
msgid " 可以被多项式 "
msgstr " 可以被多项式 "

#: src/plonk-intro-cn/plonk-lagrange-basis.md:62
msgid " 整除，并得到一个商多项式 "
msgstr " 整除，并得到一个商多项式 "

#: src/plonk-intro-cn/plonk-lagrange-basis.md:62
msgid "。零多项式 "
msgstr "。零多项式 "

#: src/plonk-intro-cn/plonk-lagrange-basis.md:62
msgid " 又被称为 Vanishing Polynomial。"
msgstr " 又被称为 Vanishing Polynomial。"

#: src/plonk-intro-cn/plonk-lagrange-basis.md:64
msgid "如果我们让 Prover 计算出这个 "
msgstr "如果我们让 Prover 计算出这个 "

#: src/plonk-intro-cn/plonk-lagrange-basis.md:64
msgid "，并且发送给 Verifier，又因为 "
msgstr "，并且发送给 Verifier，又因为 "

#: src/plonk-intro-cn/plonk-lagrange-basis.md:64
msgid " 是已知的系统参数，Verifier 可以自行计算 "
msgstr " 是已知的系统参数，Verifier 可以自行计算 "

#: src/plonk-intro-cn/plonk-lagrange-basis.md:64
msgid "，那么 Verifier 只需要一次随机检测即可判断 "
msgstr "，那么 Verifier 只需要一次随机检测即可判断 "

#: src/plonk-intro-cn/plonk-lagrange-basis.md:64
msgid " 是否在 "
msgstr " 是否在 "

#: src/plonk-intro-cn/plonk-lagrange-basis.md:64
msgid " 处等零。"
msgstr " 处等零。"

#: src/plonk-intro-cn/plonk-lagrange-basis.md:68
msgid ""
"进一步，如果我们使用多项式承诺（Polynomial Commitment），Verifier 可以让 "
"Prover 来帮忙计算这些多项式在 "
msgstr ""
"进一步，如果我们使用多项式承诺（Polynomial Commitment），Verifier 可以让 "
"Prover 来帮忙计算这些多项式在 "

#: src/plonk-intro-cn/plonk-lagrange-basis.md:68
msgid ""
" 处的取值，发送并证明这些值的正确性，这样能最大限度地减少 Verifier 的工作量。"
msgstr ""
" 处的取值，发送并证明这些值的正确性，这样能最大限度地减少 Verifier 的工作量。"

#: src/plonk-intro-cn/plonk-lagrange-basis.md:70
msgid "但是， Verifier 计算 "
msgstr "但是， Verifier 计算 "

#: src/plonk-intro-cn/plonk-lagrange-basis.md:70
msgid " 需要 "
msgstr " 需要 "

#: src/plonk-intro-cn/plonk-lagrange-basis.md:70
msgid " 的计算量。"
msgstr " 的计算量。"

#: src/plonk-intro-cn/plonk-lagrange-basis.md:72
msgid "那能否让 Verifier 继续减少工作量？答案是可以的，只要我们选择特殊的 "
msgstr "那能否让 Verifier 继续减少工作量？答案是可以的，只要我们选择特殊的 "

#: src/plonk-intro-cn/plonk-lagrange-basis.md:72
#: src/plonk-intro-cn/plonk-constraints.md:153
msgid "⊂"
msgstr "⊂"

#: src/plonk-intro-cn/plonk-lagrange-basis.md:74
msgid "单位根 Roots of Unity"
msgstr "单位根 Roots of Unity"

#: src/plonk-intro-cn/plonk-lagrange-basis.md:76
msgid "如果我们选择单位根作为 "
msgstr "如果我们选择单位根作为 "

#: src/plonk-intro-cn/plonk-lagrange-basis.md:76
msgid " 的计算量会降为 "
msgstr " 的计算量会降为 "

#: src/plonk-intro-cn/plonk-lagrange-basis.md:76
#: src/plonk-intro-cn/plonk-lagrange-basis.md:123
#: src/plonk-intro-cn/plonk-lookup.md:33
#: src/zk-everything/zk-everything-joe/Spartan.md:312
#: src/zk-everything/zk-everything-joe/Spartan.md:323
msgid "lo"
msgstr "lo"

#: src/plonk-intro-cn/plonk-lagrange-basis.md:78
msgid "对于任何有限域 "
msgstr "对于任何有限域 "

#: src/plonk-intro-cn/plonk-lagrange-basis.md:78
#: src/plonk-intro-cn/plonk-permutation.md:48
#: src/plonk-intro-cn/plonk-permutation.md:58
#: src/plonk-intro-cn/plonk-permutation.md:82
#: src/plonk-intro-cn/plonk-permutation.md:84
#: src/plonk-intro-cn/plonk-permutation.md:86
#: src/plonk-intro-cn/plonk-permutation.md:88
#: src/plonk-intro-cn/plonk-permutation.md:114
#: src/plonk-intro-cn/plonk-permutation.md:116
#: src/plonk-intro-cn/plonk-permutation.md:120
#: src/plonk-intro-cn/plonk-permutation.md:122
#: src/plonk-intro-cn/plonk-permutation.md:124
#: src/plonk-intro-cn/plonk-permutation.md:128
#: src/plonk-intro-cn/plonk-permutation.md:134
#: src/plonk-intro-cn/plonk-constraints.md:155
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:24
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:26
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:114
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:115
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:118
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:120
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:130
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:138
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:139
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:143
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:144
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:146
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:148
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:150
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:158
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:159
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:166
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:316
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:317
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:331
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:332
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:333
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:335
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:341
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:342
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:343
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:24
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:26
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:29
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:30
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:32
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:46
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:79
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:81
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:82
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:85
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:107
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:108
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:111
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:112
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:116
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:122
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:123
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:126
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:128
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:191
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:193
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:194
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:196
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:197
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:198
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:269
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:270
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:271
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:272
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:274
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:277
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:279
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:280
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:281
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:282
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:283
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:286
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:287
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:289
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:293
#: src/zk-snarks/3-General-Purpose-Computation.md:81
#: src/zk-snarks/3-General-Purpose-Computation.md:90
#: src/zk-snarks/3-General-Purpose-Computation.md:96
#: src/zk-snarks/3-General-Purpose-Computation.md:98
#: src/zk-snarks/3-General-Purpose-Computation.md:137
#: src/zk-snarks/3-General-Purpose-Computation.md:155
#: src/zk-snarks/3-General-Purpose-Computation.md:180
#: src/zk-snarks/3-General-Purpose-Computation.md:233
#: src/zk-snarks/3-General-Purpose-Computation.md:279
#: src/zk-snarks/3-General-Purpose-Computation.md:306
#: src/zk-snarks/3-General-Purpose-Computation.md:369
#: src/zk-snarks/4-Construction-Properties.md:46
#: src/zk-snarks/4-Construction-Properties.md:95
#: src/zk-snarks/4-Construction-Properties.md:271
#: src/zk-snarks/5-Pinocchio-Protocol.md:84
#: src/zk-snarks/5-Pinocchio-Protocol.md:85
#: src/zk-snarks/5-Pinocchio-Protocol.md:92
#: src/zk-snarks/5-Pinocchio-Protocol.md:94
#: src/zk-snarks/5-Pinocchio-Protocol.md:102
#: src/zk-snarks/5-Pinocchio-Protocol.md:103
#: src/zk-snarks/5-Pinocchio-Protocol.md:106
#: src/zk-snarks/5-Pinocchio-Protocol.md:109
#: src/zk-snarks/5-Pinocchio-Protocol.md:129
#: src/zk-snarks/5-Pinocchio-Protocol.md:131
#: src/zk-snarks/5-Pinocchio-Protocol.md:139
#: src/zk-snarks/5-Pinocchio-Protocol.md:168
#: src/zk-snarks/5-Pinocchio-Protocol.md:170
#: src/zk-snarks/5-Pinocchio-Protocol.md:204
#: src/zk-snarks/5-Pinocchio-Protocol.md:205
#: src/zk-snarks/5-Pinocchio-Protocol.md:209
#: src/zk-snarks/5-Pinocchio-Protocol.md:212
#: src/zk-snarks/5-Pinocchio-Protocol.md:215
#: src/zk-snarks/5-Pinocchio-Protocol.md:218
#: src/zk-snarks/5-Pinocchio-Protocol.md:219
#: src/zk-snarks/5-Pinocchio-Protocol.md:222
#: src/zk-snarks/5-Pinocchio-Protocol.md:225 src/zk-everything/BabySNARK
#: tutorial.md:129 tutorial.md:131 tutorial.md:145 tutorial.md:148
#: src/zk-everything/zk-learning-miles/KZG.md:10
#: src/zk-everything/zk-learning-miles/KZG.md:12
#: src/zk-everything/zk-learning-miles/KZG.md:41
#: src/zk-everything/zk-learning-miles/KZG.md:114
#: src/zk-everything/zk-learning-miles/KZG.md:120
#: src/zk-everything/zk-learning-miles/KZG.md:203
#: src/zk-everything/zk-learning-miles/KZG.md:222
#: src/zk-everything/zk-learning-miles/KZG.md:262
#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:197 SNARKs.md:198 SNARKs.md:269 SNARKs.md:270 SNARKs.md:273
#: SNARKs.md:276 SNARKs.md:284 SNARKs.md:310 SNARKs.md:312 SNARKs.md:316
#: SNARKs.md:324 SNARKs.md:379 SNARKs.md:381 SNARKs.md:383 SNARKs.md:403
#: SNARKs.md:408
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:101
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:526
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:530
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:538
#: src/Nova/SuperNova.md:14 src/Nova/SuperNova.md:19 src/Nova/SuperNova.md:30
#: src/Nova/SuperNova.md:66 src/Nova/SuperNova.md:68 src/public
#: goods/第二章.md:80 goods/第二章.md:103 goods/第二章.md:125
#: goods/第二章.md:146 goods/第二章.md:156 goods/第二章.md:158
#: goods/4-Proving-System.md:106 goods/4-Proving-System.md:126
#: goods/4-Proving-System.md:193 goods/4-Proving-System.md:195
#: goods/4-Proving-System.md:202 goods/4-Proving-System.md:207
#: goods/4-Proving-System.md:209
msgid "p"
msgstr "p"

#: src/plonk-intro-cn/plonk-lagrange-basis.md:78
msgid "，其中阶数 "
msgstr "，其中阶数 "

#: src/plonk-intro-cn/plonk-lagrange-basis.md:78
msgid " 为素数。那么去除零之后剩下的元素构成了乘法群 "
msgstr " 为素数。那么去除零之后剩下的元素构成了乘法群 "

#: src/plonk-intro-cn/plonk-lagrange-basis.md:78
#: src/plonk-intro-cn/plonk-lagrange-basis.md:170
#: src/plonk-intro-cn/plonk-constraints.md:155
#: src/plonk-intro-cn/plonk-polycom.md:109
#: src/plonk-intro-cn/plonk-polycom.md:117
#: src/plonk-intro-cn/plonk-lookup.md:125
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:333
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:149
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:164
#: src/halo2/chap-1/index.md:11 src/halo2/tmp/9-decomposed.md:42
#: src/halo2/tmp/9-decomposed.md:46 src/halo2/tmp/9-decomposed.md:53
#: src/halo2/tmp/9-decomposed.md:101 src/halo2/tmp/9-decomposed.md:106
#: src/halo2/tmp/9-decomposed.md:108 src/halo2/tmp/9-decomposed.md:126
#: src/halo2/tmp/9-decomposed.md:130 src/halo2/tmp/9-decomposed.md:216
#: src/zk-everything/zk-learning-miles/KZG.md:106
#: src/zk-everything/zk-learning-miles/KZG.md:262
#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:42 Zeroknowledge.md:238 Zeroknowledge.md:239
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:64
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:134
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:152
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:204
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:212
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:246
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:255
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:292
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:301
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:336
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:343
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:390
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:396
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:448
#: src/zk-everything/zk-everything-joe/Hyrax.md:58
#: src/zk-everything/zk-everything-joe/Hyrax.md:64
#: src/zk-everything/zk-everything-joe/Hyrax.md:70
#: src/zk-everything/zk-everything-joe/Hyrax.md:207
#: src/zk-everything/zk-everything-joe/Hyrax.md:208
#: src/zk-everything/zk-everything-joe/Hyrax.md:213
#: src/zk-everything/zk-everything-joe/Hyrax.md:214
#: src/zk-everything/zk-everything-joe/Hyrax.md:223
#: src/zk-everything/zk-everything-joe/Hyrax.md:228
#: src/zk-everything/zk-everything-joe/Spartan.md:394 src/public
#: goods/第二章.md:10 goods/第二章.md:107 goods/4-Proving-System.md:56
#: goods/4-Proving-System.md:58 goods/4-Proving-System.md:62
msgid "∗"
msgstr "∗"

#: src/plonk-intro-cn/plonk-lagrange-basis.md:78
msgid "，阶数为 "
msgstr "，阶数为 "

#: src/plonk-intro-cn/plonk-lagrange-basis.md:78
msgid "。由于 "
msgstr "。由于 "

#: src/plonk-intro-cn/plonk-lagrange-basis.md:78
msgid " 一定为偶数，那么 "
msgstr " 一定为偶数，那么 "

#: src/plonk-intro-cn/plonk-lagrange-basis.md:78
msgid " 的乘法因子中一定包含若干个 "
msgstr " 的乘法因子中一定包含若干个 "

#: src/plonk-intro-cn/plonk-lagrange-basis.md:78
msgid "，假设记为 "
msgstr "，假设记为 "

#: src/plonk-intro-cn/plonk-lagrange-basis.md:78
#: src/plonk-intro-cn/plonk-constraints.md:155
#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:197 SNARKs.md:253
msgid "λ"
msgstr "λ"

#: src/plonk-intro-cn/plonk-lagrange-basis.md:78 src/zk-everything/BabySNARK
#: tutorial.md:129
msgid " 个 "
msgstr " 个 "

#: src/plonk-intro-cn/plonk-lagrange-basis.md:78
#: src/plonk-intro-cn/plonk-lookup.md:139
msgid "。那么 "
msgstr "。那么 "

#: src/plonk-intro-cn/plonk-lagrange-basis.md:78
msgid " 一定包含一个阶数为 "
msgstr " 一定包含一个阶数为 "

#: src/plonk-intro-cn/plonk-lagrange-basis.md:78
msgid " 的乘法子群。不妨设 "
msgstr " 的乘法子群。不妨设 "

#: src/plonk-intro-cn/plonk-lagrange-basis.md:78
#: src/plonk-intro-cn/plonk-permutation.md:68
#: src/plonk-intro-cn/plonk-permutation.md:72
#: src/plonk-intro-cn/plonk-constraints.md:145
#: src/plonk-intro-cn/plonk-constraints.md:147
#: src/plonk-intro-cn/plonk-constraints.md:149
#: src/plonk-intro-cn/plonk-constraints.md:153
#: src/plonk-intro-cn/plonk-constraints.md:155
#: src/plonk-intro-cn/plonk-constraints.md:191
#: src/plonk-intro-cn/plonk-randomizing.md:13
#: src/plonk-intro-cn/plonk-randomizing.md:73
#: src/plonk-intro-cn/plonk-randomizing.md:77
#: src/plonk-intro-cn/plonk-randomizing.md:97
#: src/plonk-intro-cn/plonk-randomizing.md:117
#: src/plonk-intro-cn/plonk-randomizing.md:123
#: src/plonk-intro-cn/plonk-randomizing.md:125
#: src/plonk-intro-cn/plonk-lookup.md:131
#: src/plonk-intro-cn/plonk-lookup.md:137
#: src/plonk-intro-cn/plonk-lookup.md:139
#: src/plonk-intro-cn/plonk-lookup.md:167
#: src/zk-snarks/3-General-Purpose-Computation.md:366
#: src/zk-snarks/4-Construction-Properties.md:199
#: src/zk-snarks/4-Construction-Properties.md:210
#: src/zk-snarks/4-Construction-Properties.md:271
#: src/zk-snarks/4-Construction-Properties.md:422
#: src/zk-snarks/5-Pinocchio-Protocol.md:87
#: src/zk-snarks/5-Pinocchio-Protocol.md:192 src/halo2/tmp/9-decomposed.md:139
#: src/halo2/tmp/9-decomposed.md:142 src/halo2/tmp/9-decomposed.md:146
#: src/zk-everything/zk-learning-miles/KZG.md:183
#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:207
#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:270 src/zk-everything/zk-everything-joe/Hyrax.md:292
#: src/zk-everything/zk-everything-joe/Hyrax.md:297
#: src/zk-everything/zk-everything-joe/Hyrax.md:302
#: src/zk-everything/zk-everything-joe/Hyrax.md:314
#: src/zk-everything/zk-everything-joe/Hyrax.md:315
#: src/zk-everything/zk-everything-joe/Spartan.md:350 src/Nova/SuperNova.md:14
#: src/public goods/第二章.md:12 goods/第二章.md:17 goods/第二章.md:29
#: goods/第二章.md:72 goods/第二章.md:146 goods/第二章.md:156
#: goods/第二章.md:158 goods/第二章.md:160 goods/第二章.md:162
#: goods/第二章.md:164 goods/第二章.md:177 goods/4-Proving-System.md:53
#: goods/4-Proving-System.md:62 goods/4-Proving-System.md:105
#: goods/4-Proving-System.md:107 goods/4-Proving-System.md:125
#: goods/4-Proving-System.md:127 goods/4-Proving-System.md:131
#: goods/4-Proving-System.md:155 goods/4-Proving-System.md:157
msgid "k"
msgstr "k"

#: src/plonk-intro-cn/plonk-lagrange-basis.md:78
msgid "，那么一定存在一个阶数为 "
msgstr "，那么一定存在一个阶数为 "

#: src/plonk-intro-cn/plonk-lagrange-basis.md:78
msgid " 的乘法子群，记为 "
msgstr " 的乘法子群，记为 "

#: src/plonk-intro-cn/plonk-lagrange-basis.md:78
msgid "。 该乘法子群必然含有一个生成元，记为 "
msgstr "。 该乘法子群必然含有一个生成元，记为 "

#: src/plonk-intro-cn/plonk-lagrange-basis.md:78
#: src/plonk-intro-cn/plonk-lagrange-basis.md:80
#: src/plonk-intro-cn/plonk-lagrange-basis.md:82
#: src/plonk-intro-cn/plonk-lagrange-basis.md:83
#: src/plonk-intro-cn/plonk-lagrange-basis.md:85
#: src/plonk-intro-cn/plonk-lagrange-basis.md:91
#: src/plonk-intro-cn/plonk-lagrange-basis.md:93
#: src/plonk-intro-cn/plonk-lagrange-basis.md:95
#: src/plonk-intro-cn/plonk-lagrange-basis.md:101
#: src/plonk-intro-cn/plonk-lagrange-basis.md:103
#: src/plonk-intro-cn/plonk-lagrange-basis.md:105
#: src/plonk-intro-cn/plonk-lagrange-basis.md:111
#: src/plonk-intro-cn/plonk-lagrange-basis.md:113
#: src/plonk-intro-cn/plonk-lagrange-basis.md:115
#: src/plonk-intro-cn/plonk-lagrange-basis.md:151
#: src/plonk-intro-cn/plonk-lagrange-basis.md:153
#: src/plonk-intro-cn/plonk-permutation.md:80
#: src/plonk-intro-cn/plonk-permutation.md:92
#: src/plonk-intro-cn/plonk-permutation.md:96
#: src/plonk-intro-cn/plonk-permutation.md:98
#: src/plonk-intro-cn/plonk-permutation.md:204
#: src/plonk-intro-cn/plonk-permutation.md:208
#: src/plonk-intro-cn/plonk-permutation.md:212
#: src/plonk-intro-cn/plonk-constraints.md:27
#: src/plonk-intro-cn/plonk-constraints.md:29
#: src/plonk-intro-cn/plonk-constraints.md:93
#: src/plonk-intro-cn/plonk-constraints.md:99
#: src/plonk-intro-cn/plonk-constraints.md:101
#: src/plonk-intro-cn/plonk-constraints.md:103
#: src/plonk-intro-cn/plonk-constraints.md:143
#: src/plonk-intro-cn/plonk-constraints.md:145
#: src/plonk-intro-cn/plonk-constraints.md:153
#: src/plonk-intro-cn/plonk-constraints.md:169
#: src/plonk-intro-cn/plonk-constraints.md:175
#: src/plonk-intro-cn/plonk-constraints.md:187
#: src/plonk-intro-cn/plonk-constraints.md:199
#: src/plonk-intro-cn/plonk-randomizing.md:15
#: src/plonk-intro-cn/plonk-randomizing.md:21
#: src/plonk-intro-cn/plonk-randomizing.md:101
#: src/plonk-intro-cn/plonk-randomizing.md:106
#: src/plonk-intro-cn/plonk-randomizing.md:117
#: src/plonk-intro-cn/plonk-randomizing.md:121
#: src/plonk-intro-cn/plonk-randomizing.md:123
#: src/plonk-intro-cn/plonk-randomizing.md:125
#: src/plonk-intro-cn/plonk-lookup.md:59 src/plonk-intro-cn/plonk-lookup.md:67
#: src/plonk-intro-cn/plonk-lookup.md:93 src/plonk-intro-cn/plonk-lookup.md:97
#: src/plonk-intro-cn/plonk-lookup.md:101
#: src/plonk-intro-cn/plonk-lookup.md:200
#: src/plonk-intro-cn/plonk-lookup.md:238
#: src/plonk-intro-cn/plonk-lookup.md:277
#: src/plonk-intro-cn/plonk-lookup.md:285
#: src/plonk-intro-cn/plonk-lookup.md:293
#: src/plonk-intro-cn/plonk-lookup.md:297
#: src/plonk-intro-cn/plonk-lookup.md:304
#: src/plonk-intro-cn/plonk-lookup.md:306
#: src/zk-snarks/3-General-Purpose-Computation.md:158
#: src/zk-snarks/3-General-Purpose-Computation.md:182
#: src/halo2/tmp/3-Fibonacci-example-2.md:84
#: src/halo2/tmp/3-Fibonacci-example-2.md:269
#: src/zk-everything/zk-everything-joe/Hyrax.md:284
#: src/zk-everything/zk-everything-joe/Hyrax.md:324 src/Nova/SuperNova.md:14
#: src/public goods/第二章.md:156 goods/第二章.md:158
#: goods/第二章.md:160 goods/第二章.md:162
msgid "ω"
msgstr "ω"

#: src/plonk-intro-cn/plonk-lagrange-basis.md:78
msgid "。这相当于把 "
msgstr "。这相当于把 "

#: src/plonk-intro-cn/plonk-lagrange-basis.md:78
msgid " 开 "
msgstr " 开 "

#: src/plonk-intro-cn/plonk-lagrange-basis.md:78
msgid " 次方根，因此被称为单位根。不过单位根不只有一个 "
msgstr " 次方根，因此被称为单位根。不过单位根不只有一个 "

#: src/plonk-intro-cn/plonk-lagrange-basis.md:78
msgid "，我们会发现 "
msgstr "，我们会发现 "

#: src/plonk-intro-cn/plonk-lagrange-basis.md:78
msgid " 都满足单位根的特性，即 "
msgstr " 都满足单位根的特性，即 "

#: src/plonk-intro-cn/plonk-lagrange-basis.md:78
msgid "。那么所有这些由 "
msgstr "。那么所有这些由 "

#: src/plonk-intro-cn/plonk-lagrange-basis.md:78
msgid " 产生的单位根就组成了乘法子群 "
msgstr " 产生的单位根就组成了乘法子群 "

#: src/plonk-intro-cn/plonk-lagrange-basis.md:82
msgid "这些元素满足一定的对称性：比如 "
msgstr "这些元素满足一定的对称性：比如 "

#: src/plonk-intro-cn/plonk-lagrange-basis.md:82
#: src/plonk-intro-cn/plonk-constraints.md:69
#: src/plonk-intro-cn/plonk-lookup.md:81 src/plonk-intro-cn/plonk-lookup.md:115
#: src/plonk-intro-cn/plonk-lookup.md:129
#: src/zk-snarks/3-General-Purpose-Computation.md:143
msgid " ， "
msgstr " ， "

#: src/plonk-intro-cn/plonk-lagrange-basis.md:83
msgid "。又比如把所有的单位根求和，我们会得到零："
msgstr "。又比如把所有的单位根求和，我们会得到零："

#: src/plonk-intro-cn/plonk-lagrange-basis.md:85
#: src/plonk-intro-cn/plonk-randomizing.md:149
#: src/plonk-intro-cn/plonk-lookup.md:87
#: src/zk-snarks/4-Construction-Properties.md:67
#: src/zk-snarks/4-Construction-Properties.md:205
#: src/zk-snarks/5-Pinocchio-Protocol.md:45
#: src/zk-snarks/5-Pinocchio-Protocol.md:199 src/zk-everything/BabySNARK
#: tutorial.md:131 tutorial.md:148
#: src/zk-everything/zk-learning-miles/KZG.md:12
#: src/zk-everything/zk-learning-miles/KZG.md:96
#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:296 src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:58
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:64
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:134
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:152
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:448
#: src/zk-everything/zk-everything-joe/Hyrax.md:58
#: src/zk-everything/zk-everything-joe/Hyrax.md:64
#: src/zk-everything/zk-everything-joe/Hyrax.md:70
#: src/zk-everything/zk-everything-joe/Hyrax.md:140
#: src/zk-everything/zk-everything-joe/Hyrax.md:162
#: src/zk-everything/zk-everything-joe/Hyrax.md:168
#: src/zk-everything/zk-everything-joe/Hyrax.md:181
#: src/zk-everything/zk-everything-joe/Hyrax.md:191
#: src/zk-everything/zk-everything-joe/Hyrax.md:195
#: src/zk-everything/zk-everything-joe/Hyrax.md:208
#: src/zk-everything/zk-everything-joe/Hyrax.md:214
#: src/zk-everything/zk-everything-joe/Hyrax.md:223
#: src/zk-everything/zk-everything-joe/Hyrax.md:228
#: src/zk-everything/zk-everything-joe/Hyrax.md:292
#: src/zk-everything/zk-everything-joe/Hyrax.md:302
#: src/zk-everything/zk-everything-joe/Hyrax.md:314
#: src/zk-everything/zk-everything-joe/Spartan.md:319
#: src/zk-everything/zk-everything-joe/Spartan.md:339
#: src/zk-everything/zk-everything-joe/Spartan.md:350
#: src/zk-everything/zk-everything-joe/Spartan.md:394
#: src/zk-everything/zk-everything-joe/Spartan.md:411
#: src/zk-everything/zk-everything-joe/Spartan.md:436
#: src/zk-everything/zk-everything-joe/Spartan.md:450 src/Nova/SuperNova.md:66
#: src/public goods/第二章.md:170
msgid "∑"
msgstr "∑"

#: src/plonk-intro-cn/plonk-lagrange-basis.md:87
msgid "举一个简单的例子，我们可以在 "
msgstr "举一个简单的例子，我们可以在 "

#: src/plonk-intro-cn/plonk-lagrange-basis.md:87
#: src/plonk-intro-cn/plonk-lagrange-basis.md:89
#: src/plonk-intro-cn/plonk-lagrange-basis.md:161
#: src/plonk-intro-cn/plonk-lagrange-basis.md:170
#: src/zk-snarks/3-General-Purpose-Computation.md:149
#: src/zk-snarks/4-Construction-Properties.md:137
#: src/halo2/tmp/9-decomposed.md:188
msgid "13"
msgstr "13"

#: src/plonk-intro-cn/plonk-lagrange-basis.md:87
msgid " 中找到一个阶数为 "
msgstr " 中找到一个阶数为 "

#: src/plonk-intro-cn/plonk-lagrange-basis.md:87
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:166
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:324
#: src/zk-snarks/5-Pinocchio-Protocol.md:83
#: src/zk-snarks/5-Pinocchio-Protocol.md:84
msgid " 的 "
msgstr " 的 "

#: src/plonk-intro-cn/plonk-lagrange-basis.md:87
msgid "。 "
msgstr "。 "

#: src/plonk-intro-cn/plonk-lagrange-basis.md:89
#: src/plonk-intro-cn/plonk-permutation.md:108
#: src/plonk-intro-cn/plonk-constraints.md:63
#: src/plonk-intro-cn/plonk-constraints.md:67
#: src/plonk-intro-cn/plonk-constraints.md:120
#: src/plonk-intro-cn/plonk-lookup.md:19 src/plonk-intro-cn/plonk-lookup.md:61
#: src/plonk-intro-cn/plonk-lookup.md:131
#: src/zk-snarks/3-General-Purpose-Computation.md:182
#: src/halo2/tmp/2-Fibonacci-example-1.md:19 src/halo2/tmp/9-decomposed.md:184
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:194
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:246
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:255
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:292
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:301
msgid "9"
msgstr "9"

#: src/plonk-intro-cn/plonk-lagrange-basis.md:89
#: src/plonk-intro-cn/plonk-constraints.md:63
#: src/plonk-intro-cn/plonk-constraints.md:67
#: src/plonk-intro-cn/plonk-constraints.md:120
#: src/zk-snarks/4-Construction-Properties.md:371
#: src/zk-snarks/4-Construction-Properties.md:374
#: src/zk-snarks/4-Construction-Properties.md:375
#: src/zk-snarks/4-Construction-Properties.md:377
#: src/zk-snarks/4-Construction-Properties.md:379
#: src/zk-snarks/4-Construction-Properties.md:381
#: src/halo2/tmp/9-decomposed.md:22 src/halo2/tmp/9-decomposed.md:185
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:204
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:212
#: src/zk-everything/zk-everything-joe/Spartan.md:416 src/Nova/SuperNova.md:66
msgid "10"
msgstr "10"

#: src/plonk-intro-cn/plonk-lagrange-basis.md:89
#: src/plonk-intro-cn/plonk-constraints.md:63
#: src/plonk-intro-cn/plonk-constraints.md:67
#: src/plonk-intro-cn/plonk-constraints.md:120
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:258
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:261
#: src/zk-snarks/5-Pinocchio-Protocol.md:29 src/halo2/tmp/9-decomposed.md:186
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:204
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:212
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:246
#: src/zk-everything/zk-everything-joe/Spartan.md:377
#: src/zk-everything/zk-everything-joe/Spartan.md:416
msgid "11"
msgstr "11"

#: src/plonk-intro-cn/plonk-lagrange-basis.md:89
#: src/plonk-intro-cn/plonk-lagrange-basis.md:93
#: src/plonk-intro-cn/plonk-lagrange-basis.md:161
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:186
#: src/zk-snarks/3-General-Purpose-Computation.md:141
#: src/zk-snarks/3-General-Purpose-Computation.md:143
#: src/zk-snarks/4-Construction-Properties.md:155
#: src/zk-snarks/4-Construction-Properties.md:178
#: src/halo2/tmp/9-decomposed.md:187
msgid "12"
msgstr "12"

#: src/plonk-intro-cn/plonk-lagrange-basis.md:91
msgid "其中乘法群的生成元为 "
msgstr "其中乘法群的生成元为 "

#: src/plonk-intro-cn/plonk-lagrange-basis.md:91
msgid "。由于 13-1=3\\*2\\*2，所以存在一个阶数为 "
msgstr "。由于 13-1=3\\*2\\*2，所以存在一个阶数为 "

#: src/plonk-intro-cn/plonk-lagrange-basis.md:91
msgid " 的乘法子群，其生成元为 "
msgstr " 的乘法子群，其生成元为 "

#: src/plonk-intro-cn/plonk-lagrange-basis.md:95
#: src/plonk-intro-cn/plonk-polycom.md:61
msgid "而 "
msgstr "而 "

#: src/plonk-intro-cn/plonk-lagrange-basis.md:97
msgid ""
"在实际应用中，我们会选择一个较大的有限域，它能有一个较大的 Powers-of-2 乘法子"
"群。比如椭圆曲线 `BN254` 的 Scalar Field，含有一个阶数为 "
msgstr ""
"在实际应用中，我们会选择一个较大的有限域，它能有一个较大的 Powers-of-2 乘法子"
"群。比如椭圆曲线 `BN254` 的 Scalar Field，含有一个阶数为 "

#: src/plonk-intro-cn/plonk-lagrange-basis.md:97
msgid "28"
msgstr "28"

#: src/plonk-intro-cn/plonk-lagrange-basis.md:97
msgid " 的乘法子群，`BLS-12-381` 的Scalar Field 含有一个阶数为 "
msgstr " 的乘法子群，`BLS-12-381` 的Scalar Field 含有一个阶数为 "

#: src/plonk-intro-cn/plonk-lagrange-basis.md:97
#: src/halo2/tmp/halo2-learning-materials.md:42
msgid "32"
msgstr "32"

#: src/plonk-intro-cn/plonk-lagrange-basis.md:97
msgid " 的乘法子群。"
msgstr " 的乘法子群。"

#: src/plonk-intro-cn/plonk-lagrange-basis.md:99
msgid "在乘法子群 "
msgstr "在乘法子群 "

#: src/plonk-intro-cn/plonk-lagrange-basis.md:99
msgid " 上，具有下面的性质："
msgstr " 上，具有下面的性质："

#: src/plonk-intro-cn/plonk-lagrange-basis.md:101
#: src/plonk-intro-cn/plonk-lagrange-basis.md:111
#: src/plonk-intro-cn/plonk-lagrange-basis.md:113
#: src/plonk-intro-cn/plonk-permutation.md:68
#: src/plonk-intro-cn/plonk-permutation.md:116
#: src/plonk-intro-cn/plonk-permutation.md:124
#: src/plonk-intro-cn/plonk-permutation.md:128
#: src/plonk-intro-cn/plonk-constraints.md:17
#: src/plonk-intro-cn/plonk-constraints.md:21
#: src/plonk-intro-cn/plonk-constraints.md:27
#: src/plonk-intro-cn/plonk-constraints.md:81
#: src/plonk-intro-cn/plonk-constraints.md:85
#: src/plonk-intro-cn/plonk-lookup.md:87 src/plonk-intro-cn/plonk-lookup.md:149
#: src/plonk-intro-cn/plonk-lookup.md:157
#: src/zk-snarks/4-Construction-Properties.md:207
#: src/zk-snarks/4-Construction-Properties.md:209
#: src/zk-snarks/4-Construction-Properties.md:249
#: src/zk-snarks/4-Construction-Properties.md:307
#: src/zk-snarks/4-Construction-Properties.md:345
#: src/zk-snarks/4-Construction-Properties.md:428
#: src/zk-snarks/5-Pinocchio-Protocol.md:97
#: src/zk-snarks/5-Pinocchio-Protocol.md:106
#: src/zk-snarks/5-Pinocchio-Protocol.md:204
#: src/zk-snarks/5-Pinocchio-Protocol.md:207
#: src/zk-snarks/5-Pinocchio-Protocol.md:214
#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:407 src/zk-everything/zk-everything-joe/Hyrax.md:292
#: src/zk-everything/zk-everything-joe/Hyrax.md:297
#: src/zk-everything/zk-everything-joe/Hyrax.md:302
#: src/zk-everything/zk-everything-joe/Spartan.md:350
#: src/zk-everything/zk-everything-joe/Spartan.md:411
#: src/zk-everything/zk-everything-joe/Spartan.md:436 src/public
#: goods/第二章.md:54 goods/第二章.md:56 goods/第二章.md:160
#: goods/第二章.md:162 goods/第二章.md:171
msgid "∏"
msgstr "∏"

#: src/plonk-intro-cn/plonk-lagrange-basis.md:103
msgid "我们可以进行简单的推导，假设 "
msgstr "我们可以进行简单的推导，假设 "

#: src/plonk-intro-cn/plonk-lagrange-basis.md:103
msgid "，由于 "
msgstr "，由于 "

#: src/plonk-intro-cn/plonk-lagrange-basis.md:103
msgid " 的对称性，这个计算过程可以不断化简："
msgstr " 的对称性，这个计算过程可以不断化简："

#: src/plonk-intro-cn/plonk-lagrange-basis.md:107
msgid "Lagrange Basis"
msgstr "Lagrange Basis"

#: src/plonk-intro-cn/plonk-lagrange-basis.md:109
msgid "对于 Lagrange 多项式， "
msgstr "对于 Lagrange 多项式， "

#: src/plonk-intro-cn/plonk-lagrange-basis.md:109
msgid "。接下来，我们给出 "
msgstr "。接下来，我们给出 "

#: src/plonk-intro-cn/plonk-lagrange-basis.md:109
msgid " 的构造。"
msgstr " 的构造。"

#: src/plonk-intro-cn/plonk-lagrange-basis.md:111
msgid "为了构造 "
msgstr "为了构造 "

#: src/plonk-intro-cn/plonk-lagrange-basis.md:111
msgid "，先构造不等于零的多项式部分。由于 "
msgstr "，先构造不等于零的多项式部分。由于 "

#: src/plonk-intro-cn/plonk-lagrange-basis.md:111
msgid "，因此他一定包含 "
msgstr "，因此他一定包含 "

#: src/plonk-intro-cn/plonk-lagrange-basis.md:111
msgid " 这个多项式因子。但该因子显然在 "
msgstr " 这个多项式因子。但该因子显然在 "

#: src/plonk-intro-cn/plonk-lagrange-basis.md:111
msgid " 处可能不等于 "
msgstr " 处可能不等于 "

#: src/plonk-intro-cn/plonk-lagrange-basis.md:111
msgid "，即可能 "
msgstr "，即可能 "

#: src/plonk-intro-cn/plonk-lagrange-basis.md:111
msgid "。然后，我们只要让该因子除以这个可能不等于 "
msgstr "。然后，我们只要让该因子除以这个可能不等于 "

#: src/plonk-intro-cn/plonk-lagrange-basis.md:111
msgid " 的值即可，于是 "
msgstr " 的值即可，于是 "

#: src/plonk-intro-cn/plonk-lagrange-basis.md:111
msgid " 定义如下："
msgstr " 定义如下："

#: src/plonk-intro-cn/plonk-lagrange-basis.md:113
#: src/plonk-intro-cn/plonk-lagrange-basis.md:153
#: src/plonk-intro-cn/plonk-permutation.md:80
msgid "∖"
msgstr "∖"

#: src/plonk-intro-cn/plonk-lagrange-basis.md:115
msgid "不难发现， "
msgstr "不难发现， "

#: src/plonk-intro-cn/plonk-lagrange-basis.md:115
msgid " 处等于 "
msgstr " 处等于 "

#: src/plonk-intro-cn/plonk-lagrange-basis.md:115
msgid "，其它位置 "
msgstr "，其它位置 "

#: src/plonk-intro-cn/plonk-lagrange-basis.md:117
msgid "对于任意次数小于 "
msgstr "对于任意次数小于 "

#: src/plonk-intro-cn/plonk-lagrange-basis.md:117
msgid " 的多项式 "
msgstr " 的多项式 "

#: src/plonk-intro-cn/plonk-lagrange-basis.md:117
msgid "，那么它都可以唯一地表示为："
msgstr "，那么它都可以唯一地表示为："

#: src/plonk-intro-cn/plonk-lagrange-basis.md:121
msgid "我们可以用多项式在 "
msgstr "我们可以用多项式在 "

#: src/plonk-intro-cn/plonk-lagrange-basis.md:121
msgid " 上的值 "
msgstr " 上的值 "

#: src/plonk-intro-cn/plonk-lagrange-basis.md:121
msgid " 来表示 "
msgstr " 来表示 "

#: src/plonk-intro-cn/plonk-lagrange-basis.md:121
msgid ""
"。这被称为 多项式的求值形式（Evaluation Form），区别于系数形式（Coefficient "
"Form）。"
msgstr ""
"。这被称为 多项式的求值形式（Evaluation Form），区别于系数形式（Coefficient "
"Form）。"

#: src/plonk-intro-cn/plonk-lagrange-basis.md:123
msgid "两种形式可以在 "
msgstr "两种形式可以在 "

#: src/plonk-intro-cn/plonk-lagrange-basis.md:123
msgid ""
" 上可以通过 (Inverse) Fast Fourier Transform 算法来回转换，计算复杂度为 "
msgstr ""
" 上可以通过 (Inverse) Fast Fourier Transform 算法来回转换，计算复杂度为 "

#: src/plonk-intro-cn/plonk-lagrange-basis.md:125
msgid "多项式的约束"
msgstr "多项式的约束"

#: src/plonk-intro-cn/plonk-lagrange-basis.md:127
msgid "利用 Lagrange Basis 我们可以方便地对各种向量计算进行约束。"
msgstr "利用 Lagrange Basis 我们可以方便地对各种向量计算进行约束。"

#: src/plonk-intro-cn/plonk-lagrange-basis.md:129
msgid "比如我们想约束 "
msgstr "比如我们想约束 "

#: src/plonk-intro-cn/plonk-lagrange-basis.md:129
#: src/plonk-intro-cn/plonk-lagrange-basis.md:137
msgid " 向量的第一个元素为 "
msgstr " 向量的第一个元素为 "

#: src/plonk-intro-cn/plonk-lagrange-basis.md:129
msgid "。那么我们可以对这个向量进行编码，得到 "
msgstr "。那么我们可以对这个向量进行编码，得到 "

#: src/plonk-intro-cn/plonk-lagrange-basis.md:129
msgid "，并且进行如下约束："
msgstr "，并且进行如下约束："

#: src/plonk-intro-cn/plonk-lagrange-basis.md:133
msgid "Verifier 可以挑战验证下面的多项式等式："
msgstr "Verifier 可以挑战验证下面的多项式等式："

#: src/plonk-intro-cn/plonk-lagrange-basis.md:137
msgid "再比如，我们想约束 "
msgstr "再比如，我们想约束 "

#: src/plonk-intro-cn/plonk-lagrange-basis.md:137
msgid "，最后一个元素为 "
msgstr "，最后一个元素为 "

#: src/plonk-intro-cn/plonk-lagrange-basis.md:137
msgid "，其它元素任意。那么 "
msgstr "，其它元素任意。那么 "

#: src/plonk-intro-cn/plonk-lagrange-basis.md:137
msgid " 应该满足下面两个约束。"
msgstr " 应该满足下面两个约束。"

#: src/plonk-intro-cn/plonk-lagrange-basis.md:141
msgid "那么通过 Verifier 给一个随机挑战数（ "
msgstr "那么通过 Verifier 给一个随机挑战数（ "

#: src/plonk-intro-cn/plonk-lagrange-basis.md:141
#: src/plonk-intro-cn/plonk-lagrange-basis.md:143
#: src/plonk-intro-cn/plonk-lagrange-basis.md:147
#: src/plonk-intro-cn/plonk-permutation.md:96
#: src/plonk-intro-cn/plonk-permutation.md:98
#: src/plonk-intro-cn/plonk-permutation.md:200
#: src/plonk-intro-cn/plonk-permutation.md:204
#: src/plonk-intro-cn/plonk-permutation.md:212
#: src/plonk-intro-cn/plonk-constraints.md:171
#: src/plonk-intro-cn/plonk-constraints.md:175
#: src/plonk-intro-cn/plonk-constraints.md:199
#: src/plonk-intro-cn/plonk-lookup.md:89 src/plonk-intro-cn/plonk-lookup.md:93
#: src/plonk-intro-cn/plonk-lookup.md:101
#: src/plonk-intro-cn/plonk-lookup.md:300
#: src/plonk-intro-cn/plonk-lookup.md:304
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:38
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:41
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:42
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:43
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:45
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:47
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:48
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:50
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:51
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:52
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:53
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:59
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:66
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:67
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:68
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:76
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:81
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:85
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:92
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:112
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:122
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:123
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:126
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:128
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:137
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:139
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:182
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:183
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:188
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:189
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:196
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:198
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:206
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:207
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:208
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:209
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:211
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:212
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:213
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:215
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:216
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:218
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:224
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:235
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:237
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:243
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:247
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:263
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:264
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:265
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:266
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:272
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:274
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:279
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:280
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:281
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:286
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:287
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:289
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:298
#: src/zk-snarks/3-General-Purpose-Computation.md:237
#: src/zk-snarks/3-General-Purpose-Computation.md:243
#: src/zk-snarks/3-General-Purpose-Computation.md:244
#: src/zk-snarks/3-General-Purpose-Computation.md:245
#: src/zk-snarks/3-General-Purpose-Computation.md:251
#: src/zk-snarks/3-General-Purpose-Computation.md:252
#: src/zk-snarks/3-General-Purpose-Computation.md:257
#: src/zk-snarks/3-General-Purpose-Computation.md:264
#: src/zk-snarks/3-General-Purpose-Computation.md:271
#: src/zk-snarks/3-General-Purpose-Computation.md:273
#: src/zk-snarks/3-General-Purpose-Computation.md:277
#: src/zk-snarks/3-General-Purpose-Computation.md:279
#: src/zk-snarks/3-General-Purpose-Computation.md:280
#: src/zk-snarks/3-General-Purpose-Computation.md:295
#: src/zk-snarks/3-General-Purpose-Computation.md:300
#: src/zk-snarks/3-General-Purpose-Computation.md:348
#: src/zk-snarks/3-General-Purpose-Computation.md:350
#: src/zk-snarks/3-General-Purpose-Computation.md:351
#: src/zk-snarks/3-General-Purpose-Computation.md:352
#: src/zk-snarks/3-General-Purpose-Computation.md:356
#: src/zk-snarks/3-General-Purpose-Computation.md:360
#: src/zk-snarks/3-General-Purpose-Computation.md:361
#: src/zk-snarks/3-General-Purpose-Computation.md:364
#: src/zk-snarks/3-General-Purpose-Computation.md:366
#: src/zk-snarks/3-General-Purpose-Computation.md:368
#: src/zk-snarks/3-General-Purpose-Computation.md:369
#: src/zk-snarks/4-Construction-Properties.md:196
#: src/zk-snarks/4-Construction-Properties.md:199
#: src/zk-snarks/4-Construction-Properties.md:200
#: src/zk-snarks/4-Construction-Properties.md:209
#: src/zk-snarks/4-Construction-Properties.md:212
#: src/zk-snarks/4-Construction-Properties.md:217
#: src/zk-snarks/4-Construction-Properties.md:231
#: src/zk-snarks/4-Construction-Properties.md:237
#: src/zk-snarks/4-Construction-Properties.md:239
#: src/zk-snarks/4-Construction-Properties.md:242
#: src/zk-snarks/4-Construction-Properties.md:244
#: src/zk-snarks/4-Construction-Properties.md:245
#: src/zk-snarks/4-Construction-Properties.md:249
#: src/zk-snarks/4-Construction-Properties.md:251
#: src/zk-snarks/4-Construction-Properties.md:309
#: src/zk-snarks/4-Construction-Properties.md:326
#: src/zk-snarks/4-Construction-Properties.md:327
#: src/zk-snarks/4-Construction-Properties.md:335
#: src/zk-snarks/4-Construction-Properties.md:342
#: src/zk-snarks/4-Construction-Properties.md:349
#: src/zk-snarks/4-Construction-Properties.md:353
#: src/zk-snarks/4-Construction-Properties.md:422
#: src/zk-snarks/4-Construction-Properties.md:424
#: src/zk-snarks/4-Construction-Properties.md:431
#: src/zk-snarks/4-Construction-Properties.md:441
#: src/zk-snarks/5-Pinocchio-Protocol.md:76
#: src/zk-snarks/5-Pinocchio-Protocol.md:87
#: src/zk-snarks/5-Pinocchio-Protocol.md:94
#: src/zk-snarks/5-Pinocchio-Protocol.md:102
#: src/zk-snarks/5-Pinocchio-Protocol.md:173
#: src/zk-snarks/5-Pinocchio-Protocol.md:189
#: src/zk-snarks/5-Pinocchio-Protocol.md:192
#: src/zk-snarks/5-Pinocchio-Protocol.md:195
#: src/zk-snarks/5-Pinocchio-Protocol.md:218
#: src/zk-snarks/5-Pinocchio-Protocol.md:222 src/halo2/tmp/9-decomposed.md:139
#: src/halo2/tmp/9-decomposed.md:141 src/zk-everything/BabySNARK
#: tutorial.md:140 src/zk-everything/zk-everything-joe/Hyrax.md:195
#: src/zk-everything/zk-everything-joe/Hyrax.md:201
#: src/zk-everything/zk-everything-joe/Hyrax.md:203
#: src/zk-everything/zk-everything-joe/Hyrax.md:208
#: src/zk-everything/zk-everything-joe/Hyrax.md:223
#: src/zk-everything/zk-everything-joe/Hyrax.md:228 src/public
#: goods/第二章.md:147
msgid "α"
msgstr "α"

#: src/plonk-intro-cn/plonk-lagrange-basis.md:141
msgid "），上面两个约束可以合并为一个多项式约束："
msgstr "），上面两个约束可以合并为一个多项式约束："

#: src/plonk-intro-cn/plonk-lagrange-basis.md:145
msgid "接下来，Verifier 只要挑战下面的多项式等式即可："
msgstr "接下来，Verifier 只要挑战下面的多项式等式即可："

#: src/plonk-intro-cn/plonk-lagrange-basis.md:149
msgid "如果想验证 "
msgstr "如果想验证 "

#: src/plonk-intro-cn/plonk-lagrange-basis.md:149
msgid " 两个等长向量除第一个元素之外，其它元素都相等，那要如何约束呢？假设 "
msgstr " 两个等长向量除第一个元素之外，其它元素都相等，那要如何约束呢？假设 "

#: src/plonk-intro-cn/plonk-lagrange-basis.md:149
msgid " 为两个向量的多项式编码，那么它们应该满足："
msgstr " 为两个向量的多项式编码，那么它们应该满足："

#: src/plonk-intro-cn/plonk-lagrange-basis.md:153
msgid "当 "
msgstr "当 "

#: src/plonk-intro-cn/plonk-lagrange-basis.md:153
msgid " 时，左边多项式的第一个因子等于零，而 "
msgstr " 时，左边多项式的第一个因子等于零，而 "

#: src/plonk-intro-cn/plonk-lagrange-basis.md:153
msgid ""
" 时，则左边第二因子等于零，即表达了除第一项可以不等之外，其它点取值都必须相"
"等。"
msgstr ""
" 时，则左边第二因子等于零，即表达了除第一项可以不等之外，其它点取值都必须相"
"等。"

#: src/plonk-intro-cn/plonk-lagrange-basis.md:155
msgid ""
"可以看出，采用 Lagrange 多项式，我们可以灵活地约束多个向量之间的关系，并且可"
"以把多个约束合并在一起，让 Verifier 仅通过很少的随机挑战就可验证多个向量约"
"束。"
msgstr ""
"可以看出，采用 Lagrange 多项式，我们可以灵活地约束多个向量之间的关系，并且可"
"以把多个约束合并在一起，让 Verifier 仅通过很少的随机挑战就可验证多个向量约"
"束。"

#: src/plonk-intro-cn/plonk-lagrange-basis.md:157
msgid "Coset"
msgstr "Coset"

#: src/plonk-intro-cn/plonk-lagrange-basis.md:159
msgid "在素数有限域的乘法群中，对于每一个乘法子群 "
msgstr "在素数有限域的乘法群中，对于每一个乘法子群 "

#: src/plonk-intro-cn/plonk-lagrange-basis.md:159
msgid "，都有多个等长的陪集（Coset），这些 Coset 具有和 "
msgstr "，都有多个等长的陪集（Coset），这些 Coset 具有和 "

#: src/plonk-intro-cn/plonk-lagrange-basis.md:159
msgid " 类似的性质，在 Plonk 中也会用到 Coset 的概念，这里只做部分性质的介绍。"
msgstr ""
" 类似的性质，在 Plonk 中也会用到 Coset 的概念，这里只做部分性质的介绍。"

#: src/plonk-intro-cn/plonk-lagrange-basis.md:161
msgid "还拿 "
msgstr "还拿 "

#: src/plonk-intro-cn/plonk-lagrange-basis.md:161
msgid " 为例，我们取 "
msgstr " 为例，我们取 "

#: src/plonk-intro-cn/plonk-lagrange-basis.md:161
msgid "，并且乘法群的生成元 "
msgstr "，并且乘法群的生成元 "

#: src/plonk-intro-cn/plonk-lagrange-basis.md:161
msgid "。于是我们可以得到下面两个 Coset："
msgstr "。于是我们可以得到下面两个 Coset："

#: src/plonk-intro-cn/plonk-lagrange-basis.md:164
msgid ""
"\\\\begin{split} H_1 &= g\\cdot H  = (g, g\\omega, g\\omega^2, g\\omega^3) "
"&= (2,10,11,3) \\\\ H_2 &= g^2\\cdot H = (g^2, g^2\\omega, g^2\\omega^2, "
"g^2\\omega^3) &= (4,7,9,6) \\\\ \\\\end{split}"
msgstr ""
"\\\\begin{split} H_1 &= g\\cdot H  = (g, g\\omega, g\\omega^2, g\\omega^3) "
"&= (2,10,11,3) \\\\ H_2 &= g^2\\cdot H = (g^2, g^2\\omega, g^2\\omega^2, "
"g^2\\omega^3) &= (4,7,9,6) \\\\ \\\\end{split}"

#: src/plonk-intro-cn/plonk-lagrange-basis.md:170
msgid "可以看到 "
msgstr "可以看到 "

#: src/plonk-intro-cn/plonk-lagrange-basis.md:170
#: src/plonk-intro-cn/plonk-lookup.md:109
#: src/plonk-intro-cn/plonk-lookup.md:113
#: src/plonk-intro-cn/plonk-lookup.md:117
#: src/plonk-intro-cn/plonk-lookup.md:129
#: src/plonk-intro-cn/plonk-lookup.md:131
#: src/plonk-intro-cn/plonk-lookup.md:133
#: src/plonk-intro-cn/plonk-lookup.md:135
#: src/plonk-intro-cn/plonk-lookup.md:137
#: src/plonk-intro-cn/plonk-lookup.md:139
#: src/plonk-intro-cn/plonk-lookup.md:141
#: src/plonk-intro-cn/plonk-lookup.md:145
#: src/plonk-intro-cn/plonk-lookup.md:153
#: src/plonk-intro-cn/plonk-lookup.md:188
#: src/plonk-intro-cn/plonk-lookup.md:224
#: src/zk-everything/zk-everything-joe/Spartan.md:155
#: src/zk-everything/zk-everything-joe/Spartan.md:166
#: src/zk-everything/zk-everything-joe/Spartan.md:169
msgid "∪"
msgstr "∪"

#: src/plonk-intro-cn/plonk-lagrange-basis.md:170
msgid ""
"，并且它们交集为空，没有任何重叠。并且它们的 Vanishing Polynomial 也可以快速"
"计算："
msgstr ""
"，并且它们交集为空，没有任何重叠。并且它们的 Vanishing Polynomial 也可以快速"
"计算："

#: src/plonk-intro-cn/plonk-lagrange-basis.md:175 src/halo2/tmp/Zordle.md:413
#: src/halo2/tmp/Hammster.md:184
#: src/zk-everything/zk-everything-joe/Hyrax.md:336
#: src/zk-everything/zk-everything-joe/Spartan.md:478
msgid "References"
msgstr "References"

#: src/plonk-intro-cn/plonk-lagrange-basis.md:177
msgid ""
"Schwartz–Zippel lemma. https://en.wikipedia.org/wiki/"
"Schwartz%E2%80%93Zippel_lemma"
msgstr ""
"Schwartz–Zippel lemma. https://en.wikipedia.org/wiki/"
"Schwartz%E2%80%93Zippel_lemma"

#: src/plonk-intro-cn/plonk-permutation.md:3
msgid "理解 PLONK（三）：置换证明"
msgstr "理解 PLONK（三）：置换证明"

#: src/plonk-intro-cn/plonk-permutation.md:5
msgid "Plonkish 电路编码用两个矩阵 "
msgstr "Plonkish 电路编码用两个矩阵 "

#: src/plonk-intro-cn/plonk-permutation.md:5
msgid " 描述电路的空白结构，其中 "
msgstr " 描述电路的空白结构，其中 "

#: src/plonk-intro-cn/plonk-permutation.md:5
msgid " 为运算开关， "
msgstr " 为运算开关， "

#: src/plonk-intro-cn/plonk-permutation.md:5
msgid " 为置换关系，用来约束 "
msgstr " 为置换关系，用来约束 "

#: src/plonk-intro-cn/plonk-permutation.md:5
msgid ""
" 矩阵中的某些位置必须被填入相等的值。本文重点讲解置换证明（Permutation "
"Argument）的原理。"
msgstr ""
" 矩阵中的某些位置必须被填入相等的值。本文重点讲解置换证明（Permutation "
"Argument）的原理。"

#: src/plonk-intro-cn/plonk-permutation.md:7
msgid "回顾拷贝关系"
msgstr "回顾拷贝关系"

#: src/plonk-intro-cn/plonk-permutation.md:9
msgid "回顾一下 Plonkish 的 "
msgstr "回顾一下 Plonkish 的 "

#: src/plonk-intro-cn/plonk-permutation.md:9
msgid " 表格，总共有三列，行数按照 "
msgstr " 表格，总共有三列，行数按照 "

#: src/plonk-intro-cn/plonk-permutation.md:9
msgid " 对齐。"
msgstr " 对齐。"

#: src/plonk-intro-cn/plonk-permutation.md:13
msgid "我们想约束 Prover 在填写 "
msgstr "我们想约束 Prover 在填写 "

#: src/plonk-intro-cn/plonk-permutation.md:13
msgid " 表时，满足下面的拷贝关系： "
msgstr " 表时，满足下面的拷贝关系： "

#: src/plonk-intro-cn/plonk-permutation.md:13
msgid "   "
msgstr "   "

#: src/plonk-intro-cn/plonk-permutation.md:13
#: src/zk-snarks/3-General-Purpose-Computation.md:157
msgid "，换句话说， "
msgstr "，换句话说， "

#: src/plonk-intro-cn/plonk-permutation.md:13
msgid " 位置上的值需要被拷贝到 "
msgstr " 位置上的值需要被拷贝到 "

#: src/plonk-intro-cn/plonk-permutation.md:13
msgid " 处，而 "
msgstr " 处，而 "

#: src/plonk-intro-cn/plonk-permutation.md:13
msgid " 处， "
msgstr " 处， "

#: src/plonk-intro-cn/plonk-permutation.md:13
msgid " 位置上的值被拷贝到 "
msgstr " 位置上的值被拷贝到 "

#: src/plonk-intro-cn/plonk-permutation.md:13
msgid " 处。"
msgstr " 处。"

#: src/plonk-intro-cn/plonk-permutation.md:15
msgid "问题的挑战性在于，Verifier 要仅通过一次随机挑战就能完成 "
msgstr "问题的挑战性在于，Verifier 要仅通过一次随机挑战就能完成 "

#: src/plonk-intro-cn/plonk-permutation.md:15
msgid " 表格中多个拷贝关系的证明，并且在看不到 "
msgstr " 表格中多个拷贝关系的证明，并且在看不到 "

#: src/plonk-intro-cn/plonk-permutation.md:15
msgid "  表格的情况下。"
msgstr "  表格的情况下。"

#: src/plonk-intro-cn/plonk-permutation.md:17
msgid ""
"Plonk 的「拷贝约束」是通过「置换证明」（Permutation Argument）来实现，即把表"
"格中需要约束相等的那些值进行循环换位，然后证明换位后的表格和原来的表格完全相"
"等。"
msgstr ""
"Plonk 的「拷贝约束」是通过「置换证明」（Permutation Argument）来实现，即把表"
"格中需要约束相等的那些值进行循环换位，然后证明换位后的表格和原来的表格完全相"
"等。"

#: src/plonk-intro-cn/plonk-permutation.md:19
msgid "简化一下问题：如何证明两个等长向量 "
msgstr "简化一下问题：如何证明两个等长向量 "

#: src/plonk-intro-cn/plonk-permutation.md:19
msgid " 满足一个已知的置换 "
msgstr " 满足一个已知的置换 "

#: src/plonk-intro-cn/plonk-permutation.md:23
msgid "举一个例子，假设 "
msgstr "举一个例子，假设 "

#: src/plonk-intro-cn/plonk-permutation.md:23
msgid "，即他们满足一个「左移循环换位」的置换关系，那么 "
msgstr "，即他们满足一个「左移循环换位」的置换关系，那么 "

#: src/plonk-intro-cn/plonk-permutation.md:23
#: src/plonk-intro-cn/plonk-polycom.md:49
#: src/plonk-intro-cn/plonk-polycom.md:73
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:164
#: src/zk-everything/BabySNARK tutorial.md:150
#: src/zk-everything/zk-learning-miles/KZG.md:201
#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:42 src/Nova/SuperNova.md:14 src/public
#: goods/第二章.md:80 goods/第二章.md:103 goods/4-Proving-System.md:207
#: goods/4-Proving-System.md:208 goods/4-Proving-System.md:209
msgid "→"
msgstr "→"

#: src/plonk-intro-cn/plonk-permutation.md:23
msgid "。如何能证明 "
msgstr "。如何能证明 "

#: src/plonk-intro-cn/plonk-permutation.md:23
msgid " ，那么两个向量对应位置的值都应该相等，"
msgstr " ，那么两个向量对应位置的值都应该相等，"

#: src/plonk-intro-cn/plonk-permutation.md:38
#: src/plonk-intro-cn/plonk-randomizing.md:112
msgid "那么 "
msgstr "那么 "

#: src/plonk-intro-cn/plonk-permutation.md:38
msgid "，于是可以得出结论： "
msgstr "，于是可以得出结论： "

#: src/plonk-intro-cn/plonk-permutation.md:38
msgid " 中的全部元素都相等。"
msgstr " 中的全部元素都相等。"

#: src/plonk-intro-cn/plonk-permutation.md:40
msgid "对于 "
msgstr "对于 "

#: src/plonk-intro-cn/plonk-permutation.md:40
msgid " ，我们只需要针对那些需要相等的位置进行循环换位，然后让 Prover 证明 "
msgstr " ，我们只需要针对那些需要相等的位置进行循环换位，然后让 Prover 证明 "

#: src/plonk-intro-cn/plonk-permutation.md:40
msgid " 和经过循环换位后的 "
msgstr " 和经过循环换位后的 "

#: src/plonk-intro-cn/plonk-permutation.md:40
msgid ""
" 表格相等，那么可实现拷贝约束。证明两个表格相等，这个可以通过多项式编码，然后"
"进行概率检验的方式完成。剩下的工作就是如何让 Prover 证明 "
msgstr ""
" 表格相等，那么可实现拷贝约束。证明两个表格相等，这个可以通过多项式编码，然后"
"进行概率检验的方式完成。剩下的工作就是如何让 Prover 证明 "

#: src/plonk-intro-cn/plonk-permutation.md:40
msgid "  确实是（诚实地）按照事先约定的方式进行循环移位。"
msgstr "  确实是（诚实地）按照事先约定的方式进行循环移位。"

#: src/plonk-intro-cn/plonk-permutation.md:42
msgid ""
"那么接下来就是理解如何让 Prover 证明两个向量之间满足某一个「置换关系」。 置换"
"证明（Permutation Argument）是 Plonk 协议中的核心部分，为了解释它的工作原理，"
"我们先从一个基础协议开始——连乘证明（Grand Product Argument）。"
msgstr ""
"那么接下来就是理解如何让 Prover 证明两个向量之间满足某一个「置换关系」。 置换"
"证明（Permutation Argument）是 Plonk 协议中的核心部分，为了解释它的工作原理，"
"我们先从一个基础协议开始——连乘证明（Grand Product Argument）。"

#: src/plonk-intro-cn/plonk-permutation.md:44
msgid "冷启动：Grand Product"
msgstr "冷启动：Grand Product"

#: src/plonk-intro-cn/plonk-permutation.md:46
msgid "假设我们要证明下面的「连乘关系」 ："
msgstr "假设我们要证明下面的「连乘关系」 ："

#: src/plonk-intro-cn/plonk-permutation.md:50
msgid ""
"我们在上一篇文章介绍了如何证明一组「单乘法」，通过多项式编码，把多个单乘法压"
"缩成单次乘法的验证。"
msgstr ""
"我们在上一篇文章介绍了如何证明一组「单乘法」，通过多项式编码，把多个单乘法压"
"缩成单次乘法的验证。"

#: src/plonk-intro-cn/plonk-permutation.md:52
msgid ""
"这里对付连乘的基本思路是：让 Prover 利用一组单乘的证明来实现多个数的连乘证"
"明，然后再通过多项式的编码，交给 Verifier 进行概率检查。"
msgstr ""
"这里对付连乘的基本思路是：让 Prover 利用一组单乘的证明来实现多个数的连乘证"
"明，然后再通过多项式的编码，交给 Verifier 进行概率检查。"

#: src/plonk-intro-cn/plonk-permutation.md:54
msgid "强调下：思路中的关键点是如何把一个连乘计算转换成多次的单乘计算。"
msgstr "强调下：思路中的关键点是如何把一个连乘计算转换成多次的单乘计算。"

#: src/plonk-intro-cn/plonk-permutation.md:56
msgid ""
"我们需要通过引入一个「辅助向量」，把「连乘」的计算看成是一步步的单乘计算，然"
"后辅助向量表示每次单乘之后的「中间值」："
msgstr ""
"我们需要通过引入一个「辅助向量」，把「连乘」的计算看成是一步步的单乘计算，然"
"后辅助向量表示每次单乘之后的「中间值」："

#: src/plonk-intro-cn/plonk-permutation.md:60
msgid ""
"上面表格表述了连乘过程的计算轨迹（Trace），每一行代表一次单乘，顺序从上往下计"
"算，最后一行计算出最终的结果。"
msgstr ""
"上面表格表述了连乘过程的计算轨迹（Trace），每一行代表一次单乘，顺序从上往下计"
"算，最后一行计算出最终的结果。"

#: src/plonk-intro-cn/plonk-permutation.md:62
msgid "表格的最左列为要进行连乘的向量 "
msgstr "表格的最左列为要进行连乘的向量 "

#: src/plonk-intro-cn/plonk-permutation.md:62
msgid "，中间列 "
msgstr "，中间列 "

#: src/plonk-intro-cn/plonk-permutation.md:62
msgid ""
" 为引入的辅助变量，记录每次「单乘之前」的中间值，最右列表示每次「单乘之后」的"
"中间值。"
msgstr ""
" 为引入的辅助变量，记录每次「单乘之前」的中间值，最右列表示每次「单乘之后」的"
"中间值。"

#: src/plonk-intro-cn/plonk-permutation.md:64
msgid "不难发现，「中间列」向量 "
msgstr "不难发现，「中间列」向量 "

#: src/plonk-intro-cn/plonk-permutation.md:64
msgid ""
" 向上挪一行与「最右列」几乎一致，除了最后一个元素。该向量的第一个元素用了常"
"数 "
msgstr ""
" 向上挪一行与「最右列」几乎一致，除了最后一个元素。该向量的第一个元素用了常"
"数 "

#: src/plonk-intro-cn/plonk-permutation.md:64
msgid " 作为计算初始值，「最右列」最后一个向量元素为计算结果。"
msgstr " 作为计算初始值，「最右列」最后一个向量元素为计算结果。"

#: src/plonk-intro-cn/plonk-permutation.md:66
msgid "向量 "
msgstr "向量 "

#: src/plonk-intro-cn/plonk-permutation.md:66
msgid " 是一个 Accumulator，即记录连乘计算过程中的每一个中间结果："
msgstr " 是一个 Accumulator，即记录连乘计算过程中的每一个中间结果："

#: src/plonk-intro-cn/plonk-permutation.md:70
msgid "那么显然我们可以得到下面的递归式："
msgstr "那么显然我们可以得到下面的递归式："

#: src/plonk-intro-cn/plonk-permutation.md:74
msgid "于是，表格的三列编码后的多项式也将满足下面三个约束。第一个是初始值为 "
msgstr "于是，表格的三列编码后的多项式也将满足下面三个约束。第一个是初始值为 "

#: src/plonk-intro-cn/plonk-permutation.md:78
msgid "第二个约束为递归的乘法关系："
msgstr "第二个约束为递归的乘法关系："

#: src/plonk-intro-cn/plonk-permutation.md:82
msgid "第三个约束最后结果 "
msgstr "第三个约束最后结果 "

#: src/plonk-intro-cn/plonk-permutation.md:86
msgid ""
"我们可以用一个小技巧来简化上面的三个约束。我们把计算连乘的表格添加一行，令 "
msgstr ""
"我们可以用一个小技巧来简化上面的三个约束。我们把计算连乘的表格添加一行，令 "

#: src/plonk-intro-cn/plonk-permutation.md:86
#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:207
msgid "1/"
msgstr "1/"

#: src/plonk-intro-cn/plonk-permutation.md:86
msgid "（注意： "
msgstr "（注意： "

#: src/plonk-intro-cn/plonk-permutation.md:86
#: src/plonk-intro-cn/plonk-polycom.md:67
msgid " 为 "
msgstr " 为 "

#: src/plonk-intro-cn/plonk-permutation.md:86
msgid " 向量的连乘积）"
msgstr " 向量的连乘积）"

#: src/plonk-intro-cn/plonk-permutation.md:90
#: src/plonk-intro-cn/plonk-lookup.md:167
msgid "这样一来， "
msgstr "这样一来， "

#: src/plonk-intro-cn/plonk-permutation.md:90
msgid " 。最右列恰好是 "
msgstr " 。最右列恰好是 "

#: src/plonk-intro-cn/plonk-permutation.md:90
msgid ""
" 的循环移位。并且上面表格的每一行都满足「乘法关系」！于是，我们可以用下面的多"
"项式约束来表示递归的连乘："
msgstr ""
" 的循环移位。并且上面表格的每一行都满足「乘法关系」！于是，我们可以用下面的多"
"项式约束来表示递归的连乘："

#: src/plonk-intro-cn/plonk-permutation.md:94
msgid "接下来，Verifier 可以挑战下面的多项式等式："
msgstr "接下来，Verifier 可以挑战下面的多项式等式："

#: src/plonk-intro-cn/plonk-permutation.md:98
msgid " 是用来聚合多个多项式约束的随机挑战数。其中 "
msgstr " 是用来聚合多个多项式约束的随机挑战数。其中 "

#: src/plonk-intro-cn/plonk-permutation.md:98
msgid " 为商多项式， "
msgstr " 为商多项式， "

#: src/plonk-intro-cn/plonk-permutation.md:100
msgid "接下来，通过 Schwartz-Zippel 定理，Verifier 可以给出挑战数 "
msgstr "接下来，通过 Schwartz-Zippel 定理，Verifier 可以给出挑战数 "

#: src/plonk-intro-cn/plonk-permutation.md:100
msgid " 来验证上述多项式等式是否成立。"
msgstr " 来验证上述多项式等式是否成立。"

#: src/plonk-intro-cn/plonk-permutation.md:102
msgid ""
"到此为止，如果我们已经理解了如何证明一个向量元素的连乘，那么接下来的问题是如"
"何利用「连乘证明」来实现「Multiset 等价证明」（Multiset Equality Argument）。"
msgstr ""
"到此为止，如果我们已经理解了如何证明一个向量元素的连乘，那么接下来的问题是如"
"何利用「连乘证明」来实现「Multiset 等价证明」（Multiset Equality Argument）。"

#: src/plonk-intro-cn/plonk-permutation.md:104
msgid "从 Grand Product 到 Multiset 等价"
msgstr "从 Grand Product 到 Multiset 等价"

#: src/plonk-intro-cn/plonk-permutation.md:106
msgid ""
"假设有两个向量，其中一个向量是另一个向量的乱序重排，那么如何证明它们在集合意"
"义（注意：集合无序）上的等价呢？最直接的做法是依次枚举其中一个向量中的每个元"
"素，并证明该元素属于另一个向量。但这个方法有个限制，就是无法处理向量中会出现"
"两个相同元素的情况，也即不支持「多重集合」（Multiset）的判等。例如 "
msgstr ""
"假设有两个向量，其中一个向量是另一个向量的乱序重排，那么如何证明它们在集合意"
"义（注意：集合无序）上的等价呢？最直接的做法是依次枚举其中一个向量中的每个元"
"素，并证明该元素属于另一个向量。但这个方法有个限制，就是无法处理向量中会出现"
"两个相同元素的情况，也即不支持「多重集合」（Multiset）的判等。例如 "

#: src/plonk-intro-cn/plonk-permutation.md:106
msgid " 就属于一个多重集合（Multiset），那么它显然不等于 "
msgstr " 就属于一个多重集合（Multiset），那么它显然不等于 "

#: src/plonk-intro-cn/plonk-permutation.md:106
msgid "，也不等于 "
msgstr "，也不等于 "

#: src/plonk-intro-cn/plonk-permutation.md:108
msgid ""
"另一个直接的想法是将两个向量中的所有元素都连乘起来，然后判断两个向量的连乘值"
"是否相等。但这个方法同样有一个严重的限制，就是向量元素必须都为素数，比如 "
msgstr ""
"另一个直接的想法是将两个向量中的所有元素都连乘起来，然后判断两个向量的连乘值"
"是否相等。但这个方法同样有一个严重的限制，就是向量元素必须都为素数，比如 "

#: src/plonk-intro-cn/plonk-permutation.md:108
msgid " ，但 "
msgstr " ，但 "

#: src/plonk-intro-cn/plonk-permutation.md:110
msgid "修改下这个方法，我们假设向量 "
msgstr "修改下这个方法，我们假设向量 "

#: src/plonk-intro-cn/plonk-permutation.md:110
msgid "  为一个多项式 "
msgstr "  为一个多项式 "

#: src/plonk-intro-cn/plonk-permutation.md:110
msgid " 的根集合，即对向量中的任何一个元素 "
msgstr " 的根集合，即对向量中的任何一个元素 "

#: src/plonk-intro-cn/plonk-permutation.md:110
msgid "，都满足  "
msgstr "，都满足  "

#: src/plonk-intro-cn/plonk-permutation.md:110
msgid "。这个多项式可以定义为："
msgstr "。这个多项式可以定义为："

#: src/plonk-intro-cn/plonk-permutation.md:114
msgid "如果存在另一个多项式 "
msgstr "如果存在另一个多项式 "

#: src/plonk-intro-cn/plonk-permutation.md:114
msgid " 等于 "
msgstr " 等于 "

#: src/plonk-intro-cn/plonk-permutation.md:114
msgid "，那么它们一定具有相同的根集合 "
msgstr "，那么它们一定具有相同的根集合 "

#: src/plonk-intro-cn/plonk-permutation.md:114
msgid "。比如"
msgstr "。比如"

#: src/plonk-intro-cn/plonk-permutation.md:118
msgid "那么"
msgstr "那么"

#: src/plonk-intro-cn/plonk-permutation.md:120
#: src/plonk-intro-cn/plonk-lookup.md:113
#: src/plonk-intro-cn/plonk-lookup.md:117
#: src/plonk-intro-cn/plonk-lookup.md:121
#: src/plonk-intro-cn/plonk-lookup.md:129
#: src/plonk-intro-cn/plonk-lookup.md:131
#: src/plonk-intro-cn/plonk-lookup.md:133
#: src/plonk-intro-cn/plonk-lookup.md:135
#: src/plonk-intro-cn/plonk-lookup.md:137
#: src/plonk-intro-cn/plonk-lookup.md:139
#: src/plonk-intro-cn/plonk-lookup.md:188
#: src/plonk-intro-cn/plonk-lookup.md:224
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:271
#: src/zk-snarks/3-General-Purpose-Computation.md:137
#: src/zk-snarks/4-Construction-Properties.md:85 src/public
#: goods/第二章.md:129
msgid "lt"
msgstr "lt"

#: src/plonk-intro-cn/plonk-permutation.md:120
#: src/plonk-intro-cn/plonk-lookup.md:107
#: src/plonk-intro-cn/plonk-lookup.md:113
#: src/plonk-intro-cn/plonk-lookup.md:117
#: src/plonk-intro-cn/plonk-lookup.md:121
#: src/plonk-intro-cn/plonk-lookup.md:129
#: src/plonk-intro-cn/plonk-lookup.md:131
#: src/plonk-intro-cn/plonk-lookup.md:133
#: src/plonk-intro-cn/plonk-lookup.md:135
#: src/plonk-intro-cn/plonk-lookup.md:137
#: src/plonk-intro-cn/plonk-lookup.md:139
#: src/plonk-intro-cn/plonk-lookup.md:188
#: src/plonk-intro-cn/plonk-lookup.md:224
#: src/zk-snarks/3-General-Purpose-Computation.md:306 src/public
#: goods/第二章.md:146
msgid "se"
msgstr "se"

#: src/plonk-intro-cn/plonk-permutation.md:122
msgid ""
"我们可以利用 Schwartz-Zippel 定理来进一步地检验：向 Verifier 索要一个随机数 "
msgstr ""
"我们可以利用 Schwartz-Zippel 定理来进一步地检验：向 Verifier 索要一个随机数 "

#: src/plonk-intro-cn/plonk-permutation.md:122
#: src/plonk-intro-cn/plonk-permutation.md:124
#: src/plonk-intro-cn/plonk-permutation.md:128
#: src/plonk-intro-cn/plonk-permutation.md:194
#: src/plonk-intro-cn/plonk-permutation.md:198
#: src/plonk-intro-cn/plonk-permutation.md:204
#: src/plonk-intro-cn/plonk-permutation.md:212
#: src/plonk-intro-cn/plonk-constraints.md:15
#: src/plonk-intro-cn/plonk-constraints.md:17
#: src/plonk-intro-cn/plonk-constraints.md:21
#: src/plonk-intro-cn/plonk-constraints.md:25
#: src/plonk-intro-cn/plonk-constraints.md:27
#: src/plonk-intro-cn/plonk-constraints.md:69
#: src/plonk-intro-cn/plonk-constraints.md:71
#: src/plonk-intro-cn/plonk-constraints.md:77
#: src/plonk-intro-cn/plonk-constraints.md:165
#: src/plonk-intro-cn/plonk-constraints.md:179
#: src/plonk-intro-cn/plonk-constraints.md:191
#: src/plonk-intro-cn/plonk-constraints.md:192
#: src/plonk-intro-cn/plonk-randomizing.md:97
#: src/plonk-intro-cn/plonk-randomizing.md:106
#: src/plonk-intro-cn/plonk-randomizing.md:121
#: src/plonk-intro-cn/plonk-randomizing.md:123
#: src/plonk-intro-cn/plonk-randomizing.md:125
#: src/plonk-intro-cn/plonk-lookup.md:67 src/plonk-intro-cn/plonk-lookup.md:83
#: src/plonk-intro-cn/plonk-lookup.md:87 src/plonk-intro-cn/plonk-lookup.md:93
#: src/plonk-intro-cn/plonk-lookup.md:101
#: src/plonk-intro-cn/plonk-lookup.md:147
#: src/plonk-intro-cn/plonk-lookup.md:149
#: src/plonk-intro-cn/plonk-lookup.md:151
#: src/plonk-intro-cn/plonk-lookup.md:153
#: src/plonk-intro-cn/plonk-lookup.md:157
#: src/plonk-intro-cn/plonk-lookup.md:173
#: src/plonk-intro-cn/plonk-lookup.md:190
#: src/plonk-intro-cn/plonk-lookup.md:200
#: src/plonk-intro-cn/plonk-lookup.md:214
#: src/plonk-intro-cn/plonk-lookup.md:230
#: src/plonk-intro-cn/plonk-lookup.md:238
#: src/plonk-intro-cn/plonk-lookup.md:281
#: src/plonk-intro-cn/plonk-lookup.md:289
#: src/plonk-intro-cn/plonk-lookup.md:297
#: src/zk-snarks/4-Construction-Properties.md:391
#: src/zk-snarks/4-Construction-Properties.md:392
#: src/zk-snarks/4-Construction-Properties.md:393
#: src/zk-snarks/4-Construction-Properties.md:394
#: src/zk-snarks/4-Construction-Properties.md:397
#: src/zk-snarks/4-Construction-Properties.md:400
#: src/zk-snarks/4-Construction-Properties.md:401
#: src/zk-snarks/4-Construction-Properties.md:405
#: src/zk-snarks/4-Construction-Properties.md:419
#: src/zk-snarks/4-Construction-Properties.md:424
#: src/zk-snarks/4-Construction-Properties.md:434
#: src/zk-snarks/4-Construction-Properties.md:440
#: src/zk-snarks/4-Construction-Properties.md:441
#: src/zk-snarks/4-Construction-Properties.md:443
#: src/zk-snarks/5-Pinocchio-Protocol.md:106
#: src/zk-snarks/5-Pinocchio-Protocol.md:189
#: src/zk-snarks/5-Pinocchio-Protocol.md:195 src/zk-everything/BabySNARK
#: tutorial.md:140 tutorial.md:183
#: src/zk-everything/zk-everything-joe/Spartan.md:176
#: src/zk-everything/zk-everything-joe/Spartan.md:177
#: src/zk-everything/zk-everything-joe/Spartan.md:182
#: src/zk-everything/zk-everything-joe/Spartan.md:195
#: src/zk-everything/zk-everything-joe/Spartan.md:200
#: src/zk-everything/zk-everything-joe/Spartan.md:232
#: src/zk-everything/zk-everything-joe/Spartan.md:236
#: src/zk-everything/zk-everything-joe/Spartan.md:240
#: src/zk-everything/zk-everything-joe/Spartan.md:252
#: src/zk-everything/zk-everything-joe/Spartan.md:263
#: src/zk-everything/zk-everything-joe/Spartan.md:274 src/public
#: goods/第二章.md:50 goods/第二章.md:52 goods/第二章.md:54
#: goods/第二章.md:56
msgid "γ"
msgstr "γ"

#: src/plonk-intro-cn/plonk-permutation.md:122
msgid "，那么 Prover 就可以通过下面的等式证明两个向量 "
msgstr "，那么 Prover 就可以通过下面的等式证明两个向量 "

#: src/plonk-intro-cn/plonk-permutation.md:122
msgid " 在多重集合意义上等价："
msgstr " 在多重集合意义上等价："

#: src/plonk-intro-cn/plonk-permutation.md:126
msgid ""
"还没结束，我们需要用上一节的连乘证明方案来继续完成验证，即通过构造辅助向量"
"（作为一个累积器），把连乘转换成多个单乘来完成证明。需要注意的是，这里的两个"
"连乘可以合并为一个连乘，即上面的连乘相等可以转换为"
msgstr ""
"还没结束，我们需要用上一节的连乘证明方案来继续完成验证，即通过构造辅助向量"
"（作为一个累积器），把连乘转换成多个单乘来完成证明。需要注意的是，这里的两个"
"连乘可以合并为一个连乘，即上面的连乘相等可以转换为"

#: src/plonk-intro-cn/plonk-permutation.md:130
msgid ""
"到这里，我们已经明白如何证明「Multiset 等价」，下一步我们将完成构造「置换证"
"明」（Permutation Argument），用来实现协议所需的「Copy Constraints」。"
msgstr ""
"到这里，我们已经明白如何证明「Multiset 等价」，下一步我们将完成构造「置换证"
"明」（Permutation Argument），用来实现协议所需的「Copy Constraints」。"

#: src/plonk-intro-cn/plonk-permutation.md:132
msgid "从 Multiset 等价到置换证明"
msgstr "从 Multiset 等价到置换证明"

#: src/plonk-intro-cn/plonk-permutation.md:134
msgid "Multiset 等价可以被看作是一类特殊的置换证明。即两个向量 "
msgstr "Multiset 等价可以被看作是一类特殊的置换证明。即两个向量 "

#: src/plonk-intro-cn/plonk-permutation.md:134
msgid "存在一个「未知」的置换关系。"
msgstr "存在一个「未知」的置换关系。"

#: src/plonk-intro-cn/plonk-permutation.md:136
msgid ""
"而我们需要的是一个支持「已知」的特定置换关系的证明和验证。也就是对一个有序的"
"向量进行一个「公开特定的重新排列」。"
msgstr ""
"而我们需要的是一个支持「已知」的特定置换关系的证明和验证。也就是对一个有序的"
"向量进行一个「公开特定的重新排列」。"

#: src/plonk-intro-cn/plonk-permutation.md:138
msgid ""
"先简化下问题，假如我们想让 Prover 证明两个向量满足一个奇偶位互换的置换："
msgstr ""
"先简化下问题，假如我们想让 Prover 证明两个向量满足一个奇偶位互换的置换："

#: src/plonk-intro-cn/plonk-permutation.md:142
msgid "我们仍然采用「多项式编码」的方式把上面两个向量编码为两个多项式， "
msgstr "我们仍然采用「多项式编码」的方式把上面两个向量编码为两个多项式， "

#: src/plonk-intro-cn/plonk-permutation.md:142
msgid "。思考一下，我们可以用下面的「位置向量」来表示「奇偶互换」："
msgstr "。思考一下，我们可以用下面的「位置向量」来表示「奇偶互换」："

#: src/plonk-intro-cn/plonk-permutation.md:146
msgid "我们进一步把这个位置向量和 "
msgstr "我们进一步把这个位置向量和 "

#: src/plonk-intro-cn/plonk-permutation.md:146
msgid " 并排放在一起："
msgstr " 并排放在一起："

#: src/plonk-intro-cn/plonk-permutation.md:150
msgid ""
"接下来，我们要把上表的左边两列，还有右边两列分别「折叠」在一起。换句话说，我"
"们把 "
msgstr ""
"接下来，我们要把上表的左边两列，还有右边两列分别「折叠」在一起。换句话说，我"
"们把 "

#: src/plonk-intro-cn/plonk-permutation.md:150
msgid " 视为一个元素，把 "
msgstr " 视为一个元素，把 "

#: src/plonk-intro-cn/plonk-permutation.md:150
msgid " 视为一个元素，这样上面表格就变成了："
msgstr " 视为一个元素，这样上面表格就变成了："

#: src/plonk-intro-cn/plonk-permutation.md:164
msgid "容易看出，如果两个向量 "
msgstr "容易看出，如果两个向量 "

#: src/plonk-intro-cn/plonk-permutation.md:164
#: src/plonk-intro-cn/plonk-lookup.md:113
msgid " 满足 "
msgstr " 满足 "

#: src/plonk-intro-cn/plonk-permutation.md:164
msgid " 置换，那么，合并后的两个向量 "
msgstr " 置换，那么，合并后的两个向量 "

#: src/plonk-intro-cn/plonk-permutation.md:164
msgid "  将满足 Multiset 等价关系。"
msgstr "  将满足 Multiset 等价关系。"

#: src/plonk-intro-cn/plonk-permutation.md:166
msgid ""
"也就是说，通过把向量和位置值合并，就能够把一个「置换证明」转换成一个「多重集"
"合等价证明」，即不用再针对某个特定的「置换关系」进行证明。"
msgstr ""
"也就是说，通过把向量和位置值合并，就能够把一个「置换证明」转换成一个「多重集"
"合等价证明」，即不用再针对某个特定的「置换关系」进行证明。"

#: src/plonk-intro-cn/plonk-permutation.md:168
msgid ""
"这里又出现一个问题，表格的左右两列中的元素为二元组（Pair），二元组无法作为一"
"个「一元多项式」的根集合。"
msgstr ""
"这里又出现一个问题，表格的左右两列中的元素为二元组（Pair），二元组无法作为一"
"个「一元多项式」的根集合。"

#: src/plonk-intro-cn/plonk-permutation.md:170
msgid "我们再使用一个技巧：再向 Verifier 索取一个随机数 "
msgstr "我们再使用一个技巧：再向 Verifier 索取一个随机数 "

#: src/plonk-intro-cn/plonk-permutation.md:170
#: src/plonk-intro-cn/plonk-permutation.md:174
#: src/plonk-intro-cn/plonk-permutation.md:176
#: src/plonk-intro-cn/plonk-permutation.md:177
#: src/plonk-intro-cn/plonk-permutation.md:179
#: src/plonk-intro-cn/plonk-permutation.md:180
#: src/plonk-intro-cn/plonk-permutation.md:194
#: src/plonk-intro-cn/plonk-permutation.md:198
#: src/plonk-intro-cn/plonk-permutation.md:204
#: src/plonk-intro-cn/plonk-permutation.md:212
#: src/plonk-intro-cn/plonk-constraints.md:11
#: src/plonk-intro-cn/plonk-constraints.md:13
#: src/plonk-intro-cn/plonk-constraints.md:69
#: src/plonk-intro-cn/plonk-constraints.md:71
#: src/plonk-intro-cn/plonk-constraints.md:77
#: src/plonk-intro-cn/plonk-constraints.md:165
#: src/plonk-intro-cn/plonk-constraints.md:179
#: src/plonk-intro-cn/plonk-constraints.md:191
#: src/plonk-intro-cn/plonk-constraints.md:192
#: src/plonk-intro-cn/plonk-randomizing.md:97
#: src/plonk-intro-cn/plonk-randomizing.md:106
#: src/plonk-intro-cn/plonk-randomizing.md:121
#: src/plonk-intro-cn/plonk-randomizing.md:123
#: src/plonk-intro-cn/plonk-randomizing.md:125
#: src/plonk-intro-cn/plonk-lookup.md:143
#: src/plonk-intro-cn/plonk-lookup.md:145
#: src/plonk-intro-cn/plonk-lookup.md:149
#: src/plonk-intro-cn/plonk-lookup.md:151
#: src/plonk-intro-cn/plonk-lookup.md:153
#: src/plonk-intro-cn/plonk-lookup.md:157
#: src/plonk-intro-cn/plonk-lookup.md:173
#: src/plonk-intro-cn/plonk-lookup.md:190
#: src/plonk-intro-cn/plonk-lookup.md:200
#: src/plonk-intro-cn/plonk-lookup.md:214
#: src/plonk-intro-cn/plonk-lookup.md:230
#: src/plonk-intro-cn/plonk-lookup.md:238
#: src/plonk-intro-cn/plonk-lookup.md:281
#: src/plonk-intro-cn/plonk-lookup.md:289
#: src/plonk-intro-cn/plonk-lookup.md:297
#: src/zk-snarks/4-Construction-Properties.md:273
#: src/zk-snarks/4-Construction-Properties.md:275
#: src/zk-snarks/4-Construction-Properties.md:276
#: src/zk-snarks/4-Construction-Properties.md:277
#: src/zk-snarks/4-Construction-Properties.md:279
#: src/zk-snarks/4-Construction-Properties.md:282
#: src/zk-snarks/4-Construction-Properties.md:284
#: src/zk-snarks/4-Construction-Properties.md:287
#: src/zk-snarks/4-Construction-Properties.md:289
#: src/zk-snarks/4-Construction-Properties.md:290
#: src/zk-snarks/4-Construction-Properties.md:291
#: src/zk-snarks/4-Construction-Properties.md:296
#: src/zk-snarks/4-Construction-Properties.md:298
#: src/zk-snarks/4-Construction-Properties.md:300
#: src/zk-snarks/4-Construction-Properties.md:304
#: src/zk-snarks/4-Construction-Properties.md:307
#: src/zk-snarks/4-Construction-Properties.md:313
#: src/zk-snarks/4-Construction-Properties.md:317
#: src/zk-snarks/4-Construction-Properties.md:318
#: src/zk-snarks/4-Construction-Properties.md:335
#: src/zk-snarks/4-Construction-Properties.md:345
#: src/zk-snarks/4-Construction-Properties.md:357
#: src/zk-snarks/4-Construction-Properties.md:363
#: src/zk-snarks/4-Construction-Properties.md:364
#: src/zk-snarks/4-Construction-Properties.md:381
#: src/zk-snarks/4-Construction-Properties.md:384
#: src/zk-snarks/4-Construction-Properties.md:387
#: src/zk-snarks/4-Construction-Properties.md:391
#: src/zk-snarks/4-Construction-Properties.md:392
#: src/zk-snarks/4-Construction-Properties.md:394
#: src/zk-snarks/4-Construction-Properties.md:395
#: src/zk-snarks/4-Construction-Properties.md:400
#: src/zk-snarks/4-Construction-Properties.md:401
#: src/zk-snarks/4-Construction-Properties.md:405
#: src/zk-snarks/4-Construction-Properties.md:406
#: src/zk-snarks/4-Construction-Properties.md:407
#: src/zk-snarks/4-Construction-Properties.md:409
#: src/zk-snarks/4-Construction-Properties.md:410
#: src/zk-snarks/4-Construction-Properties.md:419
#: src/zk-snarks/4-Construction-Properties.md:422
#: src/zk-snarks/4-Construction-Properties.md:424
#: src/zk-snarks/4-Construction-Properties.md:428
#: src/zk-snarks/4-Construction-Properties.md:434
#: src/zk-snarks/4-Construction-Properties.md:440
#: src/zk-snarks/4-Construction-Properties.md:441
#: src/zk-snarks/4-Construction-Properties.md:443
#: src/zk-snarks/5-Pinocchio-Protocol.md:76
#: src/zk-snarks/5-Pinocchio-Protocol.md:87
#: src/zk-snarks/5-Pinocchio-Protocol.md:106
#: src/zk-snarks/5-Pinocchio-Protocol.md:189
#: src/zk-snarks/5-Pinocchio-Protocol.md:192
#: src/zk-snarks/5-Pinocchio-Protocol.md:195
#: src/zk-snarks/5-Pinocchio-Protocol.md:207 src/zk-everything/BabySNARK
#: tutorial.md:140
msgid "β"
msgstr "β"

#: src/plonk-intro-cn/plonk-permutation.md:170
msgid "，把一个元组「折叠」成一个值："
msgstr "，把一个元组「折叠」成一个值："

#: src/plonk-intro-cn/plonk-permutation.md:182
msgid "接下来，Prover 可以对 "
msgstr "接下来，Prover 可以对 "

#: src/plonk-intro-cn/plonk-permutation.md:182
msgid " 两个向量进行 Multiset 等价证明，从而可以证明它们的置换关系。"
msgstr " 两个向量进行 Multiset 等价证明，从而可以证明它们的置换关系。"

#: src/plonk-intro-cn/plonk-permutation.md:184
msgid "完整的置换协议"
msgstr "完整的置换协议"

#: src/plonk-intro-cn/plonk-permutation.md:186
msgid "公共输入：置换关系 "
msgstr "公共输入：置换关系 "

#: src/plonk-intro-cn/plonk-permutation.md:188
msgid "秘密输入：两个向量 "
msgstr "秘密输入：两个向量 "

#: src/plonk-intro-cn/plonk-permutation.md:188
#: src/plonk-intro-cn/plonk-lookup.md:95 src/plonk-intro-cn/plonk-lookup.md:169
#: src/plonk-intro-cn/plonk-lookup.md:279
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:130
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:260
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:261
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:317
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:326
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:334
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:24
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:47
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:48
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:92
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:132
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:149
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:258
#: src/zk-snarks/3-General-Purpose-Computation.md:70
#: src/zk-snarks/3-General-Purpose-Computation.md:215
#: src/zk-snarks/3-General-Purpose-Computation.md:216
#: src/zk-snarks/3-General-Purpose-Computation.md:242
#: src/zk-snarks/3-General-Purpose-Computation.md:243
#: src/zk-snarks/3-General-Purpose-Computation.md:248
#: src/zk-snarks/3-General-Purpose-Computation.md:250
#: src/zk-snarks/3-General-Purpose-Computation.md:348
#: src/zk-snarks/3-General-Purpose-Computation.md:351
#: src/zk-snarks/3-General-Purpose-Computation.md:356
#: src/zk-snarks/4-Construction-Properties.md:113
#: src/zk-snarks/4-Construction-Properties.md:128
#: src/zk-snarks/4-Construction-Properties.md:130
#: src/zk-snarks/4-Construction-Properties.md:162
#: src/zk-snarks/4-Construction-Properties.md:197
#: src/zk-snarks/4-Construction-Properties.md:200
#: src/zk-snarks/4-Construction-Properties.md:233
#: src/zk-snarks/4-Construction-Properties.md:235
#: src/zk-snarks/4-Construction-Properties.md:300
#: src/zk-snarks/4-Construction-Properties.md:341
#: src/zk-snarks/4-Construction-Properties.md:354
#: src/zk-snarks/5-Pinocchio-Protocol.md:29
#: src/zk-snarks/5-Pinocchio-Protocol.md:84
#: src/zk-snarks/5-Pinocchio-Protocol.md:92
#: src/zk-snarks/5-Pinocchio-Protocol.md:151
#: src/halo2/tmp/4-IsZero-Check-example-3.md:120
#: src/halo2/tmp/9-decomposed.md:39 src/halo2/tmp/9-decomposed.md:42
#: src/halo2/tmp/9-decomposed.md:46 src/halo2/tmp/9-decomposed.md:142
#: src/halo2/tmp/9-decomposed.md:216
#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:310 src/public goods/第二章.md:83 goods/第二章.md:162
#: goods/4-Proving-System.md:53 goods/4-Proving-System.md:55
#: goods/4-Proving-System.md:105 goods/4-Proving-System.md:117
#: goods/4-Proving-System.md:125
msgid " "
msgstr " "

#: src/plonk-intro-cn/plonk-permutation.md:190
#: src/plonk-intro-cn/plonk-constraints.md:159
#: src/plonk-intro-cn/plonk-lookup.md:79
msgid "预处理：Prover 和 Verifier 构造 "
msgstr "预处理：Prover 和 Verifier 构造 "

#: src/plonk-intro-cn/plonk-permutation.md:190
#: src/plonk-intro-cn/plonk-permutation.md:192
#: src/plonk-intro-cn/plonk-permutation.md:196
#: src/plonk-intro-cn/plonk-permutation.md:202
#: src/plonk-intro-cn/plonk-permutation.md:208
#: src/plonk-intro-cn/plonk-constraints.md:159
#: src/plonk-intro-cn/plonk-constraints.md:161
#: src/plonk-intro-cn/plonk-constraints.md:167
#: src/plonk-intro-cn/plonk-constraints.md:173
#: src/plonk-intro-cn/plonk-polycom.md:69
#: src/plonk-intro-cn/plonk-randomizing.md:53
#: src/plonk-intro-cn/plonk-randomizing.md:55
#: src/plonk-intro-cn/plonk-lookup.md:81 src/plonk-intro-cn/plonk-lookup.md:85
#: src/plonk-intro-cn/plonk-lookup.md:91 src/plonk-intro-cn/plonk-lookup.md:265
#: src/plonk-intro-cn/plonk-lookup.md:267
#: src/plonk-intro-cn/plonk-lookup.md:273
#: src/plonk-intro-cn/plonk-lookup.md:279
#: src/plonk-intro-cn/plonk-lookup.md:283
#: src/plonk-intro-cn/plonk-lookup.md:291
#: src/plonk-intro-cn/plonk-lookup.md:302
#: src/zk-everything/zk-learning-miles/KZG.md:120
#: src/zk-everything/zk-learning-miles/KZG.md:226
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:152
#: src/zk-everything/zk-everything-joe/Spartan.md:136
#: src/zk-everything/zk-everything-joe/Spartan.md:143
#: src/zk-everything/zk-everything-joe/Spartan.md:148
#: src/zk-everything/zk-everything-joe/Spartan.md:169
#: src/zk-everything/zk-everything-joe/Spartan.md:411
#: src/zk-everything/zk-everything-joe/Spartan.md:416
#: src/zk-everything/zk-everything-joe/Spartan.md:436
#: src/zk-everything/zk-everything-joe/Spartan.md:450
msgid ")\\]"
msgstr ")\\]"

#: src/plonk-intro-cn/plonk-permutation.md:192
msgid "第一步：Prover 构造并发送 "
msgstr "第一步：Prover 构造并发送 "

#: src/plonk-intro-cn/plonk-permutation.md:194
#: src/plonk-intro-cn/plonk-lookup.md:83
msgid "第二步：Verifier 发送挑战数 "
msgstr "第二步：Verifier 发送挑战数 "

#: src/plonk-intro-cn/plonk-permutation.md:196
msgid "第三步：Prover 构造辅助向量 "
msgstr "第三步：Prover 构造辅助向量 "

#: src/plonk-intro-cn/plonk-permutation.md:196
msgid "，构造多项式 "
msgstr "，构造多项式 "

#: src/plonk-intro-cn/plonk-permutation.md:196
msgid " 并发送 "
msgstr " 并发送 "

#: src/plonk-intro-cn/plonk-permutation.md:200
msgid "第四步：Verifier 发送挑战数 "
msgstr "第四步：Verifier 发送挑战数 "

#: src/plonk-intro-cn/plonk-permutation.md:202
msgid "第五步：Prover 构造 "
msgstr "第五步：Prover 构造 "

#: src/plonk-intro-cn/plonk-permutation.md:202
msgid "，并发送 "
msgstr "，并发送 "

#: src/plonk-intro-cn/plonk-permutation.md:208
msgid "第六步：Verifier 向 "
msgstr "第六步：Verifier 向 "

#: src/plonk-intro-cn/plonk-permutation.md:208
msgid " 查询这三个多项式在 "
msgstr " 查询这三个多项式在 "

#: src/plonk-intro-cn/plonk-permutation.md:208
msgid " 处的取值 ，得到 "
msgstr " 处的取值 ，得到 "

#: src/plonk-intro-cn/plonk-permutation.md:208
msgid "；向 "
msgstr "；向 "

#: src/plonk-intro-cn/plonk-permutation.md:208
msgid " 查询 "
msgstr " 查询 "

#: src/plonk-intro-cn/plonk-permutation.md:208
msgid " 两个位置处的取值，即 "
msgstr " 两个位置处的取值，即 "

#: src/plonk-intro-cn/plonk-permutation.md:208
msgid "；向  "
msgstr "；向  "

#: src/plonk-intro-cn/plonk-permutation.md:208
msgid " 这两个多项式发送求值查询 "
msgstr " 这两个多项式发送求值查询 "

#: src/plonk-intro-cn/plonk-permutation.md:208
msgid " ，得到  "
msgstr " ，得到  "

#: src/plonk-intro-cn/plonk-permutation.md:208
msgid "；Verifier 自行计算 "
msgstr "；Verifier 自行计算 "

#: src/plonk-intro-cn/plonk-permutation.md:210
msgid "验证步：Verifier 验证"
msgstr "验证步：Verifier 验证"

#: src/plonk-intro-cn/plonk-permutation.md:214
msgid "协议完毕。"
msgstr "协议完毕。"

#: src/plonk-intro-cn/plonk-permutation.md:216
#: src/halo2/tmp/1-Simple-Example.md:426
#: src/halo2/tmp/4-IsZero-Check-example-3.md:308
msgid "References:"
msgstr "References:"

#: src/plonk-intro-cn/plonk-permutation.md:218
msgid ""
"\\[WIP\\] Copy constraint for arbitrary number of wires. https://hackmd.io/"
"CfFCbA0TTJ6X08vHg0-9_g"
msgstr ""
"\\[WIP\\] Copy constraint for arbitrary number of wires. https://hackmd.io/"
"CfFCbA0TTJ6X08vHg0-9_g"

#: src/plonk-intro-cn/plonk-permutation.md:219
msgid ""
"Alin Tomescu. Feist-Khovratovich technique for computing KZG proofs fast. "
"https://alinush.github.io/2021/06/17/Feist-Khovratovich-technique-for-"
"computing-KZG-proofs-fast.html#fn:FK20"
msgstr ""
"Alin Tomescu. Feist-Khovratovich technique for computing KZG proofs fast. "
"https://alinush.github.io/2021/06/17/Feist-Khovratovich-technique-for-"
"computing-KZG-proofs-fast.html#fn:FK20"

#: src/plonk-intro-cn/plonk-permutation.md:220
msgid ""
"Ariel Gabizon. Multiset checks in PLONK and Plookup. https://hackmd.io/"
"@arielg/ByFgSDA7D"
msgstr ""
"Ariel Gabizon. Multiset checks in PLONK and Plookup. https://hackmd.io/"
"@arielg/ByFgSDA7D"

#: src/plonk-intro-cn/plonk-constraints.md:3
msgid "理解 PLONK（四）：算术约束与拷贝约束"
msgstr "理解 PLONK（四）：算术约束与拷贝约束"

#: src/plonk-intro-cn/plonk-constraints.md:5
msgid "回顾置换证明"
msgstr "回顾置换证明"

#: src/plonk-intro-cn/plonk-constraints.md:7
msgid "上一节，我们讨论了如何让 Prover 证明两个长度为 "
msgstr "上一节，我们讨论了如何让 Prover 证明两个长度为 "

#: src/plonk-intro-cn/plonk-constraints.md:7
msgid " 的向量 "
msgstr " 的向量 "

#: src/plonk-intro-cn/plonk-constraints.md:7
msgid " 满足一个实现约定（公开）的置换关系 "
msgstr " 满足一个实现约定（公开）的置换关系 "

#: src/plonk-intro-cn/plonk-constraints.md:11
msgid "基本思路是向 Verifier 要一个随机数 "
msgstr "基本思路是向 Verifier 要一个随机数 "

#: src/plonk-intro-cn/plonk-constraints.md:11
msgid ""
"，把两个「原始向量」和他们的「位置向量」进行合体，产生出两个新的向量，记为 "
msgstr ""
"，把两个「原始向量」和他们的「位置向量」进行合体，产生出两个新的向量，记为 "

#: src/plonk-intro-cn/plonk-constraints.md:15
msgid "第二步是再向 Verifier 要一个随机数 "
msgstr "第二步是再向 Verifier 要一个随机数 "

#: src/plonk-intro-cn/plonk-constraints.md:15
msgid "，通过连乘的方法来编码 "
msgstr "，通过连乘的方法来编码 "

#: src/plonk-intro-cn/plonk-constraints.md:15
msgid " 的 Multiset，记为 "
msgstr " 的 Multiset，记为 "

#: src/plonk-intro-cn/plonk-constraints.md:15
#: src/plonk-intro-cn/plonk-constraints.md:17
#: src/plonk-intro-cn/plonk-constraints.md:19
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:208
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:209
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:211
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:213
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:218
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:243
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:247
#: src/zk-everything/BabySNARK tutorial.md:31 tutorial.md:33 tutorial.md:38
#: tutorial.md:181 tutorial.md:183
#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:350 SNARKs.md:352 SNARKs.md:354 SNARKs.md:371 SNARKs.md:374
#: src/zk-everything/zk-everything-joe/Spartan.md:382
#: src/zk-everything/zk-everything-joe/Spartan.md:394
#: src/zk-everything/zk-everything-joe/Spartan.md:396
#: src/zk-everything/zk-everything-joe/Spartan.md:401
#: src/zk-everything/zk-everything-joe/Spartan.md:441
#: src/zk-everything/zk-everything-joe/Spartan.md:445
#: src/zk-everything/zk-everything-joe/Spartan.md:450
#: src/zk-everything/zk-everything-joe/Spartan.md:455 src/public
#: goods/第二章.md:80 goods/第二章.md:103 goods/第二章.md:146
msgid "B"
msgstr "B"

#: src/plonk-intro-cn/plonk-constraints.md:19
msgid "第三步是让 Prover 证明 "
msgstr "第三步是让 Prover 证明 "

#: src/plonk-intro-cn/plonk-constraints.md:19
#: src/plonk-intro-cn/plonk-constraints.md:155
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:138
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:143
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:148
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:258
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:331
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:270
#: src/zk-snarks/4-Construction-Properties.md:86
#: src/zk-snarks/4-Construction-Properties.md:127
#: src/halo2/tmp/9-decomposed.md:44 src/halo2/tmp/9-decomposed.md:48
#: src/halo2/tmp/9-decomposed.md:99 src/halo2/tmp/9-decomposed.md:142
#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:408 SNARKs.md:410
#: src/zk-everything/zk-everything-joe/Spartan.md:93
#: src/zk-everything/zk-everything-joe/Spartan.md:122
#: src/zk-everything/zk-everything-joe/Spartan.md:154 src/public
#: goods/第二章.md:91 goods/第二章.md:164
msgid "/"
msgstr "/"

#: src/plonk-intro-cn/plonk-constraints.md:23
msgid "证明这个连乘，需要引入一个辅助向量 "
msgstr "证明这个连乘，需要引入一个辅助向量 "

#: src/plonk-intro-cn/plonk-constraints.md:23
msgid "，记录每次乘法运算的中间结果："
msgstr "，记录每次乘法运算的中间结果："

#: src/plonk-intro-cn/plonk-constraints.md:27
msgid "由于 "
msgstr "由于 "

#: src/plonk-intro-cn/plonk-constraints.md:27
msgid "，而且 "
msgstr "，而且 "

#: src/plonk-intro-cn/plonk-constraints.md:27
msgid "，因此我们可以用 "
msgstr "，因此我们可以用 "

#: src/plonk-intro-cn/plonk-constraints.md:27
msgid " 来编码 "
msgstr " 来编码 "

#: src/plonk-intro-cn/plonk-constraints.md:27
msgid "，从而把置换证明转换成关于 "
msgstr "，从而把置换证明转换成关于 "

#: src/plonk-intro-cn/plonk-constraints.md:27
msgid " 的关系证明。"
msgstr " 的关系证明。"

#: src/plonk-intro-cn/plonk-constraints.md:29
msgid "最后 Verifier 发送挑战数 "
msgstr "最后 Verifier 发送挑战数 "

#: src/plonk-intro-cn/plonk-constraints.md:29
msgid "，得到 "
msgstr "，得到 "

#: src/plonk-intro-cn/plonk-constraints.md:29
msgid "  然后检查它们之间的关系。"
msgstr "  然后检查它们之间的关系。"

#: src/plonk-intro-cn/plonk-constraints.md:31
msgid "向量的拷贝约束"
msgstr "向量的拷贝约束"

#: src/plonk-intro-cn/plonk-constraints.md:33
msgid ""
"所谓拷贝约束 Copy Constraints，是说在一个向量中，我们希望能证明多个不同位置上"
"的向量元素相等。我们先从一个简单例子开始："
msgstr ""
"所谓拷贝约束 Copy Constraints，是说在一个向量中，我们希望能证明多个不同位置上"
"的向量元素相等。我们先从一个简单例子开始："

#: src/plonk-intro-cn/plonk-constraints.md:37
msgid "假设为了让 Prover 证明 "
msgstr "假设为了让 Prover 证明 "

#: src/plonk-intro-cn/plonk-constraints.md:37
msgid "，我们可以把 "
msgstr "，我们可以把 "

#: src/plonk-intro-cn/plonk-constraints.md:37
msgid " 对调位置，这样形成一个「置换关系」，如果我们用 "
msgstr " 对调位置，这样形成一个「置换关系」，如果我们用 "

#: src/plonk-intro-cn/plonk-constraints.md:37
msgid " 记录被置换向量的元素位置，那么我们把置换后的位置向量记为 "
msgstr " 记录被置换向量的元素位置，那么我们把置换后的位置向量记为 "

#: src/plonk-intro-cn/plonk-constraints.md:37
#: src/plonk-intro-cn/plonk-lookup.md:165
#: src/zk-snarks/3-General-Purpose-Computation.md:293
#: src/zk-snarks/4-Construction-Properties.md:325
msgid " ，而 "
msgstr " ，而 "

#: src/plonk-intro-cn/plonk-constraints.md:37
msgid " 为表示按照 "
msgstr " 为表示按照 "

#: src/plonk-intro-cn/plonk-constraints.md:37
msgid " 置换后的向量"
msgstr " 置换后的向量"

#: src/plonk-intro-cn/plonk-constraints.md:41
msgid "显然，只要 Prover 可以证明置换前后的两个向量相等， "
msgstr "显然，只要 Prover 可以证明置换前后的两个向量相等， "

#: src/plonk-intro-cn/plonk-constraints.md:41
msgid "，那么我们就可以得出结论： "
msgstr "，那么我们就可以得出结论： "

#: src/plonk-intro-cn/plonk-constraints.md:43
msgid "这个方法可以推广到证明一个向量中有多个元素相等。比如要证明 "
msgstr "这个方法可以推广到证明一个向量中有多个元素相等。比如要证明 "

#: src/plonk-intro-cn/plonk-constraints.md:43
msgid ""
" 中的前三个元素都相等，我们只需要构造一个置换，即针对这三个元素的循环右移："
msgstr ""
" 中的前三个元素都相等，我们只需要构造一个置换，即针对这三个元素的循环右移："

#: src/plonk-intro-cn/plonk-constraints.md:47
msgid "那么根据 "
msgstr "那么根据 "

#: src/plonk-intro-cn/plonk-constraints.md:47
msgid " 容易得出 "
msgstr " 容易得出 "

#: src/plonk-intro-cn/plonk-constraints.md:49
msgid "多个向量间的拷贝约束"
msgstr "多个向量间的拷贝约束"

#: src/plonk-intro-cn/plonk-constraints.md:51
msgid "对于 Plonk 协议，拷贝约束需要横跨 "
msgstr "对于 Plonk 协议，拷贝约束需要横跨 "

#: src/plonk-intro-cn/plonk-constraints.md:51
msgid ""
" 表格的所有列，而协议要求 Prover 要针对每一列向量进行多项式编码。我们需要对置"
"换证明进行扩展，从而支持横跨多个向量的元素等价。"
msgstr ""
" 表格的所有列，而协议要求 Prover 要针对每一列向量进行多项式编码。我们需要对置"
"换证明进行扩展，从而支持横跨多个向量的元素等价。"

#: src/plonk-intro-cn/plonk-constraints.md:53
msgid "![](img/img2020230414202348.png)"
msgstr "![](img/img2020230414202348.png)"

#: src/plonk-intro-cn/plonk-constraints.md:55
msgid "回忆比如针对上面电路的 "
msgstr "回忆比如针对上面电路的 "

#: src/plonk-intro-cn/plonk-constraints.md:55
msgid " 表格："
msgstr " 表格："

#: src/plonk-intro-cn/plonk-constraints.md:59
msgid "看上面的表格，我们要求 "
msgstr "看上面的表格，我们要求 "

#: src/plonk-intro-cn/plonk-constraints.md:59
msgid " 且 "
msgstr " 且 "

#: src/plonk-intro-cn/plonk-constraints.md:61
msgid ""
"支持跨向量置换的直接方案是引入多个对应的置换向量，比如上表的三列向量用三个置"
"换向量统一进行位置编码："
msgstr ""
"支持跨向量置换的直接方案是引入多个对应的置换向量，比如上表的三列向量用三个置"
"换向量统一进行位置编码："

#: src/plonk-intro-cn/plonk-constraints.md:65
msgid "置换后的向量为 "
msgstr "置换后的向量为 "

#: src/plonk-intro-cn/plonk-constraints.md:69
msgid "Prover 用一个随机数 "
msgstr "Prover 用一个随机数 "

#: src/plonk-intro-cn/plonk-constraints.md:69
msgid "（Verifier 提供）来合并 "
msgstr "（Verifier 提供）来合并 "

#: src/plonk-intro-cn/plonk-constraints.md:69
msgid "，还有置换后的向量： "
msgstr "，还有置换后的向量： "

#: src/plonk-intro-cn/plonk-constraints.md:69
msgid " 。然后再通过一个随机数 "
msgstr " 。然后再通过一个随机数 "

#: src/plonk-intro-cn/plonk-constraints.md:69
msgid " （Verifier 提供）和连乘来得到 "
msgstr " （Verifier 提供）和连乘来得到 "

#: src/plonk-intro-cn/plonk-constraints.md:69
msgid " 的 Multisets， "
msgstr " 的 Multisets， "

#: src/plonk-intro-cn/plonk-constraints.md:73
msgid "又因为拷贝约束要求置换后的向量与原始向量相等，因此 "
msgstr "又因为拷贝约束要求置换后的向量与原始向量相等，因此 "

#: src/plonk-intro-cn/plonk-constraints.md:75
msgid "如果我们用多项式对 "
msgstr "如果我们用多项式对 "

#: src/plonk-intro-cn/plonk-constraints.md:75
msgid " 编码，得到 "
msgstr " 编码，得到 "

#: src/plonk-intro-cn/plonk-constraints.md:75
#: src/plonk-intro-cn/plonk-constraints.md:153
#: src/plonk-intro-cn/plonk-lookup.md:175
#: src/plonk-intro-cn/plonk-lookup.md:216
msgid "，于是 "
msgstr "，于是 "

#: src/plonk-intro-cn/plonk-constraints.md:75
msgid " 满足下面的约束关系："
msgstr " 满足下面的约束关系："

#: src/plonk-intro-cn/plonk-constraints.md:77
#: src/plonk-intro-cn/plonk-constraints.md:118
#: src/plonk-intro-cn/plonk-constraints.md:141
#: src/plonk-intro-cn/plonk-lookup.md:115
#: src/plonk-intro-cn/plonk-lookup.md:117
#: src/plonk-intro-cn/plonk-lookup.md:125
#: src/plonk-intro-cn/plonk-lookup.md:129
#: src/plonk-intro-cn/plonk-lookup.md:131
#: src/plonk-intro-cn/plonk-lookup.md:133
#: src/plonk-intro-cn/plonk-lookup.md:135
#: src/plonk-intro-cn/plonk-lookup.md:137
#: src/plonk-intro-cn/plonk-lookup.md:139
#: src/plonk-intro-cn/plonk-lookup.md:141
#: src/plonk-intro-cn/plonk-lookup.md:143
#: src/plonk-intro-cn/plonk-lookup.md:188
#: src/plonk-intro-cn/plonk-lookup.md:220
#: src/plonk-intro-cn/plonk-lookup.md:224
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:281
#: src/zk-snarks/3-General-Purpose-Computation.md:233
#: src/zk-snarks/3-General-Purpose-Computation.md:279
#: src/zk-snarks/3-General-Purpose-Computation.md:369
#: src/zk-snarks/4-Construction-Properties.md:46
#: src/zk-snarks/4-Construction-Properties.md:95
#: src/zk-snarks/4-Construction-Properties.md:300
#: src/zk-snarks/4-Construction-Properties.md:317
#: src/zk-snarks/5-Pinocchio-Protocol.md:139
#: src/halo2/tmp/3-Fibonacci-example-2.md:84
#: src/halo2/tmp/3-Fibonacci-example-2.md:269
#: src/zk-everything/zk-learning-miles/KZG.md:110
#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:197 SNARKs.md:198 SNARKs.md:363
#: src/zk-everything/zk-everything-joe/Spartan.md:24
#: src/zk-everything/zk-everything-joe/Spartan.md:89
#: src/zk-everything/zk-everything-joe/Spartan.md:93
#: src/zk-everything/zk-everything-joe/Spartan.md:148
#: src/zk-everything/zk-everything-joe/Spartan.md:154
#: src/zk-everything/zk-everything-joe/Spartan.md:155
#: src/zk-everything/zk-everything-joe/Spartan.md:166
#: src/zk-everything/zk-everything-joe/Spartan.md:195
#: src/zk-everything/zk-everything-joe/Spartan.md:200
#: src/zk-everything/zk-everything-joe/Spartan.md:212
#: src/zk-everything/zk-everything-joe/Spartan.md:222
#: src/zk-everything/zk-everything-joe/Spartan.md:232
#: src/zk-everything/zk-everything-joe/Spartan.md:252
#: src/zk-everything/zk-everything-joe/Spartan.md:254
#: src/zk-everything/zk-everything-joe/Spartan.md:257
#: src/zk-everything/zk-everything-joe/Spartan.md:274
#: src/zk-everything/zk-everything-joe/Spartan.md:278 src/public
#: goods/第二章.md:36 goods/第二章.md:40 goods/第二章.md:41
#: goods/第二章.md:48 goods/第二章.md:50 goods/4-Proving-System.md:135
#: goods/4-Proving-System.md:136 goods/4-Proving-System.md:206
#: goods/4-Proving-System.md:207
msgid "S"
msgstr "S"

#: src/plonk-intro-cn/plonk-constraints.md:79
msgid "如果两个 Multiset 相等 {f_i\\\\}={g_i}，那么下面的等式成立："
msgstr "如果两个 Multiset 相等 {f_i\\\\}={g_i}，那么下面的等式成立："

#: src/plonk-intro-cn/plonk-constraints.md:83
msgid "上面的等式稍加变形，可得 "
msgstr "上面的等式稍加变形，可得 "

#: src/plonk-intro-cn/plonk-constraints.md:87
msgid "我们进一步构造一个辅助的**累加器**向量 "
msgstr "我们进一步构造一个辅助的**累加器**向量 "

#: src/plonk-intro-cn/plonk-constraints.md:87
msgid "，表示连乘计算的一系列中间过程"
msgstr "，表示连乘计算的一系列中间过程"

#: src/plonk-intro-cn/plonk-constraints.md:91
msgid " 的初始值为 "
msgstr " 的初始值为 "

#: src/plonk-intro-cn/plonk-constraints.md:91
msgid "，Prover 按照下表计算出 "
msgstr "，Prover 按照下表计算出 "

#: src/plonk-intro-cn/plonk-constraints.md:95
msgid " 能与 "
msgstr " 能与 "

#: src/plonk-intro-cn/plonk-constraints.md:95
msgid " 连乘等价的话，那么最后一行 "
msgstr " 连乘等价的话，那么最后一行 "

#: src/plonk-intro-cn/plonk-constraints.md:95
msgid " 正好等于 "
msgstr " 正好等于 "

#: src/plonk-intro-cn/plonk-constraints.md:99
msgid "而又因为 "
msgstr "而又因为 "

#: src/plonk-intro-cn/plonk-constraints.md:99
msgid "  。这恰好使我们可以把 "
msgstr "  。这恰好使我们可以把 "

#: src/plonk-intro-cn/plonk-constraints.md:99
msgid " 完整地编码在乘法子群 "
msgstr " 完整地编码在乘法子群 "

#: src/plonk-intro-cn/plonk-constraints.md:99
msgid " 上。因此如果它满足下面两个多项式约束，我们就能根据数学归纳法得出 "
msgstr " 上。因此如果它满足下面两个多项式约束，我们就能根据数学归纳法得出 "

#: src/plonk-intro-cn/plonk-constraints.md:99
msgid "，这是我们最终想要的「拷贝约束」："
msgstr "，这是我们最终想要的「拷贝约束」："

#: src/plonk-intro-cn/plonk-constraints.md:105
msgid "置换关系 "
msgstr "置换关系 "

#: src/plonk-intro-cn/plonk-constraints.md:107
msgid "在构造拷贝约束前，置换关系 "
msgstr "在构造拷贝约束前，置换关系 "

#: src/plonk-intro-cn/plonk-constraints.md:107
msgid " 需要提前公开共识。表格 "
msgstr " 需要提前公开共识。表格 "

#: src/plonk-intro-cn/plonk-constraints.md:107
msgid ""
" 含有所有算术门的输入输出，但是并没有描述门和门之间是否通过引线相连，而置换关"
"系 "
msgstr ""
" 含有所有算术门的输入输出，但是并没有描述门和门之间是否通过引线相连，而置换关"
"系 "

#: src/plonk-intro-cn/plonk-constraints.md:107
msgid " 实际上正是补充描述了哪些算术门之间的连接关系。"
msgstr " 实际上正是补充描述了哪些算术门之间的连接关系。"

#: src/plonk-intro-cn/plonk-constraints.md:109
msgid "因此，对于一个处于「空白态」的电路，通过 "
msgstr "因此，对于一个处于「空白态」的电路，通过 "

#: src/plonk-intro-cn/plonk-constraints.md:109
msgid " 两个表格描述，其中 "
msgstr " 两个表格描述，其中 "

#: src/plonk-intro-cn/plonk-constraints.md:109
msgid " 由选择子向量构成，而 "
msgstr " 由选择子向量构成，而 "

#: src/plonk-intro-cn/plonk-constraints.md:109
msgid " 则由「置换向量」构成。 "
msgstr " 则由「置换向量」构成。 "

#: src/plonk-intro-cn/plonk-constraints.md:114
#: src/plonk-intro-cn/plonk-constraints.md:118
msgid "下面是 "
msgstr "下面是 "

#: src/plonk-intro-cn/plonk-constraints.md:114
msgid " 表格"
msgstr " 表格"

#: src/plonk-intro-cn/plonk-constraints.md:118
msgid " 表格，描述了哪些位置做了置换"
msgstr " 表格，描述了哪些位置做了置换"

#: src/plonk-intro-cn/plonk-constraints.md:123
msgid "处理 Public Inputs"
msgstr "处理 Public Inputs"

#: src/plonk-intro-cn/plonk-constraints.md:125
msgid ""
"假如在上面给出的小电路中，要证明存在一个 Assignment，使得 out 的输入为一个特"
"定的公开值，比如 "
msgstr ""
"假如在上面给出的小电路中，要证明存在一个 Assignment，使得 out 的输入为一个特"
"定的公开值，比如 "

#: src/plonk-intro-cn/plonk-constraints.md:125
msgid "。最简单的办法是使用 "
msgstr "。最简单的办法是使用 "

#: src/plonk-intro-cn/plonk-constraints.md:125
msgid " 表中的 "
msgstr " 表中的 "

#: src/plonk-intro-cn/plonk-constraints.md:125
msgid " 列，并增加一行约束，使得 "
msgstr " 列，并增加一行约束，使得 "

#: src/plonk-intro-cn/plonk-constraints.md:125
msgid "，因此满足下面等式"
msgstr "，因此满足下面等式"

#: src/plonk-intro-cn/plonk-constraints.md:129
msgid ""
"但这个方案的问题是：这些公开值输入输出值被固定成了常数，如果公开值变化，那么 "
msgstr ""
"但这个方案的问题是：这些公开值输入输出值被固定成了常数，如果公开值变化，那么 "

#: src/plonk-intro-cn/plonk-constraints.md:129
msgid " 多项式需要重新计算。如果整体上 "
msgstr " 多项式需要重新计算。如果整体上 "

#: src/plonk-intro-cn/plonk-constraints.md:129
msgid " 表格的行数比较大，那么这个重新计算过程会带来很多的性能损失。"
msgstr " 表格的行数比较大，那么这个重新计算过程会带来很多的性能损失。"

#: src/plonk-intro-cn/plonk-constraints.md:131
msgid ""
"能否在表格中引入参数，以区分电路中的常数列？并且要求参数的变化并不影响其它电"
"路的部分？这就需要再引入一个新的列，专门存放公开参数，记为 "
msgstr ""
"能否在表格中引入参数，以区分电路中的常数列？并且要求参数的变化并不影响其它电"
"路的部分？这就需要再引入一个新的列，专门存放公开参数，记为 "

#: src/plonk-intro-cn/plonk-constraints.md:131
#: src/plonk-intro-cn/plonk-constraints.md:133
#: src/plonk-intro-cn/plonk-constraints.md:161
#: src/plonk-intro-cn/plonk-constraints.md:163
#: src/plonk-intro-cn/plonk-constraints.md:175
#: src/plonk-intro-cn/plonk-constraints.md:195
#: src/plonk-intro-cn/plonk-constraints.md:199
#: src/plonk-intro-cn/plonk-randomizing.md:41
#: src/plonk-intro-cn/plonk-lookup.md:267
#: src/plonk-intro-cn/plonk-lookup.md:269
#: src/plonk-intro-cn/plonk-lookup.md:304 src/Nova/SuperNova.md:12
#: src/Nova/SuperNova.md:14 src/Nova/SuperNova.md:19
msgid "ϕ"
msgstr "ϕ"

#: src/plonk-intro-cn/plonk-constraints.md:131
msgid "，因此，算术约束会变为："
msgstr "，因此，算术约束会变为："

#: src/plonk-intro-cn/plonk-constraints.md:135
msgid "我们还可以通过修改拷贝约束的方式引入公开参数。"
msgstr "我们还可以通过修改拷贝约束的方式引入公开参数。"

#: src/plonk-intro-cn/plonk-constraints.md:137
msgid "\\[!TODO\\]"
msgstr "\\[!TODO\\]"

#: src/plonk-intro-cn/plonk-constraints.md:139
msgid "位置向量的优化"
msgstr "位置向量的优化"

#: src/plonk-intro-cn/plonk-constraints.md:141
msgid "我们上面在构造三个 "
msgstr "我们上面在构造三个 "

#: src/plonk-intro-cn/plonk-constraints.md:141
msgid " 向量时，直接采用的自然数 "
msgstr " 向量时，直接采用的自然数 "

#: src/plonk-intro-cn/plonk-constraints.md:141
msgid "，这样在协议开始前，Verifier 需要构造 3 个多项式 "
msgstr "，这样在协议开始前，Verifier 需要构造 3 个多项式 "

#: src/plonk-intro-cn/plonk-constraints.md:141
msgid "，并且在协议最后一步查询 Oracle，获得三个多项式在挑战点 "
msgstr "，并且在协议最后一步查询 Oracle，获得三个多项式在挑战点 "

#: src/plonk-intro-cn/plonk-constraints.md:141
msgid " 处的取值  "
msgstr " 处的取值  "

#: src/plonk-intro-cn/plonk-constraints.md:143
msgid "思考一下， "
msgstr "思考一下， "

#: src/plonk-intro-cn/plonk-constraints.md:143
msgid ""
" 向量只需要用一些互不相等的值来标记置换即可，不一定要采用递增的自然数。如果我"
"们采用 "
msgstr ""
" 向量只需要用一些互不相等的值来标记置换即可，不一定要采用递增的自然数。如果我"
"们采用 "

#: src/plonk-intro-cn/plonk-constraints.md:143
msgid " 的话，那么多项式 "
msgstr " 的话，那么多项式 "

#: src/plonk-intro-cn/plonk-constraints.md:143
msgid " 会被大大简化："
msgstr " 会被大大简化："

#: src/plonk-intro-cn/plonk-constraints.md:147
msgid " 为互相不等的二次非剩余。"
msgstr " 为互相不等的二次非剩余。"

#: src/plonk-intro-cn/plonk-constraints.md:151
msgid "这样一来，这三个多项式被大大简化，它们在 "
msgstr "这样一来，这三个多项式被大大简化，它们在 "

#: src/plonk-intro-cn/plonk-constraints.md:151
msgid " 处的计算轻而易举，可以直接由 Verifier 完成。"
msgstr " 处的计算轻而易举，可以直接由 Verifier 完成。"

#: src/plonk-intro-cn/plonk-constraints.md:153
msgid "这个小优化手段最早由 Vitalik 提出。采用 "
msgstr "这个小优化手段最早由 Vitalik 提出。采用 "

#: src/plonk-intro-cn/plonk-constraints.md:153
msgid " 是为了产生 "
msgstr " 是为了产生 "

#: src/plonk-intro-cn/plonk-constraints.md:153
msgid " 的陪集（Coset），并保证 Coset 之间没有任何交集。我们前面提到 "
msgstr " 的陪集（Coset），并保证 Coset 之间没有任何交集。我们前面提到 "

#: src/plonk-intro-cn/plonk-constraints.md:153
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:316 src/public
#: goods/4-Proving-System.md:53
msgid "  是 "
msgstr "  是 "

#: src/plonk-intro-cn/plonk-constraints.md:153
msgid " 的乘法子群，如果 "
msgstr " 的乘法子群，如果 "

#: src/plonk-intro-cn/plonk-constraints.md:153
msgid " 存在交集，那么 "
msgstr " 存在交集，那么 "

#: src/plonk-intro-cn/plonk-constraints.md:153
msgid "。这个论断可以简单证明如下：如果它们存在交集，那么 "
msgstr "。这个论断可以简单证明如下：如果它们存在交集，那么 "

#: src/plonk-intro-cn/plonk-constraints.md:153
msgid "，又因为 "
msgstr "，又因为 "

#: src/plonk-intro-cn/plonk-constraints.md:153
#: src/zk-snarks/5-Pinocchio-Protocol.md:163 src/halo2/tmp/9-decomposed.md:99
#: src/halo2/tmp/9-decomposed.md:142 src/zk-everything/BabySNARK
#: tutorial.md:172 src/zk-everything/zk-learning-miles/KZG.md:83
#: src/zk-everything/zk-learning-miles/KZG.md:110
#: src/zk-everything/zk-learning-miles/KZG.md:199
#: src/zk-everything/zk-learning-miles/KZG.md:222
#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:42 Zeroknowledge.md:239
#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:302 SNARKs.md:324 src/zk-everything/zk-everything-joe/Hyrax.md:134
#: src/zk-everything/zk-everything-joe/Spartan.md:242
#: src/zk-everything/zk-everything-joe/Spartan.md:254
#: src/zk-everything/zk-everything-joe/Spartan.md:264
#: src/zk-everything/zk-everything-joe/Spartan.md:275 src/public
#: goods/4-Proving-System.md:12
msgid "."
msgstr "."

#: src/plonk-intro-cn/plonk-constraints.md:153
msgid "，同理可得 "
msgstr "，同理可得 "

#: src/plonk-intro-cn/plonk-constraints.md:155
msgid " 的列数更多，那么我们需要选择多个 "
msgstr " 的列数更多，那么我们需要选择多个 "

#: src/plonk-intro-cn/plonk-constraints.md:155
msgid " 且  "
msgstr " 且  "

#: src/plonk-intro-cn/plonk-constraints.md:155
msgid " 来产生不相交的 Coset。一种最直接的办法是采用 "
msgstr " 来产生不相交的 Coset。一种最直接的办法是采用 "

#: src/plonk-intro-cn/plonk-constraints.md:155
msgid " 为乘法子群 "
msgstr " 为乘法子群 "

#: src/plonk-intro-cn/plonk-constraints.md:155
msgid " 的生成元， "
msgstr " 的生成元， "

#: src/plonk-intro-cn/plonk-constraints.md:157
#: src/plonk-intro-cn/plonk-lookup.md:73
msgid "协议框架"
msgstr "协议框架"

#: src/plonk-intro-cn/plonk-constraints.md:161
#: src/plonk-intro-cn/plonk-lookup.md:267
msgid "第一步：Prover 针对 "
msgstr "第一步：Prover 针对 "

#: src/plonk-intro-cn/plonk-constraints.md:161
#: src/plonk-intro-cn/plonk-lookup.md:267
msgid " 表格的每一列，构造 "
msgstr " 表格的每一列，构造 "

#: src/plonk-intro-cn/plonk-constraints.md:161
#: src/plonk-intro-cn/plonk-lookup.md:267
msgid " 使得"
msgstr " 使得"

#: src/plonk-intro-cn/plonk-constraints.md:165
msgid "第二步： Verifier 发送随机数 "
msgstr "第二步： Verifier 发送随机数 "

#: src/plonk-intro-cn/plonk-constraints.md:165
#: src/plonk-intro-cn/plonk-constraints.md:171
#: src/plonk-intro-cn/plonk-lookup.md:75
msgid "；"
msgstr "；"

#: src/plonk-intro-cn/plonk-constraints.md:167
msgid "第三步：Prover 构造 "
msgstr "第三步：Prover 构造 "

#: src/plonk-intro-cn/plonk-constraints.md:167
#: src/plonk-intro-cn/plonk-lookup.md:283
msgid "，使得"
msgstr "，使得"

#: src/plonk-intro-cn/plonk-constraints.md:171
msgid "第四步：Verifier 发送随机挑战数 "
msgstr "第四步：Verifier 发送随机挑战数 "

#: src/plonk-intro-cn/plonk-constraints.md:173
msgid "第五步：Prover 计算 "
msgstr "第五步：Prover 计算 "

#: src/plonk-intro-cn/plonk-constraints.md:173
#: src/plonk-intro-cn/plonk-lookup.md:302
msgid "，并构造商多项式 "
msgstr "，并构造商多项式 "

#: src/plonk-intro-cn/plonk-constraints.md:177
#: src/plonk-intro-cn/plonk-lookup.md:287
#: src/plonk-intro-cn/plonk-lookup.md:295
#: src/zk-snarks/4-Construction-Properties.md:277
#: src/zk-everything/zk-everything-joe/Spartan.md:355
#: src/zk-everything/zk-everything-joe/Spartan.md:396
#: src/zk-everything/zk-everything-joe/Spartan.md:445
msgid "其中"
msgstr "其中"

#: src/plonk-intro-cn/plonk-constraints.md:181
msgid "其中商多项式 "
msgstr "其中商多项式 "

#: src/plonk-intro-cn/plonk-constraints.md:181
#: src/plonk-intro-cn/plonk-lookup.md:77
msgid " ；"
msgstr " ；"

#: src/plonk-intro-cn/plonk-constraints.md:183
#: src/plonk-intro-cn/plonk-lookup.md:300
msgid "第六步：Verifier 发送随机挑战数 "
msgstr "第六步：Verifier 发送随机挑战数 "

#: src/plonk-intro-cn/plonk-constraints.md:183
msgid "，查询上述的所有 Oracle，得到"
msgstr "，查询上述的所有 Oracle，得到"

#: src/plonk-intro-cn/plonk-constraints.md:184
#: src/plonk-intro-cn/plonk-constraints.md:185
#: src/plonk-intro-cn/plonk-constraints.md:186
#: src/plonk-intro-cn/plonk-constraints.md:187
#: src/plonk-intro-cn/plonk-constraints.md:188
#: src/plonk-intro-cn/plonk-constraints.md:191
#: src/plonk-intro-cn/plonk-constraints.md:192
#: src/plonk-intro-cn/plonk-constraints.md:199
#: src/plonk-intro-cn/plonk-polycom.md:179
#: src/plonk-intro-cn/plonk-polycom.md:181
#: src/plonk-intro-cn/plonk-polycom.md:183
#: src/plonk-intro-cn/plonk-polycom.md:189
#: src/plonk-intro-cn/plonk-polycom.md:205
#: src/plonk-intro-cn/plonk-polycom.md:211
#: src/plonk-intro-cn/plonk-polycom.md:213
#: src/plonk-intro-cn/plonk-polycom.md:217
#: src/plonk-intro-cn/plonk-polycom.md:225
msgid "ˉ"
msgstr "ˉ"

#: src/plonk-intro-cn/plonk-constraints.md:185
#: src/plonk-intro-cn/plonk-randomizing.md:21
#: src/plonk-intro-cn/plonk-lookup.md:265
msgid "，  "
msgstr "，  "

#: src/plonk-intro-cn/plonk-constraints.md:190
msgid "Verifier 还要自行计算"
msgstr "Verifier 还要自行计算"

#: src/plonk-intro-cn/plonk-constraints.md:197
msgid "验证步："
msgstr "验证步："

#: src/plonk-intro-cn/plonk-constraints.md:199
#: src/halo2/tmp/9-decomposed.md:273
#: src/zk-everything/zk-everything-joe/Spartan.md:23
#: src/zk-everything/zk-everything-joe/Spartan.md:24
#: src/zk-everything/zk-everything-joe/Spartan.md:25
#: src/zk-everything/zk-everything-joe/Spartan.md:26 src/public
#: goods/第二章.md:13 goods/第二章.md:14 goods/第二章.md:15
#: goods/第二章.md:30 goods/第二章.md:31 goods/第二章.md:32
msgid "\\_"
msgstr "\\_"

#: src/plonk-intro-cn/plonk-polycom.md:3
msgid "理解 Plonk（五）：多项式承诺"
msgstr "理解 Plonk（五）：多项式承诺"

#: src/plonk-intro-cn/plonk-polycom.md:5
msgid "什么是多项式承诺"
msgstr "什么是多项式承诺"

#: src/plonk-intro-cn/plonk-polycom.md:7
msgid ""
"所谓承诺，是对消息「锁定」，得到一个锁定值。这个值被称为对象的「承诺」。"
msgstr ""
"所谓承诺，是对消息「锁定」，得到一个锁定值。这个值被称为对象的「承诺」。"

#: src/plonk-intro-cn/plonk-polycom.md:9 src/plonk-intro-cn/plonk-polycom.md:15
#: src/halo2/chap-1/index.md:11 src/halo2/tmp/3-Fibonacci-example-2.md:426
#: src/zk-everything/zk-learning-miles/KZG.md:45
#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:242 SNARKs.md:244 SNARKs.md:254 SNARKs.md:258 SNARKs.md:261
#: SNARKs.md:263 SNARKs.md:284 SNARKs.md:302 SNARKs.md:342 SNARKs.md:387
#: SNARKs.md:398 src/zk-everything/zk-everything-joe/Spartan.md:110
#: src/zk-everything/zk-everything-joe/Spartan.md:117
#: src/zk-everything/zk-everything-joe/Spartan.md:118
#: src/zk-everything/zk-everything-joe/Spartan.md:122
#: src/zk-everything/zk-everything-joe/Spartan.md:334
#: src/zk-everything/zk-everything-joe/Spartan.md:339
#: src/zk-everything/zk-everything-joe/Spartan.md:343
#: src/zk-everything/zk-everything-joe/Spartan.md:344
#: src/zk-everything/zk-everything-joe/Spartan.md:346
#: src/zk-everything/zk-everything-joe/Spartan.md:347
#: src/zk-everything/zk-everything-joe/Spartan.md:350
#: src/zk-everything/zk-everything-joe/Spartan.md:353
#: src/zk-everything/zk-everything-joe/Spartan.md:355
#: src/zk-everything/zk-everything-joe/Spartan.md:359
#: src/zk-everything/zk-everything-joe/Spartan.md:360
#: src/zk-everything/zk-everything-joe/Spartan.md:361 src/public
#: goods/第二章.md:9 goods/第二章.md:10 goods/第二章.md:16
#: goods/第二章.md:18 goods/第二章.md:19 goods/第二章.md:20
#: goods/第二章.md:25 goods/第二章.md:26 goods/第二章.md:33
#: goods/第二章.md:147 goods/4-Proving-System.md:55
#: goods/4-Proving-System.md:58 goods/4-Proving-System.md:60
#: goods/4-Proving-System.md:62 goods/4-Proving-System.md:157
msgid "co"
msgstr "co"

#: src/plonk-intro-cn/plonk-polycom.md:9 src/plonk-intro-cn/plonk-polycom.md:15
#: src/plonk-intro-cn/plonk-polycom.md:35
#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:387 src/public goods/第二章.md:125 goods/第二章.md:129
msgid "mmi"
msgstr "mmi"

#: src/plonk-intro-cn/plonk-polycom.md:11
msgid "这个值和原对象存在两个关系，即 Hiding 与 Binding。"
msgstr "这个值和原对象存在两个关系，即 Hiding 与 Binding。"

#: src/plonk-intro-cn/plonk-polycom.md:13
msgid "Hiding： "
msgstr "Hiding： "

#: src/plonk-intro-cn/plonk-polycom.md:13
msgid " 不暴露任何关于 "
msgstr " 不暴露任何关于 "

#: src/plonk-intro-cn/plonk-polycom.md:13
msgid " 的信息；"
msgstr " 的信息；"

#: src/plonk-intro-cn/plonk-polycom.md:15
msgid "Binding：难以找到一个 "
msgstr "Binding：难以找到一个 "

#: src/plonk-intro-cn/plonk-polycom.md:15 src/zk-everything/BabySNARK
#: tutorial.md:145
msgid "，使得 "
msgstr "，使得 "

#: src/plonk-intro-cn/plonk-polycom.md:17
msgid ""
"最简单的承诺操作就是 Hash 运算。请注意这里的 Hash 运算需要具备密码学安全强"
"度，比如 SHA256, Keccak 等。除了 Hash 算法之外，还有 Pedersen 承诺等。"
msgstr ""
"最简单的承诺操作就是 Hash 运算。请注意这里的 Hash 运算需要具备密码学安全强"
"度，比如 SHA256, Keccak 等。除了 Hash 算法之外，还有 Pedersen 承诺等。"

#: src/plonk-intro-cn/plonk-polycom.md:19
msgid ""
"顾名思义，多项式承诺可以理解为「多项式」的「承诺」。如果我们把一个多项式表达"
"成如下的公式，"
msgstr ""
"顾名思义，多项式承诺可以理解为「多项式」的「承诺」。如果我们把一个多项式表达"
"成如下的公式，"

#: src/plonk-intro-cn/plonk-polycom.md:23
msgid "那么我们可以用所有系数构成的向量来唯一标识多项式 "
msgstr "那么我们可以用所有系数构成的向量来唯一标识多项式 "

#: src/plonk-intro-cn/plonk-polycom.md:27
msgid ""
"如何对一个多项式进行承诺？很容易能想到，我们可以把「系数向量」进行 Hash 运"
"算，得到一个数值，就能建立与这个多项式之间唯一的绑定关系。"
msgstr ""
"如何对一个多项式进行承诺？很容易能想到，我们可以把「系数向量」进行 Hash 运"
"算，得到一个数值，就能建立与这个多项式之间唯一的绑定关系。"

#: src/plonk-intro-cn/plonk-polycom.md:29
msgid "SHA256"
msgstr "SHA256"

#: src/plonk-intro-cn/plonk-polycom.md:29
msgid "∥"
msgstr "∥"

#: src/plonk-intro-cn/plonk-polycom.md:31
msgid ""
"或者，我们也可以使用 Petersen 承诺，通过一组随机选择的基，来计算一个 ECC 点："
msgstr ""
"或者，我们也可以使用 Petersen 承诺，通过一组随机选择的基，来计算一个 ECC 点："

#: src/plonk-intro-cn/plonk-polycom.md:35
msgid ""
"如果在 Prover 承诺多项式之后，Verifier 可以根据这个承诺，对被锁定的多项式进行"
"求值，并希望 Prover 可以证明求值的正确性。假设 "
msgstr ""
"如果在 Prover 承诺多项式之后，Verifier 可以根据这个承诺，对被锁定的多项式进行"
"求值，并希望 Prover 可以证明求值的正确性。假设 "

#: src/plonk-intro-cn/plonk-polycom.md:35
msgid "，Verifier 可以向提供承诺的 Prover 询问多项式在 "
msgstr "，Verifier 可以向提供承诺的 Prover 询问多项式在 "

#: src/plonk-intro-cn/plonk-polycom.md:35
msgid " 处的取值。Prover 除了回复一个计算结果之外（如 "
msgstr " 处的取值。Prover 除了回复一个计算结果之外（如 "

#: src/plonk-intro-cn/plonk-polycom.md:35
#: src/plonk-intro-cn/plonk-polycom.md:37
#: src/plonk-intro-cn/plonk-polycom.md:63
#: src/plonk-intro-cn/plonk-polycom.md:65
#: src/plonk-intro-cn/plonk-polycom.md:67
#: src/plonk-intro-cn/plonk-polycom.md:69
#: src/plonk-intro-cn/plonk-polycom.md:71
#: src/plonk-intro-cn/plonk-polycom.md:75
#: src/plonk-intro-cn/plonk-polycom.md:79
#: src/plonk-intro-cn/plonk-polycom.md:81
#: src/plonk-intro-cn/plonk-polycom.md:87
#: src/plonk-intro-cn/plonk-polycom.md:89
#: src/plonk-intro-cn/plonk-polycom.md:97
#: src/plonk-intro-cn/plonk-polycom.md:113
#: src/plonk-intro-cn/plonk-polycom.md:117
#: src/plonk-intro-cn/plonk-polycom.md:124
#: src/plonk-intro-cn/plonk-polycom.md:128
#: src/plonk-intro-cn/plonk-polycom.md:134
#: src/plonk-intro-cn/plonk-polycom.md:136
#: src/plonk-intro-cn/plonk-randomizing.md:151
#: src/plonk-intro-cn/plonk-randomizing.md:155
#: src/plonk-intro-cn/plonk-randomizing.md:159
#: src/zk-snarks/3-General-Purpose-Computation.md:295
#: src/zk-snarks/4-Construction-Properties.md:113
#: src/zk-snarks/4-Construction-Properties.md:271
#: src/zk-snarks/4-Construction-Properties.md:286
#: src/zk-snarks/4-Construction-Properties.md:287
#: src/zk-snarks/4-Construction-Properties.md:290
#: src/zk-snarks/5-Pinocchio-Protocol.md:187
#: src/halo2/tmp/2-Fibonacci-example-1.md:19 src/zk-everything/BabySNARK
#: tutorial.md:126 tutorial.md:131
#: src/zk-everything/zk-learning-miles/KZG.md:222
#: src/zk-everything/zk-learning-miles/KZG.md:246
#: src/zk-everything/zk-learning-miles/KZG.md:250
#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:238 Zeroknowledge.md:239
#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:320
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:145
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:152
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:160
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:162
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:166
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:170
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:174
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:192
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:202
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:204
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:206
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:212
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:216
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:234
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:244
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:246
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:248
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:255
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:259
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:279
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:289
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:292
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:294
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:301
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:305
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:323
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:333
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:336
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:343
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:347
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:365
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:377
#: src/zk-everything/zk-everything-joe/Hyrax.md:155
#: src/zk-everything/zk-everything-joe/Hyrax.md:156
#: src/zk-everything/zk-everything-joe/Hyrax.md:166
#: src/zk-everything/zk-everything-joe/Hyrax.md:168
#: src/zk-everything/zk-everything-joe/Hyrax.md:181
#: src/zk-everything/zk-everything-joe/Spartan.md:115
#: src/zk-everything/zk-everything-joe/Spartan.md:118
#: src/zk-everything/zk-everything-joe/Spartan.md:319
#: src/zk-everything/zk-everything-joe/Spartan.md:323
#: src/zk-everything/zk-everything-joe/Spartan.md:339
#: src/zk-everything/zk-everything-joe/Spartan.md:343
#: src/zk-everything/zk-everything-joe/Spartan.md:344
#: src/zk-everything/zk-everything-joe/Spartan.md:349
#: src/zk-everything/zk-everything-joe/Spartan.md:350
#: src/zk-everything/zk-everything-joe/Spartan.md:394
#: src/zk-everything/zk-everything-joe/Spartan.md:450
#: src/zk-everything/zk-everything-joe/Spartan.md:455
#: src/zk-everything/zk-everything-joe/Spartan.md:458
msgid "y"
msgstr "y"

#: src/plonk-intro-cn/plonk-polycom.md:35
msgid "） ，还能提供一个证明 "
msgstr "） ，还能提供一个证明 "

#: src/plonk-intro-cn/plonk-polycom.md:35
#: src/plonk-intro-cn/plonk-polycom.md:103
#: src/plonk-intro-cn/plonk-polycom.md:105
#: src/plonk-intro-cn/plonk-polycom.md:117
#: src/plonk-intro-cn/plonk-polycom.md:132
#: src/plonk-intro-cn/plonk-polycom.md:136
#: src/plonk-intro-cn/plonk-polycom.md:163
#: src/plonk-intro-cn/plonk-polycom.md:171
#: src/plonk-intro-cn/plonk-polycom.md:179
#: src/plonk-intro-cn/plonk-polycom.md:187
#: src/plonk-intro-cn/plonk-randomizing.md:155
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:274
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:277
#: src/zk-everything/zk-learning-miles/KZG.md:47
#: src/zk-everything/zk-learning-miles/KZG.md:53
#: src/zk-everything/zk-learning-miles/KZG.md:102
#: src/zk-everything/zk-learning-miles/KZG.md:110
#: src/zk-everything/zk-learning-miles/KZG.md:203
#: src/zk-everything/zk-learning-miles/KZG.md:209
#: src/zk-everything/zk-learning-miles/KZG.md:211
#: src/zk-everything/zk-learning-miles/KZG.md:226
#: src/zk-everything/zk-learning-miles/KZG.md:246
#: src/zk-everything/zk-learning-miles/KZG.md:248
#: src/zk-everything/zk-learning-miles/KZG.md:318
#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:147 src/zk-everything/zk-everything-joe/Hyrax.md:80
#: src/zk-everything/zk-everything-joe/Hyrax.md:86
#: src/zk-everything/zk-everything-joe/Hyrax.md:92
#: src/zk-everything/zk-everything-joe/Hyrax.md:116
#: src/zk-everything/zk-everything-joe/Hyrax.md:120
#: src/zk-everything/zk-everything-joe/Hyrax.md:124
#: src/zk-everything/zk-everything-joe/Hyrax.md:191
#: src/zk-everything/zk-everything-joe/Hyrax.md:194
#: src/zk-everything/zk-everything-joe/Hyrax.md:207
#: src/zk-everything/zk-everything-joe/Hyrax.md:213 src/public
#: goods/4-Proving-System.md:208 goods/4-Proving-System.md:209
msgid "π"
msgstr "π"

#: src/plonk-intro-cn/plonk-polycom.md:35
msgid "，证明 "
msgstr "，证明 "

#: src/plonk-intro-cn/plonk-polycom.md:35
msgid " 所对应的多项式 "
msgstr " 所对应的多项式 "

#: src/plonk-intro-cn/plonk-polycom.md:35
msgid " 处的取值 "
msgstr " 处的取值 "

#: src/plonk-intro-cn/plonk-polycom.md:35
#: src/plonk-intro-cn/plonk-lookup.md:226
msgid " 的正确性。"
msgstr " 的正确性。"

#: src/plonk-intro-cn/plonk-polycom.md:37
msgid ""
"多项式承诺的这个「携带证明的求值」特性非常有用，它可以被看成是一种轻量级的"
"「可验证计算」。即 Verifier 需要把多项式 "
msgstr ""
"多项式承诺的这个「携带证明的求值」特性非常有用，它可以被看成是一种轻量级的"
"「可验证计算」。即 Verifier 需要把多项式 "

#: src/plonk-intro-cn/plonk-polycom.md:37
msgid ""
" 的运算代理给一个远程的机器（Prover），然后验证计算（计算量要小于直接计算 "
msgstr ""
" 的运算代理给一个远程的机器（Prover），然后验证计算（计算量要小于直接计算 "

#: src/plonk-intro-cn/plonk-polycom.md:37
msgid "）结果 "
msgstr "）结果 "

#: src/plonk-intro-cn/plonk-polycom.md:37
msgid ""
" 的正确性；多项式承诺还能用来证明秘密数据（来自Prover）的性质，比如满足某个多"
"项式，Prover 可以在不泄漏隐私的情况下向 Verifier 证明这个性质。"
msgstr ""
" 的正确性；多项式承诺还能用来证明秘密数据（来自Prover）的性质，比如满足某个多"
"项式，Prover 可以在不泄漏隐私的情况下向 Verifier 证明这个性质。"

#: src/plonk-intro-cn/plonk-polycom.md:39
msgid ""
"虽然这种可验证计算只是局限在多项式运算上，而非通用计算。但通用计算可以通过各"
"种方式转换成多项式计算，从而依托多项式承诺来最终实现通用的可验证计算。"
msgstr ""
"虽然这种可验证计算只是局限在多项式运算上，而非通用计算。但通用计算可以通过各"
"种方式转换成多项式计算，从而依托多项式承诺来最终实现通用的可验证计算。"

#: src/plonk-intro-cn/plonk-polycom.md:41
msgid "按上面 "
msgstr "按上面 "

#: src/plonk-intro-cn/plonk-polycom.md:41
msgid ""
" 的方式对多项式的系数进行 Pedersen 承诺，我们仍然可以利用 Bulletproof-IPA 协"
"议来实现求值证明，进而实现另一种多项式承诺方案。此外，还有 KZG10 方案，FRI，"
"Dark，Dory 等等其它方案。"
msgstr ""
" 的方式对多项式的系数进行 Pedersen 承诺，我们仍然可以利用 Bulletproof-IPA 协"
"议来实现求值证明，进而实现另一种多项式承诺方案。此外，还有 KZG10 方案，FRI，"
"Dark，Dory 等等其它方案。"

#: src/plonk-intro-cn/plonk-polycom.md:43
msgid "KZG10 构造"
msgstr "KZG10 构造"

#: src/plonk-intro-cn/plonk-polycom.md:45
msgid ""
"与 Pedersen 承诺中用的随机基向量相比，KZG10 多项式承诺需要用一组具有内部代数"
"结构的基向量来代替。"
msgstr ""
"与 Pedersen 承诺中用的随机基向量相比，KZG10 多项式承诺需要用一组具有内部代数"
"结构的基向量来代替。"

#: src/plonk-intro-cn/plonk-polycom.md:47
#: src/plonk-intro-cn/plonk-polycom.md:49
#: src/plonk-intro-cn/plonk-polycom.md:53
#: src/plonk-intro-cn/plonk-polycom.md:55
#: src/plonk-intro-cn/plonk-polycom.md:59
#: src/plonk-intro-cn/plonk-polycom.md:61
#: src/plonk-intro-cn/plonk-polycom.md:69
#: src/plonk-intro-cn/plonk-polycom.md:75
#: src/plonk-intro-cn/plonk-polycom.md:81
#: src/plonk-intro-cn/plonk-polycom.md:105
#: src/plonk-intro-cn/plonk-polycom.md:124
#: src/plonk-intro-cn/plonk-polycom.md:132
#: src/plonk-intro-cn/plonk-polycom.md:136
#: src/plonk-intro-cn/plonk-polycom.md:141
#: src/plonk-intro-cn/plonk-polycom.md:145
#: src/plonk-intro-cn/plonk-polycom.md:147
#: src/plonk-intro-cn/plonk-polycom.md:155
#: src/plonk-intro-cn/plonk-polycom.md:157
#: src/plonk-intro-cn/plonk-polycom.md:169
#: src/plonk-intro-cn/plonk-polycom.md:183
#: src/plonk-intro-cn/plonk-polycom.md:187
#: src/plonk-intro-cn/plonk-polycom.md:197
#: src/plonk-intro-cn/plonk-polycom.md:209
#: src/plonk-intro-cn/plonk-polycom.md:217
#: src/plonk-intro-cn/plonk-polycom.md:221
#: src/plonk-intro-cn/plonk-polycom.md:229
#: src/plonk-intro-cn/plonk-randomizing.md:141
#: src/plonk-intro-cn/plonk-randomizing.md:149
#: src/plonk-intro-cn/plonk-randomizing.md:159
#: src/zk-everything/zk-everything-joe/Hyrax.md:292
#: src/zk-everything/zk-everything-joe/Hyrax.md:296
#: src/zk-everything/zk-everything-joe/Hyrax.md:297
#: src/zk-everything/zk-everything-joe/Hyrax.md:302
#: src/zk-everything/zk-everything-joe/Hyrax.md:311
msgid "χ"
msgstr "χ"

#: src/plonk-intro-cn/plonk-polycom.md:47
msgid "χH"
msgstr "χH"

#: src/plonk-intro-cn/plonk-polycom.md:49
msgid "请注意，这里的 "
msgstr "请注意，这里的 "

#: src/plonk-intro-cn/plonk-polycom.md:49
msgid ""
" 是一个可信第三方提供的随机数，也被称为 Trapdoor，需要在第三方完成 Setup 后被"
"彻底删除。它既不能让 Verifier 知道，也不能让 Prover 知道。当 "
msgstr ""
" 是一个可信第三方提供的随机数，也被称为 Trapdoor，需要在第三方完成 Setup 后被"
"彻底删除。它既不能让 Verifier 知道，也不能让 Prover 知道。当 "

#: src/plonk-intro-cn/plonk-polycom.md:49
msgid " 设置好之后， "
msgstr " 设置好之后， "

#: src/plonk-intro-cn/plonk-polycom.md:49
msgid ""
" 被埋入了基向量中。这样一来，从外部看，这组基向量与随机基向量难以被区分。其"
"中 "
msgstr ""
" 被埋入了基向量中。这样一来，从外部看，这组基向量与随机基向量难以被区分。其"
"中 "

#: src/plonk-intro-cn/plonk-polycom.md:49
msgid "，并且存在双线性映射 "
msgstr "，并且存在双线性映射 "

#: src/plonk-intro-cn/plonk-polycom.md:49
#: src/plonk-intro-cn/plonk-polycom.md:73
#: src/plonk-intro-cn/plonk-polycom.md:75
#: src/plonk-intro-cn/plonk-polycom.md:81
#: src/plonk-intro-cn/plonk-polycom.md:117
#: src/plonk-intro-cn/plonk-polycom.md:136
#: src/plonk-intro-cn/plonk-polycom.md:155
#: src/plonk-intro-cn/plonk-polycom.md:187
#: src/plonk-intro-cn/plonk-polycom.md:229
#: src/plonk-intro-cn/plonk-randomizing.md:159
#: src/plonk-intro-cn/plonk-lookup.md:208
#: src/plonk-intro-cn/plonk-lookup.md:210
#: src/plonk-intro-cn/plonk-lookup.md:212
#: src/plonk-intro-cn/plonk-lookup.md:214
#: src/plonk-intro-cn/plonk-lookup.md:218
#: src/plonk-intro-cn/plonk-lookup.md:224
#: src/plonk-intro-cn/plonk-lookup.md:238
#: src/plonk-intro-cn/plonk-lookup.md:279
#: src/plonk-intro-cn/plonk-lookup.md:297
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:269
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:26
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:126
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:149
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:152
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:164
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:169
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:170
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:175
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:176
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:194
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:196
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:229
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:231
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:232
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:235
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:237
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:247
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:279
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:280
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:281
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:282
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:283
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:286
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:287
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:289
#: src/zk-snarks/3-General-Purpose-Computation.md:108
#: src/zk-snarks/3-General-Purpose-Computation.md:112
#: src/zk-snarks/3-General-Purpose-Computation.md:137
#: src/zk-snarks/3-General-Purpose-Computation.md:233
#: src/zk-snarks/3-General-Purpose-Computation.md:257
#: src/zk-snarks/3-General-Purpose-Computation.md:279
#: src/zk-snarks/3-General-Purpose-Computation.md:295
#: src/zk-snarks/3-General-Purpose-Computation.md:366
#: src/zk-snarks/3-General-Purpose-Computation.md:369
#: src/zk-snarks/4-Construction-Properties.md:46
#: src/zk-snarks/4-Construction-Properties.md:95
#: src/zk-snarks/4-Construction-Properties.md:217
#: src/zk-snarks/4-Construction-Properties.md:219
#: src/zk-snarks/4-Construction-Properties.md:271
#: src/zk-snarks/4-Construction-Properties.md:279
#: src/zk-snarks/4-Construction-Properties.md:280
#: src/zk-snarks/4-Construction-Properties.md:313
#: src/zk-snarks/4-Construction-Properties.md:315
#: src/zk-snarks/4-Construction-Properties.md:326
#: src/zk-snarks/4-Construction-Properties.md:353
#: src/zk-snarks/4-Construction-Properties.md:357
#: src/zk-snarks/4-Construction-Properties.md:359
#: src/zk-snarks/4-Construction-Properties.md:384
#: src/zk-snarks/4-Construction-Properties.md:405
#: src/zk-snarks/4-Construction-Properties.md:431
#: src/zk-snarks/4-Construction-Properties.md:434
#: src/zk-snarks/4-Construction-Properties.md:436
#: src/zk-snarks/4-Construction-Properties.md:443
#: src/zk-snarks/5-Pinocchio-Protocol.md:46
#: src/zk-snarks/5-Pinocchio-Protocol.md:48
#: src/zk-snarks/5-Pinocchio-Protocol.md:50
#: src/zk-snarks/5-Pinocchio-Protocol.md:52
#: src/zk-snarks/5-Pinocchio-Protocol.md:62
#: src/zk-snarks/5-Pinocchio-Protocol.md:83
#: src/zk-snarks/5-Pinocchio-Protocol.md:102
#: src/zk-snarks/5-Pinocchio-Protocol.md:106
#: src/zk-snarks/5-Pinocchio-Protocol.md:109
#: src/zk-snarks/5-Pinocchio-Protocol.md:118
#: src/zk-snarks/5-Pinocchio-Protocol.md:133
#: src/zk-snarks/5-Pinocchio-Protocol.md:137
#: src/zk-snarks/5-Pinocchio-Protocol.md:139
#: src/zk-snarks/5-Pinocchio-Protocol.md:163
#: src/zk-snarks/5-Pinocchio-Protocol.md:186
#: src/zk-snarks/5-Pinocchio-Protocol.md:218
#: src/zk-snarks/5-Pinocchio-Protocol.md:222
#: src/zk-snarks/5-Pinocchio-Protocol.md:225
#: src/halo2/tmp/3-Fibonacci-example-2.md:189
#: src/halo2/tmp/3-Fibonacci-example-2.md:393
#: src/halo2/tmp/4-IsZero-Check-example-3.md:127
#: src/halo2/tmp/4-IsZero-Check-example-3.md:128
#: src/halo2/tmp/9-decomposed.md:39 src/halo2/tmp/9-decomposed.md:40
#: src/halo2/tmp/9-decomposed.md:43 src/halo2/tmp/9-decomposed.md:44
#: src/halo2/tmp/9-decomposed.md:47 src/halo2/tmp/9-decomposed.md:48
#: src/halo2/tmp/9-decomposed.md:101 src/halo2/tmp/9-decomposed.md:104
#: src/halo2/tmp/9-decomposed.md:130
#: src/zk-everything/zk-learning-miles/KZG.md:164
#: src/zk-everything/zk-learning-miles/KZG.md:170
#: src/zk-everything/zk-learning-miles/KZG.md:183
#: src/zk-everything/zk-learning-miles/KZG.md:185
#: src/zk-everything/zk-learning-miles/KZG.md:209
#: src/zk-everything/zk-learning-miles/KZG.md:211
#: src/zk-everything/zk-learning-miles/KZG.md:213
#: src/zk-everything/zk-learning-miles/KZG.md:246
#: src/zk-everything/zk-learning-miles/KZG.md:248
#: src/zk-everything/zk-learning-miles/KZG.md:250
#: src/zk-everything/zk-learning-miles/KZG.md:318
#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:238 Zeroknowledge.md:239
#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:198 src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:64
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:91
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:134
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:145
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:152
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:396
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:448
#: src/zk-everything/zk-everything-joe/Hyrax.md:58
#: src/zk-everything/zk-everything-joe/Hyrax.md:64
#: src/zk-everything/zk-everything-joe/Hyrax.md:70
#: src/zk-everything/zk-everything-joe/Hyrax.md:98
#: src/zk-everything/zk-everything-joe/Hyrax.md:172
#: src/zk-everything/zk-everything-joe/Hyrax.md:173
#: src/zk-everything/zk-everything-joe/Hyrax.md:181
#: src/zk-everything/zk-everything-joe/Hyrax.md:191
#: src/zk-everything/zk-everything-joe/Hyrax.md:222
#: src/zk-everything/zk-everything-joe/Hyrax.md:223
#: src/zk-everything/zk-everything-joe/Hyrax.md:228
#: src/zk-everything/zk-everything-joe/Spartan.md:23
#: src/zk-everything/zk-everything-joe/Spartan.md:24
#: src/zk-everything/zk-everything-joe/Spartan.md:25
#: src/zk-everything/zk-everything-joe/Spartan.md:26
#: src/zk-everything/zk-everything-joe/Spartan.md:117
#: src/zk-everything/zk-everything-joe/Spartan.md:118
#: src/zk-everything/zk-everything-joe/Spartan.md:122
#: src/zk-everything/zk-everything-joe/Spartan.md:126
#: src/zk-everything/zk-everything-joe/Spartan.md:135
#: src/zk-everything/zk-everything-joe/Spartan.md:142
#: src/zk-everything/zk-everything-joe/Spartan.md:154
#: src/zk-everything/zk-everything-joe/Spartan.md:242
#: src/zk-everything/zk-everything-joe/Spartan.md:246
#: src/zk-everything/zk-everything-joe/Spartan.md:254
#: src/zk-everything/zk-everything-joe/Spartan.md:257
#: src/zk-everything/zk-everything-joe/Spartan.md:264
#: src/zk-everything/zk-everything-joe/Spartan.md:268
#: src/zk-everything/zk-everything-joe/Spartan.md:275
#: src/zk-everything/zk-everything-joe/Spartan.md:278
#: src/zk-everything/zk-everything-joe/Spartan.md:319
#: src/zk-everything/zk-everything-joe/Spartan.md:339
#: src/zk-everything/zk-everything-joe/Spartan.md:343
#: src/zk-everything/zk-everything-joe/Spartan.md:344
#: src/zk-everything/zk-everything-joe/Spartan.md:346
#: src/zk-everything/zk-everything-joe/Spartan.md:347
#: src/zk-everything/zk-everything-joe/Spartan.md:350
#: src/zk-everything/zk-everything-joe/Spartan.md:353
#: src/zk-everything/zk-everything-joe/Spartan.md:355
#: src/zk-everything/zk-everything-joe/Spartan.md:359
#: src/zk-everything/zk-everything-joe/Spartan.md:361
#: src/zk-everything/zk-everything-joe/Spartan.md:441
#: src/zk-everything/zk-everything-joe/Spartan.md:445
#: src/zk-everything/zk-everything-joe/Spartan.md:450 src/Nova/SuperNova.md:66
#: src/Nova/SuperNova.md:68 src/public goods/第二章.md:17
#: goods/第二章.md:40 goods/第二章.md:41 goods/第二章.md:42
#: goods/第二章.md:44 goods/第二章.md:46 goods/第二章.md:48
#: goods/第二章.md:50 goods/第二章.md:72 goods/第二章.md:80
#: goods/第二章.md:81 goods/第二章.md:86 goods/第二章.md:103
#: goods/第二章.md:125 goods/第二章.md:129 goods/第二章.md:146
#: goods/第二章.md:147 goods/4-Proving-System.md:58
#: goods/4-Proving-System.md:157 goods/4-Proving-System.md:171
#: goods/4-Proving-System.md:173 goods/4-Proving-System.md:177
#: goods/4-Proving-System.md:209
msgid "e"
msgstr "e"

#: src/plonk-intro-cn/plonk-polycom.md:51
msgid "对于一个多项式 "
msgstr "对于一个多项式 "

#: src/plonk-intro-cn/plonk-polycom.md:51
msgid " 进行 KZG10 承诺，也是对其系数向量进行承诺："
msgstr " 进行 KZG10 承诺，也是对其系数向量进行承诺："

#: src/plonk-intro-cn/plonk-polycom.md:55
msgid "这样承诺 "
msgstr "这样承诺 "

#: src/plonk-intro-cn/plonk-polycom.md:55
msgid " 巧好等于 "
msgstr " 巧好等于 "

#: src/plonk-intro-cn/plonk-polycom.md:57
msgid "对于双线性群，我们下面使用 Groth 发明的符号 "
msgstr "对于双线性群，我们下面使用 Groth 发明的符号 "

#: src/plonk-intro-cn/plonk-polycom.md:57
msgid ""
" 表示两个群上的生成元，这样 KZG10 的系统参数（也被称为 SRS, Structured "
"Reference String）可以表示如下："
msgstr ""
" 表示两个群上的生成元，这样 KZG10 的系统参数（也被称为 SRS, Structured "
"Reference String）可以表示如下："

#: src/plonk-intro-cn/plonk-polycom.md:59
#: src/plonk-intro-cn/plonk-randomizing.md:141
msgid "srs"
msgstr "srs"

#: src/plonk-intro-cn/plonk-polycom.md:59
#: src/plonk-intro-cn/plonk-polycom.md:155
#: src/plonk-intro-cn/plonk-polycom.md:187
#: src/plonk-intro-cn/plonk-polycom.md:229
#: src/plonk-intro-cn/plonk-randomizing.md:141
#: src/plonk-intro-cn/plonk-randomizing.md:155
#: src/plonk-intro-cn/plonk-randomizing.md:159
#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:374
msgid "(\\["
msgstr "(\\["

#: src/plonk-intro-cn/plonk-polycom.md:63
msgid "下面构造一个 "
msgstr "下面构造一个 "

#: src/plonk-intro-cn/plonk-polycom.md:63
msgid " 的 Open 证明。根据多项式余数定理，我们可以得到下面的等式："
msgstr " 的 Open 证明。根据多项式余数定理，我们可以得到下面的等式："

#: src/plonk-intro-cn/plonk-polycom.md:67
msgid ""
"这个等式可以解释为，任何一个多项式都可以除以另一个多项式，得到一个商多项式加"
"上一个余数多项式。由于多项式在 "
msgstr ""
"这个等式可以解释为，任何一个多项式都可以除以另一个多项式，得到一个商多项式加"
"上一个余数多项式。由于多项式在 "

#: src/plonk-intro-cn/plonk-polycom.md:67
msgid " 处的取值为 "
msgstr " 处的取值为 "

#: src/plonk-intro-cn/plonk-polycom.md:67
msgid "，那么我们可以确定：余数多项式一定为 "
msgstr "，那么我们可以确定：余数多项式一定为 "

#: src/plonk-intro-cn/plonk-polycom.md:67
msgid " ，因为等式右边的第一项在 "
msgstr " ，因为等式右边的第一项在 "

#: src/plonk-intro-cn/plonk-polycom.md:67
msgid " 处取值为零。所以，如果 "
msgstr " 处取值为零。所以，如果 "

#: src/plonk-intro-cn/plonk-polycom.md:67
msgid "，我们可以断定： "
msgstr "，我们可以断定： "

#: src/plonk-intro-cn/plonk-polycom.md:67
msgid " 处等零，所以 "
msgstr " 处等零，所以 "

#: src/plonk-intro-cn/plonk-polycom.md:67
msgid " 的根，于是 "
msgstr " 的根，于是 "

#: src/plonk-intro-cn/plonk-polycom.md:67
msgid " 一定可以被 "
msgstr " 一定可以被 "

#: src/plonk-intro-cn/plonk-polycom.md:67
msgid " 这个不可约多项式整除，即一定**存在**一个商多项式 "
msgstr " 这个不可约多项式整除，即一定**存在**一个商多项式 "

#: src/plonk-intro-cn/plonk-polycom.md:67
msgid "，满足上述等式。"
msgstr "，满足上述等式。"

#: src/plonk-intro-cn/plonk-polycom.md:69
msgid "而 Prover 则可以提供 "
msgstr "而 Prover 则可以提供 "

#: src/plonk-intro-cn/plonk-polycom.md:69
msgid " 多项式的承诺，记为 "
msgstr " 多项式的承诺，记为 "

#: src/plonk-intro-cn/plonk-polycom.md:69
msgid "，作为 "
msgstr "，作为 "

#: src/plonk-intro-cn/plonk-polycom.md:69
msgid " 的证明，Verifier 可以检查 "
msgstr " 的证明，Verifier 可以检查 "

#: src/plonk-intro-cn/plonk-polycom.md:69
msgid " 是否满足整除性来验证证明。因为如果 "
msgstr " 是否满足整除性来验证证明。因为如果 "

#: src/plonk-intro-cn/plonk-polycom.md:69
msgid " 则无法被 "
msgstr " 则无法被 "

#: src/plonk-intro-cn/plonk-polycom.md:69
msgid " 整除，即使 Prover 提供的承诺将无法通过整除性检查："
msgstr " 整除，即使 Prover 提供的承诺将无法通过整除性检查："

#: src/plonk-intro-cn/plonk-polycom.md:73
msgid "承诺 "
msgstr "承诺 "

#: src/plonk-intro-cn/plonk-polycom.md:73
msgid " 是群 "
msgstr " 是群 "

#: src/plonk-intro-cn/plonk-polycom.md:73
msgid " 上的一个元素，通过承诺的加法同态映射关系，以及双线性映射关系 "
msgstr " 上的一个元素，通过承诺的加法同态映射关系，以及双线性映射关系 "

#: src/plonk-intro-cn/plonk-polycom.md:73
msgid "，Verifier 可以在 "
msgstr "，Verifier 可以在 "

#: src/plonk-intro-cn/plonk-polycom.md:73
msgid " 上验证整除性关系："
msgstr " 上验证整除性关系："

#: src/plonk-intro-cn/plonk-polycom.md:77
msgid "有时为了减少 Verifier 在 "
msgstr "有时为了减少 Verifier 在 "

#: src/plonk-intro-cn/plonk-polycom.md:77
msgid " 上的昂贵操作，上面的验证等式可以变形为："
msgstr " 上的昂贵操作，上面的验证等式可以变形为："

#: src/plonk-intro-cn/plonk-polycom.md:83
msgid "同点 Open 的证明聚合"
msgstr "同点 Open 的证明聚合"

#: src/plonk-intro-cn/plonk-polycom.md:85
msgid ""
"在一个更大的安全协议中，假如同时使用多个多项式承诺，那么他们的 Open 操作可以"
"合并在一起完成。即把多个多项式先合并成一个更大的多项式，然后仅通过 Open 一"
"点，来完成对原始多项式的批量验证。"
msgstr ""
"在一个更大的安全协议中，假如同时使用多个多项式承诺，那么他们的 Open 操作可以"
"合并在一起完成。即把多个多项式先合并成一个更大的多项式，然后仅通过 Open 一"
"点，来完成对原始多项式的批量验证。"

#: src/plonk-intro-cn/plonk-polycom.md:87
msgid "假设我们有多个多项式， "
msgstr "假设我们有多个多项式， "

#: src/plonk-intro-cn/plonk-polycom.md:87
msgid "，Prover 要同时向 Verifier 证明 "
msgstr "，Prover 要同时向 Verifier 证明 "

#: src/plonk-intro-cn/plonk-polycom.md:87
msgid "，那么有 "
msgstr "，那么有 "

#: src/plonk-intro-cn/plonk-polycom.md:91
msgid "通过一个随机数 "
msgstr "通过一个随机数 "

#: src/plonk-intro-cn/plonk-polycom.md:91
#: src/plonk-intro-cn/plonk-polycom.md:93
#: src/plonk-intro-cn/plonk-polycom.md:97
#: src/plonk-intro-cn/plonk-polycom.md:101
#: src/plonk-intro-cn/plonk-polycom.md:105
#: src/plonk-intro-cn/plonk-polycom.md:107
#: src/plonk-intro-cn/plonk-polycom.md:109
#: src/plonk-intro-cn/plonk-polycom.md:113
#: src/plonk-intro-cn/plonk-polycom.md:119
#: src/plonk-intro-cn/plonk-polycom.md:130
#: src/plonk-intro-cn/plonk-polycom.md:132
#: src/plonk-intro-cn/plonk-polycom.md:134
#: src/plonk-intro-cn/plonk-polycom.md:189
#: src/plonk-intro-cn/plonk-polycom.md:207
#: src/plonk-intro-cn/plonk-polycom.md:209
#: src/plonk-intro-cn/plonk-polycom.md:213
#: src/plonk-intro-cn/plonk-polycom.md:221
#: src/plonk-intro-cn/plonk-polycom.md:225
msgid "ν"
msgstr "ν"

#: src/plonk-intro-cn/plonk-polycom.md:91
msgid "，Prover 可以把两个多项式 "
msgstr "，Prover 可以把两个多项式 "

#: src/plonk-intro-cn/plonk-polycom.md:91
msgid " 折叠在一起，得到一个临时的多项式 "
msgstr " 折叠在一起，得到一个临时的多项式 "

#: src/plonk-intro-cn/plonk-polycom.md:95
msgid "进而我们可以根据多项式余数定理，推导验证下面的等式："
msgstr "进而我们可以根据多项式余数定理，推导验证下面的等式："

#: src/plonk-intro-cn/plonk-polycom.md:99
msgid "我们把等号右边的第二项看作为「商多项式」，记为 "
msgstr "我们把等号右边的第二项看作为「商多项式」，记为 "

#: src/plonk-intro-cn/plonk-polycom.md:103
msgid "假如 "
msgstr "假如 "

#: src/plonk-intro-cn/plonk-polycom.md:103
msgid " 处的求值证明为 "
msgstr " 处的求值证明为 "

#: src/plonk-intro-cn/plonk-polycom.md:103
msgid "，那么根据群加法的同态性，Prover 可以得到商多项式  "
msgstr "，那么根据群加法的同态性，Prover 可以得到商多项式  "

#: src/plonk-intro-cn/plonk-polycom.md:103
#: src/plonk-intro-cn/plonk-polycom.md:181
msgid " 的承诺："
msgstr " 的承诺："

#: src/plonk-intro-cn/plonk-polycom.md:107
msgid "因此，只要 Verifier 发给 Prover 一个额外的随机数 "
msgstr "因此，只要 Verifier 发给 Prover 一个额外的随机数 "

#: src/plonk-intro-cn/plonk-polycom.md:107
msgid "，双方就可以把两个（甚至多个）多项式承诺折叠成一个多项式承诺 "
msgstr "，双方就可以把两个（甚至多个）多项式承诺折叠成一个多项式承诺 "

#: src/plonk-intro-cn/plonk-polycom.md:111
msgid "并用这个折叠后的 "
msgstr "并用这个折叠后的 "

#: src/plonk-intro-cn/plonk-polycom.md:111
msgid " 来验证多个多项式在一个点处的运算取值："
msgstr " 来验证多个多项式在一个点处的运算取值："

#: src/plonk-intro-cn/plonk-polycom.md:115
msgid "从而把多个求值证明相应地折叠成一个，Verifier 可以一次验证完毕："
msgstr "从而把多个求值证明相应地折叠成一个，Verifier 可以一次验证完毕："

#: src/plonk-intro-cn/plonk-polycom.md:119
msgid "由于引入了随机数 "
msgstr "由于引入了随机数 "

#: src/plonk-intro-cn/plonk-polycom.md:119
msgid "，因此多项式的合并不会影响承诺的绑定关系（Schwartz-Zippel 定理）。"
msgstr "，因此多项式的合并不会影响承诺的绑定关系（Schwartz-Zippel 定理）。"

#: src/plonk-intro-cn/plonk-polycom.md:122
#: src/plonk-intro-cn/plonk-polycom.md:195
msgid "协议："
msgstr "协议："

#: src/plonk-intro-cn/plonk-polycom.md:124
#: src/plonk-intro-cn/plonk-polycom.md:197
msgid "公共输入： "
msgstr "公共输入： "

#: src/plonk-intro-cn/plonk-polycom.md:126
#: src/plonk-intro-cn/plonk-polycom.md:199
msgid "私有输入： "
msgstr "私有输入： "

#: src/plonk-intro-cn/plonk-polycom.md:128
#: src/plonk-intro-cn/plonk-polycom.md:201
msgid "证明目标： "
msgstr "证明目标： "

#: src/plonk-intro-cn/plonk-polycom.md:130
msgid "第一轮：Verifier 提出挑战数 "
msgstr "第一轮：Verifier 提出挑战数 "

#: src/plonk-intro-cn/plonk-polycom.md:132
msgid "第二轮：Prover 计算 "
msgstr "第二轮：Prover 计算 "

#: src/plonk-intro-cn/plonk-polycom.md:132
msgid "，并发送  "
msgstr "，并发送  "

#: src/plonk-intro-cn/plonk-polycom.md:134
msgid "第三轮：Verifier 计算 "
msgstr "第三轮：Verifier 计算 "

#: src/plonk-intro-cn/plonk-polycom.md:139
msgid "多项式约束与线性化"
msgstr "多项式约束与线性化"

#: src/plonk-intro-cn/plonk-polycom.md:141
msgid "假设  "
msgstr "假设  "

#: src/plonk-intro-cn/plonk-polycom.md:141
msgid " 分别是 "
msgstr " 分别是 "

#: src/plonk-intro-cn/plonk-polycom.md:141
msgid " 的 KZG10 承诺，如果 Verifier 要验证下面的多项式约束："
msgstr " 的 KZG10 承诺，如果 Verifier 要验证下面的多项式约束："

#: src/plonk-intro-cn/plonk-polycom.md:145
msgid "那么  Verifier 只需要把前两者的承诺相加，然后判断是否等于 "
msgstr "那么  Verifier 只需要把前两者的承诺相加，然后判断是否等于 "

#: src/plonk-intro-cn/plonk-polycom.md:145
msgid "  即可"
msgstr "  即可"

#: src/plonk-intro-cn/plonk-polycom.md:149
msgid "如果 Verifier 需要验证的多项式关系涉及到乘法，比如："
msgstr "如果 Verifier 需要验证的多项式关系涉及到乘法，比如："

#: src/plonk-intro-cn/plonk-polycom.md:153
msgid "最直接的方法是利用双线性群的特性，在 "
msgstr "最直接的方法是利用双线性群的特性，在 "

#: src/plonk-intro-cn/plonk-polycom.md:153
msgid " 上检查乘法关系，即验证下面的等式："
msgstr " 上检查乘法关系，即验证下面的等式："

#: src/plonk-intro-cn/plonk-polycom.md:157
msgid "但是如果 Verifier 只有 "
msgstr "但是如果 Verifier 只有 "

#: src/plonk-intro-cn/plonk-polycom.md:157
msgid " 上的承诺 "
msgstr " 上的承诺 "

#: src/plonk-intro-cn/plonk-polycom.md:157
msgid "，而非是在 "
msgstr "，而非是在 "

#: src/plonk-intro-cn/plonk-polycom.md:157
msgid "，那么Verifer 就无法利用双线性配对操作来完成乘法检验。"
msgstr "，那么Verifer 就无法利用双线性配对操作来完成乘法检验。"

#: src/plonk-intro-cn/plonk-polycom.md:159
msgid "另一个直接的方案是把三个多项式在同一个挑战点 "
msgstr "另一个直接的方案是把三个多项式在同一个挑战点 "

#: src/plonk-intro-cn/plonk-polycom.md:159
msgid " 上打开，然后验证打开值之间的关系是否满足乘法约束："
msgstr " 上打开，然后验证打开值之间的关系是否满足乘法约束："

#: src/plonk-intro-cn/plonk-polycom.md:163
msgid "同时 Prover 还要提供三个多项式求值的证明 "
msgstr "同时 Prover 还要提供三个多项式求值的证明 "

#: src/plonk-intro-cn/plonk-polycom.md:163
msgid "  供 Verifier 验证。 "
msgstr "  供 Verifier 验证。 "

#: src/plonk-intro-cn/plonk-polycom.md:165
msgid ""
"这个方案的优势在于多项式的约束关系可以更加复杂和灵活，比如验证下面的稍微复杂"
"些的多项式约束："
msgstr ""
"这个方案的优势在于多项式的约束关系可以更加复杂和灵活，比如验证下面的稍微复杂"
"些的多项式约束："

#: src/plonk-intro-cn/plonk-polycom.md:169
msgid "假设 Verifier 已拥有这些多项式的 KZG10 承诺， "
msgstr "假设 Verifier 已拥有这些多项式的 KZG10 承诺， "

#: src/plonk-intro-cn/plonk-polycom.md:169
msgid "。最直接粗暴的方案是让 Prover 在挑战点 "
msgstr "。最直接粗暴的方案是让 Prover 在挑战点 "

#: src/plonk-intro-cn/plonk-polycom.md:169
msgid " 处打开这 6 个承诺，发送 6 个 Open 值和对应的求值证明："
msgstr " 处打开这 6 个承诺，发送 6 个 Open 值和对应的求值证明："

#: src/plonk-intro-cn/plonk-polycom.md:173
msgid "Verifier 验证 "
msgstr "Verifier 验证 "

#: src/plonk-intro-cn/plonk-polycom.md:173
msgid " 个求值证明，并且验证多项式约束："
msgstr " 个求值证明，并且验证多项式约束："

#: src/plonk-intro-cn/plonk-polycom.md:179
msgid "我们可以进一步优化，比如考虑对于 "
msgstr "我们可以进一步优化，比如考虑对于 "

#: src/plonk-intro-cn/plonk-polycom.md:179
msgid ""
" 这样一个简单的多项式约束，Prover 可以减少 Open 的数量。比如 Prover 先 Open "
msgstr ""
" 这样一个简单的多项式约束，Prover 可以减少 Open 的数量。比如 Prover 先 Open "

#: src/plonk-intro-cn/plonk-polycom.md:179
msgid "，发送求值证明 "
msgstr "，发送求值证明 "

#: src/plonk-intro-cn/plonk-polycom.md:179
msgid " 然后引入一个辅助多项式 "
msgstr " 然后引入一个辅助多项式 "

#: src/plonk-intro-cn/plonk-polycom.md:179
msgid "，再 Open  "
msgstr "，再 Open  "

#: src/plonk-intro-cn/plonk-polycom.md:179
msgid " 处的取值。"
msgstr " 处的取值。"

#: src/plonk-intro-cn/plonk-polycom.md:181
msgid "显然对于一个诚实的 Prover， "
msgstr "显然对于一个诚实的 Prover， "

#: src/plonk-intro-cn/plonk-polycom.md:181
msgid " 求值应该等于零。对于 Verifier，它在收到 "
msgstr " 求值应该等于零。对于 Verifier，它在收到 "

#: src/plonk-intro-cn/plonk-polycom.md:181
msgid " 之后，就可以利用承诺的加法同态性，直接构造 "
msgstr " 之后，就可以利用承诺的加法同态性，直接构造 "

#: src/plonk-intro-cn/plonk-polycom.md:185
msgid "这样一来，Verifier 就不需要单独让 Prover 发送 "
msgstr "这样一来，Verifier 就不需要单独让 Prover 发送 "

#: src/plonk-intro-cn/plonk-polycom.md:185
msgid " 的 Opening，也不需要发送新多项式 "
msgstr " 的 Opening，也不需要发送新多项式 "

#: src/plonk-intro-cn/plonk-polycom.md:185
msgid " 的承诺。Verifier 然后就可以验证 "
msgstr " 的承诺。Verifier 然后就可以验证 "

#: src/plonk-intro-cn/plonk-polycom.md:185
msgid " 这个多项式约束关系："
msgstr " 这个多项式约束关系："

#: src/plonk-intro-cn/plonk-polycom.md:189
msgid "这个优化过后的方案，Prover 只需要 Open 两次。第一个 Opening 为 "
msgstr "这个优化过后的方案，Prover 只需要 Open 两次。第一个 Opening 为 "

#: src/plonk-intro-cn/plonk-polycom.md:189
msgid "，第二个 Opening 为 "
msgstr "，第二个 Opening 为 "

#: src/plonk-intro-cn/plonk-polycom.md:189
msgid ""
"。而后者是个常数，不需要发送给 Verifier。Prover 只需要发送两个求值证明，不过"
"我们仍然可以用上一节提供的聚合证明的方法，通过一个挑战数 "
msgstr ""
"。而后者是个常数，不需要发送给 Verifier。Prover 只需要发送两个求值证明，不过"
"我们仍然可以用上一节提供的聚合证明的方法，通过一个挑战数 "

#: src/plonk-intro-cn/plonk-polycom.md:189
msgid "，Prover 可以聚合两个多项式承诺，然后仅需要发送一个求值证明。"
msgstr "，Prover 可以聚合两个多项式承诺，然后仅需要发送一个求值证明。"

#: src/plonk-intro-cn/plonk-polycom.md:193
msgid "我们下面尝试优化下 "
msgstr "我们下面尝试优化下 "

#: src/plonk-intro-cn/plonk-polycom.md:193
msgid " 个多项式的约束关系的协议： "
msgstr " 个多项式的约束关系的协议： "

#: src/plonk-intro-cn/plonk-polycom.md:197
#: src/plonk-intro-cn/plonk-polycom.md:205
#: src/plonk-intro-cn/plonk-lookup.md:79 src/plonk-intro-cn/plonk-lookup.md:83
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:207
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:289
#: src/zk-snarks/3-General-Purpose-Computation.md:92
#: src/zk-snarks/3-General-Purpose-Computation.md:143
#: src/zk-snarks/4-Construction-Properties.md:51
#: src/zk-snarks/4-Construction-Properties.md:385
#: src/zk-snarks/5-Pinocchio-Protocol.md:89
#: src/zk-everything/zk-learning-miles/KZG.md:164
#: src/zk-everything/zk-learning-miles/KZG.md:209
#: src/zk-everything/zk-learning-miles/KZG.md:211
#: src/zk-everything/zk-learning-miles/KZG.md:246
#: src/zk-everything/zk-learning-miles/KZG.md:248
#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:316 src/zk-everything/zk-everything-joe/Hyrax.md:207 src/public
#: goods/第二章.md:41 goods/第二章.md:65 goods/第二章.md:86
#: goods/第二章.md:97 goods/第二章.md:146 goods/4-Proving-System.md:169
msgid "，"
msgstr "，"

#: src/plonk-intro-cn/plonk-polycom.md:203
msgid "第一轮：Verifier 发送 "
msgstr "第一轮：Verifier 发送 "

#: src/plonk-intro-cn/plonk-polycom.md:205
msgid "第二轮：Prover 计算并发送三个Opening， "
msgstr "第二轮：Prover 计算并发送三个Opening， "

#: src/plonk-intro-cn/plonk-polycom.md:207
msgid "第三轮：Verifier 发送 "
msgstr "第三轮：Verifier 发送 "

#: src/plonk-intro-cn/plonk-polycom.md:207
msgid " 随机数"
msgstr " 随机数"

#: src/plonk-intro-cn/plonk-polycom.md:209
msgid "第四轮：Prover 计算 "
msgstr "第四轮：Prover 计算 "

#: src/plonk-intro-cn/plonk-polycom.md:209
msgid " ，利用 "
msgstr " ，利用 "

#: src/plonk-intro-cn/plonk-polycom.md:209
msgid " 折叠 "
msgstr " 折叠 "

#: src/plonk-intro-cn/plonk-polycom.md:209
msgid " 这四个承诺，并计算商多项式 "
msgstr " 这四个承诺，并计算商多项式 "

#: src/plonk-intro-cn/plonk-polycom.md:209
msgid "，发送其承诺 "
msgstr "，发送其承诺 "

#: src/plonk-intro-cn/plonk-polycom.md:209
msgid " 作为折叠后的多项式在 "
msgstr " 作为折叠后的多项式在 "

#: src/plonk-intro-cn/plonk-polycom.md:209
msgid " 处的求值证明"
msgstr " 处的求值证明"

#: src/plonk-intro-cn/plonk-polycom.md:215
msgid "第五轮：Verifier 计算辅助多项式 "
msgstr "第五轮：Verifier 计算辅助多项式 "

#: src/plonk-intro-cn/plonk-polycom.md:215
msgid " 的承诺 "
msgstr " 的承诺 "

#: src/plonk-intro-cn/plonk-polycom.md:219
msgid "计算折叠后的多项式的承诺： "
msgstr "计算折叠后的多项式的承诺： "

#: src/plonk-intro-cn/plonk-polycom.md:223
msgid "计算折叠后的多项式在 "
msgstr "计算折叠后的多项式在 "

#: src/plonk-intro-cn/plonk-polycom.md:223
msgid "  处的求值： "
msgstr "  处的求值： "

#: src/plonk-intro-cn/plonk-polycom.md:227
msgid "检查下面的验证等式："
msgstr "检查下面的验证等式："

#: src/plonk-intro-cn/plonk-polycom.md:231
msgid ""
"这个优化后的协议，Prover 仅需要发送三个 Opening，一个求值证明；相比原始方案"
"的 6 个 Opening和 6 个求值证明，大大减小了通信量（即证明大小）。"
msgstr ""
"这个优化后的协议，Prover 仅需要发送三个 Opening，一个求值证明；相比原始方案"
"的 6 个 Opening和 6 个求值证明，大大减小了通信量（即证明大小）。"

#: src/plonk-intro-cn/plonk-polycom.md:233
#: src/plonk-intro-cn/plonk-lookup.md:310 src/zk-everything/BabySNARK
#: tutorial.md:189 src/zk-everything/zk-learning-miles/Lecture16:Hardware
#: acceleration.md:227
msgid "Reference"
msgstr "Reference"

#: src/plonk-intro-cn/plonk-randomizing.md:3
msgid "理解 Plonk（六）：实现  Zero Knowledge"
msgstr "理解 Plonk（六）：实现  Zero Knowledge"

#: src/plonk-intro-cn/plonk-randomizing.md:5
msgid ""
"在前文的 Plonk 协议中，所有的多项式承诺都没有混入额外的随机数进行保护，因此当"
"一个未被随机化的多 项式承诺 "
msgstr ""
"在前文的 Plonk 协议中，所有的多项式承诺都没有混入额外的随机数进行保护，因此当"
"一个未被随机化的多 项式承诺 "

#: src/plonk-intro-cn/plonk-randomizing.md:6
msgid " 经过一次或者多次 Open，会泄露 "
msgstr " 经过一次或者多次 Open，会泄露 "

#: src/plonk-intro-cn/plonk-randomizing.md:6
msgid " 自身的信息，这会限制协议在需要隐私保护的 场景中应用。"
msgstr " 自身的信息，这会限制协议在需要隐私保护的 场景中应用。"

#: src/plonk-intro-cn/plonk-randomizing.md:9
msgid "考虑一个 "
msgstr "考虑一个 "

#: src/plonk-intro-cn/plonk-randomizing.md:9
msgid " 次多项式 "
msgstr " 次多项式 "

#: src/plonk-intro-cn/plonk-randomizing.md:9
msgid ""
"，只要它在四个不同的点上 Open ，多项式就可以通过 Lagrange 插值来复原。 然而即"
"使一个次数超过一百万的多项式，哪怕被打开一次也会泄漏关于原多项式的部分信息。"
msgstr ""
"，只要它在四个不同的点上 Open ，多项式就可以通过 Lagrange 插值来复原。 然而即"
"使一个次数超过一百万的多项式，哪怕被打开一次也会泄漏关于原多项式的部分信息。"

#: src/plonk-intro-cn/plonk-randomizing.md:12
msgid ""
"为了实现 Zero Knowledge 性质的 Plonk，我们需要在多项式中加入足够多的随机因"
"子，确保在多项式 打开 "
msgstr ""
"为了实现 Zero Knowledge 性质的 Plonk，我们需要在多项式中加入足够多的随机因"
"子，确保在多项式 打开 "

#: src/plonk-intro-cn/plonk-randomizing.md:13
msgid " 次之后，仍然不会泄漏原多项式的信息，保证没有知识泄漏。"
msgstr " 次之后，仍然不会泄漏原多项式的信息，保证没有知识泄漏。"

#: src/plonk-intro-cn/plonk-randomizing.md:15
msgid ""
"Plonk 协议的大致流程为：Prover 构造多项式，然后发送多项式的承诺给 Verifier。"
"然后 Verfier 挑战两个随机挑战点 "
msgstr ""
"Plonk 协议的大致流程为：Prover 构造多项式，然后发送多项式的承诺给 Verifier。"
"然后 Verfier 挑战两个随机挑战点 "

#: src/plonk-intro-cn/plonk-randomizing.md:15
msgid " 为 子群 "
msgstr " 为 子群 "

#: src/plonk-intro-cn/plonk-randomizing.md:15
msgid " 的生成元。下面是 Prover 需要构造的多项式列表："
msgstr " 的生成元。下面是 Prover 需要构造的多项式列表："

#: src/plonk-intro-cn/plonk-randomizing.md:17
#: src/plonk-intro-cn/plonk-randomizing.md:85
msgid "Witness 多项式： "
msgstr "Witness 多项式： "

#: src/plonk-intro-cn/plonk-randomizing.md:18
#: src/plonk-intro-cn/plonk-randomizing.md:86
msgid "置换累乘多项式： "
msgstr "置换累乘多项式： "

#: src/plonk-intro-cn/plonk-randomizing.md:19
msgid "商多项式： "
msgstr "商多项式： "

#: src/plonk-intro-cn/plonk-randomizing.md:19
#: src/plonk-intro-cn/plonk-randomizing.md:59
#: src/plonk-intro-cn/plonk-randomizing.md:61
#: src/plonk-intro-cn/plonk-randomizing.md:65
#: src/plonk-intro-cn/plonk-randomizing.md:69
#: src/halo2/tmp/3-Fibonacci-example-2.md:190
#: src/halo2/tmp/3-Fibonacci-example-2.md:394
msgid "mi"
msgstr "mi"

#: src/plonk-intro-cn/plonk-randomizing.md:19
#: src/plonk-intro-cn/plonk-randomizing.md:59
#: src/plonk-intro-cn/plonk-randomizing.md:61
#: src/plonk-intro-cn/plonk-randomizing.md:65
#: src/plonk-intro-cn/plonk-randomizing.md:69
#: src/plonk-intro-cn/plonk-lookup.md:161
#: src/plonk-intro-cn/plonk-lookup.md:163
#: src/plonk-intro-cn/plonk-lookup.md:165
#: src/plonk-intro-cn/plonk-lookup.md:169
#: src/plonk-intro-cn/plonk-lookup.md:173
#: src/plonk-intro-cn/plonk-lookup.md:175
#: src/plonk-intro-cn/plonk-lookup.md:188
#: src/plonk-intro-cn/plonk-lookup.md:196
#: src/plonk-intro-cn/plonk-lookup.md:200
#: src/plonk-intro-cn/plonk-lookup.md:206
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:194
#: src/zk-snarks/3-General-Purpose-Computation.md:366
#: src/zk-snarks/4-Construction-Properties.md:271
#: src/halo2/tmp/9-decomposed.md:130
msgid "hi"
msgstr "hi"

#: src/plonk-intro-cn/plonk-randomizing.md:21
msgid "其中三个 Witness 多项式要在 "
msgstr "其中三个 Witness 多项式要在 "

#: src/plonk-intro-cn/plonk-randomizing.md:21
msgid " 这一个点处打开，置换累乘多项式 "
msgstr " 这一个点处打开，置换累乘多项式 "

#: src/plonk-intro-cn/plonk-randomizing.md:21
msgid " 要在 "
msgstr " 要在 "

#: src/plonk-intro-cn/plonk-randomizing.md:21
msgid " 两个点处打开，而三个商多项式则不需要被打开。"
msgstr " 两个点处打开，而三个商多项式则不需要被打开。"

#: src/plonk-intro-cn/plonk-randomizing.md:23
msgid ""
"Prover 要混入两类随机因子，第一类是保护承诺本身，满足信息隐藏 Hiding，一个承"
"诺一般只需要混入一个随机数即可； 第二类是保护多项式承诺在打开之后仍然保证原多"
"项式信息不会泄漏。如果多项式打开的次数越多（假设每次打开的位置都不同）， "
"Prover 就要混入越多的随机因子。"
msgstr ""
"Prover 要混入两类随机因子，第一类是保护承诺本身，满足信息隐藏 Hiding，一个承"
"诺一般只需要混入一个随机数即可； 第二类是保护多项式承诺在打开之后仍然保证原多"
"项式信息不会泄漏。如果多项式打开的次数越多（假设每次打开的位置都不同）， "
"Prover 就要混入越多的随机因子。"

#: src/plonk-intro-cn/plonk-randomizing.md:25
msgid ""
"第一类的随机因子，也可以用多项式承诺方案来实现，比如 Bulletproof-IPA，或者 "
"KZG10-with-Hiding，这些多项式承诺方案本身已经支持 Hiding 。如果 Plonk 后端采"
"用的是朴素的 KZG10，那么就需要在 Plonk 协议层面增加足够的随机因子，不仅保证承"
"诺自身的 Hiding 性质，还要保护承诺的打开。"
msgstr ""
"第一类的随机因子，也可以用多项式承诺方案来实现，比如 Bulletproof-IPA，或者 "
"KZG10-with-Hiding，这些多项式承诺方案本身已经支持 Hiding 。如果 Plonk 后端采"
"用的是朴素的 KZG10，那么就需要在 Plonk 协议层面增加足够的随机因子，不仅保证承"
"诺自身的 Hiding 性质，还要保护承诺的打开。"

#: src/plonk-intro-cn/plonk-randomizing.md:27
msgid ""
"下面我们介绍两个不同的混入随机因子方案实现 Zero Knowledge 的方法。第一个方法"
"比较经典，是为多项式加上一个盲化（Blinding）用途的多项式，GWC19 论文\\[3\\]"
"（或其它学术论文）中正是采用的这种方法。而第二个方法是在向量的对齐填充空间里"
"面填入随机数，再插值产生多项式的，这是工程实现中的常见方法。"
msgstr ""
"下面我们介绍两个不同的混入随机因子方案实现 Zero Knowledge 的方法。第一个方法"
"比较经典，是为多项式加上一个盲化（Blinding）用途的多项式，GWC19 论文\\[3\\]"
"（或其它学术论文）中正是采用的这种方法。而第二个方法是在向量的对齐填充空间里"
"面填入随机数，再插值产生多项式的，这是工程实现中的常见方法。"

#: src/plonk-intro-cn/plonk-randomizing.md:29
msgid "方法一：Blinding 多项式"
msgstr "方法一：Blinding 多项式"

#: src/plonk-intro-cn/plonk-randomizing.md:31
msgid "我们先看 Witness 多项式 "
msgstr "我们先看 Witness 多项式 "

#: src/plonk-intro-cn/plonk-randomizing.md:31
msgid "，它是由下面的等式计算："
msgstr "，它是由下面的等式计算："

#: src/plonk-intro-cn/plonk-randomizing.md:35
msgid "我们假设 "
msgstr "我们假设 "

#: src/plonk-intro-cn/plonk-randomizing.md:37
msgid "在 Plonk 协议中，Prover 需要计算 "
msgstr "在 Plonk 协议中，Prover 需要计算 "

#: src/plonk-intro-cn/plonk-randomizing.md:37
msgid " 的取值，其中 "
msgstr " 的取值，其中 "

#: src/plonk-intro-cn/plonk-randomizing.md:37
msgid " 为 Verifier 给出的随机挑战点。"
msgstr " 为 Verifier 给出的随机挑战点。"

#: src/plonk-intro-cn/plonk-randomizing.md:39
msgid "如果我们直接鲁莽地在 "
msgstr "如果我们直接鲁莽地在 "

#: src/plonk-intro-cn/plonk-randomizing.md:39
msgid " 中混入随机数 "
msgstr " 中混入随机数 "

#: src/plonk-intro-cn/plonk-randomizing.md:39
msgid "，比如 "
msgstr "，比如 "

#: src/plonk-intro-cn/plonk-randomizing.md:39
msgid " 可能就不再满足算术约束："
msgstr " 可能就不再满足算术约束："

#: src/plonk-intro-cn/plonk-randomizing.md:43
msgid "而且也无法满足置换约束。"
msgstr "而且也无法满足置换约束。"

#: src/plonk-intro-cn/plonk-randomizing.md:45
msgid "如果要让随机化后的多项式 "
msgstr "如果要让随机化后的多项式 "

#: src/plonk-intro-cn/plonk-randomizing.md:45
msgid "  满足「算术约束」和「置换约束」，那么我们可以考虑在乘法子群 "
msgstr "  满足「算术约束」和「置换约束」，那么我们可以考虑在乘法子群 "

#: src/plonk-intro-cn/plonk-randomizing.md:45
msgid " 之外增加一些随机的点，这样可以让随机化后的多项式 "
msgstr " 之外增加一些随机的点，这样可以让随机化后的多项式 "

#: src/plonk-intro-cn/plonk-randomizing.md:45
msgid " 整个乘法子群上的取值仍然与 "
msgstr " 整个乘法子群上的取值仍然与 "

#: src/plonk-intro-cn/plonk-randomizing.md:45
msgid " 完全相等，但是整个多项式却已经被随机化了。所谓的在 "
msgstr " 完全相等，但是整个多项式却已经被随机化了。所谓的在 "

#: src/plonk-intro-cn/plonk-randomizing.md:45
msgid " 上的取值相等，就是保证随机化后的多项式仍然可以被 "
msgstr " 上的取值相等，就是保证随机化后的多项式仍然可以被 "

#: src/plonk-intro-cn/plonk-randomizing.md:45
msgid " 整除。下面是随机化多项式的构造："
msgstr " 整除。下面是随机化多项式的构造："

#: src/plonk-intro-cn/plonk-randomizing.md:49
#: src/plonk-intro-cn/plonk-randomizing.md:53
msgid "这里 "
msgstr "这里 "

#: src/plonk-intro-cn/plonk-randomizing.md:49
msgid " 为 Blinding 多项式，包含两个随机因子 "
msgstr " 为 Blinding 多项式，包含两个随机因子 "

#: src/plonk-intro-cn/plonk-randomizing.md:49
msgid ""
"，它们恰好是自变量的不同次数的系数，这样可以保证线性不相关。换个方式理解，只"
"有对这个 Blinding 多项式打开两次以上，才可以计算出所有的随机因子。如果只打开"
"一次，Blinding 多项式会被消耗掉一个随机因子，还剩下一个起作用的随机因子。"
msgstr ""
"，它们恰好是自变量的不同次数的系数，这样可以保证线性不相关。换个方式理解，只"
"有对这个 Blinding 多项式打开两次以上，才可以计算出所有的随机因子。如果只打开"
"一次，Blinding 多项式会被消耗掉一个随机因子，还剩下一个起作用的随机因子。"

#: src/plonk-intro-cn/plonk-randomizing.md:51
msgid "简单检查下，我们可以发现新定义的 "
msgstr "简单检查下，我们可以发现新定义的 "

#: src/plonk-intro-cn/plonk-randomizing.md:51
msgid " 符合要求，能满足算术约束。同时因为 "
msgstr " 符合要求，能满足算术约束。同时因为 "

#: src/plonk-intro-cn/plonk-randomizing.md:51
#: src/plonk-intro-cn/plonk-randomizing.md:73
msgid "，因此 "
msgstr "，因此 "

#: src/plonk-intro-cn/plonk-randomizing.md:51
msgid " 也一定满足置换关系。"
msgstr " 也一定满足置换关系。"

#: src/plonk-intro-cn/plonk-randomizing.md:53
msgid " 被混入了两个随机因子，其中一个随机因子可以保护 "
msgstr " 被混入了两个随机因子，其中一个随机因子可以保护 "

#: src/plonk-intro-cn/plonk-randomizing.md:53
msgid " 被打开一次，另一个随机因子用来实现承诺 "
msgstr " 被打开一次，另一个随机因子用来实现承诺 "

#: src/plonk-intro-cn/plonk-randomizing.md:53
msgid " 本身的信息隐藏。"
msgstr " 本身的信息隐藏。"

#: src/plonk-intro-cn/plonk-randomizing.md:55
msgid "考虑下置换累乘多项式 "
msgstr "考虑下置换累乘多项式 "

#: src/plonk-intro-cn/plonk-randomizing.md:55
msgid "，假如多项式承诺 "
msgstr "，假如多项式承诺 "

#: src/plonk-intro-cn/plonk-randomizing.md:55
msgid " 被打开两次的话，那么就需要混入三个随机因子，构造一个次数为 "
msgstr " 被打开两次的话，那么就需要混入三个随机因子，构造一个次数为 "

#: src/plonk-intro-cn/plonk-randomizing.md:55
msgid " 的 Blinder 多项式， "
msgstr " 的 Blinder 多项式， "

#: src/plonk-intro-cn/plonk-randomizing.md:55
msgid "，然后混入到 "
msgstr "，然后混入到 "

#: src/plonk-intro-cn/plonk-randomizing.md:55
msgid " 中："
msgstr " 中："

#: src/plonk-intro-cn/plonk-randomizing.md:59
msgid "最后考虑商多项式 "
msgstr "最后考虑商多项式 "

#: src/plonk-intro-cn/plonk-randomizing.md:59
msgid ""
"，由于他们不需要在任何点打开，因此只要加上随机因子即可，不过这几个商多项式有"
"额外的要求，即他们三个需要一起能拼出真正的商多项式 "
msgstr ""
"，由于他们不需要在任何点打开，因此只要加上随机因子即可，不过这几个商多项式有"
"额外的要求，即他们三个需要一起能拼出真正的商多项式 "

#: src/plonk-intro-cn/plonk-randomizing.md:63
msgid ""
"我们可以采用下面的方式，为每一个多项式分片混入一个随机因子，并且保证他们拼起"
"来之后仍然等于 "
msgstr ""
"我们可以采用下面的方式，为每一个多项式分片混入一个随机因子，并且保证他们拼起"
"来之后仍然等于 "

#: src/plonk-intro-cn/plonk-randomizing.md:67
msgid "容易检验："
msgstr "容易检验："

#: src/plonk-intro-cn/plonk-randomizing.md:71
msgid "同理，如果 "
msgstr "同理，如果 "

#: src/plonk-intro-cn/plonk-randomizing.md:71
msgid " 的次数达到了 "
msgstr " 的次数达到了 "

#: src/plonk-intro-cn/plonk-randomizing.md:71
msgid "，那么就需要三个随机数给四个 "
msgstr "，那么就需要三个随机数给四个 "

#: src/plonk-intro-cn/plonk-randomizing.md:71
msgid " 分段加上随机数，实现 Hiding。"
msgstr " 分段加上随机数，实现 Hiding。"

#: src/plonk-intro-cn/plonk-randomizing.md:73
msgid "这个方法存在一个问题，就是 Blinding 多项式的次数会超过 "
msgstr "这个方法存在一个问题，就是 Blinding 多项式的次数会超过 "

#: src/plonk-intro-cn/plonk-randomizing.md:73
msgid " ，这里 "
msgstr " ，这里 "

#: src/plonk-intro-cn/plonk-randomizing.md:73
#: src/plonk-intro-cn/plonk-lookup.md:137
msgid "。因为 "
msgstr "。因为 "

#: src/plonk-intro-cn/plonk-randomizing.md:73
msgid " 的次数为 "
msgstr " 的次数为 "

#: src/plonk-intro-cn/plonk-randomizing.md:73
msgid " 次数为 "
msgstr " 次数为 "

#: src/plonk-intro-cn/plonk-randomizing.md:73
msgid ""
"。如果 Plonk 后端采用的是 Bulletproof-IPA 这类的多项式承诺，承诺会要求多项式"
"的次数按 "
msgstr ""
"。如果 Plonk 后端采用的是 Bulletproof-IPA 这类的多项式承诺，承诺会要求多项式"
"的次数按 "

#: src/plonk-intro-cn/plonk-randomizing.md:73
msgid " 对齐，这样盲化之后的多项式的次数刚刚超出 "
msgstr " 对齐，这样盲化之后的多项式的次数刚刚超出 "

#: src/plonk-intro-cn/plonk-randomizing.md:73
msgid "，只能对齐到 "
msgstr "，只能对齐到 "

#: src/plonk-intro-cn/plonk-randomizing.md:73
msgid ""
"。一些 Plonk 变种协议可能会把 Witness table 的列数增加，稍稍超出的多项式次数"
"会使 "
msgstr ""
"。一些 Plonk 变种协议可能会把 Witness table 的列数增加，稍稍超出的多项式次数"
"会使 "

#: src/plonk-intro-cn/plonk-randomizing.md:73
msgid " 的计算在一个更大的子群上完成。 "
msgstr " 的计算在一个更大的子群上完成。 "

#: src/plonk-intro-cn/plonk-randomizing.md:75
msgid "方法二：随机因子对齐"
msgstr "方法二：随机因子对齐"

#: src/plonk-intro-cn/plonk-randomizing.md:77
msgid "下面介绍的第二种方法不会推高多项式的次数。考虑到 "
msgstr "下面介绍的第二种方法不会推高多项式的次数。考虑到 "

#: src/plonk-intro-cn/plonk-randomizing.md:77
msgid " 子群的大小 "
msgstr " 子群的大小 "

#: src/plonk-intro-cn/plonk-randomizing.md:77
msgid " 是按 "
msgstr " 是按 "

#: src/plonk-intro-cn/plonk-randomizing.md:77
msgid " 对齐，在实际电路中，一般情况下需要把 Witness Table 的长度对齐到 "
msgstr " 对齐，在实际电路中，一般情况下需要把 Witness Table 的长度对齐到 "

#: src/plonk-intro-cn/plonk-randomizing.md:77
msgid "，为了对齐，需要把空余的空间用零填满。"
msgstr "，为了对齐，需要把空余的空间用零填满。"

#: src/plonk-intro-cn/plonk-randomizing.md:79
msgid ""
"那么这里可以用随机数来代替零填充对齐空间，好处是这些随机数可以保护表中的其它"
"正常数据。"
msgstr ""
"那么这里可以用随机数来代替零填充对齐空间，好处是这些随机数可以保护表中的其它"
"正常数据。"

#: src/plonk-intro-cn/plonk-randomizing.md:81
msgid ""
"Daniel Lubarov 按照这个思路给出了第二种随机数填充实现 Zero-Knowledge 性质的办"
"法\\[1\\]。"
msgstr ""
"Daniel Lubarov 按照这个思路给出了第二种随机数填充实现 Zero-Knowledge 性质的办"
"法\\[1\\]。"

#: src/plonk-intro-cn/plonk-randomizing.md:83
msgid ""
"对于商多项式，因为方法一不会推高他们的次数，因此我们下面只考虑剩下的两类多项"
"式："
msgstr ""
"对于商多项式，因为方法一不会推高他们的次数，因此我们下面只考虑剩下的两类多项"
"式："

#: src/plonk-intro-cn/plonk-randomizing.md:88
msgid "先看第一类多项式，以 "
msgstr "先看第一类多项式，以 "

#: src/plonk-intro-cn/plonk-randomizing.md:88
msgid " 为例，它编码了 "
msgstr " 为例，它编码了 "

#: src/plonk-intro-cn/plonk-randomizing.md:88
msgid "  向量。如果本身向量长度不足 "
msgstr "  向量。如果本身向量长度不足 "

#: src/plonk-intro-cn/plonk-randomizing.md:88
msgid ""
"，一般情况下是用零补齐，我们现在可以考虑让 Prover 额外用两个随机数补齐，这样"
"做的效果和方法一的 Blinding 多项式完全一样。 如下所示："
msgstr ""
"，一般情况下是用零补齐，我们现在可以考虑让 Prover 额外用两个随机数补齐，这样"
"做的效果和方法一的 Blinding 多项式完全一样。 如下所示："

#: src/plonk-intro-cn/plonk-randomizing.md:92
msgid " 也可以看成是利用 Lagrange Basis 产生的 Blinding 多项式。这里假设 "
msgstr " 也可以看成是利用 Lagrange Basis 产生的 Blinding 多项式。这里假设 "

#: src/plonk-intro-cn/plonk-randomizing.md:92
#: src/plonk-intro-cn/plonk-lookup.md:127
#: src/plonk-intro-cn/plonk-lookup.md:212
msgid " 的长度为 "
msgstr " 的长度为 "

#: src/plonk-intro-cn/plonk-randomizing.md:92
msgid " 为两个随机数。假设 "
msgstr " 为两个随机数。假设 "

#: src/plonk-intro-cn/plonk-randomizing.md:92
msgid " 的系数为固定值，那么当 "
msgstr " 的系数为固定值，那么当 "

#: src/plonk-intro-cn/plonk-randomizing.md:92
msgid " 被打开两次之后，  "
msgstr " 被打开两次之后，  "

#: src/plonk-intro-cn/plonk-randomizing.md:93
msgid " 的系数即可被求解，从而失去随机化的能力。因此， "
msgstr " 的系数即可被求解，从而失去随机化的能力。因此， "

#: src/plonk-intro-cn/plonk-randomizing.md:93
msgid " 只能承受一次安全的打开操作（假设协议基于 Non-hiding 的多项式承诺）。"
msgstr " 只能承受一次安全的打开操作（假设协议基于 Non-hiding 的多项式承诺）。"

#: src/plonk-intro-cn/plonk-randomizing.md:95
msgid "对于置换累乘多项式 "
msgstr "对于置换累乘多项式 "

#: src/plonk-intro-cn/plonk-randomizing.md:95
msgid "，则需要在累乘向量 "
msgstr "，则需要在累乘向量 "

#: src/plonk-intro-cn/plonk-randomizing.md:95
msgid " 的尾部引入随机值。考虑下 "
msgstr " 的尾部引入随机值。考虑下 "

#: src/plonk-intro-cn/plonk-randomizing.md:95
msgid " 的计算方式："
msgstr " 的计算方式："

#: src/plonk-intro-cn/plonk-randomizing.md:99
msgid "列出所有的 "
msgstr "列出所有的 "

#: src/plonk-intro-cn/plonk-randomizing.md:99
msgid " 的计算如下："
msgstr " 的计算如下："

#: src/plonk-intro-cn/plonk-randomizing.md:103
msgid "假如我们想设置 "
msgstr "假如我们想设置 "

#: src/plonk-intro-cn/plonk-randomizing.md:103
msgid " 为随机值，我们需要让 "
msgstr " 为随机值，我们需要让 "

#: src/plonk-intro-cn/plonk-randomizing.md:103
msgid " 这两个元素设置一个 Copy Constraint，并填上同一个随机数 "
msgstr " 这两个元素设置一个 Copy Constraint，并填上同一个随机数 "

#: src/plonk-intro-cn/plonk-randomizing.md:104
#: src/plonk-intro-cn/plonk-randomizing.md:106
#: src/plonk-intro-cn/plonk-randomizing.md:112
#: src/plonk-intro-cn/plonk-randomizing.md:113
#: src/plonk-intro-cn/plonk-randomizing.md:115
#: src/plonk-intro-cn/plonk-randomizing.md:121
#: src/plonk-intro-cn/plonk-randomizing.md:123
#: src/plonk-intro-cn/plonk-randomizing.md:125
#: src/plonk-intro-cn/plonk-randomizing.md:141
#: src/plonk-intro-cn/plonk-randomizing.md:149
#: src/plonk-intro-cn/plonk-randomizing.md:153
#: src/plonk-intro-cn/plonk-randomizing.md:159
#: src/zk-snarks/4-Construction-Properties.md:419
#: src/zk-snarks/4-Construction-Properties.md:420
#: src/zk-snarks/4-Construction-Properties.md:436
#: src/zk-snarks/4-Construction-Properties.md:438
#: src/zk-snarks/5-Pinocchio-Protocol.md:106
#: src/zk-snarks/5-Pinocchio-Protocol.md:139
#: src/zk-snarks/5-Pinocchio-Protocol.md:189
#: src/zk-snarks/5-Pinocchio-Protocol.md:190
#: src/zk-everything/zk-everything-joe/Hyrax.md:191
#: src/zk-everything/zk-everything-joe/Hyrax.md:201
#: src/zk-everything/zk-everything-joe/Hyrax.md:208
#: src/zk-everything/zk-everything-joe/Hyrax.md:223
#: src/zk-everything/zk-everything-joe/Hyrax.md:228
msgid "ρ"
msgstr "ρ"

#: src/plonk-intro-cn/plonk-randomizing.md:104
msgid " 设置为零，那么"
msgstr " 设置为零，那么"

#: src/plonk-intro-cn/plonk-randomizing.md:108
msgid "又因为 "
msgstr "又因为 "

#: src/plonk-intro-cn/plonk-randomizing.md:112
msgid " 的概率分布与 "
msgstr " 的概率分布与 "

#: src/plonk-intro-cn/plonk-randomizing.md:112
msgid " 相同。这样我们通过把 Witness Table 的最后两行用来填入随机数 "
msgstr " 相同。这样我们通过把 Witness Table 的最后两行用来填入随机数 "

#: src/plonk-intro-cn/plonk-randomizing.md:112
msgid "，并且设置一个 Copy Constraint 来随机化 "
msgstr "，并且设置一个 Copy Constraint 来随机化 "

#: src/plonk-intro-cn/plonk-randomizing.md:112
msgid "。如果要再引入一个随机数 "
msgstr "。如果要再引入一个随机数 "

#: src/plonk-intro-cn/plonk-randomizing.md:112
msgid "，一种方法是我们再征用 Witness table 的两行， "
msgstr "，一种方法是我们再征用 Witness table 的两行， "

#: src/plonk-intro-cn/plonk-randomizing.md:112
msgid "，可以让 "
msgstr "，可以让 "

#: src/plonk-intro-cn/plonk-randomizing.md:112
msgid " 随机化。或者我们节省下空间，利用 "
msgstr " 随机化。或者我们节省下空间，利用 "

#: src/plonk-intro-cn/plonk-randomizing.md:112
msgid " 来构造一个随机数 "
msgstr " 来构造一个随机数 "

#: src/plonk-intro-cn/plonk-randomizing.md:112
msgid " 的 Copy Constraint。同理，我们可以再用两行 "
msgstr " 的 Copy Constraint。同理，我们可以再用两行 "

#: src/plonk-intro-cn/plonk-randomizing.md:112
msgid " 来引入 "
msgstr " 来引入 "

#: src/plonk-intro-cn/plonk-randomizing.md:112
msgid "。 这样，我们总共征用了四行，引入了三个随机数 "
msgstr "。 这样，我们总共征用了四行，引入了三个随机数 "

#: src/plonk-intro-cn/plonk-randomizing.md:119
msgid "最后我们推导一下 "
msgstr "最后我们推导一下 "

#: src/plonk-intro-cn/plonk-randomizing.md:119
#: src/plonk-intro-cn/plonk-lookup.md:41
msgid "，请注意 "
msgstr "，请注意 "

#: src/plonk-intro-cn/plonk-randomizing.md:119
msgid "，因为前面的 Permutation 项都已经消完。"
msgstr "，因为前面的 Permutation 项都已经消完。"

#: src/plonk-intro-cn/plonk-randomizing.md:127
#: src/plonk-intro-cn/plonk-lookup.md:169
msgid "于是 "
msgstr "于是 "

#: src/plonk-intro-cn/plonk-randomizing.md:127
msgid ""
" 中各自包含了一个随机数。请注意这个方法需要在 Witness table 中留有足够的 "
"padding 空间，并且 "
msgstr ""
" 中各自包含了一个随机数。请注意这个方法需要在 Witness table 中留有足够的 "
"padding 空间，并且 "

#: src/plonk-intro-cn/plonk-randomizing.md:127
msgid " 的盲化因子不能与 "
msgstr " 的盲化因子不能与 "

#: src/plonk-intro-cn/plonk-randomizing.md:127
msgid " 的重复，那么总共需要留出 6 排空间，并且把 "
msgstr " 的重复，那么总共需要留出 6 排空间，并且把 "

#: src/plonk-intro-cn/plonk-randomizing.md:127
msgid " 盲化因子提前到第 "
msgstr " 盲化因子提前到第 "

#: src/plonk-intro-cn/plonk-randomizing.md:127
msgid " 排："
msgstr " 排："

#: src/plonk-intro-cn/plonk-randomizing.md:131
msgid "满足 Hiding 性质的 KZG10"
msgstr "满足 Hiding 性质的 KZG10"

#: src/plonk-intro-cn/plonk-randomizing.md:133
msgid ""
"在 Daniel Lubarov 的 Blog 中讲述的方案是基于带有 Hiding 性质的多项式承诺 IPA"
"（Inner product argument）。因此在 "
msgstr ""
"在 Daniel Lubarov 的 Blog 中讲述的方案是基于带有 Hiding 性质的多项式承诺 IPA"
"（Inner product argument）。因此在 "

#: src/plonk-intro-cn/plonk-randomizing.md:133
msgid " 中只需要混入一个随机因子， "
msgstr " 中只需要混入一个随机因子， "

#: src/plonk-intro-cn/plonk-randomizing.md:133
msgid " 中只混入两个随机因子。"
msgstr " 中只混入两个随机因子。"

#: src/plonk-intro-cn/plonk-randomizing.md:135
msgid ""
"但是我们也可以选择一个带有 Hiding 性质的 KZG10 承诺方案，这样也可以按照 "
"Halo2 方式混入较少的随机数实现 Zero-knowledge。"
msgstr ""
"但是我们也可以选择一个带有 Hiding 性质的 KZG10 承诺方案，这样也可以按照 "
"Halo2 方式混入较少的随机数实现 Zero-knowledge。"

#: src/plonk-intro-cn/plonk-randomizing.md:137
msgid ""
"这个方案参考了 Marlin 论文\\[2\\]的 Appendix B.3，基于 AGM 模型的 KZG10-with-"
"hiding。"
msgstr ""
"这个方案参考了 Marlin 论文\\[2\\]的 Appendix B.3，基于 AGM 模型的 KZG10-with-"
"hiding。"

#: src/plonk-intro-cn/plonk-randomizing.md:139
msgid "在 Setup 阶段，我们需要产生两倍长的 srs："
msgstr "在 Setup 阶段，我们需要产生两倍长的 srs："

#: src/plonk-intro-cn/plonk-randomizing.md:141
#: src/zk-everything/zk-learning-miles/KZG.md:83
msgid "D"
msgstr "D"

#: src/plonk-intro-cn/plonk-randomizing.md:143
msgid "如果我们要承诺一个多项式 "
msgstr "如果我们要承诺一个多项式 "

#: src/plonk-intro-cn/plonk-randomizing.md:143
msgid "，那么需要额外产生一个次数相同的 Blinder 多项式："
msgstr "，那么需要额外产生一个次数相同的 Blinder 多项式："

#: src/plonk-intro-cn/plonk-randomizing.md:147
msgid "然后计算承诺："
msgstr "然后计算承诺："

#: src/plonk-intro-cn/plonk-randomizing.md:151
msgid "如果我们要在 "
msgstr "如果我们要在 "

#: src/plonk-intro-cn/plonk-randomizing.md:151
msgid " 处打开一个多项式承诺，先计算 "
msgstr " 处打开一个多项式承诺，先计算 "

#: src/plonk-intro-cn/plonk-randomizing.md:151
msgid "，还要计算盲化多项式 "
msgstr "，还要计算盲化多项式 "

#: src/plonk-intro-cn/plonk-randomizing.md:151
msgid " 的求值， "
msgstr " 的求值， "

#: src/plonk-intro-cn/plonk-randomizing.md:151
msgid "，然后产生这两个多项式的求值证明："
msgstr "，然后产生这两个多项式的求值证明："

#: src/plonk-intro-cn/plonk-randomizing.md:157
msgid "检查求值证明的方式如下："
msgstr "检查求值证明的方式如下："

#: src/plonk-intro-cn/plonk-randomizing.md:161
msgid ""
"我们可以看到为了实现 Hiding，计算承诺和打开承诺的成本会加倍。如果我们限定多项"
"式只能被打开一次（或者有限次），那么我们可以采用更低次数的盲化多项式 "
msgstr ""
"我们可以看到为了实现 Hiding，计算承诺和打开承诺的成本会加倍。如果我们限定多项"
"式只能被打开一次（或者有限次），那么我们可以采用更低次数的盲化多项式 "

#: src/plonk-intro-cn/plonk-randomizing.md:161
msgid "。假如我们只考虑多项式最多被打开一次的情况，那么 "
msgstr "。假如我们只考虑多项式最多被打开一次的情况，那么 "

#: src/plonk-intro-cn/plonk-randomizing.md:161
msgid " 只需要是一个一次多项式，同时也可以减少 srs 的尺寸。"
msgstr " 只需要是一个一次多项式，同时也可以减少 srs 的尺寸。"

#: src/plonk-intro-cn/plonk-randomizing.md:165
msgid ""
"最后请注意的是，仅有实现 Hiding 的多项式承诺不足以实现 Plonk 的 Zero-"
"knowledge，仍然需要在 Plonk 协议层面混入足够的随机的盲化因子。"
msgstr ""
"最后请注意的是，仅有实现 Hiding 的多项式承诺不足以实现 Plonk 的 Zero-"
"knowledge，仍然需要在 Plonk 协议层面混入足够的随机的盲化因子。"

#: src/plonk-intro-cn/plonk-randomizing.md:169
msgid ""
"\\[1\\] Adding zero knowledge to Plonk-Halo https://mirprotocol.org/blog/"
"Adding-zero-knowledge-to-Plonk-Halo"
msgstr ""
"\\[1\\] Adding zero knowledge to Plonk-Halo https://mirprotocol.org/blog/"
"Adding-zero-knowledge-to-Plonk-Halo"

#: src/plonk-intro-cn/plonk-randomizing.md:170
msgid ""
"\\[2\\] Chiesa, Alessandro, Yuncong Hu, Mary Maller, Pratyush Mishra, Noah "
"Vesely, and Nicholas Ward. \"Marlin: Preprocessing zkSNARKs with universal "
"and updatable SRS.\" In Advances in Cryptology–EUROCRYPT 2020: 39th Annual "
"International Conference on the Theory and Applications of Cryptographic "
"Techniques, Zagreb, Croatia, May 10–14, 2020, Proceedings, Part I 39, pp. "
"738-768. Springer International Publishing, 2020. https://eprint.iacr."
"org/2019/1047."
msgstr ""
"\\[2\\] Chiesa, Alessandro, Yuncong Hu, Mary Maller, Pratyush Mishra, Noah "
"Vesely, and Nicholas Ward. \"Marlin: Preprocessing zkSNARKs with universal "
"and updatable SRS.\" In Advances in Cryptology–EUROCRYPT 2020: 39th Annual "
"International Conference on the Theory and Applications of Cryptographic "
"Techniques, Zagreb, Croatia, May 10–14, 2020, Proceedings, Part I 39, pp. "
"738-768. Springer International Publishing, 2020. https://eprint.iacr."
"org/2019/1047."

#: src/plonk-intro-cn/plonk-randomizing.md:171
msgid ""
"\\[3\\] Gabizon, Ariel, Zachary J. Williamson, and Oana Ciobotaru. \"Plonk: "
"Permutations over lagrange-bases for oecumenical noninteractive arguments of "
"knowledge.\" _Cryptology ePrint Archive_ (2019)."
msgstr ""
"\\[3\\] Gabizon, Ariel, Zachary J. Williamson, and Oana Ciobotaru. \"Plonk: "
"Permutations over lagrange-bases for oecumenical noninteractive arguments of "
"knowledge.\" _Cryptology ePrint Archive_ (2019)."

#: src/plonk-intro-cn/plonk-lookup.md:3
msgid "理解 PLONK（七）：Lookup Gate"
msgstr "理解 PLONK（七）：Lookup Gate"

#: src/plonk-intro-cn/plonk-lookup.md:5
msgid ""
"传统上我们通过编写算术电路来表达逻辑或者计算。而算术电路只有两种基本门：「加"
"法门」与「乘法门」。当然通过组合，我们可以基于加法和乘法构造复杂一点的元件"
"（Gadget）来复用，但是在电路处理过程中，这些 Gadget 还是会被展开成加法门和乘"
"法门的组合。"
msgstr ""
"传统上我们通过编写算术电路来表达逻辑或者计算。而算术电路只有两种基本门：「加"
"法门」与「乘法门」。当然通过组合，我们可以基于加法和乘法构造复杂一点的元件"
"（Gadget）来复用，但是在电路处理过程中，这些 Gadget 还是会被展开成加法门和乘"
"法门的组合。"

#: src/plonk-intro-cn/plonk-lookup.md:7
msgid "自然我们想问：能否使用除加法和乘法之外的「新计算门」？"
msgstr "自然我们想问：能否使用除加法和乘法之外的「新计算门」？"

#: src/plonk-intro-cn/plonk-lookup.md:9
msgid ""
"Plonk 相关的工作给出了一个令人兴奋的扩展：我们有能力构造出更复杂些的基本计算"
"单元。如果一个计算的输入和输出满足一个预先设定的多项式的话，那么这个计算可以"
"作为基本计算单元，这个改进被称为 「Custom Gate」，实际上你可以理解为这是一种"
"多输入的「多项式门」。"
msgstr ""
"Plonk 相关的工作给出了一个令人兴奋的扩展：我们有能力构造出更复杂些的基本计算"
"单元。如果一个计算的输入和输出满足一个预先设定的多项式的话，那么这个计算可以"
"作为基本计算单元，这个改进被称为 「Custom Gate」，实际上你可以理解为这是一种"
"多输入的「多项式门」。"

#: src/plonk-intro-cn/plonk-lookup.md:11
msgid ""
"故事还没有结束，论文 GW20 又给出了一个制造「Lookup Gate」的方法。这个门的输入"
"输出没有必要局限于多项式关系，而是可以表达「任意的预定义关系」。What? 任意的"
"关系？是的，你没听错，尽管这有点令人难以置信。"
msgstr ""
"故事还没有结束，论文 GW20 又给出了一个制造「Lookup Gate」的方法。这个门的输入"
"输出没有必要局限于多项式关系，而是可以表达「任意的预定义关系」。What? 任意的"
"关系？是的，你没听错，尽管这有点令人难以置信。"

#: src/plonk-intro-cn/plonk-lookup.md:13
msgid ""
"思路不难理解：如果我们在电路之外预设一个表格，表中每一行表示特定计算的输入输"
"出关系，例如："
msgstr ""
"思路不难理解：如果我们在电路之外预设一个表格，表中每一行表示特定计算的输入输"
"出关系，例如："

#: src/plonk-intro-cn/plonk-lookup.md:15
msgid "in1"
msgstr "in1"

#: src/plonk-intro-cn/plonk-lookup.md:15
msgid "in2"
msgstr "in2"

#: src/plonk-intro-cn/plonk-lookup.md:15
msgid "in3"
msgstr "in3"

#: src/plonk-intro-cn/plonk-lookup.md:15
msgid "out"
msgstr "out"

#: src/plonk-intro-cn/plonk-lookup.md:21
msgid ""
"这个表格就代表一个  Lookup 门的定义。如果你问我这个门究竟表达了什么计算，我无"
"法回答（乱写的）。不过只要能给出这样一张表格，我们就可以在电路里面接入一个"
"门，它的输入输出关系「存在于表中的某一行」。"
msgstr ""
"这个表格就代表一个  Lookup 门的定义。如果你问我这个门究竟表达了什么计算，我无"
"法回答（乱写的）。不过只要能给出这样一张表格，我们就可以在电路里面接入一个"
"门，它的输入输出关系「存在于表中的某一行」。"

#: src/plonk-intro-cn/plonk-lookup.md:23
msgid "这种门被称为 Lookup Gate，即查表门（或查表约束）。"
msgstr "这种门被称为 Lookup Gate，即查表门（或查表约束）。"

#: src/plonk-intro-cn/plonk-lookup.md:25
msgid ""
"如果当我们在 Plonk 电路中接入查表门，那么 Plonk 协议就要检查这个门的输入输出"
"是否合法，然后就会去查我们实现预设的表格，看看其输入输出关系是否能在表中找到"
"对应的一行。如果表中存在这样的条目，那么这个门就合法，否则被视为非法。"
msgstr ""
"如果当我们在 Plonk 电路中接入查表门，那么 Plonk 协议就要检查这个门的输入输出"
"是否合法，然后就会去查我们实现预设的表格，看看其输入输出关系是否能在表中找到"
"对应的一行。如果表中存在这样的条目，那么这个门就合法，否则被视为非法。"

#: src/plonk-intro-cn/plonk-lookup.md:27
msgid ""
"在现实应用中，最多采用查表方式的门是关于位运算。如一个 8-bit 异或运算，只需"
"要 "
msgstr ""
"在现实应用中，最多采用查表方式的门是关于位运算。如一个 8-bit 异或运算，只需"
"要 "

#: src/plonk-intro-cn/plonk-lookup.md:27
#: src/zk-snarks/4-Construction-Properties.md:155
#: src/halo2/tmp/9-decomposed.md:191
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:246
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:255
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:292
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:301
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:325
msgid "16"
msgstr "16"

#: src/plonk-intro-cn/plonk-lookup.md:27
msgid ""
" 大小的表格即可。此外对于采用大量位运算的 SHA256算法，也可以通过建立一个 "
"Spread Table 来大大加速各种位运算的效率。"
msgstr ""
" 大小的表格即可。此外对于采用大量位运算的 SHA256算法，也可以通过建立一个 "
"Spread Table 来大大加速各种位运算的效率。"

#: src/plonk-intro-cn/plonk-lookup.md:29
msgid "基本思路"
msgstr "基本思路"

#: src/plonk-intro-cn/plonk-lookup.md:31
msgid ""
"实现查表门的一个关键技术是 Lookup Argument 协议，即如何证明一条（或多条）记录"
"是否存在于一个公开的表中。"
msgstr ""
"实现查表门的一个关键技术是 Lookup Argument 协议，即如何证明一条（或多条）记录"
"是否存在于一个公开的表中。"

#: src/plonk-intro-cn/plonk-lookup.md:33
msgid ""
"可能有朋友会条件反射想到 Merkle Tree，如果我们把表格按行计算 hash，这些 hash "
"就可以产生一个 Merkle Root，然后通过 Merkle Path 就能证明一条记录是否存在表格"
"中。但是这个方法（以及所有的 Vector Commitment 方案）不适合查表场景。原因有两"
"个，一是这种方案会暴露记录在表格中的位置。假如 Prover 想隐藏记录的信息，即在"
"查询证明不暴露位置，那么仅 Merkle Tree 就难以胜任了。理论点说，这里我们需要 "
"Set-Membership Argument，而非 Vector-Membership Argument。第二个原因：如果有"
"大量的记录条目（比如条目数量为 "
msgstr ""
"可能有朋友会条件反射想到 Merkle Tree，如果我们把表格按行计算 hash，这些 hash "
"就可以产生一个 Merkle Root，然后通过 Merkle Path 就能证明一条记录是否存在表格"
"中。但是这个方法（以及所有的 Vector Commitment 方案）不适合查表场景。原因有两"
"个，一是这种方案会暴露记录在表格中的位置。假如 Prover 想隐藏记录的信息，即在"
"查询证明不暴露位置，那么仅 Merkle Tree 就难以胜任了。理论点说，这里我们需要 "
"Set-Membership Argument，而非 Vector-Membership Argument。第二个原因：如果有"
"大量的记录条目（比如条目数量为 "

#: src/plonk-intro-cn/plonk-lookup.md:33
msgid " ）需要查表，那么所产生的证明即 Merkle Path，可能会比较大，最坏情况是 "
msgstr " ）需要查表，那么所产生的证明即 Merkle Path，可能会比较大，最坏情况是 "

#: src/plonk-intro-cn/plonk-lookup.md:35
msgid ""
"简而言之，我们需要一种新的，并且高效的查表协议。本文介绍两个常见的查表协议，"
"为了简化表述，我们先只考虑单列表格的查询，然后再扩展到多列表格的情况。"
msgstr ""
"简而言之，我们需要一种新的，并且高效的查表协议。本文介绍两个常见的查表协议，"
"为了简化表述，我们先只考虑单列表格的查询，然后再扩展到多列表格的情况。"

#: src/plonk-intro-cn/plonk-lookup.md:37
msgid "Halo2-lookup 方案"
msgstr "Halo2-lookup 方案"

#: src/plonk-intro-cn/plonk-lookup.md:39
msgid ""
"基于 Permutation Argument，Halo2 给出了一个简洁易懂的 Lookup Argument 方案。"
msgstr ""
"基于 Permutation Argument，Halo2 给出了一个简洁易懂的 Lookup Argument 方案。"

#: src/plonk-intro-cn/plonk-lookup.md:41
msgid "假如我们有一个表格向量 "
msgstr "假如我们有一个表格向量 "

#: src/plonk-intro-cn/plonk-lookup.md:41
msgid "，表格中不存在相同元素。然后有一个查询向量 "
msgstr "，表格中不存在相同元素。然后有一个查询向量 "

#: src/plonk-intro-cn/plonk-lookup.md:41
msgid "，我们接下来要证明 "
msgstr "，我们接下来要证明 "

#: src/plonk-intro-cn/plonk-lookup.md:41 src/plonk-intro-cn/plonk-lookup.md:107
#: src/plonk-intro-cn/plonk-lookup.md:113
#: src/plonk-intro-cn/plonk-lookup.md:135
#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:403 src/public goods/第二章.md:158
msgid "⊆"
msgstr "⊆"

#: src/plonk-intro-cn/plonk-lookup.md:41
msgid " 中会有重复元素。"
msgstr " 中会有重复元素。"

#: src/plonk-intro-cn/plonk-lookup.md:43
msgid "我们引入一个关键的**辅助向量** "
msgstr "我们引入一个关键的**辅助向量** "

#: src/plonk-intro-cn/plonk-lookup.md:43
msgid "，它是 "
msgstr "，它是 "

#: src/plonk-intro-cn/plonk-lookup.md:43
msgid " 的一个重新排序（置换），使得 "
msgstr " 的一个重新排序（置换），使得 "

#: src/plonk-intro-cn/plonk-lookup.md:43
msgid " 中的所有查询记录都按照 "
msgstr " 中的所有查询记录都按照 "

#: src/plonk-intro-cn/plonk-lookup.md:43
msgid " 的顺序进行排序，比如 "
msgstr " 的顺序进行排序，比如 "

#: src/plonk-intro-cn/plonk-lookup.md:43
msgid "，那么重排后， "
msgstr "，那么重排后， "

#: src/plonk-intro-cn/plonk-lookup.md:45
msgid "可以看出， "
msgstr "可以看出， "

#: src/plonk-intro-cn/plonk-lookup.md:45
msgid " 中的重复元素被放在了一起，并且整体上按照 "
msgstr " 中的重复元素被放在了一起，并且整体上按照 "

#: src/plonk-intro-cn/plonk-lookup.md:45
msgid " 中元素出现的顺序。我们把 "
msgstr " 中元素出现的顺序。我们把 "

#: src/plonk-intro-cn/plonk-lookup.md:45
msgid " 中连续重复元素的第一个标记出来："
msgstr " 中连续重复元素的第一个标记出来："

#: src/plonk-intro-cn/plonk-lookup.md:49
msgid "我们再引入一个**辅助向量** "
msgstr "我们再引入一个**辅助向量** "

#: src/plonk-intro-cn/plonk-lookup.md:49
msgid "，它是对 "
msgstr "，它是对 "

#: src/plonk-intro-cn/plonk-lookup.md:49
msgid " 的重新排序，使得 "
msgstr " 的重新排序，使得 "

#: src/plonk-intro-cn/plonk-lookup.md:49
msgid " 中被标记元素可以正好对应到 "
msgstr " 中被标记元素可以正好对应到 "

#: src/plonk-intro-cn/plonk-lookup.md:49
msgid " 中相同位置上的元素："
msgstr " 中相同位置上的元素："

#: src/plonk-intro-cn/plonk-lookup.md:53
msgid "请注意看 "
msgstr "请注意看 "

#: src/plonk-intro-cn/plonk-lookup.md:53
msgid "，其中被方框标记的元素和 "
msgstr "，其中被方框标记的元素和 "

#: src/plonk-intro-cn/plonk-lookup.md:53
msgid " 中相同位置的方框元素值完全相同，未被标记的元素则没有出现在 "
msgstr " 中相同位置的方框元素值完全相同，未被标记的元素则没有出现在 "

#: src/plonk-intro-cn/plonk-lookup.md:53 src/plonk-intro-cn/plonk-lookup.md:125
msgid " 中。"
msgstr " 中。"

#: src/plonk-intro-cn/plonk-lookup.md:55
msgid "于是我们可以找出一个规律："
msgstr "于是我们可以找出一个规律："

#: src/plonk-intro-cn/plonk-lookup.md:55
msgid " 中的每一个未标记元素等于它左边的相邻元素，而每一个被标记元素等于 "
msgstr " 中的每一个未标记元素等于它左边的相邻元素，而每一个被标记元素等于 "

#: src/plonk-intro-cn/plonk-lookup.md:55
msgid " 同位置元素，即 "
msgstr " 同位置元素，即 "

#: src/plonk-intro-cn/plonk-lookup.md:55
msgid " 或者 "
msgstr " 或者 "

#: src/plonk-intro-cn/plonk-lookup.md:57
msgid "将两个向量 "
msgstr "将两个向量 "

#: src/plonk-intro-cn/plonk-lookup.md:57
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:216
#: src/zk-snarks/4-Construction-Properties.md:289
#: src/halo2/tmp/1-Simple-Example.md:152 src/halo2/tmp/1-Simple-Example.md:553
msgid "  和 "
msgstr "  和 "

#: src/plonk-intro-cn/plonk-lookup.md:57
msgid " 与重排向量 "
msgstr " 与重排向量 "

#: src/plonk-intro-cn/plonk-lookup.md:57
msgid " 通过 Lagrange Basis 进行多项式编码，我们得到 "
msgstr " 通过 Lagrange Basis 进行多项式编码，我们得到 "

#: src/plonk-intro-cn/plonk-lookup.md:57
#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:363 src/Nova/SuperNova.md:30 src/public goods/第二章.md:10
msgid ", "
msgstr ", "

#: src/plonk-intro-cn/plonk-lookup.md:57
msgid "，他们会满足下面的等式："
msgstr "，他们会满足下面的等式："

#: src/plonk-intro-cn/plonk-lookup.md:61
msgid "但上面这个等式不足以约束重排向量的可靠性。考虑如果 "
msgstr "但上面这个等式不足以约束重排向量的可靠性。考虑如果 "

#: src/plonk-intro-cn/plonk-lookup.md:61
msgid " ，也会满足上面的等式，但是 "
msgstr " ，也会满足上面的等式，但是 "

#: src/plonk-intro-cn/plonk-lookup.md:61
msgid " 并不是合法的查询记录。因此，我们还要加入一条约束防止出现 "
msgstr " 并不是合法的查询记录。因此，我们还要加入一条约束防止出现 "

#: src/plonk-intro-cn/plonk-lookup.md:61
msgid " 上 循环回卷导致的漏洞：要求 "
msgstr " 上 循环回卷导致的漏洞：要求 "

#: src/plonk-intro-cn/plonk-lookup.md:61
msgid " 两个向量的第一个元素必须相同， 即 "
msgstr " 两个向量的第一个元素必须相同， 即 "

#: src/plonk-intro-cn/plonk-lookup.md:61
msgid "，用多项式约束表达如下："
msgstr "，用多项式约束表达如下："

#: src/plonk-intro-cn/plonk-lookup.md:65
msgid "剩下的工作是证明 "
msgstr "剩下的工作是证明 "

#: src/plonk-intro-cn/plonk-lookup.md:65
msgid " 满足某一个「置换」关系，且 "
msgstr " 满足某一个「置换」关系，且 "

#: src/plonk-intro-cn/plonk-lookup.md:65
msgid ""
" 也满足某个「置换」关系。由于，这两个置换关系只不需要约束具体的置换向量，因此"
"我们可以直接采用 Grand Product Argument 来约束这两个置换关系："
msgstr ""
" 也满足某个「置换」关系。由于，这两个置换关系只不需要约束具体的置换向量，因此"
"我们可以直接采用 Grand Product Argument 来约束这两个置换关系："

#: src/plonk-intro-cn/plonk-lookup.md:71
msgid "下面重新整理下这个协议"
msgstr "下面重新整理下这个协议"

#: src/plonk-intro-cn/plonk-lookup.md:75
msgid "公共输入：表格向量 "
msgstr "公共输入：表格向量 "

#: src/plonk-intro-cn/plonk-lookup.md:77
msgid "秘密输入：查询向量 "
msgstr "秘密输入：查询向量 "

#: src/plonk-intro-cn/plonk-lookup.md:81
msgid "第一步：Prover 构造多项式并发送承诺 "
msgstr "第一步：Prover 构造多项式并发送承诺 "

#: src/plonk-intro-cn/plonk-lookup.md:85
msgid "第三步：Prover 构造多项式并发送承诺 "
msgstr "第三步：Prover 构造多项式并发送承诺 "

#: src/plonk-intro-cn/plonk-lookup.md:89
msgid "第四步：Verififer 发送挑战数 "
msgstr "第四步：Verififer 发送挑战数 "

#: src/plonk-intro-cn/plonk-lookup.md:91
msgid "第五步：Prover 计算并发送商多项式 "
msgstr "第五步：Prover 计算并发送商多项式 "

#: src/plonk-intro-cn/plonk-lookup.md:93 src/plonk-intro-cn/plonk-lookup.md:101
#: src/plonk-intro-cn/plonk-lookup.md:208
#: src/plonk-intro-cn/plonk-lookup.md:210
#: src/plonk-intro-cn/plonk-lookup.md:212
#: src/plonk-intro-cn/plonk-lookup.md:214
#: src/plonk-intro-cn/plonk-lookup.md:218
#: src/plonk-intro-cn/plonk-lookup.md:224
#: src/plonk-intro-cn/plonk-lookup.md:238
#: src/plonk-intro-cn/plonk-lookup.md:279
#: src/plonk-intro-cn/plonk-lookup.md:297
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:24
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:28
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:279
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:280
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:282
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:283
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:313
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:337
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:26
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:194
#: src/zk-snarks/3-General-Purpose-Computation.md:248
#: src/zk-snarks/3-General-Purpose-Computation.md:249
#: src/zk-snarks/3-General-Purpose-Computation.md:250
#: src/zk-snarks/3-General-Purpose-Computation.md:251
#: src/zk-snarks/3-General-Purpose-Computation.md:252
#: src/zk-snarks/3-General-Purpose-Computation.md:253
#: src/zk-snarks/3-General-Purpose-Computation.md:256
#: src/zk-snarks/3-General-Purpose-Computation.md:266
#: src/zk-snarks/3-General-Purpose-Computation.md:268
#: src/zk-snarks/3-General-Purpose-Computation.md:293
#: src/zk-snarks/3-General-Purpose-Computation.md:295
#: src/zk-snarks/3-General-Purpose-Computation.md:300
#: src/zk-snarks/4-Construction-Properties.md:48
#: src/zk-snarks/4-Construction-Properties.md:49
#: src/zk-snarks/4-Construction-Properties.md:63
#: src/zk-snarks/4-Construction-Properties.md:67
#: src/zk-snarks/4-Construction-Properties.md:79
#: src/zk-snarks/4-Construction-Properties.md:80
#: src/zk-snarks/4-Construction-Properties.md:85
#: src/zk-snarks/4-Construction-Properties.md:104
#: src/zk-snarks/4-Construction-Properties.md:105
#: src/zk-snarks/4-Construction-Properties.md:108
#: src/zk-snarks/4-Construction-Properties.md:112
#: src/zk-snarks/4-Construction-Properties.md:117
#: src/zk-snarks/4-Construction-Properties.md:121
#: src/zk-snarks/4-Construction-Properties.md:151
#: src/zk-snarks/4-Construction-Properties.md:155
#: src/zk-snarks/4-Construction-Properties.md:172
#: src/zk-snarks/4-Construction-Properties.md:203
#: src/zk-snarks/4-Construction-Properties.md:205
#: src/zk-snarks/4-Construction-Properties.md:206
#: src/zk-snarks/4-Construction-Properties.md:207
#: src/zk-snarks/4-Construction-Properties.md:209
#: src/zk-snarks/4-Construction-Properties.md:249
#: src/zk-snarks/4-Construction-Properties.md:261
#: src/zk-snarks/4-Construction-Properties.md:262
#: src/zk-snarks/4-Construction-Properties.md:263
#: src/zk-snarks/4-Construction-Properties.md:264
#: src/zk-snarks/4-Construction-Properties.md:265
#: src/zk-snarks/4-Construction-Properties.md:271
#: src/zk-snarks/4-Construction-Properties.md:275
#: src/zk-snarks/4-Construction-Properties.md:276
#: src/zk-snarks/4-Construction-Properties.md:277
#: src/zk-snarks/4-Construction-Properties.md:279
#: src/zk-snarks/4-Construction-Properties.md:282
#: src/zk-snarks/4-Construction-Properties.md:284
#: src/zk-snarks/4-Construction-Properties.md:287
#: src/zk-snarks/4-Construction-Properties.md:289
#: src/zk-snarks/4-Construction-Properties.md:290
#: src/zk-snarks/4-Construction-Properties.md:291
#: src/zk-snarks/4-Construction-Properties.md:304
#: src/zk-snarks/4-Construction-Properties.md:306
#: src/zk-snarks/4-Construction-Properties.md:325
#: src/zk-snarks/4-Construction-Properties.md:326
#: src/zk-snarks/4-Construction-Properties.md:327
#: src/zk-snarks/4-Construction-Properties.md:394
#: src/zk-snarks/4-Construction-Properties.md:428
#: src/zk-snarks/5-Pinocchio-Protocol.md:45
#: src/zk-snarks/5-Pinocchio-Protocol.md:46
#: src/zk-snarks/5-Pinocchio-Protocol.md:48
#: src/zk-snarks/5-Pinocchio-Protocol.md:50
#: src/zk-snarks/5-Pinocchio-Protocol.md:52
#: src/zk-snarks/5-Pinocchio-Protocol.md:62
#: src/zk-snarks/5-Pinocchio-Protocol.md:67
#: src/zk-snarks/5-Pinocchio-Protocol.md:69
#: src/zk-snarks/5-Pinocchio-Protocol.md:83
#: src/zk-snarks/5-Pinocchio-Protocol.md:92
#: src/zk-snarks/5-Pinocchio-Protocol.md:97
#: src/zk-snarks/5-Pinocchio-Protocol.md:98
#: src/zk-snarks/5-Pinocchio-Protocol.md:103
#: src/zk-snarks/5-Pinocchio-Protocol.md:106
#: src/zk-snarks/5-Pinocchio-Protocol.md:109
#: src/zk-snarks/5-Pinocchio-Protocol.md:118
#: src/zk-snarks/5-Pinocchio-Protocol.md:168
#: src/zk-snarks/5-Pinocchio-Protocol.md:170
#: src/zk-snarks/5-Pinocchio-Protocol.md:198
#: src/zk-snarks/5-Pinocchio-Protocol.md:199
#: src/zk-snarks/5-Pinocchio-Protocol.md:204
#: src/zk-snarks/5-Pinocchio-Protocol.md:207
#: src/zk-snarks/5-Pinocchio-Protocol.md:214
#: src/zk-snarks/5-Pinocchio-Protocol.md:215
#: src/zk-snarks/5-Pinocchio-Protocol.md:225
#: src/halo2/tmp/4-IsZero-Check-example-3.md:127
#: src/halo2/tmp/4-IsZero-Check-example-3.md:128
#: src/halo2/tmp/7-Range-Check-lookup(example-2).md:137
#: src/halo2/tmp/7-Range-Check-lookup(example-2).md:138
#: src/halo2/tmp/9-decomposed.md:39 src/halo2/tmp/9-decomposed.md:40
#: src/halo2/tmp/9-decomposed.md:43 src/halo2/tmp/9-decomposed.md:44
#: src/halo2/tmp/9-decomposed.md:47 src/halo2/tmp/9-decomposed.md:48
#: src/halo2/tmp/9-decomposed.md:101 src/halo2/tmp/9-decomposed.md:104
#: src/zk-everything/BabySNARK tutorial.md:124 tutorial.md:131 tutorial.md:145
#: tutorial.md:148 src/zk-everything/zk-learning-miles/KZG.md:110
#: src/zk-everything/zk-learning-miles/KZG.md:114
#: src/zk-everything/zk-learning-miles/KZG.md:203
#: src/zk-everything/zk-learning-miles/KZG.md:205
#: src/zk-everything/zk-learning-miles/KZG.md:209
#: src/zk-everything/zk-learning-miles/KZG.md:213
#: src/zk-everything/zk-learning-miles/KZG.md:270
#: src/zk-everything/zk-learning-miles/KZG.md:272
#: src/zk-everything/zk-learning-miles/KZG.md:274
#: src/zk-everything/zk-learning-miles/KZG.md:276
#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:198 SNARKs.md:383
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:446
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:448
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:452
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:454
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:460
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:504
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:506
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:512
#: src/zk-everything/zk-everything-joe/Hyrax.md:156
#: src/zk-everything/zk-everything-joe/Hyrax.md:162
#: src/zk-everything/zk-everything-joe/Hyrax.md:173
#: src/zk-everything/zk-everything-joe/Hyrax.md:181
#: src/zk-everything/zk-everything-joe/Hyrax.md:195
#: src/zk-everything/zk-everything-joe/Spartan.md:177
#: src/zk-everything/zk-everything-joe/Spartan.md:232
#: src/zk-everything/zk-everything-joe/Spartan.md:236
#: src/zk-everything/zk-everything-joe/Spartan.md:242
#: src/zk-everything/zk-everything-joe/Spartan.md:254
#: src/zk-everything/zk-everything-joe/Spartan.md:264
#: src/zk-everything/zk-everything-joe/Spartan.md:275
#: src/zk-everything/zk-everything-joe/Spartan.md:334
#: src/zk-everything/zk-everything-joe/Spartan.md:339
#: src/zk-everything/zk-everything-joe/Spartan.md:347
#: src/zk-everything/zk-everything-joe/Spartan.md:350
#: src/zk-everything/zk-everything-joe/Spartan.md:353
#: src/zk-everything/zk-everything-joe/Spartan.md:355
#: src/zk-everything/zk-everything-joe/Spartan.md:359
#: src/zk-everything/zk-everything-joe/Spartan.md:360
#: src/zk-everything/zk-everything-joe/Spartan.md:394
#: src/zk-everything/zk-everything-joe/Spartan.md:401
#: src/zk-everything/zk-everything-joe/Spartan.md:441
#: src/zk-everything/zk-everything-joe/Spartan.md:445
#: src/zk-everything/zk-everything-joe/Spartan.md:450
#: src/zk-everything/zk-everything-joe/Spartan.md:455 src/Nova/SuperNova.md:66
#: src/Nova/SuperNova.md:68 src/public goods/第二章.md:10
#: goods/第二章.md:26 goods/第二章.md:33 goods/第二章.md:35
#: goods/第二章.md:84 goods/第二章.md:86 goods/第二章.md:97
#: goods/第二章.md:147 goods/4-Proving-System.md:58
#: goods/4-Proving-System.md:193 goods/4-Proving-System.md:195
#: goods/4-Proving-System.md:202 goods/4-Proving-System.md:207
#: goods/4-Proving-System.md:209
msgid "v"
msgstr "v"

#: src/plonk-intro-cn/plonk-lookup.md:95
msgid "第六步：Verifier 发送挑战数 "
msgstr "第六步：Verifier 发送挑战数 "

#: src/plonk-intro-cn/plonk-lookup.md:97
msgid "第七步：Prover 发送 "
msgstr "第七步：Prover 发送 "

#: src/plonk-intro-cn/plonk-lookup.md:97
msgid "，并附带上 evaluation proofs（略去）"
msgstr "，并附带上 evaluation proofs（略去）"

#: src/plonk-intro-cn/plonk-lookup.md:99
msgid ""
"第八步：Verifier 验证（注意这里为了简化，去掉了KZG10的聚合优化和线性化优化）"
msgstr ""
"第八步：Verifier 验证（注意这里为了简化，去掉了KZG10的聚合优化和线性化优化）"

#: src/plonk-intro-cn/plonk-lookup.md:103
msgid "Plookup 方案"
msgstr "Plookup 方案"

#: src/plonk-intro-cn/plonk-lookup.md:105
msgid ""
"然后我们再看看论文 GW20 给出的方案 —— Plookup。与 Halo2-lookup 相比，Plookup "
"可以省去 "
msgstr ""
"然后我们再看看论文 GW20 给出的方案 —— Plookup。与 Halo2-lookup 相比，Plookup "
"可以省去 "

#: src/plonk-intro-cn/plonk-lookup.md:105
msgid " 向量。"
msgstr " 向量。"

#: src/plonk-intro-cn/plonk-lookup.md:107
msgid "重申一下 Plookup 证明的场景：Verifier 已知表格 "
msgstr "重申一下 Plookup 证明的场景：Verifier 已知表格 "

#: src/plonk-intro-cn/plonk-lookup.md:107
msgid " 向量，Prover 拥有一个秘密的查询向量 "
msgstr " 向量，Prover 拥有一个秘密的查询向量 "

#: src/plonk-intro-cn/plonk-lookup.md:107
msgid "，Prover 要证明 "
msgstr "，Prover 要证明 "

#: src/plonk-intro-cn/plonk-lookup.md:107
msgid " 中的每一个元素都在 "
msgstr " 中的每一个元素都在 "

#: src/plonk-intro-cn/plonk-lookup.md:107
msgid " 中，即 "
msgstr " 中，即 "

#: src/plonk-intro-cn/plonk-lookup.md:109
msgid "方案 Plookup 只需要引入一个辅助向量  "
msgstr "方案 Plookup 只需要引入一个辅助向量  "

#: src/plonk-intro-cn/plonk-lookup.md:109
#: src/plonk-intro-cn/plonk-lookup.md:111
#: src/plonk-intro-cn/plonk-lookup.md:113
#: src/plonk-intro-cn/plonk-lookup.md:115
#: src/plonk-intro-cn/plonk-lookup.md:117
#: src/plonk-intro-cn/plonk-lookup.md:125
#: src/plonk-intro-cn/plonk-lookup.md:127
#: src/plonk-intro-cn/plonk-lookup.md:131
#: src/plonk-intro-cn/plonk-lookup.md:135
#: src/plonk-intro-cn/plonk-lookup.md:137
#: src/plonk-intro-cn/plonk-lookup.md:139
#: src/plonk-intro-cn/plonk-lookup.md:141
#: src/plonk-intro-cn/plonk-lookup.md:145
#: src/plonk-intro-cn/plonk-lookup.md:149
#: src/plonk-intro-cn/plonk-lookup.md:153
#: src/plonk-intro-cn/plonk-lookup.md:157
#: src/plonk-intro-cn/plonk-lookup.md:161
#: src/plonk-intro-cn/plonk-lookup.md:163
#: src/plonk-intro-cn/plonk-lookup.md:165
#: src/plonk-intro-cn/plonk-lookup.md:167
#: src/plonk-intro-cn/plonk-lookup.md:169
#: src/plonk-intro-cn/plonk-lookup.md:173
#: src/plonk-intro-cn/plonk-lookup.md:175
#: src/plonk-intro-cn/plonk-lookup.md:196
#: src/plonk-intro-cn/plonk-lookup.md:200
#: src/plonk-intro-cn/plonk-lookup.md:206
#: src/plonk-intro-cn/plonk-lookup.md:208
#: src/plonk-intro-cn/plonk-lookup.md:210
#: src/plonk-intro-cn/plonk-lookup.md:212
#: src/plonk-intro-cn/plonk-lookup.md:214
#: src/plonk-intro-cn/plonk-lookup.md:216
#: src/plonk-intro-cn/plonk-lookup.md:218
#: src/plonk-intro-cn/plonk-lookup.md:220
#: src/plonk-intro-cn/plonk-lookup.md:226
#: src/plonk-intro-cn/plonk-lookup.md:238
#: src/plonk-intro-cn/plonk-lookup.md:279
#: src/plonk-intro-cn/plonk-lookup.md:297
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:105
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:323
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:324
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:325
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:326
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:332
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:333
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:334
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:335
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:341
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:342
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:343
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:346
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:347
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:348
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:350
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:355
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:357
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:22
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:26
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:30
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:32
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:34
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:35
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:66
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:67
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:70
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:74
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:76
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:78
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:79
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:81
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:92
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:111
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:122
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:123
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:126
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:128
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:132
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:137
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:139
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:160
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:182
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:183
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:185
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:188
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:189
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:194
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:198
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:206
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:207
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:208
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:209
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:211
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:212
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:213
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:215
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:216
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:218
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:224
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:229
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:231
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:232
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:235
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:237
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:243
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:247
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:258
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:263
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:264
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:265
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:266
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:271
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:272
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:274
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:280
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:281
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:282
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:283
#: src/zk-snarks/3-General-Purpose-Computation.md:97
#: src/zk-snarks/3-General-Purpose-Computation.md:100
#: src/zk-snarks/3-General-Purpose-Computation.md:102
#: src/zk-snarks/3-General-Purpose-Computation.md:104
#: src/zk-snarks/3-General-Purpose-Computation.md:108
#: src/zk-snarks/3-General-Purpose-Computation.md:137
#: src/zk-snarks/3-General-Purpose-Computation.md:231
#: src/zk-snarks/3-General-Purpose-Computation.md:233
#: src/zk-snarks/3-General-Purpose-Computation.md:237
#: src/zk-snarks/3-General-Purpose-Computation.md:243
#: src/zk-snarks/3-General-Purpose-Computation.md:244
#: src/zk-snarks/3-General-Purpose-Computation.md:250
#: src/zk-snarks/3-General-Purpose-Computation.md:251
#: src/zk-snarks/3-General-Purpose-Computation.md:252
#: src/zk-snarks/3-General-Purpose-Computation.md:264
#: src/zk-snarks/3-General-Purpose-Computation.md:279
#: src/zk-snarks/3-General-Purpose-Computation.md:295
#: src/zk-snarks/3-General-Purpose-Computation.md:342
#: src/zk-snarks/3-General-Purpose-Computation.md:348
#: src/zk-snarks/3-General-Purpose-Computation.md:349
#: src/zk-snarks/3-General-Purpose-Computation.md:350
#: src/zk-snarks/3-General-Purpose-Computation.md:351
#: src/zk-snarks/3-General-Purpose-Computation.md:356
#: src/zk-snarks/3-General-Purpose-Computation.md:358
#: src/zk-snarks/3-General-Purpose-Computation.md:360
#: src/zk-snarks/3-General-Purpose-Computation.md:361
#: src/zk-snarks/3-General-Purpose-Computation.md:364
#: src/zk-snarks/3-General-Purpose-Computation.md:366
#: src/zk-snarks/3-General-Purpose-Computation.md:368
#: src/zk-snarks/3-General-Purpose-Computation.md:369
#: src/zk-snarks/4-Construction-Properties.md:196
#: src/zk-snarks/4-Construction-Properties.md:197
#: src/zk-snarks/4-Construction-Properties.md:199
#: src/zk-snarks/4-Construction-Properties.md:200
#: src/zk-snarks/4-Construction-Properties.md:207
#: src/zk-snarks/4-Construction-Properties.md:209
#: src/zk-snarks/4-Construction-Properties.md:210
#: src/zk-snarks/4-Construction-Properties.md:212
#: src/zk-snarks/4-Construction-Properties.md:233
#: src/zk-snarks/4-Construction-Properties.md:234
#: src/zk-snarks/4-Construction-Properties.md:235
#: src/zk-snarks/4-Construction-Properties.md:237
#: src/zk-snarks/4-Construction-Properties.md:244
#: src/zk-snarks/4-Construction-Properties.md:245
#: src/zk-snarks/4-Construction-Properties.md:249
#: src/zk-snarks/4-Construction-Properties.md:251
#: src/zk-snarks/4-Construction-Properties.md:263
#: src/zk-snarks/4-Construction-Properties.md:271
#: src/zk-snarks/4-Construction-Properties.md:273
#: src/zk-snarks/4-Construction-Properties.md:275
#: src/zk-snarks/4-Construction-Properties.md:279
#: src/zk-snarks/4-Construction-Properties.md:284
#: src/zk-snarks/4-Construction-Properties.md:286
#: src/zk-snarks/4-Construction-Properties.md:298
#: src/zk-snarks/4-Construction-Properties.md:304
#: src/zk-snarks/4-Construction-Properties.md:306
#: src/zk-snarks/4-Construction-Properties.md:307
#: src/zk-snarks/4-Construction-Properties.md:308
#: src/zk-snarks/4-Construction-Properties.md:309
#: src/zk-snarks/4-Construction-Properties.md:317
#: src/zk-snarks/4-Construction-Properties.md:318
#: src/zk-snarks/4-Construction-Properties.md:326
#: src/zk-snarks/4-Construction-Properties.md:341
#: src/zk-snarks/4-Construction-Properties.md:342
#: src/zk-snarks/4-Construction-Properties.md:345
#: src/zk-snarks/4-Construction-Properties.md:349
#: src/zk-snarks/4-Construction-Properties.md:353
#: src/zk-snarks/4-Construction-Properties.md:379
#: src/zk-snarks/4-Construction-Properties.md:381
#: src/zk-snarks/4-Construction-Properties.md:387
#: src/zk-snarks/4-Construction-Properties.md:391
#: src/zk-snarks/4-Construction-Properties.md:393
#: src/zk-snarks/4-Construction-Properties.md:394
#: src/zk-snarks/4-Construction-Properties.md:395
#: src/zk-snarks/4-Construction-Properties.md:397
#: src/zk-snarks/4-Construction-Properties.md:407
#: src/zk-snarks/4-Construction-Properties.md:408
#: src/zk-snarks/4-Construction-Properties.md:409
#: src/zk-snarks/4-Construction-Properties.md:422
#: src/zk-snarks/4-Construction-Properties.md:424
#: src/zk-snarks/4-Construction-Properties.md:428
#: src/zk-snarks/4-Construction-Properties.md:441
#: src/zk-snarks/5-Pinocchio-Protocol.md:65
#: src/zk-snarks/5-Pinocchio-Protocol.md:67
#: src/zk-snarks/5-Pinocchio-Protocol.md:76
#: src/zk-snarks/5-Pinocchio-Protocol.md:87
#: src/zk-snarks/5-Pinocchio-Protocol.md:89
#: src/zk-snarks/5-Pinocchio-Protocol.md:94
#: src/zk-snarks/5-Pinocchio-Protocol.md:97
#: src/zk-snarks/5-Pinocchio-Protocol.md:98
#: src/zk-snarks/5-Pinocchio-Protocol.md:103
#: src/zk-snarks/5-Pinocchio-Protocol.md:106
#: src/zk-snarks/5-Pinocchio-Protocol.md:109
#: src/zk-snarks/5-Pinocchio-Protocol.md:129
#: src/zk-snarks/5-Pinocchio-Protocol.md:131
#: src/zk-snarks/5-Pinocchio-Protocol.md:132
#: src/zk-snarks/5-Pinocchio-Protocol.md:133
#: src/zk-snarks/5-Pinocchio-Protocol.md:135
#: src/zk-snarks/5-Pinocchio-Protocol.md:136
#: src/zk-snarks/5-Pinocchio-Protocol.md:137
#: src/zk-snarks/5-Pinocchio-Protocol.md:141
#: src/zk-snarks/5-Pinocchio-Protocol.md:142
#: src/zk-snarks/5-Pinocchio-Protocol.md:143
#: src/zk-snarks/5-Pinocchio-Protocol.md:145
#: src/zk-snarks/5-Pinocchio-Protocol.md:147
#: src/zk-snarks/5-Pinocchio-Protocol.md:151
#: src/zk-snarks/5-Pinocchio-Protocol.md:152
#: src/zk-snarks/5-Pinocchio-Protocol.md:154
#: src/zk-snarks/5-Pinocchio-Protocol.md:155
#: src/zk-snarks/5-Pinocchio-Protocol.md:157
#: src/zk-snarks/5-Pinocchio-Protocol.md:159
#: src/zk-snarks/5-Pinocchio-Protocol.md:160
#: src/zk-snarks/5-Pinocchio-Protocol.md:163
#: src/zk-snarks/5-Pinocchio-Protocol.md:165
#: src/zk-snarks/5-Pinocchio-Protocol.md:173
#: src/zk-snarks/5-Pinocchio-Protocol.md:189
#: src/zk-snarks/5-Pinocchio-Protocol.md:192
#: src/zk-snarks/5-Pinocchio-Protocol.md:195
#: src/zk-snarks/5-Pinocchio-Protocol.md:204
#: src/zk-snarks/5-Pinocchio-Protocol.md:205
#: src/zk-snarks/5-Pinocchio-Protocol.md:207
#: src/zk-snarks/5-Pinocchio-Protocol.md:209
#: src/zk-snarks/5-Pinocchio-Protocol.md:214
#: src/zk-snarks/5-Pinocchio-Protocol.md:215
#: src/zk-snarks/5-Pinocchio-Protocol.md:225 src/halo2/chap-1/index.md:11
#: src/halo2/tmp/3-Fibonacci-example-2.md:426
#: src/halo2/tmp/3-Fibonacci-example-2.md:427 src/halo2/tmp/9-decomposed.md:130
#: src/halo2/tmp/9-decomposed.md:273 src/zk-everything/BabySNARK tutorial.md:31
#: tutorial.md:33 tutorial.md:35 tutorial.md:38
#: src/zk-everything/zk-learning-miles/KZG.md:83
#: src/zk-everything/zk-learning-miles/KZG.md:93
#: src/zk-everything/zk-learning-miles/KZG.md:96
#: src/zk-everything/zk-learning-miles/KZG.md:110
#: src/zk-everything/zk-learning-miles/KZG.md:114
#: src/zk-everything/zk-learning-miles/KZG.md:120
#: src/zk-everything/zk-learning-miles/KZG.md:145
#: src/zk-everything/zk-learning-miles/KZG.md:201
#: src/zk-everything/zk-learning-miles/KZG.md:203
#: src/zk-everything/zk-learning-miles/KZG.md:205
#: src/zk-everything/zk-learning-miles/KZG.md:207
#: src/zk-everything/zk-learning-miles/KZG.md:209
#: src/zk-everything/zk-learning-miles/KZG.md:211
#: src/zk-everything/zk-learning-miles/KZG.md:222
#: src/zk-everything/zk-learning-miles/KZG.md:226
#: src/zk-everything/zk-learning-miles/KZG.md:246
#: src/zk-everything/zk-learning-miles/KZG.md:248
#: src/zk-everything/zk-learning-miles/KZG.md:262
#: src/zk-everything/zk-learning-miles/KZG.md:270
#: src/zk-everything/zk-learning-miles/KZG.md:272
#: src/zk-everything/zk-learning-miles/KZG.md:274
#: src/zk-everything/zk-learning-miles/KZG.md:276
#: src/zk-everything/zk-learning-miles/KZG.md:317
#: src/zk-everything/zk-learning-miles/KZG.md:318
#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:42
#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:371 SNARKs.md:374 SNARKs.md:383 SNARKs.md:395 SNARKs.md:398
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:128
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:134
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:160
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:170
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:174
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:182
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:188
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:194
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:202
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:212
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:216
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:224
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:230
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:236
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:244
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:255
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:259
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:268
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:275
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:281
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:289
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:301
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:305
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:314
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:319
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:325
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:333
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:343
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:347
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:355
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:361
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:367
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:396
#: src/zk-everything/zk-everything-joe/Hyrax.md:108
#: src/zk-everything/zk-everything-joe/Hyrax.md:110
#: src/zk-everything/zk-everything-joe/Hyrax.md:116
#: src/zk-everything/zk-everything-joe/Hyrax.md:191
#: src/zk-everything/zk-everything-joe/Hyrax.md:198
#: src/zk-everything/zk-everything-joe/Spartan.md:236
#: src/zk-everything/zk-everything-joe/Spartan.md:242
#: src/zk-everything/zk-everything-joe/Spartan.md:246
#: src/zk-everything/zk-everything-joe/Spartan.md:254
#: src/zk-everything/zk-everything-joe/Spartan.md:257
#: src/zk-everything/zk-everything-joe/Spartan.md:264
#: src/zk-everything/zk-everything-joe/Spartan.md:268
#: src/zk-everything/zk-everything-joe/Spartan.md:275
#: src/zk-everything/zk-everything-joe/Spartan.md:278
#: src/zk-everything/zk-everything-joe/Spartan.md:312
#: src/zk-everything/zk-everything-joe/Spartan.md:319
#: src/zk-everything/zk-everything-joe/Spartan.md:323
#: src/zk-everything/zk-everything-joe/Spartan.md:353
#: src/zk-everything/zk-everything-joe/Spartan.md:355
#: src/zk-everything/zk-everything-joe/Spartan.md:394
#: src/zk-everything/zk-everything-joe/Spartan.md:406
#: src/zk-everything/zk-everything-joe/Spartan.md:411
#: src/zk-everything/zk-everything-joe/Spartan.md:415
#: src/zk-everything/zk-everything-joe/Spartan.md:422
#: src/zk-everything/zk-everything-joe/Spartan.md:428
#: src/zk-everything/zk-everything-joe/Spartan.md:434
#: src/zk-everything/zk-everything-joe/Spartan.md:436
#: src/zk-everything/zk-everything-joe/Spartan.md:450 src/public
#: goods/第二章.md:9 goods/第二章.md:10 goods/第二章.md:16
#: goods/第二章.md:18 goods/第二章.md:19 goods/第二章.md:20
#: goods/第二章.md:25 goods/第二章.md:26 goods/第二章.md:33
#: goods/第二章.md:41 goods/第二章.md:42 goods/第二章.md:44
#: goods/第二章.md:46 goods/第二章.md:48 goods/第二章.md:80
#: goods/第二章.md:103 goods/第二章.md:129 goods/4-Proving-System.md:53
#: goods/4-Proving-System.md:55 goods/4-Proving-System.md:56
#: goods/4-Proving-System.md:58 goods/4-Proving-System.md:60
#: goods/4-Proving-System.md:62 goods/4-Proving-System.md:107
#: goods/4-Proving-System.md:111 goods/4-Proving-System.md:124
#: goods/4-Proving-System.md:127 goods/4-Proving-System.md:129
#: goods/4-Proving-System.md:145 goods/4-Proving-System.md:146
#: goods/4-Proving-System.md:149 goods/4-Proving-System.md:155
#: goods/4-Proving-System.md:157 goods/4-Proving-System.md:169
#: goods/4-Proving-System.md:171 goods/4-Proving-System.md:173
#: goods/4-Proving-System.md:177
msgid "s"
msgstr "s"

#: src/plonk-intro-cn/plonk-lookup.md:109
msgid " ，它被定义为 "
msgstr " ，它被定义为 "

#: src/plonk-intro-cn/plonk-lookup.md:109
msgid "  上的重排，且向量元素的排列遵照 "
msgstr "  上的重排，且向量元素的排列遵照 "

#: src/plonk-intro-cn/plonk-lookup.md:109
msgid " 中各个元素出现的顺序。"
msgstr " 中各个元素出现的顺序。"

#: src/plonk-intro-cn/plonk-lookup.md:111
msgid "举例说明，假设 "
msgstr "举例说明，假设 "

#: src/plonk-intro-cn/plonk-lookup.md:111
msgid "，如果 "
msgstr "，如果 "

#: src/plonk-intro-cn/plonk-lookup.md:111
msgid "。可以看到，和 Halo2-lookup 中的 "
msgstr "。可以看到，和 Halo2-lookup 中的 "

#: src/plonk-intro-cn/plonk-lookup.md:111
msgid "一样， "
msgstr "一样， "

#: src/plonk-intro-cn/plonk-lookup.md:111
msgid " 中相等的元素被排在了一起。"
msgstr " 中相等的元素被排在了一起。"

#: src/plonk-intro-cn/plonk-lookup.md:113
msgid "如果向量 "
msgstr "如果向量 "

#: src/plonk-intro-cn/plonk-lookup.md:113
msgid "，那么就可以证明 "
msgstr "，那么就可以证明 "

#: src/plonk-intro-cn/plonk-lookup.md:115
msgid "第一个关键点是因为 "
msgstr "第一个关键点是因为 "

#: src/plonk-intro-cn/plonk-lookup.md:115
msgid " 中的查询记录是任意的，查询顺序并没有遵守 "
msgstr " 中的查询记录是任意的，查询顺序并没有遵守 "

#: src/plonk-intro-cn/plonk-lookup.md:115
msgid " 中的元素顺序。而通过辅助向量 "
msgstr " 中的元素顺序。而通过辅助向量 "

#: src/plonk-intro-cn/plonk-lookup.md:115
msgid " ，我们就可以把 "
msgstr " ，我们就可以把 "

#: src/plonk-intro-cn/plonk-lookup.md:115
msgid " 的查询记录进行重新排序，这有利于排查 "
msgstr " 的查询记录进行重新排序，这有利于排查 "

#: src/plonk-intro-cn/plonk-lookup.md:115
msgid " 中元素的合法性，确保每一个 "
msgstr " 中元素的合法性，确保每一个 "

#: src/plonk-intro-cn/plonk-lookup.md:115
msgid " 都出现在 "
msgstr " 都出现在 "

#: src/plonk-intro-cn/plonk-lookup.md:115
msgid " 中。但如何保证由 Prover 构造的 "
msgstr " 中。但如何保证由 Prover 构造的 "

#: src/plonk-intro-cn/plonk-lookup.md:115
msgid " 是按照 "
msgstr " 是按照 "

#: src/plonk-intro-cn/plonk-lookup.md:115
msgid " 的元素顺序进行排序的？Plookup 用了一个直接但巧妙的方法，考虑把 "
msgstr " 的元素顺序进行排序的？Plookup 用了一个直接但巧妙的方法，考虑把 "

#: src/plonk-intro-cn/plonk-lookup.md:115
msgid ""
" 中的每一个元素和他相邻下一个元素绑在一起，然后可以构成一个新的 Multiset；同"
"样，我们把 "
msgstr ""
" 中的每一个元素和他相邻下一个元素绑在一起，然后可以构成一个新的 Multiset；同"
"样，我们把 "

#: src/plonk-intro-cn/plonk-lookup.md:115
msgid ""
" 中的每一个元素与相邻下一个元素组成一个元组，并构成一个 Multiset；我们还要把 "
msgstr ""
" 中的每一个元素与相邻下一个元素组成一个元组，并构成一个 Multiset；我们还要把 "

#: src/plonk-intro-cn/plonk-lookup.md:115
msgid " 中的每一个元素和它自身构成一个二元组 Multiset。我们用 "
msgstr " 中的每一个元素和它自身构成一个二元组 Multiset。我们用 "

#: src/plonk-intro-cn/plonk-lookup.md:115
#: src/plonk-intro-cn/plonk-lookup.md:117
#: src/plonk-intro-cn/plonk-lookup.md:119
#: src/plonk-intro-cn/plonk-lookup.md:121
#: src/plonk-intro-cn/plonk-lookup.md:125
#: src/plonk-intro-cn/plonk-lookup.md:127
#: src/plonk-intro-cn/plonk-lookup.md:129
#: src/plonk-intro-cn/plonk-lookup.md:131
#: src/plonk-intro-cn/plonk-lookup.md:133
#: src/plonk-intro-cn/plonk-lookup.md:135
#: src/plonk-intro-cn/plonk-lookup.md:137
#: src/plonk-intro-cn/plonk-lookup.md:139
#: src/plonk-intro-cn/plonk-lookup.md:145
#: src/plonk-intro-cn/plonk-lookup.md:153
#: src/plonk-intro-cn/plonk-lookup.md:220
#: src/zk-snarks/4-Construction-Properties.md:133
#: src/zk-snarks/4-Construction-Properties.md:134
#: src/zk-snarks/4-Construction-Properties.md:170
#: src/zk-snarks/4-Construction-Properties.md:171
#: src/zk-snarks/4-Construction-Properties.md:172
msgid "{("
msgstr "{("

#: src/plonk-intro-cn/plonk-lookup.md:115
#: src/plonk-intro-cn/plonk-lookup.md:117
#: src/plonk-intro-cn/plonk-lookup.md:119
#: src/plonk-intro-cn/plonk-lookup.md:121
#: src/plonk-intro-cn/plonk-lookup.md:125
#: src/plonk-intro-cn/plonk-lookup.md:127
#: src/plonk-intro-cn/plonk-lookup.md:129
#: src/plonk-intro-cn/plonk-lookup.md:131
#: src/plonk-intro-cn/plonk-lookup.md:133
#: src/plonk-intro-cn/plonk-lookup.md:135
#: src/plonk-intro-cn/plonk-lookup.md:137
#: src/plonk-intro-cn/plonk-lookup.md:139
#: src/plonk-intro-cn/plonk-lookup.md:153
#: src/plonk-intro-cn/plonk-lookup.md:220
#: src/zk-snarks/4-Construction-Properties.md:133
#: src/zk-snarks/4-Construction-Properties.md:134
#: src/zk-snarks/4-Construction-Properties.md:170
#: src/zk-snarks/4-Construction-Properties.md:171
#: src/zk-snarks/4-Construction-Properties.md:172
#: src/zk-snarks/4-Construction-Properties.md:221 src/zk-everything/BabySNARK
#: tutorial.md:124 tutorial.md:125 tutorial.md:126
msgid ")}"
msgstr ")}"

#: src/plonk-intro-cn/plonk-lookup.md:115
msgid " 来表示这三个新的 Multiset，并证明它们满足一定的关系，从而保证 "
msgstr " 来表示这三个新的 Multiset，并证明它们满足一定的关系，从而保证 "

#: src/plonk-intro-cn/plonk-lookup.md:115
msgid " 排序的正确性。"
msgstr " 排序的正确性。"

#: src/plonk-intro-cn/plonk-lookup.md:119
msgid ""
"这个方法与 Permutation Argument 的基本思想非常类似。回忆下，我们在 "
"Permutation Argument 中，利用了 "
msgstr ""
"这个方法与 Permutation Argument 的基本思想非常类似。回忆下，我们在 "
"Permutation Argument 中，利用了 "

#: src/plonk-intro-cn/plonk-lookup.md:119
msgid " 绑定元素和其位置的「二元组」的 Multiset 来保证任一个 "
msgstr " 绑定元素和其位置的「二元组」的 Multiset 来保证任一个 "

#: src/plonk-intro-cn/plonk-lookup.md:119
msgid " 都会出现在位置 "
msgstr " 都会出现在位置 "

#: src/plonk-intro-cn/plonk-lookup.md:119
msgid " 上；通过与另一个二元组 Multiset "
msgstr " 上；通过与另一个二元组 Multiset "

#: src/plonk-intro-cn/plonk-lookup.md:119
msgid " 的相等，可以证明 "
msgstr " 的相等，可以证明 "

#: src/plonk-intro-cn/plonk-lookup.md:119
msgid " 满足置换函数 "
msgstr " 满足置换函数 "

#: src/plonk-intro-cn/plonk-lookup.md:119
msgid "。比如下面这个置换函数为奇偶互换的例子："
msgstr "。比如下面这个置换函数为奇偶互换的例子："

#: src/plonk-intro-cn/plonk-lookup.md:123
msgid "假设两个向量 "
msgstr "假设两个向量 "

#: src/plonk-intro-cn/plonk-lookup.md:123
msgid " ，如果它们满足上面的 Multiset 相等关系，我们可以知 "
msgstr " ，如果它们满足上面的 Multiset 相等关系，我们可以知 "

#: src/plonk-intro-cn/plonk-lookup.md:123
msgid "，满足奇偶互换的关系。"
msgstr "，满足奇偶互换的关系。"

#: src/plonk-intro-cn/plonk-lookup.md:125
msgid "另一个关键点是如何保证 "
msgstr "另一个关键点是如何保证 "

#: src/plonk-intro-cn/plonk-lookup.md:125
msgid " 中的元素都在 "
msgstr " 中的元素都在 "

#: src/plonk-intro-cn/plonk-lookup.md:125
msgid " 中出现？这个问题被归结到一个新问题，即 "
msgstr " 中出现？这个问题被归结到一个新问题，即 "

#: src/plonk-intro-cn/plonk-lookup.md:125
msgid " 中那些相邻的重复元素一定来自于 "
msgstr " 中那些相邻的重复元素一定来自于 "

#: src/plonk-intro-cn/plonk-lookup.md:125
msgid "，假如 "
msgstr "，假如 "

#: src/plonk-intro-cn/plonk-lookup.md:125
msgid " 中有 "
msgstr " 中有 "

#: src/plonk-intro-cn/plonk-lookup.md:125
msgid " 个重复元素，那么我们可以要求其中第一个来自于 "
msgstr " 个重复元素，那么我们可以要求其中第一个来自于 "

#: src/plonk-intro-cn/plonk-lookup.md:125
msgid "，剩下的 "
msgstr "，剩下的 "

#: src/plonk-intro-cn/plonk-lookup.md:125
msgid " 个元素来自于 "
msgstr " 个元素来自于 "

#: src/plonk-intro-cn/plonk-lookup.md:125
msgid " 中一旦出现了一个不在 "
msgstr " 中一旦出现了一个不在 "

#: src/plonk-intro-cn/plonk-lookup.md:125
msgid " 中的元素（假设为 "
msgstr " 中的元素（假设为 "

#: src/plonk-intro-cn/plonk-lookup.md:125
msgid "），那么因为 "
msgstr "），那么因为 "

#: src/plonk-intro-cn/plonk-lookup.md:125
msgid " 的重排，那么 "
msgstr " 的重排，那么 "

#: src/plonk-intro-cn/plonk-lookup.md:125
msgid " 中一定会出现 "
msgstr " 中一定会出现 "

#: src/plonk-intro-cn/plonk-lookup.md:125
msgid "（假设 "
msgstr "（假设 "

#: src/plonk-intro-cn/plonk-lookup.md:125
msgid "），这时在 "
msgstr "），这时在 "

#: src/plonk-intro-cn/plonk-lookup.md:125
msgid " 这样两个元素，它们无法出现在 "
msgstr " 这样两个元素，它们无法出现在 "

#: src/plonk-intro-cn/plonk-lookup.md:125
msgid " 这个 Multiset中，也不会出现在 "
msgstr " 这个 Multiset中，也不会出现在 "

#: src/plonk-intro-cn/plonk-lookup.md:127
msgid "举几个例子，假设 "
msgstr "举几个例子，假设 "

#: src/plonk-intro-cn/plonk-lookup.md:127
msgid "， 如果 "
msgstr "， 如果 "

#: src/plonk-intro-cn/plonk-lookup.md:127
msgid " 向量在各个位置上都相等。"
msgstr " 向量在各个位置上都相等。"

#: src/plonk-intro-cn/plonk-lookup.md:129
msgid "假设增加一条查询记录，即 "
msgstr "假设增加一条查询记录，即 "

#: src/plonk-intro-cn/plonk-lookup.md:129
msgid "，这时候  "
msgstr "，这时候  "

#: src/plonk-intro-cn/plonk-lookup.md:129
msgid " 只有唯一的表达， "
msgstr " 只有唯一的表达， "

#: src/plonk-intro-cn/plonk-lookup.md:131
#: src/plonk-intro-cn/plonk-lookup.md:133 src/zk-everything/BabySNARK
#: tutorial.md:129
msgid "假设 "
msgstr "假设 "

#: src/plonk-intro-cn/plonk-lookup.md:131
msgid " 为不出现在 "
msgstr " 为不出现在 "

#: src/plonk-intro-cn/plonk-lookup.md:131
msgid " 中的元素，那么 "
msgstr " 中的元素，那么 "

#: src/plonk-intro-cn/plonk-lookup.md:131
msgid " 一定没有办法塞入到 S 中，因为在 "
msgstr " 一定没有办法塞入到 S 中，因为在 "

#: src/plonk-intro-cn/plonk-lookup.md:131
msgid " 中，和 "
msgstr " 中，和 "

#: src/plonk-intro-cn/plonk-lookup.md:131
msgid " 相邻的元素 "
msgstr " 相邻的元素 "

#: src/plonk-intro-cn/plonk-lookup.md:131
msgid "。因此 "
msgstr "。因此 "

#: src/plonk-intro-cn/plonk-lookup.md:133
msgid " 也只有唯一的表达， "
msgstr " 也只有唯一的表达， "

#: src/plonk-intro-cn/plonk-lookup.md:133
msgid "，同样可以检验： "
msgstr "，同样可以检验： "

#: src/plonk-intro-cn/plonk-lookup.md:135
msgid "更形式化一些，我们可以用数学归纳法推导：先从 "
msgstr "更形式化一些，我们可以用数学归纳法推导：先从 "

#: src/plonk-intro-cn/plonk-lookup.md:135
msgid " 为空开始推理， "
msgstr " 为空开始推理， "

#: src/plonk-intro-cn/plonk-lookup.md:135
msgid "∅"
msgstr "∅"

#: src/plonk-intro-cn/plonk-lookup.md:135
msgid " 。这样我们只要检查 "
msgstr " 。这样我们只要检查 "

#: src/plonk-intro-cn/plonk-lookup.md:135
msgid " 满足 Multiset 意义上的相等，就可以满足 "
msgstr " 满足 Multiset 意义上的相等，就可以满足 "

#: src/plonk-intro-cn/plonk-lookup.md:135
msgid "，且 "
msgstr "，且 "

#: src/plonk-intro-cn/plonk-lookup.md:137
msgid "现在看归纳步，假设 "
msgstr "现在看归纳步，假设 "

#: src/plonk-intro-cn/plonk-lookup.md:137
#: src/plonk-intro-cn/plonk-lookup.md:139
msgid "，如果我们在 "
msgstr "，如果我们在 "

#: src/plonk-intro-cn/plonk-lookup.md:137
msgid " 中添加一个新元素 "
msgstr " 中添加一个新元素 "

#: src/plonk-intro-cn/plonk-lookup.md:137
msgid " ，且 "
msgstr " ，且 "

#: src/plonk-intro-cn/plonk-lookup.md:137
msgid "，那么在 "
msgstr "，那么在 "

#: src/plonk-intro-cn/plonk-lookup.md:137
msgid " 中会比 "
msgstr " 中会比 "

#: src/plonk-intro-cn/plonk-lookup.md:137
msgid " 额外多一个元素 "
msgstr " 额外多一个元素 "

#: src/plonk-intro-cn/plonk-lookup.md:137
msgid " ，那么重排向量  "
msgstr " ，那么重排向量  "

#: src/plonk-intro-cn/plonk-lookup.md:137
msgid " 中一定包含了相邻的两个 "
msgstr " 中一定包含了相邻的两个 "

#: src/plonk-intro-cn/plonk-lookup.md:137
msgid "，其中一个来自 "
msgstr "，其中一个来自 "

#: src/plonk-intro-cn/plonk-lookup.md:137
msgid "，另一个来自于 "
msgstr "，另一个来自于 "

#: src/plonk-intro-cn/plonk-lookup.md:137
msgid "。因此，我们可以得出结论： "
msgstr "。因此，我们可以得出结论： "

#: src/plonk-intro-cn/plonk-lookup.md:139
msgid "另一种情况， 假设 "
msgstr "另一种情况， 假设 "

#: src/plonk-intro-cn/plonk-lookup.md:139
msgid " 添加的新元素 "
msgstr " 添加的新元素 "

#: src/plonk-intro-cn/plonk-lookup.md:139
msgid "，即是一条违法查询，假设为 "
msgstr "，即是一条违法查询，假设为 "

#: src/plonk-intro-cn/plonk-lookup.md:139
msgid " 中存在与 "
msgstr " 中存在与 "

#: src/plonk-intro-cn/plonk-lookup.md:139
msgid " 相邻的两个元素， "
msgstr " 相邻的两个元素， "

#: src/plonk-intro-cn/plonk-lookup.md:139
msgid "。它们构成了 "
msgstr "。它们构成了 "

#: src/plonk-intro-cn/plonk-lookup.md:139
msgid " 中的两个异类元素 "
msgstr " 中的两个异类元素 "

#: src/plonk-intro-cn/plonk-lookup.md:139
msgid "，导致 "
msgstr "，导致 "

#: src/plonk-intro-cn/plonk-lookup.md:141
msgid "到此为止，我们已经可以确信，通过验证 "
msgstr "到此为止，我们已经可以确信，通过验证 "

#: src/plonk-intro-cn/plonk-lookup.md:141
msgid " 相等就可以判定 "
msgstr " 相等就可以判定 "

#: src/plonk-intro-cn/plonk-lookup.md:141
msgid " 是正确的重排，并且 "
msgstr " 是正确的重排，并且 "

#: src/plonk-intro-cn/plonk-lookup.md:141
msgid " 中的每一个元素都出现在 "
msgstr " 中的每一个元素都出现在 "

#: src/plonk-intro-cn/plonk-lookup.md:141
msgid " 中。接下来我们把这个问题转换成多项式之间的约束关系。"
msgstr " 中。接下来我们把这个问题转换成多项式之间的约束关系。"

#: src/plonk-intro-cn/plonk-lookup.md:143
msgid "首先 Prover 借助 Verifier 提供的挑战数 "
msgstr "首先 Prover 借助 Verifier 提供的挑战数 "

#: src/plonk-intro-cn/plonk-lookup.md:143
msgid "，把 "
msgstr "，把 "

#: src/plonk-intro-cn/plonk-lookup.md:143
msgid " 中的每一个二元组元素进行「折叠」，转换成单值。这样新约束等式为："
msgstr " 中的每一个二元组元素进行「折叠」，转换成单值。这样新约束等式为："

#: src/plonk-intro-cn/plonk-lookup.md:147
msgid "然后 Prover 再借助 Verifier 提供的一个挑战数 "
msgstr "然后 Prover 再借助 Verifier 提供的一个挑战数 "

#: src/plonk-intro-cn/plonk-lookup.md:147
msgid "，把上面的 Multiset Equality Argument 归结到 Grand Product Argument："
msgstr "，把上面的 Multiset Equality Argument 归结到 Grand Product Argument："

#: src/plonk-intro-cn/plonk-lookup.md:149
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:209
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:213
#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:298 SNARKs.md:301 SNARKs.md:302
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:152
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:162
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:170
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:204
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:212
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:246
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:255
#: src/zk-everything/zk-everything-joe/Spartan.md:115
#: src/zk-everything/zk-everything-joe/Spartan.md:343
#: src/zk-everything/zk-everything-joe/Spartan.md:349
#: src/zk-everything/zk-everything-joe/Spartan.md:450
msgid "(("
msgstr "(("

#: src/plonk-intro-cn/plonk-lookup.md:151
msgid ""
"不过这里请注意的是，在 Plookup 论文方案中，并没有采用上面的证明转换形式。而是"
"调换了 "
msgstr ""
"不过这里请注意的是，在 Plookup 论文方案中，并没有采用上面的证明转换形式。而是"
"调换了 "

#: src/plonk-intro-cn/plonk-lookup.md:151
msgid " 的使用顺序："
msgstr " 的使用顺序："

#: src/plonk-intro-cn/plonk-lookup.md:155
msgid "归结后的 Grand Product 约束等式为："
msgstr "归结后的 Grand Product 约束等式为："

#: src/plonk-intro-cn/plonk-lookup.md:159
msgid ""
"注：个人认为，上述两种证明转换形式没有本质上的区别。为了方便理解论文，我们后"
"文遵从 Plookup 原论文的方式。"
msgstr ""
"注：个人认为，上述两种证明转换形式没有本质上的区别。为了方便理解论文，我们后"
"文遵从 Plookup 原论文的方式。"

#: src/plonk-intro-cn/plonk-lookup.md:161
msgid "接下来，我们要对向量进行多项式编码，但是这里会遇到一个新问题。即 "
msgstr "接下来，我们要对向量进行多项式编码，但是这里会遇到一个新问题。即 "

#: src/plonk-intro-cn/plonk-lookup.md:161
msgid " 多项式的次数会超出 "
msgstr " 多项式的次数会超出 "

#: src/plonk-intro-cn/plonk-lookup.md:161
msgid " 的次数或 "
msgstr " 的次数或 "

#: src/plonk-intro-cn/plonk-lookup.md:161
msgid " 的次数，特别当 "
msgstr " 的次数，特别当 "

#: src/plonk-intro-cn/plonk-lookup.md:161 src/zk-everything/BabySNARK
#: tutorial.md:140
msgid " 或 "
msgstr " 或 "

#: src/plonk-intro-cn/plonk-lookup.md:161
msgid " 的长度接近或者等于 "
msgstr " 的长度接近或者等于 "

#: src/plonk-intro-cn/plonk-lookup.md:161
msgid " 的大小， "
msgstr " 的大小， "

#: src/plonk-intro-cn/plonk-lookup.md:161
msgid "  的次数可能超出 "
msgstr "  的次数可能超出 "

#: src/plonk-intro-cn/plonk-lookup.md:161
msgid " 的大小。Plookup 的解决方式是将 "
msgstr " 的大小。Plookup 的解决方式是将 "

#: src/plonk-intro-cn/plonk-lookup.md:161
msgid " 拆成两半， "
msgstr " 拆成两半， "

#: src/plonk-intro-cn/plonk-lookup.md:161
msgid "，但是 "
msgstr "，但是 "

#: src/plonk-intro-cn/plonk-lookup.md:161
msgid " 的最后一个元素要等于 "
msgstr " 的最后一个元素要等于 "

#: src/plonk-intro-cn/plonk-lookup.md:161
msgid " 的第一个元素："
msgstr " 的第一个元素："

#: src/plonk-intro-cn/plonk-lookup.md:165
msgid "这样做的目的是，确保能在两个向量中描述 "
msgstr "这样做的目的是，确保能在两个向量中描述 "

#: src/plonk-intro-cn/plonk-lookup.md:165
msgid " 中相邻两个元素的绑定关系。比如 "
msgstr " 中相邻两个元素的绑定关系。比如 "

#: src/plonk-intro-cn/plonk-lookup.md:165
msgid " ，可以看出他们头尾相接。"
msgstr " ，可以看出他们头尾相接。"

#: src/plonk-intro-cn/plonk-lookup.md:167
msgid " 的长度最长也只能是 "
msgstr " 的长度最长也只能是 "

#: src/plonk-intro-cn/plonk-lookup.md:167
msgid "，但如果  "
msgstr "，但如果  "

#: src/plonk-intro-cn/plonk-lookup.md:167
msgid " 要按照 "
msgstr " 要按照 "

#: src/plonk-intro-cn/plonk-lookup.md:167
msgid " 对齐，那么 "
msgstr " 对齐，那么 "

#: src/plonk-intro-cn/plonk-lookup.md:167
msgid " 的长度就不够了（无法在长度为 "
msgstr " 的长度就不够了（无法在长度为 "

#: src/plonk-intro-cn/plonk-lookup.md:167
msgid " 的乘法子群上编码成多项式）。为了解决这个问题，Plookup 选择把 "
msgstr " 的乘法子群上编码成多项式）。为了解决这个问题，Plookup 选择把 "

#: src/plonk-intro-cn/plonk-lookup.md:167
msgid " 的有效长度限制在 "
msgstr " 的有效长度限制在 "

#: src/plonk-intro-cn/plonk-lookup.md:167
msgid "，所谓有效长度是指， "
msgstr "，所谓有效长度是指， "

#: src/plonk-intro-cn/plonk-lookup.md:167
msgid " 的实际长度为 "
msgstr " 的实际长度为 "

#: src/plonk-intro-cn/plonk-lookup.md:167
msgid "，但是其最后一条查询记录并不考虑其合法性。"
msgstr "，但是其最后一条查询记录并不考虑其合法性。"

#: src/plonk-intro-cn/plonk-lookup.md:169
msgid " 向量可以拆成两个长度为 "
msgstr " 向量可以拆成两个长度为 "

#: src/plonk-intro-cn/plonk-lookup.md:169
msgid " 的向量，其中一半 "
msgstr " 的向量，其中一半 "

#: src/plonk-intro-cn/plonk-lookup.md:169
msgid "，另一半 "
msgstr "，另一半 "

#: src/plonk-intro-cn/plonk-lookup.md:171
msgid "接下来 Prover 要引入 Accumulator 辅助向量 "
msgstr "接下来 Prover 要引入 Accumulator 辅助向量 "

#: src/plonk-intro-cn/plonk-lookup.md:171
msgid " 来证明 Grand Product："
msgstr " 来证明 Grand Product："

#: src/plonk-intro-cn/plonk-lookup.md:175
msgid "我们仍然看下这样一个例子： "
msgstr "我们仍然看下这样一个例子： "

#: src/plonk-intro-cn/plonk-lookup.md:175
msgid "，拆成两个头尾相接的向量： "
msgstr "，拆成两个头尾相接的向量： "

#: src/plonk-intro-cn/plonk-lookup.md:175
msgid " 。那么，我们可以把相邻元素构成的二元组向量写出来："
msgstr " 。那么，我们可以把相邻元素构成的二元组向量写出来："

#: src/plonk-intro-cn/plonk-lookup.md:178
msgid ""
"\\\\begin{split} F &= (f_i, f_i) & = & {(2,2), (4,4), (4,4)}\\\\ T &=(t_i, "
"t_i) & = & {(1,2), (2,3), (3,4)}\\\\ S^{lo} &= (s^{lo}\\_i, s^{lo}\\_i) & = "
"& {(1,2), (2,2), (2,3)}\\\\ S^{hi} &= (s^{hi}\\_i, s^{hi}\\_i) & = & {(3,4), "
"(4,4), (4,4)}\\\\ \\\\end{split}"
msgstr ""
"\\\\begin{split} F &= (f_i, f_i) & = & {(2,2), (4,4), (4,4)}\\\\ T &=(t_i, "
"t_i) & = & {(1,2), (2,3), (3,4)}\\\\ S^{lo} &= (s^{lo}\\_i, s^{lo}\\_i) & = "
"& {(1,2), (2,2), (2,3)}\\\\ S^{hi} &= (s^{hi}\\_i, s^{hi}\\_i) & = & {(3,4), "
"(4,4), (4,4)}\\\\ \\\\end{split}"

#: src/plonk-intro-cn/plonk-lookup.md:186
#: src/plonk-intro-cn/plonk-lookup.md:222
msgid "容易检验，他们满足下面的关系："
msgstr "容易检验，他们满足下面的关系："

#: src/plonk-intro-cn/plonk-lookup.md:190
msgid "于是，利用一个辅助函数 "
msgstr "于是，利用一个辅助函数 "

#: src/plonk-intro-cn/plonk-lookup.md:190
msgid "，我们定义 "
msgstr "，我们定义 "

#: src/plonk-intro-cn/plonk-lookup.md:194
msgid "对 "
msgstr "对 "

#: src/plonk-intro-cn/plonk-lookup.md:194
msgid " 进行编码，我们可以得到 "
msgstr " 进行编码，我们可以得到 "

#: src/plonk-intro-cn/plonk-lookup.md:194
msgid " 多项式，它应该满足下面三条约束："
msgstr " 多项式，它应该满足下面三条约束："

#: src/plonk-intro-cn/plonk-lookup.md:198
msgid "此外，根据 "
msgstr "此外，根据 "

#: src/plonk-intro-cn/plonk-lookup.md:198
msgid " 的递推关系， "
msgstr " 的递推关系， "

#: src/plonk-intro-cn/plonk-lookup.md:198
msgid " 还要满足下面的约束："
msgstr " 还要满足下面的约束："

#: src/plonk-intro-cn/plonk-lookup.md:202
msgid "总共有四条多项式约束，这里略去完整的协议。"
msgstr "总共有四条多项式约束，这里略去完整的协议。"

#: src/plonk-intro-cn/plonk-lookup.md:204
msgid "Plonkup 的优化"
msgstr "Plonkup 的优化"

#: src/plonk-intro-cn/plonk-lookup.md:206
msgid ""
"在论文  Plonkup 论文中给出了一个简化方法，可以去除一个多项式约束。在 Plookup "
"方案中， "
msgstr ""
"在论文  Plonkup 论文中给出了一个简化方法，可以去除一个多项式约束。在 Plookup "
"方案中， "

#: src/plonk-intro-cn/plonk-lookup.md:206
msgid "  向量被拆分成两个向量， "
msgstr "  向量被拆分成两个向量， "

#: src/plonk-intro-cn/plonk-lookup.md:206
msgid " ，但要要求这两个向量头尾相接。"
msgstr " ，但要要求这两个向量头尾相接。"

#: src/plonk-intro-cn/plonk-lookup.md:208
msgid "Plonkup 给出了一种新的拆分方案，即按照 "
msgstr "Plonkup 给出了一种新的拆分方案，即按照 "

#: src/plonk-intro-cn/plonk-lookup.md:208
msgid " 的奇偶项进行拆分，拆成 "
msgstr " 的奇偶项进行拆分，拆成 "

#: src/plonk-intro-cn/plonk-lookup.md:208
#: src/plonk-intro-cn/plonk-lookup.md:210
#: src/plonk-intro-cn/plonk-lookup.md:212
#: src/plonk-intro-cn/plonk-lookup.md:214
#: src/plonk-intro-cn/plonk-lookup.md:218
#: src/plonk-intro-cn/plonk-lookup.md:224
#: src/plonk-intro-cn/plonk-lookup.md:238
#: src/plonk-intro-cn/plonk-lookup.md:279
#: src/plonk-intro-cn/plonk-lookup.md:297
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:272
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:58
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:64
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:87
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:134
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:145
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:152
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:396
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:448
#: src/zk-everything/zk-everything-joe/Hyrax.md:58
#: src/zk-everything/zk-everything-joe/Hyrax.md:64
#: src/zk-everything/zk-everything-joe/Hyrax.md:70
#: src/zk-everything/zk-everything-joe/Hyrax.md:98
#: src/zk-everything/zk-everything-joe/Hyrax.md:191
#: src/zk-everything/zk-everything-joe/Spartan.md:110
#: src/zk-everything/zk-everything-joe/Spartan.md:122
#: src/zk-everything/zk-everything-joe/Spartan.md:126
#: src/zk-everything/zk-everything-joe/Spartan.md:142
#: src/zk-everything/zk-everything-joe/Spartan.md:147
#: src/zk-everything/zk-everything-joe/Spartan.md:154
#: src/zk-everything/zk-everything-joe/Spartan.md:236
#: src/zk-everything/zk-everything-joe/Spartan.md:242
#: src/zk-everything/zk-everything-joe/Spartan.md:246
#: src/zk-everything/zk-everything-joe/Spartan.md:254
#: src/zk-everything/zk-everything-joe/Spartan.md:257
#: src/zk-everything/zk-everything-joe/Spartan.md:264
#: src/zk-everything/zk-everything-joe/Spartan.md:268
#: src/zk-everything/zk-everything-joe/Spartan.md:275
#: src/zk-everything/zk-everything-joe/Spartan.md:278
#: src/zk-everything/zk-everything-joe/Spartan.md:334
#: src/zk-everything/zk-everything-joe/Spartan.md:339
#: src/zk-everything/zk-everything-joe/Spartan.md:346
#: src/zk-everything/zk-everything-joe/Spartan.md:350
#: src/zk-everything/zk-everything-joe/Spartan.md:360
#: src/zk-everything/zk-everything-joe/Spartan.md:361
msgid "dd"
msgstr "dd"

#: src/plonk-intro-cn/plonk-lookup.md:212
msgid "注意，这里不再需要限制 "
msgstr "注意，这里不再需要限制 "

#: src/plonk-intro-cn/plonk-lookup.md:212
msgid "，而是可以到 "
msgstr "，而是可以到 "

#: src/plonk-intro-cn/plonk-lookup.md:212
msgid "，这样 "
msgstr "，这样 "

#: src/plonk-intro-cn/plonk-lookup.md:212
msgid " 的长度可以到 "
msgstr " 的长度可以到 "

#: src/plonk-intro-cn/plonk-lookup.md:212
msgid "，拆分成两个长度为 "
msgstr "，拆分成两个长度为 "

#: src/plonk-intro-cn/plonk-lookup.md:212
msgid " 的向量，之所以可以去除这个限制，是因为 "
msgstr " 的向量，之所以可以去除这个限制，是因为 "

#: src/plonk-intro-cn/plonk-lookup.md:212
msgid " 之间的关系可以在 "
msgstr " 之间的关系可以在 "

#: src/plonk-intro-cn/plonk-lookup.md:212
msgid " 回卷到起始位置，这样只需要要求 "
msgstr " 回卷到起始位置，这样只需要要求 "

#: src/plonk-intro-cn/plonk-lookup.md:212
msgid " 即可。  "
msgstr " 即可。  "

#: src/plonk-intro-cn/plonk-lookup.md:212
msgid " 向量可以重新定义为："
msgstr " 向量可以重新定义为："

#: src/plonk-intro-cn/plonk-lookup.md:216
msgid "我们可以举一个简单的例子：假设 "
msgstr "我们可以举一个简单的例子：假设 "

#: src/plonk-intro-cn/plonk-lookup.md:220
msgid "even "
msgstr "even "

#: src/plonk-intro-cn/plonk-lookup.md:220
msgid "odd "
msgstr "odd "

#: src/plonk-intro-cn/plonk-lookup.md:226
msgid "我们也可以通过定义 "
msgstr "我们也可以通过定义 "

#: src/plonk-intro-cn/plonk-lookup.md:226
msgid " ，并仔细检查每一项，确认只需要约束 "
msgstr " ，并仔细检查每一项，确认只需要约束 "

#: src/plonk-intro-cn/plonk-lookup.md:226
msgid " 就可以约束 "
msgstr " 就可以约束 "

#: src/plonk-intro-cn/plonk-lookup.md:230
msgid "这里辅助函数 "
msgstr "这里辅助函数 "

#: src/plonk-intro-cn/plonk-lookup.md:232
msgid "于是多项式 "
msgstr "于是多项式 "

#: src/plonk-intro-cn/plonk-lookup.md:232
msgid " 只需要满足如下两条约束："
msgstr " 只需要满足如下两条约束："

#: src/plonk-intro-cn/plonk-lookup.md:236
msgid "还有"
msgstr "还有"

#: src/plonk-intro-cn/plonk-lookup.md:240
msgid "多列表格与多表格扩展"
msgstr "多列表格与多表格扩展"

#: src/plonk-intro-cn/plonk-lookup.md:242
msgid ""
"通常查询表是一个多列的表，比如一个 8bit-XOR 计算表是一个三列的表。对于 "
"Plookup 方案与 Halo2-lookup 方案，我们直接可以通过随机挑战数来把一个多列表格"
"折叠成一个单列表格。"
msgstr ""
"通常查询表是一个多列的表，比如一个 8bit-XOR 计算表是一个三列的表。对于 "
"Plookup 方案与 Halo2-lookup 方案，我们直接可以通过随机挑战数来把一个多列表格"
"折叠成一个单列表格。"

#: src/plonk-intro-cn/plonk-lookup.md:244
msgid "假如计算表格为 "
msgstr "假如计算表格为 "

#: src/plonk-intro-cn/plonk-lookup.md:244
msgid "，那么相应的查询记录也应该是个三列的表格，记为 "
msgstr "，那么相应的查询记录也应该是个三列的表格，记为 "

#: src/plonk-intro-cn/plonk-lookup.md:244
msgid "，对所有的 "
msgstr "，对所有的 "

#: src/plonk-intro-cn/plonk-lookup.md:244
msgid "都成立，那么 "
msgstr "都成立，那么 "

#: src/plonk-intro-cn/plonk-lookup.md:244
msgid " 是一个合法的查询记录。 通过向 Verifier 要一个随机挑战数 "
msgstr " 是一个合法的查询记录。 通过向 Verifier 要一个随机挑战数 "

#: src/plonk-intro-cn/plonk-lookup.md:245
#: src/plonk-intro-cn/plonk-lookup.md:247
#: src/plonk-intro-cn/plonk-lookup.md:251
#: src/plonk-intro-cn/plonk-lookup.md:271
#: src/plonk-intro-cn/plonk-lookup.md:273
#: src/plonk-intro-cn/plonk-lookup.md:275
#: src/plonk-intro-cn/plonk-lookup.md:304
msgid "η"
msgstr "η"

#: src/plonk-intro-cn/plonk-lookup.md:245
msgid "，我们可以把计算表格横向折叠起来："
msgstr "，我们可以把计算表格横向折叠起来："

#: src/plonk-intro-cn/plonk-lookup.md:249
msgid "同样，Prover 在证明过程中，也将查询记录横向折叠起来："
msgstr "同样，Prover 在证明过程中，也将查询记录横向折叠起来："

#: src/plonk-intro-cn/plonk-lookup.md:253
msgid ""
"接下来，Prover 和 Verifier 可以利用单列表格查询协议（ Plookup 协议或 Halo2-"
"lookup 协议）完成证明过程。"
msgstr ""
"接下来，Prover 和 Verifier 可以利用单列表格查询协议（ Plookup 协议或 Halo2-"
"lookup 协议）完成证明过程。"

#: src/plonk-intro-cn/plonk-lookup.md:255
msgid ""
"如果存在多张不同的表格，那么可以给这些表格增加公开的一列，用来标记表格编号，"
"这样可以把多表格视为增加一列的多列的单一表格。"
msgstr ""
"如果存在多张不同的表格，那么可以给这些表格增加公开的一列，用来标记表格编号，"
"这样可以把多表格视为增加一列的多列的单一表格。"

#: src/plonk-intro-cn/plonk-lookup.md:257
msgid "与 Plonk 协议的整合"
msgstr "与 Plonk 协议的整合"

#: src/plonk-intro-cn/plonk-lookup.md:259
msgid "由于计算表格 "
msgstr "由于计算表格 "

#: src/plonk-intro-cn/plonk-lookup.md:259
msgid ""
" 是一个预定义的多列表格，因此它可以在 Preprocessing 阶段进行承诺计算，并把这"
"些表格的承诺作为后续协议交互的公开输入。"
msgstr ""
" 是一个预定义的多列表格，因此它可以在 Preprocessing 阶段进行承诺计算，并把这"
"些表格的承诺作为后续协议交互的公开输入。"

#: src/plonk-intro-cn/plonk-lookup.md:261
msgid "在 Plonk 协议中，因为我们把表格的查询视为一种特殊的门，因此查询记录 "
msgstr "在 Plonk 协议中，因为我们把表格的查询视为一种特殊的门，因此查询记录 "

#: src/plonk-intro-cn/plonk-lookup.md:261
msgid " 本质上正是 "
msgstr " 本质上正是 "

#: src/plonk-intro-cn/plonk-lookup.md:261
msgid " 的折叠。为了区分「查询门」和「算术门」，我们还需要增加一个选择向量 "
msgstr " 的折叠。为了区分「查询门」和「算术门」，我们还需要增加一个选择向量 "

#: src/plonk-intro-cn/plonk-lookup.md:261
msgid "，标记 Witness table 中的某一行是算术门，还是查询门。"
msgstr "，标记 Witness table 中的某一行是算术门，还是查询门。"

#: src/plonk-intro-cn/plonk-lookup.md:263
msgid ""
"下面我们按照 Plonkup 论文中的协议，大概描述下如何将 Lookup Argument 整合进 "
"Plonk 协议。"
msgstr ""
"下面我们按照 Plonkup 论文中的协议，大概描述下如何将 Lookup Argument 整合进 "
"Plonk 协议。"

#: src/plonk-intro-cn/plonk-lookup.md:265
msgid "**预处理**：Prover 和 Verifier 构造 "
msgstr "**预处理**：Prover 和 Verifier 构造 "

#: src/plonk-intro-cn/plonk-lookup.md:271
msgid "第二步：Verifier 发送随机数 "
msgstr "第二步：Verifier 发送随机数 "

#: src/plonk-intro-cn/plonk-lookup.md:271
msgid "，用以折叠表格"
msgstr "，用以折叠表格"

#: src/plonk-intro-cn/plonk-lookup.md:273
msgid "第三步：Prover 构造并发送 "
msgstr "第三步：Prover 构造并发送 "

#: src/plonk-intro-cn/plonk-lookup.md:273
#: src/plonk-intro-cn/plonk-lookup.md:279
msgid " 与  "
msgstr " 与  "

#: src/plonk-intro-cn/plonk-lookup.md:273
msgid " ，分别编码 "
msgstr " ，分别编码 "

#: src/plonk-intro-cn/plonk-lookup.md:273
msgid " 计算如下"
msgstr " 计算如下"

#: src/plonk-intro-cn/plonk-lookup.md:275
msgid "if "
msgstr "if "

#: src/plonk-intro-cn/plonk-lookup.md:277
msgid "这里请注意，当 "
msgstr "这里请注意，当 "

#: src/plonk-intro-cn/plonk-lookup.md:277
msgid " 时，表示这一行约束不是查询门，因此需要填充上一个存在 "
msgstr " 时，表示这一行约束不是查询门，因此需要填充上一个存在 "

#: src/plonk-intro-cn/plonk-lookup.md:277
msgid " 中的值，这里我们取表格的最后一个元素作为查询记录填充。"
msgstr " 中的值，这里我们取表格的最后一个元素作为查询记录填充。"

#: src/plonk-intro-cn/plonk-lookup.md:279
msgid "Prover 计算 "
msgstr "Prover 计算 "

#: src/plonk-intro-cn/plonk-lookup.md:279
msgid "，并拆分为 "
msgstr "，并拆分为 "

#: src/plonk-intro-cn/plonk-lookup.md:279
msgid "，构造并发送  "
msgstr "，构造并发送  "

#: src/plonk-intro-cn/plonk-lookup.md:281
msgid "第四步： Verifier 发送随机数 "
msgstr "第四步： Verifier 发送随机数 "

#: src/plonk-intro-cn/plonk-lookup.md:283
msgid "第五步：Prover 构造（并发送）拷贝约束累乘多项式 "
msgstr "第五步：Prover 构造（并发送）拷贝约束累乘多项式 "

#: src/plonk-intro-cn/plonk-lookup.md:291
msgid "Prover 构造（并发送）查询累乘多项式 "
msgstr "Prover 构造（并发送）查询累乘多项式 "

#: src/plonk-intro-cn/plonk-lookup.md:291
msgid "，使得："
msgstr "，使得："

#: src/plonk-intro-cn/plonk-lookup.md:302
msgid "第七步：Prover 计算 "
msgstr "第七步：Prover 计算 "

#: src/plonk-intro-cn/plonk-lookup.md:306
msgid "后续步：Verifier 发送随机挑战数 "
msgstr "后续步：Verifier 发送随机挑战数 "

#: src/plonk-intro-cn/plonk-lookup.md:306
msgid "，Prover 打开各个多项式，Verifier 自行计算 "
msgstr "，Prover 打开各个多项式，Verifier 自行计算 "

#: src/plonk-intro-cn/plonk-lookup.md:306
msgid "，并验证各个多项式在 "
msgstr "，并验证各个多项式在 "

#: src/plonk-intro-cn/plonk-lookup.md:306
msgid " 处的计算证明，并验证这些打开点满足上面等式。"
msgstr " 处的计算证明，并验证这些打开点满足上面等式。"

#: src/plonk-intro-cn/plonk-lookup.md:308
msgid "完整的协议请参考Plonkup论文 \\[2\\]。"
msgstr "完整的协议请参考Plonkup论文 \\[2\\]。"

#: src/plonk-intro-cn/plonk-lookup.md:312
msgid ""
"\\[1\\] Ariel Gabizo, Dmitry Khovratovich. flookup: Fractional decomposition-"
"based lookups in quasi-linear time independent of table size. https://eprint."
"iacr.org/2022/1447."
msgstr ""
"\\[1\\] Ariel Gabizo, Dmitry Khovratovich. flookup: Fractional decomposition-"
"based lookups in quasi-linear time independent of table size. https://eprint."
"iacr.org/2022/1447."

#: src/plonk-intro-cn/plonk-lookup.md:314
msgid ""
"\\[2\\] Luke Pearson, Joshua Fitzgerald, Héctor Masip, Marta Bellés-Muñoz, "
"and Jose Luis Muñoz-Tapia. PlonKup: Reconciling PlonK with plookup. https://"
"eprint.iacr.org/2022/086."
msgstr ""
"\\[2\\] Luke Pearson, Joshua Fitzgerald, Héctor Masip, Marta Bellés-Muñoz, "
"and Jose Luis Muñoz-Tapia. PlonKup: Reconciling PlonK with plookup. https://"
"eprint.iacr.org/2022/086."

#: src/plonk-intro-cn/plonk-lookup.md:316
msgid "\\[3\\] https://zcash.github.io/halo2/design/proving-system/lookup.html"
msgstr ""
"\\[3\\] https://zcash.github.io/halo2/design/proving-system/lookup.html"

#: src/plonk-intro-cn/plonk-lookup.md:318
msgid ""
"\\[4\\] Ariel Gabizon. Multiset checks in PLONK and Plookup. https://hackmd."
"io/@arielg/ByFgSDA7D"
msgstr ""
"\\[4\\] Ariel Gabizon. Multiset checks in PLONK and Plookup. https://hackmd."
"io/@arielg/ByFgSDA7D"

#: src/plonk-intro-cn/plonk-lookup.md:320
msgid ""
"\\[5\\] Modified Lookup Argument (improved). https://hackmd.io/"
"\\_Q8YR_JLTvefW3kK92KOFgv"
msgstr ""
"\\[5\\] Modified Lookup Argument (improved). https://hackmd.io/"
"\\_Q8YR_JLTvefW3kK92KOFgv"

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:3
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:3
#: src/zk-snarks/3-General-Purpose-Computation.md:3
#: src/zk-snarks/4-Construction-Properties.md:3
#: src/zk-snarks/5-Pinocchio-Protocol.md:3
msgid "作者：Maksym Petkus"
msgstr "作者：Maksym Petkus"

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:4
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:4
#: src/zk-snarks/3-General-Purpose-Computation.md:4
#: src/zk-snarks/4-Construction-Properties.md:4
#: src/zk-snarks/5-Pinocchio-Protocol.md:4
msgid "翻译 & 注解：even@安比实验室（even@secbit.io）"
msgstr "翻译 & 注解：even@安比实验室（even@secbit.io）"

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:5
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:5
#: src/zk-snarks/3-General-Purpose-Computation.md:5
#: src/zk-snarks/4-Construction-Properties.md:5
#: src/zk-snarks/5-Pinocchio-Protocol.md:5
msgid "校对：valuka@安比实验室"
msgstr "校对：valuka@安比实验室"

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:6
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:6
#: src/zk-snarks/3-General-Purpose-Computation.md:6
#: src/zk-snarks/4-Construction-Properties.md:6
#: src/zk-snarks/5-Pinocchio-Protocol.md:6
msgid "[本系列文章](https://arxiv.org/pdf/1906.07221.pdf)已获作者中文翻译授权"
msgstr "[本系列文章](https://arxiv.org/pdf/1906.07221.pdf)已获作者中文翻译授权"

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:7
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:7
#: src/zk-snarks/3-General-Purpose-Computation.md:7
#: src/zk-snarks/4-Construction-Properties.md:7
#: src/zk-snarks/5-Pinocchio-Protocol.md:7
msgid ""
"[翻译原链接](https://secbit.io/blog/2019/12/25/learn-zk-snark-from-zero-part-"
"one/)"
msgstr ""
"[翻译原链接](https://secbit.io/blog/2019/12/25/learn-zk-snark-from-zero-part-"
"one/)"

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:9
msgid "[核心要点](#核心要点)"
msgstr "[核心要点](#核心要点)"

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:10
msgid "[证明的媒介](#证明的媒介)"
msgstr "[证明的媒介](#证明的媒介)"

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:11
msgid "[问题 :](#问题-)"
msgstr "[问题 :](#问题-)"

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:12
msgid "[因式分解](#因式分解)"
msgstr "[因式分解](#因式分解)"

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:13
msgid "[模糊计算](#模糊计算)"
msgstr "[模糊计算](#模糊计算)"

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:14
msgid "[同态加密](#同态加密)"
msgstr "[同态加密](#同态加密)"

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:15
msgid "[模运算](#模运算)"
msgstr "[模运算](#模运算)"

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:16
msgid "[强同态加密](#强同态加密)"
msgstr "[强同态加密](#强同态加密)"

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:17
msgid "[加密多项式](#加密多项式)"
msgstr "[加密多项式](#加密多项式)"

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:18
msgid "[协议过程](#协议过程)"
msgstr "[协议过程](#协议过程)"

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:21
msgid "核心要点"
msgstr "核心要点"

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:23
msgid "加密函数：  "
msgstr "加密函数：  "

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:25
msgid "在同态加密中: "
msgstr "在同态加密中: "

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:26
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:281
msgid "模数 "
msgstr "模数 "

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:26
msgid " 是双方都知道的。它通常是写在加密代码中的"
msgstr " 是双方都知道的。它通常是写在加密代码中的"

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:27
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:282
msgid "生成元 "
msgstr "生成元 "

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:27
msgid " 是一个整数，作为一个基用来生成一系列的数字(密钥，用来对数据进行加密)"
msgstr " 是一个整数，作为一个基用来生成一系列的数字(密钥，用来对数据进行加密)"

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:28
msgid " 就是我们要加密的值"
msgstr " 就是我们要加密的值"

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:30
msgid "**如果上述核心要点已经模糊/忘记的话, 就通读全文**"
msgstr "**如果上述核心要点已经模糊/忘记的话, 就通读全文**"

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:32
msgid "证明的媒介"
msgstr "证明的媒介"

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:34
msgid ""
"这里我们先不要去管零知识，非交互性，其形式和适用性这些概念，就从尝试证明一些"
"简单的东西开始。"
msgstr ""
"这里我们先不要去管零知识，非交互性，其形式和适用性这些概念，就从尝试证明一些"
"简单的东西开始。"

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:36
msgid ""
"想象一下我们 (Prover) 有一个长度为10 的位数组，现在要向 verifier（例如，程"
"序）证明这样一个陈述：我的所有的位都被设置成了 1 "
msgstr ""
"想象一下我们 (Prover) 有一个长度为10 的位数组，现在要向 verifier（例如，程"
"序）证明这样一个陈述：我的所有的位都被设置成了 1 "

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:38
msgid ""
"![](https://secbit.io/blog/2019/12/25/learn-zk-snark-from-zero-part-one/"
"img/1_qYcj1rieth4Rkaphwx3tGw.png)"
msgstr ""
"![](https://secbit.io/blog/2019/12/25/learn-zk-snark-from-zero-part-one/"
"img/1_qYcj1rieth4Rkaphwx3tGw.png)"

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:40
msgid ""
"verifier 一次只能检查（读）一位。为了验证 Prover 的这个陈述，verifier 以某种"
"任意的顺序读取元素并检查其是否确实等于 1 。如果第一次抽样检查的结果是 1，就设"
"置「陈述」的可信度为 ⅒= 10％，否则，如果等于 0，就说明「陈述」是错误的。"
msgstr ""
"verifier 一次只能检查（读）一位。为了验证 Prover 的这个陈述，verifier 以某种"
"任意的顺序读取元素并检查其是否确实等于 1 。如果第一次抽样检查的结果是 1，就设"
"置「陈述」的可信度为 ⅒= 10％，否则，如果等于 0，就说明「陈述」是错误的。"

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:42
msgid ""
"验证者继续进行下一轮验证，直到获得足够的可信度为止。假如在一些场景下要信任 "
"prover 需要至少 50% 的可信度，那就意味着必须执行 5 次校验。但假如在其它一些场"
"景下需要 95% 的可信度，就需要检查所有的元素。很明显这个证明协议的缺点是:  必"
"须要根据元素的数量进行检查，如果我们处理数百万个元素的数组，这么做是不现实"
"的。"
msgstr ""
"验证者继续进行下一轮验证，直到获得足够的可信度为止。假如在一些场景下要信任 "
"prover 需要至少 50% 的可信度，那就意味着必须执行 5 次校验。但假如在其它一些场"
"景下需要 95% 的可信度，就需要检查所有的元素。很明显这个证明协议的缺点是:  必"
"须要根据元素的数量进行检查，如果我们处理数百万个元素的数组，这么做是不现实"
"的。"

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:44
msgid ""
"现在我们来看一下由数学方程式表示的多项式，它可以被画成坐标系上的一条曲线： "
msgstr ""
"现在我们来看一下由数学方程式表示的多项式，它可以被画成坐标系上的一条曲线： "

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:48
msgid ""
"上面的曲线对应多项式: _f(x) = x³ – 6x² +11x– 6_。多项式的阶数取决于 _x_ 的最"
"大指数，当前多项式的阶数是 3"
msgstr ""
"上面的曲线对应多项式: _f(x) = x³ – 6x² +11x– 6_。多项式的阶数取决于 _x_ 的最"
"大指数，当前多项式的阶数是 3"

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:50
msgid ""
"多项式有一个非常好的特性，就是如果我们有两个阶为 d (比如 3 ) 的不相等多项式，"
"他们相交的点数不会超过 d ( 3 个)。 例如，稍微修改一下原来的多项式为 _x³ – "
"6x² + 10x– 5_ （注意 , 修改了多项式的最后一个系数，6 改成了 5 ）并在图上用绿"
"色标出："
msgstr ""
"多项式有一个非常好的特性，就是如果我们有两个阶为 d (比如 3 ) 的不相等多项式，"
"他们相交的点数不会超过 d ( 3 个)。 例如，稍微修改一下原来的多项式为 _x³ – "
"6x² + 10x– 5_ （注意 , 修改了多项式的最后一个系数，6 改成了 5 ）并在图上用绿"
"色标出："

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:54
msgid ""
"这一点微小的修改就产生了变化很大的曲线。事实上，我们不可能找到两条不同的曲"
"线，他们会在 **某段区域内重合**（他们只会相交于一些点）。"
msgstr ""
"这一点微小的修改就产生了变化很大的曲线。事实上，我们不可能找到两条不同的曲"
"线，他们会在 **某段区域内重合**（他们只会相交于一些点）。"

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:56
msgid ""
"要找到多项式与 _x_ 轴的交点（即 _f(x) = 0_），我们就要令 _x³ – 6x² + 11x – 6 "
"= 0_，等式的解就是和 x 轴的交点： _x= 1_ ，_x= 2_ 和 _x= 3_。即图上蓝色曲线"
"和 _x_ 轴相交的地方。"
msgstr ""
"要找到多项式与 _x_ 轴的交点（即 _f(x) = 0_），我们就要令 _x³ – 6x² + 11x – 6 "
"= 0_，等式的解就是和 x 轴的交点： _x= 1_ ，_x= 2_ 和 _x= 3_。即图上蓝色曲线"
"和 _x_ 轴相交的地方。"

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:58
msgid ""
"同样，我们也可以令上文中原始的多项式和修改后的多项式相等，找到它们的交点:  \n"
"联立  : x³ – 6x² + 11x – 6 =  x³ – 6x² + 10x – 5  , 得到: "
msgstr ""
"同样，我们也可以令上文中原始的多项式和修改后的多项式相等，找到它们的交点:  \n"
"联立  : x³ – 6x² + 11x – 6 =  x³ – 6x² + 10x – 5  , 得到: "

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:61
msgid "即这两个多项式有一个交点。"
msgstr "即这两个多项式有一个交点。"

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:63
msgid ""
"任意一个由阶数为 _d_ 的多项式组成的等式，最后都会被化简为另外一个阶数至多为 "
"_d_ 的多项式，这是因为等式中没有能够用来构造更高阶数的乘法。例如：_5x³ + 7x² "
"– x + 2 = 3x³ – x² + 2x– 5_，简化为 _2x³ + 8x² – 3x + 7 = 0_。 阶数最多就是 "
"3 (次方)"
msgstr ""
"任意一个由阶数为 _d_ 的多项式组成的等式，最后都会被化简为另外一个阶数至多为 "
"_d_ 的多项式，这是因为等式中没有能够用来构造更高阶数的乘法。例如：_5x³ + 7x² "
"– x + 2 = 3x³ – x² + 2x– 5_，简化为 _2x³ + 8x² – 3x + 7 = 0_。 阶数最多就是 "
"3 (次方)"

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:65
msgid ""
"另外代数的基本原理也告诉我们，对于一个阶数为 _d_ 的多项式最多有 _d_ 个解，至"
"多有 _d_ 个共同点。"
msgstr ""
"另外代数的基本原理也告诉我们，对于一个阶数为 _d_ 的多项式最多有 _d_ 个解，至"
"多有 _d_ 个共同点。"

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:67
msgid ""
"所以我们可以得出结论，任何多项式在任意点的计算结果（更多关于多项式求值参考："
"\\[Pik13\\]）都可以看做是其唯一身份的表示。"
msgstr ""
"所以我们可以得出结论，任何多项式在任意点的计算结果（更多关于多项式求值参考："
"\\[Pik13\\]）都可以看做是其唯一身份的表示。"

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:69
msgid ""
"如果一个 prover 声称他知道一些 verifier 也知道的多项式（无论多项式的阶数有多"
"大）时，他们就可以按照一个简单的协议去验证："
msgstr ""
"如果一个 prover 声称他知道一些 verifier 也知道的多项式（无论多项式的阶数有多"
"大）时，他们就可以按照一个简单的协议去验证："

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:70
msgid "verifier 选择一个随机值 "
msgstr "verifier 选择一个随机值 "

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:70
msgid " 并在本地计算多项式结果"
msgstr " 并在本地计算多项式结果"

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:71
msgid "verifier 将 "
msgstr "verifier 将 "

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:71
msgid " 值丢给 prover，让他计算该多项式的结果"
msgstr " 值丢给 prover，让他计算该多项式的结果"

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:72
msgid "prover 代入 x 到多项式计算并将结果给到 verifier"
msgstr "prover 代入 x 到多项式计算并将结果给到 verifier"

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:73
msgid ""
"verifier 检查本地的计算结果和 prover 的计算结果是否相等，如果相等那就说明 "
"prover 的陈述具有较高的可信度"
msgstr ""
"verifier 检查本地的计算结果和 prover 的计算结果是否相等，如果相等那就说明 "
"prover 的陈述具有较高的可信度"

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:75
msgid "例如，对于一个 "
msgstr "例如，对于一个 "

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:75
msgid ""
" 阶多项式 ,  prover 如果不知道该多项式的 d 个解 , 如果把 x 的取值范围定在 1 "
"到 "
msgstr ""
" 阶多项式 ,  prover 如果不知道该多项式的 d 个解 , 如果把 x 的取值范围定在 1 "
"到 "

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:75
msgid "77"
msgstr "77"

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:75
msgid ",  那么 _x_ 偶然“撞到”这 d 个结果相同的点中任意一个的概率就等于："
msgstr ",  那么 _x_ 偶然“撞到”这 d 个结果相同的点中任意一个的概率就等于："

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:75
msgid "  （可认为不可能）"
msgstr "  （可认为不可能）"

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:77
msgid ""
"与低效的位检查协议相比，新的协议只需要**一轮验证**就可以让声明具有非常高的可"
"信度（前提是假设 "
msgstr ""
"与低效的位检查协议相比，新的协议只需要**一轮验证**就可以让声明具有非常高的可"
"信度（前提是假设 "

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:77
msgid " 远小于 _x_ 取值范围的上限 (是低阶多项式)，可信度几乎是 100%）"
msgstr " 远小于 _x_ 取值范围的上限 (是低阶多项式)，可信度几乎是 100%）"

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:79
msgid ""
"这也是为什么即使可能存在其他的证明媒介，**多项式依然是 zk-SNARK 核心的部分**"
msgstr ""
"这也是为什么即使可能存在其他的证明媒介，**多项式依然是 zk-SNARK 核心的部分**"

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:81
msgid ""
"even@安比实验室:  这一节告诉了我们多项式的一个重要性质：我们不可能找到共享连"
"续段的两条不相等曲线，也就是任何多项式在任意点的计算结果都可以看做是其唯一身"
"份的表示。也就是说**只要能证明多项式上的某个随机点就可以证明这个多项式**（只"
"有在知道了多项式，才能算出这个点对于的值），这个性质是我们下面所有证明的核"
"心。"
msgstr ""
"even@安比实验室:  这一节告诉了我们多项式的一个重要性质：我们不可能找到共享连"
"续段的两条不相等曲线，也就是任何多项式在任意点的计算结果都可以看做是其唯一身"
"份的表示。也就是说**只要能证明多项式上的某个随机点就可以证明这个多项式**（只"
"有在知道了多项式，才能算出这个点对于的值），这个性质是我们下面所有证明的核"
"心。"

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:83
msgid ""
"这就是 Schwatz-Zippel 定理，它可以扩展到多变量多项式，即在一个多维空间内形成"
"一个曲面。这个定理会在多个零知识证明方案的证明中反复出现。"
msgstr ""
"这就是 Schwatz-Zippel 定理，它可以扩展到多变量多项式，即在一个多维空间内形成"
"一个曲面。这个定理会在多个零知识证明方案的证明中反复出现。"

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:86
msgid "问题 :"
msgstr "问题 :"

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:88
msgid ""
"到目前为止，我们的协议还只是一个很弱的证明，因为协议中并没有采取任何措施去保"
"证参与方必须按照协议的规则生成证明，所以参与方只能互相信任。"
msgstr ""
"到目前为止，我们的协议还只是一个很弱的证明，因为协议中并没有采取任何措施去保"
"证参与方必须按照协议的规则生成证明，所以参与方只能互相信任。"

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:90
msgid ""
"例如，prover 并不需要知道多项式，也可能通过其它方式得到正确的答案 (比如偷一个"
"答案)。"
msgstr ""
"例如，prover 并不需要知道多项式，也可能通过其它方式得到正确的答案 (比如偷一个"
"答案)。"

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:92
msgid ""
"而且，如果 verifier 要验证的多项式的解的取值范围不够大，比如我们前文说的 10，"
"那个就可以去猜一个数字，猜对答案的概率是不可忽略不计的。因而我们必须要解决协"
"议中的这个缺陷，在解决问题之前首先来想一下，**知道多项式意味着什么呢？**"
msgstr ""
"而且，如果 verifier 要验证的多项式的解的取值范围不够大，比如我们前文说的 10，"
"那个就可以去猜一个数字，猜对答案的概率是不可忽略不计的。因而我们必须要解决协"
"议中的这个缺陷，在解决问题之前首先来想一下，**知道多项式意味着什么呢？**"

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:94
msgid "多项式可以用下面的形式来表示（其中 _n_ 指的是多项式的阶）： "
msgstr "多项式可以用下面的形式来表示（其中 _n_ 指的是多项式的阶）： "

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:95
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:79
#: src/zk-snarks/4-Construction-Properties.md:199
#: src/zk-snarks/5-Pinocchio-Protocol.md:89
#: src/zk-snarks/5-Pinocchio-Protocol.md:188
msgid "……"
msgstr "……"

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:95
msgid ""
" 假设证明者声称他知道一个包含 _x=1_ 和 _x=2_ 两个解的三阶多项式 , 满足此条件"
"的一个有效的多项式就是 "
msgstr ""
" 假设证明者声称他知道一个包含 _x=1_ 和 _x=2_ 两个解的三阶多项式 , 满足此条件"
"的一个有效的多项式就是 "

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:96
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:148
#: src/zk-snarks/3-General-Purpose-Computation.md:83
#: src/zk-snarks/3-General-Purpose-Computation.md:96
#: src/zk-snarks/3-General-Purpose-Computation.md:102
#: src/zk-snarks/3-General-Purpose-Computation.md:104
#: src/zk-snarks/3-General-Purpose-Computation.md:155
#: src/zk-snarks/3-General-Purpose-Computation.md:165
#: src/zk-snarks/3-General-Purpose-Computation.md:180
msgid "–"
msgstr "–"

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:98
msgid ""
"多项式的「知识」就是多项式的系数。所谓「知道」多项式就是指「知道」多项式的系"
"数"
msgstr ""
"多项式的「知识」就是多项式的系数。所谓「知道」多项式就是指「知道」多项式的系"
"数"

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:100
msgid "因式分解"
msgstr "因式分解"

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:102
msgid ""
"代数的基本定理表明了任意的一个多项式只要它有解，就可以将它分解成线性多项式"
"（即，一个阶数为 1 的多项式代表一条线），因此，我们可以把任意有效的多项式看成"
"是其因式的乘积： "
msgstr ""
"代数的基本定理表明了任意的一个多项式只要它有解，就可以将它分解成线性多项式"
"（即，一个阶数为 1 的多项式代表一条线），因此，我们可以把任意有效的多项式看成"
"是其因式的乘积： "

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:105
msgid "也就是说如果任意一个因式为 0，那么整个等式都为 0，也就是说式子中所有的 "
msgstr ""
"也就是说如果任意一个因式为 0，那么整个等式都为 0，也就是说式子中所有的 "

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:105
msgid " 就是多项式的所有解 "
msgstr " 就是多项式的所有解 "

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:108
msgid "所以这个多项式的解（ "
msgstr "所以这个多项式的解（ "

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:108
msgid ""
"  的值）就是：0，1，2，在任何形式下多项式的解都可以很轻松的被验证，只不过因式"
"的形式可以让我们一眼就看出这些解（也称为根）"
msgstr ""
"  的值）就是：0，1，2，在任何形式下多项式的解都可以很轻松的被验证，只不过因式"
"的形式可以让我们一眼就看出这些解（也称为根）"

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:110
msgid ""
"我们再回到前面的问题， prover 宣称他知道一个阶数为 3，其中两个根分别为 1 和 "
"2 的多项式，也就是说这个多项式的形式为： "
msgstr ""
"我们再回到前面的问题， prover 宣称他知道一个阶数为 3，其中两个根分别为 1 和 "
"2 的多项式，也就是说这个多项式的形式为： "

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:111
msgid " 换句话说 "
msgstr " 换句话说 "

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:112
msgid "和 "
msgstr "和 "

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:112
msgid " 是问题中多项式的两个因式。"
msgstr " 是问题中多项式的两个因式。"

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:114
msgid ""
"因而如果 prover 想要**在不揭示多项式的前提下**证明他的多项式确实有这两个根，"
"那么他就需要去证明他的多项式  "
msgstr ""
"因而如果 prover 想要**在不揭示多项式的前提下**证明他的多项式确实有这两个根，"
"那么他就需要去证明他的多项式  "

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:114
msgid "  是  "
msgstr "  是  "

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:114
msgid " 和一些任意多项式  "
msgstr " 和一些任意多项式  "

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:114
msgid " （例子中  "
msgstr " （例子中  "

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:114
msgid " ）的乘积，即： "
msgstr " ）的乘积，即： "

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:116
msgid "  也称为目标多项式  _target polynomial_ "
msgstr "  也称为目标多项式  _target polynomial_ "

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:118
msgid "换句话说，存在一些多项式 "
msgstr "换句话说，存在一些多项式 "

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:118
msgid " 能使  "
msgstr " 能使  "

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:118
msgid " 与之相乘后等于 "
msgstr " 与之相乘后等于 "

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:118
msgid "，并由此得出， "
msgstr "，并由此得出， "

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:118
msgid "  中包含 "
msgstr "  中包含 "

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:118
msgid " ，所以  "
msgstr " ，所以  "

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:118
msgid " 的根中也包含  "
msgstr " 的根中也包含  "

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:118
msgid "  的所有根，这也就是我们要证明的东西.   算出 "
msgstr "  的所有根，这也就是我们要证明的东西.   算出 "

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:118
msgid " 的方式最自然的就是直接相除： "
msgstr " 的方式最自然的就是直接相除： "

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:120
msgid "如果一个 prover 不能找到这样一个 "
msgstr "如果一个 prover 不能找到这样一个 "

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:120
msgid " 也就意味着 "
msgstr " 也就意味着 "

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:120
msgid " 中不包含因式  "
msgstr " 中不包含因式  "

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:120
msgid " ，那么多项式相除就会有**余数**"
msgstr " ，那么多项式相除就会有**余数**"

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:122
msgid ""
"例如我们用 _p(x) = x³ – 3x² + 2x_ 除以  _t(x) = (x – 1)(x – 2)_  (即 _x² – "
"3x+ 2_ ) "
msgstr ""
"例如我们用 _p(x) = x³ – 3x² + 2x_ 除以  _t(x) = (x – 1)(x – 2)_  (即 _x² – "
"3x+ 2_ ) "

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:124
msgid ""
"![](https://secbit.io/blog/2019/12/25/learn-zk-snark-from-zero-part-one/"
"img/1_iT3kRk3C-DJdvQgi1b2uOA.png)"
msgstr ""
"![](https://secbit.io/blog/2019/12/25/learn-zk-snark-from-zero-part-one/"
"img/1_iT3kRk3C-DJdvQgi1b2uOA.png)"

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:126
msgid ""
"_注意：左边的式子是分母，右上角的是计算结果。底部是余数（多项式相除的解释及示"
"例可以看这里 \\[Pik14\\] ）。_"
msgstr ""
"_注意：左边的式子是分母，右上角的是计算结果。底部是余数（多项式相除的解释及示"
"例可以看这里 \\[Pik14\\] ）。_"

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:128
msgid "我们算出结果 "
msgstr "我们算出结果 "

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:128
msgid " ，没有余数。"
msgstr " ，没有余数。"

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:130
msgid "\\_注意：为简化起见，后面我们会用多项式的字母来代替计算结果，如： "
msgstr "\\_注意：为简化起见，后面我们会用多项式的字母来代替计算结果，如： "

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:132
msgid ""
"多项式可以被因式分解成它的根的因式的乘积。这个性质就意味着，如果一个多项式有"
"某些解，那么它被因式分解后的式子中一定包含这些解的因式。 有了这个性质，我们就"
"可以愉快地去做一些证明啦。"
msgstr ""
"多项式可以被因式分解成它的根的因式的乘积。这个性质就意味着，如果一个多项式有"
"某些解，那么它被因式分解后的式子中一定包含这些解的因式。 有了这个性质，我们就"
"可以愉快地去做一些证明啦。"

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:135
msgid ""
"利用**多项式一致性检查协议**我们就可以比较多项式 _p(x)_ 和 _t(x) ⋅ h(x)_："
msgstr ""
"利用**多项式一致性检查协议**我们就可以比较多项式 _p(x)_ 和 _t(x) ⋅ h(x)_："

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:137
msgid "verifier 挑选一个随机值 "
msgstr "verifier 挑选一个随机值 "

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:137
msgid " , 计算 "
msgstr " , 计算 "

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:137
msgid "  (即，求值) ，然后将 "
msgstr "  (即，求值) ，然后将 "

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:137
msgid "  发送给 prover。"
msgstr "  发送给 prover。"

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:138
msgid "prover 计算 "
msgstr "prover 计算 "

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:138
msgid ""
" ，并对 _p(r)_ 和 _h(r)_ 进行求值，将计算结果 _p_, _h_ 提供给 verifier。"
msgstr ""
" ，并对 _p(r)_ 和 _h(r)_ 进行求值，将计算结果 _p_, _h_ 提供给 verifier。"

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:139
msgid "verifier 验证 "
msgstr "verifier 验证 "

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:139
msgid " ，如果多项式相等，就意味着 _t(x)_ 是 _p(x)_ 的因式。"
msgstr " ，如果多项式相等，就意味着 _t(x)_ 是 _p(x)_ 的因式。"

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:141
msgid "实践一下，用下面的例子来执行这个协议："
msgstr "实践一下，用下面的例子来执行这个协议："

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:142
msgid ""
"verifier 选一个随机数 23，并计算 _t_ = _t_(23) = (23 – 1)(23 – 2) = 462，然后"
"将 23 发给 prover"
msgstr ""
"verifier 选一个随机数 23，并计算 _t_ = _t_(23) = (23 – 1)(23 – 2) = 462，然后"
"将 23 发给 prover"

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:143
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:148
msgid "prover 计算  "
msgstr "prover 计算  "

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:143
msgid ""
"  , 并对 _p(r)_ 和 _h(r)_ 进行求值，_p_= _p_(23) = 10626，_h_ = _h_(23) = "
"23，将 _p_ 和 _h_ 提供给 verifier"
msgstr ""
"  , 并对 _p(r)_ 和 _h(r)_ 进行求值，_p_= _p_(23) = 10626，_h_ = _h_(23) = "
"23，将 _p_ 和 _h_ 提供给 verifier"

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:144
msgid "verifier 再验证 "
msgstr "verifier 再验证 "

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:144
msgid " ：10626 = 462 ⋅ 23 是正确的，这样陈述就被证明了。"
msgstr " ：10626 = 462 ⋅ 23 是正确的，这样陈述就被证明了。"

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:146
msgid "相反，如果 prover 其实不知道真正的 "
msgstr "相反，如果 prover 其实不知道真正的 "

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:146
msgid " , 而是使用了一个不相干的 "
msgstr " , 而是使用了一个不相干的 "

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:146
msgid "  ，如 _p′(x) = 2x³ – 3x² + 2x_ ，它并不包含必需的因式, 那么："
msgstr "  ，如 _p′(x) = 2x³ – 3x² + 2x_ ，它并不包含必需的因式, 那么："

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:148
msgid "  , 运算出结果 "
msgstr "  , 运算出结果 "

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:148
msgid "  和余数 "
msgstr "  和余数 "

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:148
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:150
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:152
msgid "–6"
msgstr "–6"

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:148
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:45
msgid "  ："
msgstr "  ："

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:149
msgid "为了计算出结果 , prover 不得不冒险用余数除以 "
msgstr "为了计算出结果 , prover 不得不冒险用余数除以 "

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:149
msgid "  ， 即  "
msgstr "  ， 即  "

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:152
msgid "不过由于 _x_ 是 verifier 随机选择的，只有极低的概率余数 "
msgstr "不过由于 _x_ 是 verifier 随机选择的，只有极低的概率余数 "

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:152
msgid "  可以被 "
msgstr "  可以被 "

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:152
msgid ""
" 整除。如果后面 verifier 要另外再检查 p 和 h 必须是整数的话，这个证明就会被拒"
"绝。"
msgstr ""
" 整除。如果后面 verifier 要另外再检查 p 和 h 必须是整数的话，这个证明就会被拒"
"绝。"

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:153
msgid "如此校验就同时**要求多项式系数也是整数**，这对协议产生了极大的限制"
msgstr "如此校验就同时**要求多项式系数也是整数**，这对协议产生了极大的限制"

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:155
msgid ""
"这就是为什么接下来我们要介绍能够使余数不被整除的密码学原理的原因，尽管这个原"
"始值是有可能被整除的。"
msgstr ""
"这就是为什么接下来我们要介绍能够使余数不被整除的密码学原理的原因，尽管这个原"
"始值是有可能被整除的。"

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:157
msgid ""
"**Remark 3.1** 现在我们就可以在不知道多项式的前提下根据特定的性质来验证多项式"
"了，这就已经给了我们一些零知识和简明性的特性。但是，这个结构中还存在好多问"
"题："
msgstr ""
"**Remark 3.1** 现在我们就可以在不知道多项式的前提下根据特定的性质来验证多项式"
"了，这就已经给了我们一些零知识和简明性的特性。但是，这个结构中还存在好多问"
"题："

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:158
msgid "prover 可能并不知道他所声称的 "
msgstr "prover 可能并不知道他所声称的 "

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:158
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:278
#: src/zk-snarks/3-General-Purpose-Computation.md:266
msgid " ，"
msgstr " ，"

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:159
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:160
msgid "因为 prover 知道随机点 "
msgstr "因为 prover 知道随机点 "

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:159
msgid "，他可以先算一下 "
msgstr "，他可以先算一下 "

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:159
msgid " ，然后选择一个随机值 "
msgstr " ，然后选择一个随机值 "

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:159
msgid " ，由此计算出 "
msgstr " ，由此计算出 "

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:159
msgid " 。因为等式是成立的，所以也能通过 verifier 的校验。"
msgstr " 。因为等式是成立的，所以也能通过 verifier 的校验。"

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:160
msgid "，他可以构造出一个任意的多项式，这个任意多项式与 "
msgstr "，他可以构造出一个任意的多项式，这个任意多项式与 "

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:160
msgid "  处有共同点。"
msgstr "  处有共同点。"

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:161
msgid ""
"在前面的「陈述」中，prover 声称他知道一个特定阶数的多项式，但现在的协议对阶数"
"并没有明确的要求。因而 prover 完全可以拿一个满足因式校验的超级高阶数的多项式"
"来欺骗 verifier"
msgstr ""
"在前面的「陈述」中，prover 声称他知道一个特定阶数的多项式，但现在的协议对阶数"
"并没有明确的要求。因而 prover 完全可以拿一个满足因式校验的超级高阶数的多项式"
"来欺骗 verifier"

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:163
msgid "下面我们就要来逐一得解决这些问题。"
msgstr "下面我们就要来逐一得解决这些问题。"

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:165
msgid ""
"even@安比实验室：利用因式的性质构造出了一个证明协议，但这个协议存在一些缺陷，"
"主要是由于"
msgstr ""
"even@安比实验室：利用因式的性质构造出了一个证明协议，但这个协议存在一些缺陷，"
"主要是由于"

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:166
msgid "一旦 prover 知道了 "
msgstr "一旦 prover 知道了 "

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:166
msgid " ，他就可以反过来任意构造任何一个可以整除 "
msgstr " ，他就可以反过来任意构造任何一个可以整除 "

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:167
msgid "有的公司的 "
msgstr "有的公司的 "

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:167
msgid "  就直接写在开源代码里面 .... 作死 ...."
msgstr "  就直接写在开源代码里面 .... 作死 ...."

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:168
msgid "prover 知道了点 "
msgstr "prover 知道了点 "

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:168
msgid "  的值，就可以构造经过这一点的任意(高次)多项式，同样满足校验"
msgstr "  的值，就可以构造经过这一点的任意(高次)多项式，同样满足校验"

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:169
msgid "协议并没有对 prover 的多项式阶数(次数)进行约束"
msgstr "协议并没有对 prover 的多项式阶数(次数)进行约束"

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:172
msgid "模糊计算"
msgstr "模糊计算"

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:174
msgid "Remark 3.1 中的前 2 个问题是由于 **暴露了原始值** 而导致的，即 "
msgstr "Remark 3.1 中的前 2 个问题是由于 **暴露了原始值** 而导致的，即 "

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:174
msgid " 知道了 "
msgstr " 知道了 "

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:174
msgid " 但如果 verifier 给出的这个 "
msgstr " 但如果 verifier 给出的这个 "

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:175
msgid ""
" 值像放在黑盒里一样不可见的话就完美了，也就是一个人即使不破坏协议，也依然能在"
"这些模糊的值上面完成计算。有点类似哈希函数，从计算结果就很难再回到原始值上"
msgstr ""
" 值像放在黑盒里一样不可见的话就完美了，也就是一个人即使不破坏协议，也依然能在"
"这些模糊的值上面完成计算。有点类似哈希函数，从计算结果就很难再回到原始值上"

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:177
msgid "同态加密"
msgstr "同态加密"

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:179
msgid ""
"这也就是要设计同态加密的原因。它允许加密一个值并在密文上进行算术运算。获取加"
"密的同态性质的方法有多种，我们来介绍一个简单的方法。"
msgstr ""
"这也就是要设计同态加密的原因。它允许加密一个值并在密文上进行算术运算。获取加"
"密的同态性质的方法有多种，我们来介绍一个简单的方法。"

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:181
msgid ""
"总体思路就是我们选择一个基础的（基数需要具有某些特定的属性）的自然数 _g_（如 "
"5），然后我们以要加密的值为指数对 _g_ 进行求幂。例如，如果我们要对 3 进行加"
"密："
msgstr ""
"总体思路就是我们选择一个基础的（基数需要具有某些特定的属性）的自然数 _g_（如 "
"5），然后我们以要加密的值为指数对 _g_ 进行求幂。例如，如果我们要对 3 进行加"
"密："

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:183
msgid "12553"
msgstr "12553"

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:183
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:256
msgid "125"
msgstr "125"

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:185
msgid ""
"这里 125 就是 3 对应的密文。如果我们想要对被加密的值乘 2，我们可以以 2 为指数"
"来对这个密文进行计算。 "
msgstr ""
"这里 125 就是 3 对应的密文。如果我们想要对被加密的值乘 2，我们可以以 2 为指数"
"来对这个密文进行计算。 "

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:186
msgid "15625"
msgstr "15625"

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:188
msgid ""
"我们不仅可以用 2 来乘以一个未知的值并保持密文的有效性，还可以通过密文相乘来使"
"两个值相加，例如 3+2："
msgstr ""
"我们不仅可以用 2 来乘以一个未知的值并保持密文的有效性，还可以通过密文相乘来使"
"两个值相加，例如 3+2："

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:190
msgid "3125"
msgstr "3125"

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:192
msgid "同样的，我们还可以通过相除提取加密的数字，例如：5-3"
msgstr "同样的，我们还可以通过相除提取加密的数字，例如：5-3"

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:194
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:254
#: src/zk-snarks/4-Construction-Properties.md:155
#: src/zk-snarks/4-Construction-Properties.md:178
msgid "25"
msgstr "25"

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:196
msgid ""
"不过由于基数 5 是公开的，很容易就可以找到被加密的数字。只要将密文一直除以 5，"
"直到结果为 1，那么做除法的次数也就是被加密值的数。"
msgstr ""
"不过由于基数 5 是公开的，很容易就可以找到被加密的数字。只要将密文一直除以 5，"
"直到结果为 1，那么做除法的次数也就是被加密值的数。"

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:198
msgid "比如有一段密文是 125 , 那么 "
msgstr "比如有一段密文是 125 , 那么 "

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:198
msgid "125/5/5/5"
msgstr "125/5/5/5"

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:198
msgid ""
" , 除了 3 次得到 1 , hacker 自然知道加密值是 3 , 这毫无加密可言,  所以我们需"
"要 Mod 模运算"
msgstr ""
" , 除了 3 次得到 1 , hacker 自然知道加密值是 3 , 这毫无加密可言,  所以我们需"
"要 Mod 模运算"

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:201
msgid "模运算"
msgstr "模运算"

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:203
msgid ""
"这里就到了模运算发挥作用的地方了。模运算的思路如下：除了我们所选择的组成有限"
"集合的前 n 个自然数（即，_0_，_1_，…，_n_\\-_1_）以外，任何超出此范围的给定整"
"数，我们就将它“缠绕”起来。例如，我们选择前六个数。为了说明这一点，可以把它看"
"做一个有六个单位大小相等刻度的圆；这就是我们所说的范围（通常指的是有限域）。"
msgstr ""
"这里就到了模运算发挥作用的地方了。模运算的思路如下：除了我们所选择的组成有限"
"集合的前 n 个自然数（即，_0_，_1_，…，_n_\\-_1_）以外，任何超出此范围的给定整"
"数，我们就将它“缠绕”起来。例如，我们选择前六个数。为了说明这一点，可以把它看"
"做一个有六个单位大小相等刻度的圆；这就是我们所说的范围（通常指的是有限域）。"

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:205
msgid ""
"![img](https://secbit.io/blog/2019/12/25/learn-zk-snark-from-zero-part-one/"
"img/1_q-GtshK0LkZMg5PSj44FvA.png)"
msgstr ""
"![img](https://secbit.io/blog/2019/12/25/learn-zk-snark-from-zero-part-one/"
"img/1_q-GtshK0LkZMg5PSj44FvA.png)"

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:207
msgid ""
"现在我们看一下数字八应该在哪里。打个比方，我们可以把它看成一条长度为 8 的绳"
"子。![img](https://secbit.io/blog/2019/12/25/learn-zk-snark-from-zero-part-"
"one/img/1_WbT1Eie_Frg1vdqcfi_uig.png)"
msgstr ""
"现在我们看一下数字八应该在哪里。打个比方，我们可以把它看成一条长度为 8 的绳"
"子。![img](https://secbit.io/blog/2019/12/25/learn-zk-snark-from-zero-part-"
"one/img/1_WbT1Eie_Frg1vdqcfi_uig.png)"

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:209
msgid ""
"如果我们将绳子固定在圆圈的开头![img](https://secbit.io/blog/2019/12/25/learn-"
"zk-snark-from-zero-part-one/img/1_O-OE3lLnPelGiej4L56R3A.png)"
msgstr ""
"如果我们将绳子固定在圆圈的开头![img](https://secbit.io/blog/2019/12/25/learn-"
"zk-snark-from-zero-part-one/img/1_O-OE3lLnPelGiej4L56R3A.png)"

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:211
msgid "然后用绳子缠绕圆圈，我们在缠完一圈后还剩下一部分的绳子。"
msgstr "然后用绳子缠绕圆圈，我们在缠完一圈后还剩下一部分的绳子。"

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:213
msgid ""
"![img](https://secbit.io/blog/2019/12/25/learn-zk-snark-from-zero-part-one/"
"img/1_nOJ-DFp3L4fOYmHbkWp-JQ.png)"
msgstr ""
"![img](https://secbit.io/blog/2019/12/25/learn-zk-snark-from-zero-part-one/"
"img/1_nOJ-DFp3L4fOYmHbkWp-JQ.png)"

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:215
msgid "然后我们继续缠绕，这根绳子将在刻度 2 的地方终止。"
msgstr "然后我们继续缠绕，这根绳子将在刻度 2 的地方终止。"

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:217
msgid ""
"![img](https://secbit.io/blog/2019/12/25/learn-zk-snark-from-zero-part-one/"
"img/1_5970QxlFD23iOJrY8_DPsw.png)"
msgstr ""
"![img](https://secbit.io/blog/2019/12/25/learn-zk-snark-from-zero-part-one/"
"img/1_5970QxlFD23iOJrY8_DPsw.png)"

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:219
msgid ""
"这就是模运算操作的结果。无论这根绳子多长，它最终都会在圆圈一个刻度处终止。因"
"而模运算结果将保持在一定范围内（例子中是 0 到 5）。长度为 15 的绳子将会在刻"
"度 3 的地方终止，即 _6_ + _6_ + _3_ （缠 2 个完整的圈并剩下 3 个单位长的部"
"分）。"
msgstr ""
"这就是模运算操作的结果。无论这根绳子多长，它最终都会在圆圈一个刻度处终止。因"
"而模运算结果将保持在一定范围内（例子中是 0 到 5）。长度为 15 的绳子将会在刻"
"度 3 的地方终止，即 _6_ + _6_ + _3_ （缠 2 个完整的圈并剩下 3 个单位长的部"
"分）。"

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:220
msgid ""
"负数运算类似，唯一不同的地方就是它是沿相反方向缠绕的，如 -8 的取模结果是 4。"
msgstr ""
"负数运算类似，唯一不同的地方就是它是沿相反方向缠绕的，如 -8 的取模结果是 4。"

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:223
msgid ""
"我们执行算术运算，结果都将落在这 n 的范围内。现在开始我们将用符号 “_mod n_” "
"来表示这个范围内的数。"
msgstr ""
"我们执行算术运算，结果都将落在这 n 的范围内。现在开始我们将用符号 “_mod n_” "
"来表示这个范围内的数。"

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:225
msgid "_3 × 5 = 3 mod 6_ _5 + 2 = 1 mod 6_"
msgstr "_3 × 5 = 3 mod 6_ _5 + 2 = 1 mod 6_"

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:228
msgid "另外，模运算最重要的性质就是**运算顺序无所谓**。"
msgstr "另外，模运算最重要的性质就是**运算顺序无所谓**。"

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:230
msgid ""
"例如，我们可以先做完所有的操作，然后再取模，或者每操作完一步都去取模。例如 "
"_(2 × 4 – 1) × 3 = 3 (mod 6)_ 就等于："
msgstr ""
"例如，我们可以先做完所有的操作，然后再取模，或者每操作完一步都去取模。例如 "
"_(2 × 4 – 1) × 3 = 3 (mod 6)_ 就等于："

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:232
msgid "_2 × 4 = 2 mod 6_ _2 - 1 = 1 mod 6_ _1 × 3 = 3 mod 6_"
msgstr "_2 × 4 = 2 mod 6_ _2 - 1 = 1 mod 6_ _1 × 3 = 3 mod 6_"

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:236
msgid ""
"那么模运算到底有什么用呢？就是如果我们**使用模运算，从运算结果再回到原始值并"
"不容易，因为不同的组合会产生一个同样的运算结果**："
msgstr ""
"那么模运算到底有什么用呢？就是如果我们**使用模运算，从运算结果再回到原始值并"
"不容易，因为不同的组合会产生一个同样的运算结果**："

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:238
msgid "_5 × 4 = 2 mod 6_ _4 × 2 = 2 mod 6_ _2 × 1 = 2 mod 6_ _……_"
msgstr "_5 × 4 = 2 mod 6_ _4 × 2 = 2 mod 6_ _2 × 1 = 2 mod 6_ _……_"

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:243
msgid ""
"设想一下 , 如果没有模运算的话，计算结果的大小会给找出原始值提供一些线索。"
msgstr ""
"设想一下 , 如果没有模运算的话，计算结果的大小会给找出原始值提供一些线索。"

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:245
msgid "除非这里既能把信息隐藏起来，又可以保留常见的算术属性。"
msgstr "除非这里既能把信息隐藏起来，又可以保留常见的算术属性。"

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:248
msgid "强同态加密"
msgstr "强同态加密"

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:250
msgid "我们再回到同态加密上，使用模运算，例如取模 7，我们可以得到："
msgstr "我们再回到同态加密上，使用模运算，例如取模 7，我们可以得到："

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:256
msgid "    …………"
msgstr "    …………"

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:258
msgid "其中在某些不同的指数下运算得到了同样的结果 , 比如 "
msgstr "其中在某些不同的指数下运算得到了同样的结果 , 比如 "

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:258
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:262
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:194
msgid "17"
msgstr "17"

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:258
msgid "  模`7` 的运算结果都是 `3` ："
msgstr "  模`7` 的运算结果都是 `3` ："

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:262
msgid "   ……"
msgstr "   ……"

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:264
msgid ""
"这样就很难知道指数是多少了。 事实上，如果模取得相当大，从运算结果倒推指数运算"
"就不可行了； **现代密码学很大程度上就是基于这个问题的“困难”。**"
msgstr ""
"这样就很难知道指数是多少了。 事实上，如果模取得相当大，从运算结果倒推指数运算"
"就不可行了； **现代密码学很大程度上就是基于这个问题的“困难”。**"

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:267
msgid "而方案中所有的同态性质都在模运算中保留了下来："
msgstr "而方案中所有的同态性质都在模运算中保留了下来："

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:269
msgid "cry"
msgstr "cry"

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:269
#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:395 src/public goods/4-Proving-System.md:209
msgid "pt"
msgstr "pt"

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:269
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:271
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:272
#: src/zk-snarks/3-General-Purpose-Computation.md:112
#: src/zk-snarks/3-General-Purpose-Computation.md:165
#: src/zk-snarks/3-General-Purpose-Computation.md:295
#: src/zk-snarks/3-General-Purpose-Computation.md:366
#: src/zk-snarks/4-Construction-Properties.md:271
#: src/zk-snarks/4-Construction-Properties.md:326 src/zk-everything/BabySNARK
#: tutorial.md:150 tutorial.md:154 tutorial.md:158
#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:42
#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:354 SNARKs.md:374 SNARKs.md:395
#: src/zk-everything/zk-everything-joe/Hyrax.md:207 src/public
#: goods/第二章.md:80 goods/第二章.md:81 goods/第二章.md:86
#: goods/第二章.md:103
msgid ":"
msgstr ":"

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:270
msgid "根据密文 6 , 不能推出原文 3 "
msgstr "根据密文 6 , 不能推出原文 3 "

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:271
#: src/zk-snarks/3-General-Purpose-Computation.md:137
msgid "pl"
msgstr "pl"

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:271
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:66
#: src/halo2/tmp/4-IsZero-Check-example-3.md:128
#: src/halo2/tmp/4-IsZero-Check-example-3.md:190 src/public
#: goods/4-Proving-System.md:113 goods/4-Proving-System.md:151
#: goods/4-Proving-System.md:177
msgid "=="
msgstr "=="

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:273
msgid "根据密文 3 , 无法推出私钥"
msgstr "根据密文 3 , 无法推出私钥"

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:275
msgid "_(原文)注意：模相除有点难 , 超出范围了, 这里不表。_"
msgstr "_(原文)注意：模相除有点难 , 超出范围了, 这里不表。_"

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:278
msgid "我们来明确地说明一下加密函数： "
msgstr "我们来明确地说明一下加密函数： "

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:280
msgid " 是想要加密的值"
msgstr " 是想要加密的值"

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:281
msgid " 是双方都知道的,  它通常写在加密代码中"
msgstr " 是双方都知道的,  它通常写在加密代码中"

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:282
msgid " 是一个整数，作为一个基用来生成一系列的数字比如 "
msgstr " 是一个整数，作为一个基用来生成一系列的数字比如 "

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:283
msgid "  通常称为密钥，用来对数据进行加密"
msgstr "  通常称为密钥，用来对数据进行加密"

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:286
msgid ""
"**Remark 3.2**  : 这个同态加密模式有一个限制，我们可以将 `加密值` 乘以 `未加"
"密值` ，但**不能将两个已经加密的值相乘( _we cannot exponentiate an encrypted "
"value_)**（或者相除），也就是说我们不能对加密值取幂。"
msgstr ""
"**Remark 3.2**  : 这个同态加密模式有一个限制，我们可以将 `加密值` 乘以 `未加"
"密值` ，但**不能将两个已经加密的值相乘( _we cannot exponentiate an encrypted "
"value_)**（或者相除），也就是说我们不能对加密值取幂。"

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:288
msgid ""
"在同态加密中，求幂运算会破坏同态的性质，导致加密后的数据无法被正确解密。因"
"此，同态加密不允许对已经加密值进行再次的求幂运算。 Besides, 密文之间的乘法操"
"作可能会泄露有关明文的信息。特别是在某些强同态加密方案中，如果不小心执行操"
"作，可能会导致信息泄露。"
msgstr ""
"在同态加密中，求幂运算会破坏同态的性质，导致加密后的数据无法被正确解密。因"
"此，同态加密不允许对已经加密值进行再次的求幂运算。 Besides, 密文之间的乘法操"
"作可能会泄露有关明文的信息。特别是在某些强同态加密方案中，如果不小心执行操"
"作，可能会导致信息泄露。"

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:291
msgid ""
"虽然这些性质第一感觉看起来很不友好，但是这却构成了 _zk-SNARK_ 的基础。这个限"
"制后面将在“加密值乘法 (_Multiplication of Encrypted Values_) ”一节中讲到。"
msgstr ""
"虽然这些性质第一感觉看起来很不友好，但是这却构成了 _zk-SNARK_ 的基础。这个限"
"制后面将在“加密值乘法 (_Multiplication of Encrypted Values_) ”一节中讲到。"

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:293
msgid "通过模运算形成的集合被称为「有限域」，"
msgstr "通过模运算形成的集合被称为「有限域」，"

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:294
msgid "通过计算指数再进行模运算形成的集合构成「循环群」。"
msgstr "通过计算指数再进行模运算形成的集合构成「循环群」。"

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:295
msgid "常见的同态加密方式除了整数幂取模之外，还有椭圆曲线上的倍乘。"
msgstr "常见的同态加密方式除了整数幂取模之外，还有椭圆曲线上的倍乘。"

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:298
msgid "加密多项式"
msgstr "加密多项式"

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:300
msgid ""
"配合这些工具，我们现在就可以在加密的随机数 _x_ 上做运算并相应地修改零知识协议"
"了。"
msgstr ""
"配合这些工具，我们现在就可以在加密的随机数 _x_ 上做运算并相应地修改零知识协议"
"了。"

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:302
msgid "我们来看一下如何计算多项式 _p(x) = x³ – 3x² + 2x_。"
msgstr "我们来看一下如何计算多项式 _p(x) = x³ – 3x² + 2x_。"

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:304
msgid ""
"我们前面明确了，知道一个多项式就是知道它的系数，也就是这个例子中知道：`1, "
"-3, 2`。"
msgstr ""
"我们前面明确了，知道一个多项式就是知道它的系数，也就是这个例子中知道：`1, "
"-3, 2`。"

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:306
msgid ""
"因为同态加密并不允许再对加密值求幂，所以我们必须要给出 _x_ 的 1 到 3 次幂取加"
"密值：E(x)，E(x²)，E(x³)，那么我们要计算的加密多项式就是："
msgstr ""
"因为同态加密并不允许再对加密值求幂，所以我们必须要给出 _x_ 的 1 到 3 次幂取加"
"密值：E(x)，E(x²)，E(x³)，那么我们要计算的加密多项式就是："

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:310
msgid "所以通过这些运算，我们就获得了多项式在一些未知数 "
msgstr "所以通过这些运算，我们就获得了多项式在一些未知数 "

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:310
msgid ""
"  处的**加密计算结果**。这确实是一个很强大的机制，因为同态的性质，同一个多项"
"式的加密运算在加密空间中始终是相同的"
msgstr ""
"  处的**加密计算结果**。这确实是一个很强大的机制，因为同态的性质，同一个多项"
"式的加密运算在加密空间中始终是相同的"

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:312
msgid "我们现在就可以更新前面版本的协议了，比如对于阶数为 _d_ 的多项式： "
msgstr "我们现在就可以更新前面版本的协议了，比如对于阶数为 _d_ 的多项式： "

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:313
msgid "放着备用"
msgstr "放着备用"

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:314
msgid "协议过程"
msgstr "协议过程"

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:316
msgid ""
"前面提到 :  Prover 想要**在不揭示多项式的前提下**证明他的多项式**确实有这两个"
"根**，他需要去证明他的多项式 "
msgstr ""
"前面提到 :  Prover 想要**在不揭示多项式的前提下**证明他的多项式**确实有这两个"
"根**，他需要去证明他的多项式 "

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:316
msgid " 和一些任意多项式 "
msgstr " 和一些任意多项式 "

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:316
msgid " 的乘积，即： "
msgstr " 的乘积，即： "

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:318
msgid "  也称为 target polynomial"
msgstr "  也称为 target polynomial"

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:320
msgid "协议过程如下 : "
msgstr "协议过程如下 : "

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:322
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:339
msgid "**Verifier**"
msgstr "**Verifier**"

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:323
msgid "Verifier 自己取一个随机数 "
msgstr "Verifier 自己取一个随机数 "

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:323
msgid " ，作为秘密值"
msgstr " ，作为秘密值"

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:324
msgid "多项式指数 "
msgstr "多项式指数 "

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:324
msgid "  ( "
msgstr "  ( "

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:324
msgid "  )取值为 0，1，…，d 时分别计算出 "
msgstr "  )取值为 0，1，…，d 时分别计算出 "

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:324
msgid " 次幂的加密结果，即："
msgstr " 次幂的加密结果，即："

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:324
#: src/halo2/tmp/9-decomposed.md:133 src/halo2/tmp/9-decomposed.md:134
msgid "0.."
msgstr "0.."

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:324
msgid "  (注意是 "
msgstr "  (注意是 "

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:324
msgid " 次方)"
msgstr " 次方)"

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:325
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:271
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:272
msgid "代入 "
msgstr "代入 "

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:325
msgid " 自己计算未加密的 _target poly_  "
msgstr " 自己计算未加密的 _target poly_  "

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:325
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:264
msgid "  ,  "
msgstr "  ,  "

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:325
msgid " 留作验证备用"
msgstr " 留作验证备用"

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:326
msgid "将对 "
msgstr "将对 "

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:326
msgid " 的幂的加密值丢给 prover: "
msgstr " 的幂的加密值丢给 prover: "

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:326
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:332
#: src/zk-snarks/3-General-Purpose-Computation.md:153
#: src/zk-snarks/4-Construction-Properties.md:195
#: src/halo2/tmp/9-decomposed.md:192
msgid ".."
msgstr ".."

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:326
msgid "  , 即  "
msgstr "  , 即  "

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:327
msgid "看起来, 目前 Verifier 知道 "
msgstr "看起来, 目前 Verifier 知道 "

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:327
msgid " 的阶数 "
msgstr " 的阶数 "

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:329
msgid "**Prover :** "
msgstr "**Prover :** "

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:330
msgid "Prover 想证明它确实有这 2 个根 ( 即有 "
msgstr "Prover 想证明它确实有这 2 个根 ( 即有 "

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:330
msgid " 因式) : "
msgstr " 因式) : "

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:331
msgid "Prover 自己计算多项式 "
msgstr "Prover 自己计算多项式 "

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:332
msgid "使用 Verifier 给的加密值 "
msgstr "使用 Verifier 给的加密值 "

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:332
msgid ",  和自己的 "
msgstr ",  和自己的 "

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:332
msgid " 的系数 "
msgstr " 的系数 "

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:332
msgid " 计算 "
msgstr " 计算 "

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:332
#: src/halo2/tmp/9-decomposed.md:29 src/public goods/4-Proving-System.md:209
msgid " :  "
msgstr " :  "

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:334
msgid "同样计算 "
msgstr "同样计算 "

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:335
msgid "将结果 "
msgstr "将结果 "

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:335
msgid " (即 "
msgstr " (即 "

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:335
msgid " ) 和 "
msgstr " ) 和 "

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:335
msgid "  (即 "
msgstr "  (即 "

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:335
msgid " )提供给 verifier"
msgstr " )提供给 verifier"

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:337
msgid "注:  "
msgstr "注:  "

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:337
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:42
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:43
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:47
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:298
#: src/halo2/tmp/9-decomposed.md:22 src/halo2/tmp/9-decomposed.md:30
#: src/halo2/tmp/9-decomposed.md:40 src/halo2/tmp/9-decomposed.md:43
#: src/halo2/tmp/9-decomposed.md:47
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:194
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:236
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:281
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:325 src/public
#: goods/4-Proving-System.md:106 goods/4-Proving-System.md:107
#: goods/4-Proving-System.md:124 goods/4-Proving-System.md:126
#: goods/4-Proving-System.md:127 goods/4-Proving-System.md:151
#: goods/4-Proving-System.md:173
msgid "mod"
msgstr "mod"

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:337
msgid "  是加密函数 "
msgstr "  是加密函数 "

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:340
msgid "最后一步是 Verifier 校验 "
msgstr "最后一步是 Verifier 校验 "

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:341
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:30
#: src/zk-everything/zk-learning-miles/KZG.md:272 src/public
#: goods/第二章.md:54 goods/第二章.md:56 goods/第二章.md:175
msgid "即"
msgstr "即"

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:341
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:231
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:232
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:237
#: src/zk-snarks/5-Pinocchio-Protocol.md:157
msgid "=\\>"
msgstr "=\\>"

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:341
msgid "     就能知道 Prover 到底是否有根 ; 为什么呢 ?"
msgstr "     就能知道 Prover 到底是否有根 ; 为什么呢 ?"

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:342
msgid "注 :  "
msgstr "注 :  "

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:342
msgid " 是 Prover 传的 ,   "
msgstr " 是 Prover 传的 ,   "

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:342
msgid " 是 Verifier 自己算的 ; "
msgstr " 是 Verifier 自己算的 ; "

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:343
msgid "因为如果  "
msgstr "因为如果  "

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:343
msgid "  成立 (即 "
msgstr "  成立 (即 "

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:343
msgid "  成立) , 根据同态性质 , 即  "
msgstr "  成立) , 根据同态性质 , 即  "

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:343
msgid "  成立 ,  就说明 Prover 真的有多项式的解 "
msgstr "  成立 ,  就说明 Prover 真的有多项式的解 "

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:346
msgid "问题:  Prover 计算   "
msgstr "问题:  Prover 计算   "

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:346
msgid "  , `s` 是 Prover 不知道的,  那如何计算 "
msgstr "  , `s` 是 Prover 不知道的,  那如何计算 "

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:346
msgid ""
" 呢 ?  \n"
"1. 郭师:  "
msgstr ""
" 呢 ?  \n"
"1. 郭师:  "

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:347
msgid " 是一组 mod 过的 key-value , 是双方都知道的 2. 使用的是 "
msgstr " 是一组 mod 过的 key-value , 是双方都知道的 2. 使用的是 "

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:348
msgid "  而不是 "
msgstr "  而不是 "

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:348
msgid " 原值 3. ∵ "
msgstr " 原值 3. ∵ "

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:349
#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:350
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:76
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:224
#: src/zk-snarks/4-Construction-Properties.md:140
#: src/zk-snarks/4-Construction-Properties.md:247
#: src/zk-snarks/5-Pinocchio-Protocol.md:34
#: src/zk-snarks/5-Pinocchio-Protocol.md:106 src/halo2/tmp/9-decomposed.md:53
#: src/halo2/tmp/9-decomposed.md:87 src/halo2/tmp/9-decomposed.md:101
#: src/halo2/tmp/9-decomposed.md:108 src/halo2/tmp/9-decomposed.md:139
#: src/zk-everything/BabySNARK tutorial.md:185
#: src/zk-everything/zk-learning-miles/KZG.md:83
#: src/zk-everything/zk-learning-miles/KZG.md:93
#: src/zk-everything/zk-learning-miles/KZG.md:262
#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:398 src/zk-everything/zk-everything-joe/Hyrax.md:292
#: src/zk-everything/zk-everything-joe/Hyrax.md:297
#: src/zk-everything/zk-everything-joe/Hyrax.md:302
#: src/zk-everything/zk-everything-joe/Spartan.md:396 src/Nova/SuperNova.md:12
#: src/Nova/SuperNova.md:14 src/public goods/第二章.md:52
#: goods/第二章.md:58 goods/第二章.md:65 goods/第二章.md:89
#: goods/第二章.md:158
msgid "..."
msgstr "..."

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:349
msgid ""
"  \n"
"4. ∴ "
msgstr ""
"  \n"
"4. ∴ "

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:352
msgid ""
"_注意：g 是公开的, 双方都知道的 因为证明者并不知道跟 s 相关的任何信息，这就使"
"得他很难提出不合法但是能够匹配验证的计算结果。_"
msgstr ""
"_注意：g 是公开的, 双方都知道的 因为证明者并不知道跟 s 相关的任何信息，这就使"
"得他很难提出不合法但是能够匹配验证的计算结果。_"

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:355
msgid ""
"尽管这个协议中 prover 的灵活性有限，他依然可以在实际不使用 verifier 所提供的"
"加密值进行计算，而是通过其它的方式来伪造证明。例如，如果 prover 声称有一个满"
"足条件的多项式它只使用了 2 个求幂值 "
msgstr ""
"尽管这个协议中 prover 的灵活性有限，他依然可以在实际不使用 verifier 所提供的"
"加密值进行计算，而是通过其它的方式来伪造证明。例如，如果 prover 声称有一个满"
"足条件的多项式它只使用了 2 个求幂值 "

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:355
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:139
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:182
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:206
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:208
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:212
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:271
#: src/zk-snarks/3-General-Purpose-Computation.md:331
#: src/zk-snarks/3-General-Purpose-Computation.md:369
#: src/zk-snarks/5-Pinocchio-Protocol.md:83
#: src/zk-snarks/5-Pinocchio-Protocol.md:85
#: src/zk-snarks/5-Pinocchio-Protocol.md:205
#: src/zk-snarks/5-Pinocchio-Protocol.md:215
msgid "  和  "
msgstr "  和  "

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:355
msgid " ，这个在当前协议中是不能验证的"
msgstr " ，这个在当前协议中是不能验证的"

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:357
msgid ""
"even@安比实验室: 利用强同态加密这个工具，构造了一个相对较强的零知识证明协议。"
"但是如上文所述，这里还是存在一些问题—— **无法验证 prover 是否是真的使用了 "
"verifier 提供的值 "
msgstr ""
"even@安比实验室: 利用强同态加密这个工具，构造了一个相对较强的零知识证明协议。"
"但是如上文所述，这里还是存在一些问题—— **无法验证 prover 是否是真的使用了 "
"verifier 提供的值 "

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:357
msgid " 来构造证明的**。"
msgstr " 来构造证明的**。"

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:359
msgid "ref (IF 图挂了)"
msgstr "ref (IF 图挂了)"

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:360
msgid "https://secbit.io/blog/2019/12/25/learn-zk-snark-from-zero-part-one/"
msgstr "https://secbit.io/blog/2019/12/25/learn-zk-snark-from-zero-part-one/"

#: src/zk-snarks/1-Polynomial-Interaction-and-Proof.md:361
msgid "https://learnblockchain.cn/article/287"
msgstr "https://learnblockchain.cn/article/287"

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:9
msgid ""
"[Restricting a Polynomial (限制多项式)](#restricting-a-polynomial-限制多项式)"
msgstr ""
"[Restricting a Polynomial (限制多项式)](#restricting-a-polynomial-限制多项式)"

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:10
msgid "[Zero-Knowledge](#zero-knowledge)"
msgstr "[Zero-Knowledge](#zero-knowledge)"

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:11
msgid ""
"[Non-interactivity & Distributed Setup](#non-interactivity--distributed-"
"setup)"
msgstr ""
"[Non-interactivity & Distributed Setup](#non-interactivity--distributed-"
"setup)"

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:12
msgid ""
"[Pairing: Multiplication of Encrypted Values](#pairing-multiplication-of-"
"encrypted-values)"
msgstr ""
"[Pairing: Multiplication of Encrypted Values](#pairing-multiplication-of-"
"encrypted-values)"

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:13
msgid "[Trusted Party Setup](#trusted-party-setup)"
msgstr "[Trusted Party Setup](#trusted-party-setup)"

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:14
msgid "[Trusted MPC](#trusted-mpc)"
msgstr "[Trusted MPC](#trusted-mpc)"

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:15
msgid ""
"[Succinct Non-Interactive Argument of Knowledge of Polynomial](#succinct-non-"
"interactive-argument-of-knowledge-of-polynomial)"
msgstr ""
"[Succinct Non-Interactive Argument of Knowledge of Polynomial](#succinct-non-"
"interactive-argument-of-knowledge-of-polynomial)"

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:16
msgid "[Conclusion](#conclusion)"
msgstr "[Conclusion](#conclusion)"

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:18
msgid "Restricting a Polynomial (限制多项式)"
msgstr "Restricting a Polynomial (限制多项式)"

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:20
msgid "上文说到 : "
msgstr "上文说到 : "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:21
msgid "多项式的知识其实就是它的系数 "
msgstr "多项式的知识其实就是它的系数 "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:21
msgid " 的知识"
msgstr " 的知识"

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:22
msgid "上文的协议无法验证 `prover` 是否是真的使用了 verifier 提供的值 "
msgstr "上文的协议无法验证 `prover` 是否是真的使用了 verifier 提供的值 "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:22
msgid " 来构造证明"
msgstr " 来构造证明"

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:24
msgid ""
"协议中, 我们通过对秘密值 _s_ 的幂的加密值再进行求幂来对系数进行“赋值”。我们已"
"经限制了 prover 对 _s_ 幂的加密值的选择, 但是**这个限制并不是强制的** ，也就"
"是说，prover 可以使用任何可能的方法找到满足下面等式的值 "
msgstr ""
"协议中, 我们通过对秘密值 _s_ 的幂的加密值再进行求幂来对系数进行“赋值”。我们已"
"经限制了 prover 对 _s_ 幂的加密值的选择, 但是**这个限制并不是强制的** ，也就"
"是说，prover 可以使用任何可能的方法找到满足下面等式的值 "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:26
#: src/zk-snarks/3-General-Purpose-Computation.md:137
#: src/zk-snarks/5-Pinocchio-Protocol.md:69
#: src/halo2/tmp/2-Fibonacci-example-1.md:275 src/public goods/第二章.md:125
#: goods/第二章.md:146 goods/4-Proving-System.md:58
msgid "er"
msgstr "er"

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:26
msgid "es"
msgstr "es"

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:26
#: src/zk-snarks/3-General-Purpose-Computation.md:264
#: src/zk-snarks/3-General-Purpose-Computation.md:320
#: src/halo2/chap-1/index.md:11 src/public goods/第二章.md:80
#: goods/第二章.md:103
msgid "an"
msgstr "an"

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:27
msgid ""
"[https://arxiv.org/pdf/1906.07221.pdf](https://arxiv.org/pdf/1906.07221.pdf)"
msgstr ""
"[https://arxiv.org/pdf/1906.07221.pdf](https://arxiv.org/pdf/1906.07221.pdf)"

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:29
msgid "再用**寻找到的  "
msgstr "再用**寻找到的  "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:29
#: src/zk-snarks/3-General-Purpose-Computation.md:81
msgid "  来代替 "
msgstr "  来代替 "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:29
msgid "  交给 verifier**。 verifier 还是验证  "
msgstr "  交给 verifier**。 verifier 还是验证  "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:30
msgid "   是否成立 , 自然成立, 此时 "
msgstr "   是否成立 , 自然成立, 此时 "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:30
msgid " cheat 成功"
msgstr " cheat 成功"

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:32
msgid "所以 verifier 需要能够知道 prover 给出的  "
msgstr "所以 verifier 需要能够知道 prover 给出的  "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:32
msgid "  就是用 _s_ 幂的加密值 "
msgstr "  就是用 _s_ 幂的加密值 "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:32
msgid "  计算的, 而不是其它值算的"
msgstr "  计算的, 而不是其它值算的"

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:34
msgid "来看一个简单例子:  由 1 个变量和及其系数组成的一阶多项式 :  "
msgstr "来看一个简单例子:  由 1 个变量和及其系数组成的一阶多项式 :  "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:34
msgid " 对应的加密值为 "
msgstr " 对应的加密值为 "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:34
msgid " 。这里我们要做的就是确保 prover 是拿 "
msgstr " 。这里我们要做的就是确保 prover 是拿 "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:34
msgid "  的加密值 "
msgstr "  的加密值 "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:34
msgid ""
"  ，**而不是其他值**与其系数 _c_ 做同态相乘的。所以结果一定是这个形式（_c_ 为"
"任意值）： "
msgstr ""
"  ，**而不是其他值**与其系数 _c_ 做同态相乘的。所以结果一定是这个形式（_c_ 为"
"任意值）： "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:35
msgid ""
" 解决这个问题的一种方法就是用另一个“变换”的加密值做同样的操作，充当类似算术"
"中“校验和”_（Checksum）_ 的作用，以此确保结果是原始值的求幂值。"
msgstr ""
" 解决这个问题的一种方法就是用另一个“变换”的加密值做同样的操作，充当类似算术"
"中“校验和”_（Checksum）_ 的作用，以此确保结果是原始值的求幂值。"

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:38
msgid ""
"这个是通过 **Knowledge-of-Exponent Assumption (简称 KEA)** 方法来实现的，在 "
"[Dam91](https://secbit.io/blog/2020/01/01/learn-zk-snark-from-zero-part-two/"
"#bd26)  中有介绍，更精准一点（注意 "
msgstr ""
"这个是通过 **Knowledge-of-Exponent Assumption (简称 KEA)** 方法来实现的，在 "
"[Dam91](https://secbit.io/blog/2020/01/01/learn-zk-snark-from-zero-part-two/"
"#bd26)  中有介绍，更精准一点（注意 "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:38
msgid "  2 个字符的不同）说："
msgstr "  2 个字符的不同）说："

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:40
msgid "Alice 有一个值 "
msgstr "Alice 有一个值 "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:40
msgid " ，她想要 Bob 对其进行任意指数的求幂（ "
msgstr " ，她想要 Bob 对其进行任意指数的求幂（ "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:40
msgid ""
"  is a generator of a finite field group used），唯一的要求是 Bob 只能对 "
msgstr ""
"  is a generator of a finite field group used），唯一的要求是 Bob 只能对 "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:40
msgid " 进行求幂，为保证这一点，Alice 要："
msgstr " 进行求幂，为保证这一点，Alice 要："

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:41
msgid "选择一个随机数  "
msgstr "选择一个随机数  "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:42
#: src/zk-snarks/4-Construction-Properties.md:197
#: src/zk-snarks/5-Pinocchio-Protocol.md:201
msgid "计算  "
msgstr "计算  "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:43
msgid "提供一个元组  "
msgstr "提供一个元组  "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:43
msgid "  给 Bob, 然后让他对**这 2 个值执行任意的求幂运算**，返回结果元组  "
msgstr "  给 Bob, 然后让他对**这 2 个值执行任意的求幂运算**，返回结果元组  "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:43
msgid "     ( The α-shift remains the same. i.e.  "
msgstr "     ( The α-shift remains the same. i.e.  "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:43
msgid "   )"
msgstr "   )"

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:45
msgid "因为 Bob 无法从元组  "
msgstr "因为 Bob 无法从元组  "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:45
msgid " 中提取 "
msgstr " 中提取 "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:45
msgid "  的值 (暴力破解也难以实现)，那么 Bob 只能老老实实地生成有效元组  "
msgstr "  的值 (暴力破解也难以实现)，那么 Bob 只能老老实实地生成有效元组  "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:46
msgid "Bob 选择一个值 "
msgstr "Bob 选择一个值 "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:46
msgid "    ( "
msgstr "    ( "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:46
msgid " 可以类比上例的  "
msgstr " 可以类比上例的  "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:46
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:111
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:298
#: src/zk-snarks/4-Construction-Properties.md:331
#: src/zk-snarks/5-Pinocchio-Protocol.md:83 src/halo2/tmp/9-decomposed.md:44
#: src/halo2/tmp/9-decomposed.md:48 src/public goods/4-Proving-System.md:106
#: goods/4-Proving-System.md:126
msgid " )"
msgstr " )"

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:47
#: src/zk-snarks/4-Construction-Properties.md:205
msgid "计算 "
msgstr "计算 "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:47
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:224
#: src/zk-snarks/5-Pinocchio-Protocol.md:98
msgid "  和   "
msgstr "  和   "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:48
msgid "返回 "
msgstr "返回 "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:50
msgid "有了 Bob 回复的 "
msgstr "有了 Bob 回复的 "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:50
msgid "  和自己的  "
msgstr "  和自己的  "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:50
msgid "  ，Alice 就可以验证等式："
msgstr "  ，Alice 就可以验证等式："

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:55
msgid "结论是："
msgstr "结论是："

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:56
msgid "Bob 在元组的两个值的计算上都用了同一个指数（即 "
msgstr "Bob 在元组的两个值的计算上都用了同一个指数（即 "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:56
#: src/zk-snarks/5-Pinocchio-Protocol.md:139
msgid " ）"
msgstr " ）"

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:57
msgid "Bob 只能用 Alice 原本的元组  "
msgstr "Bob 只能用 Alice 原本的元组  "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:57
msgid "  来保持  `α-shift`"
msgstr "  来保持  `α-shift`"

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:58
msgid "构造验证值  "
msgstr "构造验证值  "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:58
msgid "  的唯一方式是用同一个指数 "
msgstr "  的唯一方式是用同一个指数 "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:59
msgid "Alice 并不知道 "
msgstr "Alice 并不知道 "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:59
msgid " ，这和 Bob 不知道  "
msgstr " ，这和 Bob 不知道  "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:59
msgid "  的原因一样"
msgstr "  的原因一样"

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:60
msgid ""
"虽然 _c_ 是被加密的，但它的可能取值范围并不足够大到保持其零知识的性质，这个问"
"题我们将在后面“零知识”那一节解决。"
msgstr ""
"虽然 _c_ 是被加密的，但它的可能取值范围并不足够大到保持其零知识的性质，这个问"
"题我们将在后面“零知识”那一节解决。"

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:62
msgid "最后这个协议提供了一个证明给 Alice ，Bob 确实是用他知道的某个值对 "
msgstr "最后这个协议提供了一个证明给 Alice ，Bob 确实是用他知道的某个值对 "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:62
msgid ""
"  进行求幂的，而且他也不能做别的任何操作，例如：乘法，加法，因为这样就会破"
"坏  `α-shift` (α-变换关系)"
msgstr ""
"  进行求幂的，而且他也不能做别的任何操作，例如：乘法，加法，因为这样就会破"
"坏  `α-shift` (α-变换关系)"

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:64
msgid ""
"在同态加密中，求幂是对被加密值进行乘法运算。我们可以应用这个结构到一个简单的"
"系数多项式  "
msgstr ""
"在同态加密中，求幂是对被加密值进行乘法运算。我们可以应用这个结构到一个简单的"
"系数多项式  "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:64
msgid "  的例子中："
msgstr "  的例子中："

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:66
msgid "verifier 选择随机数 "
msgstr "verifier 选择随机数 "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:66
msgid "  ，然后令 "
msgstr "  ，然后令 "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:66
msgid " , 提供一阶及其 \"shift\" 的计算值： "
msgstr " , 提供一阶及其 \"shift\" 的计算值： "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:67
msgid "prover 代入其私有的系数 "
msgstr "prover 代入其私有的系数 "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:67
msgid " 计算:  "
msgstr " 计算:  "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:67
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:68
msgid "cs"
msgstr "cs"

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:68
#: src/zk-everything/zk-everything-joe/Hyrax.md:227
msgid "verifier 验证： "
msgstr "verifier 验证： "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:70
msgid "这个结构“限制” prover 只能用 verifier 提供的加密的  "
msgstr "这个结构“限制” prover 只能用 verifier 提供的加密的  "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:70
msgid "  进行计算，因而 prover 只能将系数 "
msgstr "  进行计算，因而 prover 只能将系数 "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:70
msgid " 赋给 verifier 提供的多项式。"
msgstr " 赋给 verifier 提供的多项式。"

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:72
msgid ""
"现在我们可以扩展这种单项式(monomial) 上的方法到多项式上，因为计算是先将每项的"
"分配分开计算然后再 “同态地” 相加在一起的（这个方法是 Jens Groth 在 [Gro10]"
"(https://secbit.io/blog/2020/01/01/learn-zk-snark-from-zero-part-two/#3068) "
"中介绍的）。"
msgstr ""
"现在我们可以扩展这种单项式(monomial) 上的方法到多项式上，因为计算是先将每项的"
"分配分开计算然后再 “同态地” 相加在一起的（这个方法是 Jens Groth 在 [Gro10]"
"(https://secbit.io/blog/2020/01/01/learn-zk-snark-from-zero-part-two/#3068) "
"中介绍的）。"

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:74
msgid "所以如果 "
msgstr "所以如果 "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:74
msgid " 给 "
msgstr " 给 "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:74
msgid " 一个 "
msgstr " 一个 "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:74
msgid " 的幂及其加密 `shifted` ，"
msgstr " 的幂及其加密 `shifted` ，"

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:74
msgid ""
" 就可以计算原始的和 `shift` 后的多项式，, where the same check must hold.   "
"对于阶数为  "
msgstr ""
" 就可以计算原始的和 `shift` 后的多项式，, where the same check must hold.   "
"对于阶数为  "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:74
msgid "  的多项式："
msgstr "  的多项式："

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:76
msgid "**verifier** :  提供加密值  "
msgstr "**verifier** :  提供加密值  "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:76
msgid " 和他们的 `α-shift`   "
msgstr " 和他们的 `α-shift`   "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:76
msgid "  **prover** :"
msgstr "  **prover** :"

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:78
msgid "计算给定的带有 "
msgstr "计算给定的带有 "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:78
msgid " 的幂的 encrypted polynomial :  "
msgstr " 的幂的 encrypted polynomial :  "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:81
msgid ""
"evaluates encrypted \"**shifted**\" polynomial  with the corresponding  `α-"
"shift`  of the powers of "
msgstr ""
"evaluates encrypted \"**shifted**\" polynomial  with the corresponding  `α-"
"shift`  of the powers of "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:81
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:191
#: src/zk-snarks/3-General-Purpose-Computation.md:214
#: src/zk-snarks/3-General-Purpose-Computation.md:300
#: src/zk-snarks/4-Construction-Properties.md:327
msgid "  : "
msgstr "  : "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:82
msgid "将计算结果  "
msgstr "将计算结果  "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:82
msgid "  发给 verfier"
msgstr "  发给 verfier"

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:84
msgid "**verfier** 校验 :  "
msgstr "**verfier** 校验 :  "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:88
msgid "前面的多项式例子  "
msgstr "前面的多项式例子  "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:88
msgid "   就变成了："
msgstr "   就变成了："

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:92
msgid ""
"现在我们就可以确保 prover 是**用了 verifier 提供的多项式**而不是其它值做计算"
"的了，因为别的方法不能够保持 `α-shift` 变换。 当然如果 verifier 想要确保在 "
"prover 的多项式中排除了 "
msgstr ""
"现在我们就可以确保 prover 是**用了 verifier 提供的多项式**而不是其它值做计算"
"的了，因为别的方法不能够保持 `α-shift` 变换。 当然如果 verifier 想要确保在 "
"prover 的多项式中排除了 "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:92
msgid " 的某些次幂，如 "
msgstr " 的某些次幂，如 "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:92
msgid " ， 他就不提供对应的密文及其变换："
msgstr " ， 他就不提供对应的密文及其变换："

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:94
msgid ""
"与前面的协议相比，我们现在已经有了一个比较健壮的协议。但是尽管已经做了加密，"
"在 _零知识_ 性质上也还依然存在一个很明显的缺陷："
msgstr ""
"与前面的协议相比，我们现在已经有了一个比较健壮的协议。但是尽管已经做了加密，"
"在 _零知识_ 性质上也还依然存在一个很明显的缺陷："

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:96
msgid "即即使理论上多项式参数 "
msgstr "即即使理论上多项式参数 "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:96
msgid ""
"  是一个很广的取值范围内的值，在实际中, 这个范围可能很有限（比如前例中的 "
"6），这就意味着 verifier 可以在有限范围的系数组合中进行暴力破解，获取 "
msgstr ""
"  是一个很广的取值范围内的值，在实际中, 这个范围可能很有限（比如前例中的 "
"6），这就意味着 verifier 可以在有限范围的系数组合中进行暴力破解，获取 "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:96
msgid " 的知识 , 最终计算出一个与 "
msgstr " 的知识 , 最终计算出一个与 "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:96
msgid " 的答案相等的结果 : "
msgstr " 的答案相等的结果 : "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:98
msgid "比如 "
msgstr "比如 "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:98
msgid ""
" 将每个系数的取值范围定为 100，多项式阶数为 2，那么大概只会有 100 万种不同的"
"组合，可以认为 "
msgstr ""
" 将每个系数的取值范围定为 100，多项式阶数为 2，那么大概只会有 100 万种不同的"
"组合，可以认为 "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:98
msgid " 暴力破解 "
msgstr " 暴力破解 "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:98
msgid " 的密钥只需要少于 100 万次的迭代"
msgstr " 的密钥只需要少于 100 万次的迭代"

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:100
msgid ""
"更重要的是，对于一个安全的协议, 即使在只有 1 个系数，值为 1 的例子中，安全协"
"议也必须能够保证其安全 !!!"
msgstr ""
"更重要的是，对于一个安全的协议, 即使在只有 1 个系数，值为 1 的例子中，安全协"
"议也必须能够保证其安全 !!!"

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:102
msgid ""
"even@安比实验室: 有了 KEA，就可以约束 prover 只能通过用 verifier 提供的加密值"
"去构造证明了。严格点讲，这里是用的是 KEA的扩展版本，叫做 The q-power "
"Knowledge of Exponent Assumption."
msgstr ""
"even@安比实验室: 有了 KEA，就可以约束 prover 只能通过用 verifier 提供的加密值"
"去构造证明了。严格点讲，这里是用的是 KEA的扩展版本，叫做 The q-power "
"Knowledge of Exponent Assumption."

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:105
msgid "Zero-Knowledge"
msgstr "Zero-Knowledge"

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:107
msgid "上文说到  "
msgstr "上文说到  "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:107
msgid "  能从 "
msgstr "  能从 "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:107
msgid "  发送的数据中暴力破解 "
msgstr "  发送的数据中暴力破解 "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:107
msgid "  ，来看一下 those provided values (the proof) :  "
msgstr "  ，来看一下 those provided values (the proof) :  "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:110
msgid "双方都参与到了下面的 checks ："
msgstr "双方都参与到了下面的 checks ："

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:111
msgid "      (poly "
msgstr "      (poly "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:111
msgid " has roots of "
msgstr " has roots of "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:112
msgid "         (poly of a correct form is used)"
msgstr "         (poly of a correct form is used)"

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:114
msgid ""
"问题是我们如何更换(一种新的)证明 (alter the proof) 使得这些 checks 依然有效，"
"同时又保证没有知识能被提取？"
msgstr ""
"问题是我们如何更换(一种新的)证明 (alter the proof) 使得这些 checks 依然有效，"
"同时又保证没有知识能被提取？"

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:116
msgid "Chap-1 给了一个提示： 我们可以使用随机值 "
msgstr "Chap-1 给了一个提示： 我们可以使用随机值 "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:116
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:119
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:121
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:122
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:126
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:128
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:132
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:273
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:274
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:278
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:280
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:283
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:284
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:299
#: src/zk-snarks/3-General-Purpose-Computation.md:120
#: src/zk-snarks/5-Pinocchio-Protocol.md:129
#: src/zk-snarks/5-Pinocchio-Protocol.md:132
#: src/zk-snarks/5-Pinocchio-Protocol.md:133
#: src/zk-snarks/5-Pinocchio-Protocol.md:134
#: src/zk-snarks/5-Pinocchio-Protocol.md:135
#: src/zk-snarks/5-Pinocchio-Protocol.md:137
#: src/zk-snarks/5-Pinocchio-Protocol.md:141
#: src/zk-snarks/5-Pinocchio-Protocol.md:142
#: src/zk-snarks/5-Pinocchio-Protocol.md:145
#: src/zk-snarks/5-Pinocchio-Protocol.md:146
#: src/zk-snarks/5-Pinocchio-Protocol.md:147
#: src/zk-snarks/5-Pinocchio-Protocol.md:151
#: src/zk-snarks/5-Pinocchio-Protocol.md:152
#: src/zk-snarks/5-Pinocchio-Protocol.md:154
#: src/zk-snarks/5-Pinocchio-Protocol.md:155
#: src/zk-snarks/5-Pinocchio-Protocol.md:157
#: src/zk-snarks/5-Pinocchio-Protocol.md:159
#: src/zk-snarks/5-Pinocchio-Protocol.md:160
#: src/zk-snarks/5-Pinocchio-Protocol.md:163
#: src/zk-snarks/5-Pinocchio-Protocol.md:165
#: src/zk-snarks/5-Pinocchio-Protocol.md:166
#: src/zk-snarks/5-Pinocchio-Protocol.md:168
#: src/zk-snarks/5-Pinocchio-Protocol.md:170
#: src/zk-snarks/5-Pinocchio-Protocol.md:200
#: src/zk-snarks/5-Pinocchio-Protocol.md:202
#: src/zk-snarks/5-Pinocchio-Protocol.md:204
#: src/zk-snarks/5-Pinocchio-Protocol.md:207 src/zk-everything/BabySNARK
#: tutorial.md:140
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:176
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:188
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:218
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:230
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:262
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:275
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:307
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:319
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:349
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:361
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:430
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:436
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:442
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:446
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:454
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:460
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:514
#: src/zk-everything/zk-everything-joe/Hyrax.md:122
#: src/zk-everything/zk-everything-joe/Hyrax.md:147
#: src/zk-everything/zk-everything-joe/Hyrax.md:149
#: src/zk-everything/zk-everything-joe/Hyrax.md:214
#: src/zk-everything/zk-everything-joe/Hyrax.md:216
#: src/zk-everything/zk-everything-joe/Hyrax.md:223
#: src/zk-everything/zk-everything-joe/Hyrax.md:228 src/public
#: goods/第二章.md:36 goods/第二章.md:44
msgid "δ"
msgstr "δ"

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:116
msgid "  (delta)来 `“shift”` 这些值,  如  "
msgstr "  (delta)来 `“shift”` 这些值,  如  "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:116
msgid ""
"  \n"
"现在，为了提取知识，就必须首先要知道一个不可知的值 _δ_。并且，这种随机化在统"
"计学上与随机值没有什么区别。  (原文:  in order to extract the knowledge, one "
"first needs to find _δ_ which is considered infeasible(不可行的). Moreover, "
"such randomization is statistically indistinguishable from random.)"
msgstr ""
"  \n"
"现在，为了提取知识，就必须首先要知道一个不可知的值 _δ_。并且，这种随机化在统"
"计学上与随机值没有什么区别。  (原文:  in order to extract the knowledge, one "
"first needs to find _δ_ which is considered infeasible(不可行的). Moreover, "
"such randomization is statistically indistinguishable from random.)"

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:119
msgid "为了保持这种关系，我们在 "
msgstr "为了保持这种关系，我们在 "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:119
msgid " 的 checks 中验证一下。等式的每一边都有 prover 提供的值  "
msgstr " 的 checks 中验证一下。等式的每一边都有 prover 提供的值  "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:119
msgid "   , 如果我们用 "
msgstr "   , 如果我们用 "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:119
msgid "   来“变换” **每一个**值，那么等式应该可以保持相等"
msgstr "   来“变换” **每一个**值，那么等式应该可以保持相等"

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:121
msgid "Concretely (具体来讲)，就是 prover 选择一个随机值 "
msgstr "Concretely (具体来讲)，就是 prover 选择一个随机值 "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:121
msgid ""
"  ，并用它对证明中的值进行求幂 (and exponentiates his proof values with "
msgstr ""
"  ，并用它对证明中的值进行求幂 (and exponentiates his proof values with "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:121
msgid "  ) "
msgstr "  ) "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:123
msgid "不要怕,  "
msgstr "不要怕,  "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:123
msgid "  我们在前面都已经见过了 "
msgstr "  我们在前面都已经见过了 "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:125
msgid "and provides to the "
msgstr "and provides to the "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:125
msgid "  for verification: "
msgstr "  for verification: "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:126
msgid "ik"
msgstr "ik"

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:126
msgid ""
" 合并一下(consolidation),  可以看到校验的等式依然成立 (the check still "
"holds) : "
msgstr ""
" 合并一下(consolidation),  可以看到校验的等式依然成立 (the check still "
"holds) : "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:130
msgid ""
"注意零知识是如何轻而易举地融入到这个结构中去的，这通常也被称为“无成本的”零知"
"识"
msgstr ""
"注意零知识是如何轻而易举地融入到这个结构中去的，这通常也被称为“无成本的”零知"
"识"

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:132
msgid ""
"even@安比实验室: 借助这个”无成本的”技巧，就可以轻松实现 zero-knowledge 了。但"
"是这里实现零知识的方法和实际中的 Pinocchio 协议，还有 Groth16 方案略有不同。"
"实际方案中是用乘法乘以  "
msgstr ""
"even@安比实验室: 借助这个”无成本的”技巧，就可以轻松实现 zero-knowledge 了。但"
"是这里实现零知识的方法和实际中的 Pinocchio 协议，还有 Groth16 方案略有不同。"
"实际方案中是用乘法乘以  "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:134
msgid "Non-interactivity & Distributed Setup"
msgstr "Non-interactivity & Distributed Setup"

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:136
msgid ""
"到现在为止，我们已经讲完了一个交互式的零知识方案。但为什么我们还需要有非交互"
"式呢？因为交互式证明只对 original "
msgstr ""
"到现在为止，我们已经讲完了一个交互式的零知识方案。但为什么我们还需要有非交互"
"式呢？因为交互式证明只对 original "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:136
msgid " 有效，其他任何 "
msgstr " 有效，其他任何 "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:136
msgid " 都不能信任这个 proof，因为："
msgstr " 都不能信任这个 proof，因为："

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:137
msgid " 可以和 "
msgstr " 可以和 "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:137
msgid " 串通，告诉 "
msgstr " 串通，告诉 "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:137
msgid "  secret params  "
msgstr "  secret params  "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:137
msgid "，有了这些参数 "
msgstr "，有了这些参数 "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:137
msgid " 就肆意伪造 proof 来四处行骗"
msgstr " 就肆意伪造 proof 来四处行骗"

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:138
msgid "  也可以使用同样的方法自己伪造 proof "
msgstr "  也可以使用同样的方法自己伪造 proof "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:139
msgid " 必须保存 "
msgstr " 必须保存 "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:139
msgid ""
"  直到所有相关证明被验证完毕，这就带来了一个可能造成秘密参数泄漏的额外攻击面 "
"(which allows an extra attack surface with possible leakage of secret "
"parameters)"
msgstr ""
"  直到所有相关证明被验证完毕，这就带来了一个可能造成秘密参数泄漏的额外攻击面 "
"(which allows an extra attack surface with possible leakage of secret "
"parameters)"

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:141
msgid "因而 "
msgstr "因而 "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:141
msgid " 就需要分别和每次每个 "
msgstr " 就需要分别和每次每个 "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:141
msgid " 都做交互来证明一个 statement（该多项式的知识）"
msgstr " 都做交互来证明一个 statement（该多项式的知识）"

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:143
msgid "尽管 `交互式证明` 有它的用处，例如一个 "
msgstr "尽管 `交互式证明` 有它的用处，例如一个 "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:143
msgid " 只想让一个特定的 "
msgstr " 只想让一个特定的 "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:143
msgid ""
" （称为目标 verifier，更多的信息参见 [JSI96](https://medium.com/@imolfar/why-"
"and-how-zk-snark-works-3-non-interactivity-distributed-setup-"
"c0310c0e5d1c#4b56) ）确信，就不能再重复利用同一个证明去向别人证明这个声明了，"
"但是当一个 prover 想让众多的参与者同时或者永久地确信的话，这种方法就很低效"
"了。 **prover 需要保持一直在线并且对每一个 verifier 执行相同的计算**。"
msgstr ""
" （称为目标 verifier，更多的信息参见 [JSI96](https://medium.com/@imolfar/why-"
"and-how-zk-snark-works-3-non-interactivity-distributed-setup-"
"c0310c0e5d1c#4b56) ）确信，就不能再重复利用同一个证明去向别人证明这个声明了，"
"但是当一个 prover 想让众多的参与者同时或者永久地确信的话，这种方法就很低效"
"了。 **prover 需要保持一直在线并且对每一个 verifier 执行相同的计算**。"

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:145
msgid ""
"因而，我们就需要一个可以被**重复使用，公开，可信，又不会被滥用的秘密参数**"
msgstr ""
"因而，我们就需要一个可以被**重复使用，公开，可信，又不会被滥用的秘密参数**"

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:147
msgid "Pairing: Multiplication of Encrypted Values"
msgstr "Pairing: Multiplication of Encrypted Values"

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:149
msgid ""
"Cryptographic pairings (bilinear map) is a mathematical construction, "
"denoted as a function  "
msgstr ""
"Cryptographic pairings (bilinear map) is a mathematical construction, "
"denoted as a function  "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:151
msgid "它被给予一个数据集中的 2 encrypted inputs  (e.g.   "
msgstr "它被给予一个数据集中的 2 encrypted inputs  (e.g.   "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:151
msgid " ) , 可以将他们确定性地映射到另一组不同的输出数据集上的它们的乘积，即  "
msgstr ""
" ) , 可以将他们确定性地映射到另一组不同的输出数据集上的它们的乘积，即  "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:152
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:169
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:170
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:175
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:176
#: src/zk-snarks/3-General-Purpose-Computation.md:112
#: src/zk-snarks/4-Construction-Properties.md:105
#: src/zk-snarks/4-Construction-Properties.md:315 src/halo2/chap-1/index.md:31
#: src/halo2/chap-1/index.md:32 src/halo2/chap-1/index.md:33
#: src/zk-everything/zk-learning-miles/KZG.md:170
msgid "ab"
msgstr "ab"

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:156
msgid ""
"因为源数据集和输出数据集（通常被称为一个 `group` ）是不同的，所以一个配对的结"
"果不能用做其他配对计算的输入。我们可以将输出集（也称为“目标集”）视为“不同的宇"
"宙”。因而我们不能用另一个加密值乘以结果，而且配对这个名称本身也表明了，我们一"
"次只能将两个加密值相乘"
msgstr ""
"因为源数据集和输出数据集（通常被称为一个 `group` ）是不同的，所以一个配对的结"
"果不能用做其他配对计算的输入。我们可以将输出集（也称为“目标集”）视为“不同的宇"
"宙”。因而我们不能用另一个加密值乘以结果，而且配对这个名称本身也表明了，我们一"
"次只能将两个加密值相乘"

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:158
msgid ""
"even@安比实验室: 换句话说，配对只支持 `x * y` 这种两个值的乘法，但不支持三个"
"或以上的值相乘，比如不支持  `x * y * z` "
msgstr ""
"even@安比实验室: 换句话说，配对只支持 `x * y` 这种两个值的乘法，但不支持三个"
"或以上的值相乘，比如不支持  `x * y * z` "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:160
msgid "Pairing 类似于一个 "
msgstr "Pairing 类似于一个 "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:160
#: src/zk-snarks/3-General-Purpose-Computation.md:366 src/public
#: goods/4-Proving-System.md:55 goods/4-Proving-System.md:169
#: goods/4-Proving-System.md:171 goods/4-Proving-System.md:177
msgid "ha"
msgstr "ha"

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:160
msgid ""
" ，将所有可能的输入值映射到可能的输出值的集合中的一个元素上，通常情况下这个过"
"程是不可逆的"
msgstr ""
" ，将所有可能的输入值映射到可能的输出值的集合中的一个元素上，通常情况下这个过"
"程是不可逆的"

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:162
msgid ""
"注意：乍一眼看过去，这个限制可能会阻碍相关功能的实现，但在 zk-SNARK 中这反而"
"是保证安全模式的最重要性质，参见前文 **remark 3.3**"
msgstr ""
"注意：乍一眼看过去，这个限制可能会阻碍相关功能的实现，但在 zk-SNARK 中这反而"
"是保证安全模式的最重要性质，参见前文 **remark 3.3**"

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:164
msgid "配对函数  "
msgstr "配对函数  "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:164
msgid ""
"  可以初步（and technically incorrect）类比(mathematical analogy) 成:   “交换"
"(swap)” 每一个输出的基数(`base`) 和 指数(`exponent`) 的操作，使得基数 "
msgstr ""
"  可以初步（and technically incorrect）类比(mathematical analogy) 成:   “交换"
"(swap)” 每一个输出的基数(`base`) 和 指数(`exponent`) 的操作，使得基数 "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:164
msgid "  在交换过程中被修改成了指数的方式，即  "
msgstr "  在交换过程中被修改成了指数的方式，即  "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:164
msgid "   , “被转换”的两个输入一起被修改了，这样原始值 "
msgstr "   , “被转换”的两个输入一起被修改了，这样原始值 "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:164
msgid "  就在同一个指数下相乘了，即："
msgstr "  就在同一个指数下相乘了，即："

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:166
msgid ""
"e(g^\\textcolor{red}{a},g^\\textcolor{red}{b}) =a^g \\cdot b^g "
"=(\\textcolor{red}{ab})^g"
msgstr ""
"e(g^\\textcolor{red}{a},g^\\textcolor{red}{b}) =a^g \\cdot b^g "
"=(\\textcolor{red}{ab})^g"

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:169
msgid ""
"因而因为基数(base) 在“转换”中被修改了，所以在另一个配对中不能再使用这个结果  "
msgstr ""
"因而因为基数(base) 在“转换”中被修改了，所以在另一个配对中不能再使用这个结果  "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:169
msgid " （ 即："
msgstr " （ 即："

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:169
msgid " ）构造出想要的加密乘积 "
msgstr " ）构造出想要的加密乘积 "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:169
msgid " 了。配对的核心性质可以表示成下面的等式： "
msgstr " 了。配对的核心性质可以表示成下面的等式： "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:172
msgid "Note：配对操作是通过改变椭圆曲线来实现这些性质的，现在我们用的符号 "
msgstr "Note：配对操作是通过改变椭圆曲线来实现这些性质的，现在我们用的符号 "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:172
msgid " 就代表曲线上一个由生成元 "
msgstr " 就代表曲线上一个由生成元 "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:172
msgid ""
"  自相加了 n 次的点，而不是我们前面用到的乘法群生成元。 The survey [DBS04]"
"(https://medium.com/@imolfar/why-and-how-zk-snark-works-3-non-interactivity-"
"distributed-setup-c0310c0e5d1c#0ea5) provides a starting point for "
"exploration of the cryptographic pairings."
msgstr ""
"  自相加了 n 次的点，而不是我们前面用到的乘法群生成元。 The survey [DBS04]"
"(https://medium.com/@imolfar/why-and-how-zk-snark-works-3-non-interactivity-"
"distributed-setup-c0310c0e5d1c#0ea5) provides a starting point for "
"exploration of the cryptographic pairings."

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:175
msgid "Technically, 配对的结果是目标集(target set) 的不同 generator "
msgstr "Technically, 配对的结果是目标集(target set) 的不同 generator "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:175
msgid "  下原始值(raw value) 的加密产物(encrypted product)，即 "
msgstr "  下原始值(raw value) 的加密产物(encrypted product)，即 "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:175
msgid ""
" 。 因此它具有同态加密的性质，例如，我们可以将多个配对的加密乘积加在一起： "
msgstr ""
" 。 因此它具有同态加密的性质，例如，我们可以将多个配对的加密乘积加在一起： "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:177
msgid "注意：配对操作是通过改变椭圆曲线来实现这些性质的，现在我们用的符号  "
msgstr "注意：配对操作是通过改变椭圆曲线来实现这些性质的，现在我们用的符号  "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:177
msgid "  就代表曲线上一个由 "
msgstr "  就代表曲线上一个由 "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:177
msgid " 自相加了 "
msgstr " 自相加了 "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:177
msgid ""
" 次的点，而不是我们前面用到的乘法群生成元。 [DBS04](https://medium.com/"
"@imolfar/why-and-how-zk-snark-works-3-non-interactivity-distributed-setup-"
"c0310c0e5d1c#0ea5) 这个 survey 提供了学习 Pairing 的 starting point"
msgstr ""
" 次的点，而不是我们前面用到的乘法群生成元。 [DBS04](https://medium.com/"
"@imolfar/why-and-how-zk-snark-works-3-non-interactivity-distributed-setup-"
"c0310c0e5d1c#0ea5) 这个 survey 提供了学习 Pairing 的 starting point"

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:180
msgid "Trusted Party Setup"
msgstr "Trusted Party Setup"

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:182
msgid ""
"有了 cryptographic pairings，我们现在就准备去设置安全公开且可复用的参数了。假"
"定一下我们让一个诚实的参与方来生成秘密值  "
msgstr ""
"有了 cryptographic pairings，我们现在就准备去设置安全公开且可复用的参数了。假"
"定一下我们让一个诚实的参与方来生成秘密值  "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:182
msgid " .   一旦 "
msgstr " .   一旦 "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:182
msgid "  / "
msgstr "  / "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:182
msgid "  的幂及其对应的 `α-shift` 被加密，那么原始数据就必须要被删除 (  "
msgstr "  的幂及其对应的 `α-shift` 被加密，那么原始数据就必须要被删除 (  "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:182
msgid " ) : "
msgstr " ) : "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:185
msgid ""
"这些参数通常被称为 _common reference string_ (CRS) .  CRS 生成后，任何的 "
msgstr ""
"这些参数通常被称为 _common reference string_ (CRS) .  CRS 生成后，任何的 "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:185
msgid ""
" 都可以使用它来构造 `非交互式的` 零知识证明协议。CRS 的优化版本将包含目标多项"
"式的加密值 "
msgstr ""
" 都可以使用它来构造 `非交互式的` 零知识证明协议。CRS 的优化版本将包含目标多项"
"式的加密值 "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:185
msgid "   (While non-crucial)"
msgstr "   (While non-crucial)"

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:187
msgid "把 `CRS` 分成两组  ："
msgstr "把 `CRS` 分成两组  ："

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:188
msgid "_proving key_ (alse called _evaluation key_) :  "
msgstr "_proving key_ (alse called _evaluation key_) :  "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:189
msgid "_verification key_ :  "
msgstr "_verification key_ :  "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:191
msgid ""
"使用 Pairing 就可以将 `加密值相乘` (记得第一节说过, 加密值不能直接相乘, 会破"
"坏同态的性质)， "
msgstr ""
"使用 Pairing 就可以将 `加密值相乘` (记得第一节说过, 加密值不能直接相乘, 会破"
"坏同态的性质)， "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:191
msgid "  就可以在协议的最后一步验证多项式了 (有了 _verification key_ ，"
msgstr "  就可以在协议的最后一步验证多项式了 (有了 _verification key_ ，"

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:191
msgid "  就可以处理从 "
msgstr "  就可以处理从 "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:191
msgid " 那里得到的加密多项式的值  "
msgstr " 那里得到的加密多项式的值  "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:193
msgid "在加密空间中校验  "
msgstr "在加密空间中校验  "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:193
msgid " ：  "
msgstr " ：  "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:195
msgid "Chech polynomial **Restriction** :  "
msgstr "Chech polynomial **Restriction** :  "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:196
msgid " Recall what is "
msgstr " Recall what is "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:197
msgid "  \\[\\[\\#Zero-Knowledge\\]\\] :  "
msgstr "  \\[\\[\\#Zero-Knowledge\\]\\] :  "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:200
msgid "Trusted MPC"
msgstr "Trusted MPC"

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:202
msgid ""
"尽管受信任设置很有效率，但众多 CRS 用户也必须要相信生成者确实删除了 α 和 s ，"
"这一点没有办法证明（_proof of ignorance_ 是一个正在积极研究的领域 [DK18]"
"(https://medium.com/@imolfar/why-and-how-zk-snark-works-3-non-interactivity-"
"distributed-setup-c0310c0e5d1c#2823)），所以这种方法依然是无效的。因而很有必"
"要去最小化或者消除这种信任。否则一个不诚实的参与方就可以构造假证明而不被发"
"现。"
msgstr ""
"尽管受信任设置很有效率，但众多 CRS 用户也必须要相信生成者确实删除了 α 和 s ，"
"这一点没有办法证明（_proof of ignorance_ 是一个正在积极研究的领域 [DK18]"
"(https://medium.com/@imolfar/why-and-how-zk-snark-works-3-non-interactivity-"
"distributed-setup-c0310c0e5d1c#2823)），所以这种方法依然是无效的。因而很有必"
"要去最小化或者消除这种信任。否则一个不诚实的参与方就可以构造假证明而不被发"
"现。"

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:204
msgid ""
"一种解决办法就是由**多个参与方**使用前面小节中介绍的数学工具来生成一个组合式"
"CRS，这样这些参与方就都不知道「秘密」了。下面是一个实现方案，我们假设有三个参"
"与者 Alice，Bob 和 Carol ，对应为 A，B 和 C，其中  i 为 1, 2, …, d："
msgstr ""
"一种解决办法就是由**多个参与方**使用前面小节中介绍的数学工具来生成一个组合式"
"CRS，这样这些参与方就都不知道「秘密」了。下面是一个实现方案，我们假设有三个参"
"与者 Alice，Bob 和 Carol ，对应为 A，B 和 C，其中  i 为 1, 2, …, d："

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:206
msgid "Alice 选择随机数  "
msgstr "Alice 选择随机数  "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:206
msgid " ，然后公开她的 CRS："
msgstr " ，然后公开她的 CRS："

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:208
msgid "Bob 选择他的随机数  "
msgstr "Bob 选择他的随机数  "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:208
msgid "  ，然后通过同态乘法结合 Alice 的 CRS："
msgstr "  ，然后通过同态乘法结合 Alice 的 CRS："

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:210
msgid "然后公开两方 Alice-Bob 的 CRS 结果："
msgstr "然后公开两方 Alice-Bob 的 CRS 结果："

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:212
msgid "Carol 用她的随机数  "
msgstr "Carol 用她的随机数  "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:212
msgid "   做同样的事："
msgstr "   做同样的事："

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:214
msgid "然后公开 Alice-Bob-Carol 的 CRS:"
msgstr "然后公开 Alice-Bob-Carol 的 CRS:"

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:215
msgid "BC"
msgstr "BC"

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:216
msgid "这个协议最后我们就获得了一个混合的  "
msgstr "这个协议最后我们就获得了一个混合的  "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:220
msgid ""
"除非他们串谋，否则参与者们互相之间并不知道其他人的秘密参数。实际上，一个参与"
"者必须要和其它所有的参与者串谋才能得到 _s_ 和 _α_，这样在所有的参与者中只要有"
"一个是诚实的，就没有办法伪造证明。 "
msgstr ""
"除非他们串谋，否则参与者们互相之间并不知道其他人的秘密参数。实际上，一个参与"
"者必须要和其它所有的参与者串谋才能得到 _s_ 和 _α_，这样在所有的参与者中只要有"
"一个是诚实的，就没有办法伪造证明。 "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:222
msgid "注意：这个过程可以被尽可能多的参与者重复完成"
msgstr "注意：这个过程可以被尽可能多的参与者重复完成"

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:224
msgid ""
"有一个问题是如何验证参与者在生成 CRS 时用的随机数值是一致的，因为攻击者可以生"
"成多个不同的随机数  "
msgstr ""
"有一个问题是如何验证参与者在生成 CRS 时用的随机数值是一致的，因为攻击者可以生"
"成多个不同的随机数  "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:224
msgid ""
"   ，然后代入这些不同的随机数去执行 _s_ 的不同次幂计算（或提供随机数作为一个 "
"CRS 的扩充），从而使 CRS 无效或者不可用。"
msgstr ""
"   ，然后代入这些不同的随机数去执行 _s_ 的不同次幂计算（或提供随机数作为一个 "
"CRS 的扩充），从而使 CRS 无效或者不可用。"

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:226
msgid ""
"庆幸的是，因为我们可以使用配对来乘以加密值，所以我们就可以从第一个参数开始逐"
"一执行一致性校验，并且确保了每个参数都源于前一个。"
msgstr ""
"庆幸的是，因为我们可以使用配对来乘以加密值，所以我们就可以从第一个参数开始逐"
"一执行一致性校验，并且确保了每个参数都源于前一个。"

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:228
msgid "我们用 s 的 1 次幂作为标准来校验每一个其它次幂的值与之是否保持一致 : "
msgstr "我们用 s 的 1 次幂作为标准来校验每一个其它次幂的值与之是否保持一致 : "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:230
msgid "例如 : "
msgstr "例如 : "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:231
msgid "2 次幂： "
msgstr "2 次幂： "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:232
#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:237
msgid "3 次幂： "
msgstr "3 次幂： "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:234
msgid "我们现在再验证一下前面步骤中 α-变换后的值是否正确："
msgstr "我们现在再验证一下前面步骤中 α-变换后的值是否正确："

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:236
msgid "例如："
msgstr "例如："

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:239
msgid "  范围的缩写形式，在后面会经常看到"
msgstr "  范围的缩写形式，在后面会经常看到"

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:241
msgid ""
"当我们在验证每一个参与者秘密参数的一致性时，要注意参与者生成 CRS 的过程并没有"
"强制后一个参与者（就是我们例子中的 Bob 和 Carol）都要使用前面已经公开的 CRS。"
"因而如果一个攻击者是链上的最后一个参与者，他可以像链上的第一个参与者一样忽略"
"前面的 CRS 随便构造一个有效的 CRS，这样他就变成了唯一一个知道秘密 _s_ 和 _α_ "
"的人。"
msgstr ""
"当我们在验证每一个参与者秘密参数的一致性时，要注意参与者生成 CRS 的过程并没有"
"强制后一个参与者（就是我们例子中的 Bob 和 Carol）都要使用前面已经公开的 CRS。"
"因而如果一个攻击者是链上的最后一个参与者，他可以像链上的第一个参与者一样忽略"
"前面的 CRS 随便构造一个有效的 CRS，这样他就变成了唯一一个知道秘密 _s_ 和 _α_ "
"的人。"

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:243
msgid ""
"为了解决这个问题，我们可以额外再要求除了第一个以外的每一个参与者去加密然后公"
"开他的参数。例如，Bob 同样公开了 :  "
msgstr ""
"为了解决这个问题，我们可以额外再要求除了第一个以外的每一个参与者去加密然后公"
"开他的参数。例如，Bob 同样公开了 :  "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:245
msgid "这就可以去验证 Bob 的 CRS 是乘以了 Alice 的参数后正常获得的，"
msgstr "这就可以去验证 Bob 的 CRS 是乘以了 Alice 的参数后正常获得的，"

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:245
#: src/zk-snarks/3-General-Purpose-Computation.md:173
#: src/zk-snarks/4-Construction-Properties.md:168 src/public
#: goods/4-Proving-System.md:192 goods/4-Proving-System.md:193
msgid " : "
msgstr " : "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:249
msgid ""
"同样的，Carol 也必须证明她的 CRS 是乘以了 Alice-Bob 的 CRS 后正常获得的。"
msgstr ""
"同样的，Carol 也必须证明她的 CRS 是乘以了 Alice-Bob 的 CRS 后正常获得的。"

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:251
msgid ""
"这是一个健壮的 CRS 设置模式，它并不完全依赖于单个参与者。事实上，即使其它所有"
"的参与者都串谋了，只要有一个参与者是诚实的，他能够删除并且永远不共享它的秘密"
"参数，这个 CRS 就是有效的。所以在设置 CRS （有时候被称为仪式 [Wil16](https://"
"medium.com/@imolfar/why-and-how-zk-snark-works-3-non-interactivity-"
"distributed-setup-c0310c0e5d1c#191c)）的时候有越多不相关的参与者参与，伪造证"
"明的可能性就越低。当有相互竞争的参与方参与的时候，就几乎不可能伪造证明了。这"
"种模式能够包容其他一些怀疑这种 setup 可识别性的不受信方因为校验步骤确保了他们"
"不会破坏（这里也包括很弱的 _α_ 和 _s_ 的使用）最终的 CRS。"
msgstr ""
"这是一个健壮的 CRS 设置模式，它并不完全依赖于单个参与者。事实上，即使其它所有"
"的参与者都串谋了，只要有一个参与者是诚实的，他能够删除并且永远不共享它的秘密"
"参数，这个 CRS 就是有效的。所以在设置 CRS （有时候被称为仪式 [Wil16](https://"
"medium.com/@imolfar/why-and-how-zk-snark-works-3-non-interactivity-"
"distributed-setup-c0310c0e5d1c#191c)）的时候有越多不相关的参与者参与，伪造证"
"明的可能性就越低。当有相互竞争的参与方参与的时候，就几乎不可能伪造证明了。这"
"种模式能够包容其他一些怀疑这种 setup 可识别性的不受信方因为校验步骤确保了他们"
"不会破坏（这里也包括很弱的 _α_ 和 _s_ 的使用）最终的 CRS。"

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:253
msgid ""
"even@安比实验室: 现在有一些zkSNARK方案支持可升级的 CRS，任何怀疑CRS的参与方都"
"可以对CRS 进行更新。此外还有一些 zkSNARK方案支持 Universal CRS，用不着对每一"
"个电路进行受信任设置，而是只需要全局完成一次即可。除此之外，大量无需 Trusted "
"Setup 的方案正在被充分研究。"
msgstr ""
"even@安比实验室: 现在有一些zkSNARK方案支持可升级的 CRS，任何怀疑CRS的参与方都"
"可以对CRS 进行更新。此外还有一些 zkSNARK方案支持 Universal CRS，用不着对每一"
"个电路进行受信任设置，而是只需要全局完成一次即可。除此之外，大量无需 Trusted "
"Setup 的方案正在被充分研究。"

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:256
msgid "Succinct Non-Interactive Argument of Knowledge of Polynomial"
msgstr "Succinct Non-Interactive Argument of Knowledge of Polynomial"

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:258
msgid ""
"We are now ready to **consolidate** the **evolved** _zk-SNARKOP_ protocol. "
"(准备整合演进的 zk-SNARKOP 协议) , now  "
msgstr ""
"We are now ready to **consolidate** the **evolved** _zk-SNARKOP_ protocol. "
"(准备整合演进的 zk-SNARKOP 协议) , now  "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:258
msgid "  denotes a set  "
msgstr "  denotes a set  "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:260
msgid "我们已经明确 target poly  "
msgstr "我们已经明确 target poly  "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:260
msgid " 的多项式阶数 "
msgstr " 的多项式阶数 "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:260
#: src/zk-snarks/3-General-Purpose-Computation.md:137
msgid "  :"
msgstr "  :"

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:262
#: src/zk-snarks/4-Construction-Properties.md:295
#: src/zk-snarks/4-Construction-Properties.md:418
#: src/zk-snarks/5-Pinocchio-Protocol.md:185
msgid "**Setup**"
msgstr "**Setup**"

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:263
msgid "挑选随机值  "
msgstr "挑选随机值  "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:264
msgid "计算加密值  "
msgstr "计算加密值  "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:264
msgid "  , "
msgstr "  , "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:265
msgid "生成 _proving key_： "
msgstr "生成 _proving key_： "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:265
msgid "     (和上面相同)"
msgstr "     (和上面相同)"

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:266
msgid "生成 _verification key_： "
msgstr "生成 _verification key_： "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:266
msgid "    (和上面相同)"
msgstr "    (和上面相同)"

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:268
msgid "**Proving** "
msgstr "**Proving** "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:269
msgid "分配多项式系数 "
msgstr "分配多项式系数 "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:269
msgid "  (即知识),   "
msgstr "  (即知识),   "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:270
msgid "自己求多项式  "
msgstr "自己求多项式  "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:270
msgid "      (一般用 FFT 完成 ?)"
msgstr "      (一般用 FFT 完成 ?)"

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:271
msgid "  计算多项式 "
msgstr "  计算多项式 "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:271
msgid "  的值"
msgstr "  的值"

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:272
msgid "  计算变换多项式  "
msgstr "  计算变换多项式  "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:272
#: src/zk-snarks/5-Pinocchio-Protocol.md:46
msgid " 的值"
msgstr " 的值"

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:273
#: src/zk-snarks/5-Pinocchio-Protocol.md:189 src/public
#: goods/4-Proving-System.md:105 goods/4-Proving-System.md:125
msgid "选择随机数  "
msgstr "选择随机数  "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:273
msgid "      (\"零成本\"的 zero-knowledge)"
msgstr "      (\"零成本\"的 zero-knowledge)"

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:274
msgid "构造随机化的证明(randomized proof) :   "
msgstr "构造随机化的证明(randomized proof) :   "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:276
msgid "**verification**  :"
msgstr "**verification**  :"

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:277
msgid "Parse proof(解析证明)  "
msgstr "Parse proof(解析证明)  "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:277
msgid "  as   "
msgstr "  as   "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:278
msgid "我觉得这里的表述有问题, 因为 "
msgstr "我觉得这里的表述有问题, 因为 "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:278
msgid " 是不知道 "
msgstr " 是不知道 "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:278
msgid " 的(也不需要知道) ,  "
msgstr " 的(也不需要知道) ,  "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:278
msgid " 用零知识武装自己的关键工具, "
msgstr " 用零知识武装自己的关键工具, "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:278
msgid " 不需要解包或还原 "
msgstr " 不需要解包或还原 "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:278
msgid " 只需用 Pairing 验证证明的一致性 : "
msgstr " 只需用 Pairing 验证证明的一致性 : "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:279
msgid "验证多项式约束： "
msgstr "验证多项式约束： "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:281
msgid "—————— "
msgstr "—————— "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:281
msgid " 保证 "
msgstr " 保证 "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:281
msgid "  确实用了 "
msgstr "  确实用了 "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:281
msgid " 提供的 "
msgstr " 提供的 "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:282
msgid "验证多项式系数： "
msgstr "验证多项式系数： "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:284
msgid "——————  "
msgstr "——————  "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:284
msgid "  保护了 "
msgstr "  保护了 "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:284
msgid " , 实现了零成本 Zero-knowledge"
msgstr " , 实现了零成本 Zero-knowledge"

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:286
msgid ""
"**Remark 3.3** 如果 pairing 的结果有可能在其它类似的乘法协议中被复用，那么这"
"里就完全没有安全性可言了，因为这样的话 "
msgstr ""
"**Remark 3.3** 如果 pairing 的结果有可能在其它类似的乘法协议中被复用，那么这"
"里就完全没有安全性可言了，因为这样的话 "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:286
msgid " 可以自己构造  "
msgstr " 可以自己构造  "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:286
msgid " , "
msgstr " , "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:287
msgid "这里我理解就是 "
msgstr "这里我理解就是 "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:287
msgid "   被 "
msgstr "   被 "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:287
msgid " 拿到了并复用了,  然后他可以发送   "
msgstr " 拿到了并复用了,  然后他可以发送   "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:287
msgid "  作为 "
msgstr "  作为 "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:287
msgid " 的值来 cheat   "
msgstr " 的值来 cheat   "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:289
msgid "这样也可以通过“多项式约束”的检查： "
msgstr "这样也可以通过“多项式约束”的检查： "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:289
msgid "   —— 因为这是个恒等式, "
msgstr "   —— 因为这是个恒等式, "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:289
msgid " 去验证一个 \"恒等式\" 没有任何意义 —— 结果永远是 `Accept` ."
msgstr " 去验证一个 \"恒等式\" 没有任何意义 —— 结果永远是 `Accept` ."

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:291
msgid "Conclusion"
msgstr "Conclusion"

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:293
msgid ""
"我们用 zk-SNARK 协议来解决多项式问题的知识，不过这是一个有局限的例子。因为大"
"家可以说 "
msgstr ""
"我们用 zk-SNARK 协议来解决多项式问题的知识，不过这是一个有局限的例子。因为大"
"家可以说 "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:293
msgid " 只要用另外一个有界的多项式去乘以  "
msgstr " 只要用另外一个有界的多项式去乘以  "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:293
msgid "  就可以很容易得构造出一个能够通过测试的多项式 "
msgstr "  就可以很容易得构造出一个能够通过测试的多项式 "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:293
msgid "  ，并且这种结构也是有效的。"
msgstr "  ，并且这种结构也是有效的。"

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:295
msgid " _知道_ "
msgstr " _知道_ "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:295
msgid ""
" 有一个有效的多项式，但是并不知道是哪一个。我们可以利用多项式的其他性质添加额"
"外的证明，如: 被多个多项式整除，是某个多项式的平方。虽然可能会有一个服务能够"
"接受，存储和奖励所有经过证明的多项式，或者有一个需求，加密计算某种形式的未知"
"多项式。然而若有通用方案就可以支撑无数的应用。"
msgstr ""
" 有一个有效的多项式，但是并不知道是哪一个。我们可以利用多项式的其他性质添加额"
"外的证明，如: 被多个多项式整除，是某个多项式的平方。虽然可能会有一个服务能够"
"接受，存储和奖励所有经过证明的多项式，或者有一个需求，加密计算某种形式的未知"
"多项式。然而若有通用方案就可以支撑无数的应用。"

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:297
msgid "even@安比实验室:总结一下这篇文章中一步一步解决了下面的几个问题："
msgstr "even@安比实验室:总结一下这篇文章中一步一步解决了下面的几个问题："

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:298
msgid "保证 prover 的证明是按照规则正确构造的 ——> KEA   ( "
msgstr "保证 prover 的证明是按照规则正确构造的 ——> KEA   ( "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:299
msgid "保证知识的零知性 ——> “无成本的” "
msgstr "保证知识的零知性 ——> “无成本的” "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:299
msgid "  变换"
msgstr "  变换"

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:300
msgid "可复用证明 ——> 非交互式"
msgstr "可复用证明 ——> 非交互式"

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:301
msgid ""
"非交互中如何设置安全公开且可复用的参数 ——>  参数加密，verifier 借助 airing 进"
"行验证"
msgstr ""
"非交互中如何设置安全公开且可复用的参数 ——>  参数加密，verifier 借助 airing 进"
"行验证"

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:302
msgid "保证参数的生成者不泄密 ——> MPC's Setup"
msgstr "保证参数的生成者不泄密 ——> MPC's Setup"

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:304
msgid ""
"至此，一个用来证明多项式知识的完整的 zk-SNARK 协议就构造出来了，不过现在的协"
"议在通用性上依然还有很多限制，后面的文章将继续介绍如何构造通用的 zk-SNARK。"
msgstr ""
"至此，一个用来证明多项式知识的完整的 zk-SNARK 协议就构造出来了，不过现在的协"
"议在通用性上依然还有很多限制，后面的文章将继续介绍如何构造通用的 zk-SNARK。"

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:306
msgid "Ref : "
msgstr "Ref : "

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:307
msgid "https://secbit.io/blog/2020/01/01/learn-zk-snark-from-zero-part-two/"
msgstr "https://secbit.io/blog/2020/01/01/learn-zk-snark-from-zero-part-two/"

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:308
msgid ""
"https://medium.com/@imolfar/why-and-how-zk-snark-works-2-proving-knowledge-"
"of-a-polynomial-f817760e2805"
msgstr ""
"https://medium.com/@imolfar/why-and-how-zk-snark-works-2-proving-knowledge-"
"of-a-polynomial-f817760e2805"

#: src/zk-snarks/2-Non-interactivity&Distributed-Setup.md:309
msgid ""
"https://medium.com/@imolfar/why-and-how-zk-snark-works-3-non-interactivity-"
"distributed-setup-c0310c0e5d1c"
msgstr ""
"https://medium.com/@imolfar/why-and-how-zk-snark-works-3-non-interactivity-"
"distributed-setup-c0310c0e5d1c"

#: src/zk-snarks/3-General-Purpose-Computation.md:9
msgid "[Computation](#computation)"
msgstr "[Computation](#computation)"

#: src/zk-snarks/3-General-Purpose-Computation.md:10
msgid "[Single Operation](#single-operation)"
msgstr "[Single Operation](#single-operation)"

#: src/zk-snarks/3-General-Purpose-Computation.md:11
msgid "[Enforcing Operation](#enforcing-operation)"
msgstr "[Enforcing Operation](#enforcing-operation)"

#: src/zk-snarks/3-General-Purpose-Computation.md:12
msgid "[Proof of Operation](#proof-of-operation)"
msgstr "[Proof of Operation](#proof-of-operation)"

#: src/zk-snarks/3-General-Purpose-Computation.md:13
msgid "[名词定义](#名词定义)"
msgstr "[名词定义](#名词定义)"

#: src/zk-snarks/3-General-Purpose-Computation.md:14
msgid "[Multiple Operations](#multiple-operations)"
msgstr "[Multiple Operations](#multiple-operations)"

#: src/zk-snarks/3-General-Purpose-Computation.md:15
msgid "[Multi-Operation Polynomials](#multi-operation-polynomials)"
msgstr "[Multi-Operation Polynomials](#multi-operation-polynomials)"

#: src/zk-snarks/3-General-Purpose-Computation.md:16
msgid "[Variable Polynomials](#variable-polynomials)"
msgstr "[Variable Polynomials](#variable-polynomials)"

#: src/zk-snarks/3-General-Purpose-Computation.md:17
msgid ""
"[Single-Variable Operand Polynomial](#single-variable-operand-polynomial)"
msgstr ""
"[Single-Variable Operand Polynomial](#single-variable-operand-polynomial)"

#: src/zk-snarks/3-General-Purpose-Computation.md:18
msgid "[Multi-Variable Operand Polynomial](#multi-variable-operand-polynomial)"
msgstr ""
"[Multi-Variable Operand Polynomial](#multi-variable-operand-polynomial)"

#: src/zk-snarks/3-General-Purpose-Computation.md:19
msgid "[Summary/Recap](#summaryrecap-1)"
msgstr "[Summary/Recap](#summaryrecap-1)"

#: src/zk-snarks/3-General-Purpose-Computation.md:20
#: src/halo2/tmp/2-Fibonacci-example-1.md:14
#: src/halo2/tmp/3-Fibonacci-example-2.md:11
msgid "[Reference :](#reference-)"
msgstr "[Reference :](#reference-)"

#: src/zk-snarks/3-General-Purpose-Computation.md:22
msgid "Computation"
msgstr "Computation"

#: src/zk-snarks/3-General-Purpose-Computation.md:24
msgid "Let us consider a simple program in pseudocode:"
msgstr "Let us consider a simple program in pseudocode:"

#: src/zk-snarks/3-General-Purpose-Computation.md:38
msgid ""
"Therefore we need to find a way to convert a **program** into the "
"**polynomial form** , like this "
msgstr ""
"Therefore we need to find a way to convert a **program** into the "
"**polynomial form** , like this "

#: src/zk-snarks/3-General-Purpose-Computation.md:41
msgid "Executing  "
msgstr "Executing  "

#: src/zk-snarks/3-General-Purpose-Computation.md:41
msgid "  and evaluating   "
msgstr "  and evaluating   "

#: src/zk-snarks/3-General-Purpose-Computation.md:41
msgid "  will yield the same result: 8.  "
msgstr "  will yield the same result: 8.  "

#: src/zk-snarks/3-General-Purpose-Computation.md:42
msgid " and   "
msgstr " and   "

#: src/zk-snarks/3-General-Purpose-Computation.md:42
msgid ""
"  would both be resolved to 6. We can express any kind of finite program in "
"such a way."
msgstr ""
"  would both be resolved to 6. We can express any kind of finite program in "
"such a way."

#: src/zk-snarks/3-General-Purpose-Computation.md:44
msgid "猜想一下，是否只要是能够用多项式表示的程序都可以做证明？"
msgstr "猜想一下，是否只要是能够用多项式表示的程序都可以做证明？"

#: src/zk-snarks/3-General-Purpose-Computation.md:46
msgid "Single Operation"
msgstr "Single Operation"

#: src/zk-snarks/3-General-Purpose-Computation.md:48
msgid ""
"Any **computation** at it is core consists of elemental operations of the "
"form:"
msgstr ""
"Any **computation** at it is core consists of elemental operations of the "
"form:"

#: src/zk-snarks/3-General-Purpose-Computation.md:50
#: src/zk-snarks/3-General-Purpose-Computation.md:64
msgid "左操作数"
msgstr "左操作数"

#: src/zk-snarks/3-General-Purpose-Computation.md:50
msgid "运算操作符"
msgstr "运算操作符"

#: src/zk-snarks/3-General-Purpose-Computation.md:50
#: src/zk-snarks/3-General-Purpose-Computation.md:64
msgid "右操作数"
msgstr "右操作数"

#: src/zk-snarks/3-General-Purpose-Computation.md:50
#: src/zk-snarks/3-General-Purpose-Computation.md:64
msgid "输出"
msgstr "输出"

#: src/zk-snarks/3-General-Purpose-Computation.md:52
msgid ""
"If we can represent operand values as polynomials (and we indeed can as "
"outlined) then through the arithmetic properties, we will be able to get the "
"result of an operation imposed by an operand. (**如果我们可以将操作数的值表示"
"为多项式(我们也确实可以这么做)，那么利用算术属性，我们就能够得到操作数的计算"
"结果了。**)"
msgstr ""
"If we can represent operand values as polynomials (and we indeed can as "
"outlined) then through the arithmetic properties, we will be able to get the "
"result of an operation imposed by an operand. (**如果我们可以将操作数的值表示"
"为多项式(我们也确实可以这么做)，那么利用算术属性，我们就能够得到操作数的计算"
"结果了。**)"

#: src/zk-snarks/3-General-Purpose-Computation.md:54
msgid ""
"@Even : 回忆一下，在本系列的第一篇——多项式的性质与证明中，我们曾经说过“任何多"
"项式在任意点的计算结果都可以看做是其唯一身份的表示。”"
msgstr ""
"@Even : 回忆一下，在本系列的第一篇——多项式的性质与证明中，我们曾经说过“任何多"
"项式在任意点的计算结果都可以看做是其唯一身份的表示。”"

#: src/zk-snarks/3-General-Purpose-Computation.md:56
msgid ""
"反过来当我们知道某个多项式的时候，是不是也就意味着我们知道多项式上某个点的取"
"值。这就是借助多项式来完成证明的依据。"
msgstr ""
"反过来当我们知道某个多项式的时候，是不是也就意味着我们知道多项式上某个点的取"
"值。这就是借助多项式来完成证明的依据。"

#: src/zk-snarks/3-General-Purpose-Computation.md:58
msgid "Enforcing Operation"
msgstr "Enforcing Operation"

#: src/zk-snarks/3-General-Purpose-Computation.md:60
msgid "如果一个 prover 声称有某 2 个数字的乘积，verifier 要怎样去验证呢？"
msgstr "如果一个 prover 声称有某 2 个数字的乘积，verifier 要怎样去验证呢？"

#: src/zk-snarks/3-General-Purpose-Computation.md:62
msgid "Recap computation form, 我们也可以将其表示为一个运算多项式 : "
msgstr "Recap computation form, 我们也可以将其表示为一个运算多项式 : "

#: src/zk-snarks/3-General-Purpose-Computation.md:64
msgid "运算符"
msgstr "运算符"

#: src/zk-snarks/3-General-Purpose-Computation.md:64
#: src/zk-snarks/3-General-Purpose-Computation.md:66
#: src/zk-snarks/3-General-Purpose-Computation.md:68
msgid "operator"
msgstr "operator"

#: src/zk-snarks/3-General-Purpose-Computation.md:66
msgid ""
"在计算过程中, 如果**操作数(operands)** 和 **结果(output)** 都能用**多项式**的"
"形式正确地表示出来，那么 "
msgstr ""
"在计算过程中, 如果**操作数(operands)** 和 **结果(output)** 都能用**多项式**的"
"形式正确地表示出来，那么 "

#: src/zk-snarks/3-General-Purpose-Computation.md:66
msgid "  就应该成立"
msgstr "  就应该成立"

#: src/zk-snarks/3-General-Purpose-Computation.md:68
msgid "也就表明, 当取值为 "
msgstr "也就表明, 当取值为 "

#: src/zk-snarks/3-General-Purpose-Computation.md:68
msgid "  时, 多项式   "
msgstr "  时, 多项式   "

#: src/zk-snarks/3-General-Purpose-Computation.md:68
msgid "   成立,"
msgstr "   成立,"

#: src/zk-snarks/3-General-Purpose-Computation.md:70
msgid "即该多项式一定有一个根  "
msgstr "即该多项式一定有一个根  "

#: src/zk-snarks/3-General-Purpose-Computation.md:70
msgid " , 因此，这个多项式里面一定包含因式(cofactor)  "
msgstr " , 因此，这个多项式里面一定包含因式(cofactor)  "

#: src/zk-snarks/3-General-Purpose-Computation.md:70
msgid " , 这就是我们要证明的目标多项式(target polynomial) ，即  "
msgstr " , 这就是我们要证明的目标多项式(target polynomial) ，即  "

#: src/zk-snarks/3-General-Purpose-Computation.md:72
msgid "For example, let us consider operation:  "
msgstr "For example, let us consider operation:  "

#: src/zk-snarks/3-General-Purpose-Computation.md:74
msgid "可以用一个简单的多项式表示它：  "
msgstr "可以用一个简单的多项式表示它：  "

#: src/zk-snarks/3-General-Purpose-Computation.md:74
msgid "  取  "
msgstr "  取  "

#: src/zk-snarks/3-General-Purpose-Computation.md:75
msgid " ，即   "
msgstr " ，即   "

#: src/zk-snarks/3-General-Purpose-Computation.md:77
msgid "运算多项式就变成了 : "
msgstr "运算多项式就变成了 : "

#: src/zk-snarks/3-General-Purpose-Computation.md:81
msgid "因而如果  "
msgstr "因而如果  "

#: src/zk-snarks/3-General-Purpose-Computation.md:81
msgid "  用多项式  "
msgstr "  用多项式  "

#: src/zk-snarks/3-General-Purpose-Computation.md:81
msgid " ，**因其依然可被 "
msgstr " ，**因其依然可被 "

#: src/zk-snarks/3-General-Purpose-Computation.md:81
msgid " 整除，所以 "
msgstr " 整除，所以 "

#: src/zk-snarks/3-General-Purpose-Computation.md:81
msgid " 就认可其是有效的**"
msgstr " 就认可其是有效的**"

#: src/zk-snarks/3-General-Purpose-Computation.md:83
msgid "相反，如果 prover 尝试用 "
msgstr "相反，如果 prover 尝试用 "

#: src/zk-snarks/3-General-Purpose-Computation.md:83
msgid " , 即  "
msgstr " , 即  "

#: src/zk-snarks/3-General-Purpose-Computation.md:83
msgid " 来代替输出值去欺骗 verifier ，即 "
msgstr " 来代替输出值去欺骗 verifier ，即 "

#: src/zk-snarks/3-General-Purpose-Computation.md:83
msgid " ，那么运算多项式就变成了 "
msgstr " ，那么运算多项式就变成了 "

#: src/zk-snarks/3-General-Purpose-Computation.md:83
msgid "  ,  这个多项式并没有 "
msgstr "  ,  这个多项式并没有 "

#: src/zk-snarks/3-General-Purpose-Computation.md:83
msgid " 的解，因而 "
msgstr " 的解，因而 "

#: src/zk-snarks/3-General-Purpose-Computation.md:83
msgid "  不能被  "
msgstr "  不能被  "

#: src/zk-snarks/3-General-Purpose-Computation.md:83
msgid "  整除："
msgstr "  整除："

#: src/zk-snarks/3-General-Purpose-Computation.md:90
msgid "在前面的协议中，我们要证明的多项式是 "
msgstr "在前面的协议中，我们要证明的多项式是 "

#: src/zk-snarks/3-General-Purpose-Computation.md:90
msgid " ，这里我们把  "
msgstr " ，这里我们把  "

#: src/zk-snarks/3-General-Purpose-Computation.md:90
msgid "  替换成  "
msgstr "  替换成  "

#: src/zk-snarks/3-General-Purpose-Computation.md:90
msgid " , 这仍然是被 "
msgstr " , 这仍然是被 "

#: src/zk-snarks/3-General-Purpose-Computation.md:90
msgid " 承认有效的。这里目标多项式 "
msgstr " 承认有效的。这里目标多项式 "

#: src/zk-snarks/3-General-Purpose-Computation.md:90
msgid " 的根就是对应能够计算出数学表达式的值的 "
msgstr " 的根就是对应能够计算出数学表达式的值的 "

#: src/zk-snarks/3-General-Purpose-Computation.md:92
msgid "上面例子里面取 "
msgstr "上面例子里面取 "

#: src/zk-snarks/3-General-Purpose-Computation.md:92
msgid " 作为运算编码的位置,  1 可以换成任何别的值，比如说 "
msgstr " 作为运算编码的位置,  1 可以换成任何别的值，比如说 "

#: src/zk-snarks/3-General-Purpose-Computation.md:92
msgid "，或"
msgstr "，或"

#: src/zk-snarks/3-General-Purpose-Computation.md:92
#: src/zk-snarks/3-General-Purpose-Computation.md:122
#: src/halo2/tmp/9-decomposed.md:30 src/halo2/tmp/9-decomposed.md:40
#: src/halo2/tmp/9-decomposed.md:53
#: src/zk-everything/zk-everything-joe/Spartan.md:347
msgid "101"
msgstr "101"

#: src/zk-snarks/3-General-Purpose-Computation.md:92
msgid ""
" .. 在 \\[GGPR\\] 与 \\[PHGR\\] 论文中，这个取值是一个随机值，被称为 “root”"
msgstr ""
" .. 在 \\[GGPR\\] 与 \\[PHGR\\] 论文中，这个取值是一个随机值，被称为 “root”"

#: src/zk-snarks/3-General-Purpose-Computation.md:94
msgid "Proof of Operation"
msgstr "Proof of Operation"

#: src/zk-snarks/3-General-Purpose-Computation.md:96
msgid "前面**多项式的 SNARK**一章，我们已经能够证明多项式 "
msgstr "前面**多项式的 SNARK**一章，我们已经能够证明多项式 "

#: src/zk-snarks/3-General-Purpose-Computation.md:96
msgid " 的知识了，只不过现在要计算的是三个多项式  "
msgstr " 的知识了，只不过现在要计算的是三个多项式  "

#: src/zk-snarks/3-General-Purpose-Computation.md:96
msgid "  的知识。我们可以定义 "
msgstr "  的知识。我们可以定义 "

#: src/zk-snarks/3-General-Purpose-Computation.md:96
msgid " ，但这里存在两个争议点。"
msgstr " ，但这里存在两个争议点。"

#: src/zk-snarks/3-General-Purpose-Computation.md:97
msgid "① 在我们的协议中, 证明阶段是不能做加密值乘法计算的 (即  "
msgstr "① 在我们的协议中, 证明阶段是不能做加密值乘法计算的 (即  "

#: src/zk-snarks/3-General-Purpose-Computation.md:97
msgid ""
"  )，因为 Pairing 只能用一次(不能复用, 会有安全风险?)  —— Pairing 要用在校验"
"多项式的约束上"
msgstr ""
"  )，因为 Pairing 只能用一次(不能复用, 会有安全风险?)  —— Pairing 要用在校验"
"多项式的约束上"

#: src/zk-snarks/3-General-Purpose-Computation.md:98
msgid ""
"② 这里给证明者留下了一个可以修改多项式结构(修改知识) 但依然保留有效因式 "
msgstr ""
"② 这里给证明者留下了一个可以修改多项式结构(修改知识) 但依然保留有效因式 "

#: src/zk-snarks/3-General-Purpose-Computation.md:98
msgid " 的机会，for example   "
msgstr " 的机会，for example   "

#: src/zk-snarks/3-General-Purpose-Computation.md:98
msgid "  or  "
msgstr "  or  "

#: src/zk-snarks/3-General-Purpose-Computation.md:98
msgid "  or even "
msgstr "  or even "

#: src/zk-snarks/3-General-Purpose-Computation.md:98
msgid "  ——  只需要 "
msgstr "  ——  只需要 "

#: src/zk-snarks/3-General-Purpose-Computation.md:98
msgid " 有一个根 "
msgstr " 有一个根 "

#: src/zk-snarks/3-General-Purpose-Computation.md:98
msgid "  就可以骗过 "
msgstr "  就可以骗过 "

#: src/zk-snarks/3-General-Purpose-Computation.md:98
msgid " , 这样是不行的 !"
msgstr " , 这样是不行的 !"

#: src/zk-snarks/3-General-Purpose-Computation.md:100
msgid "所以 "
msgstr "所以 "

#: src/zk-snarks/3-General-Purpose-Computation.md:100
msgid " 必须要 **分别提供** 多项式  "
msgstr " 必须要 **分别提供** 多项式  "

#: src/zk-snarks/3-General-Purpose-Computation.md:100
msgid ""
"  值的证明，即**协议必须修改要证明的多项式的知识**( _knowledge of "
"polynomial_ must be adjusted.) "
msgstr ""
"  值的证明，即**协议必须修改要证明的多项式的知识**( _knowledge of "
"polynomial_ must be adjusted.) "

#: src/zk-snarks/3-General-Purpose-Computation.md:102
msgid "In essence(本质上),  "
msgstr "In essence(本质上),  "

#: src/zk-snarks/3-General-Purpose-Computation.md:102
msgid " 在加密空间中要验证的是  "
msgstr " 在加密空间中要验证的是  "

#: src/zk-snarks/3-General-Purpose-Computation.md:102
msgid "  . "
msgstr "  . "

#: src/zk-snarks/3-General-Purpose-Computation.md:104
msgid "即使  "
msgstr "即使  "

#: src/zk-snarks/3-General-Purpose-Computation.md:104
msgid ""
"  可以用 `Pairing` 来执行乘法(multiplication)，但在 `Pairing` 中做减法  ( "
msgstr ""
"  可以用 `Pairing` 来执行乘法(multiplication)，但在 `Pairing` 中做减法  ( "

#: src/zk-snarks/3-General-Purpose-Computation.md:104
msgid " ) 是非常昂贵的计算（would require to find inverse of "
msgstr " ) 是非常昂贵的计算（would require to find inverse of "

#: src/zk-snarks/3-General-Purpose-Computation.md:104
msgid " ），所以咱们把 "
msgstr " ），所以咱们把 "

#: src/zk-snarks/3-General-Purpose-Computation.md:104
msgid " 移到右边：  "
msgstr " 移到右边：  "

#: src/zk-snarks/3-General-Purpose-Computation.md:107
msgid "在加密空间中，"
msgstr "在加密空间中，"

#: src/zk-snarks/3-General-Purpose-Computation.md:107
msgid " 的验证就可以转换成： "
msgstr " 的验证就可以转换成： "

#: src/zk-snarks/3-General-Purpose-Computation.md:110
msgid ""
"Red Part:   recall that the result of cryptographic `pairings` supports "
"encrypted addition through **multiplication**,  see [section on pairings]"
"(https://medium.com/@imolfar/why-and-how-zk-snark-works-3-non-interactivity-"
"distributed-setup-c0310c0e5d1c#f62b)."
msgstr ""
"Red Part:   recall that the result of cryptographic `pairings` supports "
"encrypted addition through **multiplication**,  see [section on pairings]"
"(https://medium.com/@imolfar/why-and-how-zk-snark-works-3-non-interactivity-"
"distributed-setup-c0310c0e5d1c#f62b)."

#: src/zk-snarks/3-General-Purpose-Computation.md:112
#: src/zk-snarks/3-General-Purpose-Computation.md:366
#: src/zk-snarks/4-Construction-Properties.md:271 src/public
#: goods/4-Proving-System.md:209
msgid "ec"
msgstr "ec"

#: src/zk-snarks/3-General-Purpose-Computation.md:112
#: src/zk-snarks/3-General-Purpose-Computation.md:295
#: src/halo2/tmp/Zordle.md:80
msgid "ll"
msgstr "ll"

#: src/zk-snarks/3-General-Purpose-Computation.md:114
msgid "保持 setup 阶段不变，协议更新为："
msgstr "保持 setup 阶段不变，协议更新为："

#: src/zk-snarks/3-General-Purpose-Computation.md:116
msgid ""
"![](http://imagesoda.oss-cn-beijing.aliyuncs.com/Sodaoo/2023-07-28-041907."
"jpg)"
msgstr ""
"![](http://imagesoda.oss-cn-beijing.aliyuncs.com/Sodaoo/2023-07-28-041907."
"jpg)"

#: src/zk-snarks/3-General-Purpose-Computation.md:118
msgid "这个协议就能够证明两个值相乘的计算结果是正确的了。"
msgstr "这个协议就能够证明两个值相乘的计算结果是正确的了。"

#: src/zk-snarks/3-General-Purpose-Computation.md:120
msgid "你可能注意到了在这个新的协议中我们放弃了 "
msgstr "你可能注意到了在这个新的协议中我们放弃了 "

#: src/zk-snarks/3-General-Purpose-Computation.md:120
msgid ""
"  - _零知识_ 部分。这么做是为了简化协议,  后面的章节我们会再变回零知识 ~"
msgstr ""
"  - _零知识_ 部分。这么做是为了简化协议,  后面的章节我们会再变回零知识 ~"

#: src/zk-snarks/3-General-Purpose-Computation.md:122
msgid "even@安比实验室：上面例子里面取 "
msgstr "even@安比实验室：上面例子里面取 "

#: src/zk-snarks/3-General-Purpose-Computation.md:122
msgid ""
" 这个特殊值作为运算编码的位置。当然这里的 1 可以换成任何别的值，比如说换成 "
msgstr ""
" 这个特殊值作为运算编码的位置。当然这里的 1 可以换成任何别的值，比如说换成 "

#: src/zk-snarks/3-General-Purpose-Computation.md:122
#: src/zk-snarks/4-Construction-Properties.md:438
msgid "或"
msgstr "或"

#: src/zk-snarks/3-General-Purpose-Computation.md:122
msgid ""
"  等等。在\\[GGPR\\] 与 \\[PHGR\\] 论文中，这个取值是一个随机值，被称为 "
"\"root\""
msgstr ""
"  等等。在\\[GGPR\\] 与 \\[PHGR\\] 论文中，这个取值是一个随机值，被称为 "
"\"root\""

#: src/zk-snarks/3-General-Purpose-Computation.md:124
msgid "名词定义"
msgstr "名词定义"

#: src/zk-snarks/3-General-Purpose-Computation.md:126
msgid "operand :  符号左边叫 left operand , right operand"
msgstr "operand :  符号左边叫 left operand , right operand"

#: src/zk-snarks/3-General-Purpose-Computation.md:127
msgid "是具体的操作数, 比如  "
msgstr "是具体的操作数, 比如  "

#: src/zk-snarks/3-General-Purpose-Computation.md:127
msgid "  里的 a & b ;     "
msgstr "  里的 a & b ;     "

#: src/zk-snarks/3-General-Purpose-Computation.md:127
msgid " 里的 2 & 3"
msgstr " 里的 2 & 3"

#: src/zk-snarks/3-General-Purpose-Computation.md:129
msgid "_oprand polynomials :  l_(_x_) and   _r_(_x_)."
msgstr "_oprand polynomials :  l_(_x_) and   _r_(_x_)."

#: src/zk-snarks/3-General-Purpose-Computation.md:130
msgid ""
"_left operand polynomial_ (green)  几个约束等式的操作数左边竖列, 构成的 poly "
"叫  _left operand polynomial_"
msgstr ""
"_left operand polynomial_ (green)  几个约束等式的操作数左边竖列, 构成的 poly "
"叫  _left operand polynomial_"

#: src/zk-snarks/3-General-Purpose-Computation.md:131
msgid "_right operand polynomial_ (blue)   ...."
msgstr "_right operand polynomial_ (blue)   ...."

#: src/zk-snarks/3-General-Purpose-Computation.md:133
msgid ""
"_output polynomials_ :  等式右边的所有 Output 操作数 竖列 构成的 poly 叫 "
"_output polynomials_"
msgstr ""
"_output polynomials_ :  等式右边的所有 Output 操作数 竖列 构成的 poly 叫 "
"_output polynomials_"

#: src/zk-snarks/3-General-Purpose-Computation.md:135
msgid "Multiple Operations"
msgstr "Multiple Operations"

#: src/zk-snarks/3-General-Purpose-Computation.md:137
msgid ""
"We can prove a **single operation,** but how do we scale(拓展) to prove  "
msgstr ""
"We can prove a **single operation,** but how do we scale(拓展) to prove  "

#: src/zk-snarks/3-General-Purpose-Computation.md:137
msgid ""
"  (which is our ultimate goal)?   Let us try to add just one another "
"operation. Consider the need to compute the product:  "
msgstr ""
"  (which is our ultimate goal)?   Let us try to add just one another "
"operation. Consider the need to compute the product:  "

#: src/zk-snarks/3-General-Purpose-Computation.md:139
msgid "来看一个有三个乘法运算的例子 `2 × 1 × 3 × 2`，它按照下面的步骤执行："
msgstr "来看一个有三个乘法运算的例子 `2 × 1 × 3 × 2`，它按照下面的步骤执行："

#: src/zk-snarks/3-General-Purpose-Computation.md:143
msgid "我们要把它们表示为多项式，对于  "
msgstr "我们要把它们表示为多项式，对于  "

#: src/zk-snarks/3-General-Purpose-Computation.md:143
msgid "  ， "
msgstr "  ， "

#: src/zk-snarks/3-General-Purpose-Computation.md:143
msgid " 相应的要  "
msgstr " 相应的要  "

#: src/zk-snarks/3-General-Purpose-Computation.md:143
#: src/zk-snarks/4-Construction-Properties.md:282
#: src/zk-snarks/5-Pinocchio-Protocol.md:200
#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:316 SNARKs.md:352 SNARKs.md:369 SNARKs.md:372
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:87
#: src/Nova/SuperNova.md:14 src/public goods/第二章.md:70
#: goods/第二章.md:97 goods/第二章.md:175
msgid "和"
msgstr "和"

#: src/zk-snarks/3-General-Purpose-Computation.md:143
msgid "  。 即通过点 "
msgstr "  。 即通过点 "

#: src/zk-snarks/3-General-Purpose-Computation.md:143
msgid " ， 同样的:   "
msgstr " ， 同样的:   "

#: src/zk-snarks/3-General-Purpose-Computation.md:145
msgid "we use **Polynomial Interpolation** to represent these."
msgstr "we use **Polynomial Interpolation** to represent these."

#: src/zk-snarks/3-General-Purpose-Computation.md:147
msgid "Interpolation Result : "
msgstr "Interpolation Result : "

#: src/zk-snarks/3-General-Purpose-Computation.md:151
msgid "Multi-Operation Polynomials"
msgstr "Multi-Operation Polynomials"

#: src/zk-snarks/3-General-Purpose-Computation.md:153
msgid "Now we have operand polynomials  "
msgstr "Now we have operand polynomials  "

#: src/zk-snarks/3-General-Purpose-Computation.md:153
msgid ""
" ,  let us see step-by-step how the correctness of each operation is "
"verified. "
msgstr ""
" ,  let us see step-by-step how the correctness of each operation is "
"verified. "

#: src/zk-snarks/3-General-Purpose-Computation.md:155
msgid "Recall that a verifier is looking for equality   "
msgstr "Recall that a verifier is looking for equality   "

#: src/zk-snarks/3-General-Purpose-Computation.md:155
msgid " . "
msgstr " . "

#: src/zk-snarks/3-General-Purpose-Computation.md:157
msgid "本例中，计算是在点  "
msgstr "本例中，计算是在点  "

#: src/zk-snarks/3-General-Purpose-Computation.md:157
msgid "  处被表示出来的，所以 target poly  "
msgstr "  处被表示出来的，所以 target poly  "

#: src/zk-snarks/3-General-Purpose-Computation.md:157
msgid " 在这些点处必须 evaluation 为 "
msgstr " 在这些点处必须 evaluation 为 "

#: src/zk-snarks/3-General-Purpose-Computation.md:157
msgid "  的根 root 必须是 1，2 和 3，它的基本形式就是："
msgstr "  的根 root 必须是 1，2 和 3，它的基本形式就是："

#: src/zk-snarks/3-General-Purpose-Computation.md:158
msgid "在实际过程中, "
msgstr "在实际过程中, "

#: src/zk-snarks/3-General-Purpose-Computation.md:158
msgid " 一般是放到单位根 root of unity  ——  "
msgstr " 一般是放到单位根 root of unity  ——  "

#: src/zk-snarks/3-General-Purpose-Computation.md:158
msgid " 里的 "
msgstr " 里的 "

#: src/zk-snarks/3-General-Purpose-Computation.md:161
msgid "Firstly,  "
msgstr "Firstly,  "

#: src/zk-snarks/3-General-Purpose-Computation.md:161
msgid "  are multiplied which results in:"
msgstr "  are multiplied which results in:"

#: src/zk-snarks/3-General-Purpose-Computation.md:165
msgid "Secondly, the  "
msgstr "Secondly, the  "

#: src/zk-snarks/3-General-Purpose-Computation.md:165
msgid "  is subtracted from the result of  "
msgstr "  is subtracted from the result of  "

#: src/zk-snarks/3-General-Purpose-Computation.md:165
msgid "  which is  "
msgstr "  which is  "

#: src/zk-snarks/3-General-Purpose-Computation.md:169
msgid ""
"已经可以看出每一个 operands multiplication 都对应了正确的结果。最后一步 "
msgstr ""
"已经可以看出每一个 operands multiplication 都对应了正确的结果。最后一步 "

#: src/zk-snarks/3-General-Purpose-Computation.md:169
msgid " 要算出一个有效因式："
msgstr " 要算出一个有效因式："

#: src/zk-snarks/3-General-Purpose-Computation.md:171
msgid "22"
msgstr "22"

#: src/zk-snarks/3-General-Purpose-Computation.md:171
msgid "57"
msgstr "57"

#: src/zk-snarks/3-General-Purpose-Computation.md:171
msgid "63"
msgstr "63"

#: src/zk-snarks/3-General-Purpose-Computation.md:171
msgid "24"
msgstr "24"

#: src/zk-snarks/3-General-Purpose-Computation.md:173
msgid "通过长除法(long division) 可以算出： "
msgstr "通过长除法(long division) 可以算出： "

#: src/zk-snarks/3-General-Purpose-Computation.md:180
msgid "现在显然  "
msgstr "现在显然  "

#: src/zk-snarks/3-General-Purpose-Computation.md:180
msgid "  ，这就是我们要证明的内容。"
msgstr "  ，这就是我们要证明的内容。"

#: src/zk-snarks/3-General-Purpose-Computation.md:182
msgid "这里只用了一组多项式   "
msgstr "这里只用了一组多项式   "

#: src/zk-snarks/3-General-Purpose-Computation.md:182
msgid "  就将所有计算的约束关系表示出来了，有几步计算, 也就对应着目标多项式  "
msgstr "  就将所有计算的约束关系表示出来了，有几步计算, 也就对应着目标多项式  "

#: src/zk-snarks/3-General-Purpose-Computation.md:182
msgid "  要有几个根                (这里我这么理解: 计算的步数多了, 那么 "
msgstr "  要有几个根                (这里我这么理解: 计算的步数多了, 那么 "

#: src/zk-snarks/3-General-Purpose-Computation.md:182
msgid " 的根也就多了, 比如可能是 "
msgstr " 的根也就多了, 比如可能是 "

#: src/zk-snarks/3-General-Purpose-Computation.md:182
msgid ""
"   , 因为约束等式的行数多了, 也就需要同步约束这些等式符合所有的计算完整性验"
"证 )"
msgstr ""
"   , 因为约束等式的行数多了, 也就需要同步约束这些等式符合所有的计算完整性验"
"证 )"

#: src/zk-snarks/3-General-Purpose-Computation.md:184
msgid "当前的协议似乎存在一些缺陷，多项式只能证明 "
msgstr "当前的协议似乎存在一些缺陷，多项式只能证明 "

#: src/zk-snarks/3-General-Purpose-Computation.md:184
msgid " 拥有一组多项式  "
msgstr " 拥有一组多项式  "

#: src/zk-snarks/3-General-Purpose-Computation.md:184
msgid " ，在  "
msgstr " ，在  "

#: src/zk-snarks/3-General-Purpose-Computation.md:184
msgid "  的几个根的取值处  "
msgstr "  的几个根的取值处  "

#: src/zk-snarks/3-General-Purpose-Computation.md:184
msgid ""
" ，但无法证明这组多项式符合我们要证明的数学表达式： 1）多个计算关系之间也是分"
"开表示的，这些算式之间的关系也同样无法进行约束 2）由于 "
msgstr ""
" ，但无法证明这组多项式符合我们要证明的数学表达式： 1）多个计算关系之间也是分"
"开表示的，这些算式之间的关系也同样无法进行约束 2）由于 "

#: src/zk-snarks/3-General-Purpose-Computation.md:186
msgid ""
"  生成的证明中只有计算结果，左操作数，右操作数，输出在计算中混用也不会被发现 "
"3）由于左操作数，右操作数，输出是分开表示的，他们互相之间的关系无法进行约束"
msgstr ""
"  生成的证明中只有计算结果，左操作数，右操作数，输出在计算中混用也不会被发现 "
"3）由于左操作数，右操作数，输出是分开表示的，他们互相之间的关系无法进行约束"

#: src/zk-snarks/3-General-Purpose-Computation.md:190
msgid "Variable Polynomials"
msgstr "Variable Polynomials"

#: src/zk-snarks/3-General-Purpose-Computation.md:192
msgid ""
"现在我们可以一次证明多个运算（如上百万个甚至更多）了，但是前文结尾提到了几个"
"关键缺点(critical downside)"
msgstr ""
"现在我们可以一次证明多个运算（如上百万个甚至更多）了，但是前文结尾提到了几个"
"关键缺点(critical downside)"

#: src/zk-snarks/3-General-Purpose-Computation.md:194
msgid ""
"**如果证明中执行的\"程序\"在不同运算中使用了相同的变量作为操作数或输出**，例"
"如："
msgstr ""
"**如果证明中执行的\"程序\"在不同运算中使用了相同的变量作为操作数或输出**，例"
"如："

#: src/zk-snarks/3-General-Purpose-Computation.md:198
msgid "然而，因为我们的协议中是允许 "
msgstr "然而，因为我们的协议中是允许 "

#: src/zk-snarks/3-General-Purpose-Computation.md:198
msgid " 为**多项式设置任何系数**的，所以他可以不受限制得为不同计算中的  "
msgstr " 为**多项式设置任何系数**的，所以他可以不受限制得为不同计算中的  "

#: src/zk-snarks/3-General-Purpose-Computation.md:198
msgid "  设置不同的值，如："
msgstr "  设置不同的值，如："

#: src/zk-snarks/3-General-Purpose-Computation.md:203
msgid ""
"Therefore we must ensure that any variable can only have **a single value** "
"across every operation it is used in. (因而我们必须要确保每一个变量在所有运算"
"中出现的地方都只有一个取值。)"
msgstr ""
"Therefore we must ensure that any variable can only have **a single value** "
"across every operation it is used in. (因而我们必须要确保每一个变量在所有运算"
"中出现的地方都只有一个取值。)"

#: src/zk-snarks/3-General-Purpose-Computation.md:205
msgid ""
"注意：文中的 `variable` 与常规的计算机科学中 `variable` 的定义不同，这里的变"
"量是不可改变的(immutable),  而且每次执行都只赋值一次(only assigned once per "
"execution)     (即示例伪代码中的那些不会被修改的变量)"
msgstr ""
"注意：文中的 `variable` 与常规的计算机科学中 `variable` 的定义不同，这里的变"
"量是不可改变的(immutable),  而且每次执行都只赋值一次(only assigned once per "
"execution)     (即示例伪代码中的那些不会被修改的变量)"

#: src/zk-snarks/3-General-Purpose-Computation.md:207
msgid ""
"zkSNARK 论文中，这个「变量」其实有一个对应的名词叫做 `assignment`，是算术**电"
"路**的「赋值」，对应的是问题结构或者说算术电路的结构。而所有的 assignments 是"
"一个算术电路可满足性问题的解，包含了算术电路的输入值以及电路运算过程中输出的"
"中间结果值 (没看懂这里)"
msgstr ""
"zkSNARK 论文中，这个「变量」其实有一个对应的名词叫做 `assignment`，是算术**电"
"路**的「赋值」，对应的是问题结构或者说算术电路的结构。而所有的 assignments 是"
"一个算术电路可满足性问题的解，包含了算术电路的输入值以及电路运算过程中输出的"
"中间结果值 (没看懂这里)"

#: src/zk-snarks/3-General-Purpose-Computation.md:210
msgid "Single-Variable Operand Polynomial"
msgstr "Single-Variable Operand Polynomial"

#: src/zk-snarks/3-General-Purpose-Computation.md:212
msgid ""
"那么, How to ensure  每一个变量在所有运算中出现的地方都只有一个取值?  究其原"
"因,  "
msgstr ""
"那么, How to ensure  每一个变量在所有运算中出现的地方都只有一个取值?  究其原"
"因,  "

#: src/zk-snarks/3-General-Purpose-Computation.md:212
msgid "  可以设置不同值是因为他可以任意控制 "
msgstr "  可以设置不同值是因为他可以任意控制 "

#: src/zk-snarks/3-General-Purpose-Computation.md:212
msgid " 的系数  "
msgstr " 的系数  "

#: src/zk-snarks/3-General-Purpose-Computation.md:213
msgid "①"
msgstr "①"

#: src/zk-snarks/3-General-Purpose-Computation.md:213
msgid "②"
msgstr "②"

#: src/zk-snarks/3-General-Purpose-Computation.md:213
msgid " a **malicious** "
msgstr " a **malicious** "

#: src/zk-snarks/3-General-Purpose-Computation.md:214
msgid "  可以分别为第一第二行的  "
msgstr "  可以分别为第一第二行的  "

#: src/zk-snarks/3-General-Purpose-Computation.md:214
msgid "  分配不同的值, 比如分别分配 "
msgstr "  分配不同的值, 比如分别分配 "

#: src/zk-snarks/3-General-Purpose-Computation.md:215
#: src/zk-snarks/3-General-Purpose-Computation.md:216
msgid "assign  "
msgstr "assign  "

#: src/zk-snarks/3-General-Purpose-Computation.md:215
#: src/zk-snarks/3-General-Purpose-Computation.md:216
#: src/zk-snarks/4-Construction-Properties.md:221
msgid "  for  "
msgstr "  for  "

#: src/zk-snarks/3-General-Purpose-Computation.md:215
msgid "  in raw ① , 那么此处 "
msgstr "  in raw ① , 那么此处 "

#: src/zk-snarks/3-General-Purpose-Computation.md:215
#: src/zk-snarks/3-General-Purpose-Computation.md:216
msgid " 的系数为 "
msgstr " 的系数为 "

#: src/zk-snarks/3-General-Purpose-Computation.md:215
#: src/zk-snarks/3-General-Purpose-Computation.md:216
msgid " , 即函数通过点 "
msgstr " , 即函数通过点 "

#: src/zk-snarks/3-General-Purpose-Computation.md:216
msgid "  in raw ②, 那么此处 "
msgstr "  in raw ②, 那么此处 "

#: src/zk-snarks/3-General-Purpose-Computation.md:218
msgid "此时就出现了不一致问题 —— 那么如果对于同一个变量  "
msgstr "此时就出现了不一致问题 —— 那么如果对于同一个变量  "

#: src/zk-snarks/3-General-Purpose-Computation.md:218
msgid "  , 这些系数是固定的，就可以解决问题了"
msgstr "  , 这些系数是固定的，就可以解决问题了"

#: src/zk-snarks/3-General-Purpose-Computation.md:220
msgid ""
"如下是 2 个**包含相等值的多项式** : 它们分别都表示了有两个相等值对应的运算"
"（即在 "
msgstr ""
"如下是 2 个**包含相等值的多项式** : 它们分别都表示了有两个相等值对应的运算"
"（即在 "

#: src/zk-snarks/3-General-Purpose-Computation.md:220
msgid " 处），第一个多项式的取值为 1，第二个多项式的取值为 2："
msgstr " 处），第一个多项式的取值为 1，第二个多项式的取值为 2："

#: src/zk-snarks/3-General-Purpose-Computation.md:224
msgid ""
"注意: 这 2 个多项式的相应的系数是成比例的 —— 第 2 个多项式的系数是第 1 个的 "
"**2** 倍"
msgstr ""
"注意: 这 2 个多项式的相应的系数是成比例的 —— 第 2 个多项式的系数是第 1 个的 "
"**2** 倍"

#: src/zk-snarks/3-General-Purpose-Computation.md:226
msgid ""
"那么由于多项式的算术性质，如果我们想要**同时地改变多项式中所有的值** , 我们就"
"需要改变它的比例，如果我们用一个数字 "
msgstr ""
"那么由于多项式的算术性质，如果我们想要**同时地改变多项式中所有的值** , 我们就"
"需要改变它的比例，如果我们用一个数字 "

#: src/zk-snarks/3-General-Purpose-Computation.md:226
msgid " 乘以多项式，那么多项式值就会等比例变换为 "
msgstr " 乘以多项式，那么多项式值就会等比例变换为 "

#: src/zk-snarks/3-General-Purpose-Computation.md:226
msgid " 倍"
msgstr " 倍"

#: src/zk-snarks/3-General-Purpose-Computation.md:228
msgid ""
"Consequently, if a verifier needs to **enforce the prover to set the same "
"value in all operations**, then it should only be possible to modify the "
"proportion and not the individual coefficients.  \n"
"(因此，**如果 "
msgstr ""
"Consequently, if a verifier needs to **enforce the prover to set the same "
"value in all operations**, then it should only be possible to modify the "
"proportion and not the individual coefficients.  \n"
"(因此，**如果 "

#: src/zk-snarks/3-General-Purpose-Computation.md:229
msgid " 需要在所有计算中强制 "
msgstr " 需要在所有计算中强制 "

#: src/zk-snarks/3-General-Purpose-Computation.md:229
msgid " 设置相同的值，他就要限制 "
msgstr " 设置相同的值，他就要限制 "

#: src/zk-snarks/3-General-Purpose-Computation.md:229
msgid " 只能改动多项式的比例, 而不是恣意篡改某处操作的单个系数**)"
msgstr " 只能改动多项式的比例, 而不是恣意篡改某处操作的单个系数**)"

#: src/zk-snarks/3-General-Purpose-Computation.md:231
msgid ""
"怎么**保持系数比例不变**呢？对于这个问题我们可以先思考一下在 左运算多项式 "
"(left operand polynomial) 中我们提供的 Proof  是什么 —— 是  "
msgstr ""
"怎么**保持系数比例不变**呢？对于这个问题我们可以先思考一下在 左运算多项式 "
"(left operand polynomial) 中我们提供的 Proof  是什么 —— 是  "

#: src/zk-snarks/3-General-Purpose-Computation.md:231
msgid "  在一些秘密值  "
msgstr "  在一些秘密值  "

#: src/zk-snarks/3-General-Purpose-Computation.md:231
msgid "  处的加密值："
msgstr "  处的加密值："

#: src/zk-snarks/3-General-Purpose-Computation.md:233
msgid "上文中, 我们已经知道怎样通过 `α-shift` 去限制 "
msgstr "上文中, 我们已经知道怎样通过 `α-shift` 去限制 "

#: src/zk-snarks/3-General-Purpose-Computation.md:233
msgid " 只能使用 "
msgstr " 只能使用 "

#: src/zk-snarks/3-General-Purpose-Computation.md:233
msgid " (或 "
msgstr " (或 "

#: src/zk-snarks/3-General-Purpose-Computation.md:233
msgid " ) 提供的  "
msgstr " ) 提供的  "

#: src/zk-snarks/3-General-Purpose-Computation.md:233
msgid ""
"  的幂做计算，来使得单个运算能够满足同态乘法    (such that homomorphic "
"multiplication is the single operation available.)"
msgstr ""
"  的幂做计算，来使得单个运算能够满足同态乘法    (such that homomorphic "
"multiplication is the single operation available.)"

#: src/zk-snarks/3-General-Purpose-Computation.md:235
msgid "和限制单个求幂值相似， "
msgstr "和限制单个求幂值相似， "

#: src/zk-snarks/3-General-Purpose-Computation.md:235
msgid ""
" 可以**一次限制完整的多项式** 。而不只是提供单独的加密及其   `α-shift` : "
msgstr ""
" 可以**一次限制完整的多项式** 。而不只是提供单独的加密及其   `α-shift` : "

#: src/zk-snarks/3-General-Purpose-Computation.md:239
msgid "协议的过程是："
msgstr "协议的过程是："

#: src/zk-snarks/3-General-Purpose-Computation.md:241
msgid "**Setup :**"
msgstr "**Setup :**"

#: src/zk-snarks/3-General-Purpose-Computation.md:242
msgid "使用多项式对应的系数构造相应的 operand polynomial  "
msgstr "使用多项式对应的系数构造相应的 operand polynomial  "

#: src/zk-snarks/3-General-Purpose-Computation.md:243
msgid "创造随机 secret   "
msgstr "创造随机 secret   "

#: src/zk-snarks/3-General-Purpose-Computation.md:244
msgid "使用加密的  "
msgstr "使用加密的  "

#: src/zk-snarks/3-General-Purpose-Computation.md:244
msgid "  和它的 ”α-shifted“ :  "
msgstr "  和它的 ”α-shifted“ :  "

#: src/zk-snarks/3-General-Purpose-Computation.md:244
msgid "  来设置 _proving key_"
msgstr "  来设置 _proving key_"

#: src/zk-snarks/3-General-Purpose-Computation.md:245
msgid "设置 _verification key_：  "
msgstr "设置 _verification key_：  "

#: src/zk-snarks/3-General-Purpose-Computation.md:247
#: src/zk-snarks/3-General-Purpose-Computation.md:354
msgid "**Proving** : "
msgstr "**Proving** : "

#: src/zk-snarks/3-General-Purpose-Computation.md:248
msgid "注意这个语境下,  "
msgstr "注意这个语境下,  "

#: src/zk-snarks/3-General-Purpose-Computation.md:248
msgid " 对应的操作数只有 "
msgstr " 对应的操作数只有 "

#: src/zk-snarks/3-General-Purpose-Computation.md:248
msgid "  一个 (Recall ① ② 两个等式) , 所以若 "
msgstr "  一个 (Recall ① ② 两个等式) , 所以若 "

#: src/zk-snarks/3-General-Purpose-Computation.md:248
msgid " 赋值为 "
msgstr " 赋值为 "

#: src/zk-snarks/3-General-Purpose-Computation.md:248
msgid " , 则第① 第② 个等式里, 都要保持 "
msgstr " , 则第① 第② 个等式里, 都要保持 "

#: src/zk-snarks/3-General-Purpose-Computation.md:248
msgid "  的赋值为 "
msgstr "  的赋值为 "

#: src/zk-snarks/3-General-Purpose-Computation.md:249
#: src/zk-snarks/5-Pinocchio-Protocol.md:97
msgid " 对 "
msgstr " 对 "

#: src/zk-snarks/3-General-Purpose-Computation.md:249
msgid " 的操作数 "
msgstr " 的操作数 "

#: src/zk-snarks/3-General-Purpose-Computation.md:249
msgid " 的赋值为 "
msgstr " 的赋值为 "

#: src/zk-snarks/3-General-Purpose-Computation.md:250
msgid "将其乘以操作数多项式:  "
msgstr "将其乘以操作数多项式:  "

#: src/zk-snarks/3-General-Purpose-Computation.md:251
msgid "乘以 `α-shifted` 后的 operand polynomial :  "
msgstr "乘以 `α-shifted` 后的 operand polynomial :  "

#: src/zk-snarks/3-General-Purpose-Computation.md:252
msgid "提供 operand polynomial **multiplication** Proof : "
msgstr "提供 operand polynomial **multiplication** Proof : "

#: src/zk-snarks/3-General-Purpose-Computation.md:253
msgid "这里的 `multiplication`  就是指通过 "
msgstr "这里的 `multiplication`  就是指通过 "

#: src/zk-snarks/3-General-Purpose-Computation.md:253
msgid "  来限制 "
msgstr "  来限制 "

#: src/zk-snarks/3-General-Purpose-Computation.md:253
msgid "  对 operand polynomial  只能提供相同的 assignment"
msgstr "  对 operand polynomial  只能提供相同的 assignment"

#: src/zk-snarks/3-General-Purpose-Computation.md:255
#: src/zk-snarks/4-Construction-Properties.md:311
#: src/zk-snarks/5-Pinocchio-Protocol.md:211
msgid "**Verification**"
msgstr "**Verification**"

#: src/zk-snarks/3-General-Purpose-Computation.md:256
msgid "Parse the Proof as "
msgstr "Parse the Proof as "

#: src/zk-snarks/3-General-Purpose-Computation.md:257
msgid "Pairing 验证比例 "
msgstr "Pairing 验证比例 "

#: src/zk-snarks/3-General-Purpose-Computation.md:263
msgid "前面反复提到,  "
msgstr "前面反复提到,  "

#: src/zk-snarks/3-General-Purpose-Computation.md:263
msgid ""
"  needs to respond with the same `α-shift` , and because he **cannot recover "
"_α_ from the proving key** ,  the only way to **maintain the shift** is to "
"multiply both encryptions by the same value : "
msgstr ""
"  needs to respond with the same `α-shift` , and because he **cannot recover "
"_α_ from the proving key** ,  the only way to **maintain the shift** is to "
"multiply both encryptions by the same value : "

#: src/zk-snarks/3-General-Purpose-Computation.md:266
msgid "同样的道理, 用这种方法可以限制 "
msgstr "同样的道理, 用这种方法可以限制 "

#: src/zk-snarks/3-General-Purpose-Computation.md:266
msgid " 让其无法修改 "
msgstr " 让其无法修改 "

#: src/zk-snarks/3-General-Purpose-Computation.md:266
msgid " 的单个系数 (modify individual coefficients of "
msgstr " 的单个系数 (modify individual coefficients of "

#: src/zk-snarks/3-General-Purpose-Computation.md:266
msgid " ) , 如果多项式为  "
msgstr " ) , 如果多项式为  "

#: src/zk-snarks/3-General-Purpose-Computation.md:266
msgid "  只可以用一个值  "
msgstr "  只可以用一个值  "

#: src/zk-snarks/3-General-Purpose-Computation.md:266
msgid "  去 multiply 整个多项式一次： "
msgstr "  去 multiply 整个多项式一次： "

#: src/zk-snarks/3-General-Purpose-Computation.md:268
msgid ""
"  Multiplication by another polynomial is not available since `pairings`, "
"and `α-shifts` of individual exponents of _s_ are not provided.   Prover "
"cannot add or subtract either since:"
msgstr ""
"  Multiplication by another polynomial is not available since `pairings`, "
"and `α-shifts` of individual exponents of _s_ are not provided.   Prover "
"cannot add or subtract either since:"

#: src/zk-snarks/3-General-Purpose-Computation.md:273
msgid "This requires the knowledge of unencrypted  "
msgstr "This requires the knowledge of unencrypted  "

#: src/zk-snarks/3-General-Purpose-Computation.md:273
msgid "  , 这里也同样需要未加密的 "
msgstr "  , 这里也同样需要未加密的 "

#: src/zk-snarks/3-General-Purpose-Computation.md:273
msgid " 的知识(才能运算)"
msgstr " 的知识(才能运算)"

#: src/zk-snarks/3-General-Purpose-Computation.md:275
msgid "详细解释一下 上式 : "
msgstr "详细解释一下 上式 : "

#: src/zk-snarks/3-General-Purpose-Computation.md:276
msgid "考虑 "
msgstr "考虑 "

#: src/zk-snarks/3-General-Purpose-Computation.md:276
msgid " ，如果 "
msgstr " ，如果 "

#: src/zk-snarks/3-General-Purpose-Computation.md:276
msgid " 能够任意修改多项式的系数，他可能会想要构造一个新的多项式  "
msgstr " 能够任意修改多项式的系数，他可能会想要构造一个新的多项式  "

#: src/zk-snarks/3-General-Purpose-Computation.md:276
msgid "  来欺骗 "
msgstr "  来欺骗 "

#: src/zk-snarks/3-General-Purpose-Computation.md:277
msgid "但是， "
msgstr "但是， "

#: src/zk-snarks/3-General-Purpose-Computation.md:277
msgid " 无法实现这样的操作，因为他不知道确切的 "
msgstr " 无法实现这样的操作，因为他不知道确切的 "

#: src/zk-snarks/3-General-Purpose-Computation.md:277
msgid " 的值 , 最后的等式是为了展示这一限制："
msgstr " 的值 , 最后的等式是为了展示这一限制："

#: src/zk-snarks/3-General-Purpose-Computation.md:278
msgid "左侧： "
msgstr "左侧： "

#: src/zk-snarks/3-General-Purpose-Computation.md:278
msgid " 需要满足 α-shift, 通过这种方式修改 "
msgstr " 需要满足 α-shift, 通过这种方式修改 "

#: src/zk-snarks/3-General-Purpose-Computation.md:278
msgid " 的各个系数"
msgstr " 的各个系数"

#: src/zk-snarks/3-General-Purpose-Computation.md:279
msgid "右侧： "
msgstr "右侧： "

#: src/zk-snarks/3-General-Purpose-Computation.md:279
msgid " 提供了 "
msgstr " 提供了 "

#: src/zk-snarks/3-General-Purpose-Computation.md:279
msgid " , 但没有提供 "
msgstr " , 但没有提供 "

#: src/zk-snarks/3-General-Purpose-Computation.md:279
msgid " , 所以 "
msgstr " , 所以 "

#: src/zk-snarks/3-General-Purpose-Computation.md:279
msgid " 无从得知  "
msgstr " 无从得知  "

#: src/zk-snarks/3-General-Purpose-Computation.md:279
msgid " , 所以  "
msgstr " , 所以  "

#: src/zk-snarks/3-General-Purpose-Computation.md:279
msgid "  只能提供可怜的 "
msgstr "  只能提供可怜的 "

#: src/zk-snarks/3-General-Purpose-Computation.md:279
msgid "  , 而这是无法通过 Pairing 验证的 "
msgstr "  , 而这是无法通过 Pairing 验证的 "

#: src/zk-snarks/3-General-Purpose-Computation.md:284
msgid "现在有了这个协议，不过怎么去构造  _operand polynomial_  "
msgstr "现在有了这个协议，不过怎么去构造  _operand polynomial_  "

#: src/zk-snarks/3-General-Purpose-Computation.md:284
msgid ""
"  呢？由于任何整数都可以通过乘以 1 得到它本身，所以多项式中对应的每个计算结果"
"都应该为 1 ，即："
msgstr ""
"  呢？由于任何整数都可以通过乘以 1 得到它本身，所以多项式中对应的每个计算结果"
"都应该为 1 ，即："

#: src/zk-snarks/3-General-Purpose-Computation.md:289
msgid "然后再让 prover 在其上”分配“一个值 a ："
msgstr "然后再让 prover 在其上”分配“一个值 a ："

#: src/zk-snarks/3-General-Purpose-Computation.md:293
msgid "**Remark 4.1** :  "
msgstr "**Remark 4.1** :  "

#: src/zk-snarks/3-General-Purpose-Computation.md:293
#: src/zk-snarks/4-Construction-Properties.md:325
msgid " 可以在操作数多项式上分配一个 "
msgstr " 可以在操作数多项式上分配一个 "

#: src/zk-snarks/3-General-Purpose-Computation.md:293
#: src/zk-snarks/4-Construction-Properties.md:325
msgid " 不能检测到 , 下面具体描述了 "
msgstr " 不能检测到 , 下面具体描述了 "

#: src/zk-snarks/3-General-Purpose-Computation.md:293
#: src/zk-snarks/4-Construction-Properties.md:325
msgid "  对多项式进行特定加（或减）操作的能力，而这种操作不会影响 "
msgstr "  对多项式进行特定加（或减）操作的能力，而这种操作不会影响 "

#: src/zk-snarks/3-General-Purpose-Computation.md:293
#: src/zk-snarks/4-Construction-Properties.md:325
msgid " 配对验证 , 因而可以修改多项式使其超出 "
msgstr " 配对验证 , 因而可以修改多项式使其超出 "

#: src/zk-snarks/3-General-Purpose-Computation.md:293
msgid ""
" 的预期 或 _prove a_ _different statement_，后面的章节我们将会解决掉这个问"
"题 :"
msgstr ""
" 的预期 或 _prove a_ _different statement_，后面的章节我们将会解决掉这个问"
"题 :"

#: src/zk-snarks/3-General-Purpose-Computation.md:295
#: src/zk-snarks/4-Construction-Properties.md:326
msgid "αv"
msgstr "αv"

#: src/zk-snarks/3-General-Purpose-Computation.md:295
#: src/zk-snarks/4-Construction-Properties.md:290
#: src/zk-snarks/4-Construction-Properties.md:326
#: src/zk-snarks/5-Pinocchio-Protocol.md:106
#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:312 SNARKs.md:316 SNARKs.md:324 SNARKs.md:363 SNARKs.md:368
#: SNARKs.md:370 SNARKs.md:371 SNARKs.md:372 SNARKs.md:373
msgid "←"
msgstr "←"

#: src/zk-snarks/3-General-Purpose-Computation.md:295
#: src/halo2/tmp/9-decomposed.md:30
msgid "re"
msgstr "re"

#: src/zk-snarks/3-General-Purpose-Computation.md:298
msgid "identically equal: 恒等"
msgstr "identically equal: 恒等"

#: src/zk-snarks/3-General-Purpose-Computation.md:300
msgid "由于 verification key 中包含了加密了的  "
msgstr "由于 verification key 中包含了加密了的  "

#: src/zk-snarks/3-General-Purpose-Computation.md:300
#: src/zk-snarks/4-Construction-Properties.md:327
msgid " ， 所以 "
msgstr " ， 所以 "

#: src/zk-snarks/3-General-Purpose-Computation.md:300
#: src/zk-snarks/4-Construction-Properties.md:327
msgid " 可以用多项式加（或者减）任意一个值 "
msgstr " 可以用多项式加（或者减）任意一个值 "

#: src/zk-snarks/3-General-Purpose-Computation.md:300
#: src/zk-snarks/4-Construction-Properties.md:327
msgid " 而不会破坏 Pairing 的成立.  后面我们会解决掉这个 bug"
msgstr " 而不会破坏 Pairing 的成立.  后面我们会解决掉这个 bug"

#: src/zk-snarks/3-General-Purpose-Computation.md:302
#: src/zk-snarks/3-General-Purpose-Computation.md:385
msgid "Summary/Recap"
msgstr "Summary/Recap"

#: src/zk-snarks/3-General-Purpose-Computation.md:304
msgid ""
"这一小节是解决这样一个问题，算术电路中**一个 input wire 或者 output wire可能"
"同时会作为多个门的输入 wire**，如何确保约束这些公用 wire 的问题。 "
msgstr ""
"这一小节是解决这样一个问题，算术电路中**一个 input wire 或者 output wire可能"
"同时会作为多个门的输入 wire**，如何确保约束这些公用 wire 的问题。 "

#: src/zk-snarks/3-General-Purpose-Computation.md:306
msgid ""
"由于**要证明的数学表达式是公开的**，那么各个算式之间的约束关系也就是公开的，"
"那么我们就可以把构造多项式的工作交给 "
msgstr ""
"由于**要证明的数学表达式是公开的**，那么各个算式之间的约束关系也就是公开的，"
"那么我们就可以把构造多项式的工作交给 "

#: src/zk-snarks/3-General-Purpose-Computation.md:306
msgid " 环节，这样 "
msgstr " 环节，这样 "

#: src/zk-snarks/3-General-Purpose-Computation.md:306
msgid " 只要填上对应的数值就可以了。"
msgstr " 只要填上对应的数值就可以了。"

#: src/zk-snarks/3-General-Purpose-Computation.md:308
msgid ""
"上文这个方法就限制了在**同一个操作数**多项式上，不同的计算式中使用的同一个值"
"的约束关系；同样若一个操作数多项式中用到了多个值，也可以将这些值全都加起来，"
"如下文所述。"
msgstr ""
"上文这个方法就限制了在**同一个操作数**多项式上，不同的计算式中使用的同一个值"
"的约束关系；同样若一个操作数多项式中用到了多个值，也可以将这些值全都加起来，"
"如下文所述。"

#: src/zk-snarks/3-General-Purpose-Computation.md:311
msgid "Multi-Variable Operand Polynomial"
msgstr "Multi-Variable Operand Polynomial"

#: src/zk-snarks/3-General-Purpose-Computation.md:313
msgid "如上文, 因为只有当所有的左操作数使用同一个变量  "
msgstr "如上文, 因为只有当所有的左操作数使用同一个变量  "

#: src/zk-snarks/3-General-Purpose-Computation.md:313
msgid "  的时候我们才可以设置一个值。但是如果左操作数中再多一个值  "
msgstr "  的时候我们才可以设置一个值。但是如果左操作数中再多一个值  "

#: src/zk-snarks/3-General-Purpose-Computation.md:313
msgid "  要怎么做呢 ?"
msgstr "  要怎么做呢 ?"

#: src/zk-snarks/3-General-Purpose-Computation.md:319
msgid "Therefore we can separate the `operand polynomial`   "
msgstr "Therefore we can separate the `operand polynomial`   "

#: src/zk-snarks/3-General-Purpose-Computation.md:319
msgid "   into 2  `operand variable polynomials` :  "
msgstr "   into 2  `operand variable polynomials` :  "

#: src/zk-snarks/3-General-Purpose-Computation.md:322
msgid "变量 "
msgstr "变量 "

#: src/zk-snarks/3-General-Purpose-Computation.md:322
msgid ""
" 可以被分别 **赋值 & 约束**，然后**加在一起** , 来表示所有的**左操作数**变"
"量。"
msgstr ""
" 可以被分别 **赋值 & 约束**，然后**加在一起** , 来表示所有的**左操作数**变"
"量。"

#: src/zk-snarks/3-General-Purpose-Computation.md:324
msgid ""
"如果 `多变量多项式` 在一个对应运算中被用做操作数，那么这一项就置为 1，否则就"
"置为 0 , 0 跟任何值相乘结果都是零，当把他们相加在一起的时候也就可以忽略掉这一"
"项 (类似 Lagrange Basis 的作用) 在我们的例子中, 这些变量多项式必须满足以下计"
"算："
msgstr ""
"如果 `多变量多项式` 在一个对应运算中被用做操作数，那么这一项就置为 1，否则就"
"置为 0 , 0 跟任何值相乘结果都是零，当把他们相加在一起的时候也就可以忽略掉这一"
"项 (类似 Lagrange Basis 的作用) 在我们的例子中, 这些变量多项式必须满足以下计"
"算："

#: src/zk-snarks/3-General-Purpose-Computation.md:331
msgid ""
"于是我们就可以将每个变量分开 _assigned_ value ，然后把他们加在一起来计算出操"
"作数多项式，例如当 "
msgstr ""
"于是我们就可以将每个变量分开 _assigned_ value ，然后把他们加在一起来计算出操"
"作数多项式，例如当 "

#: src/zk-snarks/3-General-Purpose-Computation.md:331
msgid " 时 , 得到  "
msgstr " 时 , 得到  "

#: src/zk-snarks/3-General-Purpose-Computation.md:336
msgid "上图中的  "
msgstr "上图中的  "

#: src/zk-snarks/3-General-Purpose-Computation.md:336
msgid " 代表:  用 3 实例化的变量 "
msgstr " 代表:  用 3 实例化的变量 "

#: src/zk-snarks/3-General-Purpose-Computation.md:336
msgid "  ( _variable  "
msgstr "  ( _variable  "

#: src/zk-snarks/3-General-Purpose-Computation.md:336
msgid "  instantiated with value 3_ )"
msgstr "  instantiated with value 3_ )"

#: src/zk-snarks/3-General-Purpose-Computation.md:338
msgid "从现在起 , 我们用大写的  "
msgstr "从现在起 , 我们用大写的  "

#: src/zk-snarks/3-General-Purpose-Computation.md:338
msgid "  来表示这个复杂的操作符多项式，即"
msgstr "  来表示这个复杂的操作符多项式，即"

#: src/zk-snarks/3-General-Purpose-Computation.md:342
msgid " 仅当每一个 _operand variable polynomial_  是由  "
msgstr " 仅当每一个 _operand variable polynomial_  是由  "

#: src/zk-snarks/3-General-Purpose-Computation.md:342
msgid "  约束的 (restricted by the "
msgstr "  约束的 (restricted by the "

#: src/zk-snarks/3-General-Purpose-Computation.md:342
msgid " )，结果才有效"
msgstr " )，结果才有效"

#: src/zk-snarks/3-General-Purpose-Computation.md:344
msgid "以 left operand 部分而言, 协议部分更改为："
msgstr "以 left operand 部分而言, 协议部分更改为："

#: src/zk-snarks/3-General-Purpose-Computation.md:346
msgid "**Setup:**"
msgstr "**Setup:**"

#: src/zk-snarks/3-General-Purpose-Computation.md:347
msgid "构造 "
msgstr "构造 "

#: src/zk-snarks/3-General-Purpose-Computation.md:347
msgid "  - 使得它能够在对应的 `\"operation x\"` 处为 1，其他地方为 0"
msgstr "  - 使得它能够在对应的 `\"operation x\"` 处为 1，其他地方为 0"

#: src/zk-snarks/3-General-Purpose-Computation.md:348
#: src/zk-snarks/4-Construction-Properties.md:239
#: src/zk-snarks/5-Pinocchio-Protocol.md:200
msgid "选择随机数 "
msgstr "选择随机数 "

#: src/zk-snarks/3-General-Purpose-Computation.md:349
msgid "计算并加密 _未赋值的变量多项式 (unassigned variable poly)_： "
msgstr "计算并加密 _未赋值的变量多项式 (unassigned variable poly)_： "

#: src/zk-snarks/3-General-Purpose-Computation.md:350
msgid "计算 shifts of these polys :   "
msgstr "计算 shifts of these polys :   "

#: src/zk-snarks/3-General-Purpose-Computation.md:351
msgid "set proving key : "
msgstr "set proving key : "

#: src/zk-snarks/3-General-Purpose-Computation.md:352
msgid "set _verification key_：  "
msgstr "set _verification key_：  "

#: src/zk-snarks/3-General-Purpose-Computation.md:355
msgid "assign values  "
msgstr "assign values  "

#: src/zk-snarks/3-General-Purpose-Computation.md:355
msgid ""
"  to the variable polys : {\\left(g^{l_a(s)}\\right)}^\\textcolor{green}{a}, "
"\\ \\ {\\left(g^{l_d(s)}\\right)}^\\textcolor{green}{d}"
msgstr ""
"  to the variable polys : {\\left(g^{l_a(s)}\\right)}^\\textcolor{green}{a}, "
"\\ \\ {\\left(g^{l_d(s)}\\right)}^\\textcolor{green}{d}"

#: src/zk-snarks/3-General-Purpose-Computation.md:356
msgid "assign same values to the `α-shifted` poly  :    "
msgstr "assign same values to the `α-shifted` poly  :    "

#: src/zk-snarks/3-General-Purpose-Computation.md:357
msgid "add all **assigned**  variable polys to form a operand poly :  "
msgstr "add all **assigned**  variable polys to form a operand poly :  "

#: src/zk-snarks/3-General-Purpose-Computation.md:359
msgid ""
"add **shifted assigned** variable polys to form a **shifted operand "
"poly** :  "
msgstr ""
"add **shifted assigned** variable polys to form a **shifted operand "
"poly** :  "

#: src/zk-snarks/3-General-Purpose-Computation.md:361
msgid "Proving proof of valid assignment of left operand : "
msgstr "Proving proof of valid assignment of left operand : "

#: src/zk-snarks/3-General-Purpose-Computation.md:363
msgid "**Verification :**"
msgstr "**Verification :**"

#: src/zk-snarks/3-General-Purpose-Computation.md:364
msgid "Parse Proof  "
msgstr "Parse Proof  "

#: src/zk-snarks/3-General-Purpose-Computation.md:364
msgid "  i.e.   "
msgstr "  i.e.   "

#: src/zk-snarks/3-General-Purpose-Computation.md:365
msgid ""
"验证提供的多项式是否是 最初提供的多个 _未赋值的变量多项式 (unassigned "
"variable poly)_ 的和： "
msgstr ""
"验证提供的多项式是否是 最初提供的多个 _未赋值的变量多项式 (unassigned "
"variable poly)_ 的和： "

#: src/zk-snarks/3-General-Purpose-Computation.md:368
msgid "Note: "
msgstr "Note: "

#: src/zk-snarks/3-General-Purpose-Computation.md:368
msgid "  and  "
msgstr "  and  "

#: src/zk-snarks/3-General-Purpose-Computation.md:368
#: src/zk-snarks/3-General-Purpose-Computation.md:369
#: src/zk-snarks/4-Construction-Properties.md:209
#: src/zk-snarks/4-Construction-Properties.md:342
msgid "αL"
msgstr "αL"

#: src/zk-snarks/3-General-Purpose-Computation.md:368
msgid "  represent all variable polynomials **at once** and since  "
msgstr "  represent all variable polynomials **at once** and since  "

#: src/zk-snarks/3-General-Purpose-Computation.md:368
msgid ""
"  is used only in evaluation of variable polynomials, the prover has no "
"option but to use provided evaluations and **assign same coefficients** to "
"original and shifted variable polynomials. ( 注意：这里用 "
msgstr ""
"  is used only in evaluation of variable polynomials, the prover has no "
"option but to use provided evaluations and **assign same coefficients** to "
"original and shifted variable polynomials. ( 注意：这里用 "

#: src/zk-snarks/3-General-Purpose-Computation.md:369
msgid " 同时代表了所有的变量多项式,  并且由于 "
msgstr " 同时代表了所有的变量多项式,  并且由于 "

#: src/zk-snarks/3-General-Purpose-Computation.md:369
msgid " 只用在计算变量多项式中，所以 "
msgstr " 只用在计算变量多项式中，所以 "

#: src/zk-snarks/3-General-Purpose-Computation.md:369
msgid " 没有别的选择只能在  "
msgstr " 没有别的选择只能在  "

#: src/zk-snarks/3-General-Purpose-Computation.md:369
msgid "  提供的原始加密值和变换后的加密值上赋予相同的系数做计算 )"
msgstr "  提供的原始加密值和变换后的加密值上赋予相同的系数做计算 )"

#: src/zk-snarks/3-General-Purpose-Computation.md:371
msgid "As a consequence(因此) the **prover** :"
msgstr "As a consequence(因此) the **prover** :"

#: src/zk-snarks/3-General-Purpose-Computation.md:372
msgid ""
"is not able to modify provided _variable polynomials_ by changing their "
"coefficients, except “assigning” values (除了“分配”值外，不能再修改它们的系数"
"进而来修改 _变量多项式_ ), because prover is presented only with encrypted "
"evaluations of these polynomials, and because necessary encrypted powers of "
"_s_ are unavailable separately with their _α_\\-shifts (因为 Prover 仅提供这"
"些多项式的加密评估，也因为 s 必要次幂的加密值不能与它们的 α 变换值一起使用 )"
msgstr ""
"is not able to modify provided _variable polynomials_ by changing their "
"coefficients, except “assigning” values (除了“分配”值外，不能再修改它们的系数"
"进而来修改 _变量多项式_ ), because prover is presented only with encrypted "
"evaluations of these polynomials, and because necessary encrypted powers of "
"_s_ are unavailable separately with their _α_\\-shifts (因为 Prover 仅提供这"
"些多项式的加密评估，也因为 s 必要次幂的加密值不能与它们的 α 变换值一起使用 )"

#: src/zk-snarks/3-General-Purpose-Computation.md:373
msgid ""
"is not able to add another polynomial to the provided ones because the _α_\\-"
"ratio will be broken  (不能通过另一个多项式相加去提供一个结果因为这样 _α_\\-"
"比例关系将会被破坏掉)"
msgstr ""
"is not able to add another polynomial to the provided ones because the _α_\\-"
"ratio will be broken  (不能通过另一个多项式相加去提供一个结果因为这样 _α_\\-"
"比例关系将会被破坏掉)"

#: src/zk-snarks/3-General-Purpose-Computation.md:374
msgid ""
"is not able to modify operand polynomials through multiplication by some "
"other polynomial  "
msgstr ""
"is not able to modify operand polynomials through multiplication by some "
"other polynomial  "

#: src/zk-snarks/3-General-Purpose-Computation.md:374
msgid ""
" ,  which could disproportionately modify the values because encrypted "
"multiplication is not possible in pre-pairings space     (不能通过与其他的一"
"些多项式 "
msgstr ""
" ,  which could disproportionately modify the values because encrypted "
"multiplication is not possible in pre-pairings space     (不能通过与其他的一"
"些多项式 "

#: src/zk-snarks/3-General-Purpose-Computation.md:374
msgid ""
" 相乘来修改操作数多项式，这样可能会使得修改后的值不成比例因为在预配对空间中无"
"法进行加密乘法)"
msgstr ""
" 相乘来修改操作数多项式，这样可能会使得修改后的值不成比例因为在预配对空间中无"
"法进行加密乘法)"

#: src/zk-snarks/3-General-Purpose-Computation.md:377
msgid "尽管 prover 被限制了多项式的使用，他还有拥有一些可允许范围内的自由度："
msgstr "尽管 prover 被限制了多项式的使用，他还有拥有一些可允许范围内的自由度："

#: src/zk-snarks/3-General-Purpose-Computation.md:379
msgid "当 prover 决定不加入一些变量多项式  "
msgstr "当 prover 决定不加入一些变量多项式  "

#: src/zk-snarks/3-General-Purpose-Computation.md:379
msgid "  来构造操作符多项式  "
msgstr "  来构造操作符多项式  "

#: src/zk-snarks/3-General-Purpose-Computation.md:379
msgid "  时依然是可以接受的，因为这和为它分配值为 0 是一样的："
msgstr "  时依然是可以接受的，因为这和为它分配值为 0 是一样的："

#: src/zk-snarks/3-General-Purpose-Computation.md:382
msgid ""
" 添加同一个 `变量多项式` 很多次也是可以接受的 , 因为这和一次分配多个值的和是"
"一样的： "
msgstr ""
" 添加同一个 `变量多项式` 很多次也是可以接受的 , 因为这和一次分配多个值的和是"
"一样的： "

#: src/zk-snarks/3-General-Purpose-Computation.md:387
msgid "总结一下本文证明协议的大致思路为："
msgstr "总结一下本文证明协议的大致思路为："

#: src/zk-snarks/3-General-Purpose-Computation.md:389
msgid "将要证明的程序转换为数学语言表达的形式（即加减乘除的计算）"
msgstr "将要证明的程序转换为数学语言表达的形式（即加减乘除的计算）"

#: src/zk-snarks/3-General-Purpose-Computation.md:390
msgid "用多项式在某处的取值来进行计算以此表示数学计算，进而进行证明"
msgstr "用多项式在某处的取值来进行计算以此表示数学计算，进而进行证明"

#: src/zk-snarks/3-General-Purpose-Computation.md:391
msgid "用多项式在多处的取值来进行计算表示多个数学运算，进而加以证明"
msgstr "用多项式在多处的取值来进行计算表示多个数学运算，进而加以证明"

#: src/zk-snarks/3-General-Purpose-Computation.md:392
msgid "对证明的“程序”在不同计算中使用的相同的变量进行约束"
msgstr "对证明的“程序”在不同计算中使用的相同的变量进行约束"

#: src/zk-snarks/3-General-Purpose-Computation.md:394
msgid ""
"当前的协议约束只解决了部分问题，还有诸多可以改进的地方，在下一节我们将对这些"
"改进项展开讨论并给证明协议进行优化。"
msgstr ""
"当前的协议约束只解决了部分问题，还有诸多可以改进的地方，在下一节我们将对这些"
"改进项展开讨论并给证明协议进行优化。"

#: src/zk-snarks/3-General-Purpose-Computation.md:396
msgid "**Reference :**"
msgstr "**Reference :**"

#: src/zk-snarks/3-General-Purpose-Computation.md:397
msgid "https://secbit.io/blog/2020/01/08/learn-zk-snark-from-zero-part-three/"
msgstr "https://secbit.io/blog/2020/01/08/learn-zk-snark-from-zero-part-three/"

#: src/zk-snarks/3-General-Purpose-Computation.md:398
msgid ""
"https://medium.com/@imolfar/why-and-how-zk-snark-works-4-general-purpose-"
"computation-dcdc8081ee42"
msgstr ""
"https://medium.com/@imolfar/why-and-how-zk-snark-works-4-general-purpose-"
"computation-dcdc8081ee42"

#: src/zk-snarks/3-General-Purpose-Computation.md:399
#: src/zk-snarks/4-Construction-Properties.md:457
msgid ""
"https://medium.com/@imolfar/why-and-how-zk-snark-works-5-variable-"
"polynomials-3b4e06859e30"
msgstr ""
"https://medium.com/@imolfar/why-and-how-zk-snark-works-5-variable-"
"polynomials-3b4e06859e30"

#: src/zk-snarks/4-Construction-Properties.md:9
msgid "[Construction Properties](#construction-properties)"
msgstr "[Construction Properties](#construction-properties)"

#: src/zk-snarks/4-Construction-Properties.md:10
msgid "[Constant Coefficients  常量系数](#constant-coefficients--常量系数)"
msgstr "[Constant Coefficients  常量系数](#constant-coefficients--常量系数)"

#: src/zk-snarks/4-Construction-Properties.md:11
msgid "[Addition for Free (0 成本做加法)](#addition-for-free-0-成本做加法)"
msgstr "[Addition for Free (0 成本做加法)](#addition-for-free-0-成本做加法)"

#: src/zk-snarks/4-Construction-Properties.md:12
msgid ""
"[Addition, Subtraction and Division](#addition-subtraction-and-division)"
msgstr ""
"[Addition, Subtraction and Division](#addition-subtraction-and-division)"

#: src/zk-snarks/4-Construction-Properties.md:13
msgid "[Example Computation](#example-computation)"
msgstr "[Example Computation](#example-computation)"

#: src/zk-snarks/4-Construction-Properties.md:14
msgid ""
"[Verifiable Computation Protocol (可验证计算协议 )](#verifiable-computation-"
"protocol-可验证计算协议-)"
msgstr ""
"[Verifiable Computation Protocol (可验证计算协议 )](#verifiable-computation-"
"protocol-可验证计算协议-)"

#: src/zk-snarks/4-Construction-Properties.md:15
msgid "[2 security considerations](#2-security-considerations)"
msgstr "[2 security considerations](#2-security-considerations)"

#: src/zk-snarks/4-Construction-Properties.md:16
msgid ""
"[1 | Non-Interchangeability of Operands and Output](#1--non-"
"interchangeability-of-operands-and-output)"
msgstr ""
"[1 | Non-Interchangeability of Operands and Output](#1--non-"
"interchangeability-of-operands-and-output)"

#: src/zk-snarks/4-Construction-Properties.md:17
msgid ""
"[2 | Variable Consistency Across Operands(一致性校验和)](#2--variable-"
"consistency-across-operands一致性校验和)"
msgstr ""
"[2 | Variable Consistency Across Operands(一致性校验和)](#2--variable-"
"consistency-across-operands一致性校验和)"

#: src/zk-snarks/4-Construction-Properties.md:18
msgid "[变量非延展性和变量一致性多项式](#变量非延展性和变量一致性多项式)"
msgstr "[变量非延展性和变量一致性多项式](#变量非延展性和变量一致性多项式)"

#: src/zk-snarks/4-Construction-Properties.md:19
msgid "[1 | 变量多项式的延展性](#1--变量多项式的延展性)"
msgstr "[1 | 变量多项式的延展性](#1--变量多项式的延展性)"

#: src/zk-snarks/4-Construction-Properties.md:20
msgid ""
"[2 | Malleability of Variable Consistency Polynomials(变量一致性多项式的延展"
"性)](#2--malleability-of-variable-consistency-polynomials变量一致性多项式的延"
"展性)"
msgstr ""
"[2 | Malleability of Variable Consistency Polynomials(变量一致性多项式的延展"
"性)](#2--malleability-of-variable-consistency-polynomials变量一致性多项式的延"
"展性)"

#: src/zk-snarks/4-Construction-Properties.md:21
msgid "[3 | Non-Malleability 非延展性](#3--non-malleability-非延展性)"
msgstr "[3 | Non-Malleability 非延展性](#3--non-malleability-非延展性)"

#: src/zk-snarks/4-Construction-Properties.md:22
msgid "[变量值一致性检查的优化](#变量值一致性检查的优化)"
msgstr "[变量值一致性检查的优化](#变量值一致性检查的优化)"

#: src/zk-snarks/4-Construction-Properties.md:24
msgid "Construction Properties"
msgstr "Construction Properties"

#: src/zk-snarks/4-Construction-Properties.md:26
msgid "Constant Coefficients  常量系数"
msgstr "Constant Coefficients  常量系数"

#: src/zk-snarks/4-Construction-Properties.md:28
msgid ""
"在上文的构造中，我们通过对 _未赋值的变量多项式 (unassigned "
"variable polynomials)_  的计算得到 0 或者 1 ，以此表示在运算中是否要用到这个"
"变量。自然地想，我们也可以使用其它系数值，包括负数值，因为我们可以插值计算出"
"经过任何必要的点（前提是没有两个计算使用了同一个 "
msgstr ""
"在上文的构造中，我们通过对 _未赋值的变量多项式 (unassigned "
"variable polynomials)_  的计算得到 0 或者 1 ，以此表示在运算中是否要用到这个"
"变量。自然地想，我们也可以使用其它系数值，包括负数值，因为我们可以插值计算出"
"经过任何必要的点（前提是没有两个计算使用了同一个 "

#: src/zk-snarks/4-Construction-Properties.md:28
msgid " ）的多项式。如下是这种运算的一些例子： "
msgstr " ）的多项式。如下是这种运算的一些例子： "

#: src/zk-snarks/4-Construction-Properties.md:31
msgid "现在我们的程序就可以使用常量系数了，例如："
msgstr "现在我们的程序就可以使用常量系数了，例如："

#: src/zk-snarks/4-Construction-Properties.md:46
msgid "在 "
msgstr "在 "

#: src/zk-snarks/4-Construction-Properties.md:46
msgid ""
" 阶段这些系数类似于 0 或者 1 将被“硬编码”进去，之后就不能再修改了。现在我们将"
"运算形式修改为： "
msgstr ""
" 阶段这些系数类似于 0 或者 1 将被“硬编码”进去，之后就不能再修改了。现在我们将"
"运算形式修改为： "

#: src/zk-snarks/4-Construction-Properties.md:48
msgid "或者用更正式的参数 "
msgstr "或者用更正式的参数 "

#: src/zk-snarks/4-Construction-Properties.md:48
msgid " 表示：  "
msgstr " 表示：  "

#: src/zk-snarks/4-Construction-Properties.md:51
msgid "  表示变量在运算中的位置 (左/右/输出)"
msgstr "  表示变量在运算中的位置 (左/右/输出)"

#: src/zk-snarks/4-Construction-Properties.md:53
msgid "Addition for Free (0 成本做加法)"
msgstr "Addition for Free (0 成本做加法)"

#: src/zk-snarks/4-Construction-Properties.md:55
msgid "看一下这个新结构，很显然在多项式的表示中，每一个不同 "
msgstr "看一下这个新结构，很显然在多项式的表示中，每一个不同 "

#: src/zk-snarks/4-Construction-Properties.md:55
msgid ""
" 所要代表的操作数都是所有 _操作数变量多项式(sum of all operand variable "
"polynomials_ ) 的总和，其中只有一个被用到的变量是非零值而其它都为 0，下图就很"
"好得表达了这个意思："
msgstr ""
" 所要代表的操作数都是所有 _操作数变量多项式(sum of all operand variable "
"polynomials_ ) 的总和，其中只有一个被用到的变量是非零值而其它都为 0，下图就很"
"好得表达了这个意思："

#: src/zk-snarks/4-Construction-Properties.md:62
msgid " 或者更正式一些用变量 "
msgstr " 或者更正式一些用变量 "

#: src/zk-snarks/4-Construction-Properties.md:63
msgid "  和操作数变量系数"
msgstr "  和操作数变量系数"

#: src/zk-snarks/4-Construction-Properties.md:65
msgid " 这个结构就是： "
msgstr " 这个结构就是： "

#: src/zk-snarks/4-Construction-Properties.md:68
msgid "\\_注意 ：每一个运算的操作数都有自己的一组系数  "
msgstr "\\_注意 ：每一个运算的操作数都有自己的一组系数  "

#: src/zk-snarks/4-Construction-Properties.md:68
msgid " 这里 乘法运算是关键，而加法运算都可以被合并到一个更大的乘法运算里面。"
msgstr " 这里 乘法运算是关键，而加法运算都可以被合并到一个更大的乘法运算里面。"

#: src/zk-snarks/4-Construction-Properties.md:72
msgid "Addition, Subtraction and Division"
msgstr "Addition, Subtraction and Division"

#: src/zk-snarks/4-Construction-Properties.md:74
msgid ""
"到目前为止，我们一直专注于乘法操作。但是为了能够执行通用计算，真实环境下的程"
"序也需要加法，加法和除法。"
msgstr ""
"到目前为止，我们一直专注于乘法操作。但是为了能够执行通用计算，真实环境下的程"
"序也需要加法，加法和除法。"

#: src/zk-snarks/4-Construction-Properties.md:76
msgid ""
"**加法** 前面我们确定:  可以在单个操作数的内容中将变量加起来，然后和另一个操"
"作数相乘 —— 即  "
msgstr ""
"**加法** 前面我们确定:  可以在单个操作数的内容中将变量加起来，然后和另一个操"
"作数相乘 —— 即  "

#: src/zk-snarks/4-Construction-Properties.md:76
msgid " ，但是如果我们只是想做加法，没有乘法，例如一个程序中需要做 "
msgstr " ，但是如果我们只是想做加法，没有乘法，例如一个程序中需要做 "

#: src/zk-snarks/4-Construction-Properties.md:76
msgid " 的计算，我们可以按照下面的方式来表示：  "
msgstr " 的计算，我们可以按照下面的方式来表示：  "

#: src/zk-snarks/4-Construction-Properties.md:78
msgid ""
"为什么强行 × 1 呢?  \n"
"因为我们的结构中对于每一个操作数, 我们既需要常量系数也需要变量 "
msgstr ""
"为什么强行 × 1 呢?  \n"
"因为我们的结构中对于每一个操作数, 我们既需要常量系数也需要变量 "

#: src/zk-snarks/4-Construction-Properties.md:79
msgid ""
"  \n"
"`1`  这个值可以表示为 "
msgstr ""
"  \n"
"`1`  这个值可以表示为 "

#: src/zk-snarks/4-Construction-Properties.md:80
#: src/zk-snarks/4-Construction-Properties.md:205
msgid " ，其中 "
msgstr " ，其中 "

#: src/zk-snarks/4-Construction-Properties.md:80
msgid "  可以被“硬编码”到对应的多项式中，"
msgstr "  可以被“硬编码”到对应的多项式中，"

#: src/zk-snarks/4-Construction-Properties.md:80
msgid "  是一个变量可以给它分配任何值，那么我们就必须通过一些约束来限制 "
msgstr "  是一个变量可以给它分配任何值，那么我们就必须通过一些约束来限制 "

#: src/zk-snarks/4-Construction-Properties.md:80
msgid "  的值，这个在后面的章节中将会讲到"
msgstr "  的值，这个在后面的章节中将会讲到"

#: src/zk-snarks/4-Construction-Properties.md:82
msgid "**减法** 减法与加法几乎一致，唯一的不同就是负系数， "
msgstr "**减法** 减法与加法几乎一致，唯一的不同就是负系数， "

#: src/zk-snarks/4-Construction-Properties.md:82
msgid " 也就是： "
msgstr " 也就是： "

#: src/zk-snarks/4-Construction-Properties.md:83
msgid " **除法** 如果我们检查除法运算 "
msgstr " **除法** 如果我们检查除法运算 "

#: src/zk-snarks/4-Construction-Properties.md:85
msgid "sor"
msgstr "sor"

#: src/zk-snarks/4-Construction-Properties.md:85
#: src/zk-snarks/4-Construction-Properties.md:113
msgid "res"
msgstr "res"

#: src/zk-snarks/4-Construction-Properties.md:85
msgid ""
" 可以看到除法的结果是就是我们要得到一个结果值使其乘以 `divisor` 能够得到 "
"`factor` 。所以我们也可以用乘法来表示出同一个意思：_divisor × result = "
"factor_ . 这样就是说如果我们想要去证明除法运算 "
msgstr ""
" 可以看到除法的结果是就是我们要得到一个结果值使其乘以 `divisor` 能够得到 "
"`factor` 。所以我们也可以用乘法来表示出同一个意思：_divisor × result = "
"factor_ . 这样就是说如果我们想要去证明除法运算 "

#: src/zk-snarks/4-Construction-Properties.md:86
msgid "，我们就可以把它表示为： "
msgstr "，我们就可以把它表示为： "

#: src/zk-snarks/4-Construction-Properties.md:88
msgid ""
"运算的结构也称为 “约束” ，因为多项式结构代表的运算，并非是为了计算出结果，而"
"是在 prover已经知晓的变量赋值的情况下，检验这个运算的过程是否正确。换句话说，"
"即约束 prover 必须提供一致的值，无论这些值是什么。"
msgstr ""
"运算的结构也称为 “约束” ，因为多项式结构代表的运算，并非是为了计算出结果，而"
"是在 prover已经知晓的变量赋值的情况下，检验这个运算的过程是否正确。换句话说，"
"即约束 prover 必须提供一致的值，无论这些值是什么。"

#: src/zk-snarks/4-Construction-Properties.md:90
msgid "所有的算术计算（加减乘除）都已经有了，于是运算结构不再需要修改。"
msgstr "所有的算术计算（加减乘除）都已经有了，于是运算结构不再需要修改。"

#: src/zk-snarks/4-Construction-Properties.md:93
msgid ""
"even@安比实验室: 约束和运算有一定的关联性。算术电路的目的是为了实现「计算的验"
"证」，而非「计算的过程」。"
msgstr ""
"even@安比实验室: 约束和运算有一定的关联性。算术电路的目的是为了实现「计算的验"
"证」，而非「计算的过程」。"

#: src/zk-snarks/4-Construction-Properties.md:95
msgid "上一篇文章中，我们提出了一种方法：把构造多项式的工作交给 "
msgstr "上一篇文章中，我们提出了一种方法：把构造多项式的工作交给 "

#: src/zk-snarks/4-Construction-Properties.md:95
msgid " 环节， "
msgstr " 环节， "

#: src/zk-snarks/4-Construction-Properties.md:95
msgid ""
" 只要填上对应的数值就可以了。 这个方法不仅解决了同一个操作数运算符中不一致的"
"问题，同时还带来了额外的便利："
msgstr ""
" 只要填上对应的数值就可以了。 这个方法不仅解决了同一个操作数运算符中不一致的"
"问题，同时还带来了额外的便利："

#: src/zk-snarks/4-Construction-Properties.md:97
msgid "1） 允许执行计算的表达式中包含静态系数。 2）虽然  "
msgstr "1） 允许执行计算的表达式中包含静态系数。 2）虽然  "

#: src/zk-snarks/4-Construction-Properties.md:98
msgid ""
"  的关系中只有乘法，但利用这个方法也可以轻松的执行加法操作，继而也就解决了减"
"法和除法的问题"
msgstr ""
"  的关系中只有乘法，但利用这个方法也可以轻松的执行加法操作，继而也就解决了减"
"法和除法的问题"

#: src/zk-snarks/4-Construction-Properties.md:100
msgid "Example Computation"
msgstr "Example Computation"

#: src/zk-snarks/4-Construction-Properties.md:102
msgid "看不太懂上面说啥, 直接看例子吧 !!"
msgstr "看不太懂上面说啥, 直接看例子吧 !!"

#: src/zk-snarks/4-Construction-Properties.md:104
msgid ""
"有了一组通用的运算结构，我们就可以将我们原始的程序转换成一组运算，然后再转换"
"成多项式的形式。我们先来想一下算法的数学形式（用变量  "
msgstr ""
"有了一组通用的运算结构，我们就可以将我们原始的程序转换成一组运算，然后再转换"
"成多项式的形式。我们先来想一下算法的数学形式（用变量  "

#: src/zk-snarks/4-Construction-Properties.md:104
msgid "  表示运算结果）： "
msgstr "  表示运算结果）： "

#: src/zk-snarks/4-Construction-Properties.md:105
msgid ""
" 这里有三个乘法，但是由于运算结构只支持一个乘法操作，所以这里至少就要做三次运"
"算。我们先将它简化 : "
msgstr ""
" 这里有三个乘法，但是由于运算结构只支持一个乘法操作，所以这里至少就要做三次运"
"算。我们先将它简化 : "

#: src/zk-snarks/4-Construction-Properties.md:107
msgid ""
"```\n"
" <span class=\"katex\"><span class=\"katex-html\" aria-hidden=\"true\"><span "
"class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-"
"align:-0.0833em;\"></span><span class=\"mord mathnormal\" style=\"margin-"
"right:0.02691em;\">w</span><span class=\"mspace\" style=\"margin-"
"right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" "
"style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span "
"class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span "
"class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"color:green;"
"\">a</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></"
"span><span class=\"mbin\" style=\"color:green;\">×</span><span "
"class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span "
"class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-"
"align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"color:green;"
"\">b</span><span class=\"mclose\">)</span><span class=\"mspace\" "
"style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span "
"class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span "
"class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-"
"align:-0.0833em;\"></span><span class=\"mord mathnormal\" style=\"color:blue;"
"\">a</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></"
"span><span class=\"mbin\" style=\"color:blue;\">+</span><span "
"class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span "
"class=\"base\"><span class=\"strut\" style=\"height:0.7778em;vertical-"
"align:-0.0833em;\"></span><span class=\"mord mathnormal\" style=\"color:blue;"
"\">b</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></"
"span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-"
"right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" "
"style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span "
"class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span "
"class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span "
"class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;"
"\"></span></span><span class=\"base\"><span class=\"strut\" "
"style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</"
"span><span class=\"mord mathnormal\" style=\"color:green;\">a</span><span "
"class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span "
"class=\"mbin\" style=\"color:green;\">+</span><span class=\"mspace\" "
"style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span "
"class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span "
"class=\"mord mathnormal\" style=\"color:green;\">b</span><span "
"class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-"
"right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" "
"style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span "
"class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord "
"mathnormal\" style=\"margin-right:0.03588em;\">v</span></span></span></"
"span>\n"
"```"
msgstr ""
"```\n"
" <span class=\"katex\"><span class=\"katex-html\" aria-hidden=\"true\"><span "
"class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-"
"align:-0.0833em;\"></span><span class=\"mord mathnormal\" style=\"margin-"
"right:0.02691em;\">w</span><span class=\"mspace\" style=\"margin-"
"right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" "
"style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span "
"class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span "
"class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"color:green;"
"\">a</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></"
"span><span class=\"mbin\" style=\"color:green;\">×</span><span "
"class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span "
"class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-"
"align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"color:green;"
"\">b</span><span class=\"mclose\">)</span><span class=\"mspace\" "
"style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span "
"class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span "
"class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-"
"align:-0.0833em;\"></span><span class=\"mord mathnormal\" style=\"color:blue;"
"\">a</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></"
"span><span class=\"mbin\" style=\"color:blue;\">+</span><span "
"class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span "
"class=\"base\"><span class=\"strut\" style=\"height:0.7778em;vertical-"
"align:-0.0833em;\"></span><span class=\"mord mathnormal\" style=\"color:blue;"
"\">b</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></"
"span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-"
"right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" "
"style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span "
"class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span "
"class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span "
"class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;"
"\"></span></span><span class=\"base\"><span class=\"strut\" "
"style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</"
"span><span class=\"mord mathnormal\" style=\"color:green;\">a</span><span "
"class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span "
"class=\"mbin\" style=\"color:green;\">+</span><span class=\"mspace\" "
"style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span "
"class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span "
"class=\"mord mathnormal\" style=\"color:green;\">b</span><span "
"class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-"
"right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" "
"style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span "
"class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord "
"mathnormal\" style=\"margin-right:0.03588em;\">v</span></span></span></"
"span>\n"
"```"

#: src/zk-snarks/4-Construction-Properties.md:108
#: src/zk-snarks/4-Construction-Properties.md:353
#: src/halo2/tmp/9-decomposed.md:30
msgid "⇒"
msgstr "⇒"

#: src/zk-snarks/4-Construction-Properties.md:110
msgid "写出 : "
msgstr "写出 : "

#: src/zk-snarks/4-Construction-Properties.md:115
msgid "第 3 条是增加的约束使  "
msgstr "第 3 条是增加的约束使  "

#: src/zk-snarks/4-Construction-Properties.md:115
msgid "  必须为二进制，否则 "
msgstr "  必须为二进制，否则 "

#: src/zk-snarks/4-Construction-Properties.md:115
msgid " 就可以代入任何值去执行恶意运算"
msgstr " 就可以代入任何值去执行恶意运算"

#: src/zk-snarks/4-Construction-Properties.md:117
msgid "现在一共有 5 个变量 ( 2 个左操作符 "
msgstr "现在一共有 5 个变量 ( 2 个左操作符 "

#: src/zk-snarks/4-Construction-Properties.md:117
msgid "， 4 个右操作符 "
msgstr "， 4 个右操作符 "

#: src/zk-snarks/4-Construction-Properties.md:117
msgid " 和 5 个输出 "
msgstr " 和 5 个输出 "

#: src/zk-snarks/4-Construction-Properties.md:117
msgid " ) ,  操作符多项式为："
msgstr " ) ,  操作符多项式为："

#: src/zk-snarks/4-Construction-Properties.md:123
msgid ""
"在在三次运算中, 必须为每个_变量多项式_ 都分别算出一个对应的系数, 或者如果这个"
"多项式在计算的操作数或者输出中没有被用到的话, 系数就置为 0 : "
msgstr ""
"在在三次运算中, 必须为每个_变量多项式_ 都分别算出一个对应的系数, 或者如果这个"
"多项式在计算的操作数或者输出中没有被用到的话, 系数就置为 0 : "

#: src/zk-snarks/4-Construction-Properties.md:125
msgid ""
"![](http://imagesoda.oss-cn-beijing.aliyuncs.com/Sodaoo/2023-07-28-152525."
"jpg) 如上图"
msgstr ""
"![](http://imagesoda.oss-cn-beijing.aliyuncs.com/Sodaoo/2023-07-28-152525."
"jpg) 如上图"

#: src/zk-snarks/4-Construction-Properties.md:127
msgid "对于左操作数 : a 在第 1 行约束出现, 所以 "
msgstr "对于左操作数 : a 在第 1 行约束出现, 所以 "

#: src/zk-snarks/4-Construction-Properties.md:127
msgid " ,  w 在第 2/3 行约束出现, 所以 "
msgstr " ,  w 在第 2/3 行约束出现, 所以 "

#: src/zk-snarks/4-Construction-Properties.md:127
#: src/halo2/tmp/3-Fibonacci-example-2.md:393
msgid " ,"
msgstr " ,"

#: src/zk-snarks/4-Construction-Properties.md:128
msgid "对于右操作数 : **注意** 第 2 行约束的 "
msgstr "对于右操作数 : **注意** 第 2 行约束的 "

#: src/zk-snarks/4-Construction-Properties.md:130
msgid "因为有三行约束, 所以 _target poly_ 就是  "
msgstr "因为有三行约束, 所以 _target poly_ 就是  "

#: src/zk-snarks/4-Construction-Properties.md:130
msgid "–1"
msgstr "–1"

#: src/zk-snarks/4-Construction-Properties.md:130
msgid "–2"
msgstr "–2"

#: src/zk-snarks/4-Construction-Properties.md:130
msgid "–3"
msgstr "–3"

#: src/zk-snarks/4-Construction-Properties.md:132
msgid ""
"Next we leverage  `polynomial interpolation` to find each  _variable "
"polynomial_ :"
msgstr ""
"Next we leverage  `polynomial interpolation` to find each  _variable "
"polynomial_ :"

#: src/zk-snarks/4-Construction-Properties.md:142
msgid "绘制出来就是："
msgstr "绘制出来就是："

#: src/zk-snarks/4-Construction-Properties.md:144
msgid ""
"![](http://imagesoda.oss-cn-beijing.aliyuncs.com/Sodaoo/2023-07-28-153215."
"jpg)"
msgstr ""
"![](http://imagesoda.oss-cn-beijing.aliyuncs.com/Sodaoo/2023-07-28-153215."
"jpg)"

#: src/zk-snarks/4-Construction-Properties.md:147
msgid "OK! Now we are ready to prove computation through polynomials."
msgstr "OK! Now we are ready to prove computation through polynomials."

#: src/zk-snarks/4-Construction-Properties.md:149
msgid "首先，选择函数的输入值，例如： "
msgstr "首先，选择函数的输入值，例如： "

#: src/zk-snarks/4-Construction-Properties.md:149
msgid " 。其次，计算过程中的中间变量值为："
msgstr " 。其次，计算过程中的中间变量值为："

#: src/zk-snarks/4-Construction-Properties.md:153
msgid ""
"然后，我们把所有计算结果中的值赋值到 _变量多项式 (variable polynomial)_  中，"
"然后相加得到操作数或者输出多项式的形式："
msgstr ""
"然后，我们把所有计算结果中的值赋值到 _变量多项式 (variable polynomial)_  中，"
"然后相加得到操作数或者输出多项式的形式："

#: src/zk-snarks/4-Construction-Properties.md:156
msgid "注意:  "
msgstr "注意:  "

#: src/zk-snarks/4-Construction-Properties.md:156
#: src/zk-snarks/4-Construction-Properties.md:162
#: src/zk-snarks/4-Construction-Properties.md:164
#: src/zk-snarks/4-Construction-Properties.md:205
#: src/zk-snarks/4-Construction-Properties.md:282
#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:352
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:111
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:440
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:446
#: src/zk-everything/zk-everything-joe/Hyrax.md:276
#: src/zk-everything/zk-everything-joe/Hyrax.md:284
#: src/zk-everything/zk-everything-joe/Spartan.md:117
#: src/zk-everything/zk-everything-joe/Spartan.md:176
#: src/zk-everything/zk-everything-joe/Spartan.md:236
#: src/zk-everything/zk-everything-joe/Spartan.md:343
#: src/zk-everything/zk-everything-joe/Spartan.md:355
#: src/zk-everything/zk-everything-joe/Spartan.md:359
#: src/zk-everything/zk-everything-joe/Spartan.md:361
#: src/zk-everything/zk-everything-joe/Spartan.md:396
#: src/zk-everything/zk-everything-joe/Spartan.md:445 src/public
#: goods/4-Proving-System.md:55
msgid "、"
msgstr "、"

#: src/zk-snarks/4-Construction-Properties.md:156
msgid "  的系数是其赋值, 比如  "
msgstr "  的系数是其赋值, 比如  "

#: src/zk-snarks/4-Construction-Properties.md:156
msgid "  的系数都是  `1` , "
msgstr "  的系数都是  `1` , "

#: src/zk-snarks/4-Construction-Properties.md:156
msgid "  的系数都是  `3`   ...   "
msgstr "  的系数都是  `3`   ...   "

#: src/zk-snarks/4-Construction-Properties.md:156
msgid "  的系数则是 `2×3 => 6`"
msgstr "  的系数则是 `2×3 => 6`"

#: src/zk-snarks/4-Construction-Properties.md:158
msgid "在图中就表示为："
msgstr "在图中就表示为："

#: src/zk-snarks/4-Construction-Properties.md:162
msgid "上图表示的,  就是 `上上图` 里的  "
msgstr "上图表示的,  就是 `上上图` 里的  "

#: src/zk-snarks/4-Construction-Properties.md:162
msgid "  等都被 **\"拉长了\"** , 拉长成了  "
msgstr "  等都被 **\"拉长了\"** , 拉长成了  "

#: src/zk-snarks/4-Construction-Properties.md:164
msgid "把他们具体组合成 "
msgstr "把他们具体组合成 "

#: src/zk-snarks/4-Construction-Properties.md:164
msgid "  , 即相加对应操作数如 "
msgstr "  , 即相加对应操作数如 "

#: src/zk-snarks/4-Construction-Properties.md:164
msgid "  ..."
msgstr "  ..."

#: src/zk-snarks/4-Construction-Properties.md:168
msgid "Recap 上图:   "
msgstr "Recap 上图:   "

#: src/zk-snarks/4-Construction-Properties.md:170
#: src/zk-snarks/4-Construction-Properties.md:171
msgid "  经过了  "
msgstr "  经过了  "

#: src/zk-snarks/4-Construction-Properties.md:172
msgid " 则 经过了  "
msgstr " 则 经过了  "

#: src/zk-snarks/4-Construction-Properties.md:174
msgid " 表示给 "
msgstr " 表示给 "

#: src/zk-snarks/4-Construction-Properties.md:174
msgid " 这个变量赋值为 2"
msgstr " 这个变量赋值为 2"

#: src/zk-snarks/4-Construction-Properties.md:176
msgid "我们需要去证明  "
msgstr "我们需要去证明  "

#: src/zk-snarks/4-Construction-Properties.md:176
msgid " ，因而我们先 `长除法` 找出 "
msgstr " ，因而我们先 `长除法` 找出 "

#: src/zk-snarks/4-Construction-Properties.md:176
#: src/halo2/tmp/9-decomposed.md:106
msgid " :"
msgstr " :"

#: src/zk-snarks/4-Construction-Properties.md:178
msgid "35"
msgstr "35"

#: src/zk-snarks/4-Construction-Properties.md:180
msgid "以图的形式表示为："
msgstr "以图的形式表示为："

#: src/zk-snarks/4-Construction-Properties.md:184
msgid "图示很明显, 多项式 "
msgstr "图示很明显, 多项式 "

#: src/zk-snarks/4-Construction-Properties.md:184
msgid " 有根为 :  "
msgstr " 有根为 :  "

#: src/zk-snarks/4-Construction-Properties.md:184
msgid " ，因而  "
msgstr " ，因而  "

#: src/zk-snarks/4-Construction-Properties.md:184
msgid "  是它的因式，假如使用了和它不一致的变量值，情况就不是这样了"
msgstr "  是它的因式，假如使用了和它不一致的变量值，情况就不是这样了"

#: src/zk-snarks/4-Construction-Properties.md:186
msgid "这就是一组能够正确计算的变量值，如何在多项式层面上证明出来的。下面 "
msgstr "这就是一组能够正确计算的变量值，如何在多项式层面上证明出来的。下面 "

#: src/zk-snarks/4-Construction-Properties.md:186
msgid " 还要再继续处理协议的密码学部分"
msgstr " 还要再继续处理协议的密码学部分"

#: src/zk-snarks/4-Construction-Properties.md:188
msgid "Verifiable Computation Protocol (可验证计算协议 )"
msgstr "Verifiable Computation Protocol (可验证计算协议 )"

#: src/zk-snarks/4-Construction-Properties.md:190
msgid ""
"我们基于前文中**多项式知识协议** 做了很多修改使它变得更通用 (general-"
"purpose)，来看一下它现在的定义 "
msgstr ""
"我们基于前文中**多项式知识协议** 做了很多修改使它变得更通用 (general-"
"purpose)，来看一下它现在的定义 "

#: src/zk-snarks/4-Construction-Properties.md:192
msgid "假设约定函数 `f(*)`，约定**其计算结果为证明对象(proof)**，其次数为 "
msgstr "假设约定函数 `f(*)`，约定**其计算结果为证明对象(proof)**，其次数为 "

#: src/zk-snarks/4-Construction-Properties.md:192
msgid " ，变量数为 "
msgstr " ，变量数为 "

#: src/zk-snarks/4-Construction-Properties.md:192
msgid " ，其对应的系数:  "
msgstr " ，其对应的系数:  "

#: src/zk-snarks/4-Construction-Properties.md:193
msgid " **Setup :** "
msgstr " **Setup :** "

#: src/zk-snarks/4-Construction-Properties.md:195
msgid "为左操作数 "
msgstr "为左操作数 "

#: src/zk-snarks/4-Construction-Properties.md:195
msgid "  (类似 "
msgstr "  (类似 "

#: src/zk-snarks/4-Construction-Properties.md:195
msgid " ) 构造变量多项式(_variable polynomial_) 然后对于所有 "
msgstr " ) 构造变量多项式(_variable polynomial_) 然后对于所有 "

#: src/zk-snarks/4-Construction-Properties.md:195
msgid "  的运算都算出其对应的系数，即  "
msgstr "  的运算都算出其对应的系数，即  "

#: src/zk-snarks/4-Construction-Properties.md:195
msgid " , 对右操作数和输出也做同样的事情。"
msgstr " , 对右操作数和输出也做同样的事情。"

#: src/zk-snarks/4-Construction-Properties.md:195
msgid "类似"
msgstr "类似"

#: src/zk-snarks/4-Construction-Properties.md:195
msgid "  这样的"
msgstr "  这样的"

#: src/zk-snarks/4-Construction-Properties.md:196
msgid "随机抽取 "
msgstr "随机抽取 "

#: src/zk-snarks/4-Construction-Properties.md:197
msgid "   及   "
msgstr "   及   "

#: src/zk-snarks/4-Construction-Properties.md:198
msgid "计算 _proving key_："
msgstr "计算 _proving key_："

#: src/zk-snarks/4-Construction-Properties.md:200
msgid "计算 _verification key_ ： "
msgstr "计算 _verification key_ ： "

#: src/zk-snarks/4-Construction-Properties.md:202
msgid "**Proving :**"
msgstr "**Proving :**"

#: src/zk-snarks/4-Construction-Properties.md:203
msgid "compute function `f(*)` and therefore corresponding variables values "
msgstr "compute function `f(*)` and therefore corresponding variables values "

#: src/zk-snarks/4-Construction-Properties.md:204
msgid "我理解这里就是 "
msgstr "我理解这里就是 "

#: src/zk-snarks/4-Construction-Properties.md:204
msgid " 个变量 每个变量的赋值即 witness"
msgstr " 个变量 每个变量的赋值即 witness"

#: src/zk-snarks/4-Construction-Properties.md:205
msgid "  ，  "
msgstr "  ，  "

#: src/zk-snarks/4-Construction-Properties.md:205
msgid " 也是类似处理 "
msgstr " 也是类似处理 "

#: src/zk-snarks/4-Construction-Properties.md:206
msgid "给 "
msgstr "给 "

#: src/zk-snarks/4-Construction-Properties.md:206
msgid " 个变量赋值 "
msgstr " 个变量赋值 "

#: src/zk-snarks/4-Construction-Properties.md:206
msgid "  求和, 得到 _operand poly_ ： "
msgstr "  求和, 得到 _operand poly_ ： "

#: src/zk-snarks/4-Construction-Properties.md:208
msgid "assign variable values to the **shifted** poly : "
msgstr "assign variable values to the **shifted** poly : "

#: src/zk-snarks/4-Construction-Properties.md:210
msgid "使用 "
msgstr "使用 "

#: src/zk-snarks/4-Construction-Properties.md:210
msgid " 的幂加密值： "
msgstr " 的幂加密值： "

#: src/zk-snarks/4-Construction-Properties.md:210
msgid "   计算加密值  "
msgstr "   计算加密值  "

#: src/zk-snarks/4-Construction-Properties.md:210
msgid "  给 "
msgstr "  给 "

#: src/zk-snarks/4-Construction-Properties.md:211
msgid "set proof  "
msgstr "set proof  "

#: src/zk-snarks/4-Construction-Properties.md:214
msgid "**Verification :** "
msgstr "**Verification :** "

#: src/zk-snarks/4-Construction-Properties.md:215
msgid "parse proof as  "
msgstr "parse proof as  "

#: src/zk-snarks/4-Construction-Properties.md:216
msgid "`variable polynomial`  restriction check (要符合 `α-shifted` ) "
msgstr "`variable polynomial`  restriction check (要符合 `α-shifted` ) "

#: src/zk-snarks/4-Construction-Properties.md:218
msgid "valid operation check (计算结果的有效性) "
msgstr "valid operation check (计算结果的有效性) "

#: src/zk-snarks/4-Construction-Properties.md:221
msgid "The set of all the variable polynomials  "
msgstr "The set of all the variable polynomials  "

#: src/zk-snarks/4-Construction-Properties.md:221
msgid "   and the target polynomial  "
msgstr "   and the target polynomial  "

#: src/zk-snarks/4-Construction-Properties.md:221
msgid ""
"  is called a  _quadratic arithmetic program_ (QAP, introduced in [Gen+12]"
"(https://medium.com/@imolfar/why-and-how-zk-snark-works-6-verifiable-"
"computation-protocol-1aa19f95a5cc#8bfc) )."
msgstr ""
"  is called a  _quadratic arithmetic program_ (QAP, introduced in [Gen+12]"
"(https://medium.com/@imolfar/why-and-how-zk-snark-works-6-verifiable-"
"computation-protocol-1aa19f95a5cc#8bfc) )."

#: src/zk-snarks/4-Construction-Properties.md:223
msgid ""
"虽然协议足够健壮，可以进行常规的计算验证，但这里依然还有两个安全考虑需要去解"
"决。"
msgstr ""
"虽然协议足够健壮，可以进行常规的计算验证，但这里依然还有两个安全考虑需要去解"
"决。"

#: src/zk-snarks/4-Construction-Properties.md:225
msgid "2 security considerations"
msgstr "2 security considerations"

#: src/zk-snarks/4-Construction-Properties.md:227
msgid "1 | Non-Interchangeability of Operands and Output"
msgstr "1 | Non-Interchangeability of Operands and Output"

#: src/zk-snarks/4-Construction-Properties.md:229
msgid "**操作数和输出的不可替代性**"
msgstr "**操作数和输出的不可替代性**"

#: src/zk-snarks/4-Construction-Properties.md:231
msgid "Because we use **the same**  "
msgstr "Because we use **the same**  "

#: src/zk-snarks/4-Construction-Properties.md:231
msgid ""
"  for all `operands` of _variable polynomials restriction check_ , there is "
"nothing that prevents "
msgstr ""
"  for all `operands` of _variable polynomials restriction check_ , there is "
"nothing that prevents "

#: src/zk-snarks/4-Construction-Properties.md:231
msgid "  from"
msgstr "  from"

#: src/zk-snarks/4-Construction-Properties.md:233
msgid "使用其它的操作数中的可变多项式，即  "
msgstr "使用其它的操作数中的可变多项式，即  "

#: src/zk-snarks/4-Construction-Properties.md:234
msgid "完全交换操作数多项式， 也就是把 "
msgstr "完全交换操作数多项式， 也就是把 "

#: src/zk-snarks/4-Construction-Properties.md:234
msgid " 换成  "
msgstr " 换成  "

#: src/zk-snarks/4-Construction-Properties.md:235
msgid "复用相同的操作数多项式，即 "
msgstr "复用相同的操作数多项式，即 "

#: src/zk-snarks/4-Construction-Properties.md:237
msgid "可交换性就是指 "
msgstr "可交换性就是指 "

#: src/zk-snarks/4-Construction-Properties.md:237
msgid ""
" 可以修改计算过程，并有效证明一些其它无关的计算结果。防止这种行为的一个很显然"
"的方式就是在不同的操作数上使用不同的 "
msgstr ""
" 可以修改计算过程，并有效证明一些其它无关的计算结果。防止这种行为的一个很显然"
"的方式就是在不同的操作数上使用不同的 "

#: src/zk-snarks/4-Construction-Properties.md:237
msgid "  ，具体协议就可以修改为："
msgstr "  ，具体协议就可以修改为："

#: src/zk-snarks/4-Construction-Properties.md:239
msgid "  来代替  "
msgstr "  来代替  "

#: src/zk-snarks/4-Construction-Properties.md:241
msgid "**Setup** :"
msgstr "**Setup** :"

#: src/zk-snarks/4-Construction-Properties.md:242
msgid "sample random  "
msgstr "sample random  "

#: src/zk-snarks/4-Construction-Properties.md:242
msgid "  instead of   "
msgstr "  instead of   "

#: src/zk-snarks/4-Construction-Properties.md:243
msgid "calculate corresponding `shifts`  "
msgstr "calculate corresponding `shifts`  "

#: src/zk-snarks/4-Construction-Properties.md:245
msgid "Proving key : "
msgstr "Proving key : "

#: src/zk-snarks/4-Construction-Properties.md:245
msgid " **Proving** :"
msgstr " **Proving** :"

#: src/zk-snarks/4-Construction-Properties.md:248
msgid "assign variables to the **shifted** poly : "
msgstr "assign variables to the **shifted** poly : "

#: src/zk-snarks/4-Construction-Properties.md:249
msgid ""
" It is now not possible to use _variable polynomials_ from other operands "
"since following  `α-s` are not known to the prover:  (这样就不能在一个操作数"
"中使用其它操作数(operands) 的变量多项式了，因为 `prover` 没有办法去获知  "
msgstr ""
" It is now not possible to use _variable polynomials_ from other operands "
"since following  `α-s` are not known to the prover:  (这样就不能在一个操作数"
"中使用其它操作数(operands) 的变量多项式了，因为 `prover` 没有办法去获知  "

#: src/zk-snarks/4-Construction-Properties.md:251
msgid "   来满足  "
msgstr "   来满足  "

#: src/zk-snarks/4-Construction-Properties.md:251
msgid "  变换关系 )"
msgstr "  变换关系 )"

#: src/zk-snarks/4-Construction-Properties.md:253
msgid "even@安比实验室: 这里通过对  "
msgstr "even@安比实验室: 这里通过对  "

#: src/zk-snarks/4-Construction-Properties.md:253
#: src/zk-snarks/5-Pinocchio-Protocol.md:76
msgid " 和  "
msgstr " 和  "

#: src/zk-snarks/4-Construction-Properties.md:253
msgid ""
"  进行分开 KEA 检查，就解决了上篇文章中提出的第二个缺陷问题——由于 prover 生成"
"的证明中只有计算结果，左操作数，右操作数，输出在计算中混用也不会被发现。"
msgstr ""
"  进行分开 KEA 检查，就解决了上篇文章中提出的第二个缺陷问题——由于 prover 生成"
"的证明中只有计算结果，左操作数，右操作数，输出在计算中混用也不会被发现。"

#: src/zk-snarks/4-Construction-Properties.md:255
msgid ""
"同样下面一节也解决了上篇文章中提出的第三个缺陷问题——由于左操作数，右操作数，"
"输出是分开表示的，互相之间的关系无法进行约束"
msgstr ""
"同样下面一节也解决了上篇文章中提出的第三个缺陷问题——由于左操作数，右操作数，"
"输出是分开表示的，互相之间的关系无法进行约束"

#: src/zk-snarks/4-Construction-Properties.md:257
msgid "2 | Variable Consistency Across Operands(一致性校验和)"
msgstr "2 | Variable Consistency Across Operands(一致性校验和)"

#: src/zk-snarks/4-Construction-Properties.md:259
msgid "**跨操作数的变量一致性**"
msgstr "**跨操作数的变量一致性**"

#: src/zk-snarks/4-Construction-Properties.md:261
msgid "For any variable "
msgstr "For any variable "

#: src/zk-snarks/4-Construction-Properties.md:261
msgid ""
" we have to _assign_ its value to a _variable polynomial_ for each "
"corresponding operand, i.e.: ( 对于任意的变量 "
msgstr ""
" we have to _assign_ its value to a _variable polynomial_ for each "
"corresponding operand, i.e.: ( 对于任意的变量 "

#: src/zk-snarks/4-Construction-Properties.md:262
msgid ""
" ，我们都必须将它的值 _分配_ 到每个相应操作数中的一个与之对应的 _变量多项式_ "
"上，即：) "
msgstr ""
" ，我们都必须将它的值 _分配_ 到每个相应操作数中的一个与之对应的 _变量多项式_ "
"上，即：) "

#: src/zk-snarks/4-Construction-Properties.md:263
msgid ""
" Because the validity of each of the _operand polynomials_ is checked "
"separately, no enforcement requires to use same variable values in the "
"corresponding _variable_ _polynomials_. This means that the value of "
"variable  "
msgstr ""
" Because the validity of each of the _operand polynomials_ is checked "
"separately, no enforcement requires to use same variable values in the "
"corresponding _variable_ _polynomials_. This means that the value of "
"variable  "

#: src/zk-snarks/4-Construction-Properties.md:264
msgid "  in left operand can differ from variable "
msgstr "  in left operand can differ from variable "

#: src/zk-snarks/4-Construction-Properties.md:264
msgid ""
"  in the right operand or the output. ( 因为每一个 _operand polynomials_  的"
"有效性是分开校验的，并不强制要求我们在对应的 _variable_ _polynomials_ 中使用"
"相同的变量值。这就意味着在左操作数中变量 "
msgstr ""
"  in the right operand or the output. ( 因为每一个 _operand polynomials_  的"
"有效性是分开校验的，并不强制要求我们在对应的 _variable_ _polynomials_ 中使用"
"相同的变量值。这就意味着在左操作数中变量 "

#: src/zk-snarks/4-Construction-Properties.md:265
msgid " 的值可以与右操作数或输出中的变量值  "
msgstr " 的值可以与右操作数或输出中的变量值  "

#: src/zk-snarks/4-Construction-Properties.md:265
msgid " 不同)"
msgstr " 不同)"

#: src/zk-snarks/4-Construction-Properties.md:267
msgid ""
"我们可以通过熟悉的限制多项式的方法（也就是限制变量多项式的方法）在操作数之间"
"**强制变量值相等**。"
msgstr ""
"我们可以通过熟悉的限制多项式的方法（也就是限制变量多项式的方法）在操作数之间"
"**强制变量值相等**。"

#: src/zk-snarks/4-Construction-Properties.md:269
msgid ""
"If we can create a “shifted checksum” variable polynomial across all "
"operands, that would restrain prover such that he can assign only same "
"value. A verifier can combine polynomials for each variable into one, e.g., "
"( 如果我们能够在所有的操作数之间创造一个作为“变换的校验和”(**shifted "
"checksum**) 的变量多项式(variable polynomial)，(这里我理解就是创建一个包含了"
"**所有 variable** 的 variable poly, 对这些所有的 variable 整体做 α-shift, 就"
"一个都别跑都被约束住了)  那么就可以**限制 "
msgstr ""
"If we can create a “shifted checksum” variable polynomial across all "
"operands, that would restrain prover such that he can assign only same "
"value. A verifier can combine polynomials for each variable into one, e.g., "
"( 如果我们能够在所有的操作数之间创造一个作为“变换的校验和”(**shifted "
"checksum**) 的变量多项式(variable polynomial)，(这里我理解就是创建一个包含了"
"**所有 variable** 的 variable poly, 对这些所有的 variable 整体做 α-shift, 就"
"一个都别跑都被约束住了)  那么就可以**限制 "

#: src/zk-snarks/4-Construction-Properties.md:270
msgid " 使其只能够赋予(给每个变量)相同的值**。 "
msgstr " 使其只能够赋予(给每个变量)相同的值**。 "

#: src/zk-snarks/4-Construction-Properties.md:270
msgid " 可以将这些每个变量的多项式加起来，即： "
msgstr " 可以将这些每个变量的多项式加起来，即： "

#: src/zk-snarks/4-Construction-Properties.md:271
msgid "iab"
msgstr "iab"

#: src/zk-snarks/4-Construction-Properties.md:271
msgid " 然后乘以一个额外的随机数 _β_ ，即 "
msgstr " 然后乘以一个额外的随机数 _β_ ，即 "

#: src/zk-snarks/4-Construction-Properties.md:273
msgid " 提供这些 `β-shifted poly` 给 "
msgstr " 提供这些 `β-shifted poly` 给 "

#: src/zk-snarks/4-Construction-Properties.md:274
msgid " ，与变量多项式一起给它赋上变量值： "
msgstr " ，与变量多项式一起给它赋上变量值： "

#: src/zk-snarks/4-Construction-Properties.md:275
msgid " 然后加密 _β_ 并把 "
msgstr " 然后加密 _β_ 并把 "

#: src/zk-snarks/4-Construction-Properties.md:276
msgid " 加到 _verification key_ 中。现在如果所有的 "
msgstr " 加到 _verification key_ 中。现在如果所有的 "

#: src/zk-snarks/4-Construction-Properties.md:276
msgid " 值相同，即,  "
msgstr " 值相同，即,  "

#: src/zk-snarks/4-Construction-Properties.md:277
msgid " 等式就满足： "
msgstr " 等式就满足： "

#: src/zk-snarks/4-Construction-Properties.md:280
msgid "(2) 式的底 "
msgstr "(2) 式的底 "

#: src/zk-snarks/4-Construction-Properties.md:280
msgid " 被暂时忽略省去了"
msgstr " 被暂时忽略省去了"

#: src/zk-snarks/4-Construction-Properties.md:282
msgid "如上,  "
msgstr "如上,  "

#: src/zk-snarks/4-Construction-Properties.md:282
msgid " 式成立的条件是 : 当且仅当 "
msgstr " 式成立的条件是 : 当且仅当 "

#: src/zk-snarks/4-Construction-Properties.md:282
msgid "  **都相等**时，这个等式才会成立"
msgstr "  **都相等**时，这个等式才会成立"

#: src/zk-snarks/4-Construction-Properties.md:284
msgid "尽管这个一致性校验很有用，但还是存在一定的概率  "
msgstr "尽管这个一致性校验很有用，但还是存在一定的概率  "

#: src/zk-snarks/4-Construction-Properties.md:284
msgid ""
" 中至少有两项要么计算值相同, 要么一个多项式可以被另一个整除等情况，这就允许 "
msgstr ""
" 中至少有两项要么计算值相同, 要么一个多项式可以被另一个整除等情况，这就允许 "

#: src/zk-snarks/4-Construction-Properties.md:284
msgid " 去分解 "
msgstr " 去分解 "

#: src/zk-snarks/4-Construction-Properties.md:284
msgid ""
"  这些值的关系，使得即使有至少两个不相等的值也依然能够保持等式成立，从而使上 "
msgstr ""
"  这些值的关系，使得即使有至少两个不相等的值也依然能够保持等式成立，从而使上 "

#: src/zk-snarks/4-Construction-Properties.md:284
msgid " 式的校验无效"
msgstr " 式的校验无效"

#: src/zk-snarks/4-Construction-Properties.md:286
msgid "例如，一个以  "
msgstr "例如，一个以  "

#: src/zk-snarks/4-Construction-Properties.md:286
msgid "  为例的单个运算。我们用 _w_ 来表示这 2 式的评估, 同时令 "
msgstr "  为例的单个运算。我们用 _w_ 来表示这 2 式的评估, 同时令 "

#: src/zk-snarks/4-Construction-Properties.md:286
msgid "  。这个等式看起来就是： "
msgstr "  。这个等式看起来就是： "

#: src/zk-snarks/4-Construction-Properties.md:289
msgid "对于任意的 "
msgstr "对于任意的 "

#: src/zk-snarks/4-Construction-Properties.md:289
msgid "  ，这种形式可以令 "
msgstr "  ，这种形式可以令 "

#: src/zk-snarks/4-Construction-Properties.md:289
msgid " ，上式也就变换成： "
msgstr " ，上式也就变换成： "

#: src/zk-snarks/4-Construction-Properties.md:290
msgid "恒成立"
msgstr "恒成立"

#: src/zk-snarks/4-Construction-Properties.md:290
msgid " 所以说, 如果 "
msgstr " 所以说, 如果 "

#: src/zk-snarks/4-Construction-Properties.md:291
msgid "  刻意让  "
msgstr "  刻意让  "

#: src/zk-snarks/4-Construction-Properties.md:291
msgid ""
"  , 则这样的一致性策略是恒成立/无效的。缓解这种情况的一种方法是对每个操作数都"
"使用**不同的 "
msgstr ""
"  , 则这样的一致性策略是恒成立/无效的。缓解这种情况的一种方法是对每个操作数都"
"使用**不同的 "

#: src/zk-snarks/4-Construction-Properties.md:291
msgid " ，** 确保操作数的 _变量多项式_ 中包含无法预测的值"
msgstr " ，** 确保操作数的 _变量多项式_ 中包含无法预测的值"

#: src/zk-snarks/4-Construction-Properties.md:293
msgid "以下是修改后的协议："
msgstr "以下是修改后的协议："

#: src/zk-snarks/4-Construction-Properties.md:296
msgid "...随机数 "
msgstr "...随机数 "

#: src/zk-snarks/4-Construction-Properties.md:297
msgid ""
"对 _variable consistency poly(变量一致性多项式)_ 进行计算，加密并添加到 "
"`proving key` 中：  "
msgstr ""
"对 _variable consistency poly(变量一致性多项式)_ 进行计算，加密并添加到 "
"`proving key` 中：  "

#: src/zk-snarks/4-Construction-Properties.md:300
msgid "对  "
msgstr "对  "

#: src/zk-snarks/4-Construction-Properties.md:300
msgid "  加密并将其加到 _verification key_ 中："
msgstr "  加密并将其加到 _verification key_ 中："

#: src/zk-snarks/4-Construction-Properties.md:302
#: src/zk-snarks/4-Construction-Properties.md:426
#: src/zk-snarks/5-Pinocchio-Protocol.md:197
msgid "**Proving**"
msgstr "**Proving**"

#: src/zk-snarks/4-Construction-Properties.md:303
msgid "…assign variable values to _variable consistency poly_ : "
msgstr "…assign variable values to _variable consistency poly_ : "

#: src/zk-snarks/4-Construction-Properties.md:304
msgid "别忘了"
msgstr "别忘了"

#: src/zk-snarks/4-Construction-Properties.md:304
msgid "是变量个数"
msgstr "是变量个数"

#: src/zk-snarks/4-Construction-Properties.md:305
msgid "add assigned polys in encrypted space : (将赋值的多项式加`加密空间`中):"
msgstr ""
"add assigned polys in encrypted space : (将赋值的多项式加`加密空间`中):"

#: src/zk-snarks/4-Construction-Properties.md:306
msgid "对每一个变量 "
msgstr "对每一个变量 "

#: src/zk-snarks/4-Construction-Properties.md:306
msgid " ​，都要计算它的一致性校验和(shifted-checksum)  "
msgstr " ​，都要计算它的一致性校验和(shifted-checksum)  "

#: src/zk-snarks/4-Construction-Properties.md:306
msgid " ，然后我们将所有的 "
msgstr " ，然后我们将所有的 "

#: src/zk-snarks/4-Construction-Properties.md:306
msgid " 的值相乘, 得到 "
msgstr " 的值相乘, 得到 "

#: src/zk-snarks/4-Construction-Properties.md:306 src/public
#: goods/第二章.md:44 goods/第二章.md:46 goods/第二章.md:88
msgid "  "
msgstr "  "

#: src/zk-snarks/4-Construction-Properties.md:308
msgid "add to the proof： "
msgstr "add to the proof： "

#: src/zk-snarks/4-Construction-Properties.md:309
msgid "在这后面增加吗? "
msgstr "在这后面增加吗? "

#: src/zk-snarks/4-Construction-Properties.md:312
msgid "…校验提供的 _操作数多项式_ 和 “校验和”多项式之间的一致性： "
msgstr "…校验提供的 _操作数多项式_ 和 “校验和”多项式之间的一致性： "

#: src/zk-snarks/4-Construction-Properties.md:313
msgid " PS:  Pairing 公式参考 :  "
msgstr " PS:  Pairing 公式参考 :  "

#: src/zk-snarks/4-Construction-Properties.md:317
msgid "这个构造中, 同一个变量值就无法乱用了，因为不同的 "
msgstr "这个构造中, 同一个变量值就无法乱用了，因为不同的 "

#: src/zk-snarks/4-Construction-Properties.md:317
msgid ""
" 使得相同多项式无法兼容，但是这里还存在与 **remark 4.1** 相同的缺陷，**由于 "
msgstr ""
" 使得相同多项式无法兼容，但是这里还存在与 **remark 4.1** 相同的缺陷，**由于 "

#: src/zk-snarks/4-Construction-Properties.md:317
msgid ""
"  是公开可见的**， 攻击者可以修改任意变量多项式的零索引系数(modify the zero-"
"index coefficient of any of the variable polynomials)，因为它并不依赖于 "
msgstr ""
"  是公开可见的**， 攻击者可以修改任意变量多项式的零索引系数(modify the zero-"
"index coefficient of any of the variable polynomials)，因为它并不依赖于 "

#: src/zk-snarks/4-Construction-Properties.md:317
msgid " ，i.e. "
msgstr " ，i.e. "

#: src/zk-snarks/4-Construction-Properties.md:320
msgid "变量非延展性和变量一致性多项式"
msgstr "变量非延展性和变量一致性多项式"

#: src/zk-snarks/4-Construction-Properties.md:322
msgid "(Non-malleability of Variable and Variable _Consistency_ Polynomials)"
msgstr "(Non-malleability of Variable and Variable _Consistency_ Polynomials)"

#: src/zk-snarks/4-Construction-Properties.md:323
msgid "1 | 变量多项式的延展性"
msgstr "1 | 变量多项式的延展性"

#: src/zk-snarks/4-Construction-Properties.md:325
msgid "Recall 第三章的 **Remark 4.1** :  "
msgstr "Recall 第三章的 **Remark 4.1** :  "

#: src/zk-snarks/4-Construction-Properties.md:325
msgid ""
" 的预期或 _prove a_ _different statement_，后面的章节我们将会解决掉这个问"
"题 : "
msgstr ""
" 的预期或 _prove a_ _different statement_，后面的章节我们将会解决掉这个问"
"题 : "

#: src/zk-snarks/4-Construction-Properties.md:326
msgid "恒等"
msgstr "恒等"

#: src/zk-snarks/4-Construction-Properties.md:326
msgid " 由于 verification key 中包含了加密了的  "
msgstr " 由于 verification key 中包含了加密了的  "

#: src/zk-snarks/4-Construction-Properties.md:329
msgid "举一个 **remark 4.1** 有关的例子，看一下下面的两个运算： "
msgstr "举一个 **remark 4.1** 有关的例子，看一下下面的两个运算： "

#: src/zk-snarks/4-Construction-Properties.md:330
msgid ""
" 预期的结果 _b = a_ 和 _c = 3a_ , 即 _c = 3b_。这就是说 _left_ _operand’s "
"variable_ polynomial 的计算结果为 "
msgstr ""
" 预期的结果 _b = a_ 和 _c = 3a_ , 即 _c = 3b_。这就是说 _left_ _operand’s "
"variable_ polynomial 的计算结果为 "

#: src/zk-snarks/4-Construction-Properties.md:331
msgid "   (第 "
msgstr "   (第 "

#: src/zk-snarks/4-Construction-Properties.md:331
msgid " 行约束的系数为 "
msgstr " 行约束的系数为 "

#: src/zk-snarks/4-Construction-Properties.md:331
msgid " , 第 "
msgstr " , 第 "

#: src/zk-snarks/4-Construction-Properties.md:331
msgid " 行的约束为 "
msgstr " 行的约束为 "

#: src/zk-snarks/4-Construction-Properties.md:333
msgid "先不管 "
msgstr "先不管 "

#: src/zk-snarks/4-Construction-Properties.md:333
msgid " 的形式， "
msgstr " 的形式， "

#: src/zk-snarks/4-Construction-Properties.md:333
msgid " 都可以不按照上述的比例用另一个修改了的多项式  "
msgstr " 都可以不按照上述的比例用另一个修改了的多项式  "

#: src/zk-snarks/4-Construction-Properties.md:333
msgid "  来给 "
msgstr "  来给 "

#: src/zk-snarks/4-Construction-Properties.md:333
msgid " 赋值。这样运算就变成了 "
msgstr " 赋值。这样运算就变成了 "

#: src/zk-snarks/4-Construction-Properties.md:333
msgid " ,  结果也就是 _b = a + 1_ 和 _c = 3a + 1_，其中 _c ≠ 3b_ ，这意味着 "
msgstr " ,  结果也就是 _b = a + 1_ 和 _c = 3a + 1_，其中 _c ≠ 3b_ ，这意味着 "

#: src/zk-snarks/4-Construction-Properties.md:333
msgid " 的取值的实际意义在不同运算中是不一样的"
msgstr " 的取值的实际意义在不同运算中是不一样的"

#: src/zk-snarks/4-Construction-Properties.md:335
msgid "但是因为 "
msgstr "但是因为 "

#: src/zk-snarks/4-Construction-Properties.md:335
msgid " 已经拿到了 "
msgstr " 已经拿到了 "

#: src/zk-snarks/4-Construction-Properties.md:335
msgid ""
" ，所以他依然能够正确地通过 _correct operand polynomials_ 和 _variable "
"values consistency_ 的校验："
msgstr ""
" ，所以他依然能够正确地通过 _correct operand polynomials_ 和 _variable "
"values consistency_ 的校验："

#: src/zk-snarks/4-Construction-Properties.md:337
msgid "**…Proving：**"
msgstr "**…Proving：**"

#: src/zk-snarks/4-Construction-Properties.md:338
msgid "用分配不成比例的变量 _a_ 来建立左操作数多项式：  "
msgstr "用分配不成比例的变量 _a_ 来建立左操作数多项式：  "

#: src/zk-snarks/4-Construction-Properties.md:339
msgid "按照常规的方式构造右操作数多项式和输出多项式： "
msgstr "按照常规的方式构造右操作数多项式和输出多项式： "

#: src/zk-snarks/4-Construction-Properties.md:340
msgid "计算除数：  "
msgstr "计算除数：  "

#: src/zk-snarks/4-Construction-Properties.md:341
msgid "计算加密值："
msgstr "计算加密值："

#: src/zk-snarks/4-Construction-Properties.md:341
msgid "  ，并按照常规方式计算 "
msgstr "  ，并按照常规方式计算 "

#: src/zk-snarks/4-Construction-Properties.md:342
msgid "计算 α-shifts 的加密值： "
msgstr "计算 α-shifts 的加密值： "

#: src/zk-snarks/4-Construction-Properties.md:342
msgid " ，并按照常规方式计算  "
msgstr " ，并按照常规方式计算  "

#: src/zk-snarks/4-Construction-Properties.md:343
msgid "计算变量一致性多项式："
msgstr "计算变量一致性多项式："

#: src/zk-snarks/4-Construction-Properties.md:347
msgid "其中下标 "
msgstr "其中下标 "

#: src/zk-snarks/4-Construction-Properties.md:347
msgid " 代表对应变量的符号, 指数 "
msgstr " 代表对应变量的符号, 指数 "

#: src/zk-snarks/4-Construction-Properties.md:347
msgid " 代表变量的值；以及未定义的变量多项式的值为 0。"
msgstr " 代表变量的值；以及未定义的变量多项式的值为 0。"

#: src/zk-snarks/4-Construction-Properties.md:348
msgid "set proof :  "
msgstr "set proof :  "

#: src/zk-snarks/4-Construction-Properties.md:351
msgid "**Verification：**"
msgstr "**Verification：**"

#: src/zk-snarks/4-Construction-Properties.md:352
msgid "variable poly restriction check :  "
msgstr "variable poly restriction check :  "

#: src/zk-snarks/4-Construction-Properties.md:353
msgid " and as usually for "
msgstr " and as usually for "

#: src/zk-snarks/4-Construction-Properties.md:356
#: src/zk-snarks/5-Pinocchio-Protocol.md:101
msgid "变量多项式约束检查： "
msgstr "变量多项式约束检查： "

#: src/zk-snarks/4-Construction-Properties.md:358
#: src/zk-snarks/5-Pinocchio-Protocol.md:108
msgid "有效计算检查： "
msgstr "有效计算检查： "

#: src/zk-snarks/4-Construction-Properties.md:361
msgid ""
"2 | Malleability of Variable Consistency Polynomials(变量一致性多项式的延展"
"性)"
msgstr ""
"2 | Malleability of Variable Consistency Polynomials(变量一致性多项式的延展"
"性)"

#: src/zk-snarks/4-Construction-Properties.md:363
msgid "Moreover, "
msgstr "Moreover, "

#: src/zk-snarks/4-Construction-Properties.md:363
msgid ""
"  allows to use different values of same `variable` in different `operands`. "
"For example, if we have an operation: (而且 "
msgstr ""
"  allows to use different values of same `variable` in different `operands`. "
"For example, if we have an operation: (而且 "

#: src/zk-snarks/4-Construction-Properties.md:364
msgid ""
"  的存在允许我们在不同操作数的相同变量上使用不同的值。例如，如果我们有一个运"
"算)： "
msgstr ""
"  的存在允许我们在不同操作数的相同变量上使用不同的值。例如，如果我们有一个运"
"算)： "

#: src/zk-snarks/4-Construction-Properties.md:367
msgid "Which can be represented by the variable polynomials: "
msgstr "Which can be represented by the variable polynomials: "

#: src/zk-snarks/4-Construction-Properties.md:368
msgid " 简单插值, 得到 "
msgstr " 简单插值, 得到 "

#: src/zk-snarks/4-Construction-Properties.md:370
msgid " 尽管我们期待的输出是 "
msgstr " 尽管我们期待的输出是 "

#: src/zk-snarks/4-Construction-Properties.md:371
msgid " ，但我们可以设置不同的 "
msgstr " ，但我们可以设置不同的 "

#: src/zk-snarks/4-Construction-Properties.md:371
msgid " 值，例如：设置  "
msgstr " 值，例如：设置  "

#: src/zk-snarks/4-Construction-Properties.md:371
msgid " (left operand), "
msgstr " (left operand), "

#: src/zk-snarks/4-Construction-Properties.md:371
msgid " (right operand) , "
msgstr " (right operand) , "

#: src/zk-snarks/4-Construction-Properties.md:371
msgid "  如下："
msgstr "  如下："

#: src/zk-snarks/4-Construction-Properties.md:373
msgid "**Proving：**"
msgstr "**Proving：**"

#: src/zk-snarks/4-Construction-Properties.md:374
msgid "…用 "
msgstr "…用 "

#: src/zk-snarks/4-Construction-Properties.md:374
msgid " 设置**左**操作数多项式  "
msgstr " 设置**左**操作数多项式  "

#: src/zk-snarks/4-Construction-Properties.md:375
#: src/zk-snarks/4-Construction-Properties.md:377
msgid "用 "
msgstr "用 "

#: src/zk-snarks/4-Construction-Properties.md:375
msgid " 设置**右**操作数多项式  "
msgstr " 设置**右**操作数多项式  "

#: src/zk-snarks/4-Construction-Properties.md:376
#: src/zk-snarks/5-Pinocchio-Protocol.md:106 src/public
#: goods/4-Proving-System.md:62
msgid "∵"
msgstr "∵"

#: src/zk-snarks/4-Construction-Properties.md:376
msgid " (在 "
msgstr " (在 "

#: src/zk-snarks/4-Construction-Properties.md:376
msgid " 时) , 所以  `+3` 是为了确保我们在 "
msgstr " 时) , 所以  `+3` 是为了确保我们在 "

#: src/zk-snarks/4-Construction-Properties.md:376
msgid " 处得到正确的操作数 5"
msgstr " 处得到正确的操作数 5"

#: src/zk-snarks/4-Construction-Properties.md:377
msgid " 设置输出多项式 : "
msgstr " 设置输出多项式 : "

#: src/zk-snarks/4-Construction-Properties.md:378
msgid "... 计算加密值 :  "
msgstr "... 计算加密值 :  "

#: src/zk-snarks/4-Construction-Properties.md:380
msgid "计算变量一致性多项式： "
msgstr "计算变量一致性多项式： "

#: src/zk-snarks/4-Construction-Properties.md:381
msgid " **Verification：**"
msgstr " **Verification：**"

#: src/zk-snarks/4-Construction-Properties.md:383
msgid "……变量值的一致性检查，应满足： "
msgstr "……变量值的一致性检查，应满足： "

#: src/zk-snarks/4-Construction-Properties.md:385
msgid "注意：多项式  "
msgstr "注意：多项式  "

#: src/zk-snarks/4-Construction-Properties.md:385
msgid " 其实可以被忽略掉的，因为这几项对于任何 "
msgstr " 其实可以被忽略掉的，因为这几项对于任何 "

#: src/zk-snarks/4-Construction-Properties.md:385
msgid " 的取值，计算结果都为 0，但是为了保持完整性我们依然要保留这几项"
msgstr " 的取值，计算结果都为 0，但是为了保持完整性我们依然要保留这几项"

#: src/zk-snarks/4-Construction-Properties.md:387
msgid "even@安比实验室：这种能力会危害到协议的可靠性。很显然，加密的  "
msgstr "even@安比实验室：这种能力会危害到协议的可靠性。很显然，加密的  "

#: src/zk-snarks/4-Construction-Properties.md:387
msgid " 不应该对 Prover 可见"
msgstr " 不应该对 Prover 可见"

#: src/zk-snarks/4-Construction-Properties.md:389
msgid "3 | **Non-Malleability** 非延展性"
msgstr "3 | **Non-Malleability** 非延展性"

#: src/zk-snarks/4-Construction-Properties.md:391
msgid ""
"解决延展性(Malleability) 问题的一个方法就是，在 setup 阶段将 encrypted space"
"中的 "
msgstr ""
"解决延展性(Malleability) 问题的一个方法就是，在 setup 阶段将 encrypted space"
"中的 "

#: src/zk-snarks/4-Construction-Properties.md:391
msgid " 项与随机秘密值 "
msgstr " 项与随机秘密值 "

#: src/zk-snarks/4-Construction-Properties.md:391
msgid " (gamma) 相乘,  从而使  _verification key_ 中加密的 "
msgstr " (gamma) 相乘,  从而使  _verification key_ 中加密的 "

#: src/zk-snarks/4-Construction-Properties.md:391
msgid " 与加密值 "
msgstr " 与加密值 "

#: src/zk-snarks/4-Construction-Properties.md:391
msgid " 不兼容： "
msgstr " 不兼容： "

#: src/zk-snarks/4-Construction-Properties.md:392
msgid " 相应的这种被修饰过的加密值，就能阻止修改加密值 "
msgstr " 相应的这种被修饰过的加密值，就能阻止修改加密值 "

#: src/zk-snarks/4-Construction-Properties.md:393
msgid "  的可行性，因为 "
msgstr "  的可行性，因为 "

#: src/zk-snarks/4-Construction-Properties.md:393
msgid " 中没有  "
msgstr " 中没有  "

#: src/zk-snarks/4-Construction-Properties.md:393
msgid " ，即： "
msgstr " ，即： "

#: src/zk-snarks/4-Construction-Properties.md:395
msgid "注 : "
msgstr "注 : "

#: src/zk-snarks/4-Construction-Properties.md:397
msgid "因为变值 "
msgstr "因为变值 "

#: src/zk-snarks/4-Construction-Properties.md:397
msgid "  是随机的,  "
msgstr "  是随机的,  "

#: src/zk-snarks/4-Construction-Properties.md:397
msgid " 并不知道它的值。所以这个修改就需要我们用 "
msgstr " 并不知道它的值。所以这个修改就需要我们用 "

#: src/zk-snarks/4-Construction-Properties.md:397
msgid " 乘以 "
msgstr " 乘以 "

#: src/zk-snarks/4-Construction-Properties.md:397
msgid "  来平衡协议中的变量值一致性校验等式："
msgstr "  来平衡协议中的变量值一致性校验等式："

#: src/zk-snarks/4-Construction-Properties.md:399
msgid "**Setup：**"
msgstr "**Setup：**"

#: src/zk-snarks/4-Construction-Properties.md:400
msgid "…随机数 "
msgstr "…随机数 "

#: src/zk-snarks/4-Construction-Properties.md:401
msgid "…设置 _verification key_："
msgstr "…设置 _verification key_："

#: src/zk-snarks/4-Construction-Properties.md:401
msgid "  **Proving：** … **Verification：**"
msgstr "  **Proving：** … **Verification：**"

#: src/zk-snarks/4-Construction-Properties.md:404
msgid "… 变量值一致性检查应满足： "
msgstr "… 变量值一致性检查应满足： "

#: src/zk-snarks/4-Construction-Properties.md:405
msgid " 这里很重要的一点是我们排除了变量多项式为 0-阶的例子（e.g. "
msgstr " 这里很重要的一点是我们排除了变量多项式为 0-阶的例子（e.g. "

#: src/zk-snarks/4-Construction-Properties.md:406
msgid ""
" ），否则就可以从 _proving key_ 的 _variable consistency polynomials_ (变量一"
"致性多项式) 中揭露出加了密的 "
msgstr ""
" ），否则就可以从 _proving key_ 的 _variable consistency polynomials_ (变量一"
"致性多项式) 中揭露出加了密的 "

#: src/zk-snarks/4-Construction-Properties.md:406
msgid " 值 "
msgstr " 值 "

#: src/zk-snarks/4-Construction-Properties.md:407
msgid " 比如这个例子中当操作数(Operand) / 输出(Output) 中的任意两项为 "
msgstr " 比如这个例子中当操作数(Operand) / 输出(Output) 中的任意两项为 "

#: src/zk-snarks/4-Construction-Properties.md:408
msgid " 时,  e.g.  "
msgstr " 时,  e.g.  "

#: src/zk-snarks/4-Construction-Properties.md:408
msgid "  , this will result in :  "
msgstr "  , this will result in :  "

#: src/zk-snarks/4-Construction-Properties.md:409
msgid " 如此 "
msgstr " 如此 "

#: src/zk-snarks/4-Construction-Properties.md:410
msgid "  就直接被 exposed 出来了"
msgstr "  就直接被 exposed 出来了"

#: src/zk-snarks/4-Construction-Properties.md:412
msgid ""
"我们同样也可以通过\"修饰\"(mask) α-s 项来解决 变量多项式 的延展性问题。但是这"
"就没有必要了，因为对于 _变量多项式_ 的任何修改，都需要被映射到变量的 _一致性"
"多项式_ 中，而一致性多项式是无法修改的"
msgstr ""
"我们同样也可以通过\"修饰\"(mask) α-s 项来解决 变量多项式 的延展性问题。但是这"
"就没有必要了，因为对于 _变量多项式_ 的任何修改，都需要被映射到变量的 _一致性"
"多项式_ 中，而一致性多项式是无法修改的"

#: src/zk-snarks/4-Construction-Properties.md:414
msgid "变量值一致性检查的优化"
msgstr "变量值一致性检查的优化"

#: src/zk-snarks/4-Construction-Properties.md:416
msgid ""
"现在 _variable values consistency_ check 是有效的，但是这里在 _verification "
"key_ 中增加了 4 个昂贵的 Pairing 操作和 4 个新的项。文献 [Par+13](https://"
"secbit.io/blog/2020/01/15/learn-zk-snark-from-zero-part-four/#bd7c) 中的 "
"Pinocchio 协议用了一个很聪明的方法优化，通过选择不同的生成元 "
msgstr ""
"现在 _variable values consistency_ check 是有效的，但是这里在 _verification "
"key_ 中增加了 4 个昂贵的 Pairing 操作和 4 个新的项。文献 [Par+13](https://"
"secbit.io/blog/2020/01/15/learn-zk-snark-from-zero-part-four/#bd7c) 中的 "
"Pinocchio 协议用了一个很聪明的方法优化，通过选择不同的生成元 "

#: src/zk-snarks/4-Construction-Properties.md:416
msgid "  ，从而对每个 operand 实行“移位”："
msgstr "  ，从而对每个 operand 实行“移位”："

#: src/zk-snarks/4-Construction-Properties.md:419
msgid "…选择随机值 "
msgstr "…选择随机值 "

#: src/zk-snarks/4-Construction-Properties.md:419
msgid "  , and set  "
msgstr "  , and set  "

#: src/zk-snarks/4-Construction-Properties.md:420
msgid "set generators   "
msgstr "set generators   "

#: src/zk-snarks/4-Construction-Properties.md:421
msgid "set  _proving key_：  "
msgstr "set  _proving key_：  "

#: src/zk-snarks/4-Construction-Properties.md:423
msgid "设置 _verification key_： "
msgstr "设置 _verification key_： "

#: src/zk-snarks/4-Construction-Properties.md:427
msgid "…assign variable values : "
msgstr "…assign variable values : "

#: src/zk-snarks/4-Construction-Properties.md:428
msgid " **Verification**"
msgstr " **Verification**"

#: src/zk-snarks/4-Construction-Properties.md:430
msgid "…变量多项式约束检查： "
msgstr "…变量多项式约束检查： "

#: src/zk-snarks/4-Construction-Properties.md:431
msgid "  & 对 "
msgstr "  & 对 "

#: src/zk-snarks/4-Construction-Properties.md:432
#: src/zk-snarks/5-Pinocchio-Protocol.md:219
msgid "  做同样的检查"
msgstr "  做同样的检查"

#: src/zk-snarks/4-Construction-Properties.md:433
msgid "变量值约束检查： "
msgstr "变量值约束检查： "

#: src/zk-snarks/4-Construction-Properties.md:435
msgid "有效运算检查： "
msgstr "有效运算检查： "

#: src/zk-snarks/4-Construction-Properties.md:438
msgid ""
"生成元的这种随机化进一步增加了安全性，使得如 **remark 4.1** 中**描述的 "
"_variable polynomials_ 延展性无效**。因为对于故意的修改，它必须要么是 "
msgstr ""
"生成元的这种随机化进一步增加了安全性，使得如 **remark 4.1** 中**描述的 "
"_variable polynomials_ 延展性无效**。因为对于故意的修改，它必须要么是 "

#: src/zk-snarks/4-Construction-Properties.md:438
msgid ""
"   原始值的倍数 , 要么就是不可直接用的加密值的倍数（假定, 如上文所述我们不去"
"处理可能曝光加密后的值的 0 阶可变多项式）"
msgstr ""
"   原始值的倍数 , 要么就是不可直接用的加密值的倍数（假定, 如上文所述我们不去"
"处理可能曝光加密后的值的 0 阶可变多项式）"

#: src/zk-snarks/4-Construction-Properties.md:440
msgid "这个优化使得 _verification key_ 减少了 2 个项,  i.e.  "
msgstr "这个优化使得 _verification key_ 减少了 2 个项,  i.e.  "

#: src/zk-snarks/4-Construction-Properties.md:440
msgid "  instead of "
msgstr "  instead of "

#: src/zk-snarks/4-Construction-Properties.md:440
msgid "   :  "
msgstr "   :  "

#: src/zk-snarks/4-Construction-Properties.md:441
#: src/zk-snarks/4-Construction-Properties.md:443
msgid "对比"
msgstr "对比"

#: src/zk-snarks/4-Construction-Properties.md:441
msgid " ，并且去除了 verification 步骤中的两个配对运算 :  "
msgstr " ，并且去除了 verification 步骤中的两个配对运算 :  "

#: src/zk-snarks/4-Construction-Properties.md:445
msgid ""
"注意：这在 Jens Groth 2016 年的 paper [Gro16](https://secbit.io/"
"blog/2020/01/15/learn-zk-snark-from-zero-part-four/#2923)  中有更进一步的改进"
msgstr ""
"注意：这在 Jens Groth 2016 年的 paper [Gro16](https://secbit.io/"
"blog/2020/01/15/learn-zk-snark-from-zero-part-four/#2923)  中有更进一步的改进"

#: src/zk-snarks/4-Construction-Properties.md:447
msgid ""
"even@安比实验室: 至此，通用 zk-SNARK 协议的已经几乎构造完成了，本文可以归纳为"
"以下几点："
msgstr ""
"even@安比实验室: 至此，通用 zk-SNARK 协议的已经几乎构造完成了，本文可以归纳为"
"以下几点："

#: src/zk-snarks/4-Construction-Properties.md:448
msgid "协议中是如何增加可变系数的和如何做加减乘除运算的"
msgstr "协议中是如何增加可变系数的和如何做加减乘除运算的"

#: src/zk-snarks/4-Construction-Properties.md:449
msgid "协议如何保证操作数和输出的不可替代性"
msgstr "协议如何保证操作数和输出的不可替代性"

#: src/zk-snarks/4-Construction-Properties.md:450
msgid "协议如何保证跨操作数的可变一致性"
msgstr "协议如何保证跨操作数的可变一致性"

#: src/zk-snarks/4-Construction-Properties.md:451
msgid "协议如何处理非延展性变量和变量一致性"
msgstr "协议如何处理非延展性变量和变量一致性"

#: src/zk-snarks/4-Construction-Properties.md:452
msgid "协议中变量值一致性检查优化"
msgstr "协议中变量值一致性检查优化"

#: src/zk-snarks/4-Construction-Properties.md:455
msgid "Reference : "
msgstr "Reference : "

#: src/zk-snarks/4-Construction-Properties.md:456
msgid "https://secbit.io/blog/2020/01/15/learn-zk-snark-from-zero-part-four/"
msgstr "https://secbit.io/blog/2020/01/15/learn-zk-snark-from-zero-part-four/"

#: src/zk-snarks/4-Construction-Properties.md:458
msgid ""
"https://medium.com/@imolfar/why-and-how-zk-snark-works-6-verifiable-"
"computation-protocol-1aa19f95a5cc"
msgstr ""
"https://medium.com/@imolfar/why-and-how-zk-snark-works-6-verifiable-"
"computation-protocol-1aa19f95a5cc"

#: src/zk-snarks/5-Pinocchio-Protocol.md:9
msgid ""
"[约束和公共输入 Constraints and Public Inputs](#约束和公共输入-constraints-"
"and-public-inputs)"
msgstr ""
"[约束和公共输入 Constraints and Public Inputs](#约束和公共输入-constraints-"
"and-public-inputs)"

#: src/zk-snarks/5-Pinocchio-Protocol.md:10
msgid "[约束 Constraints](#约束-constraints)"
msgstr "[约束 Constraints](#约束-constraints)"

#: src/zk-snarks/5-Pinocchio-Protocol.md:11
msgid ""
"[Public Inputs and One (公共输入和 1)](#public-inputs-and-one-公共输入和-1)"
msgstr ""
"[Public Inputs and One (公共输入和 1)](#public-inputs-and-one-公共输入和-1)"

#: src/zk-snarks/5-Pinocchio-Protocol.md:12
msgid "[Zero-Knowledge Computation](#zero-knowledge-computation)"
msgstr "[Zero-Knowledge Computation](#zero-knowledge-computation)"

#: src/zk-snarks/5-Pinocchio-Protocol.md:13
msgid ""
"[Zero-Knowledge Proof of Computation](#zero-knowledge-proof-of-computation)"
msgstr ""
"[Zero-Knowledge Proof of Computation](#zero-knowledge-proof-of-computation)"

#: src/zk-snarks/5-Pinocchio-Protocol.md:14
msgid "[zk-SNARK 协议](#zk-snark-协议)"
msgstr "[zk-SNARK 协议](#zk-snark-协议)"

#: src/zk-snarks/5-Pinocchio-Protocol.md:15
msgid "[结论](#结论)"
msgstr "[结论](#结论)"

#: src/zk-snarks/5-Pinocchio-Protocol.md:17
msgid "约束和公共输入 Constraints and Public Inputs"
msgstr "约束和公共输入 Constraints and Public Inputs"

#: src/zk-snarks/5-Pinocchio-Protocol.md:18
msgid "约束 Constraints"
msgstr "约束 Constraints"

#: src/zk-snarks/5-Pinocchio-Protocol.md:20
msgid ""
"我们的分析主要集中在运算的概念上。但是，协议实际上不是去做”计算“，而是检验输"
"出值是否是操作数正确运算得到的结果。所以我们称之为约束，即一个 "
msgstr ""
"我们的分析主要集中在运算的概念上。但是，协议实际上不是去做”计算“，而是检验输"
"出值是否是操作数正确运算得到的结果。所以我们称之为约束，即一个 "

#: src/zk-snarks/5-Pinocchio-Protocol.md:20
msgid " 约束 "
msgstr " 约束 "

#: src/zk-snarks/5-Pinocchio-Protocol.md:20
msgid ""
" 去为预定义的“程序”提供有效值，而无论这个“程序”是什么。多个约束组成的系统被称"
"为“约束系统”（在我们的例子中这是一个一阶约束系统，或被称为 **R1CS**）"
msgstr ""
" 去为预定义的“程序”提供有效值，而无论这个“程序”是什么。多个约束组成的系统被称"
"为“约束系统”（在我们的例子中这是一个一阶约束系统，或被称为 **R1CS**）"

#: src/zk-snarks/5-Pinocchio-Protocol.md:22
msgid ""
"@Maksym（作者）：这里其实隐含了寻找所有正确答案的一个方法就是对所有可能的组合"
"值进行一次暴力破解，然后只选择一个满足的约束，或者使用可满足约束的更精密的技"
"术 [con18](https://secbit.io/blog/2020/01/22/learn-zk-snark-from-zero-part-"
"five/#b979) even@安比实验室：请注意这个约束是定义在算术电路，或者布尔电路上。"
"因为这两类电路的可满足性问题是 NP-Complete 问题。"
msgstr ""
"@Maksym（作者）：这里其实隐含了寻找所有正确答案的一个方法就是对所有可能的组合"
"值进行一次暴力破解，然后只选择一个满足的约束，或者使用可满足约束的更精密的技"
"术 [con18](https://secbit.io/blog/2020/01/22/learn-zk-snark-from-zero-part-"
"five/#b979) even@安比实验室：请注意这个约束是定义在算术电路，或者布尔电路上。"
"因为这两类电路的可满足性问题是 NP-Complete 问题。"

#: src/zk-snarks/5-Pinocchio-Protocol.md:25
msgid "因而我们也可以使用约束来确保其它的关系。例如，如果我们想要确认变量 "
msgstr "因而我们也可以使用约束来确保其它的关系。例如，如果我们想要确认变量 "

#: src/zk-snarks/5-Pinocchio-Protocol.md:25
msgid " 的值只能为 0 或 1（即二进制数），我们可以用一个简单的约束去做这件事： "
msgstr ""
" 的值只能为 0 或 1（即二进制数），我们可以用一个简单的约束去做这件事： "

#: src/zk-snarks/5-Pinocchio-Protocol.md:26
msgid " 我们也可以约束 "
msgstr " 我们也可以约束 "

#: src/zk-snarks/5-Pinocchio-Protocol.md:27
msgid " 的值只能为 2： "
msgstr " 的值只能为 2： "

#: src/zk-snarks/5-Pinocchio-Protocol.md:28
msgid " 一个更复杂的例子是确保数字  "
msgstr " 一个更复杂的例子是确保数字  "

#: src/zk-snarks/5-Pinocchio-Protocol.md:29
msgid ""
"  是一个 4-bit 的数字（也称为半字节 nibble），换句话说可以用 4 个bit 来表示"
"出  "
msgstr ""
"  是一个 4-bit 的数字（也称为半字节 nibble），换句话说可以用 4 个bit 来表示"
"出  "

#: src/zk-snarks/5-Pinocchio-Protocol.md:29
msgid "  , 我们也可以称这个为“确保取值范围” , 因为一个 4-bit 的数字可以代表 "
msgstr "  , 我们也可以称这个为“确保取值范围” , 因为一个 4-bit 的数字可以代表 "

#: src/zk-snarks/5-Pinocchio-Protocol.md:29
msgid " 的组合，因而也就是从 `0 ~ 15` 范围内的 16 个数字。如 "
msgstr " 的组合，因而也就是从 `0 ~ 15` 范围内的 16 个数字。如 "

#: src/zk-snarks/5-Pinocchio-Protocol.md:29 src/halo2/tmp/9-decomposed.md:22
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:162
msgid "1011"
msgstr "1011"

#: src/zk-snarks/5-Pinocchio-Protocol.md:31
msgid "Therefore if  "
msgstr "Therefore if  "

#: src/zk-snarks/5-Pinocchio-Protocol.md:31
msgid "  is a 4-bit number, then "
msgstr "  is a 4-bit number, then "

#: src/zk-snarks/5-Pinocchio-Protocol.md:31
msgid " ，for some boolean  "
msgstr " ，for some boolean  "

#: src/zk-snarks/5-Pinocchio-Protocol.md:31
msgid "  ,  The constraint can be following: "
msgstr "  ,  The constraint can be following: "

#: src/zk-snarks/5-Pinocchio-Protocol.md:32
msgid " 并且为了确保 "
msgstr " 并且为了确保 "

#: src/zk-snarks/5-Pinocchio-Protocol.md:33
msgid "  都是二进制数我们需要增加约束： "
msgstr "  都是二进制数我们需要增加约束： "

#: src/zk-snarks/5-Pinocchio-Protocol.md:34
msgid " 可以写成 Circom 代码:"
msgstr " 可以写成 Circom 代码:"

#: src/zk-snarks/5-Pinocchio-Protocol.md:44
msgid ""
"更复杂的约束也可以用这种方式表示，以此来确保使用的值满足规则。需要注意的是，"
"上述约束 "
msgstr ""
"更复杂的约束也可以用这种方式表示，以此来确保使用的值满足规则。需要注意的是，"
"上述约束 "

#: src/zk-snarks/5-Pinocchio-Protocol.md:44
msgid " 在当前操作的构造中是不可能的： "
msgstr " 在当前操作的构造中是不可能的： "

#: src/zk-snarks/5-Pinocchio-Protocol.md:45
msgid " 因为值 1 （以及前面约束中的 2）必须通过 "
msgstr " 因为值 1 （以及前面约束中的 2）必须通过 "

#: src/zk-snarks/5-Pinocchio-Protocol.md:46
msgid "  表达出来，其中 _c_ 可以被固定到 _proving key_ 中，但是因为 _v_ 是由 "
msgstr "  表达出来，其中 _c_ 可以被固定到 _proving key_ 中，但是因为 _v_ 是由 "

#: src/zk-snarks/5-Pinocchio-Protocol.md:46
msgid " 提供的，所以可以是任何别的值。尽管我们可以通过设置 _c = 0_ 来强制 "
msgstr " 提供的，所以可以是任何别的值。尽管我们可以通过设置 _c = 0_ 来强制 "

#: src/zk-snarks/5-Pinocchio-Protocol.md:46
msgid "  变成 0，但是在我们前面受限的构造方法中很难找到一个约束来强制 "
msgstr "  变成 0，但是在我们前面受限的构造方法中很难找到一个约束来强制 "

#: src/zk-snarks/5-Pinocchio-Protocol.md:46
msgid "  为 1。于是，"
msgstr "  为 1。于是，"

#: src/zk-snarks/5-Pinocchio-Protocol.md:46
msgid " 需要有一种办法来设置 "
msgstr " 需要有一种办法来设置 "

#: src/zk-snarks/5-Pinocchio-Protocol.md:48
msgid "首先，我们需要明确 "
msgstr "首先，我们需要明确 "

#: src/zk-snarks/5-Pinocchio-Protocol.md:48
msgid ""
" 这个特殊变量的角色。在 zk-SNARK的 约束系统中，它是被预设为 1 的。换句话说，"
"无论其他变量如何变化， "
msgstr ""
" 这个特殊变量的角色。在 zk-SNARK的 约束系统中，它是被预设为 1 的。换句话说，"
"无论其他变量如何变化， "

#: src/zk-snarks/5-Pinocchio-Protocol.md:48
msgid " 的值始终应该是1。"
msgstr " 的值始终应该是1。"

#: src/zk-snarks/5-Pinocchio-Protocol.md:50
msgid "然后，该部分内容提到的 "
msgstr "然后，该部分内容提到的 "

#: src/zk-snarks/5-Pinocchio-Protocol.md:50
msgid " ，实际上是约束系统中的一个公式，其中 "
msgstr " ，实际上是约束系统中的一个公式，其中 "

#: src/zk-snarks/5-Pinocchio-Protocol.md:50
msgid " 是证明者在证明过程中需要选择的一个值， "
msgstr " 是证明者在证明过程中需要选择的一个值， "

#: src/zk-snarks/5-Pinocchio-Protocol.md:50
msgid " 是我们前面说的那个始终为 1 的特殊变量。"
msgstr " 是我们前面说的那个始终为 1 的特殊变量。"

#: src/zk-snarks/5-Pinocchio-Protocol.md:52
msgid "然后，它提到，即使我们可以通过设置 "
msgstr "然后，它提到，即使我们可以通过设置 "

#: src/zk-snarks/5-Pinocchio-Protocol.md:52
msgid " 来使得 "
msgstr " 来使得 "

#: src/zk-snarks/5-Pinocchio-Protocol.md:52
msgid " 为0，但在当前的构造方法中，我们却无法找到一个约束来强制  "
msgstr " 为0，但在当前的构造方法中，我们却无法找到一个约束来强制  "

#: src/zk-snarks/5-Pinocchio-Protocol.md:52
msgid "  为 1 。这个意思是说，在我们的构造方法中，我们可以通过选择不同的 "
msgstr "  为 1 。这个意思是说，在我们的构造方法中，我们可以通过选择不同的 "

#: src/zk-snarks/5-Pinocchio-Protocol.md:52
msgid " 为任何我们希望的值，但这并不能保证  "
msgstr " 为任何我们希望的值，但这并不能保证  "

#: src/zk-snarks/5-Pinocchio-Protocol.md:52
msgid "  始终为1"
msgstr "  始终为1"

#: src/zk-snarks/5-Pinocchio-Protocol.md:54
msgid "even@安比实验室: 我们前文中提到的表达式的约束关系就称为 R1CS"
msgstr "even@安比实验室: 我们前文中提到的表达式的约束关系就称为 R1CS"

#: src/zk-snarks/5-Pinocchio-Protocol.md:56
msgid "Public Inputs and One (公共输入和 1)"
msgstr "Public Inputs and One (公共输入和 1)"

#: src/zk-snarks/5-Pinocchio-Protocol.md:58
msgid "如果不能根据 "
msgstr "如果不能根据 "

#: src/zk-snarks/5-Pinocchio-Protocol.md:58
msgid ""
" 的输入对其进行检查，例如，知道证明者已将两个值相乘而不知道结果和/或值是什"
"么，那么证明的可用性将受到限制。虽然可以在 _proving key_ 中通过“硬编码"
"(hardwire)”来进行验证一些特定的值（如，约束某步乘法运算的结果必须为 12 ），但"
"这就需要针对每一个所需的的 “verifier 输入”生成单独的密钥对 (this would "
"require to generate separate pair of keys for each desired “`verifier’s "
"input`.”)"
msgstr ""
" 的输入对其进行检查，例如，知道证明者已将两个值相乘而不知道结果和/或值是什"
"么，那么证明的可用性将受到限制。虽然可以在 _proving key_ 中通过“硬编码"
"(hardwire)”来进行验证一些特定的值（如，约束某步乘法运算的结果必须为 12 ），但"
"这就需要针对每一个所需的的 “verifier 输入”生成单独的密钥对 (this would "
"require to generate separate pair of keys for each desired “`verifier’s "
"input`.”)"

#: src/zk-snarks/5-Pinocchio-Protocol.md:60
msgid "even@安比实验室: 这样会严重限制实用性，电路需要支持参数。"
msgstr "even@安比实验室: 这样会严重限制实用性，电路需要支持参数。"

#: src/zk-snarks/5-Pinocchio-Protocol.md:62
msgid "**因而如果可以由 "
msgstr "**因而如果可以由 "

#: src/zk-snarks/5-Pinocchio-Protocol.md:62
msgid "  为计算指定一些值(输入/输出)，包括 "
msgstr "  为计算指定一些值(输入/输出)，包括 "

#: src/zk-snarks/5-Pinocchio-Protocol.md:62
msgid "  ，而不是由 "
msgstr "  ，而不是由 "

#: src/zk-snarks/5-Pinocchio-Protocol.md:62
msgid ""
"  来控制,  那证明就可以变得更通用!!** (Therefore it would be universal if "
"the verifier could specify some of the values (inputs or/and outputs) for "
"the computation, including the "
msgstr ""
"  来控制,  那证明就可以变得更通用!!** (Therefore it would be universal if "
"the verifier could specify some of the values (inputs or/and outputs) for "
"the computation, including the "

#: src/zk-snarks/5-Pinocchio-Protocol.md:62
msgid " , instead of the "
msgstr " , instead of the "

#: src/zk-snarks/5-Pinocchio-Protocol.md:62
msgid ".)"
msgstr ".)"

#: src/zk-snarks/5-Pinocchio-Protocol.md:64
msgid "首先，我们看一下要证明的值 "
msgstr "首先，我们看一下要证明的值 "

#: src/zk-snarks/5-Pinocchio-Protocol.md:65
msgid ""
" Because we are using the `homomorphic encryption` it is possible to augment "
"these values, for example, we can add another encrypted polynomial "
"evaluation (利用同态加密，我们可以扩大这些值) "
msgstr ""
" Because we are using the `homomorphic encryption` it is possible to augment "
"these values, for example, we can add another encrypted polynomial "
"evaluation (利用同态加密，我们可以扩大这些值) "

#: src/zk-snarks/5-Pinocchio-Protocol.md:67
msgid ""
" which means that the verifier could add other variable polynomials to the "
"already provided ones. Therefore if we could exclude necessary variable "
"polynomials from the ones available to the prover, the verifier would be "
"able to set his values on those variables, while the computation check "
"should still match. 这意味着验证者 "
msgstr ""
" which means that the verifier could add other variable polynomials to the "
"already provided ones. Therefore if we could exclude necessary variable "
"polynomials from the ones available to the prover, the verifier would be "
"able to set his values on those variables, while the computation check "
"should still match. 这意味着验证者 "

#: src/zk-snarks/5-Pinocchio-Protocol.md:69
msgid ""
"  可以将 other _variable polynomials_ 添加到已经提供的 polys 中。因此，如果我"
"们可以从提供给 "
msgstr ""
"  可以将 other _variable polynomials_ 添加到已经提供的 polys 中。因此，如果我"
"们可以从提供给 "

#: src/zk-snarks/5-Pinocchio-Protocol.md:69
#: src/halo2/tmp/3-Fibonacci-example-2.md:39
#: src/halo2/tmp/3-Fibonacci-example-2.md:231
#: src/halo2/tmp/3-Fibonacci-example-2.md:427
#: src/zk-everything/zk-everything-joe/Spartan.md:23
#: src/zk-everything/zk-everything-joe/Spartan.md:24
#: src/zk-everything/zk-everything-joe/Spartan.md:25
#: src/zk-everything/zk-everything-joe/Spartan.md:26
#: src/zk-everything/zk-everything-joe/Spartan.md:110
#: src/zk-everything/zk-everything-joe/Spartan.md:117
#: src/zk-everything/zk-everything-joe/Spartan.md:118
#: src/zk-everything/zk-everything-joe/Spartan.md:122
#: src/zk-everything/zk-everything-joe/Spartan.md:126
#: src/zk-everything/zk-everything-joe/Spartan.md:135
#: src/zk-everything/zk-everything-joe/Spartan.md:136
#: src/zk-everything/zk-everything-joe/Spartan.md:142
#: src/zk-everything/zk-everything-joe/Spartan.md:143
#: src/zk-everything/zk-everything-joe/Spartan.md:147
#: src/zk-everything/zk-everything-joe/Spartan.md:148
#: src/zk-everything/zk-everything-joe/Spartan.md:154
#: src/zk-everything/zk-everything-joe/Spartan.md:155
#: src/zk-everything/zk-everything-joe/Spartan.md:166
#: src/zk-everything/zk-everything-joe/Spartan.md:195
#: src/zk-everything/zk-everything-joe/Spartan.md:200
#: src/zk-everything/zk-everything-joe/Spartan.md:207
#: src/zk-everything/zk-everything-joe/Spartan.md:212
#: src/zk-everything/zk-everything-joe/Spartan.md:217
#: src/zk-everything/zk-everything-joe/Spartan.md:222
#: src/zk-everything/zk-everything-joe/Spartan.md:232
#: src/zk-everything/zk-everything-joe/Spartan.md:240
#: src/zk-everything/zk-everything-joe/Spartan.md:252
#: src/zk-everything/zk-everything-joe/Spartan.md:263
#: src/zk-everything/zk-everything-joe/Spartan.md:274
#: src/zk-everything/zk-everything-joe/Spartan.md:334
#: src/zk-everything/zk-everything-joe/Spartan.md:339
#: src/zk-everything/zk-everything-joe/Spartan.md:343
#: src/zk-everything/zk-everything-joe/Spartan.md:344
#: src/zk-everything/zk-everything-joe/Spartan.md:346
#: src/zk-everything/zk-everything-joe/Spartan.md:347
#: src/zk-everything/zk-everything-joe/Spartan.md:350
#: src/zk-everything/zk-everything-joe/Spartan.md:353
#: src/zk-everything/zk-everything-joe/Spartan.md:355
#: src/zk-everything/zk-everything-joe/Spartan.md:359
#: src/zk-everything/zk-everything-joe/Spartan.md:360
#: src/zk-everything/zk-everything-joe/Spartan.md:361 src/Nova/SuperNova.md:35
#: src/Nova/SuperNova.md:66 src/Nova/SuperNova.md:68 src/public
#: goods/4-Proving-System.md:58
msgid "ro"
msgstr "ro"

#: src/zk-snarks/5-Pinocchio-Protocol.md:69
msgid " 的变量多项式中, 排除(exclude) necessary variable polys, 验证者 "
msgstr " 的变量多项式中, 排除(exclude) necessary variable polys, 验证者 "

#: src/zk-snarks/5-Pinocchio-Protocol.md:69
msgid " 将能够在这些变量上设置他的值，而计算检查应该仍然匹配。"
msgstr " 将能够在这些变量上设置他的值，而计算检查应该仍然匹配。"

#: src/zk-snarks/5-Pinocchio-Protocol.md:71
msgid "也就是说, 这样如果我们能够在提供给 "
msgstr "也就是说, 这样如果我们能够在提供给 "

#: src/zk-snarks/5-Pinocchio-Protocol.md:71
msgid " 的变量多项式中排除必要的一项，"
msgstr " 的变量多项式中排除必要的一项，"

#: src/zk-snarks/5-Pinocchio-Protocol.md:71
msgid " 就可以在这一项变量多项式上设置他自己的值，并且使得检查依然能够通过"
msgstr " 就可以在这一项变量多项式上设置他自己的值，并且使得检查依然能够通过"

#: src/zk-snarks/5-Pinocchio-Protocol.md:73
msgid "It is easy to achieve since the "
msgstr "It is easy to achieve since the "

#: src/zk-snarks/5-Pinocchio-Protocol.md:73
msgid ""
" is already constraining the prover in the choice of polynomials he can use "
"empolying the _α_\\-shift. Therefore those variable polynomials can be moved "
"from the proving key to the verification key while eliminating its _α_\\-s "
"and _β_ checksum counterparts. 这很容易实现，因为 "
msgstr ""
" is already constraining the prover in the choice of polynomials he can use "
"empolying the _α_\\-shift. Therefore those variable polynomials can be moved "
"from the proving key to the verification key while eliminating its _α_\\-s "
"and _β_ checksum counterparts. 这很容易实现，因为 "

#: src/zk-snarks/5-Pinocchio-Protocol.md:74
msgid "  已经限制了 "
msgstr "  已经限制了 "

#: src/zk-snarks/5-Pinocchio-Protocol.md:74
msgid ""
" 选择他可以使用 α-shift 的多项式。因此，这些可变多项式可以从 _proving key_ 转"
"移到 _verification key_ ，同时消除其 α-s 和 β 校验和对应项。"
msgstr ""
" 选择他可以使用 α-shift 的多项式。因此，这些可变多项式可以从 _proving key_ 转"
"移到 _verification key_ ，同时消除其 α-s 和 β 校验和对应项。"

#: src/zk-snarks/5-Pinocchio-Protocol.md:76
msgid "也就是说, 因为 "
msgstr "也就是说, 因为 "

#: src/zk-snarks/5-Pinocchio-Protocol.md:76
msgid " 早已能通过加入 α-shift 来限制 "
msgstr " 早已能通过加入 α-shift 来限制 "

#: src/zk-snarks/5-Pinocchio-Protocol.md:76
msgid " 选择多项式，所以这个应该很容易实现。因而当消除了它的 "
msgstr " 选择多项式，所以这个应该很容易实现。因而当消除了它的 "

#: src/zk-snarks/5-Pinocchio-Protocol.md:76
msgid ""
"  校验和对应的项，这些可变多项式就可以从 _proving key_ 转移到 _verification "
"key_ 当中去了"
msgstr ""
"  校验和对应的项，这些可变多项式就可以从 _proving key_ 转移到 _verification "
"key_ 当中去了"

#: src/zk-snarks/5-Pinocchio-Protocol.md:78
msgid "必要的协议更新为："
msgstr "必要的协议更新为："

#: src/zk-snarks/5-Pinocchio-Protocol.md:80
msgid "**Setup** (需自行对比 former protocol version)"
msgstr "**Setup** (需自行对比 former protocol version)"

#: src/zk-snarks/5-Pinocchio-Protocol.md:82
msgid "…将 "
msgstr "…将 "

#: src/zk-snarks/5-Pinocchio-Protocol.md:82
msgid " 个 variable polys 全部分为两组："
msgstr " 个 variable polys 全部分为两组："

#: src/zk-snarks/5-Pinocchio-Protocol.md:83
msgid " 项： "
msgstr " 项： "

#: src/zk-snarks/5-Pinocchio-Protocol.md:83
msgid " , 对 "
msgstr " , 对 "

#: src/zk-snarks/5-Pinocchio-Protocol.md:83
msgid "  也做同样的计算。这里对于索引 0 保留值  "
msgstr "  也做同样的计算。这里对于索引 0 保留值  "

#: src/zk-snarks/5-Pinocchio-Protocol.md:83
msgid "  (where idx-0 is reserved for the value of "
msgstr "  (where idx-0 is reserved for the value of "

#: src/zk-snarks/5-Pinocchio-Protocol.md:84
msgid " 项："
msgstr " 项："

#: src/zk-snarks/5-Pinocchio-Protocol.md:85
msgid "... 对  "
msgstr "... 对  "

#: src/zk-snarks/5-Pinocchio-Protocol.md:85
msgid "  也做同样的计算"
msgstr "  也做同样的计算"

#: src/zk-snarks/5-Pinocchio-Protocol.md:86
msgid "设置 _proving key_：  "
msgstr "设置 _proving key_：  "

#: src/zk-snarks/5-Pinocchio-Protocol.md:88
msgid "添加到 _verification key_：  "
msgstr "添加到 _verification key_：  "

#: src/zk-snarks/5-Pinocchio-Protocol.md:91
msgid "**Proving** :"
msgstr "**Proving** :"

#: src/zk-snarks/5-Pinocchio-Protocol.md:92
msgid "…为 "
msgstr "…为 "

#: src/zk-snarks/5-Pinocchio-Protocol.md:92
msgid " 的多项式计算  "
msgstr " 的多项式计算  "

#: src/zk-snarks/5-Pinocchio-Protocol.md:92
msgid " , 其中 "
msgstr " , 其中 "

#: src/zk-snarks/5-Pinocchio-Protocol.md:92
msgid "  ,  and **similarly** for  "
msgstr "  ,  and **similarly** for  "

#: src/zk-snarks/5-Pinocchio-Protocol.md:93
msgid "Provide the Proof ： "
msgstr "Provide the Proof ： "

#: src/zk-snarks/5-Pinocchio-Protocol.md:94
msgid " **Verification** : "
msgstr " **Verification** : "

#: src/zk-snarks/5-Pinocchio-Protocol.md:96
msgid "为 "
msgstr "为 "

#: src/zk-snarks/5-Pinocchio-Protocol.md:96
msgid " 的变量多项式赋值，并加 "
msgstr " 的变量多项式赋值，并加 "

#: src/zk-snarks/5-Pinocchio-Protocol.md:96
msgid "  (and add to 1) : "
msgstr "  (and add to 1) : "

#: src/zk-snarks/5-Pinocchio-Protocol.md:98
msgid "  做同样的计算 关于为啥要 +1 : 需要一种机制，让 "
msgstr "  做同样的计算 关于为啥要 +1 : 需要一种机制，让 "

#: src/zk-snarks/5-Pinocchio-Protocol.md:99
msgid " 能够控制一些变量的值，而不是由 "
msgstr " 能够控制一些变量的值，而不是由 "

#: src/zk-snarks/5-Pinocchio-Protocol.md:99
msgid ""
" 控制, 通过同态加密, 让`v_one` 就是一个始终为 1 的特殊变量 (先感性理解下"
"吧 ...)"
msgstr ""
" 控制, 通过同态加密, 让`v_one` 就是一个始终为 1 的特殊变量 (先感性理解下"
"吧 ...)"

#: src/zk-snarks/5-Pinocchio-Protocol.md:102
msgid " 对  "
msgstr " 对  "

#: src/zk-snarks/5-Pinocchio-Protocol.md:103
msgid "    和  "
msgstr "    和  "

#: src/zk-snarks/5-Pinocchio-Protocol.md:103
#: src/zk-snarks/5-Pinocchio-Protocol.md:215
msgid "  做同样的计算"
msgstr "  做同样的计算"

#: src/zk-snarks/5-Pinocchio-Protocol.md:105
#: src/zk-snarks/5-Pinocchio-Protocol.md:221
msgid "变量值一致性检查： "
msgstr "变量值一致性检查： "

#: src/zk-snarks/5-Pinocchio-Protocol.md:106
msgid "双线性性"
msgstr "双线性性"

#: src/zk-snarks/5-Pinocchio-Protocol.md:106
msgid "考虑如何规约到这种形式"
msgstr "考虑如何规约到这种形式"

#: src/zk-snarks/5-Pinocchio-Protocol.md:106
msgid "可能是这样"
msgstr "可能是这样"

#: src/zk-snarks/5-Pinocchio-Protocol.md:106
msgid "不知道对不对"
msgstr "不知道对不对"

#: src/zk-snarks/5-Pinocchio-Protocol.md:106
msgid "协议的变量值一致性得到检查"
msgstr "协议的变量值一致性得到检查"

#: src/zk-snarks/5-Pinocchio-Protocol.md:111
msgid "注意：根据协议（**单个变量操作数多项式** 的章节）的性质，由多项式 "
msgstr "注意：根据协议（**单个变量操作数多项式** 的章节）的性质，由多项式 "

#: src/zk-snarks/5-Pinocchio-Protocol.md:111
msgid "  表示的值 "
msgstr "  表示的值 "

#: src/zk-snarks/5-Pinocchio-Protocol.md:111
msgid " 已在相应的运算中具备了合适的值，因此不需要再赋值了"
msgstr " 已在相应的运算中具备了合适的值，因此不需要再赋值了"

#: src/zk-snarks/5-Pinocchio-Protocol.md:113
msgid "注意："
msgstr "注意："

#: src/zk-snarks/5-Pinocchio-Protocol.md:113
msgid " 将不得不在验证步骤中做额外的工作，使得赋值的变量成比例。"
msgstr " 将不得不在验证步骤中做额外的工作，使得赋值的变量成比例。"

#: src/zk-snarks/5-Pinocchio-Protocol.md:115
msgid "**这实际上是把一些变量从 "
msgstr "**这实际上是把一些变量从 "

#: src/zk-snarks/5-Pinocchio-Protocol.md:115
msgid " 手中拿到 "
msgstr " 手中拿到 "

#: src/zk-snarks/5-Pinocchio-Protocol.md:115
msgid " 的手中，并同时保持等式相等。** 因而只有当 "
msgstr " 的手中，并同时保持等式相等。** 因而只有当 "

#: src/zk-snarks/5-Pinocchio-Protocol.md:115
msgid " 的输入中使用相同值的时候， _有效计算检查_ 才依然成立。"
msgstr " 的输入中使用相同值的时候， _有效计算检查_ 才依然成立。"

#: src/zk-snarks/5-Pinocchio-Protocol.md:117
msgid ""
"1 这个值相当重要，它能够通过与任意一个常数项相乘来生成这个值（从选择的有限域"
"上），例如，用 123 去乘以 _a_： "
msgstr ""
"1 这个值相当重要，它能够通过与任意一个常数项相乘来生成这个值（从选择的有限域"
"上），例如，用 123 去乘以 _a_： "

#: src/zk-snarks/5-Pinocchio-Protocol.md:118
msgid "123"
msgstr "123"

#: src/zk-snarks/5-Pinocchio-Protocol.md:119
msgid "even@安比实验室:  这里将原本由 "
msgstr "even@安比实验室:  这里将原本由 "

#: src/zk-snarks/5-Pinocchio-Protocol.md:119
msgid " 赋值的一些变量改为由拿到 "
msgstr " 赋值的一些变量改为由拿到 "

#: src/zk-snarks/5-Pinocchio-Protocol.md:119
msgid " 赋值，使得 "
msgstr " 赋值，使得 "

#: src/zk-snarks/5-Pinocchio-Protocol.md:119
msgid " 不得不与 "
msgstr " 不得不与 "

#: src/zk-snarks/5-Pinocchio-Protocol.md:119
msgid " 保持相同的输入。这不仅解决了 "
msgstr " 保持相同的输入。这不仅解决了 "

#: src/zk-snarks/5-Pinocchio-Protocol.md:119
msgid " 参数输入的问题，也间接解决了常数赋值的问题"
msgstr " 参数输入的问题，也间接解决了常数赋值的问题"

#: src/zk-snarks/5-Pinocchio-Protocol.md:122
msgid "Zero-Knowledge Computation"
msgstr "Zero-Knowledge Computation"

#: src/zk-snarks/5-Pinocchio-Protocol.md:124
msgid "Zero-Knowledge Proof of Computation"
msgstr "Zero-Knowledge Proof of Computation"

#: src/zk-snarks/5-Pinocchio-Protocol.md:126
msgid ""
"(计算的零知识证明)  自从引入通用计算协议（**计算的证明**这一章节），我们一直"
"放弃了 _零知识_ 的性质，这是为了让协议的改进变得更简单。至此，我们已经构建了"
"可验证的计算协议。"
msgstr ""
"(计算的零知识证明)  自从引入通用计算协议（**计算的证明**这一章节），我们一直"
"放弃了 _零知识_ 的性质，这是为了让协议的改进变得更简单。至此，我们已经构建了"
"可验证的计算协议。"

#: src/zk-snarks/5-Pinocchio-Protocol.md:128
msgid ""
"以前我们使用随机数 δ-转换来构造多项式的“零知识” 证明，这种方法能够使得证明与"
"随机数无法区分（**零知识**这一章节）： "
msgstr ""
"以前我们使用随机数 δ-转换来构造多项式的“零知识” 证明，这种方法能够使得证明与"
"随机数无法区分（**零知识**这一章节）： "

#: src/zk-snarks/5-Pinocchio-Protocol.md:129
msgid " 通过计算我们证明了： "
msgstr " 通过计算我们证明了： "

#: src/zk-snarks/5-Pinocchio-Protocol.md:131
msgid " 尽管我们可以通过用相同 δ × 多项式的方法来调整解决方案，即提供随机值 "
msgstr " 尽管我们可以通过用相同 δ × 多项式的方法来调整解决方案，即提供随机值 "

#: src/zk-snarks/5-Pinocchio-Protocol.md:132
msgid " ，这依然能够通过 _有效计算检查_ 来满足配对验证： "
msgstr " ，这依然能够通过 _有效计算检查_ 来满足配对验证： "

#: src/zk-snarks/5-Pinocchio-Protocol.md:133
msgid " 但是问题是使用相同的  "
msgstr " 但是问题是使用相同的  "

#: src/zk-snarks/5-Pinocchio-Protocol.md:134
msgid "  会妨碍**安全性**，因为我们在证明中分别用了以下这些值："
msgstr "  会妨碍**安全性**，因为我们在证明中分别用了以下这些值："

#: src/zk-snarks/5-Pinocchio-Protocol.md:135
msgid ""
"其他人可以很容易得辨认出两个不同的多项式值是否相同，以此来获取一些知识，即："
msgstr ""
"其他人可以很容易得辨认出两个不同的多项式值是否相同，以此来获取一些知识，即："

#: src/zk-snarks/5-Pinocchio-Protocol.md:136
msgid " 的不同值之间潜在的微小关系可能会通过暴力破解来区分开来，例如如果 "
msgstr " 的不同值之间潜在的微小关系可能会通过暴力破解来区分开来，例如如果 "

#: src/zk-snarks/5-Pinocchio-Protocol.md:136
msgid " ，就可以对 "
msgstr " ，就可以对 "

#: src/zk-snarks/5-Pinocchio-Protocol.md:136
msgid "  取值反复校验  "
msgstr "  取值反复校验  "

#: src/zk-snarks/5-Pinocchio-Protocol.md:136
msgid ""
"，只需要执行 5 步就可以揭示出两者 5 倍区别的关系。同样的暴力破解也可以用在破"
"解加密值的加法运算上，如： "
msgstr ""
"，只需要执行 5 步就可以揭示出两者 5 倍区别的关系。同样的暴力破解也可以用在破"
"解加密值的加法运算上，如： "

#: src/zk-snarks/5-Pinocchio-Protocol.md:137
msgid "证明元素之间的其它关系也可能会被发现，例如，如果 "
msgstr "证明元素之间的其它关系也可能会被发现，例如，如果 "

#: src/zk-snarks/5-Pinocchio-Protocol.md:137
msgid " ，那么也就表示 "
msgstr " ，那么也就表示 "

#: src/zk-snarks/5-Pinocchio-Protocol.md:139
msgid ""
"注意：**一致性检查优化** 使得挖掘数据关系变得更加困难了，但是依然能够发现一些"
"关系 ，且不说 "
msgstr ""
"注意：**一致性检查优化** 使得挖掘数据关系变得更加困难了，但是依然能够发现一些"
"关系 ，且不说 "

#: src/zk-snarks/5-Pinocchio-Protocol.md:139
msgid " 可以选择特定 "
msgstr " 可以选择特定 "

#: src/zk-snarks/5-Pinocchio-Protocol.md:139
msgid " 来为揭示知识提供便利（只要这不是一个多样化的 "
msgstr " 来为揭示知识提供便利（只要这不是一个多样化的 "

#: src/zk-snarks/5-Pinocchio-Protocol.md:141
msgid "最终，我们需要对每一个多项式的值使用不同的随机数  "
msgstr "最终，我们需要对每一个多项式的值使用不同的随机数  "

#: src/zk-snarks/5-Pinocchio-Protocol.md:141
msgid " ，例如： "
msgstr " ，例如： "

#: src/zk-snarks/5-Pinocchio-Protocol.md:142
#: src/zk-snarks/5-Pinocchio-Protocol.md:143
#: src/zk-snarks/5-Pinocchio-Protocol.md:144
#: src/zk-snarks/5-Pinocchio-Protocol.md:145
#: src/zk-snarks/5-Pinocchio-Protocol.md:147
#: src/zk-snarks/5-Pinocchio-Protocol.md:151
#: src/zk-snarks/5-Pinocchio-Protocol.md:152
#: src/zk-snarks/5-Pinocchio-Protocol.md:154
#: src/zk-snarks/5-Pinocchio-Protocol.md:156
#: src/zk-snarks/5-Pinocchio-Protocol.md:157
#: src/zk-snarks/5-Pinocchio-Protocol.md:160
#: src/zk-snarks/5-Pinocchio-Protocol.md:163
#: src/zk-snarks/5-Pinocchio-Protocol.md:170
msgid "Δ"
msgstr "Δ"

#: src/zk-snarks/5-Pinocchio-Protocol.md:142
msgid " (?) "
msgstr " (?) "

#: src/zk-snarks/5-Pinocchio-Protocol.md:142
msgid " 为了解决等式右边不相等的问题，我们不必改变协议，只要修改证明的值  "
msgstr " 为了解决等式右边不相等的问题，我们不必改变协议，只要修改证明的值  "

#: src/zk-snarks/5-Pinocchio-Protocol.md:143
msgid "  即可。 这里 Delta ( "
msgstr "  即可。 这里 Delta ( "

#: src/zk-snarks/5-Pinocchio-Protocol.md:143
msgid " ) 代表为了平衡方程另一侧的随机性而对 "
msgstr " ) 代表为了平衡方程另一侧的随机性而对 "

#: src/zk-snarks/5-Pinocchio-Protocol.md:143
msgid ""
" 做的处理，?⃝ 代表 `乘法运算`或者 `加法运算`（这个反过来也适应了除法和减法）。"
msgstr ""
" 做的处理，?⃝ 代表 `乘法运算`或者 `加法运算`（这个反过来也适应了除法和减法）。"

#: src/zk-snarks/5-Pinocchio-Protocol.md:144
msgid "如果我们选择用乘法 (?⃝ = ×) 来计算 "
msgstr "如果我们选择用乘法 (?⃝ = ×) 来计算 "

#: src/zk-snarks/5-Pinocchio-Protocol.md:144
msgid " ，也就意味着不太可能有较大的概率可以找到一个 "
msgstr " ，也就意味着不太可能有较大的概率可以找到一个 "

#: src/zk-snarks/5-Pinocchio-Protocol.md:144
msgid " ，因为存在随机性： "
msgstr " ，因为存在随机性： "

#: src/zk-snarks/5-Pinocchio-Protocol.md:145
msgid " 设置 "
msgstr " 设置 "

#: src/zk-snarks/5-Pinocchio-Protocol.md:146
msgid "  ，于是就变成了： "
msgstr "  ，于是就变成了： "

#: src/zk-snarks/5-Pinocchio-Protocol.md:147
msgid ""
" 但是如前文所述，这个妨碍了零知识的性质，更重要的是这个结构也不再适合 "
"verifier 的输入多项式，因为它们必须是 "
msgstr ""
" 但是如前文所述，这个妨碍了零知识的性质，更重要的是这个结构也不再适合 "
"verifier 的输入多项式，因为它们必须是 "

#: src/zk-snarks/5-Pinocchio-Protocol.md:148
msgid "δs"
msgstr "δs"

#: src/zk-snarks/5-Pinocchio-Protocol.md:148
msgid " 相应的倍数，这就需要额外的交互了"
msgstr " 相应的倍数，这就需要额外的交互了"

#: src/zk-snarks/5-Pinocchio-Protocol.md:150
msgid "我们可以尝试把随机数加到变量上： "
msgstr "我们可以尝试把随机数加到变量上： "

#: src/zk-snarks/5-Pinocchio-Protocol.md:154
msgid "但是随机数是不可除尽的。尽管我们可以用 "
msgstr "但是随机数是不可除尽的。尽管我们可以用 "

#: src/zk-snarks/5-Pinocchio-Protocol.md:154
msgid " 去乘以每一个 "
msgstr " 去乘以每一个 "

#: src/zk-snarks/5-Pinocchio-Protocol.md:154
msgid "  ，但由于我们已经用了 "
msgstr "  ，但由于我们已经用了 "

#: src/zk-snarks/5-Pinocchio-Protocol.md:154
msgid "  乘以 "
msgstr "  乘以 "

#: src/zk-snarks/5-Pinocchio-Protocol.md:154
msgid " ，  "
msgstr " ，  "

#: src/zk-snarks/5-Pinocchio-Protocol.md:154
msgid "  是组成加密结果的一部分（即 "
msgstr "  是组成加密结果的一部分（即 "

#: src/zk-snarks/5-Pinocchio-Protocol.md:154
msgid ""
" 相等），因此在没有使用配对（它的结果在另一个数值空间内）的情况下是不能计算"
"出 "
msgstr ""
" 相等），因此在没有使用配对（它的结果在另一个数值空间内）的情况下是不能计算"
"出 "

#: src/zk-snarks/5-Pinocchio-Protocol.md:154
msgid " 的。同样也不能使用 "
msgstr " 的。同样也不能使用 "

#: src/zk-snarks/5-Pinocchio-Protocol.md:154
msgid " 的幂（from "
msgstr " 的幂（from "

#: src/zk-snarks/5-Pinocchio-Protocol.md:154
msgid "  to "
msgstr "  to "

#: src/zk-snarks/5-Pinocchio-Protocol.md:154
msgid " ）的加密值对 "
msgstr " ）的加密值对 "

#: src/zk-snarks/5-Pinocchio-Protocol.md:154
msgid "  进行加密计算， "
msgstr "  进行加密计算， "

#: src/zk-snarks/5-Pinocchio-Protocol.md:154
msgid "  的阶将达到 "
msgstr "  的阶将达到 "

#: src/zk-snarks/5-Pinocchio-Protocol.md:154
msgid "  并且，基于上述同样的原因也无法计算这个随机操作数多项式的值： "
msgstr "  并且，基于上述同样的原因也无法计算这个随机操作数多项式的值： "

#: src/zk-snarks/5-Pinocchio-Protocol.md:155
msgid " 于是我们应该用加法(?⃝ = +)来使用 "
msgstr " 于是我们应该用加法(?⃝ = +)来使用 "

#: src/zk-snarks/5-Pinocchio-Protocol.md:156
msgid " ，因为它可以同态地计算。 "
msgstr " ，因为它可以同态地计算。 "

#: src/zk-snarks/5-Pinocchio-Protocol.md:159
msgid "分子中的每一项都是  "
msgstr "分子中的每一项都是  "

#: src/zk-snarks/5-Pinocchio-Protocol.md:159
msgid "  的倍数，因而我们可以将其与 "
msgstr "  的倍数，因而我们可以将其与 "

#: src/zk-snarks/5-Pinocchio-Protocol.md:159
msgid "  相乘使它可以被分母整除： "
msgstr "  相乘使它可以被分母整除： "

#: src/zk-snarks/5-Pinocchio-Protocol.md:162
msgid "这样就可以在加密的空间中进行“有效计算检查”了： "
msgstr "这样就可以在加密的空间中进行“有效计算检查”了： "

#: src/zk-snarks/5-Pinocchio-Protocol.md:163
msgid " 于是既隐藏了加密值，又使得等式可以通过 _有效计算_ 的检查 "
msgstr " 于是既隐藏了加密值，又使得等式可以通过 _有效计算_ 的检查 "

#: src/zk-snarks/5-Pinocchio-Protocol.md:165
msgid " 这个结构就是**统计学上的零知识** 因为增加了 "
msgstr " 这个结构就是**统计学上的零知识** 因为增加了 "

#: src/zk-snarks/5-Pinocchio-Protocol.md:166
msgid " 的均匀随机倍数（参见 \\[Gen+12\\] 中的定理 13）"
msgstr " 的均匀随机倍数（参见 \\[Gen+12\\] 中的定理 13）"

#: src/zk-snarks/5-Pinocchio-Protocol.md:168
msgid "注意：这种方法和 "
msgstr "注意：这种方法和 "

#: src/zk-snarks/5-Pinocchio-Protocol.md:168
msgid " 的操作数也是一致的，即："
msgstr " 的操作数也是一致的，即："

#: src/zk-snarks/5-Pinocchio-Protocol.md:170
msgid "因而当且仅当 "
msgstr "因而当且仅当 "

#: src/zk-snarks/5-Pinocchio-Protocol.md:170
msgid " 使用了 "
msgstr " 使用了 "

#: src/zk-snarks/5-Pinocchio-Protocol.md:170
msgid " 的值来构造证明(即， "
msgstr " 的值来构造证明(即， "

#: src/zk-snarks/5-Pinocchio-Protocol.md:170
msgid " ，这个有效计算的检查依然是成立的，更多的细节看下一部分"
msgstr " ，这个有效计算的检查依然是成立的，更多的细节看下一部分"

#: src/zk-snarks/5-Pinocchio-Protocol.md:172
msgid ""
"为了使得 “变量多项式限制” 和 “变量值一致性”检查与 _零知识_ 的修改一致，就有必"
"要去增加以下的参数到 _proving key_ 中： "
msgstr ""
"为了使得 “变量多项式限制” 和 “变量值一致性”检查与 _零知识_ 的修改一致，就有必"
"要去增加以下的参数到 _proving key_ 中： "

#: src/zk-snarks/5-Pinocchio-Protocol.md:173
#: src/zk-snarks/5-Pinocchio-Protocol.md:192
msgid "βt"
msgstr "βt"

#: src/zk-snarks/5-Pinocchio-Protocol.md:173
msgid ""
" 非常奇怪的是最初的 Pinocchio 协议\\[Par+13\\]主要关注可验证的计算，而较少涉"
"及 _零知识_ 性质，这其实只需要一点点小修改，这个几乎是没有什么成本的。"
msgstr ""
" 非常奇怪的是最初的 Pinocchio 协议\\[Par+13\\]主要关注可验证的计算，而较少涉"
"及 _零知识_ 性质，这其实只需要一点点小修改，这个几乎是没有什么成本的。"

#: src/zk-snarks/5-Pinocchio-Protocol.md:176
msgid ""
"even@安比实验室: 与前文中的零知方案不同，这里通过相加而不是相乘的方式来确保 "
"prover 知识的零知性。"
msgstr ""
"even@安比实验室: 与前文中的零知方案不同，这里通过相加而不是相乘的方式来确保 "
"prover 知识的零知性。"

#: src/zk-snarks/5-Pinocchio-Protocol.md:178
msgid ""
"Pinocchio 协议是针对 GGPR 论文的改进，在3.1节中也提到了实现零知识只需要沿用 "
"GGPR 论文的方法即可，并不是这篇论文的贡献。另外，Pinocchio 协议论文侧重工程实"
"践，在2013年时，零知识证明还并没有得到应用。真正的应用还是自从 ZCash 起始"
msgstr ""
"Pinocchio 协议是针对 GGPR 论文的改进，在3.1节中也提到了实现零知识只需要沿用 "
"GGPR 论文的方法即可，并不是这篇论文的贡献。另外，Pinocchio 协议论文侧重工程实"
"践，在2013年时，零知识证明还并没有得到应用。真正的应用还是自从 ZCash 起始"

#: src/zk-snarks/5-Pinocchio-Protocol.md:181
msgid "zk-SNARK 协议"
msgstr "zk-SNARK 协议"

#: src/zk-snarks/5-Pinocchio-Protocol.md:183
msgid ""
"在这一步步的改进之后，我们得到了最终版本的 zkSNARK，又名 Pinocchio \\[Par + "
"13\\]，协议 （zero knowledge is Optional, 并用紫色标注出来了），就是："
msgstr ""
"在这一步步的改进之后，我们得到了最终版本的 zkSNARK，又名 Pinocchio \\[Par + "
"13\\]，协议 （zero knowledge is Optional, 并用紫色标注出来了），就是："

#: src/zk-snarks/5-Pinocchio-Protocol.md:186
msgid "选择生成元 "
msgstr "选择生成元 "

#: src/zk-snarks/5-Pinocchio-Protocol.md:186
msgid "  和加密配对  "
msgstr "  和加密配对  "

#: src/zk-snarks/5-Pinocchio-Protocol.md:187
msgid "将变量总数为 "
msgstr "将变量总数为 "

#: src/zk-snarks/5-Pinocchio-Protocol.md:187
msgid " , 其中输入/输出变量数位 "
msgstr " , 其中输入/输出变量数位 "

#: src/zk-snarks/5-Pinocchio-Protocol.md:187
msgid " 的函数  "
msgstr " 的函数  "

#: src/zk-snarks/5-Pinocchio-Protocol.md:187
msgid " ，转换为阶数为 "
msgstr " ，转换为阶数为 "

#: src/zk-snarks/5-Pinocchio-Protocol.md:187
msgid " 大小为 "
msgstr " 大小为 "

#: src/zk-snarks/5-Pinocchio-Protocol.md:187
msgid "  的多项式形式（QAP）  "
msgstr "  的多项式形式（QAP）  "

#: src/zk-snarks/5-Pinocchio-Protocol.md:190
msgid "设置 "
msgstr "设置 "

#: src/zk-snarks/5-Pinocchio-Protocol.md:190
msgid "   和操作数生成元 "
msgstr "   和操作数生成元 "

#: src/zk-snarks/5-Pinocchio-Protocol.md:191
msgid "设置 _proving key_： "
msgstr "设置 _proving key_： "

#: src/zk-snarks/5-Pinocchio-Protocol.md:192
msgid "({"
msgstr "({"

#: src/zk-snarks/5-Pinocchio-Protocol.md:194
msgid "设置 _verfication key_： "
msgstr "设置 _verfication key_： "

#: src/zk-snarks/5-Pinocchio-Protocol.md:198
msgid "代入输入值  "
msgstr "代入输入值  "

#: src/zk-snarks/5-Pinocchio-Protocol.md:198
msgid " ，执行 "
msgstr " ，执行 "

#: src/zk-snarks/5-Pinocchio-Protocol.md:198
msgid " 计算获取所有的中间变量值  "
msgstr " 计算获取所有的中间变量值  "

#: src/zk-snarks/5-Pinocchio-Protocol.md:199
msgid "把所有未加密的变量多项式赋值给 "
msgstr "把所有未加密的变量多项式赋值给 "

#: src/zk-snarks/5-Pinocchio-Protocol.md:199
msgid " ，并对 "
msgstr " ，并对 "

#: src/zk-snarks/5-Pinocchio-Protocol.md:199
msgid " 做同样的计算"
msgstr " 做同样的计算"

#: src/zk-snarks/5-Pinocchio-Protocol.md:203
msgid "将 prover 的变量值赋值给加密的可变多项式  "
msgstr "将 prover 的变量值赋值给加密的可变多项式  "

#: src/zk-snarks/5-Pinocchio-Protocol.md:204
msgid "并进行零知识的"
msgstr "并进行零知识的"

#: src/zk-snarks/5-Pinocchio-Protocol.md:204
msgid "转换"
msgstr "转换"

#: src/zk-snarks/5-Pinocchio-Protocol.md:205
msgid "再用同样的方式计算 "
msgstr "再用同样的方式计算 "

#: src/zk-snarks/5-Pinocchio-Protocol.md:206
msgid "为变量值一致性多项式赋值 :  "
msgstr "为变量值一致性多项式赋值 :  "

#: src/zk-snarks/5-Pinocchio-Protocol.md:208
msgid "计算证明  "
msgstr "计算证明  "

#: src/zk-snarks/5-Pinocchio-Protocol.md:212
msgid "解析提供的证明为 "
msgstr "解析提供的证明为 "

#: src/zk-snarks/5-Pinocchio-Protocol.md:213
msgid "将 `输入/输出` 赋值给 verifier 的加密多项式并加 1 ： "
msgstr "将 `输入/输出` 赋值给 verifier 的加密多项式并加 1 ： "

#: src/zk-snarks/5-Pinocchio-Protocol.md:214
#: src/zk-snarks/5-Pinocchio-Protocol.md:218
msgid " 并对 "
msgstr " 并对 "

#: src/zk-snarks/5-Pinocchio-Protocol.md:217
msgid "可变多项式约束检查： "
msgstr "可变多项式约束检查： "

#: src/zk-snarks/5-Pinocchio-Protocol.md:219
msgid "   和  "
msgstr "   和  "

#: src/zk-snarks/5-Pinocchio-Protocol.md:224
msgid "有效的计算检查： "
msgstr "有效的计算检查： "

#: src/zk-snarks/5-Pinocchio-Protocol.md:227
msgid "结论"
msgstr "结论"

#: src/zk-snarks/5-Pinocchio-Protocol.md:228
msgid "我们最终完成了一个允许证明计算的有效协议："
msgstr "我们最终完成了一个允许证明计算的有效协议："

#: src/zk-snarks/5-Pinocchio-Protocol.md:230
msgid "简明 (Succinctly) —— 独立于计算量，证明是恒定的，小尺寸的"
msgstr "简明 (Succinctly) —— 独立于计算量，证明是恒定的，小尺寸的"

#: src/zk-snarks/5-Pinocchio-Protocol.md:231
msgid ""
"非交互性 (Non-interactive) —— 证明只要一经计算就可以在不直接与 prover 交互的"
"前提下使任意数量的 verifier 确信"
msgstr ""
"非交互性 (Non-interactive) —— 证明只要一经计算就可以在不直接与 prover 交互的"
"前提下使任意数量的 verifier 确信"

#: src/zk-snarks/5-Pinocchio-Protocol.md:232
msgid ""
"可论证的知识 (with Argument of Knowledge) —— 对于陈述是正确的这点有不可忽略的"
"概率，即无法构造假证据；并且 prover 知道正确陈述的对应值（即：证据），例如，"
"如果陈述是 “B 是 sha256(a) 的结果” 那么就说明 prover 知道一些值 a 能够使得 B "
"= sha256(a) 成立，因为 B 只能够通过 a 的知识计算出来，换句话说就是无法通过 B "
"来反算出 a（假定 a 的熵足够）。"
msgstr ""
"可论证的知识 (with Argument of Knowledge) —— 对于陈述是正确的这点有不可忽略的"
"概率，即无法构造假证据；并且 prover 知道正确陈述的对应值（即：证据），例如，"
"如果陈述是 “B 是 sha256(a) 的结果” 那么就说明 prover 知道一些值 a 能够使得 B "
"= sha256(a) 成立，因为 B 只能够通过 a 的知识计算出来，换句话说就是无法通过 B "
"来反算出 a（假定 a 的熵足够）。"

#: src/zk-snarks/5-Pinocchio-Protocol.md:233
msgid ""
"陈述有不可忽略的概率是正确的  (even@安比实验室: 这里指 Soundness 可靠性)，"
"即，构造假证据是不可行的"
msgstr ""
"陈述有不可忽略的概率是正确的  (even@安比实验室: 这里指 Soundness 可靠性)，"
"即，构造假证据是不可行的"

#: src/zk-snarks/5-Pinocchio-Protocol.md:234
msgid ""
"_零知识_ ( zero-knowledge) —— 很“难”从证明中提取任何知识，即，它与随机数无法"
"区分。"
msgstr ""
"_零知识_ ( zero-knowledge) —— 很“难”从证明中提取任何知识，即，它与随机数无法"
"区分。"

#: src/zk-snarks/5-Pinocchio-Protocol.md:236
msgid ""
"even@安比实验室: 所谓 Argument——论证，区别于 Proof —— 证明。 Pinocchio 协议"
"是 Argument 而非 Proof。这是因为 Pinocchio 的可靠性是 Computational "
"Soundness，Statistical ZK，这一类的证明系统被称为 Argument。所谓的 "
"Computational Soundness 暗含了这样的事实：如果 Prover 计算能力足够强大的话，"
"可以破坏可靠性。"
msgstr ""
"even@安比实验室: 所谓 Argument——论证，区别于 Proof —— 证明。 Pinocchio 协议"
"是 Argument 而非 Proof。这是因为 Pinocchio 的可靠性是 Computational "
"Soundness，Statistical ZK，这一类的证明系统被称为 Argument。所谓的 "
"Computational Soundness 暗含了这样的事实：如果 Prover 计算能力足够强大的话，"
"可以破坏可靠性。"

#: src/zk-snarks/5-Pinocchio-Protocol.md:239
msgid ""
"基于多项式的特殊性质，模运算，同态加密，椭圆曲线密码学，加密配对和发明者的聪"
"明才智才使得这个协议得以实现。"
msgstr ""
"基于多项式的特殊性质，模运算，同态加密，椭圆曲线密码学，加密配对和发明者的聪"
"明才智才使得这个协议得以实现。"

#: src/zk-snarks/5-Pinocchio-Protocol.md:241
msgid ""
"这个协议证明了一个特殊有限执行机制的计算，即在一次运算中可以将几乎任意数量的"
"变量加在一起但是只能执行一次乘法，因而就有机会优化程序以有效地利用这种特性的"
"同时也使用这个结构最大限度地减少计算次数。"
msgstr ""
"这个协议证明了一个特殊有限执行机制的计算，即在一次运算中可以将几乎任意数量的"
"变量加在一起但是只能执行一次乘法，因而就有机会优化程序以有效地利用这种特性的"
"同时也使用这个结构最大限度地减少计算次数。"

#: src/zk-snarks/5-Pinocchio-Protocol.md:243
msgid ""
"为了验证一个证明， **verifier 并不需要知道所有的秘密数据，这一点很关键**，这"
"就使得任何人都可以以非交互式方式发布和使用正确构造的 _verification key_。这一"
"点与只能让一个参与者确信证明的“指定 verifier”方案相反，因而它的信任是不可转移"
"的。在 _zkSNARK_ 中，如果不可信或由单方生成密钥对，则可以实现这个属性。"
msgstr ""
"为了验证一个证明， **verifier 并不需要知道所有的秘密数据，这一点很关键**，这"
"就使得任何人都可以以非交互式方式发布和使用正确构造的 _verification key_。这一"
"点与只能让一个参与者确信证明的“指定 verifier”方案相反，因而它的信任是不可转移"
"的。在 _zkSNARK_ 中，如果不可信或由单方生成密钥对，则可以实现这个属性。"

#: src/zk-snarks/5-Pinocchio-Protocol.md:245
msgid ""
"零知识证明构造领域正在不断发展，包括引入了优化（\\[BCTV13, Gro16, GM17\\]），"
"改进例如可更新的 _proving key_ 和 _verification key_（\\[Gro+18\\]），以及新"
"的构造方法（Bulletproofs \\[Bün+17\\], ZK-STARK \\[Ben+18\\], Sonic "
"\\[Mal+19\\]）"
msgstr ""
"零知识证明构造领域正在不断发展，包括引入了优化（\\[BCTV13, Gro16, GM17\\]），"
"改进例如可更新的 _proving key_ 和 _verification key_（\\[Gro+18\\]），以及新"
"的构造方法（Bulletproofs \\[Bün+17\\], ZK-STARK \\[Ben+18\\], Sonic "
"\\[Mal+19\\]）"

#: src/halo2/halo2.md:5
msgid "**第一周:**"
msgstr "**第一周:**"

#: src/halo2/halo2.md:6
msgid ""
"课程学习资料: [理解 PLONK 系列](https://learn.z2o-k7e.world/plonk-intro-cn/"
"plonk-intro.html) | [halo2 Introduction](https://learn.0xparc.org/materials/"
"halo2/learning-group-1/introduction) "
msgstr ""
"课程学习资料: [理解 PLONK 系列](https://learn.z2o-k7e.world/plonk-intro-cn/"
"plonk-intro.html) | [halo2 Introduction](https://learn.0xparc.org/materials/"
"halo2/learning-group-1/introduction) "

#: src/halo2/halo2.md:7
msgid ""
"课程学习目标: Understanding and building user-facing applications with "
"`Halo2` and `PLONKish` proving systems"
msgstr ""
"课程学习目标: Understanding and building user-facing applications with "
"`Halo2` and `PLONKish` proving systems"

#: src/halo2/halo2.md:9
msgid "**第二周:**"
msgstr "**第二周:**"

#: src/halo2/halo2.md:10
msgid "课程学习资料:"
msgstr "课程学习资料:"

#: src/halo2/halo2.md:11
msgid ""
"[Halo2 API & Building a Basic Fibonacci Circuit (Part 1)](https://"
"learn.0xparc.org/materials/halo2/learning-group-1/halo2-api)"
msgstr ""
"[Halo2 API & Building a Basic Fibonacci Circuit (Part 1)](https://"
"learn.0xparc.org/materials/halo2/learning-group-1/halo2-api)"

#: src/halo2/halo2.md:12
msgid ""
"[Halo2 API & Building a Basic Fibonacci Circuit (Part 2)](https://"
"learn.0xparc.org/materials/halo2/learning-group-1/halo2-api-continued)"
msgstr ""
"[Halo2 API & Building a Basic Fibonacci Circuit (Part 2)](https://"
"learn.0xparc.org/materials/halo2/learning-group-1/halo2-api-continued)"

#: src/halo2/halo2.md:13
msgid "课程学习目标:"
msgstr "课程学习目标:"

#: src/halo2/halo2.md:14
msgid ""
"理解 halo2 中 Circuit、region、Layouter、custom gate、constraints 等概念及其 "
"API 代码 represent."
msgstr ""
"理解 halo2 中 Circuit、region、Layouter、custom gate、constraints 等概念及其 "
"API 代码 represent."

#: src/halo2/halo2.md:15
msgid "能够理解 Fibonacci 示例和 isZero 示例的电路构建流程"
msgstr "能够理解 Fibonacci 示例和 isZero 示例的电路构建流程"

#: src/halo2/halo2.md:17
msgid "**第三周**"
msgstr "**第三周**"

#: src/halo2/halo2.md:19
msgid "\\[editing...\\]"
msgstr "\\[editing...\\]"

#: src/halo2/halo2.md:22
msgid "**前置学习 (PLONK & Rust)：**"
msgstr "**前置学习 (PLONK & Rust)：**"

#: src/halo2/halo2.md:24
msgid ""
"[PLONK Tutorials](https://learn.z2o-k7e.world/plonk-intro-cn/plonk-"
"arithmetization.html) &  [Lookup Gates @secbit](https://learn.z2o-k7e.world/"
"plonk-intro-cn/plonk-lookup.html)"
msgstr ""
"[PLONK Tutorials](https://learn.z2o-k7e.world/plonk-intro-cn/plonk-"
"arithmetization.html) &  [Lookup Gates @secbit](https://learn.z2o-k7e.world/"
"plonk-intro-cn/plonk-lookup.html)"

#: src/halo2/halo2.md:25 src/halo2/tmp/halo2-learning-materials.md:15
msgid "[Rust 圣经](https://course.rs/about-book.html)"
msgstr "[Rust 圣经](https://course.rs/about-book.html)"

#: src/halo2/halo2.md:27
msgid "**必备学习材料：**"
msgstr "**必备学习材料：**"

#: src/halo2/halo2.md:29
msgid "[0xPARC Halo2](https://learn.0xparc.org/halo2)  是主要参考的视频课程"
msgstr "[0xPARC Halo2](https://learn.0xparc.org/halo2)  是主要参考的视频课程"

#: src/halo2/halo2.md:30
msgid ""
"[参考代码](https://github.com/zkp-co-learning/halo2-step-by-step/tree/"
"main)   是对课程 Reference 代码必要的优化和版本升级"
msgstr ""
"[参考代码](https://github.com/zkp-co-learning/halo2-step-by-step/tree/"
"main)   是对课程 Reference 代码必要的优化和版本升级"

#: src/halo2/halo2.md:31
msgid ""
"[参考文档: z2o-k7e-Halo2](https://learn.z2o-k7e.world/halo2/chap-1/index."
"html)   是部分电路图解 & 对代码更细致的阐释(仍更新中...) [^1]"
msgstr ""
"[参考文档: z2o-k7e-Halo2](https://learn.z2o-k7e.world/halo2/chap-1/index."
"html)   是部分电路图解 & 对代码更细致的阐释(仍更新中...) [^1]"

#: src/halo2/halo2.md:32
msgid "其他必读参考："
msgstr "其他必读参考："

#: src/halo2/halo2.md:33
msgid ""
"[zcash halo2 book](https://zcash.github.io/halo2/) / [github](https://github."
"com/zcash/halo2/blob/main/book/)  理论内容偏多，可以当做字典反复查看"
msgstr ""
"[zcash halo2 book](https://zcash.github.io/halo2/) / [github](https://github."
"com/zcash/halo2/blob/main/book/)  理论内容偏多，可以当做字典反复查看"

#: src/halo2/halo2.md:34
msgid ""
"[zcash halo2 book 中文翻译](https://trapdoor-tech.github.io/halo2-book-"
"chinese/) / [github](https://trapdoor-tech.github.io/halo2-book-chinese/)"
msgstr ""
"[zcash halo2 book 中文翻译](https://trapdoor-tech.github.io/halo2-book-"
"chinese/) / [github](https://trapdoor-tech.github.io/halo2-book-chinese/)"

#: src/halo2/halo2.md:39
msgid "**其他参考资源:**"
msgstr "**其他参考资源:**"

#: src/halo2/halo2.md:40
msgid "[halo2.club](https://halo2.club)"
msgstr "[halo2.club](https://halo2.club)"

#: src/halo2/halo2.md:41
msgid "[Awesome halo2](https://github.com/adria0/awesome-halo2)"
msgstr "[Awesome halo2](https://github.com/adria0/awesome-halo2)"

#: src/halo2/halo2.md:42
msgid ""
"[halo2-learning-materials](https://learn.z2o-k7e.world/halo2/halo2.html)"
msgstr ""
"[halo2-learning-materials](https://learn.z2o-k7e.world/halo2/halo2.html)"

#: src/halo2/halo2.md:43
msgid ""
"[QA](https://github.com/zkp-co-learning/halo2-step-by-step/discussions)  |  "
"[开营视频回放](https://www.youtube.com/watch?v=0BVaXaRpgww&t=10s)"
msgstr ""
"[QA](https://github.com/zkp-co-learning/halo2-step-by-step/discussions)  |  "
"[开营视频回放](https://www.youtube.com/watch?v=0BVaXaRpgww&t=10s)"

#: src/halo2/halo2.md:51
msgid "for 纯新手:"
msgstr "for 纯新手:"

#: src/halo2/halo2.md:53
msgid ""
"新手学习 ZKP 可以参考新手村入门攻略 <https://learn.z2o-k7e.world/zk-"
"everything/zk-roadmap.html> (must)"
msgstr ""
"新手学习 ZKP 可以参考新手村入门攻略 <https://learn.z2o-k7e.world/zk-"
"everything/zk-roadmap.html> (must)"

#: src/halo2/halo2.md:54
msgid ""
"学习 PLONK 郭老师的系列没跟上非常正常，一般正常人都大概需要反复读 5 遍，各种"
"概念不断交叉记忆，相互关联，然后才能建立一些直观的印象"
msgstr ""
"学习 PLONK 郭老师的系列没跟上非常正常，一般正常人都大概需要反复读 5 遍，各种"
"概念不断交叉记忆，相互关联，然后才能建立一些直观的印象"

#: src/halo2/halo2.md:55
msgid ""
"有了一定的印象后，可以参考 [@Harry L 为文档写的 python 代码](https://github."
"com/Antalpha-Labs/baby-plonk/blob/main/tutorials/understanding-plonk-cn/3-"
"plonk-permutation.ipynb)，手敲印证，加深印象 (optional)"
msgstr ""
"有了一定的印象后，可以参考 [@Harry L 为文档写的 python 代码](https://github."
"com/Antalpha-Labs/baby-plonk/blob/main/tutorials/understanding-plonk-cn/3-"
"plonk-permutation.ipynb)，手敲印证，加深印象 (optional)"

#: src/halo2/halo2.md:56
msgid "学习 Rust 编程 (must)"
msgstr "学习 Rust 编程 (must)"

#: src/halo2/halo2.md:57
msgid ""
"halo2 学习方法论： <https://learn.z2o-k7e.world/halo2/halo2.html>  (must)"
msgstr ""
"halo2 学习方法论： <https://learn.z2o-k7e.world/halo2/halo2.html>  (must)"

#: src/halo2/halo2.md:61
msgid ""
"!有任何看不懂的 Part 都可以提 [issue](https://github.com/zkp-co-learning/"
"halo2-step-by-step/issues) 或者 [Q&A](https://github.com/zkp-co-learning/"
"halo2-step-by-step/discussions/categories/q-a) ~"
msgstr ""
"!有任何看不懂的 Part 都可以提 [issue](https://github.com/zkp-co-learning/"
"halo2-step-by-step/issues) 或者 [Q&A](https://github.com/zkp-co-learning/"
"halo2-step-by-step/discussions/categories/q-a) ~"

#: src/halo2/halo2.md:63
msgid ""
"备注：因为现在还没有关于 halo2 特别好的一站式课程，所以很多参考资源需要反复研"
"究 & 交叉印证"
msgstr ""
"备注：因为现在还没有关于 halo2 特别好的一站式课程，所以很多参考资源需要反复研"
"究 & 交叉印证"

#: src/halo2/halo2.md:67
msgid ""
"目前我们正在对部分教程内容进行重新的整理&修改，会随着课程逐步更新和优化，欢"
"迎 👏🏻 PR 和 issue ！"
msgstr ""
"目前我们正在对部分教程内容进行重新的整理&修改，会随着课程逐步更新和优化，欢"
"迎 👏🏻 PR 和 issue ！"

#: src/halo2/chap-1/index.md:3
msgid "作者:  [@Po](https://github.com/dajuguan)"
msgstr "作者:  [@Po](https://github.com/dajuguan)"

#: src/halo2/chap-1/index.md:4
msgid "时间: 2023-10-18"
msgstr "时间: 2023-10-18"

#: src/halo2/chap-1/index.md:5
msgid "校对: [@Demian](https://github.com/demian101)"
msgstr "校对: [@Demian](https://github.com/demian101)"

#: src/halo2/chap-1/index.md:9 src/halo2/tmp/1-Simple-Example.md:28
#: src/halo2/tmp/2-Fibonacci-example-1.md:37
#: src/halo2/tmp/3-Fibonacci-example-2.md:31
#: src/halo2/tmp/4-IsZero-Check-example-3.md:29
#: src/halo2/tmp/6-Range-Check(code-explanation).md:15
#: src/halo2/tmp/7-Range-Check-lookup(example-2).md:21
#: src/halo2/tmp/7-Range-Check-lookup(example-2).md:132
#: src/halo2/tmp/8-Range-Check(example-3).md:27
#: src/halo2/tmp/8-Range-Check(example-3).md:180 src/halo2/tmp/Zordle.md:23
#: src/halo2/tmp/Hammster.md:17
msgid "Overview"
msgstr "Overview"

#: src/halo2/chap-1/index.md:11
msgid "Prover 宣称：它拥有满足 "
msgstr "Prover 宣称：它拥有满足 "

#: src/halo2/chap-1/index.md:11
msgid "  约束关系，同时结果公开为 "
msgstr "  约束关系，同时结果公开为 "

#: src/halo2/chap-1/index.md:11
msgid " 的一组 "
msgstr " 的一组 "

#: src/halo2/chap-1/index.md:11 src/public goods/4-Proving-System.md:157
msgid "ess"
msgstr "ess"

#: src/halo2/chap-1/index.md:13
msgid ""
"现在 Prover 的目的是，写出一个 halo2 电路，能产生可验证其 statement 的一组 "
"proof，让大家信服他的 statement。"
msgstr ""
"现在 Prover 的目的是，写出一个 halo2 电路，能产生可验证其 statement 的一组 "
"proof，让大家信服他的 statement。"

#: src/halo2/chap-1/index.md:17
msgid "考虑如下电路:"
msgstr "考虑如下电路:"

#: src/halo2/chap-1/index.md:24
msgid "从电路的角度，只使用`乘法门`和乘法`选择器`，上述约束可以算数化为:"
msgstr "从电路的角度，只使用`乘法门`和乘法`选择器`，上述约束可以算数化为:"

#: src/halo2/chap-1/index.md:26
msgid "instance"
msgstr "instance"

#: src/halo2/chap-1/index.md:26
msgid "advice_0"
msgstr "advice_0"

#: src/halo2/chap-1/index.md:26
msgid "advice_1"
msgstr "advice_1"

#: src/halo2/chap-1/index.md:26
msgid "selector_mul"
msgstr "selector_mul"

#: src/halo2/chap-1/index.md:28 src/halo2/chap-1/index.md:36
msgid "_out_"
msgstr "_out_"

#: src/halo2/chap-1/index.md:30
msgid "constant"
msgstr "constant"

#: src/halo2/chap-1/index.md:34 src/halo2/chap-1/index.md:35
msgid "absq"
msgstr "absq"

#: src/halo2/chap-1/index.md:35
msgid "const"
msgstr "const"

#: src/halo2/chap-1/index.md:38
msgid "absq 即 ab_square"
msgstr "absq 即 ab_square"

#: src/halo2/chap-1/index.md:42
msgid "我们的目的则是："
msgstr "我们的目的则是："

#: src/halo2/chap-1/index.md:44
msgid "利用 Halo2 定义好上述约束 (gates 和 equality constrains)，"
msgstr "利用 Halo2 定义好上述约束 (gates 和 equality constrains)，"

#: src/halo2/chap-1/index.md:45
msgid "并使用其 private value 填好上述表格 (即 assign witness)。"
msgstr "并使用其 private value 填好上述表格 (即 assign witness)。"

#: src/halo2/chap-1/index.md:49
msgid "使用 Halo2 编写电路，需要为 `struct Circuit` 实现三个 Trait: [^1]"
msgstr "使用 Halo2 编写电路，需要为 `struct Circuit` 实现三个 Trait: [^1]"

#: src/halo2/chap-1/index.md:51
msgid "`without_witnesses`: 创建默认无需 witness 的 Circuit 实例"
msgstr "`without_witnesses`: 创建默认无需 witness 的 Circuit 实例"

#: src/halo2/chap-1/index.md:52
msgid "`configure`: 需要自定义:"
msgstr "`configure`: 需要自定义:"

#: src/halo2/chap-1/index.md:53
msgid "电路配置: "
msgstr "电路配置: "

#: src/halo2/chap-1/index.md:54
msgid "advice cols (即 witness，包含 private inputs 和 trace), "
msgstr "advice cols (即 witness，包含 private inputs 和 trace), "

#: src/halo2/chap-1/index.md:55
msgid "instance cols (Public Inputs)"
msgstr "instance cols (Public Inputs)"

#: src/halo2/chap-1/index.md:56
msgid "selector (电路选择器)"
msgstr "selector (电路选择器)"

#: src/halo2/chap-1/index.md:57
msgid "custom gate 约束"
msgstr "custom gate 约束"

#: src/halo2/chap-1/index.md:58
msgid ""
"`synthesize`: 需要根据上述表格实现填充 witness 的逻辑，即按照验证程序的逻辑正"
"确写入将数据写入表格的每个 Cell:"
msgstr ""
"`synthesize`: 需要根据上述表格实现填充 witness 的逻辑，即按照验证程序的逻辑正"
"确写入将数据写入表格的每个 Cell:"

#: src/halo2/chap-1/index.md:59
msgid ""
"填充以 Region 为基本单位(多行+多列构成的矩形)，可以在 region 中以相对引用的方"
"式引用其他Row"
msgstr ""
"填充以 Region 为基本单位(多行+多列构成的矩形)，可以在 region 中以相对引用的方"
"式引用其他Row"

#: src/halo2/chap-1/index.md:60
msgid ""
"有两种填充方式: copy_advice (还会产生 equality 约束) + assign_advice(不会产"
"生 equality 约束)"
msgstr ""
"有两种填充方式: copy_advice (还会产生 equality 约束) + assign_advice(不会产"
"生 equality 约束)"

#: src/halo2/chap-1/index.md:62
msgid ""
"一旦定义好上述 3 个 Trait，Halo2 便可以在电路实例化后调用相关 API **自动运行"
"**(不需要手动触发上述函数)上述逻辑来填充witness 和生成 proof。"
msgstr ""
"一旦定义好上述 3 个 Trait，Halo2 便可以在电路实例化后调用相关 API **自动运行"
"**(不需要手动触发上述函数)上述逻辑来填充witness 和生成 proof。"

#: src/halo2/chap-1/index.md:66
msgid "创建电路和 Config [^2]"
msgstr "创建电路和 Config [^2]"

#: src/halo2/chap-1/index.md:68
msgid "在知道了电路构建需要的模块上述电路一共需要四列: "
msgstr "在知道了电路构建需要的模块上述电路一共需要四列: "

#: src/halo2/chap-1/index.md:70
msgid "2 列 witness(advice) 用来填充上述表格的`a0`和`a1`列，"
msgstr "2 列 witness(advice) 用来填充上述表格的`a0`和`a1`列，"

#: src/halo2/chap-1/index.md:71
msgid "其中 3 个 Private inputs: `a`, `b` 和 `constant` 填入 `a0` 列的前三行。"
msgstr ""
"其中 3 个 Private inputs: `a`, `b` 和 `constant` 填入 `a0` 列的前三行。"

#: src/halo2/chap-1/index.md:72
msgid "1 列 instance (填入公共输出 out), "
msgstr "1 列 instance (填入公共输出 out), "

#: src/halo2/chap-1/index.md:73
msgid "1 列乘法门选择器(s_mul); "
msgstr "1 列乘法门选择器(s_mul); "

#: src/halo2/chap-1/index.md:93
msgid "实现 Circuit 前两个 trait"
msgstr "实现 Circuit 前两个 trait"

#: src/halo2/chap-1/index.md:95
msgid ""
"```rust\n"
"impl <F:Field> Circuit<F> for MyCircuit<F> {\n"
"  fn without_witnesses(&self) -> Self {\n"
"        Self::default()\n"
"    }\n"
"\n"
"    fn configure(meta: &mut ConstraintSystem<F>) -> Self::Config {\n"
"        let advice = [meta.advice_column(),meta.advice_column()];\n"
"        let instance = meta.instance_column();\n"
"        let constant = meta.fixed_column();\n"
"\n"
"        meta.enable_equality(instance);\n"
"        meta.enable_constant(constant);\n"
"        for c in &advice {\n"
"            meta.enable_equality(*c);\n"
"        }\n"
"        let s_mul = meta.selector();\n"
"        /* Gate design:\n"
"            | a0 | a1 | s_mul|\n"
"            |----|----|------|\n"
"            |lhs |rhs |s_mul |\n"
"            |out |    |      |  \n"
"        */\n"
"        meta.create_gate(\"mul_gate\", |meta| {\n"
"            let lhs = meta.query_advice(advice[0], Rotation::cur());\n"
"            let rhs = meta.query_advice(advice[1], Rotation::cur());\n"
"            let out = meta.query_advice(advice[0], Rotation::next());\n"
"            let s_mul = meta.query_selector(s_mul);\n"
"            vec![s_mul * (lhs*rhs - out)]\n"
"        });\n"
"\n"
"        CircuitConfig {\n"
"            advice,\n"
"            instance,\n"
"            s_mul\n"
"        }\n"
"    }\n"
"}\n"
"```"
msgstr ""
"```rust\n"
"impl <F:Field> Circuit<F> for MyCircuit<F> {\n"
"  fn without_witnesses(&self) -> Self {\n"
"        Self::default()\n"
"    }\n"
"\n"
"    fn configure(meta: &mut ConstraintSystem<F>) -> Self::Config {\n"
"        let advice = [meta.advice_column(),meta.advice_column()];\n"
"        let instance = meta.instance_column();\n"
"        let constant = meta.fixed_column();\n"
"\n"
"        meta.enable_equality(instance);\n"
"        meta.enable_constant(constant);\n"
"        for c in &advice {\n"
"            meta.enable_equality(*c);\n"
"        }\n"
"        let s_mul = meta.selector();\n"
"        /* Gate design:\n"
"            | a0 | a1 | s_mul|\n"
"            |----|----|------|\n"
"            |lhs |rhs |s_mul |\n"
"            |out |    |      |  \n"
"        */\n"
"        meta.create_gate(\"mul_gate\", |meta| {\n"
"            let lhs = meta.query_advice(advice[0], Rotation::cur());\n"
"            let rhs = meta.query_advice(advice[1], Rotation::cur());\n"
"            let out = meta.query_advice(advice[0], Rotation::next());\n"
"            let s_mul = meta.query_selector(s_mul);\n"
"            vec![s_mul * (lhs*rhs - out)]\n"
"        });\n"
"\n"
"        CircuitConfig {\n"
"            advice,\n"
"            instance,\n"
"            s_mul\n"
"        }\n"
"    }\n"
"}\n"
"```"

#: src/halo2/chap-1/index.md:134
msgid ""
"需要注意的是 Halo2 中为了优化需要通过 enable_equality 明确指定哪些列设置 "
"equality 约束。同时由于要保证 gate 对每一行的 witness 都满足约束，所以只能通"
"过 query_advice 来获取每个门`虚拟的`输入和输出(实际的值在 synthesize 时填入)"
"以生成多项式约束，即保证 gate 返回的 vec 为 0。"
msgstr ""
"需要注意的是 Halo2 中为了优化需要通过 enable_equality 明确指定哪些列设置 "
"equality 约束。同时由于要保证 gate 对每一行的 witness 都满足约束，所以只能通"
"过 query_advice 来获取每个门`虚拟的`输入和输出(实际的值在 synthesize 时填入)"
"以生成多项式约束，即保证 gate 返回的 vec 为 0。"

#: src/halo2/chap-1/index.md:138
msgid "实现 witness 填充"
msgstr "实现 witness 填充"

#: src/halo2/chap-1/index.md:140
msgid "按照表格,一步步填充 witness："
msgstr "按照表格,一步步填充 witness："

#: src/halo2/chap-1/index.md:141
msgid "load private inputs `a`, `b` 和 `constant`"
msgstr "load private inputs `a`, `b` 和 `constant`"

#: src/halo2/chap-1/index.md:142
msgid ""
"分别计算三个乘法的输入输出值 (`ab`, `absq`, `out`)，并通过 `assign_advice` "
"和 `copy_advice` 这两个 API 填充 Cell "
msgstr ""
"分别计算三个乘法的输入输出值 (`ab`, `absq`, `out`)，并通过 `assign_advice` "
"和 `copy_advice` 这两个 API 填充 Cell "

#: src/halo2/chap-1/index.md:143
msgid ""
"通过 `constrain_instance` API, 约束 out 所在的 Cell 和 instance 列的第一个 "
"cell 相等"
msgstr ""
"通过 `constrain_instance` API, 约束 out 所在的 Cell 和 instance 列的第一个 "
"cell 相等"

#: src/halo2/chap-1/index.md:144
msgid ""
"```rust\n"
"fn load_private<F:Field>( \n"
"    config: &CircuitConfig,\n"
"    mut layouter: impl Layouter<F>,\n"
"    value: Value<F>) -> Result<Number<F>, Error> {\n"
"    layouter.assign_region(\n"
"        || \"load private\", \n"
"        |mut region| {\n"
"            region.assign_advice(\n"
"                || \"private input\", \n"
"                config.advice[0], \n"
"                0, \n"
"                || value\n"
"            ).map(Number)\n"
"    })\n"
"}\n"
"\n"
"fn load_constant<F:Field>( \n"
"    config: &CircuitConfig,\n"
"    mut layouter: impl Layouter<F>,\n"
"    constant: F\n"
") -> Result<Number<F>, Error> {\n"
"    layouter.assign_region(\n"
"        || \"load private\", \n"
"    |mut region| {\n"
"        region.assign_advice_from_constant(\n"
"            || \"private input\", \n"
"            config.advice[0], \n"
"            0, \n"
"            constant\n"
"        ).map(Number)\n"
"    })\n"
"}\n"
"\n"
"fn mul<F:Field>(\n"
"    config: &CircuitConfig,\n"
"    mut layouter: impl Layouter<F>,\n"
"    a: Number<F>,\n"
"    b: Number<F>,\n"
") -> Result<Number<F>, Error> {\n"
"    layouter.assign_region(\n"
"        || \"mul\", \n"
"    |mut region| {\n"
"        config.s_mul.enable(&mut region, 0)?;\n"
"        a.0.copy_advice(|| \"lhs\", &mut region, config.advice[0], 0)?;\n"
"        b.0.copy_advice(|| \"rhs\", &mut region, config.advice[1], 0)?;\n"
"\n"
"        let value = a.0.value().copied() * b.0.value().copied();\n"
"        region.assign_advice(|| \"out=lhs*rhs\", config.advice[0], 1, || "
"value)\n"
"        .map(Number)\n"
"    })\n"
"}\n"
"\n"
"impl <F:Field> Circuit<F> for MyCircuit<F> {\n"
"    //...\n"
"    fn synthesize(&self, config: Self::Config, mut layouter: impl "
"Layouter<F>) -> Result<(), Error> {\n"
"        let a = load_private(&config,layouter.namespace(|| \"load a\"), self."
"a)?;\n"
"        let b = load_private(&config,layouter.namespace(|| \"load b\"), self."
"b)?;\n"
"        let constant = load_constant(&config,layouter.namespace(|| \"load "
"constant\"), self.constant)?;\n"
"\n"
"\n"
"        let ab = mul(&config,layouter.namespace(|| \"a*b\"), a, b)?;\n"
"        let absq = mul(&config,layouter.namespace(|| \"ab*ab\"), ab.clone(), "
"ab)?;\n"
"        let c = mul(&config, layouter.namespace(|| \"absq*constant\"), absq, "
"constant)?;\n"
"\n"
"        //expose public\n"
"        layouter.namespace(|| \"expose c\").constrain_instance(c.0.cell(), "
"config.instance, 0)\n"
"    }\n"
"}\n"
"```"
msgstr ""
"```rust\n"
"fn load_private<F:Field>( \n"
"    config: &CircuitConfig,\n"
"    mut layouter: impl Layouter<F>,\n"
"    value: Value<F>) -> Result<Number<F>, Error> {\n"
"    layouter.assign_region(\n"
"        || \"load private\", \n"
"        |mut region| {\n"
"            region.assign_advice(\n"
"                || \"private input\", \n"
"                config.advice[0], \n"
"                0, \n"
"                || value\n"
"            ).map(Number)\n"
"    })\n"
"}\n"
"\n"
"fn load_constant<F:Field>( \n"
"    config: &CircuitConfig,\n"
"    mut layouter: impl Layouter<F>,\n"
"    constant: F\n"
") -> Result<Number<F>, Error> {\n"
"    layouter.assign_region(\n"
"        || \"load private\", \n"
"    |mut region| {\n"
"        region.assign_advice_from_constant(\n"
"            || \"private input\", \n"
"            config.advice[0], \n"
"            0, \n"
"            constant\n"
"        ).map(Number)\n"
"    })\n"
"}\n"
"\n"
"fn mul<F:Field>(\n"
"    config: &CircuitConfig,\n"
"    mut layouter: impl Layouter<F>,\n"
"    a: Number<F>,\n"
"    b: Number<F>,\n"
") -> Result<Number<F>, Error> {\n"
"    layouter.assign_region(\n"
"        || \"mul\", \n"
"    |mut region| {\n"
"        config.s_mul.enable(&mut region, 0)?;\n"
"        a.0.copy_advice(|| \"lhs\", &mut region, config.advice[0], 0)?;\n"
"        b.0.copy_advice(|| \"rhs\", &mut region, config.advice[1], 0)?;\n"
"\n"
"        let value = a.0.value().copied() * b.0.value().copied();\n"
"        region.assign_advice(|| \"out=lhs*rhs\", config.advice[0], 1, || "
"value)\n"
"        .map(Number)\n"
"    })\n"
"}\n"
"\n"
"impl <F:Field> Circuit<F> for MyCircuit<F> {\n"
"    //...\n"
"    fn synthesize(&self, config: Self::Config, mut layouter: impl "
"Layouter<F>) -> Result<(), Error> {\n"
"        let a = load_private(&config,layouter.namespace(|| \"load a\"), self."
"a)?;\n"
"        let b = load_private(&config,layouter.namespace(|| \"load b\"), self."
"b)?;\n"
"        let constant = load_constant(&config,layouter.namespace(|| \"load "
"constant\"), self.constant)?;\n"
"\n"
"\n"
"        let ab = mul(&config,layouter.namespace(|| \"a*b\"), a, b)?;\n"
"        let absq = mul(&config,layouter.namespace(|| \"ab*ab\"), ab.clone(), "
"ab)?;\n"
"        let c = mul(&config, layouter.namespace(|| \"absq*constant\"), absq, "
"constant)?;\n"
"\n"
"        //expose public\n"
"        layouter.namespace(|| \"expose c\").constrain_instance(c.0.cell(), "
"config.instance, 0)\n"
"    }\n"
"}\n"
"```"

#: src/halo2/chap-1/index.md:217
msgid "Mock prove"
msgstr "Mock prove"

#: src/halo2/chap-1/index.md:219
msgid "最后实例化电路，并调用相应的Mock Prover来验证:"
msgstr "最后实例化电路，并调用相应的Mock Prover来验证:"

#: src/halo2/chap-1/index.md:221
msgid ""
"```rust\n"
"#[cfg(test)]\n"
"mod tests {\n"
"    use halo2_proofs::{dev::MockProver, pasta::Fp};\n"
"    use super::*;\n"
"    #[test]\n"
"    fn test_simple() {\n"
"        // ANCHOR: test-circuit\n"
"        // The number of rows in our circuit cannot exceed 2^k. Since our "
"example\n"
"        // circuit is very small, we can pick a very small value here.\n"
"        let k = 5;\n"
"    \n"
"        // Prepare the private and public inputs to the circuit!\n"
"        let constant = Fp::from(2);\n"
"        let a = Fp::from(2);\n"
"        let b = Fp::from(3);\n"
"        let c = constant * a.square() * b.square();\n"
"        println!(\"c=:{:?}\",c);\n"
"    \n"
"        // Instantiate the circuit with the private inputs.\n"
"        let circuit = MyCircuit {\n"
"            constant,\n"
"            a: Value::known(a),\n"
"            b: Value::known(b),\n"
"        };\n"
"    \n"
"        // Arrange the public input. We expose the multiplication result in "
"row 0\n"
"        // of the instance column, so we position it there in our public "
"inputs.\n"
"        let mut public_inputs = vec![c];\n"
"    \n"
"        // Given the correct public input, our circuit will verify.\n"
"        let prover = MockProver::run(k, &circuit, vec![public_inputs."
"clone()]).unwrap();\n"
"        assert_eq!(prover.verify(), Ok(()));\n"
"    \n"
"        // If we try some other public input, the proof will fail!\n"
"        public_inputs[0] += Fp::one();\n"
"        let prover = MockProver::run(k, &circuit, vec![public_inputs])."
"unwrap();\n"
"        assert!(prover.verify().is_err());\n"
"        println!(\"simple success!\")\n"
"        // ANCHOR_END: test-circuit\n"
"    }\n"
"}\n"
"```"
msgstr ""
"```rust\n"
"#[cfg(test)]\n"
"mod tests {\n"
"    use halo2_proofs::{dev::MockProver, pasta::Fp};\n"
"    use super::*;\n"
"    #[test]\n"
"    fn test_simple() {\n"
"        // ANCHOR: test-circuit\n"
"        // The number of rows in our circuit cannot exceed 2^k. Since our "
"example\n"
"        // circuit is very small, we can pick a very small value here.\n"
"        let k = 5;\n"
"    \n"
"        // Prepare the private and public inputs to the circuit!\n"
"        let constant = Fp::from(2);\n"
"        let a = Fp::from(2);\n"
"        let b = Fp::from(3);\n"
"        let c = constant * a.square() * b.square();\n"
"        println!(\"c=:{:?}\",c);\n"
"    \n"
"        // Instantiate the circuit with the private inputs.\n"
"        let circuit = MyCircuit {\n"
"            constant,\n"
"            a: Value::known(a),\n"
"            b: Value::known(b),\n"
"        };\n"
"    \n"
"        // Arrange the public input. We expose the multiplication result in "
"row 0\n"
"        // of the instance column, so we position it there in our public "
"inputs.\n"
"        let mut public_inputs = vec![c];\n"
"    \n"
"        // Given the correct public input, our circuit will verify.\n"
"        let prover = MockProver::run(k, &circuit, vec![public_inputs."
"clone()]).unwrap();\n"
"        assert_eq!(prover.verify(), Ok(()));\n"
"    \n"
"        // If we try some other public input, the proof will fail!\n"
"        public_inputs[0] += Fp::one();\n"
"        let prover = MockProver::run(k, &circuit, vec![public_inputs])."
"unwrap();\n"
"        assert!(prover.verify().is_err());\n"
"        println!(\"simple success!\")\n"
"        // ANCHOR_END: test-circuit\n"
"    }\n"
"}\n"
"```"

#: src/halo2/chap-1/index.md:265
msgid ""
"其中:`MockerProver.run`会分别调用实例化电路的 `configure` 和 `synthesis` 函数"
"以生成电路约束和填充 witness 列(详见 Prover 的[assign_advice函数](https://"
"github.com/zcash/halo2/blob/f9838c127ec9c14f6f323e0cfdc0c1392594d37f/"
"halo2_proofs/src/plonk/prover.rs#L135))。 `prover.verify()` 则会检查所有的"
"门、lookup、permuation等生成的约束是否满足。"
msgstr ""
"其中:`MockerProver.run`会分别调用实例化电路的 `configure` 和 `synthesis` 函数"
"以生成电路约束和填充 witness 列(详见 Prover 的[assign_advice函数](https://"
"github.com/zcash/halo2/blob/f9838c127ec9c14f6f323e0cfdc0c1392594d37f/"
"halo2_proofs/src/plonk/prover.rs#L135))。 `prover.verify()` 则会检查所有的"
"门、lookup、permuation等生成的约束是否满足。"

#: src/halo2/chap-1/index.md:268
msgid "运行`cargo run test_chap_1_simple`, 测试成功。"
msgstr "运行`cargo run test_chap_1_simple`, 测试成功。"

#: src/halo2/chap-1/index.md:272
msgid "检查 Circuit 布局"
msgstr "检查 Circuit 布局"

#: src/halo2/chap-1/index.md:274
msgid ""
"同时，还可以利用 Halo2 的 tool 输出电路的整个布局图，advice 列均为红色，"
"instance 列为浅蓝色，selector 列为深蓝色；不同的 region 之间由黑色线分隔，填"
"充过值的 advice 和 instance 列的单元格由绿色和浅绿色组成，填充过值的instance"
"单元格则为深蓝色。可根据此图检查电路是否欠约束(under constraint)，如果欠约束"
"会明显发现对应的单元格**不是绿色**。"
msgstr ""
"同时，还可以利用 Halo2 的 tool 输出电路的整个布局图，advice 列均为红色，"
"instance 列为浅蓝色，selector 列为深蓝色；不同的 region 之间由黑色线分隔，填"
"充过值的 advice 和 instance 列的单元格由绿色和浅绿色组成，填充过值的instance"
"单元格则为深蓝色。可根据此图检查电路是否欠约束(under constraint)，如果欠约束"
"会明显发现对应的单元格**不是绿色**。"

#: src/halo2/chap-1/index.md:275
msgid ""
"```rust\n"
"\n"
"    #[cfg(feature = \"dev-graph\")]\n"
"    #[test]\n"
"    fn plot_circuit(){\n"
"        // Instantiate the circuit with the private inputs.\n"
"        let circuit = MyCircuit::<Fp>::default();\n"
"        // Create the area you want to draw on.\n"
"        // Use SVGBackend if you want to render to .svg instead.\n"
"        use plotters::prelude::*;\n"
"        let root = BitMapBackend::new(\"layout.png\", (1024, 768))."
"into_drawing_area();\n"
"        root.fill(&WHITE).unwrap();\n"
"        let root = root\n"
"            .titled(\"Simple Circuit without chip\", (\"sans-serif\", 60))\n"
"            .unwrap();\n"
"\n"
"        halo2_proofs::dev::CircuitLayout::default()\n"
"            // You can optionally render only a section of the circuit.\n"
"            // .view_width(0..2)\n"
"            // .view_height(0..16)\n"
"            // You can hide labels, which can be useful with smaller areas.\n"
"            .show_labels(true)\n"
"            // Render the circuit onto your area!\n"
"            // The first argument is the size parameter for the circuit.\n"
"            .render(5, &circuit, &root)\n"
"            .unwrap();\n"
"    }\n"
"```"
msgstr ""
"```rust\n"
"\n"
"    #[cfg(feature = \"dev-graph\")]\n"
"    #[test]\n"
"    fn plot_circuit(){\n"
"        // Instantiate the circuit with the private inputs.\n"
"        let circuit = MyCircuit::<Fp>::default();\n"
"        // Create the area you want to draw on.\n"
"        // Use SVGBackend if you want to render to .svg instead.\n"
"        use plotters::prelude::*;\n"
"        let root = BitMapBackend::new(\"layout.png\", (1024, 768))."
"into_drawing_area();\n"
"        root.fill(&WHITE).unwrap();\n"
"        let root = root\n"
"            .titled(\"Simple Circuit without chip\", (\"sans-serif\", 60))\n"
"            .unwrap();\n"
"\n"
"        halo2_proofs::dev::CircuitLayout::default()\n"
"            // You can optionally render only a section of the circuit.\n"
"            // .view_width(0..2)\n"
"            // .view_height(0..16)\n"
"            // You can hide labels, which can be useful with smaller areas.\n"
"            .show_labels(true)\n"
"            // Render the circuit onto your area!\n"
"            // The first argument is the size parameter for the circuit.\n"
"            .render(5, &circuit, &root)\n"
"            .unwrap();\n"
"    }\n"
"```"

#: src/halo2/chap-1/index.md:304
msgid ""
"运行`cargo test plot_chap_1_circuit  --features dev-graph`，可以输出电路结构"
"图。"
msgstr ""
"运行`cargo test plot_chap_1_circuit  --features dev-graph`，可以输出电路结构"
"图。"

#: src/halo2/chap-1/index.md:306
msgid ""
"从下图可以看出，整个电路一共9行4列，与表格设计一致。 ![image](../imgs/"
"simple_annote.png)"
msgstr ""
"从下图可以看出，整个电路一共9行4列，与表格设计一致。 ![image](../imgs/"
"simple_annote.png)"

#: src/halo2/chap-1/index.md:315
msgid ""
"`./halo2_proofs::plonk::Circuit` [^2]: 完整代码在 [halo2-tutorials: chap-1]"
"(https://github.com/zkp-co-learning/halo2-step-by-step/blob/main/halo2-"
"tutorials/src/chap_1/simple.rs) "
msgstr ""
"`./halo2_proofs::plonk::Circuit` [^2]: 完整代码在 [halo2-tutorials: chap-1]"
"(https://github.com/zkp-co-learning/halo2-step-by-step/blob/main/halo2-"
"tutorials/src/chap_1/simple.rs) "

#: src/halo2/tmp/halo2-learning-materials.md:3
msgid "[Prerequisite](#prerequisite)"
msgstr "[Prerequisite](#prerequisite)"

#: src/halo2/tmp/halo2-learning-materials.md:4
msgid "[The Halo2 Book:](#the-halo2-book)"
msgstr "[The Halo2 Book:](#the-halo2-book)"

#: src/halo2/tmp/halo2-learning-materials.md:5
msgid "[0xPARC: Halo2 Learning Group](#0xparc-halo2-learning-group)"
msgstr "[0xPARC: Halo2 Learning Group](#0xparc-halo2-learning-group)"

#: src/halo2/tmp/halo2-learning-materials.md:6
msgid "[StarLi 星想法](#starli-星想法)"
msgstr "[StarLi 星想法](#starli-星想法)"

#: src/halo2/tmp/halo2-learning-materials.md:7
msgid "[知乎小白专栏:](#知乎小白专栏)"
msgstr "[知乎小白专栏:](#知乎小白专栏)"

#: src/halo2/tmp/halo2-learning-materials.md:8
msgid "[DoraHacks](#dorahacks)"
msgstr "[DoraHacks](#dorahacks)"

#: src/halo2/tmp/halo2-learning-materials.md:9
msgid "[Code](#code)"
msgstr "[Code](#code)"

#: src/halo2/tmp/halo2-learning-materials.md:10
msgid "[libs:](#libs)"
msgstr "[libs:](#libs)"

#: src/halo2/tmp/halo2-learning-materials.md:11
msgid "[Others :](#others-)"
msgstr "[Others :](#others-)"

#: src/halo2/tmp/halo2-learning-materials.md:13
msgid "Prerequisite"
msgstr "Prerequisite"

#: src/halo2/tmp/halo2-learning-materials.md:14
msgid ""
"[PLONK Tutorials](https://learn.z2o-k7e.world/plonk-intro-cn/plonk-"
"arithmetization.html) &  [Lookup Gates @secbit](https://github.com/sec-bit/"
"learning-zkp/blob/develop/plonk-intro-cn/plonk-lookup.md)"
msgstr ""
"[PLONK Tutorials](https://learn.z2o-k7e.world/plonk-intro-cn/plonk-"
"arithmetization.html) &  [Lookup Gates @secbit](https://github.com/sec-bit/"
"learning-zkp/blob/develop/plonk-intro-cn/plonk-lookup.md)"

#: src/halo2/tmp/halo2-learning-materials.md:17
msgid "The Halo2 Book:"
msgstr "The Halo2 Book:"

#: src/halo2/tmp/halo2-learning-materials.md:18
msgid "[zcash halo2 book](https://zcash.github.io/halo2/)"
msgstr "[zcash halo2 book](https://zcash.github.io/halo2/)"

#: src/halo2/tmp/halo2-learning-materials.md:19
msgid "[github](https://github.com/zcash/halo2/blob/main/book/)"
msgstr "[github](https://github.com/zcash/halo2/blob/main/book/)"

#: src/halo2/tmp/halo2-learning-materials.md:20
msgid "[Gadgets](https://zcash.github.io/halo2/design/gadgets.html)"
msgstr "[Gadgets](https://zcash.github.io/halo2/design/gadgets.html)"

#: src/halo2/tmp/halo2-learning-materials.md:21
msgid ""
"[halo2 book 中文翻译](https://trapdoor-tech.github.io/halo2-book-chinese/)"
msgstr ""
"[halo2 book 中文翻译](https://trapdoor-tech.github.io/halo2-book-chinese/)"

#: src/halo2/tmp/halo2-learning-materials.md:22
msgid "[github](https://trapdoor-tech.github.io/halo2-book-chinese/)"
msgstr "[github](https://trapdoor-tech.github.io/halo2-book-chinese/)"

#: src/halo2/tmp/halo2-learning-materials.md:24
msgid "0xPARC: Halo2 Learning Group"
msgstr "0xPARC: Halo2 Learning Group"

#: src/halo2/tmp/halo2-learning-materials.md:25
msgid "Official : https://learn.0xparc.org/halo2/"
msgstr "Official : https://learn.0xparc.org/halo2/"

#: src/halo2/tmp/halo2-learning-materials.md:26
msgid "https://github.com/icemelon/halo2-tutorial/"
msgstr "https://github.com/icemelon/halo2-tutorial/"

#: src/halo2/tmp/halo2-learning-materials.md:27
msgid "Introduction 8.21 "
msgstr "Introduction 8.21 "

#: src/halo2/tmp/halo2-learning-materials.md:28
msgid "[2. Halo2 API & Building a Basic Fibonacci Circuit (Part 1)]()"
msgstr "[2. Halo2 API & Building a Basic Fibonacci Circuit (Part 1)]()"

#: src/halo2/tmp/halo2-learning-materials.md:29
msgid "https://github.com/icemelon/halo2-examples  **(Haicheng's Code)**"
msgstr "https://github.com/icemelon/halo2-examples  **(Haicheng's Code)**"

#: src/halo2/tmp/halo2-learning-materials.md:30
msgid ""
"https://github.com/enricobottazzi/halo2-fibonacci-ex  整理了 0XPARC 课上的 "
"QA !  and Example2 Example 3 ..."
msgstr ""
"https://github.com/enricobottazzi/halo2-fibonacci-ex  整理了 0XPARC 课上的 "
"QA !  and Example2 Example 3 ..."

#: src/halo2/tmp/halo2-learning-materials.md:31
msgid "https://github.com/therealyingtong/halo2-hope  code reference"
msgstr "https://github.com/therealyingtong/halo2-hope  code reference"

#: src/halo2/tmp/halo2-learning-materials.md:32
msgid ""
"https://github.com/jasonmorton/halo2-examples/blob/master/src/range_check/"
"example1b.rs   Jason Morton 超详细注释 line by line"
msgstr ""
"https://github.com/jasonmorton/halo2-examples/blob/master/src/range_check/"
"example1b.rs   Jason Morton 超详细注释 line by line"

#: src/halo2/tmp/halo2-learning-materials.md:33
msgid "https://github.com/enricobottazzi/halo2-intro"
msgstr "https://github.com/enricobottazzi/halo2-intro"

#: src/halo2/tmp/halo2-learning-materials.md:34
msgid ""
"[Fibonacci Circuits cont. + Basic Halo2 gadgets](https://www.youtube.com/"
"watch?v=YclxoJ069zg&t=1695s)"
msgstr ""
"[Fibonacci Circuits cont. + Basic Halo2 gadgets](https://www.youtube.com/"
"watch?v=YclxoJ069zg&t=1695s)"

#: src/halo2/tmp/halo2-learning-materials.md:35
msgid "Jason Morton Code missed Haicheng's `print` part."
msgstr "Jason Morton Code missed Haicheng's `print` part."

#: src/halo2/tmp/halo2-learning-materials.md:37
msgid "StarLi 星想法"
msgstr "StarLi 星想法"

#: src/halo2/tmp/halo2-learning-materials.md:38
msgid ""
"[01 - Halo2入门基础介绍 StarLI-Trapdoor](https://www.bilibili.com/video/"
"BV1ML4y1M7iV)"
msgstr ""
"[01 - Halo2入门基础介绍 StarLI-Trapdoor](https://www.bilibili.com/video/"
"BV1ML4y1M7iV)"

#: src/halo2/tmp/halo2-learning-materials.md:39
msgid ""
"[02 - Halo2 深入理解Permutation & Lookup算法](https://www.bilibili.com/video/"
"BV1C34y1t7pN)"
msgstr ""
"[02 - Halo2 深入理解Permutation & Lookup算法](https://www.bilibili.com/video/"
"BV1C34y1t7pN)"

#: src/halo2/tmp/halo2-learning-materials.md:40
msgid ""
"[03 - Halo2协议基础及介绍](https://www.bilibili.com/video/BV19L4y1T7ai)    "
"25' 左右对整体协议的介绍"
msgstr ""
"[03 - Halo2协议基础及介绍](https://www.bilibili.com/video/BV19L4y1T7ai)    "
"25' 左右对整体协议的介绍"

#: src/halo2/tmp/halo2-learning-materials.md:41
msgid ""
"[04 - Halo2电路进阶 (sha256 优化实现)](https://www.bilibili.com/video/"
"BV1LL411P7ba)"
msgstr ""
"[04 - Halo2电路进阶 (sha256 优化实现)](https://www.bilibili.com/video/"
"BV1LL411P7ba)"

#: src/halo2/tmp/halo2-learning-materials.md:42
msgid "如何实现 (mod  "
msgstr "如何实现 (mod  "

#: src/halo2/tmp/halo2-learning-materials.md:42
msgid " ) 加法 ? "
msgstr " ) 加法 ? "

#: src/halo2/tmp/halo2-learning-materials.md:43
msgid "如何实现 `XOR`  (有些 代码很 make sense ) 值得再看"
msgstr "如何实现 `XOR`  (有些 代码很 make sense ) 值得再看"

#: src/halo2/tmp/halo2-learning-materials.md:44
msgid "[05 - Halo2源代码导读](https://www.bilibili.com/video/BV1HS4y1D7tX)"
msgstr "[05 - Halo2源代码导读](https://www.bilibili.com/video/BV1HS4y1D7tX)"

#: src/halo2/tmp/halo2-learning-materials.md:45
msgid "https://mp.weixin.qq.com/s/VerLN8-tqetKs1Hv6m4KLg"
msgstr "https://mp.weixin.qq.com/s/VerLN8-tqetKs1Hv6m4KLg"

#: src/halo2/tmp/halo2-learning-materials.md:46
msgid ""
"[Halo2 开发常见错误 (Custom Gate)](https://mp.weixin.qq.com/s?"
"__biz=MzU5MzMxNTk2Nw==&mid=2247488089&idx=1&sn=0eb6b7e6ae1363522029fd8b592c5e57&chksm=fe130349c9648a5f1f376766c08b08fe6319949b14c6130909484cbe0cf8936edd7890063de9&cur_album_id=1458661849167511555&scene=190#rd)"
msgstr ""
"[Halo2 开发常见错误 (Custom Gate)](https://mp.weixin.qq.com/s?"
"__biz=MzU5MzMxNTk2Nw==&mid=2247488089&idx=1&sn=0eb6b7e6ae1363522029fd8b592c5e57&chksm=fe130349c9648a5f1f376766c08b08fe6319949b14c6130909484cbe0cf8936edd7890063de9&cur_album_id=1458661849167511555&scene=190#rd)"

#: src/halo2/tmp/halo2-learning-materials.md:48
msgid "知乎小白专栏:"
msgstr "知乎小白专栏:"

#: src/halo2/tmp/halo2-learning-materials.md:49
msgid ""
"[零知识证明原理及区块链应用分享](https://www.zhihu.com/column/"
"c_1170346974367916032)"
msgstr ""
"[零知识证明原理及区块链应用分享](https://www.zhihu.com/column/"
"c_1170346974367916032)"

#: src/halo2/tmp/halo2-learning-materials.md:50
msgid ""
"[Plookup 原理详解](https://zhuanlan.zhihu.com/p/366693663)     **扩展到"
"multiple tables** 部分 make sense, 但是公式太不清晰了, 可以重新回头看"
msgstr ""
"[Plookup 原理详解](https://zhuanlan.zhihu.com/p/366693663)     **扩展到"
"multiple tables** 部分 make sense, 但是公式太不清晰了, 可以重新回头看"

#: src/halo2/tmp/halo2-learning-materials.md:51
msgid ""
"[Halo2: Lookup argument](https://zhuanlan.zhihu.com/p/447736247)  主要是 "
"halo2 book 的 Proving System 部分的讲解,   zero knowledge 部分很 make sense, "
"值得再读"
msgstr ""
"[Halo2: Lookup argument](https://zhuanlan.zhihu.com/p/447736247)  主要是 "
"halo2 book 的 Proving System 部分的讲解,   zero knowledge 部分很 make sense, "
"值得再读"

#: src/halo2/tmp/halo2-learning-materials.md:52
msgid "[Halo2：原理剖析](https://zhuanlan.zhihu.com/p/385134321)    简易大纲"
msgstr "[Halo2：原理剖析](https://zhuanlan.zhihu.com/p/385134321)    简易大纲"

#: src/halo2/tmp/halo2-learning-materials.md:53
msgid "[V神如何巧妙讲解](https://zhuanlan.zhihu.com/p/429253463)"
msgstr "[V神如何巧妙讲解](https://zhuanlan.zhihu.com/p/429253463)"

#: src/halo2/tmp/halo2-learning-materials.md:55
msgid "DoraHacks"
msgstr "DoraHacks"

#: src/halo2/tmp/halo2-learning-materials.md:56
msgid ""
"[零知识证明：Halo2解读](https://www.bilibili.com/video/BV1qk4y1j71i)    乏善"
"可陈..."
msgstr ""
"[零知识证明：Halo2解读](https://www.bilibili.com/video/BV1qk4y1j71i)    乏善"
"可陈..."

#: src/halo2/tmp/halo2-learning-materials.md:58
msgid "Code"
msgstr "Code"

#: src/halo2/tmp/halo2-learning-materials.md:59
msgid "[Halo2 Tutorial Intro](https://erroldrummond.gitbook.io/halo2-tutorial)"
msgstr ""
"[Halo2 Tutorial Intro](https://erroldrummond.gitbook.io/halo2-tutorial)"

#: src/halo2/tmp/halo2-learning-materials.md:60
msgid "提供了 ECDSA / 等 gadgets , 值得再读 ..."
msgstr "提供了 ECDSA / 等 gadgets , 值得再读 ..."

#: src/halo2/tmp/halo2-learning-materials.md:61
msgid "提供了  Range check 等 gadgets , 值得再读 ..."
msgstr "提供了  Range check 等 gadgets , 值得再读 ..."

#: src/halo2/tmp/halo2-learning-materials.md:62
msgid ""
"[Develop Circuits Using Halo 2](https://medium.com/@ola_zkzkvm/sin7y-tech-"
"review-develop-circuits-using-halo-2-829e2f26856)    对 ZCash "
msgstr ""
"[Develop Circuits Using Halo 2](https://medium.com/@ola_zkzkvm/sin7y-tech-"
"review-develop-circuits-using-halo-2-829e2f26856)    对 ZCash "

#: src/halo2/tmp/halo2-learning-materials.md:62
msgid "  的 Tutorial , 图解非常好, 搭配 ZCash 的翻译一起看"
msgstr "  的 Tutorial , 图解非常好, 搭配 ZCash 的翻译一起看"

#: src/halo2/tmp/halo2-learning-materials.md:63
msgid ""
"[Building a Zero Knowledge web app with Halo 2 and Wasm (part 1)](https://"
"medium.com/@yujiangtham/building-a-zero-knowledge-web-app-with-halo-2-and-"
"wasm-part-1-80858c8d16ee)  Very Goods！"
msgstr ""
"[Building a Zero Knowledge web app with Halo 2 and Wasm (part 1)](https://"
"medium.com/@yujiangtham/building-a-zero-knowledge-web-app-with-halo-2-and-"
"wasm-part-1-80858c8d16ee)  Very Goods！"

#: src/halo2/tmp/halo2-learning-materials.md:64
msgid "[zordle](https://github.com/nalinbhardwaj/zordle)  讲解清晰!"
msgstr "[zordle](https://github.com/nalinbhardwaj/zordle)  讲解清晰!"

#: src/halo2/tmp/halo2-learning-materials.md:65
#: src/materials/ZK-Materials.md:377
msgid "[Awesome HALO2](https://github.com/adria0/awesome-halo2)"
msgstr "[Awesome HALO2](https://github.com/adria0/awesome-halo2)"

#: src/halo2/tmp/halo2-learning-materials.md:66
msgid ""
"[halo2 tutorial From HaiCheng Shen](https://github.com/icemelon/halo2-"
"tutorial)  沈海诚 code"
msgstr ""
"[halo2 tutorial From HaiCheng Shen](https://github.com/icemelon/halo2-"
"tutorial)  沈海诚 code"

#: src/halo2/tmp/halo2-learning-materials.md:67
msgid "https://github.com/Divide-By-0/halo2-learning-group"
msgstr "https://github.com/Divide-By-0/halo2-learning-group"

#: src/halo2/tmp/halo2-learning-materials.md:69
msgid "libs:"
msgstr "libs:"

#: src/halo2/tmp/halo2-learning-materials.md:70
msgid ""
"[More Optimized ECC Operations in halo2 by Axiom](https://github.com/axiom-"
"crypto/halo2-lib/tree/main/halo2-ecc/src)"
msgstr ""
"[More Optimized ECC Operations in halo2 by Axiom](https://github.com/axiom-"
"crypto/halo2-lib/tree/main/halo2-ecc/src)"

#: src/halo2/tmp/halo2-learning-materials.md:71
msgid "axiom libs."
msgstr "axiom libs."

#: src/halo2/tmp/halo2-learning-materials.md:72
msgid ""
"SY: We just open sourced a library of base components including range check "
"here: https://github.com/axiom-crypto/halo2-lib/blob/main/halo2-base/src/"
"gates/range.rs"
msgstr ""
"SY: We just open sourced a library of base components including range check "
"here: https://github.com/axiom-crypto/halo2-lib/blob/main/halo2-base/src/"
"gates/range.rs"

#: src/halo2/tmp/halo2-learning-materials.md:73
msgid ""
"https://axiom-crypto.github.io/halo2-lib/halo2_base/gates/range/trait."
"RangeInstructions.html#tymethod.is_less_than"
msgstr ""
"https://axiom-crypto.github.io/halo2-lib/halo2_base/gates/range/trait."
"RangeInstructions.html#tymethod.is_less_than"

#: src/halo2/tmp/halo2-learning-materials.md:74
msgid "This uses halo2-lib: https://github.com/axiom-crypto/halo2-lib"
msgstr "This uses halo2-lib: https://github.com/axiom-crypto/halo2-lib"

#: src/halo2/tmp/halo2-learning-materials.md:75
msgid ""
"YT: it looks like the axiom fork does variable-length Poseidon (https://"
"github.com/axiom-crypto/halo2/tree/main/primitives/poseidon):"
msgstr ""
"YT: it looks like the axiom fork does variable-length Poseidon (https://"
"github.com/axiom-crypto/halo2/tree/main/primitives/poseidon):"

#: src/halo2/tmp/halo2-learning-materials.md:76
msgid ""
"ECDSA: https://github.com/axiom-crypto/halo2-lib/blob/main/halo2-ecc/src/"
"secp256k1/tests/ecdsa.rs"
msgstr ""
"ECDSA: https://github.com/axiom-crypto/halo2-lib/blob/main/halo2-ecc/src/"
"secp256k1/tests/ecdsa.rs"

#: src/halo2/tmp/halo2-learning-materials.md:78
msgid "Others :"
msgstr "Others :"

#: src/halo2/tmp/halo2-learning-materials.md:79
msgid ""
"[Deep dive on Halo2](https://www.youtube.com/watch?v=YlTt12s7vGE&t=4770s)"
msgstr ""
"[Deep dive on Halo2](https://www.youtube.com/watch?v=YlTt12s7vGE&t=4770s)"

#: src/halo2/tmp/halo2-learning-materials.md:80
msgid ""
"[ZKSwap 团队详细解读——Halo2 原理](https://www.geekmeta.com/article/3704425."
"html)"
msgstr ""
"[ZKSwap 团队详细解读——Halo2 原理](https://www.geekmeta.com/article/3704425."
"html)"

#: src/halo2/tmp/halo2-learning-materials.md:81
msgid ""
"[Zero knowledge 2 Zero knowledge](https://mirror.xyz/searchblock.eth/"
"y11EKtXAtK3aXRVMV1yYqw7FibKHxI0fK10vlVRDaD4)"
msgstr ""
"[Zero knowledge 2 Zero knowledge](https://mirror.xyz/searchblock.eth/"
"y11EKtXAtK3aXRVMV1yYqw7FibKHxI0fK10vlVRDaD4)"

#: src/halo2/tmp/halo2-learning-materials.md:82
msgid "[EF grants halo2 Out of date.](https://github.com/EDGDrummond/EF-grant)"
msgstr ""
"[EF grants halo2 Out of date.](https://github.com/EDGDrummond/EF-grant)"

#: src/halo2/tmp/halo2-learning-materials.md:83
msgid "YouTube Series : "
msgstr "YouTube Series : "

#: src/halo2/tmp/halo2-learning-materials.md:84
msgid ""
"[zkEVM Audit Education Sessions 1/4 -Circuit Arithmetization for ZKP]"
"(https://www.youtube.com/watch?v=ofDcWqZAGK4)   workflow of halo2"
msgstr ""
"[zkEVM Audit Education Sessions 1/4 -Circuit Arithmetization for ZKP]"
"(https://www.youtube.com/watch?v=ofDcWqZAGK4)   workflow of halo2"

#: src/halo2/tmp/halo2-learning-materials.md:85
msgid ""
"[zkEVM Audit Education Sessions 2/4 -Fibonacci examples for PIL & Halo2]"
"(https://www.youtube.com/watch?v=luMnF1fHeIk)"
msgstr ""
"[zkEVM Audit Education Sessions 2/4 -Fibonacci examples for PIL & Halo2]"
"(https://www.youtube.com/watch?v=luMnF1fHeIk)"

#: src/halo2/tmp/halo2-learning-materials.md:86
msgid ""
"[zkEVM Audit Education Sessions 3/4 - Architecture and Workflow](https://www."
"youtube.com/watch?v=qbR5pwmRxKY)"
msgstr ""
"[zkEVM Audit Education Sessions 3/4 - Architecture and Workflow](https://www."
"youtube.com/watch?v=qbR5pwmRxKY)"

#: src/halo2/tmp/halo2-learning-materials.md:87
msgid ""
"[zkEVM Audit Education Sessions 4/4 - zkEVM Auditing & Lessons Learned]"
"(https://www.youtube.com/watch?v=gCKh6ySXYTU)"
msgstr ""
"[zkEVM Audit Education Sessions 4/4 - zkEVM Auditing & Lessons Learned]"
"(https://www.youtube.com/watch?v=gCKh6ySXYTU)"

#: src/halo2/tmp/halo2-learning-materials.md:88
msgid ""
"[Sin7Y Tech Review: Develop Circuits Using Halo 2](https://medium.com/"
"@ola_zkzkvm/sin7y-tech-review-develop-circuits-using-halo-2-829e2f26856#)"
msgstr ""
"[Sin7Y Tech Review: Develop Circuits Using Halo 2](https://medium.com/"
"@ola_zkzkvm/sin7y-tech-review-develop-circuits-using-halo-2-829e2f26856#)"

#: src/halo2/tmp/halo2-learning-materials.md:91
msgid "Records:"
msgstr "Records:"

#: src/halo2/tmp/halo2-learning-materials.md:92
msgid ""
"[Little Things I’ve Learned in Developing Halo2 Circuits by Chih-Cheng Liang "
"| Devcon Bogotá]()"
msgstr ""
"[Little Things I’ve Learned in Developing Halo2 Circuits by Chih-Cheng Liang "
"| Devcon Bogotá]()"

#: src/halo2/tmp/halo2-learning-materials.md:95
msgid "论文: BCH19 Recursive proof composition without a trusted Setup"
msgstr "论文: BCH19 Recursive proof composition without a trusted Setup"

#: src/halo2/tmp/1-Simple-Example.md:3 src/halo2/tmp/2-Fibonacci-example-1.md:3
#: src/halo2/tmp/3-Fibonacci-example-2.md:3
#: src/halo2/tmp/4-IsZero-Check-example-3.md:3
#: src/halo2/tmp/6-Range-Check(code-explanation).md:3
#: src/halo2/tmp/7-Range-Check-lookup(example-2).md:3
#: src/halo2/tmp/8-Range-Check(example-3).md:3 src/halo2/tmp/9-decomposed.md:3
msgid "author: [@Demian](https://github.com/Demian101)"
msgstr "author: [@Demian](https://github.com/Demian101)"

#: src/halo2/tmp/1-Simple-Example.md:5
msgid ""
"references: [https://learn.0xparc.org/halo2/](https://learn.0xparc.org/"
"halo2/)"
msgstr ""
"references: [https://learn.0xparc.org/halo2/](https://learn.0xparc.org/"
"halo2/)"

#: src/halo2/tmp/1-Simple-Example.md:7 src/halo2/tmp/2-Fibonacci-example-1.md:8
#: src/halo2/tmp/3-Fibonacci-example-2.md:8
#: src/halo2/tmp/4-IsZero-Check-example-3.md:8
#: src/halo2/tmp/6-Range-Check(code-explanation).md:7
#: src/halo2/tmp/7-Range-Check-lookup(example-2).md:7
#: src/halo2/tmp/8-Range-Check(example-3).md:8 src/halo2/tmp/Zordle.md:3
#: src/halo2/tmp/Hammster.md:3
msgid "[Overview](#overview)"
msgstr "[Overview](#overview)"

#: src/halo2/tmp/1-Simple-Example.md:8
msgid "[简单例子](#简单例子)"
msgstr "[简单例子](#简单例子)"

#: src/halo2/tmp/1-Simple-Example.md:9
msgid "[定义 instructions](#定义-instructions)"
msgstr "[定义 instructions](#定义-instructions)"

#: src/halo2/tmp/1-Simple-Example.md:10
msgid "[定义芯片的实现](#定义芯片的实现)"
msgstr "[定义芯片的实现](#定义芯片的实现)"

#: src/halo2/tmp/1-Simple-Example.md:11
msgid "[配置芯片](#配置芯片)"
msgstr "[配置芯片](#配置芯片)"

#: src/halo2/tmp/1-Simple-Example.md:12
msgid "[实现 chip Traits](#实现-chip-traits)"
msgstr "[实现 chip Traits](#实现-chip-traits)"

#: src/halo2/tmp/1-Simple-Example.md:13
msgid "[构建电路](#构建电路)"
msgstr "[构建电路](#构建电路)"

#: src/halo2/tmp/1-Simple-Example.md:14
msgid "[测试电路](#测试电路)"
msgstr "[测试电路](#测试电路)"

#: src/halo2/tmp/1-Simple-Example.md:15
msgid "[Code Ref / Full example](#code-ref--full-example)"
msgstr "[Code Ref / Full example](#code-ref--full-example)"

#: src/halo2/tmp/1-Simple-Example.md:16
#: src/halo2/tmp/4-IsZero-Check-example-3.md:17
msgid "[References:](#references)"
msgstr "[References:](#references)"

#: src/halo2/tmp/1-Simple-Example.md:17
msgid "[\\----- 中文版本 End ------](#------中文版本-end-------)"
msgstr "[\\----- 中文版本 End ------](#------中文版本-end-------)"

#: src/halo2/tmp/1-Simple-Example.md:18
msgid "[Simple Example](#simple-example)"
msgstr "[Simple Example](#simple-example)"

#: src/halo2/tmp/1-Simple-Example.md:19
msgid "[Define instructions](#define-instructions)"
msgstr "[Define instructions](#define-instructions)"

#: src/halo2/tmp/1-Simple-Example.md:20
msgid "[Define a chip implementation](#define-a-chip-implementation)"
msgstr "[Define a chip implementation](#define-a-chip-implementation)"

#: src/halo2/tmp/1-Simple-Example.md:21
msgid "[Configure the chip](#configure-the-chip)"
msgstr "[Configure the chip](#configure-the-chip)"

#: src/halo2/tmp/1-Simple-Example.md:22
msgid "[Implement chip Traits](#implement-chip-traits)"
msgstr "[Implement chip Traits](#implement-chip-traits)"

#: src/halo2/tmp/1-Simple-Example.md:23
msgid "[Build the Circuit](#build-the-circuit)"
msgstr "[Build the Circuit](#build-the-circuit)"

#: src/halo2/tmp/1-Simple-Example.md:24
msgid "[Testing the circuit](#testing-the-circuit)"
msgstr "[Testing the circuit](#testing-the-circuit)"

#: src/halo2/tmp/1-Simple-Example.md:25
msgid "[Code Ref / Full example](#code-ref--full-example-1)"
msgstr "[Code Ref / Full example](#code-ref--full-example-1)"

#: src/halo2/tmp/1-Simple-Example.md:26
msgid "[\\----- 问题 Question -----](#------问题-question------)"
msgstr "[\\----- 问题 Question -----](#------问题-question------)"

#: src/halo2/tmp/1-Simple-Example.md:31 src/halo2/tmp/1-Simple-Example.md:235
msgid "![](imgs/1/Pastedimage20230912220538.png)"
msgstr "![](imgs/1/Pastedimage20230912220538.png)"

#: src/halo2/tmp/1-Simple-Example.md:33
msgid "![](imgs/1/Pastedimage20230912162739.png)"
msgstr "![](imgs/1/Pastedimage20230912162739.png)"

#: src/halo2/tmp/1-Simple-Example.md:36
msgid "![](./imgs/1/2023-08-25-050418.png)"
msgstr "![](./imgs/1/2023-08-25-050418.png)"

#: src/halo2/tmp/1-Simple-Example.md:38
msgid "简单例子"
msgstr "简单例子"

#: src/halo2/tmp/1-Simple-Example.md:40
msgid ""
"我们先从一个简单的电路开始，介绍常用的 API 以及它们的使用方法。 该电路将采用 "
"public input `c`，并将证明两个 private inputs "
msgstr ""
"我们先从一个简单的电路开始，介绍常用的 API 以及它们的使用方法。 该电路将采用 "
"public input `c`，并将证明两个 private inputs "

#: src/halo2/tmp/1-Simple-Example.md:40 src/halo2/tmp/1-Simple-Example.md:438
msgid " and "
msgstr " and "

#: src/halo2/tmp/1-Simple-Example.md:40
msgid " 的知识，以使 "
msgstr " 的知识，以使 "

#: src/halo2/tmp/1-Simple-Example.md:42
msgid ""
"[定义 instructions](https://zcash.github.io/halo2/user/simple-example."
"html#define-instructions)"
msgstr ""
"[定义 instructions](https://zcash.github.io/halo2/user/simple-example."
"html#define-instructions)"

#: src/halo2/tmp/1-Simple-Example.md:44
msgid "首先，我们需要定义我们的电路所依赖的指令集(instructions)"
msgstr "首先，我们需要定义我们的电路所依赖的指令集(instructions)"

#: src/halo2/tmp/1-Simple-Example.md:46
msgid ""
"Instructions 介于 high-level gadgets 和底层的电路操作之间。指令既可以细粒度也"
"可以粗粒度，但在实践中，指令的功能应当足够小，这样可以重复使用；但又要足够"
"大，这样可以优化它的实现。设计者应当在这两者之间取得平衡"
msgstr ""
"Instructions 介于 high-level gadgets 和底层的电路操作之间。指令既可以细粒度也"
"可以粗粒度，但在实践中，指令的功能应当足够小，这样可以重复使用；但又要足够"
"大，这样可以优化它的实现。设计者应当在这两者之间取得平衡"

#: src/halo2/tmp/1-Simple-Example.md:48
msgid "对于我们的电路，我们将使用三个 instructions："
msgstr "对于我们的电路，我们将使用三个 instructions："

#: src/halo2/tmp/1-Simple-Example.md:49
msgid "将 private number 加载到电路中。"
msgstr "将 private number 加载到电路中。"

#: src/halo2/tmp/1-Simple-Example.md:50
msgid "两个数字相乘。"
msgstr "两个数字相乘。"

#: src/halo2/tmp/1-Simple-Example.md:51
msgid "将数字公开(Expose) 为电路的 public input。"
msgstr "将数字公开(Expose) 为电路的 public input。"

#: src/halo2/tmp/1-Simple-Example.md:53
msgid ""
"我们还需要一个代表数字的变量的类型(`type Num`)。指令接口(Instruction "
"interfaces) 为其输入和输出提供关联类型(associated types)，以允许实现以对其优"
"化目标最有意义的方式表示这些类型 (to allow the implementations to represent "
"these in a way that makes the most sense for their optimization goals.)"
msgstr ""
"我们还需要一个代表数字的变量的类型(`type Num`)。指令接口(Instruction "
"interfaces) 为其输入和输出提供关联类型(associated types)，以允许实现以对其优"
"化目标最有意义的方式表示这些类型 (to allow the implementations to represent "
"these in a way that makes the most sense for their optimization goals.)"

#: src/halo2/tmp/1-Simple-Example.md:55
msgid ""
"```rust\n"
"trait NumericInstructions<F: Field>: Chip<F> {\n"
"    /// Variable representing a number. 用于表示一个数的变量\n"
"    type Num;\n"
"\n"
"    /// Loads a number into the circuit as a private input. 加载隐私输入\n"
"    fn load_private(&self, layouter: impl Layouter<F>, a: Value<F>) -> "
"Result<Self::Num, Error>;\n"
"\n"
"    /// Loads a number into the circuit as a fixed constant.\n"
"    fn load_constant(&self, layouter: impl Layouter<F>, constant: F) -> "
"Result<Self::Num, Error>;\n"
"\n"
"    /// Returns `c = a * b`.\n"
"    fn mul(\n"
"        &self,\n"
"        layouter: impl Layouter<F>,\n"
"        a: Self::Num,\n"
"        b: Self::Num,\n"
"    ) -> Result<Self::Num, Error>;\n"
"\n"
"    /// Exposes a number as a public input to the circuit.\n"
"    /// 将一个数置为电路的公开输入\n"
"    fn expose_public(\n"
"        &self,\n"
"        layouter: impl Layouter<F>,\n"
"        num: Self::Num,\n"
"        row: usize,\n"
"    ) -> Result<(), Error>;\n"
"}\n"
"```"
msgstr ""
"```rust\n"
"trait NumericInstructions<F: Field>: Chip<F> {\n"
"    /// Variable representing a number. 用于表示一个数的变量\n"
"    type Num;\n"
"\n"
"    /// Loads a number into the circuit as a private input. 加载隐私输入\n"
"    fn load_private(&self, layouter: impl Layouter<F>, a: Value<F>) -> "
"Result<Self::Num, Error>;\n"
"\n"
"    /// Loads a number into the circuit as a fixed constant.\n"
"    fn load_constant(&self, layouter: impl Layouter<F>, constant: F) -> "
"Result<Self::Num, Error>;\n"
"\n"
"    /// Returns `c = a * b`.\n"
"    fn mul(\n"
"        &self,\n"
"        layouter: impl Layouter<F>,\n"
"        a: Self::Num,\n"
"        b: Self::Num,\n"
"    ) -> Result<Self::Num, Error>;\n"
"\n"
"    /// Exposes a number as a public input to the circuit.\n"
"    /// 将一个数置为电路的公开输入\n"
"    fn expose_public(\n"
"        &self,\n"
"        layouter: impl Layouter<F>,\n"
"        num: Self::Num,\n"
"        row: usize,\n"
"    ) -> Result<(), Error>;\n"
"}\n"
"```"

#: src/halo2/tmp/1-Simple-Example.md:85 src/halo2/tmp/1-Simple-Example.md:483
msgid "Among them,"
msgstr "Among them,"

#: src/halo2/tmp/1-Simple-Example.md:86
msgid "_Num_ 用于适配此 interface 中处理的类型"
msgstr "_Num_ 用于适配此 interface 中处理的类型"

#: src/halo2/tmp/1-Simple-Example.md:87
msgid "_load_private_ 用于加载 witness"
msgstr "_load_private_ 用于加载 witness"

#: src/halo2/tmp/1-Simple-Example.md:88
msgid "_load_constant_ 用于加载常量 (constant)"
msgstr "_load_constant_ 用于加载常量 (constant)"

#: src/halo2/tmp/1-Simple-Example.md:89
msgid "_mul_ 用于计算两个数字的乘法"
msgstr "_mul_ 用于计算两个数字的乘法"

#: src/halo2/tmp/1-Simple-Example.md:90
msgid "_expose_public_ 用于设置实例 (instance)"
msgstr "_expose_public_ 用于设置实例 (instance)"

#: src/halo2/tmp/1-Simple-Example.md:92
msgid ""
"[定义芯片的实现](https://zcash.github.io/halo2/user/simple-example."
"html#define-a-chip-implementation)"
msgstr ""
"[定义芯片的实现](https://zcash.github.io/halo2/user/simple-example."
"html#define-a-chip-implementation)"

#: src/halo2/tmp/1-Simple-Example.md:94
msgid ""
"对于我们的电路，我们将构建一个[芯片(chip)](https://zcash.github.io/halo2/"
"concepts/chips.html)，在有限域上实现提到的 Numeric Instruction (`trait "
"NumericInstructions`)"
msgstr ""
"对于我们的电路，我们将构建一个[芯片(chip)](https://zcash.github.io/halo2/"
"concepts/chips.html)，在有限域上实现提到的 Numeric Instruction (`trait "
"NumericInstructions`)"

#: src/halo2/tmp/1-Simple-Example.md:96
msgid "如果您想开发自定义 chip，则需要去实现 Halo 2 的 _chip_ Trait"
msgstr "如果您想开发自定义 chip，则需要去实现 Halo 2 的 _chip_ Trait"

#: src/halo2/tmp/1-Simple-Example.md:98
msgid ""
"大多数时候，使用 Halo 2 进行电路开发不需要自己定义 Instructions 和 chip。 但"
"如果你需要使用 Halo 2 没有提供的复杂算法，就需要自己实现（例如实现一种新兴的"
"密码算法）。"
msgstr ""
"大多数时候，使用 Halo 2 进行电路开发不需要自己定义 Instructions 和 chip。 但"
"如果你需要使用 Halo 2 没有提供的复杂算法，就需要自己实现（例如实现一种新兴的"
"密码算法）。"

#: src/halo2/tmp/1-Simple-Example.md:100
msgid ""
"```rust\n"
"/// 这块芯片将实现我们的指令集 instructions！\n"
"/// 芯片存储它们自己的配置，以及(如有必要的) 类型标记\n"
"struct FieldChip<F: Field> {\n"
"    config: FieldConfig,\n"
"    _marker: PhantomData<F>,\n"
"}\n"
"```"
msgstr ""
"```rust\n"
"/// 这块芯片将实现我们的指令集 instructions！\n"
"/// 芯片存储它们自己的配置，以及(如有必要的) 类型标记\n"
"struct FieldChip<F: Field> {\n"
"    config: FieldConfig,\n"
"    _marker: PhantomData<F>,\n"
"}\n"
"```"

#: src/halo2/tmp/1-Simple-Example.md:109
msgid ""
"每一个\"芯片\"类型**都要实现 `Chip` trait** , `Chip` trait 定义了 `Layouter` "
"在 synthesizing 电路时可能需要的关于电路的某些属性，以及若将该芯片加载到电路"
"所需要设置的任何初始状态"
msgstr ""
"每一个\"芯片\"类型**都要实现 `Chip` trait** , `Chip` trait 定义了 `Layouter` "
"在 synthesizing 电路时可能需要的关于电路的某些属性，以及若将该芯片加载到电路"
"所需要设置的任何初始状态"

#: src/halo2/tmp/1-Simple-Example.md:110 src/halo2/tmp/1-Simple-Example.md:508
msgid "synthesizing 电路 : 一般指的是类似 R1CS 那种写约束的意思"
msgstr "synthesizing 电路 : 一般指的是类似 R1CS 那种写约束的意思"

#: src/halo2/tmp/1-Simple-Example.md:112
msgid ""
"```rust\n"
"/// Every chip needs to implement the `Chip` trait !!\n"
"impl<F: FieldExt> Chip<F> for FieldChip<F> {\n"
"    type Config = FieldConfig;\n"
"    type Loaded = ();\n"
"\n"
"    fn config(&self) -> &Self::Config {\n"
"        &self.config\n"
"    }\n"
"\n"
"    fn loaded(&self) -> &Self::Loaded {\n"
"        &()\n"
"    }\n"
"}\n"
"```"
msgstr ""
"```rust\n"
"/// Every chip needs to implement the `Chip` trait !!\n"
"impl<F: FieldExt> Chip<F> for FieldChip<F> {\n"
"    type Config = FieldConfig;\n"
"    type Loaded = ();\n"
"\n"
"    fn config(&self) -> &Self::Config {\n"
"        &self.config\n"
"    }\n"
"\n"
"    fn loaded(&self) -> &Self::Loaded {\n"
"        &()\n"
"    }\n"
"}\n"
"```"

#: src/halo2/tmp/1-Simple-Example.md:128
msgid ""
"[配置芯片](https://zcash.github.io/halo2/user/simple-example.html#configure-"
"the-chip)"
msgstr ""
"[配置芯片](https://zcash.github.io/halo2/user/simple-example.html#configure-"
"the-chip)"

#: src/halo2/tmp/1-Simple-Example.md:130
msgid ""
"接下来需要为芯片 `chip` 配置好实现我们想要的功能所需要的那些列、置换、门"
"（columns, permutations, and gates）："
msgstr ""
"接下来需要为芯片 `chip` 配置好实现我们想要的功能所需要的那些列、置换、门"
"（columns, permutations, and gates）："

#: src/halo2/tmp/1-Simple-Example.md:132
msgid ""
"```rust\n"
"/// 芯片 chip 的状态被存储在一个 FieldConfig 结构体中，它是在配置过程中由 "
"chip 生成，\n"
"/// 并且存储在芯片内部 (type Config = FieldConfig;)\n"
"#[derive(Clone, Debug)]\n"
"struct FieldConfig {\n"
"    /// 对于这块芯片，我们将用到两个 advice 列来实现我们的指令集。\n"
"    /// 它们也是我们与电路其他部分进行通信的列。\n"
"    advice: [Column<Advice>; 2],\n"
"    instance: Column<Instance>, // public input 列（instance）\n"
"\n"
"    // 我们需要一个 selector 来激活乘法门，在用不到 `NumericInstructions::"
"mul`指令的 cells\n"
"    // 上不设置任何约束。这非常重要，尤其在构建更大型的电路的情况下，列会被多"
"条指令集用到\n"
"    s_mul: Selector,\n"
"}\n"
"```"
msgstr ""
"```rust\n"
"/// 芯片 chip 的状态被存储在一个 FieldConfig 结构体中，它是在配置过程中由 "
"chip 生成，\n"
"/// 并且存储在芯片内部 (type Config = FieldConfig;)\n"
"#[derive(Clone, Debug)]\n"
"struct FieldConfig {\n"
"    /// 对于这块芯片，我们将用到两个 advice 列来实现我们的指令集。\n"
"    /// 它们也是我们与电路其他部分进行通信的列。\n"
"    advice: [Column<Advice>; 2],\n"
"    instance: Column<Instance>, // public input 列（instance）\n"
"\n"
"    // 我们需要一个 selector 来激活乘法门，在用不到 `NumericInstructions::"
"mul`指令的 cells\n"
"    // 上不设置任何约束。这非常重要，尤其在构建更大型的电路的情况下，列会被多"
"条指令集用到\n"
"    s_mul: Selector,\n"
"}\n"
"```"

#: src/halo2/tmp/1-Simple-Example.md:148 src/halo2/tmp/1-Simple-Example.md:549
msgid "下面我们来构建约束 :"
msgstr "下面我们来构建约束 :"

#: src/halo2/tmp/1-Simple-Example.md:149
msgid "最关键的函数 _configure_ 和 _enable_equality_ 用于检查传入参数的相等性"
msgstr "最关键的函数 _configure_ 和 _enable_equality_ 用于检查传入参数的相等性"

#: src/halo2/tmp/1-Simple-Example.md:150 src/halo2/tmp/1-Simple-Example.md:551
msgid "如下图 : 在 `create_gate` 函数中 :"
msgstr "如下图 : 在 `create_gate` 函数中 :"

#: src/halo2/tmp/1-Simple-Example.md:151 src/halo2/tmp/1-Simple-Example.md:552
msgid "乘数 "
msgstr "乘数 "

#: src/halo2/tmp/1-Simple-Example.md:151 src/halo2/tmp/1-Simple-Example.md:552
msgid " 分别在同一行的 "
msgstr " 分别在同一行的 "

#: src/halo2/tmp/1-Simple-Example.md:151 src/halo2/tmp/1-Simple-Example.md:552
msgid "  advice 列  ;"
msgstr "  advice 列  ;"

#: src/halo2/tmp/1-Simple-Example.md:152 src/halo2/tmp/1-Simple-Example.md:553
msgid "乘积 "
msgstr "乘积 "

#: src/halo2/tmp/1-Simple-Example.md:152 src/halo2/tmp/1-Simple-Example.md:553
msgid " 同在 "
msgstr " 同在 "

#: src/halo2/tmp/1-Simple-Example.md:152 src/halo2/tmp/1-Simple-Example.md:553
msgid " 列, "
msgstr " 列, "

#: src/halo2/tmp/1-Simple-Example.md:152 src/halo2/tmp/1-Simple-Example.md:553
msgid "  的下一行 :"
msgstr "  的下一行 :"

#: src/halo2/tmp/1-Simple-Example.md:153
msgid "可以看到在代码中, 都是使用相对位置(relative position) 来描述的 !"
msgstr "可以看到在代码中, 都是使用相对位置(relative position) 来描述的 !"

#: src/halo2/tmp/1-Simple-Example.md:154 src/halo2/tmp/1-Simple-Example.md:555
msgid ""
"```rust\n"
"// | a0  | a1  | s_mul |\n"
"// |-----|-----|-------|\n"
"// | lhs | rhs | s_mul |\n"
"// | out |     |       |\n"
"let lhs = meta.query_advice(advice[0], Rotation::cur());\n"
"let rhs = meta.query_advice(advice[1], Rotation::cur());\n"
"let out = meta.query_advice(advice[0], Rotation::next()); // Attention !!\n"
"```"
msgstr ""
"```rust\n"
"// | a0  | a1  | s_mul |\n"
"// |-----|-----|-------|\n"
"// | lhs | rhs | s_mul |\n"
"// | out |     |       |\n"
"let lhs = meta.query_advice(advice[0], Rotation::cur());\n"
"let rhs = meta.query_advice(advice[1], Rotation::cur());\n"
"let out = meta.query_advice(advice[0], Rotation::next()); // Attention !!\n"
"```"

#: src/halo2/tmp/1-Simple-Example.md:164 src/halo2/tmp/1-Simple-Example.md:565
msgid "最后函数返回多项式约束："
msgstr "最后函数返回多项式约束："

#: src/halo2/tmp/1-Simple-Example.md:165
msgid "若选择器(Selector) `s_mul` 不为 0，则**激活**校验乘法约束 :"
msgstr "若选择器(Selector) `s_mul` 不为 0，则**激活**校验乘法约束 :"

#: src/halo2/tmp/1-Simple-Example.md:166
msgid ""
"当 `s_mul * (lhs * rhs - out) == 0`，则说明 _lhs * rhs = out_ 约束成立；"
msgstr ""
"当 `s_mul * (lhs * rhs - out) == 0`，则说明 _lhs * rhs = out_ 约束成立；"

#: src/halo2/tmp/1-Simple-Example.md:167
msgid ""
"当 `s_mul * (lhs * rhs - out) != 0`，说明  _lhs * rhs = out_ 约束不成立！！程"
"序报错"
msgstr ""
"当 `s_mul * (lhs * rhs - out) != 0`，说明  _lhs * rhs = out_ 约束不成立！！程"
"序报错"

#: src/halo2/tmp/1-Simple-Example.md:168
msgid ""
"若 `s_mul` 为 0，则**不会激活**检查乘法约束，any subsequent values are fine！"
msgstr ""
"若 `s_mul` 为 0，则**不会激活**检查乘法约束，any subsequent values are fine！"

#: src/halo2/tmp/1-Simple-Example.md:170
msgid ""
"```rust\n"
"impl<F: FieldExt> FieldChip<F> {\n"
"    fn construct(config: <Self as Chip<F>>::Config) -> Self {\n"
"        Self {\n"
"            config,\n"
"            _marker: PhantomData,\n"
"        }\n"
"    }\n"
"\n"
"    fn configure(\n"
"        meta: &mut ConstraintSystem<F>,\n"
"        advice: [Column<Advice>; 2],\n"
"        instance: Column<Instance>,\n"
"        constant: Column<Fixed>,\n"
"    ) -> <Self as Chip<F>>::Config {\n"
"        meta.enable_equality(instance);\n"
"        meta.enable_constant(constant);\n"
"        for column in &advice {\n"
"            meta.enable_equality(*column);\n"
"        }\n"
"        let s_mul = meta.selector();\n"
"\n"
"        // 定义我们的乘法门（multiplication gate）\n"
"        meta.create_gate(\"mul\", |meta| {\n"
"            // To implement multiplication, we need 3 advice `cells`\n"
"            // and 1 selector.  We arrange them like so:\n"
"            //\n"
"            // | a0  | a1  | s_mul |\n"
"            // |-----|-----|-------|\n"
"            // | lhs | rhs | s_mul |\n"
"            // | out |     |       |\n"
"            //\n"
"            // 门可以用任意相对偏移(relative offsets)，但每一个 offset 都会增"
"加证明的开销\n"
"            // 最常见的偏移值 offset 是 0 (当前行), 1(下一行), -1(上一行)。\n"
"            // 这 3 种情况 `Rotation` 都有特定的 constructors : cur/next/"
"prev\n"
"            let lhs = meta.query_advice(advice[0], Rotation::cur());\n"
"            let rhs = meta.query_advice(advice[1], Rotation::cur());\n"
"            let out = meta.query_advice(advice[0], Rotation::next());\n"
"            let s_mul = meta.query_selector(s_mul);\n"
"\n"
"            // Finally, we return the polynomial expressions that constrain "
"this gate.\n"
"            // 最终，我们将约束门的多项式表达式返回. 对于目前的乘法门，仅需要"
"一个多项式约束\n"
"            //\n"
"            // `create_gate` 函数返回的多项式表达式，在 proving system 中会被"
"约束等于 0.\n"
"            // 约束表达式有以下性质：\n"
"            // - 当 s_mul = 0 时，lhs, rhs, out 可以是任意值。\n"
"            // - 当 s_mul != 0 时，lhs, rhs, out 需要满足 lhs * rhs = out 这"
"条约束。\n"
"            vec![s_mul * (lhs * rhs - out)]\n"
"        });\n"
"\n"
"        FieldConfig {\n"
"            advice,\n"
"            instance,\n"
"            s_mul,\n"
"        }\n"
"    }\n"
"}\n"
"```"
msgstr ""
"```rust\n"
"impl<F: FieldExt> FieldChip<F> {\n"
"    fn construct(config: <Self as Chip<F>>::Config) -> Self {\n"
"        Self {\n"
"            config,\n"
"            _marker: PhantomData,\n"
"        }\n"
"    }\n"
"\n"
"    fn configure(\n"
"        meta: &mut ConstraintSystem<F>,\n"
"        advice: [Column<Advice>; 2],\n"
"        instance: Column<Instance>,\n"
"        constant: Column<Fixed>,\n"
"    ) -> <Self as Chip<F>>::Config {\n"
"        meta.enable_equality(instance);\n"
"        meta.enable_constant(constant);\n"
"        for column in &advice {\n"
"            meta.enable_equality(*column);\n"
"        }\n"
"        let s_mul = meta.selector();\n"
"\n"
"        // 定义我们的乘法门（multiplication gate）\n"
"        meta.create_gate(\"mul\", |meta| {\n"
"            // To implement multiplication, we need 3 advice `cells`\n"
"            // and 1 selector.  We arrange them like so:\n"
"            //\n"
"            // | a0  | a1  | s_mul |\n"
"            // |-----|-----|-------|\n"
"            // | lhs | rhs | s_mul |\n"
"            // | out |     |       |\n"
"            //\n"
"            // 门可以用任意相对偏移(relative offsets)，但每一个 offset 都会增"
"加证明的开销\n"
"            // 最常见的偏移值 offset 是 0 (当前行), 1(下一行), -1(上一行)。\n"
"            // 这 3 种情况 `Rotation` 都有特定的 constructors : cur/next/"
"prev\n"
"            let lhs = meta.query_advice(advice[0], Rotation::cur());\n"
"            let rhs = meta.query_advice(advice[1], Rotation::cur());\n"
"            let out = meta.query_advice(advice[0], Rotation::next());\n"
"            let s_mul = meta.query_selector(s_mul);\n"
"\n"
"            // Finally, we return the polynomial expressions that constrain "
"this gate.\n"
"            // 最终，我们将约束门的多项式表达式返回. 对于目前的乘法门，仅需要"
"一个多项式约束\n"
"            //\n"
"            // `create_gate` 函数返回的多项式表达式，在 proving system 中会被"
"约束等于 0.\n"
"            // 约束表达式有以下性质：\n"
"            // - 当 s_mul = 0 时，lhs, rhs, out 可以是任意值。\n"
"            // - 当 s_mul != 0 时，lhs, rhs, out 需要满足 lhs * rhs = out 这"
"条约束。\n"
"            vec![s_mul * (lhs * rhs - out)]\n"
"        });\n"
"\n"
"        FieldConfig {\n"
"            advice,\n"
"            instance,\n"
"            s_mul,\n"
"        }\n"
"    }\n"
"}\n"
"```"

#: src/halo2/tmp/1-Simple-Example.md:229
msgid "到目前为止，我们对电路的实现的大致过程是："
msgstr "到目前为止，我们对电路的实现的大致过程是："

#: src/halo2/tmp/1-Simple-Example.md:230
msgid ""
"定义一套指令集（NumericInstructions），这是一套操作码，用来控制\"计算机\"(芯"
"片)"
msgstr ""
"定义一套指令集（NumericInstructions），这是一套操作码，用来控制\"计算机\"(芯"
"片)"

#: src/halo2/tmp/1-Simple-Example.md:231
msgid "变出一块芯片（定义在有限域上），就像是一块电路板"
msgstr "变出一块芯片（定义在有限域上），就像是一块电路板"

#: src/halo2/tmp/1-Simple-Example.md:232
msgid ""
"有了”指令集“和”电路板“，我们可以选择一些元件来对该电路板子实现特定功能"
"(struct FieldConfig)，例如，如果想实现声控功能，我们需要电容麦，模拟-数字转换"
"器 (ADC)，二极管... 在 halo2 中，我们就需要选取需要的 column: advice/"
"instance/constant/selectors ...."
msgstr ""
"有了”指令集“和”电路板“，我们可以选择一些元件来对该电路板子实现特定功能"
"(struct FieldConfig)，例如，如果想实现声控功能，我们需要电容麦，模拟-数字转换"
"器 (ADC)，二极管... 在 halo2 中，我们就需要选取需要的 column: advice/"
"instance/constant/selectors ...."

#: src/halo2/tmp/1-Simple-Example.md:233
msgid "有了这些元器件，我们需要按照执行逻辑将其连接起来(fn configure())"
msgstr "有了这些元器件，我们需要按照执行逻辑将其连接起来(fn configure())"

#: src/halo2/tmp/1-Simple-Example.md:237
msgid ""
"[实现 chip Traits](https://trapdoor-tech.github.io/halo2-book-chinese/user/"
"simple-example.html#%E5%AE%9E%E7%8E%B0%E8%8A%AF%E7%89%87%E5%8A%9F%E8%83%BD)"
msgstr ""
"[实现 chip Traits](https://trapdoor-tech.github.io/halo2-book-chinese/user/"
"simple-example.html#%E5%AE%9E%E7%8E%B0%E8%8A%AF%E7%89%87%E5%8A%9F%E8%83%BD)"

#: src/halo2/tmp/1-Simple-Example.md:239
msgid ""
"我们前面定义的 `instructions interface` 需要 implemention，定义 "
"`NumericInstructions` 的实现就是封装 finite field elements."
msgstr ""
"我们前面定义的 `instructions interface` 需要 implemention，定义 "
"`NumericInstructions` 的实现就是封装 finite field elements."

#: src/halo2/tmp/1-Simple-Example.md:241
msgid ""
"It should be noted that, 除了行和列之外，Cell 单元的位置还可以通过相对位置偏"
"移(relative position offset) 来确定)"
msgstr ""
"It should be noted that, 除了行和列之外，Cell 单元的位置还可以通过相对位置偏"
"移(relative position offset) 来确定)"

#: src/halo2/tmp/1-Simple-Example.md:243
msgid ""
"Generally, there are `3` types of offsets, `0` representing the current "
"position, `1` representing the next position, and `-1` representing the "
"previous position."
msgstr ""
"Generally, there are `3` types of offsets, `0` representing the current "
"position, `1` representing the next position, and `-1` representing the "
"previous position."

#: src/halo2/tmp/1-Simple-Example.md:245
msgid ""
"```rust\n"
"struct Number<F: Field>(AssignedCell<F, F>); /// 用于表示数的 struct\n"
"\n"
"impl<F: FieldExt> NumericInstructions<F> for FieldChip<F> {\n"
"    type Num = Number<F>;\n"
"    fn load_private(){ ... }\n"
"    fn load_constant(){ ... }\n"
"\n"
"    fn mul(\n"
"        &self,\n"
"        mut layouter: impl Layouter<F>,\n"
"        a: Self::Num,\n"
"        b: Self::Num,\n"
"    ) -> Result<Self::Num, Error> {\n"
"        let config = self.config();\n"
"\n"
"        layouter.assign_region(\n"
"            || \"mul\",\n"
"            |mut region: Region<'_, F>| {\n"
"                // 在此 region 中，我们只想用一个乘法门，所以我们在 region "
"offset=0 处激活它；\n"
"                // 这意味着它将对 offsets 0 and 1 处的 2 个 cells 都进行约束"
"(为啥？)\n"
"                config.s_mul.enable(&mut region, 0)?;\n"
"\n"
"                // 给我们的输入(a: Self::Num / b: Self::Num,) 有可能在电路的"
"任何位置.\n"
"                // 但在region 中，我们只能依靠相对偏移。所以我们需要在 "
"region 内分配新的 cells\n"
"                // 并限制新分配的 cells 的值 与输入(a: Self::Num / b: Self::"
"Num,) 的值相等。\n"
"                a.0.copy_advice(|| \"lhs\", &mut region, config.advice[0], "
"0)?;\n"
"                b.0.copy_advice(|| \"rhs\", &mut region, config.advice[1], "
"0)?;\n"
"\n"
"                // 现在我们可以把乘积放到输出的位置了。\n"
"                let value = a.0.value().copied() * b.0.value();\n"
"\n"
"\t\t\t\t// 最后，我们对输出进行赋值，返回一个要在电路的另一部分使用的变量\n"
"                region\n"
"                    .assign_advice(|| \"lhs * rhs\", config.advice[0], 1, || "
"value)\n"
"                    .map(Number)\n"
"            },\n"
"        )\n"
"    }\n"
"    fn expose_public(\n"
"        &self,\n"
"        mut layouter: impl Layouter<F>,\n"
"        num: Self::Num,\n"
"        row: usize,\n"
"    ) -> Result<(), Error> {\n"
"        let config = self.config();\n"
"\n"
"        layouter.constrain_instance(num.0.cell(), config.instance, row)\n"
"    }\n"
"}\n"
"```"
msgstr ""
"```rust\n"
"struct Number<F: Field>(AssignedCell<F, F>); /// 用于表示数的 struct\n"
"\n"
"impl<F: FieldExt> NumericInstructions<F> for FieldChip<F> {\n"
"    type Num = Number<F>;\n"
"    fn load_private(){ ... }\n"
"    fn load_constant(){ ... }\n"
"\n"
"    fn mul(\n"
"        &self,\n"
"        mut layouter: impl Layouter<F>,\n"
"        a: Self::Num,\n"
"        b: Self::Num,\n"
"    ) -> Result<Self::Num, Error> {\n"
"        let config = self.config();\n"
"\n"
"        layouter.assign_region(\n"
"            || \"mul\",\n"
"            |mut region: Region<'_, F>| {\n"
"                // 在此 region 中，我们只想用一个乘法门，所以我们在 region "
"offset=0 处激活它；\n"
"                // 这意味着它将对 offsets 0 and 1 处的 2 个 cells 都进行约束"
"(为啥？)\n"
"                config.s_mul.enable(&mut region, 0)?;\n"
"\n"
"                // 给我们的输入(a: Self::Num / b: Self::Num,) 有可能在电路的"
"任何位置.\n"
"                // 但在region 中，我们只能依靠相对偏移。所以我们需要在 "
"region 内分配新的 cells\n"
"                // 并限制新分配的 cells 的值 与输入(a: Self::Num / b: Self::"
"Num,) 的值相等。\n"
"                a.0.copy_advice(|| \"lhs\", &mut region, config.advice[0], "
"0)?;\n"
"                b.0.copy_advice(|| \"rhs\", &mut region, config.advice[1], "
"0)?;\n"
"\n"
"                // 现在我们可以把乘积放到输出的位置了。\n"
"                let value = a.0.value().copied() * b.0.value();\n"
"\n"
"\t\t\t\t// 最后，我们对输出进行赋值，返回一个要在电路的另一部分使用的变量\n"
"                region\n"
"                    .assign_advice(|| \"lhs * rhs\", config.advice[0], 1, || "
"value)\n"
"                    .map(Number)\n"
"            },\n"
"        )\n"
"    }\n"
"    fn expose_public(\n"
"        &self,\n"
"        mut layouter: impl Layouter<F>,\n"
"        num: Self::Num,\n"
"        row: usize,\n"
"    ) -> Result<(), Error> {\n"
"        let config = self.config();\n"
"\n"
"        layouter.constrain_instance(num.0.cell(), config.instance, row)\n"
"    }\n"
"}\n"
"```"

#: src/halo2/tmp/1-Simple-Example.md:297
msgid ""
"[构建电路](https://trapdoor-tech.github.io/halo2-book-chinese/user/simple-"
"example.html#%E6%9E%84%E9%80%A0%E7%94%B5%E8%B7%AF)"
msgstr ""
"[构建电路](https://trapdoor-tech.github.io/halo2-book-chinese/user/simple-"
"example.html#%E6%9E%84%E9%80%A0%E7%94%B5%E8%B7%AF)"

#: src/halo2/tmp/1-Simple-Example.md:299
msgid ""
"现在我们有了所需的指令以及实现它们的芯片，我们终于可以构建我们的电路了！"
msgstr ""
"现在我们有了所需的指令以及实现它们的芯片，我们终于可以构建我们的电路了！"

#: src/halo2/tmp/1-Simple-Example.md:301
msgid ""
"**circuit** Trait 是电路开发的入口。 我们需要定义自己的电路结构并访问 "
"_witness_ input"
msgstr ""
"**circuit** Trait 是电路开发的入口。 我们需要定义自己的电路结构并访问 "
"_witness_ input"

#: src/halo2/tmp/1-Simple-Example.md:303 src/halo2/tmp/1-Simple-Example.md:724
msgid "struct `MyCircuit` :"
msgstr "struct `MyCircuit` :"

#: src/halo2/tmp/1-Simple-Example.md:304 src/halo2/tmp/1-Simple-Example.md:725
msgid ""
"在这个结构体中，我们保存隐私输入变量。我们使用  `Option<F>` 类型是因为，在生"
"成密钥阶段，他们不需要有任何的值。在证明阶段中，如果它们任一为 `None` 的话，"
"将得到一个错误。"
msgstr ""
"在这个结构体中，我们保存隐私输入变量。我们使用  `Option<F>` 类型是因为，在生"
"成密钥阶段，他们不需要有任何的值。在证明阶段中，如果它们任一为 `None` 的话，"
"将得到一个错误。"

#: src/halo2/tmp/1-Simple-Example.md:306 src/halo2/tmp/1-Simple-Example.md:727
msgid ""
"The interfaces defined before are all used here. _configure_ creates a "
"storage column for advice/instance/constant. _synthesize_ uses a custom chip "
"to get the input witness and constant, and finally, calculate the result and "
"return the public input."
msgstr ""
"The interfaces defined before are all used here. _configure_ creates a "
"storage column for advice/instance/constant. _synthesize_ uses a custom chip "
"to get the input witness and constant, and finally, calculate the result and "
"return the public input."

#: src/halo2/tmp/1-Simple-Example.md:308 src/halo2/tmp/1-Simple-Example.md:729
msgid ""
"In fact, it can satisfy most scenarios by simply implementing "
"the _circuit_ trait for general circuit development. Some common functions "
"of the chip have already been implemented in Halo 2."
msgstr ""
"In fact, it can satisfy most scenarios by simply implementing "
"the _circuit_ trait for general circuit development. Some common functions "
"of the chip have already been implemented in Halo 2."

#: src/halo2/tmp/1-Simple-Example.md:310
msgid ""
"```rust\n"
"// Store the private input variables in this circuit.\n"
"// Value<F> 用了 Option<F>,  因为在 key generation 阶段这个 struct 不会有值\n"
"// 而在 Proving 阶段，如果任意位置为空就会 throw Error.\n"
"struct MyCircuit<F: Field> {\n"
"    constant: F,\n"
"    a: Value<F>,\n"
"    b: Value<F>,\n"
"}\n"
"\n"
"impl<F: Field> Circuit<F> for MyCircuit<F> {\n"
"    // 因为 we are using a single chip for everything，所以我们可以重用它的配"
"置。\n"
"    type Config = FieldConfig;  // 电路元件(column(advice/instance/"
"selector..))\n"
"    type FloorPlanner = SimpleFloorPlanner;\n"
"\n"
"    fn without_witnesses(&self) -> Self {\n"
"        Self::default()\n"
"    }\n"
"\n"
"    fn configure(meta: &mut ConstraintSystem<F>) -> Self::Config {\n"
"        // 我们创建两个 advice 列，作为 FieldChip 的 I/O.\n"
"        let advice = [meta.advice_column(), meta.advice_column()];\n"
"\n"
"        // 我们还需要一个 instance 列来存储公开输入 public inputs.\n"
"        let instance = meta.instance_column();\n"
"\n"
"        // 创建一个 fixed 列来加载常数 load constants.\n"
"        let constant = meta.fixed_column();\n"
"\n"
"        FieldChip::configure(meta, advice, instance, constant)\n"
"    }\n"
"    // Prove a2⋅b2 = c\n"
"    fn synthesize(\n"
"        &self,\n"
"        config: Self::Config,\n"
"        mut layouter: impl Layouter<F>,\n"
"    ) -> Result<(), Error> {\n"
"        let field_chip = FieldChip::<F>::construct(config);\n"
"\n"
"        // 将我们的隐私值加载到电路中。\n"
"        let a = field_chip.load_private(layouter.namespace(|| \"load a\"), "
"self.a)?;\n"
"        let b = field_chip.load_private(layouter.namespace(|| \"load b\"), "
"self.b)?;\n"
"\n"
"        // 将常数因子加载到电路中\n"
"        let constant =\n"
"            field_chip.load_constant(layouter.namespace(|| \"load "
"constant\"), self.constant)?;\n"
"\n"
"        // 我们仅有乘法可用，因此我们按以下方法实现电路：\n"
"        //     asq  = a * a\n"
"        //     bsq  = b * b\n"
"        //     absq = asq * bsq\n"
"        //     c    = constant * asq*bsq\n"
"        //\n"
"        // 但是，按下面的方法实现，更加高效:\n"
"        //     ab   = a*b\n"
"        //     absq = ab^2\n"
"        //     c    = constant*absq\n"
"        let ab = field_chip.mul(layouter.namespace(|| \"a * b\"), a, b)?;\n"
"        let absq = field_chip.mul(layouter.namespace(|| \"ab * ab\"), ab."
"clone(), ab)?;\n"
"        let c = field_chip.mul(layouter.namespace(|| \"constant * absq\"), "
"constant, absq)?;\n"
"\n"
"        // 将结果作为电路的公开输入进行公开\n"
"        field_chip.expose_public(layouter.namespace(|| \"expose c\"), c, 0)\n"
"    }\n"
"} }\n"
"```"
msgstr ""
"```rust\n"
"// Store the private input variables in this circuit.\n"
"// Value<F> 用了 Option<F>,  因为在 key generation 阶段这个 struct 不会有值\n"
"// 而在 Proving 阶段，如果任意位置为空就会 throw Error.\n"
"struct MyCircuit<F: Field> {\n"
"    constant: F,\n"
"    a: Value<F>,\n"
"    b: Value<F>,\n"
"}\n"
"\n"
"impl<F: Field> Circuit<F> for MyCircuit<F> {\n"
"    // 因为 we are using a single chip for everything，所以我们可以重用它的配"
"置。\n"
"    type Config = FieldConfig;  // 电路元件(column(advice/instance/"
"selector..))\n"
"    type FloorPlanner = SimpleFloorPlanner;\n"
"\n"
"    fn without_witnesses(&self) -> Self {\n"
"        Self::default()\n"
"    }\n"
"\n"
"    fn configure(meta: &mut ConstraintSystem<F>) -> Self::Config {\n"
"        // 我们创建两个 advice 列，作为 FieldChip 的 I/O.\n"
"        let advice = [meta.advice_column(), meta.advice_column()];\n"
"\n"
"        // 我们还需要一个 instance 列来存储公开输入 public inputs.\n"
"        let instance = meta.instance_column();\n"
"\n"
"        // 创建一个 fixed 列来加载常数 load constants.\n"
"        let constant = meta.fixed_column();\n"
"\n"
"        FieldChip::configure(meta, advice, instance, constant)\n"
"    }\n"
"    // Prove a2⋅b2 = c\n"
"    fn synthesize(\n"
"        &self,\n"
"        config: Self::Config,\n"
"        mut layouter: impl Layouter<F>,\n"
"    ) -> Result<(), Error> {\n"
"        let field_chip = FieldChip::<F>::construct(config);\n"
"\n"
"        // 将我们的隐私值加载到电路中。\n"
"        let a = field_chip.load_private(layouter.namespace(|| \"load a\"), "
"self.a)?;\n"
"        let b = field_chip.load_private(layouter.namespace(|| \"load b\"), "
"self.b)?;\n"
"\n"
"        // 将常数因子加载到电路中\n"
"        let constant =\n"
"            field_chip.load_constant(layouter.namespace(|| \"load "
"constant\"), self.constant)?;\n"
"\n"
"        // 我们仅有乘法可用，因此我们按以下方法实现电路：\n"
"        //     asq  = a * a\n"
"        //     bsq  = b * b\n"
"        //     absq = asq * bsq\n"
"        //     c    = constant * asq*bsq\n"
"        //\n"
"        // 但是，按下面的方法实现，更加高效:\n"
"        //     ab   = a*b\n"
"        //     absq = ab^2\n"
"        //     c    = constant*absq\n"
"        let ab = field_chip.mul(layouter.namespace(|| \"a * b\"), a, b)?;\n"
"        let absq = field_chip.mul(layouter.namespace(|| \"ab * ab\"), ab."
"clone(), ab)?;\n"
"        let c = field_chip.mul(layouter.namespace(|| \"constant * absq\"), "
"constant, absq)?;\n"
"\n"
"        // 将结果作为电路的公开输入进行公开\n"
"        field_chip.expose_public(layouter.namespace(|| \"expose c\"), c, 0)\n"
"    }\n"
"} }\n"
"```"

#: src/halo2/tmp/1-Simple-Example.md:377
msgid ""
"[测试电路](https://zcash.github.io/halo2/user/simple-example.html#testing-"
"the-circuit)"
msgstr ""
"[测试电路](https://zcash.github.io/halo2/user/simple-example.html#testing-"
"the-circuit)"

#: src/halo2/tmp/1-Simple-Example.md:379
msgid ""
"我们在 chapter about tools 中提到的 _MockProver_ 和 _CircuitLayout_ 可以派上"
"用场"
msgstr ""
"我们在 chapter about tools 中提到的 _MockProver_ 和 _CircuitLayout_ 可以派上"
"用场"

#: src/halo2/tmp/1-Simple-Example.md:381 src/halo2/tmp/1-Simple-Example.md:799
msgid ""
"可以用 `halo2::dev::MockProver` 来测试一个电路是否正常工作。构造电路的一组 "
"Private/Public input ，这组输入可直接用来计算合法证明，但我们把这组输入传入"
"到 `MockProver::run` 函数中之后，就能得到一个可用于检验电路中每一条约束是否满"
"足的对象。而且电路验证不过，这个对象还能输出那条不满足的约束"
msgstr ""
"可以用 `halo2::dev::MockProver` 来测试一个电路是否正常工作。构造电路的一组 "
"Private/Public input ，这组输入可直接用来计算合法证明，但我们把这组输入传入"
"到 `MockProver::run` 函数中之后，就能得到一个可用于检验电路中每一条约束是否满"
"足的对象。而且电路验证不过，这个对象还能输出那条不满足的约束"

#: src/halo2/tmp/1-Simple-Example.md:383 src/halo2/tmp/1-Simple-Example.md:801
msgid ""
"如下代码 , `MockProver::run`  中只知道 Public input `c` , 他并不知道 Private "
"是什么, 但仍可以进行验证"
msgstr ""
"如下代码 , `MockProver::run`  中只知道 Public input `c` , 他并不知道 Private "
"是什么, 但仍可以进行验证"

#: src/halo2/tmp/1-Simple-Example.md:385 src/halo2/tmp/1-Simple-Example.md:803
msgid ""
"```rust\n"
"fn main() {\n"
"    // 我们电路的行数不能超过 2^k. 因为我们的示例电路很小，我们选择一个较小的"
"值\n"
"    let k = 4;\n"
"\n"
"    // 准备好电路的隐私输入和公开输入\n"
"    let constant = Fp::from(7);\n"
"    let a = Fp::from(2);\n"
"    let b = Fp::from(3);\n"
"    let c = constant * a.square() * b.square();  // 算出来\n"
"\n"
"    // 用隐私输入来实例化电路\n"
"    let circuit = MyCircuit {\n"
"        constant,\n"
"        a: Value::known(a),\n"
"        b: Value::known(b),\n"
"    };\n"
"\n"
"    // 将公开输入进行排列。乘法的结果被我们放置在 instance 列的第0行，\n"
"    // 所以我们把它放在公开输入的对应位置。\n"
"    let mut public_inputs = vec![c];\n"
"\n"
"    // 给定正确的公开输入，我们的电路能验证通过\n"
"    let prover = MockProver::run(k, &circuit, vec![public_inputs.clone()])."
"unwrap();\n"
"    assert_eq!(prover.verify(), Ok(()));\n"
"\n"
"    // 如果我们尝试用其他的公开输入(此处是 +1)，证明将失败！\n"
"    public_inputs[0] += Fp::one();\n"
"    let prover = MockProver::run(k, &circuit, vec![public_inputs])."
"unwrap();\n"
"    assert!(prover.verify().is_err());\n"
"}\n"
"```"
msgstr ""
"```rust\n"
"fn main() {\n"
"    // 我们电路的行数不能超过 2^k. 因为我们的示例电路很小，我们选择一个较小的"
"值\n"
"    let k = 4;\n"
"\n"
"    // 准备好电路的隐私输入和公开输入\n"
"    let constant = Fp::from(7);\n"
"    let a = Fp::from(2);\n"
"    let b = Fp::from(3);\n"
"    let c = constant * a.square() * b.square();  // 算出来\n"
"\n"
"    // 用隐私输入来实例化电路\n"
"    let circuit = MyCircuit {\n"
"        constant,\n"
"        a: Value::known(a),\n"
"        b: Value::known(b),\n"
"    };\n"
"\n"
"    // 将公开输入进行排列。乘法的结果被我们放置在 instance 列的第0行，\n"
"    // 所以我们把它放在公开输入的对应位置。\n"
"    let mut public_inputs = vec![c];\n"
"\n"
"    // 给定正确的公开输入，我们的电路能验证通过\n"
"    let prover = MockProver::run(k, &circuit, vec![public_inputs.clone()])."
"unwrap();\n"
"    assert_eq!(prover.verify(), Ok(()));\n"
"\n"
"    // 如果我们尝试用其他的公开输入(此处是 +1)，证明将失败！\n"
"    public_inputs[0] += Fp::one();\n"
"    let prover = MockProver::run(k, &circuit, vec![public_inputs])."
"unwrap();\n"
"    assert!(prover.verify().is_err());\n"
"}\n"
"```"

#: src/halo2/tmp/1-Simple-Example.md:418 src/halo2/tmp/1-Simple-Example.md:836
msgid ""
"Code Ref / [Full example](https://zcash.github.io/halo2/user/simple-example."
"html#full-example)"
msgstr ""
"Code Ref / [Full example](https://zcash.github.io/halo2/user/simple-example."
"html#full-example)"

#: src/halo2/tmp/1-Simple-Example.md:420 src/halo2/tmp/1-Simple-Example.md:838
msgid ""
"You can find the source code for this example [here](https://github.com/"
"zcash/halo2/tree/main/halo2_proofs/examples/simple-example.rs)."
msgstr ""
"You can find the source code for this example [here](https://github.com/"
"zcash/halo2/tree/main/halo2_proofs/examples/simple-example.rs)."

#: src/halo2/tmp/1-Simple-Example.md:427
#: src/halo2/tmp/2-Fibonacci-example-1.md:379
#: src/halo2/tmp/3-Fibonacci-example-2.md:434
#: src/halo2/tmp/4-IsZero-Check-example-3.md:309
#: src/halo2/tmp/6-Range-Check(code-explanation).md:308
#: src/halo2/tmp/7-Range-Check-lookup(example-2).md:485
#: src/halo2/tmp/8-Range-Check(example-3).md:373
#: src/halo2/tmp/9-decomposed.md:460
msgid ""
"[Jason Morton halo2 codes](https://github.com/jasonmorton/halo2-examples/"
"blob/master/src/fibonacci/example1.rs)"
msgstr ""
"[Jason Morton halo2 codes](https://github.com/jasonmorton/halo2-examples/"
"blob/master/src/fibonacci/example1.rs)"

#: src/halo2/tmp/1-Simple-Example.md:428
#: src/halo2/tmp/2-Fibonacci-example-1.md:380
#: src/halo2/tmp/3-Fibonacci-example-2.md:435
#: src/halo2/tmp/4-IsZero-Check-example-3.md:310
#: src/halo2/tmp/6-Range-Check(code-explanation).md:309
#: src/halo2/tmp/7-Range-Check-lookup(example-2).md:486
#: src/halo2/tmp/8-Range-Check(example-3).md:374
#: src/halo2/tmp/9-decomposed.md:461
msgid ""
"[ZCash halo2 books](https://zcash.github.io/halo2/user/simple-example."
"html#define-a-chip-implementation)"
msgstr ""
"[ZCash halo2 books](https://zcash.github.io/halo2/user/simple-example."
"html#define-a-chip-implementation)"

#: src/halo2/tmp/1-Simple-Example.md:429
#: src/halo2/tmp/2-Fibonacci-example-1.md:381
#: src/halo2/tmp/3-Fibonacci-example-2.md:436
#: src/halo2/tmp/4-IsZero-Check-example-3.md:311
#: src/halo2/tmp/6-Range-Check(code-explanation).md:310
#: src/halo2/tmp/7-Range-Check-lookup(example-2).md:487
#: src/halo2/tmp/8-Range-Check(example-3).md:375
#: src/halo2/tmp/9-decomposed.md:462
msgid ""
"[trapdoor-tech halo2 book](https://trapdoor-tech.github.io/halo2-book-"
"chinese/user/simple-example.html)"
msgstr ""
"[trapdoor-tech halo2 book](https://trapdoor-tech.github.io/halo2-book-"
"chinese/user/simple-example.html)"

#: src/halo2/tmp/1-Simple-Example.md:430
#: src/halo2/tmp/2-Fibonacci-example-1.md:382
#: src/halo2/tmp/3-Fibonacci-example-2.md:437
#: src/halo2/tmp/4-IsZero-Check-example-3.md:312
#: src/halo2/tmp/6-Range-Check(code-explanation).md:311
#: src/halo2/tmp/7-Range-Check-lookup(example-2).md:488
#: src/halo2/tmp/8-Range-Check(example-3).md:376
#: src/halo2/tmp/9-decomposed.md:463
msgid ""
"[icemelon/HaiCheng Shen](https://github.com/icemelon/halo2-examples/blob/"
"master/src/fibonacci/example3.rs)"
msgstr ""
"[icemelon/HaiCheng Shen](https://github.com/icemelon/halo2-examples/blob/"
"master/src/fibonacci/example3.rs)"

#: src/halo2/tmp/1-Simple-Example.md:431
#: src/halo2/tmp/2-Fibonacci-example-1.md:383
#: src/halo2/tmp/3-Fibonacci-example-2.md:438
#: src/halo2/tmp/4-IsZero-Check-example-3.md:313
#: src/halo2/tmp/6-Range-Check(code-explanation).md:312
#: src/halo2/tmp/7-Range-Check-lookup(example-2).md:489
#: src/halo2/tmp/8-Range-Check(example-3).md:377
#: src/halo2/tmp/9-decomposed.md:464
msgid "[0xPARC halo2](https://learn.0xparc.org/)"
msgstr "[0xPARC halo2](https://learn.0xparc.org/)"

#: src/halo2/tmp/1-Simple-Example.md:433
msgid "\\----- 中文版本 End ------"
msgstr "\\----- 中文版本 End ------"

#: src/halo2/tmp/1-Simple-Example.md:436
msgid "Simple Example"
msgstr "Simple Example"

#: src/halo2/tmp/1-Simple-Example.md:438
msgid ""
"Let's start with a simple circuit, to introduce you to the common APIs and "
"how they are used. The circuit will take a public input c, and will prove "
"knowledge of two private inputs "
msgstr ""
"Let's start with a simple circuit, to introduce you to the common APIs and "
"how they are used. The circuit will take a public input c, and will prove "
"knowledge of two private inputs "

#: src/halo2/tmp/1-Simple-Example.md:438
msgid " such that "
msgstr " such that "

#: src/halo2/tmp/1-Simple-Example.md:440
msgid ""
"[Define instructions](https://zcash.github.io/halo2/user/simple-example."
"html#define-instructions)"
msgstr ""
"[Define instructions](https://zcash.github.io/halo2/user/simple-example."
"html#define-instructions)"

#: src/halo2/tmp/1-Simple-Example.md:442
msgid ""
"Instructions are the boundary between high-level [gadgets](https://zcash."
"github.io/halo2/concepts/gadgets.html) and the low-level circuit operations. "
"Instructions may be as coarse or as granular as desired, but in practice you "
"want to strike a balance between an instruction being large enough to "
"effectively optimize its implementation, and small enough that it is "
"meaningfully reusable."
msgstr ""
"Instructions are the boundary between high-level [gadgets](https://zcash."
"github.io/halo2/concepts/gadgets.html) and the low-level circuit operations. "
"Instructions may be as coarse or as granular as desired, but in practice you "
"want to strike a balance between an instruction being large enough to "
"effectively optimize its implementation, and small enough that it is "
"meaningfully reusable."

#: src/halo2/tmp/1-Simple-Example.md:444
msgid "For our circuit, we will use three instructions:"
msgstr "For our circuit, we will use three instructions:"

#: src/halo2/tmp/1-Simple-Example.md:445
msgid "Load a private number into the circuit."
msgstr "Load a private number into the circuit."

#: src/halo2/tmp/1-Simple-Example.md:446
msgid "Multiply two numbers."
msgstr "Multiply two numbers."

#: src/halo2/tmp/1-Simple-Example.md:447
msgid ""
"Expose a number as a public input to the circuit. (将一个数设置为电路的公开输"
"入)"
msgstr ""
"Expose a number as a public input to the circuit. (将一个数设置为电路的公开输"
"入)"

#: src/halo2/tmp/1-Simple-Example.md:450
msgid ""
"We also need a type for a variable representing a number. Instruction "
"interfaces provide associated types for their inputs and outputs, to allow "
"the implementations to represent these in a way that makes the most sense "
"for their optimization goals. 我们还需要一个代表数字的变量的类型。指令接口为"
"其输入和输出提供关联类型，以允许实现以对其优化目标最有意义的方式表示这些类型"
msgstr ""
"We also need a type for a variable representing a number. Instruction "
"interfaces provide associated types for their inputs and outputs, to allow "
"the implementations to represent these in a way that makes the most sense "
"for their optimization goals. 我们还需要一个代表数字的变量的类型。指令接口为"
"其输入和输出提供关联类型，以允许实现以对其优化目标最有意义的方式表示这些类型"

#: src/halo2/tmp/1-Simple-Example.md:453
msgid ""
"```rust\n"
"trait NumericInstructions<F: Field>: Chip<F> {\n"
"    /// Variable representing a number. 用于表示一个数的变量\n"
"    type Num;\n"
"\n"
"    /// Loads a number into the circuit as a private input. 隐私输入\n"
"    fn load_private(&self, layouter: impl Layouter<F>, a: Value<F>) -> "
"Result<Self::Num, Error>;\n"
"\n"
"    /// Loads a number into the circuit as a fixed constant.\n"
"    fn load_constant(&self, layouter: impl Layouter<F>, constant: F) -> "
"Result<Self::Num, Error>;\n"
"\n"
"    /// Returns `c = a * b`.\n"
"    fn mul(\n"
"        &self,\n"
"        layouter: impl Layouter<F>,\n"
"        a: Self::Num,\n"
"        b: Self::Num,\n"
"    ) -> Result<Self::Num, Error>;\n"
"\n"
"    /// Exposes a number as a public input to the circuit.\n"
"    /// 将一个数置为电路的公开输入\n"
"    fn expose_public(\n"
"        &self,\n"
"        layouter: impl Layouter<F>,\n"
"        num: Self::Num,\n"
"        row: usize,\n"
"    ) -> Result<(), Error>;\n"
"}\n"
"```"
msgstr ""
"```rust\n"
"trait NumericInstructions<F: Field>: Chip<F> {\n"
"    /// Variable representing a number. 用于表示一个数的变量\n"
"    type Num;\n"
"\n"
"    /// Loads a number into the circuit as a private input. 隐私输入\n"
"    fn load_private(&self, layouter: impl Layouter<F>, a: Value<F>) -> "
"Result<Self::Num, Error>;\n"
"\n"
"    /// Loads a number into the circuit as a fixed constant.\n"
"    fn load_constant(&self, layouter: impl Layouter<F>, constant: F) -> "
"Result<Self::Num, Error>;\n"
"\n"
"    /// Returns `c = a * b`.\n"
"    fn mul(\n"
"        &self,\n"
"        layouter: impl Layouter<F>,\n"
"        a: Self::Num,\n"
"        b: Self::Num,\n"
"    ) -> Result<Self::Num, Error>;\n"
"\n"
"    /// Exposes a number as a public input to the circuit.\n"
"    /// 将一个数置为电路的公开输入\n"
"    fn expose_public(\n"
"        &self,\n"
"        layouter: impl Layouter<F>,\n"
"        num: Self::Num,\n"
"        row: usize,\n"
"    ) -> Result<(), Error>;\n"
"}\n"
"```"

#: src/halo2/tmp/1-Simple-Example.md:484
msgid ""
"_Num_ is used to adapt to the type handled in this interface, (适配该接口中处"
"理的类型)"
msgstr ""
"_Num_ is used to adapt to the type handled in this interface, (适配该接口中处"
"理的类型)"

#: src/halo2/tmp/1-Simple-Example.md:485
msgid "_load_private_ is used to load witness,"
msgstr "_load_private_ is used to load witness,"

#: src/halo2/tmp/1-Simple-Example.md:486
msgid "_load_constant_ is used to load constants, "
msgstr "_load_constant_ is used to load constants, "

#: src/halo2/tmp/1-Simple-Example.md:487
msgid "_mul_ is used to calculate the multiplication of two numbers, and "
msgstr "_mul_ is used to calculate the multiplication of two numbers, and "

#: src/halo2/tmp/1-Simple-Example.md:488
msgid "_expose_public_ is used to set instance."
msgstr "_expose_public_ is used to set instance."

#: src/halo2/tmp/1-Simple-Example.md:490
msgid ""
"[Define a chip implementation](https://zcash.github.io/halo2/user/simple-"
"example.html#define-a-chip-implementation)"
msgstr ""
"[Define a chip implementation](https://zcash.github.io/halo2/user/simple-"
"example.html#define-a-chip-implementation)"

#: src/halo2/tmp/1-Simple-Example.md:492
msgid ""
"定义芯片的实现 : For our circuit, we will build a [chip](https://zcash."
"github.io/halo2/concepts/chips.html) that provides the above numeric "
"instructions for a finite field."
msgstr ""
"定义芯片的实现 : For our circuit, we will build a [chip](https://zcash."
"github.io/halo2/concepts/chips.html) that provides the above numeric "
"instructions for a finite field."

#: src/halo2/tmp/1-Simple-Example.md:494
msgid ""
"If you want to develop a custom chip, you need to implement the _chip_ trait "
"of Halo 2."
msgstr ""
"If you want to develop a custom chip, you need to implement the _chip_ trait "
"of Halo 2."

#: src/halo2/tmp/1-Simple-Example.md:496
msgid ""
"Most of the time, using Halo 2 for circuit development does not need to "
"define instructions and chips by oneself. But if you need to use complex "
"ones that Halo 2 does not provide, you need to implement them yourself, such "
"as implementing an emerging(新兴的) cryptographic algorithm."
msgstr ""
"Most of the time, using Halo 2 for circuit development does not need to "
"define instructions and chips by oneself. But if you need to use complex "
"ones that Halo 2 does not provide, you need to implement them yourself, such "
"as implementing an emerging(新兴的) cryptographic algorithm."

#: src/halo2/tmp/1-Simple-Example.md:498
msgid ""
"```rust\n"
"/// 这块芯片将实现我们的指令集！芯片存储它们自己的配置，\n"
"struct FieldChip<F: Field> {\n"
"    config: FieldConfig,\n"
"    _marker: PhantomData<F>,\n"
"}\n"
"```"
msgstr ""
"```rust\n"
"/// 这块芯片将实现我们的指令集！芯片存储它们自己的配置，\n"
"struct FieldChip<F: Field> {\n"
"    config: FieldConfig,\n"
"    _marker: PhantomData<F>,\n"
"}\n"
"```"

#: src/halo2/tmp/1-Simple-Example.md:506
msgid ""
"Every chip needs to implement the  `Chip`  trait.  This defines the "
"properties of the chip that a `Layouter` may rely on when synthesizing a "
"circuit, as well as enabling any initial state that the chip requires to be "
"loaded into the circuit. 每一个\"芯片\"类型都要实现 `Chip` trait , `Chip` "
"trait 定义了 `Layouter` 在 synthesizing 电路时可能需要的关于电路的某些属性，"
"以及若将该芯片加载到电路所需要设置的任何初始状态"
msgstr ""
"Every chip needs to implement the  `Chip`  trait.  This defines the "
"properties of the chip that a `Layouter` may rely on when synthesizing a "
"circuit, as well as enabling any initial state that the chip requires to be "
"loaded into the circuit. 每一个\"芯片\"类型都要实现 `Chip` trait , `Chip` "
"trait 定义了 `Layouter` 在 synthesizing 电路时可能需要的关于电路的某些属性，"
"以及若将该芯片加载到电路所需要设置的任何初始状态"

#: src/halo2/tmp/1-Simple-Example.md:525
msgid ""
"[Configure the chip](https://zcash.github.io/halo2/user/simple-example."
"html#configure-the-chip)"
msgstr ""
"[Configure the chip](https://zcash.github.io/halo2/user/simple-example."
"html#configure-the-chip)"

#: src/halo2/tmp/1-Simple-Example.md:527
msgid ""
"The chip needs to be configured with the columns, permutations, and gates "
"that will be required to implement all of the desired instructions.  (需要为"
"芯片配置好实现我们想要的功能所需要的那些列、置换、门) :"
msgstr ""
"The chip needs to be configured with the columns, permutations, and gates "
"that will be required to implement all of the desired instructions.  (需要为"
"芯片配置好实现我们想要的功能所需要的那些列、置换、门) :"

#: src/halo2/tmp/1-Simple-Example.md:528
msgid ""
"```rust\n"
"#![allow(unused)]\n"
"fn main() {\n"
"/// 芯片的状态被存储在一个 config 结构体中，它是在配置过程中由芯片生成，\n"
"/// 并且存储在芯片内部。\n"
"#[derive(Clone, Debug)]\n"
"struct FieldConfig {\n"
"    /// 对于这块芯片，我们将用到两个 advice 列来实现我们的指令集。\n"
"    /// 它们也是我们与电路的其他部分通信所需要用到列。\n"
"    advice: [Column<Advice>; 2],\n"
"    instance: Column<Instance>, //公开输入（instance）列\n"
"\n"
"    // 我们需要一个 selector 来激活乘法门，从而在用不到`NumericInstructions::"
"mul`指令的\n"
"    //cells 上不设置任何约束。这非常重要，尤其在构建更大型的电路的情况下，列"
"会被多条指令集用到\n"
"    s_mul: Selector,\n"
"\n"
"    /// 用来加载常数的 fixed 列\n"
"    constant: Column<Fixed>,\n"
"}\n"
"```"
msgstr ""
"```rust\n"
"#![allow(unused)]\n"
"fn main() {\n"
"/// 芯片的状态被存储在一个 config 结构体中，它是在配置过程中由芯片生成，\n"
"/// 并且存储在芯片内部。\n"
"#[derive(Clone, Debug)]\n"
"struct FieldConfig {\n"
"    /// 对于这块芯片，我们将用到两个 advice 列来实现我们的指令集。\n"
"    /// 它们也是我们与电路的其他部分通信所需要用到列。\n"
"    advice: [Column<Advice>; 2],\n"
"    instance: Column<Instance>, //公开输入（instance）列\n"
"\n"
"    // 我们需要一个 selector 来激活乘法门，从而在用不到`NumericInstructions::"
"mul`指令的\n"
"    //cells 上不设置任何约束。这非常重要，尤其在构建更大型的电路的情况下，列"
"会被多条指令集用到\n"
"    s_mul: Selector,\n"
"\n"
"    /// 用来加载常数的 fixed 列\n"
"    constant: Column<Fixed>,\n"
"}\n"
"```"

#: src/halo2/tmp/1-Simple-Example.md:550
msgid ""
"the most critical functions _configure_ and _enable_equality_ are used to "
"check the equality of the incoming parameters(传入的参数)."
msgstr ""
"the most critical functions _configure_ and _enable_equality_ are used to "
"check the equality of the incoming parameters(传入的参数)."

#: src/halo2/tmp/1-Simple-Example.md:554
msgid "可以看到在代码中, 都是使用 相对位置来描述的 !"
msgstr "可以看到在代码中, 都是使用 相对位置来描述的 !"

#: src/halo2/tmp/1-Simple-Example.md:566
msgid "若 `s_mul` 不为 0，则**激活**校验乘法约束 :"
msgstr "若 `s_mul` 不为 0，则**激活**校验乘法约束 :"

#: src/halo2/tmp/1-Simple-Example.md:567
msgid "当 `s_mul * (lhs * rhs - out) == 0`，则 _lhs * rhs = out_ 约束成立；"
msgstr "当 `s_mul * (lhs * rhs - out) == 0`，则 _lhs * rhs = out_ 约束成立；"

#: src/halo2/tmp/1-Simple-Example.md:568
msgid ""
"当 `s_mul * (lhs * rhs - out) != 0`， _lhs * rhs = out_ 约束不成立；程序报错"
msgstr ""
"当 `s_mul * (lhs * rhs - out) != 0`， _lhs * rhs = out_ 约束不成立；程序报错"

#: src/halo2/tmp/1-Simple-Example.md:569
msgid ""
"若 `s_mul` 为 0，则**不会激活**检查乘法约束，any subsequent values are fine"
msgstr ""
"若 `s_mul` 为 0，则**不会激活**检查乘法约束，any subsequent values are fine"

#: src/halo2/tmp/1-Simple-Example.md:571
msgid ""
"```rust\n"
"impl<F: FieldExt> FieldChip<F> {\n"
"    fn construct(config: <Self as Chip<F>>::Config) -> Self {\n"
"        Self {\n"
"            config,\n"
"            _marker: PhantomData,\n"
"        }\n"
"    }\n"
"\n"
"    fn configure(\n"
"        meta: &mut ConstraintSystem<F>,\n"
"        advice: [Column<Advice>; 2],\n"
"        instance: Column<Instance>,\n"
"        constant: Column<Fixed>,\n"
"    ) -> <Self as Chip<F>>::Config {\n"
"        meta.enable_equality(instance.into());\n"
"        meta.enable_constant(constant);\n"
"        for column in &advice {\n"
"            meta.enable_equality((*column).into());\n"
"        }\n"
"        let s_mul = meta.selector();\n"
"\n"
"        // 定义我们的乘法门\n"
"        meta.create_gate(\"mul\", |meta| {\n"
"            // To implement multiplication, we need 3 advice `cells`\n"
"            // and 1 selector.  We arrange them like so:\n"
"            //\n"
"            // | a0  | a1  | s_mul |\n"
"            // |-----|-----|-------|\n"
"            // | lhs | rhs | s_mul |\n"
"            // | out |     |       |\n"
"            //\n"
"            // 门可以用任一相对偏移，但每一个不同的偏移都会对证明增加开销。\n"
"            // 最常见的偏移值是 0 (当前行), 1(下一行), -1(上一行)。\n"
"            // 针对这三种情况，有特定的构造函数来构造`Rotation` 结构。\n"
"            let lhs = meta.query_advice(advice[0], Rotation::cur());\n"
"            let rhs = meta.query_advice(advice[1], Rotation::cur());\n"
"            let out = meta.query_advice(advice[0], Rotation::next());\n"
"            let s_mul = meta.query_selector(s_mul);\n"
"\n"
"            // 最终，我们将约束门的多项式表达式返回。\n"
"            // 对于我们的乘法门，我们仅需要一个多项式约束。\n"
"            //\n"
"            // `create_gate` 函数返回的多项式表达式，在证明系统中一定等于"
"0。\n"
"            // 我们的表达式有以下性质：\n"
"            // - 当 s_mul = 0 时，lhs, rhs, out 可以是任意值。\n"
"            // - 当 s_mul != 0 时，lhs, rhs, out 将满足 lhs * rhs = out 这条"
"约束。\n"
"            vec![s_mul * (lhs * rhs - out)]\n"
"        });\n"
"\n"
"        FieldConfig {\n"
"            advice,\n"
"            instance,\n"
"            s_mul,\n"
"            constant,\n"
"        }\n"
"    }\n"
"}\n"
"}\n"
"```"
msgstr ""
"```rust\n"
"impl<F: FieldExt> FieldChip<F> {\n"
"    fn construct(config: <Self as Chip<F>>::Config) -> Self {\n"
"        Self {\n"
"            config,\n"
"            _marker: PhantomData,\n"
"        }\n"
"    }\n"
"\n"
"    fn configure(\n"
"        meta: &mut ConstraintSystem<F>,\n"
"        advice: [Column<Advice>; 2],\n"
"        instance: Column<Instance>,\n"
"        constant: Column<Fixed>,\n"
"    ) -> <Self as Chip<F>>::Config {\n"
"        meta.enable_equality(instance.into());\n"
"        meta.enable_constant(constant);\n"
"        for column in &advice {\n"
"            meta.enable_equality((*column).into());\n"
"        }\n"
"        let s_mul = meta.selector();\n"
"\n"
"        // 定义我们的乘法门\n"
"        meta.create_gate(\"mul\", |meta| {\n"
"            // To implement multiplication, we need 3 advice `cells`\n"
"            // and 1 selector.  We arrange them like so:\n"
"            //\n"
"            // | a0  | a1  | s_mul |\n"
"            // |-----|-----|-------|\n"
"            // | lhs | rhs | s_mul |\n"
"            // | out |     |       |\n"
"            //\n"
"            // 门可以用任一相对偏移，但每一个不同的偏移都会对证明增加开销。\n"
"            // 最常见的偏移值是 0 (当前行), 1(下一行), -1(上一行)。\n"
"            // 针对这三种情况，有特定的构造函数来构造`Rotation` 结构。\n"
"            let lhs = meta.query_advice(advice[0], Rotation::cur());\n"
"            let rhs = meta.query_advice(advice[1], Rotation::cur());\n"
"            let out = meta.query_advice(advice[0], Rotation::next());\n"
"            let s_mul = meta.query_selector(s_mul);\n"
"\n"
"            // 最终，我们将约束门的多项式表达式返回。\n"
"            // 对于我们的乘法门，我们仅需要一个多项式约束。\n"
"            //\n"
"            // `create_gate` 函数返回的多项式表达式，在证明系统中一定等于"
"0。\n"
"            // 我们的表达式有以下性质：\n"
"            // - 当 s_mul = 0 时，lhs, rhs, out 可以是任意值。\n"
"            // - 当 s_mul != 0 时，lhs, rhs, out 将满足 lhs * rhs = out 这条"
"约束。\n"
"            vec![s_mul * (lhs * rhs - out)]\n"
"        });\n"
"\n"
"        FieldConfig {\n"
"            advice,\n"
"            instance,\n"
"            s_mul,\n"
"            constant,\n"
"        }\n"
"    }\n"
"}\n"
"}\n"
"```"

#: src/halo2/tmp/1-Simple-Example.md:632
msgid ""
"[Implement chip Traits](https://trapdoor-tech.github.io/halo2-book-chinese/"
"user/simple-example."
"html#%E5%AE%9E%E7%8E%B0%E8%8A%AF%E7%89%87%E5%8A%9F%E8%83%BD)"
msgstr ""
"[Implement chip Traits](https://trapdoor-tech.github.io/halo2-book-chinese/"
"user/simple-example."
"html#%E5%AE%9E%E7%8E%B0%E8%8A%AF%E7%89%87%E5%8A%9F%E8%83%BD)"

#: src/halo2/tmp/1-Simple-Example.md:634
msgid ""
"The `instructions interface` we defined earlier needs to be implemented, and "
"defining the implementation of Number is to en**capsul**ate(封装) finite "
"field elements."
msgstr ""
"The `instructions interface` we defined earlier needs to be implemented, and "
"defining the implementation of Number is to en**capsul**ate(封装) finite "
"field elements."

#: src/halo2/tmp/1-Simple-Example.md:636
msgid ""
"It should be noted that, in addition to row and column, the position of the "
"cell can also be determined by the relative position offset  (除了行和列之"
"外，单元的位置还可以通过相对位置偏移来确定)."
msgstr ""
"It should be noted that, in addition to row and column, the position of the "
"cell can also be determined by the relative position offset  (除了行和列之"
"外，单元的位置还可以通过相对位置偏移来确定)."

#: src/halo2/tmp/1-Simple-Example.md:638
msgid ""
"Generally, there are `3` types of offsets, 0 representing the current "
"position, `1` representing the next position, and `-1` representing the "
"previous position."
msgstr ""
"Generally, there are `3` types of offsets, 0 representing the current "
"position, `1` representing the next position, and `-1` representing the "
"previous position."

#: src/halo2/tmp/1-Simple-Example.md:640
msgid ""
"```rust\n"
"/// A variable representing a number.\n"
"#[derive(Clone)]\n"
"struct Number<F: Field>(AssignedCell<F, F>);\n"
"\n"
"impl<F: Field> NumericInstructions<F> for FieldChip<F> {\n"
"    type Num = Number<F>;\n"
"    fn load_private(\n"
"        &self,\n"
"        mut layouter: impl Layouter<F>,\n"
"        value: Value<F>,\n"
"    ) -> Result<Self::Num, Error> {\n"
"        let config = self.config();\n"
"\n"
"        layouter.assign_region(\n"
"            || \"load private\",\n"
"            |mut region| {\n"
"                region\n"
"                    .assign_advice(|| \"private input\", config.advice[0], "
"0, || value)\n"
"                    .map(Number)\n"
"            },\n"
"        )\n"
"    }\n"
"\n"
"    fn load_constant(\n"
"        &self,\n"
"        mut layouter: impl Layouter<F>,\n"
"        constant: F,\n"
"    ) -> Result<Self::Num, Error> {\n"
"        let config = self.config();\n"
"\n"
"        layouter.assign_region(\n"
"            || \"load constant\",\n"
"            |mut region| {\n"
"                region\n"
"                    .assign_advice_from_constant(|| \"constant value\", "
"config.advice[0], 0, constant)\n"
"                    .map(Number)\n"
"            },\n"
"        )\n"
"    }\n"
"\n"
"\tfn mul(\n"
"\t\t&self,\n"
"\t\tmut layouter: impl Layouter<F>,\n"
"\t\ta: Self::Num,\n"
"\t\tb: Self::Num,\n"
"\t) -> Result<Self::Num, Error> {\n"
"\t\tlet config = self.config();\n"
"\n"
"\t\tlayouter.assign_region(\n"
"\t\t\t|| \"mul\",\n"
"\t\t\t|mut region: Region<'_, F>| {\n"
"\t\t\t\t// We only want to use a single multiplication gate in this region,\n"
"\t\t\t\t// so we enable it at region offset 0; this means it will constrain\n"
"\t\t\t\t// cells at offsets 0 and 1.\n"
"\t\t\t\tconfig.s_mul.enable(&mut region, 0)?;\n"
"\n"
"\t\t\t\t// The inputs we've been given could be located anywhere in the "
"circuit,\n"
"\t\t\t\t// but we can only rely on relative offsets inside this region. So "
"we\n"
"\t\t\t\t// assign new cells inside the region and constrain them to have "
"the\n"
"\t\t\t\t// same values as the inputs.\n"
"\t\t\t\ta.0.copy_advice(|| \"lhs\", &mut region, config.advice[0], 0)?;\n"
"\t\t\t\tb.0.copy_advice(|| \"rhs\", &mut region, config.advice[1], 0)?;\n"
"\n"
"\t\t\t\t// Now we can assign the multiplication result, which is to be "
"assigned\n"
"\t\t\t\t// into the output position.\n"
"\t\t\t\tlet value = a.0.value().copied() * b.0.value();\n"
"\n"
"\t\t\t\t// Finally, we do the assignment to the output, returning a\n"
"\t\t\t\t// variable to be used in another part of the circuit.\n"
"\t\t\t\tregion\n"
"\t\t\t\t\t.assign_advice(|| \"lhs * rhs\", config.advice[0], 1, || value)\n"
"\t\t\t\t\t.map(Number)\n"
"\t\t\t},\n"
"\t\t)\n"
"\t}\n"
"```"
msgstr ""
"```rust\n"
"/// A variable representing a number.\n"
"#[derive(Clone)]\n"
"struct Number<F: Field>(AssignedCell<F, F>);\n"
"\n"
"impl<F: Field> NumericInstructions<F> for FieldChip<F> {\n"
"    type Num = Number<F>;\n"
"    fn load_private(\n"
"        &self,\n"
"        mut layouter: impl Layouter<F>,\n"
"        value: Value<F>,\n"
"    ) -> Result<Self::Num, Error> {\n"
"        let config = self.config();\n"
"\n"
"        layouter.assign_region(\n"
"            || \"load private\",\n"
"            |mut region| {\n"
"                region\n"
"                    .assign_advice(|| \"private input\", config.advice[0], "
"0, || value)\n"
"                    .map(Number)\n"
"            },\n"
"        )\n"
"    }\n"
"\n"
"    fn load_constant(\n"
"        &self,\n"
"        mut layouter: impl Layouter<F>,\n"
"        constant: F,\n"
"    ) -> Result<Self::Num, Error> {\n"
"        let config = self.config();\n"
"\n"
"        layouter.assign_region(\n"
"            || \"load constant\",\n"
"            |mut region| {\n"
"                region\n"
"                    .assign_advice_from_constant(|| \"constant value\", "
"config.advice[0], 0, constant)\n"
"                    .map(Number)\n"
"            },\n"
"        )\n"
"    }\n"
"\n"
"\tfn mul(\n"
"\t\t&self,\n"
"\t\tmut layouter: impl Layouter<F>,\n"
"\t\ta: Self::Num,\n"
"\t\tb: Self::Num,\n"
"\t) -> Result<Self::Num, Error> {\n"
"\t\tlet config = self.config();\n"
"\n"
"\t\tlayouter.assign_region(\n"
"\t\t\t|| \"mul\",\n"
"\t\t\t|mut region: Region<'_, F>| {\n"
"\t\t\t\t// We only want to use a single multiplication gate in this region,\n"
"\t\t\t\t// so we enable it at region offset 0; this means it will constrain\n"
"\t\t\t\t// cells at offsets 0 and 1.\n"
"\t\t\t\tconfig.s_mul.enable(&mut region, 0)?;\n"
"\n"
"\t\t\t\t// The inputs we've been given could be located anywhere in the "
"circuit,\n"
"\t\t\t\t// but we can only rely on relative offsets inside this region. So "
"we\n"
"\t\t\t\t// assign new cells inside the region and constrain them to have "
"the\n"
"\t\t\t\t// same values as the inputs.\n"
"\t\t\t\ta.0.copy_advice(|| \"lhs\", &mut region, config.advice[0], 0)?;\n"
"\t\t\t\tb.0.copy_advice(|| \"rhs\", &mut region, config.advice[1], 0)?;\n"
"\n"
"\t\t\t\t// Now we can assign the multiplication result, which is to be "
"assigned\n"
"\t\t\t\t// into the output position.\n"
"\t\t\t\tlet value = a.0.value().copied() * b.0.value();\n"
"\n"
"\t\t\t\t// Finally, we do the assignment to the output, returning a\n"
"\t\t\t\t// variable to be used in another part of the circuit.\n"
"\t\t\t\tregion\n"
"\t\t\t\t\t.assign_advice(|| \"lhs * rhs\", config.advice[0], 1, || value)\n"
"\t\t\t\t\t.map(Number)\n"
"\t\t\t},\n"
"\t\t)\n"
"\t}\n"
"```"

#: src/halo2/tmp/1-Simple-Example.md:718
msgid ""
"[Build the Circuit](https://trapdoor-tech.github.io/halo2-book-chinese/user/"
"simple-example.html#%E6%9E%84%E9%80%A0%E7%94%B5%E8%B7%AF)"
msgstr ""
"[Build the Circuit](https://trapdoor-tech.github.io/halo2-book-chinese/user/"
"simple-example.html#%E6%9E%84%E9%80%A0%E7%94%B5%E8%B7%AF)"

#: src/halo2/tmp/1-Simple-Example.md:720
msgid ""
"既然我们已经有了所需要的指令，以及一块实现了这些指令的芯片，我们终于可以构造"
"示例电路啦"
msgstr ""
"既然我们已经有了所需要的指令，以及一块实现了这些指令的芯片，我们终于可以构造"
"示例电路啦"

#: src/halo2/tmp/1-Simple-Example.md:722
msgid ""
"The **circuit** trait is the entrance to the circuit development. We need to "
"define our own circuit structure and access the _witness_ input."
msgstr ""
"The **circuit** trait is the entrance to the circuit development. We need to "
"define our own circuit structure and access the _witness_ input."

#: src/halo2/tmp/1-Simple-Example.md:731
msgid ""
"```rust\n"
"struct MyCircuit<F: FieldExt> {\n"
"    constant: F,\n"
"    a: Option<F>,\n"
"    b: Option<F>,\n"
"}\n"
"\n"
"impl<F: FieldExt> Circuit<F> for MyCircuit<F> {\n"
"    // 因为我们在任一地方值用了一个芯片，所以我们可以重用它的配置。\n"
"    type Config = FieldConfig;\n"
"    type FloorPlanner = SimpleFloorPlanner;\n"
"\n"
"    fn without_witnesses(&self) -> Self {\n"
"        Self::default()\n"
"    }\n"
"\n"
"    fn configure(meta: &mut ConstraintSystem<F>) -> Self::Config {\n"
"        // 我们创建两个 advice 列，作为 FieldChip 的输入。\n"
"        let advice = [meta.advice_column(), meta.advice_column()];\n"
"\n"
"        // 我们还需要一个 instance 列来存储公开输入。\n"
"        let instance = meta.instance_column();\n"
"\n"
"        // 创建一个 fixed 列来加载常数\n"
"        let constant = meta.fixed_column();\n"
"\n"
"        FieldChip::configure(meta, advice, instance, constant)\n"
"    }\n"
"    // Prove a2⋅b2 = c\n"
"    fn synthesize(\n"
"        &self,\n"
"        config: Self::Config,\n"
"        mut layouter: impl Layouter<F>,\n"
"    ) -> Result<(), Error> {\n"
"        let field_chip = FieldChip::<F>::construct(config);\n"
"\n"
"        // 将我们的隐私值加载到电路中。\n"
"        let a = field_chip.load_private(layouter.namespace(|| \"load a\"), "
"self.a)?;\n"
"        let b = field_chip.load_private(layouter.namespace(|| \"load b\"), "
"self.b)?;\n"
"\n"
"        // 将常数因子加载到电路中\n"
"        let constant =\n"
"            field_chip.load_constant(layouter.namespace(|| \"load "
"constant\"), self.constant)?;\n"
"\n"
"        // 我们仅有乘法可用，因此我们按以下方法实现电路：\n"
"        //     asq  = a*a\n"
"        //     bsq  = b*b\n"
"        //     absq = asq*bsq\n"
"        //     c    = constant*asq*bsq\n"
"        //\n"
"        // 但是，按下面的方法实现，更加高效:\n"
"        //     ab   = a*b\n"
"        //     absq = ab^2\n"
"        //     c    = constant*absq\n"
"        let ab = field_chip.mul(layouter.namespace(|| \"a * b\"), a, b)?;\n"
"        let absq = field_chip.mul(layouter.namespace(|| \"ab * ab\"), ab."
"clone(), ab)?;\n"
"        let c = field_chip.mul(layouter.namespace(|| \"constant * absq\"), "
"constant, absq)?;\n"
"\n"
"        // 将结果作为电路的公开输入进行公开\n"
"        field_chip.expose_public(layouter.namespace(|| \"expose c\"), c, 0)\n"
"    }\n"
"} }\n"
"```"
msgstr ""
"```rust\n"
"struct MyCircuit<F: FieldExt> {\n"
"    constant: F,\n"
"    a: Option<F>,\n"
"    b: Option<F>,\n"
"}\n"
"\n"
"impl<F: FieldExt> Circuit<F> for MyCircuit<F> {\n"
"    // 因为我们在任一地方值用了一个芯片，所以我们可以重用它的配置。\n"
"    type Config = FieldConfig;\n"
"    type FloorPlanner = SimpleFloorPlanner;\n"
"\n"
"    fn without_witnesses(&self) -> Self {\n"
"        Self::default()\n"
"    }\n"
"\n"
"    fn configure(meta: &mut ConstraintSystem<F>) -> Self::Config {\n"
"        // 我们创建两个 advice 列，作为 FieldChip 的输入。\n"
"        let advice = [meta.advice_column(), meta.advice_column()];\n"
"\n"
"        // 我们还需要一个 instance 列来存储公开输入。\n"
"        let instance = meta.instance_column();\n"
"\n"
"        // 创建一个 fixed 列来加载常数\n"
"        let constant = meta.fixed_column();\n"
"\n"
"        FieldChip::configure(meta, advice, instance, constant)\n"
"    }\n"
"    // Prove a2⋅b2 = c\n"
"    fn synthesize(\n"
"        &self,\n"
"        config: Self::Config,\n"
"        mut layouter: impl Layouter<F>,\n"
"    ) -> Result<(), Error> {\n"
"        let field_chip = FieldChip::<F>::construct(config);\n"
"\n"
"        // 将我们的隐私值加载到电路中。\n"
"        let a = field_chip.load_private(layouter.namespace(|| \"load a\"), "
"self.a)?;\n"
"        let b = field_chip.load_private(layouter.namespace(|| \"load b\"), "
"self.b)?;\n"
"\n"
"        // 将常数因子加载到电路中\n"
"        let constant =\n"
"            field_chip.load_constant(layouter.namespace(|| \"load "
"constant\"), self.constant)?;\n"
"\n"
"        // 我们仅有乘法可用，因此我们按以下方法实现电路：\n"
"        //     asq  = a*a\n"
"        //     bsq  = b*b\n"
"        //     absq = asq*bsq\n"
"        //     c    = constant*asq*bsq\n"
"        //\n"
"        // 但是，按下面的方法实现，更加高效:\n"
"        //     ab   = a*b\n"
"        //     absq = ab^2\n"
"        //     c    = constant*absq\n"
"        let ab = field_chip.mul(layouter.namespace(|| \"a * b\"), a, b)?;\n"
"        let absq = field_chip.mul(layouter.namespace(|| \"ab * ab\"), ab."
"clone(), ab)?;\n"
"        let c = field_chip.mul(layouter.namespace(|| \"constant * absq\"), "
"constant, absq)?;\n"
"\n"
"        // 将结果作为电路的公开输入进行公开\n"
"        field_chip.expose_public(layouter.namespace(|| \"expose c\"), c, 0)\n"
"    }\n"
"} }\n"
"```"

#: src/halo2/tmp/1-Simple-Example.md:795
msgid ""
"[Testing the circuit](https://zcash.github.io/halo2/user/simple-example."
"html#testing-the-circuit)"
msgstr ""
"[Testing the circuit](https://zcash.github.io/halo2/user/simple-example."
"html#testing-the-circuit)"

#: src/halo2/tmp/1-Simple-Example.md:797
msgid ""
"The _MockProver_ and _CircuitLayout_ that we mentioned in the chapter about "
"tools can come in handy (派上用场)."
msgstr ""
"The _MockProver_ and _CircuitLayout_ that we mentioned in the chapter about "
"tools can come in handy (派上用场)."

#: src/halo2/tmp/1-Simple-Example.md:847
msgid "\\----- 问题 Question -----"
msgstr "\\----- 问题 Question -----"

#: src/halo2/tmp/1-Simple-Example.md:851
msgid "这意味着它将对 offsets 0 and 1 处的 2 个 cells 都进行约束(为啥？)"
msgstr "这意味着它将对 offsets 0 and 1 处的 2 个 cells 都进行约束(为啥？)"

#: src/halo2/tmp/1-Simple-Example.md:860
msgid ""
"奇怪的一点是，在 `fn mul() `函数中，既然已经使用了参数 a: Self::Num, b: "
"Self::Num, 设置了 lhs Cell 和 rhs Cell，那么 a.cell 和 lhs、 b.cell 和 rhs 肯"
"定就是相等的，为什么还要再 region.constrain_equal 约束一次呢？这个约束看起来"
"是多余的且没有必要的？"
msgstr ""
"奇怪的一点是，在 `fn mul() `函数中，既然已经使用了参数 a: Self::Num, b: "
"Self::Num, 设置了 lhs Cell 和 rhs Cell，那么 a.cell 和 lhs、 b.cell 和 rhs 肯"
"定就是相等的，为什么还要再 region.constrain_equal 约束一次呢？这个约束看起来"
"是多余的且没有必要的？"

#: src/halo2/tmp/1-Simple-Example.md:862
msgid ""
"```rust\n"
"// 在此 region 中，我们只想用一个乘法门，所以我们在 region offset=0 处激活"
"它；\n"
"// 这意味着它将对 offsets 0 and 1 处的 2 个 cells 都进行约束(为啥？)\n"
"config.s_mul.enable(&mut region, 0)?;\n"
"\n"
"// 给我们的输入有可能在电路的任一位置，但在当前 region 中，我们仅可以用\n"
"// 相对偏移。所以，我们在 region 内分配新的 cells 并限定他们的值与输入 cells "
"的值相等。\n"
"let lhs = region.assign_advice(\n"
"\t|| \"lhs\",\n"
"\tconfig.advice[0], // 第 0 列 (advice 列)\n"
"\t0,                // 第 0 行\n"
"\t|| a.value.ok_or(Error::SynthesisError), // 放 a 的值进去\n"
")?;\n"
"let rhs = region.assign_advice(\n"
"\t|| \"rhs\",\n"
"\tconfig.advice[1], // 第 1 列,\n"
"\t0,                // 第 0 行\n"
"\t|| b.value.ok_or(Error::SynthesisError),\n"
")?;\n"
"region.constrain_equal(a.cell, lhs)?;\n"
"region.constrain_equal(b.cell, rhs)?;\n"
"```"
msgstr ""
"```rust\n"
"// 在此 region 中，我们只想用一个乘法门，所以我们在 region offset=0 处激活"
"它；\n"
"// 这意味着它将对 offsets 0 and 1 处的 2 个 cells 都进行约束(为啥？)\n"
"config.s_mul.enable(&mut region, 0)?;\n"
"\n"
"// 给我们的输入有可能在电路的任一位置，但在当前 region 中，我们仅可以用\n"
"// 相对偏移。所以，我们在 region 内分配新的 cells 并限定他们的值与输入 cells "
"的值相等。\n"
"let lhs = region.assign_advice(\n"
"\t|| \"lhs\",\n"
"\tconfig.advice[0], // 第 0 列 (advice 列)\n"
"\t0,                // 第 0 行\n"
"\t|| a.value.ok_or(Error::SynthesisError), // 放 a 的值进去\n"
")?;\n"
"let rhs = region.assign_advice(\n"
"\t|| \"rhs\",\n"
"\tconfig.advice[1], // 第 1 列,\n"
"\t0,                // 第 0 行\n"
"\t|| b.value.ok_or(Error::SynthesisError),\n"
")?;\n"
"region.constrain_equal(a.cell, lhs)?;\n"
"region.constrain_equal(b.cell, rhs)?;\n"
"```"

#: src/halo2/tmp/1-Simple-Example.md:885
msgid "GPT："
msgstr "GPT："

#: src/halo2/tmp/1-Simple-Example.md:886
msgid ""
"虽然 `lhs` 和 `rhs` 的值被设置为 `a.value` 和 `b.value`，但是这并不意味着它们"
"在电路中是相等的。在电路的布局中，`a.cell` 和 `b.cell` 可能已经在其他位置被"
"（意外地）赋值和约束过了。而在这个新的区域（region）中，为了进行乘法操作，你"
"需要确保新分配的 `lhs` 和 `rhs` cells 与原始的 `a.cell` 和 `b.cell` 相等"
msgstr ""
"虽然 `lhs` 和 `rhs` 的值被设置为 `a.value` 和 `b.value`，但是这并不意味着它们"
"在电路中是相等的。在电路的布局中，`a.cell` 和 `b.cell` 可能已经在其他位置被"
"（意外地）赋值和约束过了。而在这个新的区域（region）中，为了进行乘法操作，你"
"需要确保新分配的 `lhs` 和 `rhs` cells 与原始的 `a.cell` 和 `b.cell` 相等"

#: src/halo2/tmp/1-Simple-Example.md:888
msgid ""
"这就是为什么 `region.constrain_equal` 是必要的：它确保了在这个区域（region）"
"中的计算使用了正确的输入值"
msgstr ""
"这就是为什么 `region.constrain_equal` 是必要的：它确保了在这个区域（region）"
"中的计算使用了正确的输入值"

#: src/halo2/tmp/1-Simple-Example.md:890
msgid ""
"你可以将其视为一个安全性保障。如果没有这个约束，有可能会有其他的值进入这个区"
"域，并可能导致电路生成错误的结果。通过加入这个约束，你确保了乘法操作是在正确"
"的值上进行的。"
msgstr ""
"你可以将其视为一个安全性保障。如果没有这个约束，有可能会有其他的值进入这个区"
"域，并可能导致电路生成错误的结果。通过加入这个约束，你确保了乘法操作是在正确"
"的值上进行的。"

#: src/halo2/tmp/1-Simple-Example.md:892
msgid "目前的 halo2_proofs，一般直接使用 `copy_advice`："
msgstr "目前的 halo2_proofs，一般直接使用 `copy_advice`："

#: src/halo2/tmp/2-Fibonacci-example-1.md:5
#: src/halo2/tmp/3-Fibonacci-example-2.md:5
#: src/halo2/tmp/4-IsZero-Check-example-3.md:5
#: src/halo2/tmp/6-Range-Check(code-explanation).md:5
#: src/halo2/tmp/7-Range-Check-lookup(example-2).md:5
msgid "references: https://learn.0xparc.org/materials/halo2"
msgstr "references: https://learn.0xparc.org/materials/halo2"

#: src/halo2/tmp/2-Fibonacci-example-1.md:7
#: src/halo2/tmp/4-IsZero-Check-example-3.md:7
#: src/halo2/tmp/8-Range-Check(example-3).md:7 src/halo2/tmp/9-decomposed.md:8
msgid "[Goal](#goal)"
msgstr "[Goal](#goal)"

#: src/halo2/tmp/2-Fibonacci-example-1.md:9
msgid "[ACell](#acell)"
msgstr "[ACell](#acell)"

#: src/halo2/tmp/2-Fibonacci-example-1.md:10
msgid "[impl FiboChip { ...](#impl-fibochip--)"
msgstr "[impl FiboChip { ...](#impl-fibochip--)"

#: src/halo2/tmp/2-Fibonacci-example-1.md:11
msgid "[MyCircuit](#mycircuit)"
msgstr "[MyCircuit](#mycircuit)"

#: src/halo2/tmp/2-Fibonacci-example-1.md:12
#: src/halo2/tmp/3-Fibonacci-example-2.md:9
#: src/halo2/tmp/8-Range-Check(example-3).md:17
msgid "[Test](#test)"
msgstr "[Test](#test)"

#: src/halo2/tmp/2-Fibonacci-example-1.md:13
#: src/halo2/tmp/3-Fibonacci-example-2.md:10
#: src/halo2/tmp/8-Range-Check(example-3).md:18
#: src/halo2/tmp/9-decomposed.md:16 src/halo2/tmp/Hammster.md:7
msgid "[Usage](#usage)"
msgstr "[Usage](#usage)"

#: src/halo2/tmp/2-Fibonacci-example-1.md:15
msgid "[question](#question)"
msgstr "[question](#question)"

#: src/halo2/tmp/2-Fibonacci-example-1.md:17
#: src/halo2/tmp/4-IsZero-Check-example-3.md:19
#: src/halo2/tmp/8-Range-Check(example-3).md:21
#: src/halo2/tmp/9-decomposed.md:33
msgid "Goal"
msgstr "Goal"

#: src/halo2/tmp/2-Fibonacci-example-1.md:19
msgid "Given "
msgstr "Given "

#: src/halo2/tmp/2-Fibonacci-example-1.md:19
msgid " , we will prove "
msgstr " , we will prove "

#: src/halo2/tmp/2-Fibonacci-example-1.md:35
#: src/halo2/tmp/3-Fibonacci-example-2.md:22
#: src/halo2/tmp/3-Fibonacci-example-2.md:215
msgid "![](./imgs/2-Fib/2023-08-25-160959.png)"
msgstr "![](./imgs/2-Fib/2023-08-25-160959.png)"

#: src/halo2/tmp/2-Fibonacci-example-1.md:39
msgid "`struct ACell` : 是一个 _tuple struct_ ，是对 `AssignedCell` 封装和抽象"
msgstr ""
"`struct ACell` : 是一个 _tuple struct_ ，是对 `AssignedCell` 封装和抽象"

#: src/halo2/tmp/2-Fibonacci-example-1.md:41
msgid "`FiboChip` ：斐波那契数列”芯片“（本 Application 无需自定义指令集）"
msgstr "`FiboChip` ：斐波那契数列”芯片“（本 Application 无需自定义指令集）"

#: src/halo2/tmp/2-Fibonacci-example-1.md:43
msgid ""
"`FiboConfig` ： 定义了需要挑选哪些”芯片元件“（advice、selector、instance...）"
msgstr ""
"`FiboConfig` ： 定义了需要挑选哪些”芯片元件“（advice、selector、instance...）"

#: src/halo2/tmp/2-Fibonacci-example-1.md:45
msgid "`impl FiboChip`：芯片元件的连接排布方式"
msgstr "`impl FiboChip`：芯片元件的连接排布方式"

#: src/halo2/tmp/2-Fibonacci-example-1.md:46
msgid "`fn construct()`"
msgstr "`fn construct()`"

#: src/halo2/tmp/2-Fibonacci-example-1.md:47
msgid "`fn configure()` ： 门(create_gate)"
msgstr "`fn configure()` ： 门(create_gate)"

#: src/halo2/tmp/2-Fibonacci-example-1.md:49
msgid "ACell"
msgstr "ACell"

#: src/halo2/tmp/2-Fibonacci-example-1.md:56
msgid "**Why ACell ?**"
msgstr "**Why ACell ?**"

#: src/halo2/tmp/2-Fibonacci-example-1.md:57
msgid ""
"**封装和抽象**：通过使用 `ACell`，我们为用户提供了一个简化和更直观的接口，使"
"他们可以更容易地与已分配的单元格进行交互，而不必每次都直接处理 `AssignedCell`"
msgstr ""
"**封装和抽象**：通过使用 `ACell`，我们为用户提供了一个简化和更直观的接口，使"
"他们可以更容易地与已分配的单元格进行交互，而不必每次都直接处理 `AssignedCell`"

#: src/halo2/tmp/2-Fibonacci-example-1.md:58
msgid ""
"**灵活性**：将来，如果我们想在 `ACell` 中添加更多的功能或属性，我们可以这样做"
"而不影响现有的代码"
msgstr ""
"**灵活性**：将来，如果我们想在 `ACell` 中添加更多的功能或属性，我们可以这样做"
"而不影响现有的代码"

#: src/halo2/tmp/2-Fibonacci-example-1.md:59
msgid "故 : `ACell` 主要是一个辅助结构体，用于简化与电路中单元格的交互"
msgstr "故 : `ACell` 主要是一个辅助结构体，用于简化与电路中单元格的交互"

#: src/halo2/tmp/2-Fibonacci-example-1.md:61
msgid "**元素访问 :** "
msgstr "**元素访问 :** "

#: src/halo2/tmp/2-Fibonacci-example-1.md:62
msgid ""
"```rust\n"
"// 因为 `ACell` 是对 `AssignedCell` 的简单包装，\n"
"// 所以可以直接使用 `.0` 语法来访问其内部的 `AssignedCell` :  `prev_b.0`\n"
"let c_val = prev_b.0.value().copied() + prev_c.0.value();\n"
"```"
msgstr ""
"```rust\n"
"// 因为 `ACell` 是对 `AssignedCell` 的简单包装，\n"
"// 所以可以直接使用 `.0` 语法来访问其内部的 `AssignedCell` :  `prev_b.0`\n"
"let c_val = prev_b.0.value().copied() + prev_c.0.value();\n"
"```"

#: src/halo2/tmp/2-Fibonacci-example-1.md:68
msgid "`.map(ACell)?` 访问 :"
msgstr "`.map(ACell)?` 访问 :"

#: src/halo2/tmp/2-Fibonacci-example-1.md:69
msgid ""
"具体来说，`assign_advice` 返回的是 `Result<AssignedCell<F, F>, Error>`， `."
"map(ACell)` 会将其转换为 `Result<ACell<F>, Error>` "
msgstr ""
"具体来说，`assign_advice` 返回的是 `Result<AssignedCell<F, F>, Error>`， `."
"map(ACell)` 会将其转换为 `Result<ACell<F>, Error>` "

#: src/halo2/tmp/2-Fibonacci-example-1.md:70
msgid ""
"元组结构体本身可以作为函数来调用, 相当于调用一个带有一个参数的构造函数。"
msgstr ""
"元组结构体本身可以作为函数来调用, 相当于调用一个带有一个参数的构造函数。"

#: src/halo2/tmp/2-Fibonacci-example-1.md:72
msgid ""
"```rust\n"
"// when call .map() , 我们提供一个函数，将其应用于 Result 内的 Ok 的值（if "
"so）\n"
"// 本例中传递的函数是 ACell 的构造函数，所以我们是将 AssignedCell 转换成 "
"ACell\n"
"// 对于 tuple struct, 如 `let black = Color(0, 0, 0);`\n"
"// therefore  `AssignedCell<F, F>` 本身是一个函数\n"
"let a_cell = region\n"
"    .assign_advice(|| \"a\", self.config.advice[0], 0, || a)\n"
"    .map(ACell)?;\n"
"```"
msgstr ""
"```rust\n"
"// when call .map() , 我们提供一个函数，将其应用于 Result 内的 Ok 的值（if "
"so）\n"
"// 本例中传递的函数是 ACell 的构造函数，所以我们是将 AssignedCell 转换成 "
"ACell\n"
"// 对于 tuple struct, 如 `let black = Color(0, 0, 0);`\n"
"// therefore  `AssignedCell<F, F>` 本身是一个函数\n"
"let a_cell = region\n"
"    .assign_advice(|| \"a\", self.config.advice[0], 0, || a)\n"
"    .map(ACell)?;\n"
"```"

#: src/halo2/tmp/2-Fibonacci-example-1.md:82
msgid "impl FiboChip { ..."
msgstr "impl FiboChip { ..."

#: src/halo2/tmp/2-Fibonacci-example-1.md:84
msgid "`fn construct`"
msgstr "`fn construct`"

#: src/halo2/tmp/2-Fibonacci-example-1.md:85
msgid "`fn configure`"
msgstr "`fn configure`"

#: src/halo2/tmp/2-Fibonacci-example-1.md:86
msgid "`fn assign_first_row`"
msgstr "`fn assign_first_row`"

#: src/halo2/tmp/2-Fibonacci-example-1.md:87
msgid "`fn assign_row`"
msgstr "`fn assign_row`"

#: src/halo2/tmp/2-Fibonacci-example-1.md:88
msgid "`fn expose_public`"
msgstr "`fn expose_public`"

#: src/halo2/tmp/2-Fibonacci-example-1.md:90
#: src/halo2/tmp/6-Range-Check(code-explanation).md:148
#: src/halo2/tmp/7-Range-Check-lookup(example-2).md:72
#: src/halo2/tmp/7-Range-Check-lookup(example-2).md:174
#: src/halo2/tmp/8-Range-Check(example-3).md:91
#: src/halo2/tmp/8-Range-Check(example-3).md:235
msgid "fn configure()"
msgstr "fn configure()"

#: src/halo2/tmp/2-Fibonacci-example-1.md:92
msgid "参数："
msgstr "参数："

#: src/halo2/tmp/2-Fibonacci-example-1.md:93
msgid "`meta`: 是对约束系统的可变引用，允许我们在其中配置列和约束。"
msgstr "`meta`: 是对约束系统的可变引用，允许我们在其中配置列和约束。"

#: src/halo2/tmp/2-Fibonacci-example-1.md:94
msgid "Selector : 用于激活或禁用某些特定约束"
msgstr "Selector : 用于激活或禁用某些特定约束"

#: src/halo2/tmp/2-Fibonacci-example-1.md:95
msgid "`meta.query_selector` : Query a selector at the current position."
msgstr "`meta.query_selector` : Query a selector at the current position."

#: src/halo2/tmp/2-Fibonacci-example-1.md:96
msgid ""
"`Query an advice column at a relative position` : Query an advice column at "
"a relative position"
msgstr ""
"`Query an advice column at a relative position` : Query an advice column at "
"a relative position"

#: src/halo2/tmp/2-Fibonacci-example-1.md:98
msgid ""
"```rust\n"
"impl<F: FieldExt> FiboChip<F> {\n"
"    // pub fn construct(config: FiboConfig) -> Self \n"
"    pub fn configure(\n"
"        meta: &mut ConstraintSystem<F>,\n"
"        advice: [Column<Advice>; 3],\n"
"        instance: Column<Instance>,\n"
"    ) -> FiboConfig {\n"
"        let col_a = advice[0]; // 对每个 advice 列进行命名\n"
"        let col_b = advice[1];\n"
"        let col_c = advice[2];\n"
"        let selector = meta.selector();\n"
"\n"
"        meta.enable_equality(col_a);\n"
"        meta.enable_equality(col_b);\n"
"        meta.enable_equality(col_c);\n"
"        meta.enable_equality(instance);\n"
"\n"
"        meta.create_gate(\"add\", |meta| {\n"
"            //\n"
"            // col_a | col_b | col_c | selector\n"
"            //   a      b        c       s\n"
"            //\n"
"            // Query a selector at the current position.\n"
"            let s = meta.query_selector(selector);\n"
"            let a = meta.query_advice(col_a, Rotation::cur());\n"
"            let b = meta.query_advice(col_b, Rotation::cur());\n"
"            let c = meta.query_advice(col_c, Rotation::cur());\n"
"            vec![s * (a + b - c)]\n"
"        });\n"
"\n"
"        FiboConfig {\n"
"            advice: [col_a, col_b, col_c],\n"
"            selector,\n"
"            instance,\n"
"        }\n"
"    }\n"
"```"
msgstr ""
"```rust\n"
"impl<F: FieldExt> FiboChip<F> {\n"
"    // pub fn construct(config: FiboConfig) -> Self \n"
"    pub fn configure(\n"
"        meta: &mut ConstraintSystem<F>,\n"
"        advice: [Column<Advice>; 3],\n"
"        instance: Column<Instance>,\n"
"    ) -> FiboConfig {\n"
"        let col_a = advice[0]; // 对每个 advice 列进行命名\n"
"        let col_b = advice[1];\n"
"        let col_c = advice[2];\n"
"        let selector = meta.selector();\n"
"\n"
"        meta.enable_equality(col_a);\n"
"        meta.enable_equality(col_b);\n"
"        meta.enable_equality(col_c);\n"
"        meta.enable_equality(instance);\n"
"\n"
"        meta.create_gate(\"add\", |meta| {\n"
"            //\n"
"            // col_a | col_b | col_c | selector\n"
"            //   a      b        c       s\n"
"            //\n"
"            // Query a selector at the current position.\n"
"            let s = meta.query_selector(selector);\n"
"            let a = meta.query_advice(col_a, Rotation::cur());\n"
"            let b = meta.query_advice(col_b, Rotation::cur());\n"
"            let c = meta.query_advice(col_c, Rotation::cur());\n"
"            vec![s * (a + b - c)]\n"
"        });\n"
"\n"
"        FiboConfig {\n"
"            advice: [col_a, col_b, col_c],\n"
"            selector,\n"
"            instance,\n"
"        }\n"
"    }\n"
"```"

#: src/halo2/tmp/2-Fibonacci-example-1.md:137
msgid "fn assign_first_row()"
msgstr "fn assign_first_row()"

#: src/halo2/tmp/2-Fibonacci-example-1.md:139
msgid ""
"函数作用：为 Fibonacci list 的第一行的前 2 个元素分配值 `1 `  , 返回前 3 个元"
"素 `a_cell, b_cell, c_cell`"
msgstr ""
"函数作用：为 Fibonacci list 的第一行的前 2 个元素分配值 `1 `  , 返回前 3 个元"
"素 `a_cell, b_cell, c_cell`"

#: src/halo2/tmp/2-Fibonacci-example-1.md:141
msgid ""
"`region.assign_advice_from_instance` ：从 Instance column (public input) 中取"
"值并赋值给 Advice"
msgstr ""
"`region.assign_advice_from_instance` ：从 Instance column (public input) 中取"
"值并赋值给 Advice"

#: src/halo2/tmp/2-Fibonacci-example-1.md:142
msgid ""
"```rust\n"
"// 在 MockProver::run 中，instance 就是 vec![public_input.clone()]\n"
"MockProver::run(k, &circuit, vec![public_input.clone()]).unwrap();\n"
"```"
msgstr ""
"```rust\n"
"// 在 MockProver::run 中，instance 就是 vec![public_input.clone()]\n"
"MockProver::run(k, &circuit, vec![public_input.clone()]).unwrap();\n"
"```"

#: src/halo2/tmp/2-Fibonacci-example-1.md:147
msgid ""
"`region.assign_advice`：给 Advice column 赋值，这里特指给斐波那契数列的第 3 "
"个数赋值 `f(2) = f(0) + f(1)`"
msgstr ""
"`region.assign_advice`：给 Advice column 赋值，这里特指给斐波那契数列的第 3 "
"个数赋值 `f(2) = f(0) + f(1)`"

#: src/halo2/tmp/2-Fibonacci-example-1.md:150
msgid ""
"```rust\n"
"pub fn assign_first_row(\n"
"\t&self,\n"
"\tmut layouter: impl Layouter<F>,\n"
") -> Result<(ACell<F>, ACell<F>, ACell<F>), Error> {\n"
"\tlayouter.assign_region(\n"
"\t\t|| \"first row\",\n"
"\t\t|mut region| {\n"
"\t\t\tself.config.selector.enable(&mut region, 0)?;\n"
"\n"
"\t\t\tlet a_cell = region.assign_advice_from_instance(\n"
"\t\t\t\t|| \"f(0)\",\n"
"\t\t\t\tself.config.instance,\n"
"\t\t\t\t0,  // instance column's row 0\n"
"\t\t\t\tself.config.advice[0],\n"
"\t\t\t\t0  // offset, advice column's row.\n"
"\t\t\t).map(ACell)?;\n"
"\n"
"\t\t\tlet b_cell = region.assign_advice_from_instance(\n"
"\t\t\t\t|| \"f(1)\",\n"
"\t\t\t\tself.config.instance,\n"
"\t\t\t\t1, // instance column's row 1\n"
"\t\t\t\tself.config.advice[1],\n"
"\t\t\t\t0  // offset, advice column's row.\n"
"\t\t\t).map(ACell)?;\n"
"\n"
"\t\t\tlet c_cell = region.assign_advice(\n"
"\t\t\t\t|| \"f(0)+f(1) i.e. a + b\",\n"
"\t\t\t\tself.config.advice[2],\n"
"\t\t\t\t0,\n"
"\t\t\t\t|| a_cell.0.value().copied() + b_cell.0.value()\n"
"\t\t\t).map(ACell)?;\n"
"\n"
"\t\t\tOk((a_cell, b_cell, c_cell))\n"
"\t\t},\n"
"\t)\n"
"}\n"
"```"
msgstr ""
"```rust\n"
"pub fn assign_first_row(\n"
"\t&self,\n"
"\tmut layouter: impl Layouter<F>,\n"
") -> Result<(ACell<F>, ACell<F>, ACell<F>), Error> {\n"
"\tlayouter.assign_region(\n"
"\t\t|| \"first row\",\n"
"\t\t|mut region| {\n"
"\t\t\tself.config.selector.enable(&mut region, 0)?;\n"
"\n"
"\t\t\tlet a_cell = region.assign_advice_from_instance(\n"
"\t\t\t\t|| \"f(0)\",\n"
"\t\t\t\tself.config.instance,\n"
"\t\t\t\t0,  // instance column's row 0\n"
"\t\t\t\tself.config.advice[0],\n"
"\t\t\t\t0  // offset, advice column's row.\n"
"\t\t\t).map(ACell)?;\n"
"\n"
"\t\t\tlet b_cell = region.assign_advice_from_instance(\n"
"\t\t\t\t|| \"f(1)\",\n"
"\t\t\t\tself.config.instance,\n"
"\t\t\t\t1, // instance column's row 1\n"
"\t\t\t\tself.config.advice[1],\n"
"\t\t\t\t0  // offset, advice column's row.\n"
"\t\t\t).map(ACell)?;\n"
"\n"
"\t\t\tlet c_cell = region.assign_advice(\n"
"\t\t\t\t|| \"f(0)+f(1) i.e. a + b\",\n"
"\t\t\t\tself.config.advice[2],\n"
"\t\t\t\t0,\n"
"\t\t\t\t|| a_cell.0.value().copied() + b_cell.0.value()\n"
"\t\t\t).map(ACell)?;\n"
"\n"
"\t\t\tOk((a_cell, b_cell, c_cell))\n"
"\t\t},\n"
"\t)\n"
"}\n"
"```"

#: src/halo2/tmp/2-Fibonacci-example-1.md:189
msgid "fn assign_row()"
msgstr "fn assign_row()"

#: src/halo2/tmp/2-Fibonacci-example-1.md:191
msgid "`fn assign_row()` 函数的作用：不断将上一行的 "
msgstr "`fn assign_row()` 函数的作用：不断将上一行的 "

#: src/halo2/tmp/2-Fibonacci-example-1.md:191
msgid " Advice 列复制到当前行的 "
msgstr " Advice 列复制到当前行的 "

#: src/halo2/tmp/2-Fibonacci-example-1.md:191
msgid " Advice 列"
msgstr " Advice 列"

#: src/halo2/tmp/2-Fibonacci-example-1.md:193
msgid ""
"PS：这是通过 `impl Circuit for MyCircuit..` 中的  `synthesis()` 重复调用实现"
"的： "
msgstr ""
"PS：这是通过 `impl Circuit for MyCircuit..` 中的  `synthesis()` 重复调用实现"
"的： "

#: src/halo2/tmp/2-Fibonacci-example-1.md:194
msgid ""
"```rust\n"
"fn synthesis() {\n"
"    // ...\n"
"\tfor _i in 3..10 {\n"
"\t\tlet c_cell = chip.assign_row(layouter.namespace(|| \"next row\"), "
"&prev_b, &prev_c)?;\n"
"\t\tprev_b = prev_c;\n"
"\t\tprev_c = c_cell;\n"
"\t}\n"
"```"
msgstr ""
"```rust\n"
"fn synthesis() {\n"
"    // ...\n"
"\tfor _i in 3..10 {\n"
"\t\tlet c_cell = chip.assign_row(layouter.namespace(|| \"next row\"), "
"&prev_b, &prev_c)?;\n"
"\t\tprev_b = prev_c;\n"
"\t\tprev_c = c_cell;\n"
"\t}\n"
"```"

#: src/halo2/tmp/2-Fibonacci-example-1.md:204
#: src/halo2/tmp/4-IsZero-Check-example-3.md:63
msgid "传入参数："
msgstr "传入参数："

#: src/halo2/tmp/2-Fibonacci-example-1.md:205
msgid "`prev_b: &ACell<F>, prev_c: &ACell<F>,` ： 这正是_上一行_中的 "
msgstr "`prev_b: &ACell<F>, prev_c: &ACell<F>,` ： 这正是_上一行_中的 "

#: src/halo2/tmp/2-Fibonacci-example-1.md:205
msgid ""
" Advice 列（第 2/3 Advice 列），这意味着前一个`b`值被复制到新行的第一列（标记"
"为`a`），前一个`c`值被复制到新行的第二列（标记为`b`）"
msgstr ""
" Advice 列（第 2/3 Advice 列），这意味着前一个`b`值被复制到新行的第一列（标记"
"为`a`），前一个`c`值被复制到新行的第二列（标记为`b`）"

#: src/halo2/tmp/2-Fibonacci-example-1.md:207
msgid "将 `prev_b、prev_c` 2 个 Cells  `copy_advice` 到新的 Advice 列后："
msgstr "将 `prev_b、prev_c` 2 个 Cells  `copy_advice` 到新的 Advice 列后："

#: src/halo2/tmp/2-Fibonacci-example-1.md:208
msgid "计算新的斐波那契数`c_val`，它是`prev_b`和`prev_c`的和。"
msgstr "计算新的斐波那契数`c_val`，它是`prev_b`和`prev_c`的和。"

#: src/halo2/tmp/2-Fibonacci-example-1.md:209
msgid "使用`assign_advice`分配`c_val`到新行的第三列，并返回此值的 `ACell`"
msgstr "使用`assign_advice`分配`c_val`到新行的第三列，并返回此值的 `ACell`"

#: src/halo2/tmp/2-Fibonacci-example-1.md:211
msgid ""
"```rust\n"
"pub fn assign_row(\n"
"\t&self,  // 当前`FiboChip`实例的引用\n"
"\tmut layouter: impl Layouter<F>,\n"
"\tprev_b: &ACell<F>,   // Fibonacci 数列中的上一行的第 2/3 个 Advice Cell\n"
"\tprev_c: &ACell<F>,\n"
") -> Result<ACell<F>, Error> {\n"
"\tlayouter.assign_region(\n"
"\t\t|| \"next row\",\n"
"\t\t|mut region| {\n"
"\t\t\tself.config.selector.enable(&mut region, 0)?;\n"
"\n"
"\t\t\tprev_b.0.copy_advice(\n"
"\t\t\t\t|| \"a\", \n"
"\t\t\t\t&mut region, \n"
"\t\t\t\tself.config.advice[0], \n"
"\t\t\t\t0\n"
"\t\t\t)?;\n"
"\t\t\tprev_c.0.copy_advice(|| \"b\", &mut region, self.config.advice[1], "
"0)?;\n"
"\n"
"\t\t\tlet c_val = prev_b.0.value().copied() + prev_c.0.value();\n"
"\n"
"\t\t\tlet c_cell = region\n"
"\t\t\t\t.assign_advice(|| \"c\", self.config.advice[2], 0, || c_val)\n"
"\t\t\t\t.map(ACell)?;\n"
"\n"
"\t\t\tOk(c_cell)\n"
"\t\t},\n"
"\t)\n"
"}\n"
"```"
msgstr ""
"```rust\n"
"pub fn assign_row(\n"
"\t&self,  // 当前`FiboChip`实例的引用\n"
"\tmut layouter: impl Layouter<F>,\n"
"\tprev_b: &ACell<F>,   // Fibonacci 数列中的上一行的第 2/3 个 Advice Cell\n"
"\tprev_c: &ACell<F>,\n"
") -> Result<ACell<F>, Error> {\n"
"\tlayouter.assign_region(\n"
"\t\t|| \"next row\",\n"
"\t\t|mut region| {\n"
"\t\t\tself.config.selector.enable(&mut region, 0)?;\n"
"\n"
"\t\t\tprev_b.0.copy_advice(\n"
"\t\t\t\t|| \"a\", \n"
"\t\t\t\t&mut region, \n"
"\t\t\t\tself.config.advice[0], \n"
"\t\t\t\t0\n"
"\t\t\t)?;\n"
"\t\t\tprev_c.0.copy_advice(|| \"b\", &mut region, self.config.advice[1], "
"0)?;\n"
"\n"
"\t\t\tlet c_val = prev_b.0.value().copied() + prev_c.0.value();\n"
"\n"
"\t\t\tlet c_cell = region\n"
"\t\t\t\t.assign_advice(|| \"c\", self.config.advice[2], 0, || c_val)\n"
"\t\t\t\t.map(ACell)?;\n"
"\n"
"\t\t\tOk(c_cell)\n"
"\t\t},\n"
"\t)\n"
"}\n"
"```"

#: src/halo2/tmp/2-Fibonacci-example-1.md:243
msgid "**copy_advice  vs  assign_advice**   i.e.   **复制 vs. 赋值**: "
msgstr "**copy_advice  vs  assign_advice**   i.e.   **复制 vs. 赋值**: "

#: src/halo2/tmp/2-Fibonacci-example-1.md:244
msgid ""
"当我们说“复制”，我们实际上是说我们要确保一个 Region-Cell 的值与另一个 Region-"
"Cell 中的值是相同的。与其为每个地方重新计算/分配(assign)一个值，不如简单地“复"
"制”该值到新位置，以确保它们是一样的（考虑 PLONK 中的 permutation argument）"
msgstr ""
"当我们说“复制”，我们实际上是说我们要确保一个 Region-Cell 的值与另一个 Region-"
"Cell 中的值是相同的。与其为每个地方重新计算/分配(assign)一个值，不如简单地“复"
"制”该值到新位置，以确保它们是一样的（考虑 PLONK 中的 permutation argument）"

#: src/halo2/tmp/2-Fibonacci-example-1.md:245
msgid ""
"**Permutations and Copy Constraints**:  Halo2 使用一种称为\"permutation "
"argument\"的技术来确保两个或多个单元格中的值是相同的。`copy_advice` 实际上是"
"在背后使用这个技术，通过引入一个额外的约束来确保值的一致性"
msgstr ""
"**Permutations and Copy Constraints**:  Halo2 使用一种称为\"permutation "
"argument\"的技术来确保两个或多个单元格中的值是相同的。`copy_advice` 实际上是"
"在背后使用这个技术，通过引入一个额外的约束来确保值的一致性"

#: src/halo2/tmp/2-Fibonacci-example-1.md:247
msgid "fn expose_public()"
msgstr "fn expose_public()"

#: src/halo2/tmp/2-Fibonacci-example-1.md:249
msgid "`expose_public` 函数作用：将指定的 `ACell` 公开为 Public Input"
msgstr "`expose_public` 函数作用：将指定的 `ACell` 公开为 Public Input"

#: src/halo2/tmp/2-Fibonacci-example-1.md:251
msgid ""
"```rust\n"
"fn synthesis() {\n"
"    // ...\n"
"    // 将最后一个值公开为 public input\n"
"    chip.expose_public(layouter.namespace(|| \"out\"), &prev_c, 2)?;\n"
"}\n"
"```"
msgstr ""
"```rust\n"
"fn synthesis() {\n"
"    // ...\n"
"    // 将最后一个值公开为 public input\n"
"    chip.expose_public(layouter.namespace(|| \"out\"), &prev_c, 2)?;\n"
"}\n"
"```"

#: src/halo2/tmp/2-Fibonacci-example-1.md:271
msgid "MyCircuit"
msgstr "MyCircuit"

#: src/halo2/tmp/2-Fibonacci-example-1.md:273
msgid ""
"`let chip = FiboChip::construct(config);` : 传入 `config` 创建一个新的 "
"`FiboChip` 实例"
msgstr ""
"`let chip = FiboChip::construct(config);` : 传入 `config` 创建一个新的 "
"`FiboChip` 实例"

#: src/halo2/tmp/2-Fibonacci-example-1.md:274
msgid ""
"`chip.assign_first_row(layouter.namespace(|| \"first row\"), self.a, self."
"b)?;` : **初始化斐波那契数列**:  调用 `assign_first_row` 函数以在第一行中设置"
"斐波那契数列的前两个值 self.a 和 self.b。返回的结果是三个值：prev_a, prev_b "
"和 prev_c。其中，prev_c 是前两个数的和 "
msgstr ""
"`chip.assign_first_row(layouter.namespace(|| \"first row\"), self.a, self."
"b)?;` : **初始化斐波那契数列**:  调用 `assign_first_row` 函数以在第一行中设置"
"斐波那契数列的前两个值 self.a 和 self.b。返回的结果是三个值：prev_a, prev_b "
"和 prev_c。其中，prev_c 是前两个数的和 "

#: src/halo2/tmp/2-Fibonacci-example-1.md:275
msgid ""
"`chip.expose_public(layouter.namespace(|| \"private a\"), &prev_a, 0)?;` : **"
"公开前两个数**:  将前两个数 expose 为 public, 这意味着这些值可以被 "
msgstr ""
"`chip.expose_public(layouter.namespace(|| \"private a\"), &prev_a, 0)?;` : **"
"公开前两个数**:  将前两个数 expose 为 public, 这意味着这些值可以被 "

#: src/halo2/tmp/2-Fibonacci-example-1.md:275
msgid " 访问和验证"
msgstr " 访问和验证"

#: src/halo2/tmp/2-Fibonacci-example-1.md:276
msgid ""
"**计算后续的斐波那契数**: ` for` 循环中，`assign_row` 函数被调用以计算后续的"
"斐波那契数。每次迭代都会生成新的斐波那契数并为下一次迭代更新 `prev_b` 和 "
"`prev_c`"
msgstr ""
"**计算后续的斐波那契数**: ` for` 循环中，`assign_row` 函数被调用以计算后续的"
"斐波那契数。每次迭代都会生成新的斐波那契数并为下一次迭代更新 `prev_b` 和 "
"`prev_c`"

#: src/halo2/tmp/2-Fibonacci-example-1.md:277
msgid ""
"`chip.expose_public(layouter.namespace(|| \"out\"), &prev_c, 2)?;` : **公开最"
"终的斐波那契数**:  将循环结束后的最后一个斐波那契数值设为 Public"
msgstr ""
"`chip.expose_public(layouter.namespace(|| \"out\"), &prev_c, 2)?;` : **公开最"
"终的斐波那契数**:  将循环结束后的最后一个斐波那契数值设为 Public"

#: src/halo2/tmp/2-Fibonacci-example-1.md:301
#: src/halo2/tmp/7-Range-Check-lookup(example-2).md:404
msgid "fn synthesis()"
msgstr "fn synthesis()"

#: src/halo2/tmp/2-Fibonacci-example-1.md:303
msgid ""
"这个函数定义了在 `MyCircuit` 电路中如何放置约束和分配单元格 Cell，它构建了一"
"个斐波那契序列，并确保输出正确。"
msgstr ""
"这个函数定义了在 `MyCircuit` 电路中如何放置约束和分配单元格 Cell，它构建了一"
"个斐波那契序列，并确保输出正确。"

#: src/halo2/tmp/2-Fibonacci-example-1.md:305
msgid ""
"```rust\n"
"fn synthesize(\n"
"\t&self,\n"
"\tconfig: Self::Config,\n"
"\tmut layouter: impl Layouter<F>,\n"
") -> Result<(), Error> {\n"
"\tlet chip = FiboChip::construct(config);\n"
"\n"
"\tlet (_, mut prev_b, mut prev_c) =\n"
"\t\tchip.assign_first_row(layouter.namespace(|| \"first row\"))?;\n"
"\t\n"
"\t// 这是干啥??\n"
"\t// chip.expose_public(layouter.namespace(|| \"private a\"), &prev_a, 0)?;\n"
"\t// chip.expose_public(layouter.namespace(|| \"private b\"), &prev_b, 1)?;\n"
"\n"
"\tfor _i in 3..10 {\n"
"\t\tlet c_cell = chip.assign_row(layouter.namespace(|| \"next row\"), "
"&prev_b, &prev_c)?;\n"
"\t\tprev_b = prev_c;\n"
"\t\tprev_c = c_cell;\n"
"\t}\n"
"\n"
"\tchip.expose_public(layouter.namespace(|| \"out\"), &prev_c, 2)?;\n"
"\n"
"\tOk(())\n"
"}\n"
"```"
msgstr ""
"```rust\n"
"fn synthesize(\n"
"\t&self,\n"
"\tconfig: Self::Config,\n"
"\tmut layouter: impl Layouter<F>,\n"
") -> Result<(), Error> {\n"
"\tlet chip = FiboChip::construct(config);\n"
"\n"
"\tlet (_, mut prev_b, mut prev_c) =\n"
"\t\tchip.assign_first_row(layouter.namespace(|| \"first row\"))?;\n"
"\t\n"
"\t// 这是干啥??\n"
"\t// chip.expose_public(layouter.namespace(|| \"private a\"), &prev_a, 0)?;\n"
"\t// chip.expose_public(layouter.namespace(|| \"private b\"), &prev_b, 1)?;\n"
"\n"
"\tfor _i in 3..10 {\n"
"\t\tlet c_cell = chip.assign_row(layouter.namespace(|| \"next row\"), "
"&prev_b, &prev_c)?;\n"
"\t\tprev_b = prev_c;\n"
"\t\tprev_c = c_cell;\n"
"\t}\n"
"\n"
"\tchip.expose_public(layouter.namespace(|| \"out\"), &prev_c, 2)?;\n"
"\n"
"\tOk(())\n"
"}\n"
"```"

#: src/halo2/tmp/2-Fibonacci-example-1.md:332
#: src/halo2/tmp/3-Fibonacci-example-2.md:161
#: src/halo2/tmp/8-Range-Check(example-3).md:328
msgid "Test"
msgstr "Test"

#: src/halo2/tmp/2-Fibonacci-example-1.md:334
msgid ""
"```rust\n"
"#[cfg(test)]\n"
"mod tests {\n"
"    use super::MyCircuit;\n"
"    use halo2_proofs::{circuit::Value, dev::MockProver, pasta::Fp};\n"
"    use std::marker::PhantomData;\n"
"\n"
"    #[test]\n"
"    fn test_example1() {\n"
"        let k = 4;\n"
"\n"
"        let a = Fp::from(1); // F[0]\n"
"        let b = Fp::from(1); // F[1]\n"
"        let out = Fp::from(55); // F[9]\n"
"\n"
"        let circuit = MyCircuit(PhantomData);\n"
"\n"
"        let mut public_input = vec![a, b, out];\n"
"\n"
"        let prover = MockProver::run(k, &circuit, vec![public_input."
"clone()]).unwrap();\n"
"        prover.assert_satisfied();\n"
"\n"
"        public_input[2] += Fp::one(); // out += 2  =>  unsatisfied\n"
"        let _prover = MockProver::run(k, &circuit, vec![public_input])."
"unwrap();\n"
"        // uncomment the following line and the assert will fail\n"
"        // _prover.assert_satisfied();\n"
"    }\n"
"```"
msgstr ""
"```rust\n"
"#[cfg(test)]\n"
"mod tests {\n"
"    use super::MyCircuit;\n"
"    use halo2_proofs::{circuit::Value, dev::MockProver, pasta::Fp};\n"
"    use std::marker::PhantomData;\n"
"\n"
"    #[test]\n"
"    fn test_example1() {\n"
"        let k = 4;\n"
"\n"
"        let a = Fp::from(1); // F[0]\n"
"        let b = Fp::from(1); // F[1]\n"
"        let out = Fp::from(55); // F[9]\n"
"\n"
"        let circuit = MyCircuit(PhantomData);\n"
"\n"
"        let mut public_input = vec![a, b, out];\n"
"\n"
"        let prover = MockProver::run(k, &circuit, vec![public_input."
"clone()]).unwrap();\n"
"        prover.assert_satisfied();\n"
"\n"
"        public_input[2] += Fp::one(); // out += 2  =>  unsatisfied\n"
"        let _prover = MockProver::run(k, &circuit, vec![public_input])."
"unwrap();\n"
"        // uncomment the following line and the assert will fail\n"
"        // _prover.assert_satisfied();\n"
"    }\n"
"```"

#: src/halo2/tmp/2-Fibonacci-example-1.md:363
#: src/halo2/tmp/3-Fibonacci-example-2.md:192
#: src/halo2/tmp/8-Range-Check(example-3).md:355
#: src/halo2/tmp/9-decomposed.md:442 src/halo2/tmp/Hammster.md:132
msgid "Usage"
msgstr "Usage"

#: src/halo2/tmp/2-Fibonacci-example-1.md:372
#: src/halo2/tmp/3-Fibonacci-example-2.md:201
#: src/halo2/tmp/3-Fibonacci-example-2.md:381
#: src/halo2/tmp/4-IsZero-Check-example-3.md:301
#: src/halo2/tmp/7-Range-Check-lookup(example-2).md:476
#: src/halo2/tmp/8-Range-Check(example-3).md:364
#: src/halo2/tmp/9-decomposed.md:451
msgid "the white column is the instance column, "
msgstr "the white column is the instance column, "

#: src/halo2/tmp/2-Fibonacci-example-1.md:373
#: src/halo2/tmp/3-Fibonacci-example-2.md:202
#: src/halo2/tmp/3-Fibonacci-example-2.md:382
#: src/halo2/tmp/4-IsZero-Check-example-3.md:302
#: src/halo2/tmp/7-Range-Check-lookup(example-2).md:477
#: src/halo2/tmp/8-Range-Check(example-3).md:365
#: src/halo2/tmp/9-decomposed.md:452
msgid "the pink one is the advice and "
msgstr "the pink one is the advice and "

#: src/halo2/tmp/2-Fibonacci-example-1.md:374
#: src/halo2/tmp/3-Fibonacci-example-2.md:203
#: src/halo2/tmp/3-Fibonacci-example-2.md:383
#: src/halo2/tmp/4-IsZero-Check-example-3.md:303
#: src/halo2/tmp/7-Range-Check-lookup(example-2).md:478
#: src/halo2/tmp/8-Range-Check(example-3).md:366
#: src/halo2/tmp/9-decomposed.md:453
msgid "the purple one is the selector."
msgstr "the purple one is the selector."

#: src/halo2/tmp/2-Fibonacci-example-1.md:375
#: src/halo2/tmp/3-Fibonacci-example-2.md:204
#: src/halo2/tmp/3-Fibonacci-example-2.md:384
#: src/halo2/tmp/4-IsZero-Check-example-3.md:304
#: src/halo2/tmp/7-Range-Check-lookup(example-2).md:479
#: src/halo2/tmp/8-Range-Check(example-3).md:367
#: src/halo2/tmp/9-decomposed.md:454
msgid "the green part shows the cells that have been assigned"
msgstr "the green part shows the cells that have been assigned"

#: src/halo2/tmp/2-Fibonacci-example-1.md:376
#: src/halo2/tmp/3-Fibonacci-example-2.md:205
#: src/halo2/tmp/3-Fibonacci-example-2.md:385
#: src/halo2/tmp/4-IsZero-Check-example-3.md:305
#: src/halo2/tmp/7-Range-Check-lookup(example-2).md:480
#: src/halo2/tmp/8-Range-Check(example-3).md:368
#: src/halo2/tmp/9-decomposed.md:455
msgid "light green : selector not used."
msgstr "light green : selector not used."

#: src/halo2/tmp/2-Fibonacci-example-1.md:378
#: src/halo2/tmp/3-Fibonacci-example-2.md:207 src/public
#: goods/4-Proving-System.md:222
msgid "Reference :"
msgstr "Reference :"

#: src/halo2/tmp/2-Fibonacci-example-1.md:386
msgid "question"
msgstr "question"

#: src/halo2/tmp/2-Fibonacci-example-1.md:388
msgid "... No Question?"
msgstr "... No Question?"

#: src/halo2/tmp/3-Fibonacci-example-2.md:7
msgid "[Fibonacci Example 2](#fibonacci-example-2)"
msgstr "[Fibonacci Example 2](#fibonacci-example-2)"

#: src/halo2/tmp/3-Fibonacci-example-2.md:12
msgid "[\\------ 中文版本结束 ------](#-------中文版本结束-------)"
msgstr "[\\------ 中文版本结束 ------](#-------中文版本结束-------)"

#: src/halo2/tmp/3-Fibonacci-example-2.md:13
msgid "[Example 2](#example-2)"
msgstr "[Example 2](#example-2)"

#: src/halo2/tmp/3-Fibonacci-example-2.md:14
msgid "[print](#print)"
msgstr "[print](#print)"

#: src/halo2/tmp/3-Fibonacci-example-2.md:15
msgid "[Row & Column in Region](#row--column-in-region)"
msgstr "[Row & Column in Region](#row--column-in-region)"

#: src/halo2/tmp/3-Fibonacci-example-2.md:16
#: src/halo2/tmp/6-Range-Check(code-explanation).md:13
#: src/halo2/tmp/7-Range-Check-lookup(example-2).md:19
#: src/halo2/tmp/8-Range-Check(example-3).md:19
#: src/halo2/tmp/9-decomposed.md:17
msgid "[References :](#references-)"
msgstr "[References :](#references-)"

#: src/halo2/tmp/3-Fibonacci-example-2.md:18
msgid "Fibonacci Example 2"
msgstr "Fibonacci Example 2"

#: src/halo2/tmp/3-Fibonacci-example-2.md:20
msgid "回顾 Example-1 里的 Table："
msgstr "回顾 Example-1 里的 Table："

#: src/halo2/tmp/3-Fibonacci-example-2.md:24
msgid "在 example-1 中有一些问题："
msgstr "在 example-1 中有一些问题："

#: src/halo2/tmp/3-Fibonacci-example-2.md:25
msgid "**重复单元格太多**，每次需要将 2 个单元格从上一行复制到下一行，效率不高"
msgstr ""
"**重复单元格太多**，每次需要将 2 个单元格从上一行复制到下一行，效率不高"

#: src/halo2/tmp/3-Fibonacci-example-2.md:26
msgid "**更好的解决方案**：使用 Rotation 来访问多行是个更好的方案"
msgstr "**更好的解决方案**：使用 Rotation 来访问多行是个更好的方案"

#: src/halo2/tmp/3-Fibonacci-example-2.md:28
msgid "如下图： ![](./imgs/3-Fib/1.png)"
msgstr "如下图： ![](./imgs/3-Fib/1.png)"

#: src/halo2/tmp/3-Fibonacci-example-2.md:33
#: src/halo2/tmp/3-Fibonacci-example-2.md:224
msgid "在本例子中, 代码将更加紧凑和模块化, 以下是一些主要的区别 :"
msgstr "在本例子中, 代码将更加紧凑和模块化, 以下是一些主要的区别 :"

#: src/halo2/tmp/3-Fibonacci-example-2.md:35
#: src/halo2/tmp/3-Fibonacci-example-2.md:226
msgid "**Advice Columns**:"
msgstr "**Advice Columns**:"

#: src/halo2/tmp/3-Fibonacci-example-2.md:36
#: src/halo2/tmp/3-Fibonacci-example-2.md:227
msgid "**ex 1** : "
msgstr "**ex 1** : "

#: src/halo2/tmp/3-Fibonacci-example-2.md:37
msgid ""
"用了 3 个 advice columns：`col_a`, `col_b` 和 `col_c`，表的的第一行用来存储 "
"Fibonacci 序列的连续的 3 个数"
msgstr ""
"用了 3 个 advice columns：`col_a`, `col_b` 和 `col_c`，表的的第一行用来存储 "
"Fibonacci 序列的连续的 3 个数"

#: src/halo2/tmp/3-Fibonacci-example-2.md:38
#: src/halo2/tmp/3-Fibonacci-example-2.md:230
msgid "**ex 2**: "
msgstr "**ex 2**: "

#: src/halo2/tmp/3-Fibonacci-example-2.md:39
msgid "仅使用了**一个** advice column，并依赖 Rotation（轮转, 即 "
msgstr "仅使用了**一个** advice column，并依赖 Rotation（轮转, 即 "

#: src/halo2/tmp/3-Fibonacci-example-2.md:39
msgid "）来访问连续的行，减少了各种复制"
msgstr "）来访问连续的行，减少了各种复制"

#: src/halo2/tmp/3-Fibonacci-example-2.md:41
msgid ""
"```rust\n"
"// example-1\n"
"pub fn configure(.., advice: [Column<Advice>; 3], ..) {\n"
"    let col_i = advice[ii];\t\n"
"    meta.enable_equality(col_i); // 很多列需要声明 和 需要 enable...\n"
"\n"
"    meta.create_gate(\"add\", |meta| {\n"
"        let s = meta.query_selector(selector);\n"
"        let a = meta.query_advice(col_a, Rotation::cur()); //📢\n"
"        let b = meta.query_advice(col_b, Rotation::cur()); //📢\n"
"        let c = meta.query_advice(col_c, Rotation::cur()); //📢\n"
"    vec![s * (a + b - c)]\n"
"}\n"
"\n"
"----------------------------------------\n"
"\n"
"// example-2\n"
"pub fn configure(.., advice: Column<Advice>, ..) {\n"
"    let col_i = advice[ii];\t\n"
"\tmeta.enable_equality(advice);\n"
"\tmeta.enable_equality(instance);\n"
"\n"
"\t// Gen Custom Gate:\n"
"\tmeta.create_gate(\"add\", |meta| {\n"
"\t\t//\n"
"\t\t// advice | selector\n"
"\t\t//   a    |   s\n"
"\t\t//   b    |\n"
"\t\t//   c    |\n"
"\t\t//\n"
"\t\tlet s = meta.query_selector(selector);\n"
"\t\tlet a = meta.query_advice(advice, Rotation::cur());\n"
"\t\tlet b = meta.query_advice(advice, Rotation::next());\n"
"\t\tlet c = meta.query_advice(advice, Rotation(2));\n"
"\t\tvec![s * (a + b - c)]\n"
"\t});\n"
"```"
msgstr ""
"```rust\n"
"// example-1\n"
"pub fn configure(.., advice: [Column<Advice>; 3], ..) {\n"
"    let col_i = advice[ii];\t\n"
"    meta.enable_equality(col_i); // 很多列需要声明 和 需要 enable...\n"
"\n"
"    meta.create_gate(\"add\", |meta| {\n"
"        let s = meta.query_selector(selector);\n"
"        let a = meta.query_advice(col_a, Rotation::cur()); //📢\n"
"        let b = meta.query_advice(col_b, Rotation::cur()); //📢\n"
"        let c = meta.query_advice(col_c, Rotation::cur()); //📢\n"
"    vec![s * (a + b - c)]\n"
"}\n"
"\n"
"----------------------------------------\n"
"\n"
"// example-2\n"
"pub fn configure(.., advice: Column<Advice>, ..) {\n"
"    let col_i = advice[ii];\t\n"
"\tmeta.enable_equality(advice);\n"
"\tmeta.enable_equality(instance);\n"
"\n"
"\t// Gen Custom Gate:\n"
"\tmeta.create_gate(\"add\", |meta| {\n"
"\t\t//\n"
"\t\t// advice | selector\n"
"\t\t//   a    |   s\n"
"\t\t//   b    |\n"
"\t\t//   c    |\n"
"\t\t//\n"
"\t\tlet s = meta.query_selector(selector);\n"
"\t\tlet a = meta.query_advice(advice, Rotation::cur());\n"
"\t\tlet b = meta.query_advice(advice, Rotation::next());\n"
"\t\tlet c = meta.query_advice(advice, Rotation(2));\n"
"\t\tvec![s * (a + b - c)]\n"
"\t});\n"
"```"

#: src/halo2/tmp/3-Fibonacci-example-2.md:79
#: src/halo2/tmp/3-Fibonacci-example-2.md:264
msgid "`Rotation::cur()`  当前行 "
msgstr "`Rotation::cur()`  当前行 "

#: src/halo2/tmp/3-Fibonacci-example-2.md:80
#: src/halo2/tmp/3-Fibonacci-example-2.md:265
msgid "`Rotation::next()`  下一行"
msgstr "`Rotation::next()`  下一行"

#: src/halo2/tmp/3-Fibonacci-example-2.md:81
#: src/halo2/tmp/3-Fibonacci-example-2.md:266
msgid "`Rotation(2)`  再下一行"
msgstr "`Rotation(2)`  再下一行"

#: src/halo2/tmp/3-Fibonacci-example-2.md:83
msgid "The Polynomial Identity:  "
msgstr "The Polynomial Identity:  "

#: src/halo2/tmp/3-Fibonacci-example-2.md:87
#: src/halo2/tmp/3-Fibonacci-example-2.md:272
msgid "**数据赋值**:"
msgstr "**数据赋值**:"

#: src/halo2/tmp/3-Fibonacci-example-2.md:88
#: src/halo2/tmp/3-Fibonacci-example-2.md:273
msgid ""
"**ex 1**: 初始的 Fibonacci 数 `a` 和 `b` 被赋值到两个不同的 advice columns，"
"而他们的和则被赋值到第三个 column。"
msgstr ""
"**ex 1**: 初始的 Fibonacci 数 `a` 和 `b` 被赋值到两个不同的 advice columns，"
"而他们的和则被赋值到第三个 column。"

#: src/halo2/tmp/3-Fibonacci-example-2.md:89
#: src/halo2/tmp/3-Fibonacci-example-2.md:274
msgid ""
"**ex 2**: 所有的 Fibonacci 数都在同一个 advice column，但在不同的行 (thanks "
"to rotation)"
msgstr ""
"**ex 2**: 所有的 Fibonacci 数都在同一个 advice column，但在不同的行 (thanks "
"to rotation)"

#: src/halo2/tmp/3-Fibonacci-example-2.md:91
msgid ""
"```rust\n"
"////  Example 2  ////\n"
"pub fn assign(\n"
"\t&self,\n"
"\tmut layouter: impl Layouter<F>,\n"
"\tnrows: usize,  // 前 2 列赋值之后, 后面要搞的列数.. \n"
") -> Result<ACell<F>, Error> {\n"
"\tlayouter.assign_region(\n"
"\t\t|| \"entire fibonacci table\",\n"
"\t\t|mut region| {\n"
"\t\t\t// 为前两行启用 selector, 这意味着我们将从 instance (public input) 列中"
"复制 Fibo 序列的前 2 个数字\n"
"\t\t\tself.config.selector.enable(&mut region, 0)?;\n"
"\t\t\tself.config.selector.enable(&mut region, 1)?;\n"
"\t\t\t\n"
"\t\t\t// assign_advice_from_instance 方法，将 instance (public input) 列的前 "
"2 个值\n"
"\t\t\t//   (即 Fibonacci 序列的前两个数字）赋给 advice 列中的前 2 个单元格\n"
"\t\t\t//   后面在 MockProver 中, 我们会传入 instance 作为 Public input\n"
"\t\t\tlet mut a_cell = region.assign_advice_from_instance(\n"
"\t\t\t\t|| \"1\",\n"
"\t\t\t\tself.config.instance,\n"
"\t\t\t\t0,  // instance column's row 0\n"
"\t\t\t\tself.config.advice,\n"
"\t\t\t\t0, // 复制到当前的 region 的 row 0\n"
"\t\t\t).map(ACell)?;\n"
"\n"
"\t\t\tlet mut b_cell = region.assign_advice_from_instance(\n"
"\t\t\t\t|| \"1\",\n"
"\t\t\t\tself.config.instance,\n"
"\t\t\t\t1, // instance column's row 1\n"
"\t\t\t\tself.config.advice,\n"
"\t\t\t\t1,  // 复制到当前的 region 的 row 1\n"
"\t\t\t).map(ACell)?;\n"
"\n"
"            /// .....\n"
"\t\t},\n"
"\t)\n"
"}\n"
"```"
msgstr ""
"```rust\n"
"////  Example 2  ////\n"
"pub fn assign(\n"
"\t&self,\n"
"\tmut layouter: impl Layouter<F>,\n"
"\tnrows: usize,  // 前 2 列赋值之后, 后面要搞的列数.. \n"
") -> Result<ACell<F>, Error> {\n"
"\tlayouter.assign_region(\n"
"\t\t|| \"entire fibonacci table\",\n"
"\t\t|mut region| {\n"
"\t\t\t// 为前两行启用 selector, 这意味着我们将从 instance (public input) 列中"
"复制 Fibo 序列的前 2 个数字\n"
"\t\t\tself.config.selector.enable(&mut region, 0)?;\n"
"\t\t\tself.config.selector.enable(&mut region, 1)?;\n"
"\t\t\t\n"
"\t\t\t// assign_advice_from_instance 方法，将 instance (public input) 列的前 "
"2 个值\n"
"\t\t\t//   (即 Fibonacci 序列的前两个数字）赋给 advice 列中的前 2 个单元格\n"
"\t\t\t//   后面在 MockProver 中, 我们会传入 instance 作为 Public input\n"
"\t\t\tlet mut a_cell = region.assign_advice_from_instance(\n"
"\t\t\t\t|| \"1\",\n"
"\t\t\t\tself.config.instance,\n"
"\t\t\t\t0,  // instance column's row 0\n"
"\t\t\t\tself.config.advice,\n"
"\t\t\t\t0, // 复制到当前的 region 的 row 0\n"
"\t\t\t).map(ACell)?;\n"
"\n"
"\t\t\tlet mut b_cell = region.assign_advice_from_instance(\n"
"\t\t\t\t|| \"1\",\n"
"\t\t\t\tself.config.instance,\n"
"\t\t\t\t1, // instance column's row 1\n"
"\t\t\t\tself.config.advice,\n"
"\t\t\t\t1,  // 复制到当前的 region 的 row 1\n"
"\t\t\t).map(ACell)?;\n"
"\n"
"            /// .....\n"
"\t\t},\n"
"\t)\n"
"}\n"
"```"

#: src/halo2/tmp/3-Fibonacci-example-2.md:130
#: src/halo2/tmp/3-Fibonacci-example-2.md:326
msgid "**生成的 Fibonacci 数**:"
msgstr "**生成的 Fibonacci 数**:"

#: src/halo2/tmp/3-Fibonacci-example-2.md:131
msgid "**ex 1**: 使用方法 `assign_row` 从前两个数生成下一个数。"
msgstr "**ex 1**: 使用方法 `assign_row` 从前两个数生成下一个数。"

#: src/halo2/tmp/3-Fibonacci-example-2.md:132
msgid "**ex 2**: 使用一个循环在整个 Fibonacci 表格中为所有的数赋值。"
msgstr "**ex 2**: 使用一个循环在整个 Fibonacci 表格中为所有的数赋值。"

#: src/halo2/tmp/3-Fibonacci-example-2.md:134
msgid ""
"```rust\n"
"////  Example 2  ////\n"
"pub fn assign(..., nrows){\n"
"\n"
"    /// .....\n"
"\n"
"\t// 赋值好了前 2 行(递归基), 其余的行就累加过去就好了\n"
"\tfor row in 2..nrows { // 对于最后两行, 不需要启用 Selector\n"
"\t\tif row < nrows - 2 {\n"
"\t\t\tself.config.selector.enable(&mut region, row)?;\n"
"\t\t}\n"
"\n"
"\t\tlet c_cell = region.assign_advice(\n"
"\t\t\t|| \"advice\",\n"
"\t\t\tself.config.advice,\n"
"\t\t\trow,\n"
"\t\t\t|| a_cell.0.value().copied() + b_cell.0.value(),\n"
"\t\t).map(ACell)?;\n"
"\n"
"\t\ta_cell = b_cell; // let mut a_cell ...\n"
"\t\tb_cell = c_cell;\n"
"\t}\n"
"\n"
"\tOk(b_cell) // return the last cell.\n"
"}\n"
"```"
msgstr ""
"```rust\n"
"////  Example 2  ////\n"
"pub fn assign(..., nrows){\n"
"\n"
"    /// .....\n"
"\n"
"\t// 赋值好了前 2 行(递归基), 其余的行就累加过去就好了\n"
"\tfor row in 2..nrows { // 对于最后两行, 不需要启用 Selector\n"
"\t\tif row < nrows - 2 {\n"
"\t\t\tself.config.selector.enable(&mut region, row)?;\n"
"\t\t}\n"
"\n"
"\t\tlet c_cell = region.assign_advice(\n"
"\t\t\t|| \"advice\",\n"
"\t\t\tself.config.advice,\n"
"\t\t\trow,\n"
"\t\t\t|| a_cell.0.value().copied() + b_cell.0.value(),\n"
"\t\t).map(ACell)?;\n"
"\n"
"\t\ta_cell = b_cell; // let mut a_cell ...\n"
"\t\tb_cell = c_cell;\n"
"\t}\n"
"\n"
"\tOk(b_cell) // return the last cell.\n"
"}\n"
"```"

#: src/halo2/tmp/3-Fibonacci-example-2.md:163
#: src/halo2/tmp/3-Fibonacci-example-2.md:354
msgid "如下 `instance` , 里面是 Public input "
msgstr "如下 `instance` , 里面是 Public input "

#: src/halo2/tmp/3-Fibonacci-example-2.md:165
#: src/halo2/tmp/3-Fibonacci-example-2.md:356
msgid ""
"```rust\n"
"#[test]\n"
"fn test_example2() {\n"
"\tlet k = 4;\n"
"\n"
"\tlet a = Fp::from(1); // F[0]\n"
"\tlet b = Fp::from(1); // F[1]\n"
"\tlet out = Fp::from(55); // F[9]\n"
"\n"
"\tlet circuit = MyCircuit(PhantomData);\n"
"\n"
"\tlet mut public_input = vec![a, b, out];\n"
"\n"
"\tlet prover = MockProver::run(k, &circuit, vec![public_input.clone()])."
"unwrap();\n"
"\tprover.assert_satisfied();\n"
"\n"
"\tpublic_input[2] += Fp::one();\n"
"\tlet _prover = MockProver::run(k, &circuit, vec![public_input]).unwrap();\n"
"\t// uncomment the following line and the assert will fail\n"
"\t// _prover.assert_satisfied();\n"
"}\n"
"```"
msgstr ""
"```rust\n"
"#[test]\n"
"fn test_example2() {\n"
"\tlet k = 4;\n"
"\n"
"\tlet a = Fp::from(1); // F[0]\n"
"\tlet b = Fp::from(1); // F[1]\n"
"\tlet out = Fp::from(55); // F[9]\n"
"\n"
"\tlet circuit = MyCircuit(PhantomData);\n"
"\n"
"\tlet mut public_input = vec![a, b, out];\n"
"\n"
"\tlet prover = MockProver::run(k, &circuit, vec![public_input.clone()])."
"unwrap();\n"
"\tprover.assert_satisfied();\n"
"\n"
"\tpublic_input[2] += Fp::one();\n"
"\tlet _prover = MockProver::run(k, &circuit, vec![public_input]).unwrap();\n"
"\t// uncomment the following line and the assert will fail\n"
"\t// _prover.assert_satisfied();\n"
"}\n"
"```"

#: src/halo2/tmp/3-Fibonacci-example-2.md:188
msgid ""
"change k from `13` to `4`, the line will be smaller so now you are not calim "
"about the main function"
msgstr ""
"change k from `13` to `4`, the line will be smaller so now you are not calim "
"about the main function"

#: src/halo2/tmp/3-Fibonacci-example-2.md:189
#: src/halo2/tmp/3-Fibonacci-example-2.md:393
msgid "the MockProver will tell you constrains that "
msgstr "the MockProver will tell you constrains that "

#: src/halo2/tmp/3-Fibonacci-example-2.md:189
#: src/halo2/tmp/3-Fibonacci-example-2.md:393
msgid "ai"
msgstr "ai"

#: src/halo2/tmp/3-Fibonacci-example-2.md:190
#: src/halo2/tmp/3-Fibonacci-example-2.md:394
msgid "the `png` will tell you a  "
msgstr "the `png` will tell you a  "

#: src/halo2/tmp/3-Fibonacci-example-2.md:190
#: src/halo2/tmp/3-Fibonacci-example-2.md:394
msgid "ss"
msgstr "ss"

#: src/halo2/tmp/3-Fibonacci-example-2.md:190
#: src/halo2/tmp/3-Fibonacci-example-2.md:394
#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:198 src/public goods/第二章.md:129 goods/第二章.md:146
msgid "in"
msgstr "in"

#: src/halo2/tmp/3-Fibonacci-example-2.md:190
#: src/halo2/tmp/3-Fibonacci-example-2.md:394
msgid "  constraint `you have ignored` !"
msgstr "  constraint `you have ignored` !"

#: src/halo2/tmp/3-Fibonacci-example-2.md:208
msgid ""
"[Jason Morton](https://github.com/jasonmorton/halo2-examples/blob/master/src/"
"fibonacci/example1.rs)"
msgstr ""
"[Jason Morton](https://github.com/jasonmorton/halo2-examples/blob/master/src/"
"fibonacci/example1.rs)"

#: src/halo2/tmp/3-Fibonacci-example-2.md:210
msgid "\\------ 中文版本结束 ------"
msgstr "\\------ 中文版本结束 ------"

#: src/halo2/tmp/3-Fibonacci-example-2.md:211
msgid "Example 2"
msgstr "Example 2"

#: src/halo2/tmp/3-Fibonacci-example-2.md:213
msgid "Recap Table in Example-1 ："
msgstr "Recap Table in Example-1 ："

#: src/halo2/tmp/3-Fibonacci-example-2.md:217
msgid ""
"the problem we noticed like inside example-1  is that there are basically"
msgstr ""
"the problem we noticed like inside example-1  is that there are basically"

#: src/halo2/tmp/3-Fibonacci-example-2.md:218
msgid ""
"**too many duplicate cells** , so every time you need copy two cells from "
"previous row to next row , not efficient "
msgstr ""
"**too many duplicate cells** , so every time you need copy two cells from "
"previous row to next row , not efficient "

#: src/halo2/tmp/3-Fibonacci-example-2.md:219
msgid "_better solution_ :  Use rotation to access to the multiple rows."
msgstr "_better solution_ :  Use rotation to access to the multiple rows."

#: src/halo2/tmp/3-Fibonacci-example-2.md:228
msgid ""
"用了 3 个 advice columns：`col_a`, `col_b` 和 `col_c`，这 3 个 columns 的第一"
"行用来存储 Fibonacci 序列的连续的 3 个数"
msgstr ""
"用了 3 个 advice columns：`col_a`, `col_b` 和 `col_c`，这 3 个 columns 的第一"
"行用来存储 Fibonacci 序列的连续的 3 个数"

#: src/halo2/tmp/3-Fibonacci-example-2.md:229
msgid ""
"`configure()` 在 3 个 advice columns 中为每一个需启用 `enable_equality`，并为"
"每一个都建立了门约束。"
msgstr ""
"`configure()` 在 3 个 advice columns 中为每一个需启用 `enable_equality`，并为"
"每一个都建立了门约束。"

#: src/halo2/tmp/3-Fibonacci-example-2.md:231
msgid "仅使用了**一个** advice column，并依赖 rotation（轮转, 即 "
msgstr "仅使用了**一个** advice column，并依赖 rotation（轮转, 即 "

#: src/halo2/tmp/3-Fibonacci-example-2.md:231
msgid "）来访问连续的数, 减少了各种复制"
msgstr "）来访问连续的数, 减少了各种复制"

#: src/halo2/tmp/3-Fibonacci-example-2.md:233
msgid ""
"```rust\n"
"// example-1\n"
"pub fn configure(\n"
"\t.., advice: [Column<Advice>; 3], .. \n"
"\t{\n"
"    let col_i = advice[ii];\t\n"
"    meta.enable_equality(col_i); // 很多列需要声明, 需要 enable...\n"
"\n"
"    meta.create_gate(\"add\", |meta| {\n"
"        let s = meta.query_selector(selector);\n"
"        let a = meta.query_advice(col_a, Rotation::cur()); //📢\n"
"        let b = meta.query_advice(col_b, Rotation::cur()); //📢\n"
"        let c = meta.query_advice(col_c, Rotation::cur()); //📢\n"
"\n"
"}\n"
"\n"
"----------------------------------------\n"
"\n"
"// example-2\n"
"pub fn configure(  \n"
"\t.., advice: Column<Advice>, .. \n"
"\t{\n"
"    meta.enable_equality(advice); //所有 advice 列只在此 enable once.\n"
"\n"
"    meta.create_gate(\"add\", |meta| {\n"
"        let s = meta.query_selector(selector);\n"
"        let a = meta.query_advice(advice, Rotation::cur()); //💡\n"
"        let b = meta.query_advice(advice, Rotation::next());//💡\n"
"        let c = meta.query_advice(advice, Rotation(2));}    //💡\n"
"```"
msgstr ""
"```rust\n"
"// example-1\n"
"pub fn configure(\n"
"\t.., advice: [Column<Advice>; 3], .. \n"
"\t{\n"
"    let col_i = advice[ii];\t\n"
"    meta.enable_equality(col_i); // 很多列需要声明, 需要 enable...\n"
"\n"
"    meta.create_gate(\"add\", |meta| {\n"
"        let s = meta.query_selector(selector);\n"
"        let a = meta.query_advice(col_a, Rotation::cur()); //📢\n"
"        let b = meta.query_advice(col_b, Rotation::cur()); //📢\n"
"        let c = meta.query_advice(col_c, Rotation::cur()); //📢\n"
"\n"
"}\n"
"\n"
"----------------------------------------\n"
"\n"
"// example-2\n"
"pub fn configure(  \n"
"\t.., advice: Column<Advice>, .. \n"
"\t{\n"
"    meta.enable_equality(advice); //所有 advice 列只在此 enable once.\n"
"\n"
"    meta.create_gate(\"add\", |meta| {\n"
"        let s = meta.query_selector(selector);\n"
"        let a = meta.query_advice(advice, Rotation::cur()); //💡\n"
"        let b = meta.query_advice(advice, Rotation::next());//💡\n"
"        let c = meta.query_advice(advice, Rotation(2));}    //💡\n"
"```"

#: src/halo2/tmp/3-Fibonacci-example-2.md:268
msgid "The Polynomial Identity :  "
msgstr "The Polynomial Identity :  "

#: src/halo2/tmp/3-Fibonacci-example-2.md:276
msgid ""
"```rust\n"
"////  Example 2  ////\n"
"pub fn assign(..., nrows){\n"
"  layouter.assign_region(\"entire fibonacci table\",\n"
"    |mut region| {\n"
"    // 为前两行启用 selector,这意味着我们将从 instance 列（可能是公共输入）\n"
"    // 中复制 Fibonacci 序列的前 2 个数字\n"
"    self.config.selector.enable(&mut region, 0)?;\n"
"    self.config.selector.enable(&mut region, 1)?;\n"
"\n"
"    // assign_advice_from_instance 方法，将 instance 列的前两个值\n"
"\t//   (即 Fibonacci 序列的前两个数字）赋给 advice 列中的前两个单元格\n"
"\t//   后面在 MockProver 中, 我们会传入 instance 作为 Public input\n"
"\tlet mut a_cell = region.assign_advice_from_instance(\n"
"\t\t|| \"1\",\n"
"\t\tself.config.instance,\n"
"\t\t0,\n"
"\t\tself.config.advice,\n"
"\t\t0,  // row\n"
"\t)?;\n"
"\tlet mut b_cell = region.assign_advice_from_instance(\n"
"\t\t|| \"1\",\n"
"\t\tself.config.instance,\n"
"\t\t1,  // 这里写 0 也不报错, 写 1/2/3 就会报错了..\n"
"\t\tself.config.advice,\n"
"\t\t1,  // row\n"
"    )?;\n"
"    \n"
"\t// 赋值好了前 2 行(递归基) ,其余的行就累加过去就好了\n"
"\tfor row in 2..nrows {\n"
"\t\tif row < nrows - 2 {\n"
"\t\t\tself.config.selector.enable(&mut region, row)?;\n"
"\t\t}\n"
"\n"
"\t\tlet c_cell = region.assign_advice(\n"
"\t\t\t|| \"advice\",\n"
"\t\t\tself.config.advice,\n"
"\t\t\trow,\n"
"\t\t\t|| a_cell.value().copied() + b_cell.value(),\n"
"\t\t)?;\n"
"\n"
"\t\ta_cell = b_cell;\n"
"\t\tb_cell = c_cell;\n"
"\t}\n"
"\n"
"\tOk(b_cell)\t\n"
"}\n"
"```"
msgstr ""
"```rust\n"
"////  Example 2  ////\n"
"pub fn assign(..., nrows){\n"
"  layouter.assign_region(\"entire fibonacci table\",\n"
"    |mut region| {\n"
"    // 为前两行启用 selector,这意味着我们将从 instance 列（可能是公共输入）\n"
"    // 中复制 Fibonacci 序列的前 2 个数字\n"
"    self.config.selector.enable(&mut region, 0)?;\n"
"    self.config.selector.enable(&mut region, 1)?;\n"
"\n"
"    // assign_advice_from_instance 方法，将 instance 列的前两个值\n"
"\t//   (即 Fibonacci 序列的前两个数字）赋给 advice 列中的前两个单元格\n"
"\t//   后面在 MockProver 中, 我们会传入 instance 作为 Public input\n"
"\tlet mut a_cell = region.assign_advice_from_instance(\n"
"\t\t|| \"1\",\n"
"\t\tself.config.instance,\n"
"\t\t0,\n"
"\t\tself.config.advice,\n"
"\t\t0,  // row\n"
"\t)?;\n"
"\tlet mut b_cell = region.assign_advice_from_instance(\n"
"\t\t|| \"1\",\n"
"\t\tself.config.instance,\n"
"\t\t1,  // 这里写 0 也不报错, 写 1/2/3 就会报错了..\n"
"\t\tself.config.advice,\n"
"\t\t1,  // row\n"
"    )?;\n"
"    \n"
"\t// 赋值好了前 2 行(递归基) ,其余的行就累加过去就好了\n"
"\tfor row in 2..nrows {\n"
"\t\tif row < nrows - 2 {\n"
"\t\t\tself.config.selector.enable(&mut region, row)?;\n"
"\t\t}\n"
"\n"
"\t\tlet c_cell = region.assign_advice(\n"
"\t\t\t|| \"advice\",\n"
"\t\t\tself.config.advice,\n"
"\t\t\trow,\n"
"\t\t\t|| a_cell.value().copied() + b_cell.value(),\n"
"\t\t)?;\n"
"\n"
"\t\ta_cell = b_cell;\n"
"\t\tb_cell = c_cell;\n"
"\t}\n"
"\n"
"\tOk(b_cell)\t\n"
"}\n"
"```"

#: src/halo2/tmp/3-Fibonacci-example-2.md:327
msgid "**Version 1**: 使用方法 `assign_row` 从前两个数生成下一个数。"
msgstr "**Version 1**: 使用方法 `assign_row` 从前两个数生成下一个数。"

#: src/halo2/tmp/3-Fibonacci-example-2.md:328
msgid "**Version 2**: 使用一个循环在整个 Fibonacci 表格中为所有的数赋值。"
msgstr "**Version 2**: 使用一个循环在整个 Fibonacci 表格中为所有的数赋值。"

#: src/halo2/tmp/3-Fibonacci-example-2.md:330
msgid ""
"```rust\n"
"////  Example 2  ////\n"
"pub fn assign(..., nrows){\n"
"\t// 赋值好了前 2 行(递归基) ,其余的行就累加过去就好了\n"
"\tfor row in 2..nrows {\n"
"\t\tif row < nrows - 2 {\n"
"\t\t\tself.config.selector.enable(&mut region, row)?;\n"
"\t\t}\n"
"\n"
"\t\tlet c_cell = region.assign_advice(\n"
"\t\t\t|| \"advice\",\n"
"\t\t\tself.config.advice,\n"
"\t\t\trow,\n"
"\t\t\t|| a_cell.value().copied() + b_cell.value(),\n"
"\t\t)?;\n"
"\n"
"\t\ta_cell = b_cell;\n"
"\t\tb_cell = c_cell;\n"
"\t}\n"
"\n"
"\tOk(b_cell)\n"
"}\n"
"```"
msgstr ""
"```rust\n"
"////  Example 2  ////\n"
"pub fn assign(..., nrows){\n"
"\t// 赋值好了前 2 行(递归基) ,其余的行就累加过去就好了\n"
"\tfor row in 2..nrows {\n"
"\t\tif row < nrows - 2 {\n"
"\t\t\tself.config.selector.enable(&mut region, row)?;\n"
"\t\t}\n"
"\n"
"\t\tlet c_cell = region.assign_advice(\n"
"\t\t\t|| \"advice\",\n"
"\t\t\tself.config.advice,\n"
"\t\t\trow,\n"
"\t\t\t|| a_cell.value().copied() + b_cell.value(),\n"
"\t\t)?;\n"
"\n"
"\t\ta_cell = b_cell;\n"
"\t\tb_cell = c_cell;\n"
"\t}\n"
"\n"
"\tOk(b_cell)\n"
"}\n"
"```"

#: src/halo2/tmp/3-Fibonacci-example-2.md:379
msgid "print"
msgstr "print"

#: src/halo2/tmp/3-Fibonacci-example-2.md:391
msgid ""
"change k from 13 to 4, the line will be more small so now you are not calim "
"about the main function ."
msgstr ""
"change k from 13 to 4, the line will be more small so now you are not calim "
"about the main function ."

#: src/halo2/tmp/3-Fibonacci-example-2.md:397
msgid "Row & Column in Region"
msgstr "Row & Column in Region"

#: src/halo2/tmp/3-Fibonacci-example-2.md:399
msgid "Compared  `example-1 ` with `example-2`  : "
msgstr "Compared  `example-1 ` with `example-2`  : "

#: src/halo2/tmp/3-Fibonacci-example-2.md:401
msgid ""
"```rust\n"
"meta.create_gate(\"add\", |meta| {\n"
"\t// col_a | col_b | col_c | selector\n"
"\t//   a      b        c       s\n"
"\tlet s = meta.query_selector(selector);\n"
"\tlet a = meta.query_advice(col_a, Rotation::cur());\n"
"\tlet b = meta.query_advice(col_b, Rotation::cur());\n"
"\tlet c = meta.query_advice(col_c, Rotation::cur());\n"
"\tvec![s * (a + b - c)]\n"
"\n"
"---------------------------------------------\n"
"\n"
"meta.create_gate(\"add\", |meta| {\n"
"\t// advice | selector\n"
"\t//   a    |   s\n"
"\t//   b    |\n"
"\t//   c    |\n"
"\tlet s = meta.query_selector(selector);\n"
"\tlet a = meta.query_advice(advice, Rotation::cur());\n"
"\tlet b = meta.query_advice(advice, Rotation::next());\n"
"\tlet c = meta.query_advice(advice, Rotation(2));\n"
"\tvec![s * (a + b - c)] \n"
"```"
msgstr ""
"```rust\n"
"meta.create_gate(\"add\", |meta| {\n"
"\t// col_a | col_b | col_c | selector\n"
"\t//   a      b        c       s\n"
"\tlet s = meta.query_selector(selector);\n"
"\tlet a = meta.query_advice(col_a, Rotation::cur());\n"
"\tlet b = meta.query_advice(col_b, Rotation::cur());\n"
"\tlet c = meta.query_advice(col_c, Rotation::cur());\n"
"\tvec![s * (a + b - c)]\n"
"\n"
"---------------------------------------------\n"
"\n"
"meta.create_gate(\"add\", |meta| {\n"
"\t// advice | selector\n"
"\t//   a    |   s\n"
"\t//   b    |\n"
"\t//   c    |\n"
"\tlet s = meta.query_selector(selector);\n"
"\tlet a = meta.query_advice(advice, Rotation::cur());\n"
"\tlet b = meta.query_advice(advice, Rotation::next());\n"
"\tlet c = meta.query_advice(advice, Rotation(2));\n"
"\tvec![s * (a + b - c)] \n"
"```"

#: src/halo2/tmp/3-Fibonacci-example-2.md:425
msgid "We see : "
msgstr "We see : "

#: src/halo2/tmp/3-Fibonacci-example-2.md:426
msgid "`col_a / col_b / col_c` represent different  "
msgstr "`col_a / col_b / col_c` represent different  "

#: src/halo2/tmp/3-Fibonacci-example-2.md:426
msgid "mn"
msgstr "mn"

#: src/halo2/tmp/3-Fibonacci-example-2.md:427
msgid ""
"`Rotation::cur() / Rotation::next() / Rotation::prev() / Rotation(2)`  "
"represent different "
msgstr ""
"`Rotation::cur() / Rotation::next() / Rotation::prev() / Rotation(2)`  "
"represent different "

#: src/halo2/tmp/3-Fibonacci-example-2.md:433
#: src/halo2/tmp/6-Range-Check(code-explanation).md:306
#: src/halo2/tmp/7-Range-Check-lookup(example-2).md:483
#: src/halo2/tmp/8-Range-Check(example-3).md:371
#: src/halo2/tmp/9-decomposed.md:458
msgid "References :"
msgstr "References :"

#: src/halo2/tmp/4-IsZero-Check-example-3.md:9
msgid "[Iszero Chip](#iszero-chip)"
msgstr "[Iszero Chip](#iszero-chip)"

#: src/halo2/tmp/4-IsZero-Check-example-3.md:10
#: src/halo2/tmp/7-Range-Check-lookup(example-2).md:11
#: src/halo2/tmp/8-Range-Check(example-3).md:15
msgid "[structs](#structs)"
msgstr "[structs](#structs)"

#: src/halo2/tmp/4-IsZero-Check-example-3.md:11
msgid "[impl IsZeroChip { ..](#impl-iszerochip--)"
msgstr "[impl IsZeroChip { ..](#impl-iszerochip--)"

#: src/halo2/tmp/4-IsZero-Check-example-3.md:12
msgid "[Example 3](#example-3)"
msgstr "[Example 3](#example-3)"

#: src/halo2/tmp/4-IsZero-Check-example-3.md:13
msgid "[configure](#configure-1)"
msgstr "[configure](#configure-1)"

#: src/halo2/tmp/4-IsZero-Check-example-3.md:14
msgid "[assign](#assign-1)"
msgstr "[assign](#assign-1)"

#: src/halo2/tmp/4-IsZero-Check-example-3.md:15
msgid "[test](#test)"
msgstr "[test](#test)"

#: src/halo2/tmp/4-IsZero-Check-example-3.md:16
#: src/halo2/tmp/7-Range-Check-lookup(example-2).md:18
msgid "[usage](#usage)"
msgstr "[usage](#usage)"

#: src/halo2/tmp/4-IsZero-Check-example-3.md:21
msgid "We want Prove that : `f(a, b, c) = if a == b {c} else {a - b}` "
msgstr "We want Prove that : `f(a, b, c) = if a == b {c} else {a - b}` "

#: src/halo2/tmp/4-IsZero-Check-example-3.md:23
msgid ""
"证明某人知道三个数字  a、b 和  c，使得当 `a == b` 时，输出为 c，否则输出为 "
"`a - b`，而无需揭示a、b 和 c 的实际值。"
msgstr ""
"证明某人知道三个数字  a、b 和  c，使得当 `a == b` 时，输出为 c，否则输出为 "
"`a - b`，而无需揭示a、b 和 c 的实际值。"

#: src/halo2/tmp/4-IsZero-Check-example-3.md:25
msgid "how to describe it ?   Firstly, let's dive into the `Iszero` Chip"
msgstr "how to describe it ?   Firstly, let's dive into the `Iszero` Chip"

#: src/halo2/tmp/4-IsZero-Check-example-3.md:27
msgid "这一部分主要展示了如何复用另外一个电路来辅助电路设计"
msgstr "这一部分主要展示了如何复用另外一个电路来辅助电路设计"

#: src/halo2/tmp/4-IsZero-Check-example-3.md:38
msgid "Iszero Chip"
msgstr "Iszero Chip"

#: src/halo2/tmp/4-IsZero-Check-example-3.md:39
#: src/halo2/tmp/7-Range-Check-lookup(example-2).md:150
#: src/halo2/tmp/8-Range-Check(example-3).md:201
msgid "structs"
msgstr "structs"

#: src/halo2/tmp/4-IsZero-Check-example-3.md:59
msgid "impl IsZeroChip { .."
msgstr "impl IsZeroChip { .."

#: src/halo2/tmp/4-IsZero-Check-example-3.md:61
#: src/halo2/tmp/4-IsZero-Check-example-3.md:185
msgid "configure"
msgstr "configure"

#: src/halo2/tmp/4-IsZero-Check-example-3.md:64
msgid ""
"`q_enable, value` 都接收一个闭包，将执行的**时机**和执行的**具体内容**进行解"
"耦。也就是说，`configure` 方法可以决定何时执行 `value`，而调用者可以决定执行 "
"`value` 时应该做什么"
msgstr ""
"`q_enable, value` 都接收一个闭包，将执行的**时机**和执行的**具体内容**进行解"
"耦。也就是说，`configure` 方法可以决定何时执行 `value`，而调用者可以决定执行 "
"`value` 时应该做什么"

#: src/halo2/tmp/4-IsZero-Check-example-3.md:65
msgid ""
"闭包可以捕获其环境，这意味着每次传入不同的闭包，`configure` 函数的行为都可能"
"不同。这为函数调用者提供了更大的灵活性。"
msgstr ""
"闭包可以捕获其环境，这意味着每次传入不同的闭包，`configure` 函数的行为都可能"
"不同。这为函数调用者提供了更大的灵活性。"

#: src/halo2/tmp/4-IsZero-Check-example-3.md:67
msgid "注意 `AssignedCell` 和 `VirtualCells` 的区别（读下 Source code）"
msgstr "注意 `AssignedCell` 和 `VirtualCells` 的区别（读下 Source code）"

#: src/halo2/tmp/4-IsZero-Check-example-3.md:69
msgid ""
"```rust\n"
"impl<F: FieldExt> IsZeroChip<F> {\n"
"    pub fn construct(config: IsZeroConfig<F>) -> Self {\n"
"        IsZeroChip { config }\n"
"    }\n"
"\n"
"    pub fn configure(\n"
"        meta: &mut ConstraintSystem<F>,\n"
"        q_enable: impl FnOnce(&mut VirtualCells<'_, F>) -> Expression<F>,\n"
"        value: impl FnOnce(&mut VirtualCells<'_, F>) -> Expression<F>,\n"
"        value_inv: Column<Advice>,\n"
"    ) -> IsZeroConfig<F> {\n"
"        let mut is_zero_expr = Expression::Constant(F::zero());\n"
"\n"
"        meta.create_gate(\"is_zero\", |meta| {\n"
"            //\n"
"            // valid | val |  val_inv |  1 - val * val_inv | val * (1 - val "
"* val_inv)\n"
"            // ------+-----+----------+--------------------"
"+-------------------\n"
"            //  yes  |  x  |    1/x   |        0           |   0\n"
"            //  no   |  x  |    0     |        1           |   x\n"
"            //  yes  |  0  |    0     |        1           |   0\n"
"            //  yes  |  0  |    y     |        1           |   0\n"
"\n"
"            //\n"
"            let value = value(meta);\n"
"            let q_enable = q_enable(meta);\n"
"            let value_inv = meta.query_advice(value_inv, Rotation::cur());\n"
"\n"
"            is_zero_expr = Expression::Constant(F::one()) - value.clone() * "
"value_inv;\n"
"            vec![q_enable * value * is_zero_expr.clone()]  // gate's "
"constraints\n"
"        });\n"
"\n"
"        IsZeroConfig {\n"
"            value_inv,\n"
"            is_zero_expr,\n"
"        }\n"
"    }\n"
"```"
msgstr ""
"```rust\n"
"impl<F: FieldExt> IsZeroChip<F> {\n"
"    pub fn construct(config: IsZeroConfig<F>) -> Self {\n"
"        IsZeroChip { config }\n"
"    }\n"
"\n"
"    pub fn configure(\n"
"        meta: &mut ConstraintSystem<F>,\n"
"        q_enable: impl FnOnce(&mut VirtualCells<'_, F>) -> Expression<F>,\n"
"        value: impl FnOnce(&mut VirtualCells<'_, F>) -> Expression<F>,\n"
"        value_inv: Column<Advice>,\n"
"    ) -> IsZeroConfig<F> {\n"
"        let mut is_zero_expr = Expression::Constant(F::zero());\n"
"\n"
"        meta.create_gate(\"is_zero\", |meta| {\n"
"            //\n"
"            // valid | val |  val_inv |  1 - val * val_inv | val * (1 - val "
"* val_inv)\n"
"            // ------+-----+----------+--------------------"
"+-------------------\n"
"            //  yes  |  x  |    1/x   |        0           |   0\n"
"            //  no   |  x  |    0     |        1           |   x\n"
"            //  yes  |  0  |    0     |        1           |   0\n"
"            //  yes  |  0  |    y     |        1           |   0\n"
"\n"
"            //\n"
"            let value = value(meta);\n"
"            let q_enable = q_enable(meta);\n"
"            let value_inv = meta.query_advice(value_inv, Rotation::cur());\n"
"\n"
"            is_zero_expr = Expression::Constant(F::one()) - value.clone() * "
"value_inv;\n"
"            vec![q_enable * value * is_zero_expr.clone()]  // gate's "
"constraints\n"
"        });\n"
"\n"
"        IsZeroConfig {\n"
"            value_inv,\n"
"            is_zero_expr,\n"
"        }\n"
"    }\n"
"```"

#: src/halo2/tmp/4-IsZero-Check-example-3.md:108
msgid ""
"configure defines the logic for the \"is-zero\" gate. It uses the following "
"table to guide the logic: "
msgstr ""
"configure defines the logic for the \"is-zero\" gate. It uses the following "
"table to guide the logic: "

#: src/halo2/tmp/4-IsZero-Check-example-3.md:119
msgid ""
"第 `1 / 3 / 4` 行涉及到的约束不需要通过 `q_enable` 即可完成, 但是考虑第二行所"
"涉及到的情况 : "
msgstr ""
"第 `1 / 3 / 4` 行涉及到的约束不需要通过 `q_enable` 即可完成, 但是考虑第二行所"
"涉及到的情况 : "

#: src/halo2/tmp/4-IsZero-Check-example-3.md:120
msgid ""
"  是个 malicious Prover, 他提供了 `val == x` 和 `val_inv == 0` , 此时仅靠 "
"`is_zero_expr`  是无法分辨的 (这个 case 里 assign 函数会直接分配 `self."
"config.value_inv`  i.e.  "
msgstr ""
"  是个 malicious Prover, 他提供了 `val == x` 和 `val_inv == 0` , 此时仅靠 "
"`is_zero_expr`  是无法分辨的 (这个 case 里 assign 函数会直接分配 `self."
"config.value_inv`  i.e.  "

#: src/halo2/tmp/4-IsZero-Check-example-3.md:120
msgid "  即认为这个值是 "
msgstr "  即认为这个值是 "

#: src/halo2/tmp/4-IsZero-Check-example-3.md:121
msgid ""
"但是添加了 `vec![q_enable * value * is_zero_expr.clone()]`  约束就不一样了 , "
"约束强制要求 `val * is_zero_expr` i.e.  `val * ( 1 - val * val_inv)` 必须为 "
"0 , 从而解决了这种 malicious situation"
msgstr ""
"但是添加了 `vec![q_enable * value * is_zero_expr.clone()]`  约束就不一样了 , "
"约束强制要求 `val * is_zero_expr` i.e.  `val * ( 1 - val * val_inv)` 必须为 "
"0 , 从而解决了这种 malicious situation"

#: src/halo2/tmp/4-IsZero-Check-example-3.md:122
msgid "如果 malicious "
msgstr "如果 malicious "

#: src/halo2/tmp/4-IsZero-Check-example-3.md:122
msgid "  提供了这种 Witness, 将不会通过约束校验, 也就不会生成该 proof"
msgstr "  提供了这种 Witness, 将不会通过约束校验, 也就不会生成该 proof"

#: src/halo2/tmp/4-IsZero-Check-example-3.md:123
msgid "只有 "
msgstr "只有 "

#: src/halo2/tmp/4-IsZero-Check-example-3.md:123
msgid "  提供了符合约束的 Witness, `val_inv`  才会被赋值给 `val_inv` column"
msgstr "  提供了符合约束的 Witness, `val_inv`  才会被赋值给 `val_inv` column"

#: src/halo2/tmp/4-IsZero-Check-example-3.md:126
msgid "The gate ensures that for valid rows:"
msgstr "The gate ensures that for valid rows:"

#: src/halo2/tmp/4-IsZero-Check-example-3.md:127
#: src/halo2/tmp/4-IsZero-Check-example-3.md:128
msgid "If the "
msgstr "If the "

#: src/halo2/tmp/4-IsZero-Check-example-3.md:127
msgid ""
" , its inverse is computed such that their multiplication (`val * val_inv`) "
"'s  results in 1."
msgstr ""
" , its inverse is computed such that their multiplication (`val * val_inv`) "
"'s  results in 1."

#: src/halo2/tmp/4-IsZero-Check-example-3.md:128
msgid ""
" , its inverse **can be any value**, but the result of their multiplication "
"should be 0."
msgstr ""
" , its inverse **can be any value**, but the result of their multiplication "
"should be 0."

#: src/halo2/tmp/4-IsZero-Check-example-3.md:130
msgid ""
"The gate equation is `q_enable * value * (1 - value * value_inv)`, which "
"should be satisfied for the valid conditions."
msgstr ""
"The gate equation is `q_enable * value * (1 - value * value_inv)`, which "
"should be satisfied for the valid conditions."

#: src/halo2/tmp/4-IsZero-Check-example-3.md:131
msgid ""
"`assign()`: This method is used to assign the inverse of a value (if it "
"exists) or zero to the specified advice column in the circuit."
msgstr ""
"`assign()`: This method is used to assign the inverse of a value (if it "
"exists) or zero to the specified advice column in the circuit."

#: src/halo2/tmp/4-IsZero-Check-example-3.md:136
msgid "i.e. `1 - val * val_inv` , like the table above : "
msgstr "i.e. `1 - val * val_inv` , like the table above : "

#: src/halo2/tmp/4-IsZero-Check-example-3.md:137
msgid "if `val != 0` :  is_zero_expr = 0"
msgstr "if `val != 0` :  is_zero_expr = 0"

#: src/halo2/tmp/4-IsZero-Check-example-3.md:138
msgid "if `val == 0`  : is_zero_expr = 1"
msgstr "if `val == 0`  : is_zero_expr = 1"

#: src/halo2/tmp/4-IsZero-Check-example-3.md:140
msgid ""
"`vec![q_enable * value * is_zero_expr.clone()]`  is the gate's constraint. "
"it should be "
msgstr ""
"`vec![q_enable * value * is_zero_expr.clone()]`  is the gate's constraint. "
"it should be "

#: src/halo2/tmp/4-IsZero-Check-example-3.md:142
#: src/halo2/tmp/4-IsZero-Check-example-3.md:236
msgid "assign"
msgstr "assign"

#: src/halo2/tmp/4-IsZero-Check-example-3.md:144
msgid ""
"```rust\n"
"pub fn assign(\n"
"\t&self,\n"
"\tregion: &mut Region<'_, F>,\n"
"\toffset: usize,\n"
"\tvalue: Value<F>,\n"
") -> Result<(), Error> {\n"
"\t// value.invert()  OR  F::zero()\n"
"\tlet value_inv = value.map(|value| value.invert().unwrap_or(F::zero()));\n"
"\tregion.assign_advice(|| \"value inv\", self.config.value_inv, offset, || "
"value_inv)?;\n"
"\tOk(())\n"
"}\n"
"```"
msgstr ""
"```rust\n"
"pub fn assign(\n"
"\t&self,\n"
"\tregion: &mut Region<'_, F>,\n"
"\toffset: usize,\n"
"\tvalue: Value<F>,\n"
") -> Result<(), Error> {\n"
"\t// value.invert()  OR  F::zero()\n"
"\tlet value_inv = value.map(|value| value.invert().unwrap_or(F::zero()));\n"
"\tregion.assign_advice(|| \"value inv\", self.config.value_inv, offset, || "
"value_inv)?;\n"
"\tOk(())\n"
"}\n"
"```"

#: src/halo2/tmp/4-IsZero-Check-example-3.md:158
msgid ""
"在 `IsZero` 的验证过程中，将要验证的值（或输入值）分配到电路区域中，以便在电"
"路中进行计算和约束的验证 : "
msgstr ""
"在 `IsZero` 的验证过程中，将要验证的值（或输入值）分配到电路区域中，以便在电"
"路中进行计算和约束的验证 : "

#: src/halo2/tmp/4-IsZero-Check-example-3.md:159
msgid ""
"如果要验证的值为零，`assign` 方法将为逆元分配一个特定的值（例如 `F::zero()`）"
msgstr ""
"如果要验证的值为零，`assign` 方法将为逆元分配一个特定的值（例如 `F::zero()`）"

#: src/halo2/tmp/4-IsZero-Check-example-3.md:160
msgid ""
"如果要验证的值不为零，`value_inv` columns 将被分配为 `value.invert()."
"unwrap_or(F::zero())` i.e.  `value.invert()`"
msgstr ""
"如果要验证的值不为零，`value_inv` columns 将被分配为 `value.invert()."
"unwrap_or(F::zero())` i.e.  `value.invert()`"

#: src/halo2/tmp/4-IsZero-Check-example-3.md:162
msgid "这些 IsZero 的 check 将被赋值到 `value_inv` column 并在其上得到体现"
msgstr "这些 IsZero 的 check 将被赋值到 `value_inv` column 并在其上得到体现"

#: src/halo2/tmp/4-IsZero-Check-example-3.md:165
msgid "Example 3"
msgstr "Example 3"

#: src/halo2/tmp/4-IsZero-Check-example-3.md:167
msgid ""
"welcome back, now we have the gadget `IsZero` , so we can constrain  "
"malicious "
msgstr ""
"welcome back, now we have the gadget `IsZero` , so we can constrain  "
"malicious "

#: src/halo2/tmp/4-IsZero-Check-example-3.md:167
msgid " 's  input"
msgstr " 's  input"

#: src/halo2/tmp/4-IsZero-Check-example-3.md:187
msgid "Recap : `f(a, b, c) = if a == b {c} else {a - b}` "
msgstr "Recap : `f(a, b, c) = if a == b {c} else {a - b}` "

#: src/halo2/tmp/4-IsZero-Check-example-3.md:189
msgid ""
"column : 除了常规的 `a/b/c` advice column,  还申请了 `is_zero_advice_column`"
msgstr ""
"column : 除了常规的 `a/b/c` advice column,  还申请了 `is_zero_advice_column`"

#: src/halo2/tmp/4-IsZero-Check-example-3.md:190
msgid ""
"`IsZeroChip` : `use crate::is_zero::{IsZeroChip, IsZeroConfig};`  使用了上面"
"定义的 `IsZero` chip 来校验 "
msgstr ""
"`IsZeroChip` : `use crate::is_zero::{IsZeroChip, IsZeroConfig};`  使用了上面"
"定义的 `IsZero` chip 来校验 "

#: src/halo2/tmp/4-IsZero-Check-example-3.md:190
msgid " 这个事情 (因为 a/b 都是 "
msgstr " 这个事情 (因为 a/b 都是 "

#: src/halo2/tmp/4-IsZero-Check-example-3.md:190
msgid "  提供的, 一个 malicious "
msgstr "  提供的, 一个 malicious "

#: src/halo2/tmp/4-IsZero-Check-example-3.md:190
msgid ""
"  有动机去提供 `a=3 , b=4` 然后 `return c` , 必须通过生成 proof 前的约束来限"
"制 "
msgstr ""
"  有动机去提供 `a=3 , b=4` 然后 `return c` , 必须通过生成 proof 前的约束来限"
"制 "

#: src/halo2/tmp/4-IsZero-Check-example-3.md:190
msgid " 的行为)"
msgstr " 的行为)"

#: src/halo2/tmp/4-IsZero-Check-example-3.md:191
msgid "`IsZeroChip::configure` 返回 `IsZeroConfig<F>` "
msgstr "`IsZeroChip::configure` 返回 `IsZeroConfig<F>` "

#: src/halo2/tmp/4-IsZero-Check-example-3.md:193
msgid ""
"```rust\n"
"impl<F: FieldExt> FunctionChip<F> {\n"
"    pub fn construct(config: FunctionConfig<F>) -> Self { Self { config } }\n"
"\n"
"    pub fn configure(meta: &mut ConstraintSystem<F>) -> FunctionConfig<F> {\n"
"        let selector = meta.selector();\n"
"        let a = meta.advice_column();\n"
"        let b = meta.advice_column();\n"
"        let c = meta.advice_column();\n"
"        let output = meta.advice_column();\n"
"\n"
"        let is_zero_advice_column = meta.advice_column();\n"
"        \n"
"        let a_equals_b = IsZeroChip::configure(\n"
"            meta,\n"
"            |meta| meta.query_selector(selector),\n"
"            |meta| meta.query_advice(a, Rotation::cur()) - meta."
"query_advice(b, Rotation::cur()),\n"
"            is_zero_advice_column,\n"
"        );\n"
"\n"
"        meta.create_gate(\"f(a, b, c) = if a == b {c} else {a - b}\", |meta| "
"{\n"
"            let s = meta.query_selector(selector);\n"
"            let a = meta.query_advice(a, Rotation::cur());\n"
"            let b = meta.query_advice(b, Rotation::cur());\n"
"            let c = meta.query_advice(c, Rotation::cur());\n"
"            let output = meta.query_advice(output, Rotation::cur());\n"
"            vec![\n"
"                s.clone() * (a_equals_b.expr() * (output.clone() - c)),\n"
"                s * (Expression::Constant(F::one()) - a_equals_b.expr()) * "
"(output - (a - b)),\n"
"            ]\n"
"        });\n"
"\n"
"        FunctionConfig {\n"
"            selector,\n"
"            a,\n"
"            b,\n"
"            c,\n"
"            a_equals_b,\n"
"            output,\n"
"        }\n"
"    }\n"
"```"
msgstr ""
"```rust\n"
"impl<F: FieldExt> FunctionChip<F> {\n"
"    pub fn construct(config: FunctionConfig<F>) -> Self { Self { config } }\n"
"\n"
"    pub fn configure(meta: &mut ConstraintSystem<F>) -> FunctionConfig<F> {\n"
"        let selector = meta.selector();\n"
"        let a = meta.advice_column();\n"
"        let b = meta.advice_column();\n"
"        let c = meta.advice_column();\n"
"        let output = meta.advice_column();\n"
"\n"
"        let is_zero_advice_column = meta.advice_column();\n"
"        \n"
"        let a_equals_b = IsZeroChip::configure(\n"
"            meta,\n"
"            |meta| meta.query_selector(selector),\n"
"            |meta| meta.query_advice(a, Rotation::cur()) - meta."
"query_advice(b, Rotation::cur()),\n"
"            is_zero_advice_column,\n"
"        );\n"
"\n"
"        meta.create_gate(\"f(a, b, c) = if a == b {c} else {a - b}\", |meta| "
"{\n"
"            let s = meta.query_selector(selector);\n"
"            let a = meta.query_advice(a, Rotation::cur());\n"
"            let b = meta.query_advice(b, Rotation::cur());\n"
"            let c = meta.query_advice(c, Rotation::cur());\n"
"            let output = meta.query_advice(output, Rotation::cur());\n"
"            vec![\n"
"                s.clone() * (a_equals_b.expr() * (output.clone() - c)),\n"
"                s * (Expression::Constant(F::one()) - a_equals_b.expr()) * "
"(output - (a - b)),\n"
"            ]\n"
"        });\n"
"\n"
"        FunctionConfig {\n"
"            selector,\n"
"            a,\n"
"            b,\n"
"            c,\n"
"            a_equals_b,\n"
"            output,\n"
"        }\n"
"    }\n"
"```"

#: src/halo2/tmp/4-IsZero-Check-example-3.md:238
msgid "`IsZeroChip::construct`  : 创建一个`IsZeroChip`实例"
msgstr "`IsZeroChip::construct`  : 创建一个`IsZeroChip`实例"

#: src/halo2/tmp/4-IsZero-Check-example-3.md:239
msgid "`layouter.assign_region(` : "
msgstr "`layouter.assign_region(` : "

#: src/halo2/tmp/4-IsZero-Check-example-3.md:240
msgid "`is_zero_chip.assign(&mut region, 0, Value::known(a - b))?;`"
msgstr "`is_zero_chip.assign(&mut region, 0, Value::known(a - b))?;`"

#: src/halo2/tmp/4-IsZero-Check-example-3.md:241
msgid ""
"`region.assign_advice(|| \"output\", self.config.output, 0, || Value::"
"known(output))`"
msgstr ""
"`region.assign_advice(|| \"output\", self.config.output, 0, || Value::"
"known(output))`"

#: src/halo2/tmp/4-IsZero-Check-example-3.md:242
msgid ""
"```rust\n"
"pub fn assign(\n"
"  &self,\n"
"  mut layouter: impl Layouter<F>,\n"
"  a: F,  b: F,  c: F,\n"
") -> Result<AssignedCell<F, F>, Error> {\n"
"  let is_zero_chip = IsZeroChip::construct(self.config.a_equals_b.clone());\n"
"\n"
"  layouter.assign_region(\n"
"    || \"f(a, b, c) = if a == b {c} else {a - b}\",\n"
"    |mut region| {\n"
"      self.config.selector.enable(&mut region, 0)?;\n"
"      region.assign_advice(|| \"a\", self.config.a, 0, || Value::"
"known(a))?;\n"
"      region.assign_advice(|| \"b\", self.config.b, 0, || Value::"
"known(b))?;\n"
"      region.assign_advice(|| \"c\", self.config.c, 0, || Value::"
"known(c))?;\n"
"\n"
"      // 正式使用 IsZeroChip 子电路来检查 a - b 是否为零\n"
"      is_zero_chip.assign(&mut region, 0, Value::known(a - b))?;\n"
"\n"
"      // Rust expr to calculate val.\n"
"      let output = if a == b { c } else { a - b };\n"
"      // assign to cell.\n"
"      region.assign_advice(|| \"output\", self.config.output, 0, || Value::"
"known(output))\n"
"    },\n"
"  ) }\n"
"```"
msgstr ""
"```rust\n"
"pub fn assign(\n"
"  &self,\n"
"  mut layouter: impl Layouter<F>,\n"
"  a: F,  b: F,  c: F,\n"
") -> Result<AssignedCell<F, F>, Error> {\n"
"  let is_zero_chip = IsZeroChip::construct(self.config.a_equals_b.clone());\n"
"\n"
"  layouter.assign_region(\n"
"    || \"f(a, b, c) = if a == b {c} else {a - b}\",\n"
"    |mut region| {\n"
"      self.config.selector.enable(&mut region, 0)?;\n"
"      region.assign_advice(|| \"a\", self.config.a, 0, || Value::"
"known(a))?;\n"
"      region.assign_advice(|| \"b\", self.config.b, 0, || Value::"
"known(b))?;\n"
"      region.assign_advice(|| \"c\", self.config.c, 0, || Value::"
"known(c))?;\n"
"\n"
"      // 正式使用 IsZeroChip 子电路来检查 a - b 是否为零\n"
"      is_zero_chip.assign(&mut region, 0, Value::known(a - b))?;\n"
"\n"
"      // Rust expr to calculate val.\n"
"      let output = if a == b { c } else { a - b };\n"
"      // assign to cell.\n"
"      region.assign_advice(|| \"output\", self.config.output, 0, || Value::"
"known(output))\n"
"    },\n"
"  ) }\n"
"```"

#: src/halo2/tmp/4-IsZero-Check-example-3.md:269
msgid "test"
msgstr "test"

#: src/halo2/tmp/4-IsZero-Check-example-3.md:291
#: src/halo2/tmp/7-Range-Check-lookup(example-2).md:467
msgid "usage"
msgstr "usage"

#: src/halo2/tmp/6-Range-Check(code-explanation).md:8
msgid "[imports](#imports)"
msgstr "[imports](#imports)"

#: src/halo2/tmp/6-Range-Check(code-explanation).md:9
msgid "[impl Circuit for MyCircuit](#impl-circuit-for-mycircuit)"
msgstr "[impl Circuit for MyCircuit](#impl-circuit-for-mycircuit)"

#: src/halo2/tmp/6-Range-Check(code-explanation).md:10
msgid "[fn configure()](#fn-configure)"
msgstr "[fn configure()](#fn-configure)"

#: src/halo2/tmp/6-Range-Check(code-explanation).md:11
#: src/halo2/tmp/9-decomposed.md:14
msgid "[fn synthesize()](#fn-synthesize)"
msgstr "[fn synthesize()](#fn-synthesize)"

#: src/halo2/tmp/6-Range-Check(code-explanation).md:12
msgid "[tests](#tests)"
msgstr "[tests](#tests)"

#: src/halo2/tmp/6-Range-Check(code-explanation).md:17
msgid ""
"本部分是 Jason Morton 对于上一 Chapter 的代码超の详细解释： https://github."
"com/jasonmorton/halo2-examples/blob/master/src/range_check/example1b.rs"
msgstr ""
"本部分是 Jason Morton 对于上一 Chapter 的代码超の详细解释： https://github."
"com/jasonmorton/halo2-examples/blob/master/src/range_check/example1b.rs"

#: src/halo2/tmp/6-Range-Check(code-explanation).md:20
msgid "下面一起来看看"
msgstr "下面一起来看看"

#: src/halo2/tmp/6-Range-Check(code-explanation).md:22
msgid "imports"
msgstr "imports"

#: src/halo2/tmp/6-Range-Check(code-explanation).md:24
msgid ""
"```rust\n"
"use ff::{Field, PrimeField};\n"
"use std::marker::PhantomData; // Allows Rust to track types that do not "
"otherwise appear in a struct's fields, here just the field element type\n"
"\n"
"use halo2_proofs::{\n"
"    circuit::{\n"
"        floor_planner::V1,\n"
"        AssignedCell, // a value Value<V> together with its global location "
"as a Cell with region_index, row_offset, and column\n"
"        Layouter,     // layout strategy and accepter struct, a bit like a "
"Writer\n"
"        Value,        // basically an Option<V>, where Some(v) is called "
"known and None is unknown\n"
"    },\n"
"    plonk::{\n"
"        Advice,      // empty struct to mark Advice columns\n"
"        Assigned, // enum Zero, Trivial(F) \"does not require inversion to "
"evaluate\", or Rational(F, F) \"stored as a fraction to enable batch "
"inversion\". This is an actual value (wrapped felt)\n"
"        Circuit,  // trait with without_witnesses, configure, and synthesize "
"methods\n"
"        Column, // represents a pre-layout abstract Column. Fields are "
"index: usize and column type.\n"
"        ConstraintSystem, // The container for the actual constraint system; "
"much of the frontend code exists to make it easier to populate this "
"container\n"
"        Constraints, // Iterable with a selector and Constraint s.  "
"Constraints are single polynomial Expressions returned by create gate\n"
"        Error,       // Custom Error type\n"
"        Expression, // Polynomial expression enum, as binary tree, with 5 "
"types of atomic variables v (Constant, Selector, Fixed, Advice, Instance) "
"and combinations -v, v+v, a*v, or v*v.\n"
"        Selector, // (index: usize, simple: bool) column type, w/ index = "
"index of this selector in the ConstraintSystem, simple = \"can only be "
"multiplied by Expressions not containing Selectors\"\n"
"    },\n"
"    poly::Rotation, // i32 wrapper representing rotation in Lagrange basis\n"
"};\n"
"```"
msgstr ""
"```rust\n"
"use ff::{Field, PrimeField};\n"
"use std::marker::PhantomData; // Allows Rust to track types that do not "
"otherwise appear in a struct's fields, here just the field element type\n"
"\n"
"use halo2_proofs::{\n"
"    circuit::{\n"
"        floor_planner::V1,\n"
"        AssignedCell, // a value Value<V> together with its global location "
"as a Cell with region_index, row_offset, and column\n"
"        Layouter,     // layout strategy and accepter struct, a bit like a "
"Writer\n"
"        Value,        // basically an Option<V>, where Some(v) is called "
"known and None is unknown\n"
"    },\n"
"    plonk::{\n"
"        Advice,      // empty struct to mark Advice columns\n"
"        Assigned, // enum Zero, Trivial(F) \"does not require inversion to "
"evaluate\", or Rational(F, F) \"stored as a fraction to enable batch "
"inversion\". This is an actual value (wrapped felt)\n"
"        Circuit,  // trait with without_witnesses, configure, and synthesize "
"methods\n"
"        Column, // represents a pre-layout abstract Column. Fields are "
"index: usize and column type.\n"
"        ConstraintSystem, // The container for the actual constraint system; "
"much of the frontend code exists to make it easier to populate this "
"container\n"
"        Constraints, // Iterable with a selector and Constraint s.  "
"Constraints are single polynomial Expressions returned by create gate\n"
"        Error,       // Custom Error type\n"
"        Expression, // Polynomial expression enum, as binary tree, with 5 "
"types of atomic variables v (Constant, Selector, Fixed, Advice, Instance) "
"and combinations -v, v+v, a*v, or v*v.\n"
"        Selector, // (index: usize, simple: bool) column type, w/ index = "
"index of this selector in the ConstraintSystem, simple = \"can only be "
"multiplied by Expressions not containing Selectors\"\n"
"    },\n"
"    poly::Rotation, // i32 wrapper representing rotation in Lagrange basis\n"
"};\n"
"```"

#: src/halo2/tmp/6-Range-Check(code-explanation).md:50
msgid ""
"**AssignedCell**：AssignedCell 表示一个与其全局位置相关联的值 `Value<V>`，该"
"位置定义为 Cell，字段： region_index, row_offset 和 column"
msgstr ""
"**AssignedCell**：AssignedCell 表示一个与其全局位置相关联的值 `Value<V>`，该"
"位置定义为 Cell，字段： region_index, row_offset 和 column"

#: src/halo2/tmp/6-Range-Check(code-explanation).md:51
msgid ""
"**Value**：Value 本质是一个 `Option<V>` ，其中 Some(v) 被称为 known（已知），"
"而 None 则是 unknown（未知）"
msgstr ""
"**Value**：Value 本质是一个 `Option<V>` ，其中 Some(v) 被称为 known（已知），"
"而 None 则是 unknown（未知）"

#: src/halo2/tmp/6-Range-Check(code-explanation).md:52
msgid ""
"**Assigned**：Assigned 是一个 enum 枚举类型，有 `Zero, Trivial(F) 和 "
"Rational(F, F)` 三个成员。其中 "
msgstr ""
"**Assigned**：Assigned 是一个 enum 枚举类型，有 `Zero, Trivial(F) 和 "
"Rational(F, F)` 三个成员。其中 "

#: src/halo2/tmp/6-Range-Check(code-explanation).md:53
msgid "Trivial(F) \"A value that does not require inversion to evaluate.\"，"
msgstr "Trivial(F) \"A value that does not require inversion to evaluate.\"，"

#: src/halo2/tmp/6-Range-Check(code-explanation).md:54
msgid ""
"Rational(F, F) \"存储为分数以便进行批量取反 (A value stored as a fraction to "
"enable batch inversion.)\" ，这是一个实际的值（wrapped felt）"
msgstr ""
"Rational(F, F) \"存储为分数以便进行批量取反 (A value stored as a fraction to "
"enable batch inversion.)\" ，这是一个实际的值（wrapped felt）"

#: src/halo2/tmp/6-Range-Check(code-explanation).md:55
msgid ""
"**Circuit**：Circuit 是一个 trait，具有 _without_witnesses, configure 和 "
"synthesize_ 方法"
msgstr ""
"**Circuit**：Circuit 是一个 trait，具有 _without_witnesses, configure 和 "
"synthesize_ 方法"

#: src/halo2/tmp/6-Range-Check(code-explanation).md:56
msgid ""
"**ConstraintSystem**：ConstraintSystem 是实际约束系统的容器；大部分前端代码的"
"存在都是为了更容易地填充这个容器"
msgstr ""
"**ConstraintSystem**：ConstraintSystem 是实际约束系统的容器；大部分前端代码的"
"存在都是为了更容易地填充这个容器"

#: src/halo2/tmp/6-Range-Check(code-explanation).md:57
msgid "**Constraints** ： 提供了一个新的 API 来进行约束"
msgstr "**Constraints** ： 提供了一个新的 API 来进行约束"

#: src/halo2/tmp/6-Range-Check(code-explanation).md:58
msgid "**Expression**："
msgstr "**Expression**："

#: src/halo2/tmp/6-Range-Check(code-explanation).md:59
msgid ""
"Expression 是多项式表达式的枚举类型，表现为二叉树，拥有5种类型的原子变量 v"
"（Constant, Selector, Fixed, Advice, Instance）以及combination `-v, v+v, "
"a*v, or v*v.`"
msgstr ""
"Expression 是多项式表达式的枚举类型，表现为二叉树，拥有5种类型的原子变量 v"
"（Constant, Selector, Fixed, Advice, Instance）以及combination `-v, v+v, "
"a*v, or v*v.`"

#: src/halo2/tmp/6-Range-Check(code-explanation).md:60
msgid ""
"Low-degree expression representing an identity that must hold over the "
"committed columns."
msgstr ""
"Low-degree expression representing an identity that must hold over the "
"committed columns."

#: src/halo2/tmp/6-Range-Check(code-explanation).md:62
msgid ""
"```rust\n"
"// Config 是您自定义电路的关联类型（仅要求实现 Clone trait）。它没有特定的强"
"制结构，存储所需的任何类型信息\n"
"// A Config is an associated type of your custom circuit (required only to "
"be Clone).  With no particular enforced structure, it stores whatever type "
"information is needed\n"
"\n"
"// to understand the constraint system (number and types of columns, their "
"indices, some flags such as simple/complex selector, etc.).\n"
"// It is a bit like a morphism type in a Monoidal category (domain and "
"codomain), or the row and column labels in a dataframe. Let's call it the "
"FrameType\n"
"// It can be unstructured because it is the Circuit implementer's job to "
"translate this information into the format needed for the Layouter.\n"
"\n"
"#[derive(Clone)]\n"
"struct MyConfig<F: PrimeField, const RANGE: usize> {\n"
"    advice_column: Column<Advice>,  // a marker and index for a Selector\n"
"    q_range_check: Selector,   // similarly a marker and index for a "
"Selector\n"
"    _marker: PhantomData<F>,\n"
"}\n"
"\n"
"// 通常，Config 会有一个 configure 和 assign 方法，它们由 Circuit 的 "
"configure 和 synthesize 方法委托。在这个版本的示例中，我们将直接在电路中放置"
"此逻辑。\n"
"// By convention the Config gets a configure() and assign() method, which "
"are delegated to by the configure and synthesize method of the Circuit.\n"
"// In this version of the example we will put this logic directly in the "
"circuit.\n"
"impl<F: PrimeField, const RANGE: usize> MyConfig<F, RANGE> {}\n"
"\n"
"#[derive(Default)] // Deriving Default calls Default on Value<Assigned<F>> "
"calls impl<V> Default for Value<V> { fn default() -> Self {  Self::"
"unknown()  }}\n"
"                   // which in turn sets value.inner: Option<V> to None\n"
"struct MyCircuit<F: PrimeField, const RANGE: usize> {\n"
"    assigned_value: Value<Assigned<F>>,\n"
"    _marker: PhantomData<F>,\n"
"}\n"
"impl<F: PrimeField, const RANGE: usize> MyCircuit<F, RANGE> {}\n"
"```"
msgstr ""
"```rust\n"
"// Config 是您自定义电路的关联类型（仅要求实现 Clone trait）。它没有特定的强"
"制结构，存储所需的任何类型信息\n"
"// A Config is an associated type of your custom circuit (required only to "
"be Clone).  With no particular enforced structure, it stores whatever type "
"information is needed\n"
"\n"
"// to understand the constraint system (number and types of columns, their "
"indices, some flags such as simple/complex selector, etc.).\n"
"// It is a bit like a morphism type in a Monoidal category (domain and "
"codomain), or the row and column labels in a dataframe. Let's call it the "
"FrameType\n"
"// It can be unstructured because it is the Circuit implementer's job to "
"translate this information into the format needed for the Layouter.\n"
"\n"
"#[derive(Clone)]\n"
"struct MyConfig<F: PrimeField, const RANGE: usize> {\n"
"    advice_column: Column<Advice>,  // a marker and index for a Selector\n"
"    q_range_check: Selector,   // similarly a marker and index for a "
"Selector\n"
"    _marker: PhantomData<F>,\n"
"}\n"
"\n"
"// 通常，Config 会有一个 configure 和 assign 方法，它们由 Circuit 的 "
"configure 和 synthesize 方法委托。在这个版本的示例中，我们将直接在电路中放置"
"此逻辑。\n"
"// By convention the Config gets a configure() and assign() method, which "
"are delegated to by the configure and synthesize method of the Circuit.\n"
"// In this version of the example we will put this logic directly in the "
"circuit.\n"
"impl<F: PrimeField, const RANGE: usize> MyConfig<F, RANGE> {}\n"
"\n"
"#[derive(Default)] // Deriving Default calls Default on Value<Assigned<F>> "
"calls impl<V> Default for Value<V> { fn default() -> Self {  Self::"
"unknown()  }}\n"
"                   // which in turn sets value.inner: Option<V> to None\n"
"struct MyCircuit<F: PrimeField, const RANGE: usize> {\n"
"    assigned_value: Value<Assigned<F>>,\n"
"    _marker: PhantomData<F>,\n"
"}\n"
"impl<F: PrimeField, const RANGE: usize> MyCircuit<F, RANGE> {}\n"
"```"

#: src/halo2/tmp/6-Range-Check(code-explanation).md:92
msgid "impl Circuit for MyCircuit"
msgstr "impl Circuit for MyCircuit"

#: src/halo2/tmp/6-Range-Check(code-explanation).md:94
msgid ""
"```rust\n"
"// Your Circuit plays several roles and  will be passed to prover and "
"verifier key generation, prove, and verifier.\n"
"// Implementing the Circuit trait requires three functions:\n"
"// 1) Anything special that needs to be done to set it up without witness "
"values (which will be used in p&v key generation), usually just all witness\n"
"//    values are set to None (Remember Value is basically an alias of "
"Option).\n"
"// 2) How to 'configure' it.  This is a bit mysterious because the required "
"trait method configure just returns your custom associated type\n"
"//    Config, which in turn need only be Clone.  So what is happening? If we "
"look at the MockProver code, we see that an empty ConstraintSystem is\n"
"//    created and passed to the configure function as mutable, then an "
"immutable borrow is taken and worked with for the duration:\n"
"//         let mut cs = ConstraintSystem::default();\n"
"//         let config = ConcreteCircuit::configure(&mut cs);\n"
"//         let cs = cs;\n"
"//    Thus it the Circuit's `configure` method that is responsible for all "
"of the contraint system definition.  It could be called "
"compile_constraints.\n"
"```"
msgstr ""
"```rust\n"
"// Your Circuit plays several roles and  will be passed to prover and "
"verifier key generation, prove, and verifier.\n"
"// Implementing the Circuit trait requires three functions:\n"
"// 1) Anything special that needs to be done to set it up without witness "
"values (which will be used in p&v key generation), usually just all witness\n"
"//    values are set to None (Remember Value is basically an alias of "
"Option).\n"
"// 2) How to 'configure' it.  This is a bit mysterious because the required "
"trait method configure just returns your custom associated type\n"
"//    Config, which in turn need only be Clone.  So what is happening? If we "
"look at the MockProver code, we see that an empty ConstraintSystem is\n"
"//    created and passed to the configure function as mutable, then an "
"immutable borrow is taken and worked with for the duration:\n"
"//         let mut cs = ConstraintSystem::default();\n"
"//         let config = ConcreteCircuit::configure(&mut cs);\n"
"//         let cs = cs;\n"
"//    Thus it the Circuit's `configure` method that is responsible for all "
"of the contraint system definition.  It could be called "
"compile_constraints.\n"
"```"

#: src/halo2/tmp/6-Range-Check(code-explanation).md:108
msgid ""
"电路会扮演多个角色，并且会被传递给 `prover` 、 `verifier` 来 进行 key "
"generation, prove, and verify."
msgstr ""
"电路会扮演多个角色，并且会被传递给 `prover` 、 `verifier` 来 进行 key "
"generation, prove, and verify."

#: src/halo2/tmp/6-Range-Check(code-explanation).md:109
msgid "`without_witnesses`  通常在 p&v key generation 期间使用"
msgstr "`without_witnesses`  通常在 p&v key generation 期间使用"

#: src/halo2/tmp/6-Range-Check(code-explanation).md:110
msgid ""
"How to 'configure' it?  如果我们查看 MockProver 代码，我们可以看到创建了一个"
"空的 ConstraintSystem，传递给 `configure()` 作为可变引用"
msgstr ""
"How to 'configure' it?  如果我们查看 MockProver 代码，我们可以看到创建了一个"
"空的 ConstraintSystem，传递给 `configure()` 作为可变引用"

#: src/halo2/tmp/6-Range-Check(code-explanation).md:112
msgid ""
"```rust\n"
"//    Why does the configure method accept an empty constraint system and "
"return the arbitrary Self::Config, after filling the constaint system to its "
"liking?\n"
"//    The config returned by ConcreteCircuit ::configure is used just once "
"in the MockProver:\n"
"//         ConcreteCircuit::FloorPlanner::synthesize(&mut prover, circuit, "
"config, constants)?;\n"
"//    So after setting up the constraints, the Config stores the information "
"about the layout that the floor planner will need to synthesize.\n"
"//\n"
"//    The `configure` function is where we call cs.create_gate() and so on, "
"adding polynomials to the system.  At this point, the variables in these "
"polynomials\n"
"//    are still locally named/scoped, and will be given a global name/scope "
"during layout.\n"
"```"
msgstr ""
"```rust\n"
"//    Why does the configure method accept an empty constraint system and "
"return the arbitrary Self::Config, after filling the constaint system to its "
"liking?\n"
"//    The config returned by ConcreteCircuit ::configure is used just once "
"in the MockProver:\n"
"//         ConcreteCircuit::FloorPlanner::synthesize(&mut prover, circuit, "
"config, constants)?;\n"
"//    So after setting up the constraints, the Config stores the information "
"about the layout that the floor planner will need to synthesize.\n"
"//\n"
"//    The `configure` function is where we call cs.create_gate() and so on, "
"adding polynomials to the system.  At this point, the variables in these "
"polynomials\n"
"//    are still locally named/scoped, and will be given a global name/scope "
"during layout.\n"
"```"

#: src/halo2/tmp/6-Range-Check(code-explanation).md:122
msgid ""
"为什么 configure 方法接受一个空的约束系统，并在填充约束系统后返回任意的 "
"Self::Config？"
msgstr ""
"为什么 configure 方法接受一个空的约束系统，并在填充约束系统后返回任意的 "
"Self::Config？"

#: src/halo2/tmp/6-Range-Check(code-explanation).md:123
msgid "ConcreteCircuit::configure 返回的 config 在 MockProver 中只使用一次："
msgstr "ConcreteCircuit::configure 返回的 config 在 MockProver 中只使用一次："

#: src/halo2/tmp/6-Range-Check(code-explanation).md:124
msgid ""
"`ConcreteCircuit::FloorPlanner::synthesize(&mut prover, circuit, config, "
"constants)?;`"
msgstr ""
"`ConcreteCircuit::FloorPlanner::synthesize(&mut prover, circuit, config, "
"constants)?;`"

#: src/halo2/tmp/6-Range-Check(code-explanation).md:125
msgid ""
"因此，在设置约束之后，Config 存储了 floor planner 在合成时需要的布局信息。"
msgstr ""
"因此，在设置约束之后，Config 存储了 floor planner 在合成时需要的布局信息。"

#: src/halo2/tmp/6-Range-Check(code-explanation).md:127
msgid ""
"```rust\n"
"// 3) How to synthesize, given the circuit, a provided &mut Layouter and the "
"data passed in the Config.  The synthesize method returns only error "
"information, and\n"
"//    changes state by writing to the Layouter.  Thus the Layouter is like a "
"buffer or Writer to which the final circuit is written.  One will be "
"supplied by the\n"
"//    MockProver below (and variants will be needed during keygen and "
"proving).\n"
"//\n"
"//  Roughly, configure provides the concrete but relative layout, and "
"synthesize combines such blocks and assigns an absolute layout.\n"
"impl<F: PrimeField, const RANGE: usize> Circuit<F> for MyCircuit<F, RANGE> "
"{\n"
"    type Config = MyConfig<F, RANGE>;\n"
"    type FloorPlanner = V1;\n"
"\n"
"    // This boilerplate could be removed by putting it in the Circuit trait "
"and defining the Circuit trait with a bound as Circuit: Default, but that "
"might be annoying too.\n"
"    fn without_witnesses(&self) -> Self {\n"
"        Self::default() // should fill all the Witness Values with None/"
"Unknown.\n"
"    }\n"
"```"
msgstr ""
"```rust\n"
"// 3) How to synthesize, given the circuit, a provided &mut Layouter and the "
"data passed in the Config.  The synthesize method returns only error "
"information, and\n"
"//    changes state by writing to the Layouter.  Thus the Layouter is like a "
"buffer or Writer to which the final circuit is written.  One will be "
"supplied by the\n"
"//    MockProver below (and variants will be needed during keygen and "
"proving).\n"
"//\n"
"//  Roughly, configure provides the concrete but relative layout, and "
"synthesize combines such blocks and assigns an absolute layout.\n"
"impl<F: PrimeField, const RANGE: usize> Circuit<F> for MyCircuit<F, RANGE> "
"{\n"
"    type Config = MyConfig<F, RANGE>;\n"
"    type FloorPlanner = V1;\n"
"\n"
"    // This boilerplate could be removed by putting it in the Circuit trait "
"and defining the Circuit trait with a bound as Circuit: Default, but that "
"might be annoying too.\n"
"    fn without_witnesses(&self) -> Self {\n"
"        Self::default() // should fill all the Witness Values with None/"
"Unknown.\n"
"    }\n"
"```"

#: src/halo2/tmp/6-Range-Check(code-explanation).md:143
msgid "How to synthesize?"
msgstr "How to synthesize?"

#: src/halo2/tmp/6-Range-Check(code-explanation).md:144
msgid ""
"给定电路 Circuit、 `&mut Layouter` 和在 Config 中传递的数据。synthesize 方法"
"只返回错误信息，并通过写入 Layouter 更改状态。因此，Layouter 就像最终电路被写"
"入的缓冲区或 Writer。"
msgstr ""
"给定电路 Circuit、 `&mut Layouter` 和在 Config 中传递的数据。synthesize 方法"
"只返回错误信息，并通过写入 Layouter 更改状态。因此，Layouter 就像最终电路被写"
"入的缓冲区或 Writer。"

#: src/halo2/tmp/6-Range-Check(code-explanation).md:146
msgid ""
"大致来说，configure 提供了具体但相对的布局，而 synthesize 组合这些块并分配绝"
"对布局。"
msgstr ""
"大致来说，configure 提供了具体但相对的布局，而 synthesize 组合这些块并分配绝"
"对布局。"

#: src/halo2/tmp/6-Range-Check(code-explanation).md:150
msgid ""
"```rust\n"
"// define the constraints, mutate the provided ConstraintSystem, and output "
"the resulting FrameType\n"
"// 改变(mutate) 提供的 ConstraintSystem，并输出结果的 FrameType\n"
"fn configure(cs: &mut ConstraintSystem<F>) -> Self::Config {\n"
"\t// Create the column marker types. Requests the CS to allocate a new "
"column (giving it a unique cs-global index and incrementing its\n"
"\t// 创建列标记类型。请求 CS 分配一个新列（给它一个唯一的 cs-global 索引并增"
"加它的\n"
"\t//   num_selectors, num_fixed_columns, num_advice_columns, or "
"num_instance_columns).\n"
"\tlet advice_column = cs.advice_column();\n"
"\tlet q_range_check = cs.selector();\n"
"\n"
"\t// When we use cs.query_advice or cs.query_selector, we obtain an "
"Expression which is a reference to a cell in the matrix.\n"
"\t// 访问 cs.query_advice / query_selector 获得一个 Expression，它是矩阵中一"
"个单元格的引用(reference)\n"
"\t//   Expression::Advice {\n"
"\t//     query_index: self.meta.query_advice_index(column, at),\n"
"\t//     column_index: column.index,\n"
"\t//     rotation: at,\n"
"\t//   }\n"
"\t// Such an a_{ij} or a_{this_row + at, column} can be treated as a "
"symbolic variable and put into a polynomial constraint.\n"
"\t// More precisely, this is a relative reference wrt rows. \n"
"\t// 例如 a_{ij} / a_{this_row + at, column} 会被视为一个符号变量，并放入一个"
"多项式约束中。\n"
"\t// (这是一个相对于行的相对引用)\n"
"\n"
"\t// cs.create_gate takes a function from virtual_cells to contraints, "
"pushing the constraints to the cs's accumulator.  So this puts\n"
"\t// (value.clone()) * (1 - value.clone()) * (2 - value.clone()) * ... * (R "
"- 1 - value.clone())\n"
"\t// into the constraint list.\n"
"\t// 注意 [VirtualCells], 它持有对`ConstraintSystem`的可变引用，存储已查询的"
"选择器/不同类型的列\n"
"\tcs.create_gate(\"range check\", |virtual_cells| {\n"
"\t\tlet q = virtual_cells.query_selector(q_range_check);\n"
"\t\tlet value = virtual_cells.query_advice(advice_column, Rotation::cur());\n"
"\n"
"\t\t// Given a range R and a value v, returns the expression\n"
"\t\t// (v) * (1 - v) * (2 - v) * ... * (R - 1 - v)\n"
"\t\t//  Range Check poly:\n"
"\t\tlet rc_polynomial = (1..RANGE).fold(value.clone(), |expr, i| {\n"
"\t\t\texpr * (Expression::Constant(F::from(i as u64)) - value.clone())\n"
"\t\t});\n"
"\n"
"\t\tConstraints::with_selector(q, [(\"range check\", rc_polynomial)])\n"
"\t});\n"
"\n"
"\t// The \"FrameType\"\n"
"\tSelf::Config {\n"
"\t\tq_range_check,\n"
"\t\tadvice_column,\n"
"\t\t_marker: PhantomData,\n"
"\t}\n"
"}\n"
"```"
msgstr ""
"```rust\n"
"// define the constraints, mutate the provided ConstraintSystem, and output "
"the resulting FrameType\n"
"// 改变(mutate) 提供的 ConstraintSystem，并输出结果的 FrameType\n"
"fn configure(cs: &mut ConstraintSystem<F>) -> Self::Config {\n"
"\t// Create the column marker types. Requests the CS to allocate a new "
"column (giving it a unique cs-global index and incrementing its\n"
"\t// 创建列标记类型。请求 CS 分配一个新列（给它一个唯一的 cs-global 索引并增"
"加它的\n"
"\t//   num_selectors, num_fixed_columns, num_advice_columns, or "
"num_instance_columns).\n"
"\tlet advice_column = cs.advice_column();\n"
"\tlet q_range_check = cs.selector();\n"
"\n"
"\t// When we use cs.query_advice or cs.query_selector, we obtain an "
"Expression which is a reference to a cell in the matrix.\n"
"\t// 访问 cs.query_advice / query_selector 获得一个 Expression，它是矩阵中一"
"个单元格的引用(reference)\n"
"\t//   Expression::Advice {\n"
"\t//     query_index: self.meta.query_advice_index(column, at),\n"
"\t//     column_index: column.index,\n"
"\t//     rotation: at,\n"
"\t//   }\n"
"\t// Such an a_{ij} or a_{this_row + at, column} can be treated as a "
"symbolic variable and put into a polynomial constraint.\n"
"\t// More precisely, this is a relative reference wrt rows. \n"
"\t// 例如 a_{ij} / a_{this_row + at, column} 会被视为一个符号变量，并放入一个"
"多项式约束中。\n"
"\t// (这是一个相对于行的相对引用)\n"
"\n"
"\t// cs.create_gate takes a function from virtual_cells to contraints, "
"pushing the constraints to the cs's accumulator.  So this puts\n"
"\t// (value.clone()) * (1 - value.clone()) * (2 - value.clone()) * ... * (R "
"- 1 - value.clone())\n"
"\t// into the constraint list.\n"
"\t// 注意 [VirtualCells], 它持有对`ConstraintSystem`的可变引用，存储已查询的"
"选择器/不同类型的列\n"
"\tcs.create_gate(\"range check\", |virtual_cells| {\n"
"\t\tlet q = virtual_cells.query_selector(q_range_check);\n"
"\t\tlet value = virtual_cells.query_advice(advice_column, Rotation::cur());\n"
"\n"
"\t\t// Given a range R and a value v, returns the expression\n"
"\t\t// (v) * (1 - v) * (2 - v) * ... * (R - 1 - v)\n"
"\t\t//  Range Check poly:\n"
"\t\tlet rc_polynomial = (1..RANGE).fold(value.clone(), |expr, i| {\n"
"\t\t\texpr * (Expression::Constant(F::from(i as u64)) - value.clone())\n"
"\t\t});\n"
"\n"
"\t\tConstraints::with_selector(q, [(\"range check\", rc_polynomial)])\n"
"\t});\n"
"\n"
"\t// The \"FrameType\"\n"
"\tSelf::Config {\n"
"\t\tq_range_check,\n"
"\t\tadvice_column,\n"
"\t\t_marker: PhantomData,\n"
"\t}\n"
"}\n"
"```"

#: src/halo2/tmp/6-Range-Check(code-explanation).md:199
msgid "**query_selector  &  query_advice**"
msgstr "**query_selector  &  query_advice**"

#: src/halo2/tmp/6-Range-Check(code-explanation).md:200
msgid ""
"When we use `cs.query_advice` or `cs.query_selector`, we obtain an "
"_Expression_ which is a reference to a cell in the matrix. "
msgstr ""
"When we use `cs.query_advice` or `cs.query_selector`, we obtain an "
"_Expression_ which is a reference to a cell in the matrix. "

#: src/halo2/tmp/6-Range-Check(code-explanation).md:201
msgid ""
"一个 `a_{ij}` 或 `a_{this_row + at, column}` 可以被视为一个符号变量，并放入一"
"个多项式约束中。更准确地说，这是一个相对于行的相对引用。"
msgstr ""
"一个 `a_{ij}` 或 `a_{this_row + at, column}` 可以被视为一个符号变量，并放入一"
"个多项式约束中。更准确地说，这是一个相对于行的相对引用。"

#: src/halo2/tmp/6-Range-Check(code-explanation).md:204
#: src/halo2/tmp/9-decomposed.md:342
msgid "fn synthesize()"
msgstr "fn synthesize()"

#: src/halo2/tmp/6-Range-Check(code-explanation).md:206
msgid ""
"```rust\n"
"fn synthesize(\n"
"\t&self,\n"
"\tconfig: Self::Config,\n"
"\tmut layouter: impl Layouter<F>, // layouter is our 'write buffer' for the "
"circuit\n"
") -> Result<(), Error> {\n"
"\t// From the function docs:\n"
"\t// Assign a region of gates to an absolute row number. 将门的 region 分配一"
"个绝对行号。\n"
"\t// Inside the closure, the chip may freely use relative offsets; the "
"`Layouter` will\n"
"\t// treat these assignments as a single \"region\" within the circuit. "
"Outside this\n"
"\t// closure, the `Layouter` is allowed to optimise as it sees fit.\n"
"\t// 闭包内，chip 可以自由使用相对偏移；`Layouter` 会将这些 assignments 视为"
"电路中的单个“region”。\n"
"\t// 在闭包外部，`Layouter` 可以根据需要进行优化\n"
"\n"
"\tlayouter.assign_region(\n"
"\t\t|| \"Assign value\", // the name of the region\n"
"\t\t|mut region| {\n"
"\t\t\tlet offset = 0;\n"
"\n"
"\t\t\t// Enable q_range_check. Remember that q_range_check is a label, a "
"Selector. Calling its enable\n"
"\t\t\t// - calls region.enable_selector(_,q_range_check,offset)  which\n"
"\t\t\t// - calls enable_selector on the region's RegionLayouter which\n"
"\t\t\t// - calls enable_selector on its \"CS\" (actually an Assignment<F> (a "
"trait), and whatever impls that\n"
"\t\t\t// does the work, for example for MockProver the enable_selector "
"function does some checks and then sets\n"
"\t\t\t//   self.selectors[selector.0][row] = true;\n"
"\t\t\tconfig.q_range_check.enable(&mut region, offset)?;\n"
"\n"
"\t\t\t// Similarly after indirection calls assign_advice in e.g. the "
"MockProver, which\n"
"\t\t\t// takes a Value-producing to() and does something like\n"
"\t\t\t// CellValue::Assigned(to().into_field().evaluate().assign()?);\n"
"\t\t\t// 类似 MockProver 间接调用 assign_advice, 它接受一个 Value-producing "
"的 to() (进行赋值)\n"
"\t\t\tregion.assign_advice(\n"
"\t\t\t\t|| \"value\",\n"
"\t\t\t\tconfig.advice_column,\n"
"\t\t\t\toffset,\n"
"\t\t\t\t|| self.assigned_value,\n"
"\t\t\t)\n"
"\t\t},\n"
"\t)?;\n"
"\tOk(())\n"
"} }\n"
"```"
msgstr ""
"```rust\n"
"fn synthesize(\n"
"\t&self,\n"
"\tconfig: Self::Config,\n"
"\tmut layouter: impl Layouter<F>, // layouter is our 'write buffer' for the "
"circuit\n"
") -> Result<(), Error> {\n"
"\t// From the function docs:\n"
"\t// Assign a region of gates to an absolute row number. 将门的 region 分配一"
"个绝对行号。\n"
"\t// Inside the closure, the chip may freely use relative offsets; the "
"`Layouter` will\n"
"\t// treat these assignments as a single \"region\" within the circuit. "
"Outside this\n"
"\t// closure, the `Layouter` is allowed to optimise as it sees fit.\n"
"\t// 闭包内，chip 可以自由使用相对偏移；`Layouter` 会将这些 assignments 视为"
"电路中的单个“region”。\n"
"\t// 在闭包外部，`Layouter` 可以根据需要进行优化\n"
"\n"
"\tlayouter.assign_region(\n"
"\t\t|| \"Assign value\", // the name of the region\n"
"\t\t|mut region| {\n"
"\t\t\tlet offset = 0;\n"
"\n"
"\t\t\t// Enable q_range_check. Remember that q_range_check is a label, a "
"Selector. Calling its enable\n"
"\t\t\t// - calls region.enable_selector(_,q_range_check,offset)  which\n"
"\t\t\t// - calls enable_selector on the region's RegionLayouter which\n"
"\t\t\t// - calls enable_selector on its \"CS\" (actually an Assignment<F> (a "
"trait), and whatever impls that\n"
"\t\t\t// does the work, for example for MockProver the enable_selector "
"function does some checks and then sets\n"
"\t\t\t//   self.selectors[selector.0][row] = true;\n"
"\t\t\tconfig.q_range_check.enable(&mut region, offset)?;\n"
"\n"
"\t\t\t// Similarly after indirection calls assign_advice in e.g. the "
"MockProver, which\n"
"\t\t\t// takes a Value-producing to() and does something like\n"
"\t\t\t// CellValue::Assigned(to().into_field().evaluate().assign()?);\n"
"\t\t\t// 类似 MockProver 间接调用 assign_advice, 它接受一个 Value-producing "
"的 to() (进行赋值)\n"
"\t\t\tregion.assign_advice(\n"
"\t\t\t\t|| \"value\",\n"
"\t\t\t\tconfig.advice_column,\n"
"\t\t\t\toffset,\n"
"\t\t\t\t|| self.assigned_value,\n"
"\t\t\t)\n"
"\t\t},\n"
"\t)?;\n"
"\tOk(())\n"
"} }\n"
"```"

#: src/halo2/tmp/6-Range-Check(code-explanation).md:249
msgid "tests"
msgstr "tests"

#: src/halo2/tmp/6-Range-Check(code-explanation).md:251
msgid ""
"```rust\n"
"#[cfg(test)]\n"
"mod tests {\n"
"    use halo2_proofs::{\n"
"        dev::{FailureLocation, MockProver, VerifyFailure},\n"
"        pasta::Fp,\n"
"        plonk::{Any, Circuit},\n"
"    };\n"
"\n"
"    use super::*;\n"
"\n"
"    #[test]\n"
"    fn test_range_check_1() {\n"
"        let k = 4; //2^k rows\n"
"        const RANGE: usize = 8; // 3-bit value\n"
"        let testvalue: u64 = 22;\n"
"\n"
"        // Successful cases\n"
"        for i in 0..RANGE {\n"
"            let circuit = MyCircuit::<Fp, RANGE> {\n"
"                assigned_value: Value::known(Fp::from(i as u64).into()),\n"
"                _marker: PhantomData,\n"
"            };\n"
"\n"
"            // The MockProver arguments are log_2(nrows), the circuit (with "
"advice already assigned), and the instance variables.\n"
"            // The MockProver will need to internally supply a Layouter for "
"the constraint system to be actually written.\n"
"            // k 对应 2^k 行, MockProver 将需要内部提供一个 Layouter，以便实"
"际编写约束系统\n"
"            let prover = MockProver::run(k, &circuit, vec![]).unwrap();\n"
"            prover.assert_satisfied();\n"
"        }\n"
"\n"
"        // Out-of-range `value = 8`\n"
"        {\n"
"            let circuit = MyCircuit::<Fp, RANGE> {\n"
"                assigned_value: Value::known(Fp::from(testvalue).into()),\n"
"                _marker: PhantomData,\n"
"            };\n"
"            let prover = MockProver::run(k, &circuit, vec![]).unwrap();\n"
"            assert_eq!(\n"
"                prover.verify(),\n"
"                Err(vec![VerifyFailure::ConstraintNotSatisfied {\n"
"                    constraint: ((0, \"range check\").into(), 0, \"range "
"check\").into(),\n"
"                    location: FailureLocation::InRegion {\n"
"                        region: (0, \"Assign value\").into(),\n"
"                        offset: 0\n"
"                    },\n"
"                    cell_values: vec![(((Any::Advice, 0).into(), 0).into(), "
"\"0x16\".to_string())]\n"
"                }])\n"
"            );\n"
"        }\n"
"    }\n"
"}\n"
"```"
msgstr ""
"```rust\n"
"#[cfg(test)]\n"
"mod tests {\n"
"    use halo2_proofs::{\n"
"        dev::{FailureLocation, MockProver, VerifyFailure},\n"
"        pasta::Fp,\n"
"        plonk::{Any, Circuit},\n"
"    };\n"
"\n"
"    use super::*;\n"
"\n"
"    #[test]\n"
"    fn test_range_check_1() {\n"
"        let k = 4; //2^k rows\n"
"        const RANGE: usize = 8; // 3-bit value\n"
"        let testvalue: u64 = 22;\n"
"\n"
"        // Successful cases\n"
"        for i in 0..RANGE {\n"
"            let circuit = MyCircuit::<Fp, RANGE> {\n"
"                assigned_value: Value::known(Fp::from(i as u64).into()),\n"
"                _marker: PhantomData,\n"
"            };\n"
"\n"
"            // The MockProver arguments are log_2(nrows), the circuit (with "
"advice already assigned), and the instance variables.\n"
"            // The MockProver will need to internally supply a Layouter for "
"the constraint system to be actually written.\n"
"            // k 对应 2^k 行, MockProver 将需要内部提供一个 Layouter，以便实"
"际编写约束系统\n"
"            let prover = MockProver::run(k, &circuit, vec![]).unwrap();\n"
"            prover.assert_satisfied();\n"
"        }\n"
"\n"
"        // Out-of-range `value = 8`\n"
"        {\n"
"            let circuit = MyCircuit::<Fp, RANGE> {\n"
"                assigned_value: Value::known(Fp::from(testvalue).into()),\n"
"                _marker: PhantomData,\n"
"            };\n"
"            let prover = MockProver::run(k, &circuit, vec![]).unwrap();\n"
"            assert_eq!(\n"
"                prover.verify(),\n"
"                Err(vec![VerifyFailure::ConstraintNotSatisfied {\n"
"                    constraint: ((0, \"range check\").into(), 0, \"range "
"check\").into(),\n"
"                    location: FailureLocation::InRegion {\n"
"                        region: (0, \"Assign value\").into(),\n"
"                        offset: 0\n"
"                    },\n"
"                    cell_values: vec![(((Any::Advice, 0).into(), 0).into(), "
"\"0x16\".to_string())]\n"
"                }])\n"
"            );\n"
"        }\n"
"    }\n"
"}\n"
"```"

#: src/halo2/tmp/6-Range-Check(code-explanation).md:307
#: src/halo2/tmp/7-Range-Check-lookup(example-2).md:484
#: src/halo2/tmp/8-Range-Check(example-3).md:372
#: src/halo2/tmp/9-decomposed.md:459
msgid ""
"https://github.com/enricobottazzi/halo2-intro/blob/master/src/range_check/"
"example5/table.rs"
msgstr ""
"https://github.com/enricobottazzi/halo2-intro/blob/master/src/range_check/"
"example5/table.rs"

#: src/halo2/tmp/7-Range-Check-lookup(example-2).md:8
#: src/halo2/tmp/8-Range-Check(example-3).md:10
msgid "[lookup table - table.rs](#lookup-table---tablers)"
msgstr "[lookup table - table.rs](#lookup-table---tablers)"

#: src/halo2/tmp/7-Range-Check-lookup(example-2).md:9
msgid "[main - example2.rs](#main---example2rs)"
msgstr "[main - example2.rs](#main---example2rs)"

#: src/halo2/tmp/7-Range-Check-lookup(example-2).md:10
#: src/halo2/tmp/8-Range-Check(example-3).md:14
msgid "[Overview](#overview-1)"
msgstr "[Overview](#overview-1)"

#: src/halo2/tmp/7-Range-Check-lookup(example-2).md:12
#: src/halo2/tmp/8-Range-Check(example-3).md:16
msgid "[impl RangeCheckConfig](#impl-rangecheckconfig)"
msgstr "[impl RangeCheckConfig](#impl-rangecheckconfig)"

#: src/halo2/tmp/7-Range-Check-lookup(example-2).md:13
msgid "[Test Lookup table](#test-lookup-table)"
msgstr "[Test Lookup table](#test-lookup-table)"

#: src/halo2/tmp/7-Range-Check-lookup(example-2).md:14
msgid "[struct MyCircuit](#struct-mycircuit)"
msgstr "[struct MyCircuit](#struct-mycircuit)"

#: src/halo2/tmp/7-Range-Check-lookup(example-2).md:15
msgid "[fn synthesis()](#fn-synthesis)"
msgstr "[fn synthesis()](#fn-synthesis)"

#: src/halo2/tmp/7-Range-Check-lookup(example-2).md:16
msgid "[test_range_check_2](#test_range_check_2)"
msgstr "[test_range_check_2](#test_range_check_2)"

#: src/halo2/tmp/7-Range-Check-lookup(example-2).md:17
#: src/halo2/tmp/Zordle.md:19
msgid "[illustration](#illustration)"
msgstr "[illustration](#illustration)"

#: src/halo2/tmp/7-Range-Check-lookup(example-2).md:23
msgid ""
"上一章节使用的 `(v) * (1 - v) * (2 - v) * ... * (R - 1 - v)`，本章使用了 "
"**Lookup Table** 来执行范围检查。"
msgstr ""
"上一章节使用的 `(v) * (1 - v) * (2 - v) * ... * (R - 1 - v)`，本章使用了 "
"**Lookup Table** 来执行范围检查。"

#: src/halo2/tmp/7-Range-Check-lookup(example-2).md:25
msgid ""
"连乘表达式的问题：如果数字 “R” 很大，那么多项式的次数将非常高，这会增加电路的"
"成本，所以现在我们必须稍微改变我们的布局：使用查找表进行范围检查：当您尝试检"
"查更大的范围并且希望将约束的度数限制保持在较低水平时非常有用。"
msgstr ""
"连乘表达式的问题：如果数字 “R” 很大，那么多项式的次数将非常高，这会增加电路的"
"成本，所以现在我们必须稍微改变我们的布局：使用查找表进行范围检查：当您尝试检"
"查更大的范围并且希望将约束的度数限制保持在较低水平时非常有用。"

#: src/halo2/tmp/7-Range-Check-lookup(example-2).md:27
msgid ""
"（if you have a vary large `R`, then polynomial is going to be very high "
"degree and that will increase the cost of your circuit so now we have to "
"change our layout a little bit.  range check with Lookup table: useful when "
"you're trying to check a larger range and you want to keep the degree bound "
"of your constraints low.）"
msgstr ""
"（if you have a vary large `R`, then polynomial is going to be very high "
"degree and that will increase the cost of your circuit so now we have to "
"change our layout a little bit.  range check with Lookup table: useful when "
"you're trying to check a larger range and you want to keep the degree bound "
"of your constraints low.）"

#: src/halo2/tmp/7-Range-Check-lookup(example-2).md:30
#: src/halo2/tmp/8-Range-Check(example-3).md:29
msgid "文件架构："
msgstr "文件架构："

#: src/halo2/tmp/7-Range-Check-lookup(example-2).md:31
msgid ""
"```rust\n"
"├── range_check\n"
"│   ├── example2\n"
"│   │   └── table.rs  // lookup table\n"
"│   ├── example2.rs   // main config\n"
"```"
msgstr ""
"```rust\n"
"├── range_check\n"
"│   ├── example2\n"
"│   │   └── table.rs  // lookup table\n"
"│   ├── example2.rs   // main config\n"
"```"

#: src/halo2/tmp/7-Range-Check-lookup(example-2).md:38
msgid "调用链： ![](imgs/RangeCheck/Pasted%20image%2020230917215114.png)"
msgstr "调用链： ![](imgs/RangeCheck/Pasted%20image%2020230917215114.png)"

#: src/halo2/tmp/7-Range-Check-lookup(example-2).md:41
msgid ""
"impl relationship： ![](imgs/RangeCheck/Pasted%20image%2020230917220003.png)"
msgstr ""
"impl relationship： ![](imgs/RangeCheck/Pasted%20image%2020230917220003.png)"

#: src/halo2/tmp/7-Range-Check-lookup(example-2).md:44
msgid ""
"Draw the circuit： ![](imgs/RangeCheck/Pasted%20image%2020230917171123.png)"
msgstr ""
"Draw the circuit： ![](imgs/RangeCheck/Pasted%20image%2020230917171123.png)"

#: src/halo2/tmp/7-Range-Check-lookup(example-2).md:48
msgid "![\\[Range-Check-impl-relationship.excalidraw\\]\\]"
msgstr "![\\[Range-Check-impl-relationship.excalidraw\\]\\]"

#: src/halo2/tmp/7-Range-Check-lookup(example-2).md:49
#: src/halo2/tmp/8-Range-Check(example-3).md:64
msgid "lookup table - table.rs"
msgstr "lookup table - table.rs"

#: src/halo2/tmp/7-Range-Check-lookup(example-2).md:51
#: src/halo2/tmp/8-Range-Check(example-3).md:66
msgid "`src/range_check/example2/table.rs`"
msgstr "`src/range_check/example2/table.rs`"

#: src/halo2/tmp/7-Range-Check-lookup(example-2).md:52
#: src/halo2/tmp/8-Range-Check(example-3).md:67
msgid "struct RangeTableConfig"
msgstr "struct RangeTableConfig"

#: src/halo2/tmp/7-Range-Check-lookup(example-2).md:54
msgid ""
"```rust\n"
"use std::marker::PhantomData;\n"
"use halo2_proofs::{\n"
"    arithmetic::FieldExt,\n"
"    circuit::{Layouter, Value},\n"
"    plonk::{ConstraintSystem, Error, TableColumn},\n"
"};\n"
"\n"
"// pub(super) 仅当前模块的父模块中可见，但不对外公开\n"
"/// A lookup table of values from 0..RANGE.\n"
"#[derive(Debug, Clone)]\n"
"pub(super) struct RangeTableConfig<F: FieldExt, const RANGE: usize> {\n"
"    pub(super) value: TableColumn, \n"
"    // 这个 struct 中存在一个与类型 F 相关的关联，即使 struct 自身并没有实际"
"使用这个类型\n"
"    _marker: PhantomData<F>,\n"
"}\n"
"```"
msgstr ""
"```rust\n"
"use std::marker::PhantomData;\n"
"use halo2_proofs::{\n"
"    arithmetic::FieldExt,\n"
"    circuit::{Layouter, Value},\n"
"    plonk::{ConstraintSystem, Error, TableColumn},\n"
"};\n"
"\n"
"// pub(super) 仅当前模块的父模块中可见，但不对外公开\n"
"/// A lookup table of values from 0..RANGE.\n"
"#[derive(Debug, Clone)]\n"
"pub(super) struct RangeTableConfig<F: FieldExt, const RANGE: usize> {\n"
"    pub(super) value: TableColumn, \n"
"    // 这个 struct 中存在一个与类型 F 相关的关联，即使 struct 自身并没有实际"
"使用这个类型\n"
"    _marker: PhantomData<F>,\n"
"}\n"
"```"

#: src/halo2/tmp/7-Range-Check-lookup(example-2).md:73
msgid "泛型常量参数 `const N: usize`，来处理不同大小和类型的数组"
msgstr "泛型常量参数 `const N: usize`，来处理不同大小和类型的数组"

#: src/halo2/tmp/7-Range-Check-lookup(example-2).md:74
msgid "`meta.lookup_table_column();`  实际会返回一个 `fixed_column`"
msgstr "`meta.lookup_table_column();`  实际会返回一个 `fixed_column`"

#: src/halo2/tmp/7-Range-Check-lookup(example-2).md:76
msgid ""
"```rust\n"
"impl<F: FieldExt, const RANGE: usize> RangeTableConfig<F, RANGE> {\n"
"    pub(super) fn configure(meta: &mut ConstraintSystem<F>) -> Self {\n"
"        let value = meta.lookup_table_column(); // Define a  *Lookup "
"column*\n"
"        Self {\n"
"            value,\n"
"            _marker: PhantomData,\n"
"        }\n"
"    }\n"
"    // fn load ..\n"
"```"
msgstr ""
"```rust\n"
"impl<F: FieldExt, const RANGE: usize> RangeTableConfig<F, RANGE> {\n"
"    pub(super) fn configure(meta: &mut ConstraintSystem<F>) -> Self {\n"
"        let value = meta.lookup_table_column(); // Define a  *Lookup "
"column*\n"
"        Self {\n"
"            value,\n"
"            _marker: PhantomData,\n"
"        }\n"
"    }\n"
"    // fn load ..\n"
"```"

#: src/halo2/tmp/7-Range-Check-lookup(example-2).md:89
msgid "`halo2_proofs/src/plonk/circuit.rs` :"
msgstr "`halo2_proofs/src/plonk/circuit.rs` :"

#: src/halo2/tmp/7-Range-Check-lookup(example-2).md:90
msgid ""
"```rust\n"
"    /// Allocates a new fixed column that can be used in a lookup table.\n"
"    pub fn lookup_table_column(&mut self) -> TableColumn {\n"
"        TableColumn {\n"
"            inner: self.fixed_column(),\n"
"        }\n"
"    }\n"
"```"
msgstr ""
"```rust\n"
"    /// Allocates a new fixed column that can be used in a lookup table.\n"
"    pub fn lookup_table_column(&mut self) -> TableColumn {\n"
"        TableColumn {\n"
"            inner: self.fixed_column(),\n"
"        }\n"
"    }\n"
"```"

#: src/halo2/tmp/7-Range-Check-lookup(example-2).md:98
#: src/halo2/tmp/8-Range-Check(example-3).md:109
msgid "fn load()"
msgstr "fn load()"

#: src/halo2/tmp/7-Range-Check-lookup(example-2).md:100
msgid "`load()` assign the values to our fixed table"
msgstr "`load()` assign the values to our fixed table"

#: src/halo2/tmp/7-Range-Check-lookup(example-2).md:101
msgid ""
"`fn load()` 是一个在 `RangeTableConfig` 结构体上定义的方法，它用于 load (赋"
"值) 一个范围检查表。在这段代码中，范围检查表是一个  `0 ~ RANGE-1` 的 table "
msgstr ""
"`fn load()` 是一个在 `RangeTableConfig` 结构体上定义的方法，它用于 load (赋"
"值) 一个范围检查表。在这段代码中，范围检查表是一个  `0 ~ RANGE-1` 的 table "

#: src/halo2/tmp/7-Range-Check-lookup(example-2).md:103
msgid ""
"```rust\n"
"// load function assign the values to our fixed table\n"
"// This action is performed at key gen time\n"
"pub(super) fn load(&self, layouter: &mut impl Layouter<F>) -> Result<(), "
"Error> {\n"
"  // firstly, for some RANGE we want to load all the values and assign it to "
"the lookup table\n"
"  // assign_table is a special api that only works for lookup tables\n"
"  layouter.assign_table (\n"
"    || \"load range-check table\",\n"
"    |mut table| {\n"
"      // from row_0 to row_{RANGE-1}\n"
"      let mut offset = 0;\n"
"      for value in 0..RANGE {\n"
"        table.assign_cell(\n"
"          || \"num_bits\",\n"
"          self.value,\n"
"          offset,  // row num\n"
"          || Value::known(F::from(value as u64)), // assigned value\n"
"        )?;\n"
"        offset += 1;  // 循环向下赋值, 直到填满 RANGE 所需的所有列\n"
"      }\n"
"\n"
"      Ok(()) // return empty tuple (∵ Result<(), Error>)\n"
"    },\n"
"  )\n"
"}\n"
"```"
msgstr ""
"```rust\n"
"// load function assign the values to our fixed table\n"
"// This action is performed at key gen time\n"
"pub(super) fn load(&self, layouter: &mut impl Layouter<F>) -> Result<(), "
"Error> {\n"
"  // firstly, for some RANGE we want to load all the values and assign it to "
"the lookup table\n"
"  // assign_table is a special api that only works for lookup tables\n"
"  layouter.assign_table (\n"
"    || \"load range-check table\",\n"
"    |mut table| {\n"
"      // from row_0 to row_{RANGE-1}\n"
"      let mut offset = 0;\n"
"      for value in 0..RANGE {\n"
"        table.assign_cell(\n"
"          || \"num_bits\",\n"
"          self.value,\n"
"          offset,  // row num\n"
"          || Value::known(F::from(value as u64)), // assigned value\n"
"        )?;\n"
"        offset += 1;  // 循环向下赋值, 直到填满 RANGE 所需的所有列\n"
"      }\n"
"\n"
"      Ok(()) // return empty tuple (∵ Result<(), Error>)\n"
"    },\n"
"  )\n"
"}\n"
"```"

#: src/halo2/tmp/7-Range-Check-lookup(example-2).md:130
msgid "main - example2.rs"
msgstr "main - example2.rs"

#: src/halo2/tmp/7-Range-Check-lookup(example-2).md:134
msgid ""
"This helper checks that the value witnessed in a given cell is within a "
"given range."
msgstr ""
"This helper checks that the value witnessed in a given cell is within a "
"given range."

#: src/halo2/tmp/7-Range-Check-lookup(example-2).md:136
msgid ""
"Depending on the range, this helper uses either a range-check expression "
"(for small ranges), or a lookup (for large ranges)."
msgstr ""
"Depending on the range, this helper uses either a range-check expression "
"(for small ranges), or a lookup (for large ranges)."

#: src/halo2/tmp/7-Range-Check-lookup(example-2).md:137
msgid "above a certain `RANGE` we use a **lookup** argument , like "
msgstr "above a certain `RANGE` we use a **lookup** argument , like "

#: src/halo2/tmp/7-Range-Check-lookup(example-2).md:137
msgid " , enabled `q_range_check` & disabled `q_looup` Selector"
msgstr " , enabled `q_range_check` & disabled `q_looup` Selector"

#: src/halo2/tmp/7-Range-Check-lookup(example-2).md:138
msgid "below that `RANGE` we stick to the **simple** expression, like "
msgstr "below that `RANGE` we stick to the **simple** expression, like "

#: src/halo2/tmp/7-Range-Check-lookup(example-2).md:138
msgid " , enabled `q_looup` & disabled `q_range_check` Selector "
msgstr " , enabled `q_looup` & disabled `q_range_check` Selector "

#: src/halo2/tmp/7-Range-Check-lookup(example-2).md:147
msgid "在一个比较小的特定范围里，使用 range-check 连乘 expression"
msgstr "在一个比较小的特定范围里，使用 range-check 连乘 expression"

#: src/halo2/tmp/7-Range-Check-lookup(example-2).md:148
msgid "对于比较大的查找范围，使用 Lookup Table 查找表"
msgstr "对于比较大的查找范围，使用 Lookup Table 查找表"

#: src/halo2/tmp/7-Range-Check-lookup(example-2).md:152
msgid ""
"`RangeConstrained` : 由 `RangeCheckConfig` 生成的电路中的范围约束值 (range-"
"constrained value)，即用来表示一个范围受限的值。"
msgstr ""
"`RangeConstrained` : 由 `RangeCheckConfig` 生成的电路中的范围约束值 (range-"
"constrained value)，即用来表示一个范围受限的值。"

#: src/halo2/tmp/7-Range-Check-lookup(example-2).md:153
msgid "`RangeCheckConfig` :  main 电路的 Chip Config，用于配置和执行范围检查"
msgstr "`RangeCheckConfig` :  main 电路的 Chip Config，用于配置和执行范围检查"

#: src/halo2/tmp/7-Range-Check-lookup(example-2).md:154
msgid "`q_range_check` : Selector used for _small_ RANGE number."
msgstr "`q_range_check` : Selector used for _small_ RANGE number."

#: src/halo2/tmp/7-Range-Check-lookup(example-2).md:155
msgid "`q_lookup` : Selector used for _large_ RANGE number."
msgstr "`q_lookup` : Selector used for _large_ RANGE number."

#: src/halo2/tmp/7-Range-Check-lookup(example-2).md:156
msgid "value：an Advice column 用于存储 Private value without revealing it."
msgstr "value：an Advice column 用于存储 Private value without revealing it."

#: src/halo2/tmp/7-Range-Check-lookup(example-2).md:157
msgid "`table: RangeTableConfig<F, LOOKUP_RANGE>` : Lookup table"
msgstr "`table: RangeTableConfig<F, LOOKUP_RANGE>` : Lookup table"

#: src/halo2/tmp/7-Range-Check-lookup(example-2).md:159
msgid ""
"```rust\n"
"#[derive(Debug, Clone)]\n"
"/// A range-constrained value in the circuit produced by the "
"RangeCheckConfig.\n"
"struct RangeConstrained<F: FieldExt, const RANGE: "
"usize>(AssignedCell<Assigned<F>, F>);\n"
"\n"
"#[derive(Debug, Clone)]\n"
"struct RangeCheckConfig<F: FieldExt, const RANGE: usize, const LOOKUP_RANGE: "
"usize> {\n"
"    q_range_check: Selector,\n"
"    q_lookup: Selector,\n"
"    value: Column<Advice>,\n"
"    table: RangeTableConfig<F, LOOKUP_RANGE>, // Lookup table\n"
"}\n"
"```"
msgstr ""
"```rust\n"
"#[derive(Debug, Clone)]\n"
"/// A range-constrained value in the circuit produced by the "
"RangeCheckConfig.\n"
"struct RangeConstrained<F: FieldExt, const RANGE: "
"usize>(AssignedCell<Assigned<F>, F>);\n"
"\n"
"#[derive(Debug, Clone)]\n"
"struct RangeCheckConfig<F: FieldExt, const RANGE: usize, const LOOKUP_RANGE: "
"usize> {\n"
"    q_range_check: Selector,\n"
"    q_lookup: Selector,\n"
"    value: Column<Advice>,\n"
"    table: RangeTableConfig<F, LOOKUP_RANGE>, // Lookup table\n"
"}\n"
"```"

#: src/halo2/tmp/7-Range-Check-lookup(example-2).md:172
#: src/halo2/tmp/8-Range-Check(example-3).md:222
msgid "impl RangeCheckConfig"
msgstr "impl RangeCheckConfig"

#: src/halo2/tmp/7-Range-Check-lookup(example-2).md:176
msgid ""
"在 `query_selector` 即查询 Selector 时，无需指定显式 rotation，因为 selector "
"always get queried at the current row ."
msgstr ""
"在 `query_selector` 即查询 Selector 时，无需指定显式 rotation，因为 selector "
"always get queried at the current row ."

#: src/halo2/tmp/7-Range-Check-lookup(example-2).md:177
msgid ""
"在 `query_advice` 即查询 Advice 时，因为 advice col 是相对于 Selector 偏移量"
"(Selector offset)进行查询的，所以我们需要指定 relative rotation."
msgstr ""
"在 `query_advice` 即查询 Advice 时，因为 advice col 是相对于 Selector 偏移量"
"(Selector offset)进行查询的，所以我们需要指定 relative rotation."

#: src/halo2/tmp/7-Range-Check-lookup(example-2).md:178
msgid "不像之前我们在 `configure()` 函数内部声明 Advice column："
msgstr "不像之前我们在 `configure()` 函数内部声明 Advice column："

#: src/halo2/tmp/7-Range-Check-lookup(example-2).md:180
msgid ""
"```rust\n"
"pub fn configure(){\n"
"  let col_a = meta.advice_column();\n"
"  meta.enable_equality(col_a); // 在 `configure()` 内部声明 Advice column：\n"
"  /// ...\n"
"}\n"
"```"
msgstr ""
"```rust\n"
"pub fn configure(){\n"
"  let col_a = meta.advice_column();\n"
"  meta.enable_equality(col_a); // 在 `configure()` 内部声明 Advice column：\n"
"  /// ...\n"
"}\n"
"```"

#: src/halo2/tmp/7-Range-Check-lookup(example-2).md:188
msgid ""
"在本 `configure()` 中，我们传入 `value: Column<Advice>)` ，这样可以更方便地 "
"shared across multiple config ："
msgstr ""
"在本 `configure()` 中，我们传入 `value: Column<Advice>)` ，这样可以更方便地 "
"shared across multiple config ："

#: src/halo2/tmp/7-Range-Check-lookup(example-2).md:189
msgid ""
"```rust\n"
"// 在 impl Circuit for MyCircuit 中调用：\n"
"fn configure(meta: &mut ConstraintSystem<F>) -> Self::Config {\n"
"\tlet value = meta.advice_column(); // 声明 value 这个 Advice column\n"
"\tRangeCheckConfig::configure(meta, value) // 传入 value 这个 Advice column\n"
"}\n"
"```"
msgstr ""
"```rust\n"
"// 在 impl Circuit for MyCircuit 中调用：\n"
"fn configure(meta: &mut ConstraintSystem<F>) -> Self::Config {\n"
"\tlet value = meta.advice_column(); // 声明 value 这个 Advice column\n"
"\tRangeCheckConfig::configure(meta, value) // 传入 value 这个 Advice column\n"
"}\n"
"```"

#: src/halo2/tmp/7-Range-Check-lookup(example-2).md:197
msgid ""
"在 `meta.create_gate` 过程中，创建了 1 个约束门，赋值了 1 个 `special fixed "
"colum` ："
msgstr ""
"在 `meta.create_gate` 过程中，创建了 1 个约束门，赋值了 1 个 `special fixed "
"colum` ："

#: src/halo2/tmp/7-Range-Check-lookup(example-2).md:198
msgid ""
"`meta.create_gate(\"range check\"..` 门：使用 range-check 连乘 expression 限"
"制小范围数字"
msgstr ""
"`meta.create_gate(\"range check\"..` 门：使用 range-check 连乘 expression 限"
"制小范围数字"

#: src/halo2/tmp/7-Range-Check-lookup(example-2).md:199
msgid "`meta.lookup(|meta| { ..` 门：Fix 查找表，在一个更大的范围内进行约束 "
msgstr "`meta.lookup(|meta| { ..` 门：Fix 查找表，在一个更大的范围内进行约束 "

#: src/halo2/tmp/7-Range-Check-lookup(example-2).md:201
msgid ""
"```rust\n"
"// Write the gate for our range check Config\n"
"// It's good practive to pass advice columns to the config (rather than "
"creating it within the config)\n"
"// because these are very likely to be shared across multiple config\n"
"impl<F: FieldExt, const RANGE: usize, const LOOKUP_RANGE: usize>\n"
"  RangeCheckConfig<F, RANGE, LOOKUP_RANGE>\n"
"{\n"
"  // Remember that the configuration happen at keygen time.\n"
"  pub fn configure(meta: &mut ConstraintSystem<F>, value: Column<Advice>) -> "
"Self {\n"
"    // Toggles the range_check constraint\n"
"    let q_range_check = meta.selector();\n"
"    // Toggles the lookup argument\n"
"    let q_lookup = meta.complex_selector(); // for lookup table\n"
"    // configure a lookup table. and **pass it to config**\n"
"    let table = RangeTableConfig::configure(meta);\n"
"\n"
"    // later we will return this config.\n"
"    let config = Self {\n"
"      q_range_check,\n"
"      q_lookup,\n"
"      value,\n"
"      table: table.clone()\n"
"    }; \n"
"\n"
"    // 1. range-check gate\n"
"    meta.create_gate(\"range check\", |meta| {\n"
"      let q = meta.query_selector(q_range_check);\n"
"\n"
"      // note that we don't need to specify the rotation when querying the "
"`selctor`\n"
"      // That's because the selector always get queried at the current "
"row .\n"
"      // While the `advice columns` get queried relatively to the selector "
"offset, so we need to specify the relative rotation\n"
"      // 然而 advice col 是相对于选择器偏移量(Selector offset)进行查询的，所"
"以我们需要指定 relative rotation.\n"
"      let value = meta.query_advice(value, Rotation::cur());\n"
"\n"
"      // Given a range R and a value v, returns the multiplication "
"expression\n"
"      //  (v) * (1 - v) * (2 - v) * ... * (R - 1 - v)\n"
"      let range_check = |range: usize, value: Expression<F>| {\n"
"        assert!(range > 0);\n"
"        (1..range).fold(value.clone(), |expr, i| {\n"
"          expr * (Expression::Constant(F::from(i as u64)) - value.clone())\n"
"        })\n"
"      };\n"
"      // like the previously using \"vec![s * (a + b - c)]\",\n"
"      // multiplies the specified constraint by the selector, api 将指定的约"
"束 × Selector\n"
"      Constraints::with_selector(q, [(\"range check\", range_check(RANGE, "
"value))])\n"
"    });\n"
"    \n"
"    // 2. Lookup Gate  - range-check using lookup argument\n"
"    // 这个查找表将会在后面的范围检查中使用，以便在某些情况下使用查找表, 而不"
"是表达式来执行范围检查。\n"
"    meta.lookup(|meta| {\n"
"      let q_lookup = meta.query_selector(q_lookup);\n"
"      let value = meta.query_advice(value, Rotation::cur());\n"
"\n"
"      vec![(q_lookup * value, table.value)]\n"
"    });\n"
"\n"
"    config\n"
"  }\n"
"```"
msgstr ""
"```rust\n"
"// Write the gate for our range check Config\n"
"// It's good practive to pass advice columns to the config (rather than "
"creating it within the config)\n"
"// because these are very likely to be shared across multiple config\n"
"impl<F: FieldExt, const RANGE: usize, const LOOKUP_RANGE: usize>\n"
"  RangeCheckConfig<F, RANGE, LOOKUP_RANGE>\n"
"{\n"
"  // Remember that the configuration happen at keygen time.\n"
"  pub fn configure(meta: &mut ConstraintSystem<F>, value: Column<Advice>) -> "
"Self {\n"
"    // Toggles the range_check constraint\n"
"    let q_range_check = meta.selector();\n"
"    // Toggles the lookup argument\n"
"    let q_lookup = meta.complex_selector(); // for lookup table\n"
"    // configure a lookup table. and **pass it to config**\n"
"    let table = RangeTableConfig::configure(meta);\n"
"\n"
"    // later we will return this config.\n"
"    let config = Self {\n"
"      q_range_check,\n"
"      q_lookup,\n"
"      value,\n"
"      table: table.clone()\n"
"    }; \n"
"\n"
"    // 1. range-check gate\n"
"    meta.create_gate(\"range check\", |meta| {\n"
"      let q = meta.query_selector(q_range_check);\n"
"\n"
"      // note that we don't need to specify the rotation when querying the "
"`selctor`\n"
"      // That's because the selector always get queried at the current "
"row .\n"
"      // While the `advice columns` get queried relatively to the selector "
"offset, so we need to specify the relative rotation\n"
"      // 然而 advice col 是相对于选择器偏移量(Selector offset)进行查询的，所"
"以我们需要指定 relative rotation.\n"
"      let value = meta.query_advice(value, Rotation::cur());\n"
"\n"
"      // Given a range R and a value v, returns the multiplication "
"expression\n"
"      //  (v) * (1 - v) * (2 - v) * ... * (R - 1 - v)\n"
"      let range_check = |range: usize, value: Expression<F>| {\n"
"        assert!(range > 0);\n"
"        (1..range).fold(value.clone(), |expr, i| {\n"
"          expr * (Expression::Constant(F::from(i as u64)) - value.clone())\n"
"        })\n"
"      };\n"
"      // like the previously using \"vec![s * (a + b - c)]\",\n"
"      // multiplies the specified constraint by the selector, api 将指定的约"
"束 × Selector\n"
"      Constraints::with_selector(q, [(\"range check\", range_check(RANGE, "
"value))])\n"
"    });\n"
"    \n"
"    // 2. Lookup Gate  - range-check using lookup argument\n"
"    // 这个查找表将会在后面的范围检查中使用，以便在某些情况下使用查找表, 而不"
"是表达式来执行范围检查。\n"
"    meta.lookup(|meta| {\n"
"      let q_lookup = meta.query_selector(q_lookup);\n"
"      let value = meta.query_advice(value, Rotation::cur());\n"
"\n"
"      vec![(q_lookup * value, table.value)]\n"
"    });\n"
"\n"
"    config\n"
"  }\n"
"```"

#: src/halo2/tmp/7-Range-Check-lookup(example-2).md:261
msgid "如何协同？"
msgstr "如何协同？"

#: src/halo2/tmp/7-Range-Check-lookup(example-2).md:263
msgid ""
"```rust\n"
"// 1. 定义 Circuit\n"
"let circuit = MyCircuit::<Fp, RANGE, LOOKUP_RANGE> {\n"
"\tsimple_value: Value::known(Fp::from(i as u64).into()),\n"
"\tlookup_value: Value::known(Fp::from(j as u64).into()),\n"
"};\n"
"\n"
"// 2. 将 circuit 传入 MockProver::run()\n"
"// 3. run() 中  (halo2_proofs/src/dev.rs ) ：\n"
"// 3.1  ConcreteCircuit::configure\n"
"// 3.2  ConcreteCircuit::FloorPlanner::synthesize\n"
"impl<F: Field + Ord> MockProver<F> {\n"
"    /// Runs a synthetic keygen-and-prove operation on the given circuit,  \n"
"    /// collecting data about the constraints and their assignments.\n"
"    pub fn run<>(){\n"
"        let mut cs = ConstraintSystem::default();\n"
"        let config = ConcreteCircuit::configure(&mut cs);\n"
"        let cs = cs;\n"
"        // ...\n"
"        ConcreteCircuit::FloorPlanner::synthesize(&mut prover, circuit, "
"config, constants)?;\n"
"    }\n"
"```"
msgstr ""
"```rust\n"
"// 1. 定义 Circuit\n"
"let circuit = MyCircuit::<Fp, RANGE, LOOKUP_RANGE> {\n"
"\tsimple_value: Value::known(Fp::from(i as u64).into()),\n"
"\tlookup_value: Value::known(Fp::from(j as u64).into()),\n"
"};\n"
"\n"
"// 2. 将 circuit 传入 MockProver::run()\n"
"// 3. run() 中  (halo2_proofs/src/dev.rs ) ：\n"
"// 3.1  ConcreteCircuit::configure\n"
"// 3.2  ConcreteCircuit::FloorPlanner::synthesize\n"
"impl<F: Field + Ord> MockProver<F> {\n"
"    /// Runs a synthetic keygen-and-prove operation on the given circuit,  \n"
"    /// collecting data about the constraints and their assignments.\n"
"    pub fn run<>(){\n"
"        let mut cs = ConstraintSystem::default();\n"
"        let config = ConcreteCircuit::configure(&mut cs);\n"
"        let cs = cs;\n"
"        // ...\n"
"        ConcreteCircuit::FloorPlanner::synthesize(&mut prover, circuit, "
"config, constants)?;\n"
"    }\n"
"```"

#: src/halo2/tmp/7-Range-Check-lookup(example-2).md:286
msgid "在 `synthesize` 中："
msgstr "在 `synthesize` 中："

#: src/halo2/tmp/7-Range-Check-lookup(example-2).md:288
msgid "fn assign_simple()"
msgstr "fn assign_simple()"

#: src/halo2/tmp/7-Range-Check-lookup(example-2).md:290
msgid "used for _small_ value. We pass `value` and assign it on the offset."
msgstr "used for _small_ value. We pass `value` and assign it on the offset."

#: src/halo2/tmp/7-Range-Check-lookup(example-2).md:292
msgid ""
"```rust\n"
"// pass `value` and assign it on the offset.\n"
"pub fn assign_simple(\n"
"  &self,\n"
"  mut layouter: impl Layouter<F>,\n"
"  value: Value<Assigned<F>>,\n"
") -> Result<RangeConstrained<F, RANGE>, Error> {\n"
"  layouter.assign_region(\n"
"    || \"Assign value for simple range check\",\n"
"    |mut region| {\n"
"      let offset = 0;\n"
"\n"
"      // Enable q_range_check Selector.\n"
"      self.q_range_check.enable(&mut region, offset)?;\n"
"\n"
"      // Assign `value` \n"
"      region\n"
"        .assign_advice(\n"
"          || \"value\", \n"
"          self.value,  // current col ?\n"
"          offset, \n"
"          || value\n"
"        ).map(RangeConstrained) // 将结果转化为 RangeConstrained 类型\n"
"    },\n"
"  )\n"
"}\n"
"```"
msgstr ""
"```rust\n"
"// pass `value` and assign it on the offset.\n"
"pub fn assign_simple(\n"
"  &self,\n"
"  mut layouter: impl Layouter<F>,\n"
"  value: Value<Assigned<F>>,\n"
") -> Result<RangeConstrained<F, RANGE>, Error> {\n"
"  layouter.assign_region(\n"
"    || \"Assign value for simple range check\",\n"
"    |mut region| {\n"
"      let offset = 0;\n"
"\n"
"      // Enable q_range_check Selector.\n"
"      self.q_range_check.enable(&mut region, offset)?;\n"
"\n"
"      // Assign `value` \n"
"      region\n"
"        .assign_advice(\n"
"          || \"value\", \n"
"          self.value,  // current col ?\n"
"          offset, \n"
"          || value\n"
"        ).map(RangeConstrained) // 将结果转化为 RangeConstrained 类型\n"
"    },\n"
"  )\n"
"}\n"
"```"

#: src/halo2/tmp/7-Range-Check-lookup(example-2).md:320
msgid "fn assign_lookup()"
msgstr "fn assign_lookup()"

#: src/halo2/tmp/7-Range-Check-lookup(example-2).md:322
msgid ""
"```rust\n"
"pub fn assign_lookup(\n"
"  &self,\n"
"  mut layouter: impl Layouter<F>,\n"
"  value: Value<Assigned<F>>,\n"
") -> Result<RangeConstrained<F, LOOKUP_RANGE>, Error> {\n"
"  layouter.assign_region(\n"
"    || \"Assign value for lookup range check\",\n"
"    |mut region| {\n"
"      let offset = 0;\n"
"\n"
"      // Enable q_lookup, 告诉约束系统在该区域应用这个选择器\n"
"      self.q_lookup.enable(&mut region, offset)?;\n"
"\n"
"      // Assign value\n"
"      region\n"
"        .assign_advice(|| \"value\", self.value, offset, || value)\n"
"        .map(RangeConstrained)\n"
"      // assign_advice() 将 advice col 与值 value 关联，\n"
"      // 并将结果封装在 RangeConstrained struct 中\n"
"    },\n"
"  )}\n"
"```"
msgstr ""
"```rust\n"
"pub fn assign_lookup(\n"
"  &self,\n"
"  mut layouter: impl Layouter<F>,\n"
"  value: Value<Assigned<F>>,\n"
") -> Result<RangeConstrained<F, LOOKUP_RANGE>, Error> {\n"
"  layouter.assign_region(\n"
"    || \"Assign value for lookup range check\",\n"
"    |mut region| {\n"
"      let offset = 0;\n"
"\n"
"      // Enable q_lookup, 告诉约束系统在该区域应用这个选择器\n"
"      self.q_lookup.enable(&mut region, offset)?;\n"
"\n"
"      // Assign value\n"
"      region\n"
"        .assign_advice(|| \"value\", self.value, offset, || value)\n"
"        .map(RangeConstrained)\n"
"      // assign_advice() 将 advice col 与值 value 关联，\n"
"      // 并将结果封装在 RangeConstrained struct 中\n"
"    },\n"
"  )}\n"
"```"

#: src/halo2/tmp/7-Range-Check-lookup(example-2).md:346
msgid "`assign_simple` & `assign_lookup` 这 2 个函数的区别："
msgstr "`assign_simple` & `assign_lookup` 这 2 个函数的区别："

#: src/halo2/tmp/7-Range-Check-lookup(example-2).md:348
msgid ""
"```rust\n"
"1. 泛型常量\n"
" - RANGE\n"
" - LOOKUP_RANGE\n"
"2. Selector enabled:\n"
" - q_range_check // for *small* RANGE number.\n"
" - q_lookup      // for *large* RANGE number.\n"
"\n"
"region.assign_advic 部分是一样的\n"
"```"
msgstr ""
"```rust\n"
"1. 泛型常量\n"
" - RANGE\n"
" - LOOKUP_RANGE\n"
"2. Selector enabled:\n"
" - q_range_check // for *small* RANGE number.\n"
" - q_lookup      // for *large* RANGE number.\n"
"\n"
"region.assign_advic 部分是一样的\n"
"```"

#: src/halo2/tmp/7-Range-Check-lookup(example-2).md:359
msgid "Test Lookup table"
msgstr "Test Lookup table"

#: src/halo2/tmp/7-Range-Check-lookup(example-2).md:361
msgid ""
"```rust\n"
"// [cfg(test)]是一个条件编译属性，意思是只有在执行 test 时，此模块代码才会被"
"编译和执行\n"
"// 好处是，当你在普通的编译或生产环境下构建你的程序时，测试代码不会被包括进"
"去，\n"
"// 从而减少了编译时间和生成的可执行文件的大小。\n"
"#[cfg(test)]\n"
"mod tests {\n"
"    use halo2_proofs::{\n"
"        circuit::floor_planner::V1,\n"
"        dev::{FailureLocation, MockProver, VerifyFailure},\n"
"        pasta::Fp,\n"
"        plonk::{Any, Circuit},\n"
"    };\n"
"\n"
"    use super::*;\n"
"    //// .....\n"
"```"
msgstr ""
"```rust\n"
"// [cfg(test)]是一个条件编译属性，意思是只有在执行 test 时，此模块代码才会被"
"编译和执行\n"
"// 好处是，当你在普通的编译或生产环境下构建你的程序时，测试代码不会被包括进"
"去，\n"
"// 从而减少了编译时间和生成的可执行文件的大小。\n"
"#[cfg(test)]\n"
"mod tests {\n"
"    use halo2_proofs::{\n"
"        circuit::floor_planner::V1,\n"
"        dev::{FailureLocation, MockProver, VerifyFailure},\n"
"        pasta::Fp,\n"
"        plonk::{Any, Circuit},\n"
"    };\n"
"\n"
"    use super::*;\n"
"    //// .....\n"
"```"

#: src/halo2/tmp/7-Range-Check-lookup(example-2).md:377
msgid "struct MyCircuit"
msgstr "struct MyCircuit"

#: src/halo2/tmp/7-Range-Check-lookup(example-2).md:379
msgid "`MyCircuit`  可以处理 2 种类型的值 : "
msgstr "`MyCircuit`  可以处理 2 种类型的值 : "

#: src/halo2/tmp/7-Range-Check-lookup(example-2).md:380
msgid "`value` :  这里的 value 的约束和赋值由 `assign_simple()` 完成"
msgstr "`value` :  这里的 value 的约束和赋值由 `assign_simple()` 完成"

#: src/halo2/tmp/7-Range-Check-lookup(example-2).md:381
msgid "`lookup_value` : 它的约束和赋值由 `assign_lookup()` 完成"
msgstr "`lookup_value` : 它的约束和赋值由 `assign_lookup()` 完成"

#: src/halo2/tmp/7-Range-Check-lookup(example-2).md:383
msgid ""
"```rust\n"
"#[derive(Default)]\n"
"struct MyCircuit<F: FieldExt, const RANGE: usize, const LOOKUP_RANGE: usize> "
"{\n"
"\tvalue: Value<Assigned<F>>,\n"
"\tlookup_value: Value<Assigned<F>>,\n"
"}\n"
"\n"
"impl<F: FieldExt, const RANGE: usize, const LOOKUP_RANGE: usize> Circuit<F>\n"
"\tfor MyCircuit<F, RANGE, LOOKUP_RANGE> {\n"
"\ttype Config = RangeCheckConfig<F, RANGE, LOOKUP_RANGE>;\n"
"\ttype FloorPlanner = V1;\n"
"\n"
"\tfn without_witnesses(&self) -> Self { Self::default() }\n"
"\n"
"\tfn configure(meta: &mut ConstraintSystem<F>) -> Self::Config {\n"
"\t\tlet value = meta.advice_column();\n"
"\t\tRangeCheckConfig::configure(meta, value)\n"
"\t}\n"
"    // fn synthesize\n"
"```"
msgstr ""
"```rust\n"
"#[derive(Default)]\n"
"struct MyCircuit<F: FieldExt, const RANGE: usize, const LOOKUP_RANGE: usize> "
"{\n"
"\tvalue: Value<Assigned<F>>,\n"
"\tlookup_value: Value<Assigned<F>>,\n"
"}\n"
"\n"
"impl<F: FieldExt, const RANGE: usize, const LOOKUP_RANGE: usize> Circuit<F>\n"
"\tfor MyCircuit<F, RANGE, LOOKUP_RANGE> {\n"
"\ttype Config = RangeCheckConfig<F, RANGE, LOOKUP_RANGE>;\n"
"\ttype FloorPlanner = V1;\n"
"\n"
"\tfn without_witnesses(&self) -> Self { Self::default() }\n"
"\n"
"\tfn configure(meta: &mut ConstraintSystem<F>) -> Self::Config {\n"
"\t\tlet value = meta.advice_column();\n"
"\t\tRangeCheckConfig::configure(meta, value)\n"
"\t}\n"
"    // fn synthesize\n"
"```"

#: src/halo2/tmp/7-Range-Check-lookup(example-2).md:406
msgid ""
"```rust\n"
"fn synthesize(\n"
"    &self,\n"
"    config: Self::Config,\n"
"    mut layouter: impl Layouter<F>,\n"
") -> Result<(), Error> {\n"
"    // load lookup table.\n"
"    config.table.load(&mut layouter)?;\n"
"\n"
"    config.assign_simple(layouter.namespace(\n"
"        || \"Assign simple(smaller) value\"), \n"
"        self.value\n"
"    )?;\n"
"    config.assign_lookup(\n"
"        layouter.namespace(|| \"Assign lookup(larger) value\"),\n"
"        self.lookup_value,\n"
"    )?;\n"
"    Ok(())\n"
"}  }\n"
"```"
msgstr ""
"```rust\n"
"fn synthesize(\n"
"    &self,\n"
"    config: Self::Config,\n"
"    mut layouter: impl Layouter<F>,\n"
") -> Result<(), Error> {\n"
"    // load lookup table.\n"
"    config.table.load(&mut layouter)?;\n"
"\n"
"    config.assign_simple(layouter.namespace(\n"
"        || \"Assign simple(smaller) value\"), \n"
"        self.value\n"
"    )?;\n"
"    config.assign_lookup(\n"
"        layouter.namespace(|| \"Assign lookup(larger) value\"),\n"
"        self.lookup_value,\n"
"    )?;\n"
"    Ok(())\n"
"}  }\n"
"```"

#: src/halo2/tmp/7-Range-Check-lookup(example-2).md:428
msgid "test_range_check_2"
msgstr "test_range_check_2"

#: src/halo2/tmp/7-Range-Check-lookup(example-2).md:430
msgid "在 `i, j` 的双重循环里: "
msgstr "在 `i, j` 的双重循环里: "

#: src/halo2/tmp/7-Range-Check-lookup(example-2).md:431
msgid "`MyCircuit{ 1,10 }`"
msgstr "`MyCircuit{ 1,10 }`"

#: src/halo2/tmp/7-Range-Check-lookup(example-2).md:432
msgid "`MyCircuit{ 7,16 }`"
msgstr "`MyCircuit{ 7,16 }`"

#: src/halo2/tmp/7-Range-Check-lookup(example-2).md:433
msgid "`MyCircuit{ 5,100 }`"
msgstr "`MyCircuit{ 5,100 }`"

#: src/halo2/tmp/7-Range-Check-lookup(example-2).md:434
msgid "`MyCircuit{ 7,255 }` ..."
msgstr "`MyCircuit{ 7,255 }` ..."

#: src/halo2/tmp/7-Range-Check-lookup(example-2).md:436
msgid "like :  ![](imgs/RangeCheck/Pasted%20image%2020230917215114.png)"
msgstr "like :  ![](imgs/RangeCheck/Pasted%20image%2020230917215114.png)"

#: src/halo2/tmp/7-Range-Check-lookup(example-2).md:439
msgid ""
"```rust\n"
"#[test]\n"
"fn test_range_check_2() {\n"
"  // in every circuit, we opt to reserve the last few rows of each advice "
"cols \n"
"  // for random values which are blinding factors(for zk), so `k` is always "
"larger.\n"
"  let k = 9;\n"
"  const RANGE: usize = 8; // 3-bit value\n"
"  const LOOKUP_RANGE: usize = 256; // 2^8, 8-bit value\n"
"\n"
"  // Successful cases\n"
"  for i in 0..RANGE {\n"
"    for j in 0..LOOKUP_RANGE {\n"
"      // According to the <i, j> to construct different Circuit.\n"
"      //MyCircuit::<Fp,.. ,..> : 指定 Constant 泛型的值.\n"
"      let circuit = MyCircuit::<Fp, RANGE, LOOKUP_RANGE> {\n"
"        simple_value: Value::known(Fp::from(i as u64).into()),\n"
"        lookup_value: Value::known(Fp::from(j as u64).into()),\n"
"      };\n"
"\n"
"      let prover = MockProver::run(k, &circuit, vec![]).unwrap();\n"
"      prover.assert_satisfied();\n"
"    }\n"
"  }\n"
"```"
msgstr ""
"```rust\n"
"#[test]\n"
"fn test_range_check_2() {\n"
"  // in every circuit, we opt to reserve the last few rows of each advice "
"cols \n"
"  // for random values which are blinding factors(for zk), so `k` is always "
"larger.\n"
"  let k = 9;\n"
"  const RANGE: usize = 8; // 3-bit value\n"
"  const LOOKUP_RANGE: usize = 256; // 2^8, 8-bit value\n"
"\n"
"  // Successful cases\n"
"  for i in 0..RANGE {\n"
"    for j in 0..LOOKUP_RANGE {\n"
"      // According to the <i, j> to construct different Circuit.\n"
"      //MyCircuit::<Fp,.. ,..> : 指定 Constant 泛型的值.\n"
"      let circuit = MyCircuit::<Fp, RANGE, LOOKUP_RANGE> {\n"
"        simple_value: Value::known(Fp::from(i as u64).into()),\n"
"        lookup_value: Value::known(Fp::from(j as u64).into()),\n"
"      };\n"
"\n"
"      let prover = MockProver::run(k, &circuit, vec![]).unwrap();\n"
"      prover.assert_satisfied();\n"
"    }\n"
"  }\n"
"```"

#: src/halo2/tmp/7-Range-Check-lookup(example-2).md:463
#: src/halo2/tmp/Zordle.md:379
msgid "illustration"
msgstr "illustration"

#: src/halo2/tmp/7-Range-Check-lookup(example-2).md:465
msgid "![](imgs/RangeCheck/Pasted%20image%2020230917171123.png)"
msgstr "![](imgs/RangeCheck/Pasted%20image%2020230917171123.png)"

#: src/halo2/tmp/8-Range-Check(example-3).md:5 src/halo2/tmp/9-decomposed.md:5
msgid ""
"references: https://learn.0xparc.org/materials/halo2/learning-group-1/"
"exercise-3"
msgstr ""
"references: https://learn.0xparc.org/materials/halo2/learning-group-1/"
"exercise-3"

#: src/halo2/tmp/8-Range-Check(example-3).md:9
msgid "[Pre-requisites](#pre-requisites)"
msgstr "[Pre-requisites](#pre-requisites)"

#: src/halo2/tmp/8-Range-Check(example-3).md:11
msgid "[struct RangeTableConfig](#struct-rangetableconfig)"
msgstr "[struct RangeTableConfig](#struct-rangetableconfig)"

#: src/halo2/tmp/8-Range-Check(example-3).md:12
msgid "[impl RangeTableConfig {..](#impl-rangetableconfig-)"
msgstr "[impl RangeTableConfig {..](#impl-rangetableconfig-)"

#: src/halo2/tmp/8-Range-Check(example-3).md:13
msgid "[main - example3.rs](#main---example3rs)"
msgstr "[main - example3.rs](#main---example3rs)"

#: src/halo2/tmp/8-Range-Check(example-3).md:23
msgid ""
"we can look up smaller ranges, for example our lookup table right now is "
"eight bits, but using a `single lookup table` we can constrain a one bit "
"value,  or two bit value,  3-bit value and we don't always have to be "
"constraining the maximum range of 8-bits."
msgstr ""
"we can look up smaller ranges, for example our lookup table right now is "
"eight bits, but using a `single lookup table` we can constrain a one bit "
"value,  or two bit value,  3-bit value and we don't always have to be "
"constraining the maximum range of 8-bits."

#: src/halo2/tmp/8-Range-Check(example-3).md:25
msgid "our range is 8 bits, but we want to perform a range check on 4 bits."
msgstr "our range is 8 bits, but we want to perform a range check on 4 bits."

#: src/halo2/tmp/8-Range-Check(example-3).md:30
msgid ""
"```rust\n"
"├── range_check\n"
"│   ├── example3\n"
"│   │   └── table.rs  // lookup table\n"
"│   ├── example3.rs   // main config\n"
"```"
msgstr ""
"```rust\n"
"├── range_check\n"
"│   ├── example3\n"
"│   │   └── table.rs  // lookup table\n"
"│   ├── example3.rs   // main config\n"
"```"

#: src/halo2/tmp/8-Range-Check(example-3).md:37
msgid "本部分代码的更新："
msgstr "本部分代码的更新："

#: src/halo2/tmp/8-Range-Check(example-3).md:38
msgid "Table："
msgstr "Table："

#: src/halo2/tmp/8-Range-Check(example-3).md:39
msgid "`num_bits: TableColumn`  RangeTableConfig 中新增一列"
msgstr "`num_bits: TableColumn`  RangeTableConfig 中新增一列"

#: src/halo2/tmp/8-Range-Check(example-3).md:40
msgid "Pre-requisites"
msgstr "Pre-requisites"

#: src/halo2/tmp/8-Range-Check(example-3).md:42
msgid "`value in (1 << (num_bits - 1))..(1 << num_bits)` 这个范围的意思是？"
msgstr "`value in (1 << (num_bits - 1))..(1 << num_bits)` 这个范围的意思是？"

#: src/halo2/tmp/8-Range-Check(example-3).md:44
msgid ""
"这个范围是用来确定在给定的二进制位数`num_bits`下，一个数字可以表示的最小值和"
"最大值"
msgstr ""
"这个范围是用来确定在给定的二进制位数`num_bits`下，一个数字可以表示的最小值和"
"最大值"

#: src/halo2/tmp/8-Range-Check(example-3).md:45
msgid ""
"**(1 \\<\\< (num_bits - 1))**: 这是取 2 的`num_bits - 1`次幂。在计算机编程"
"中，`<<` 是左移操作，它等同于将 1 乘以 2 的给定次幂。结果是该位数的最小值。"
msgstr ""
"**(1 \\<\\< (num_bits - 1))**: 这是取 2 的`num_bits - 1`次幂。在计算机编程"
"中，`<<` 是左移操作，它等同于将 1 乘以 2 的给定次幂。结果是该位数的最小值。"

#: src/halo2/tmp/8-Range-Check(example-3).md:46
msgid ""
"**(1 \\<\\< num_bits)**: 这是取 2 的`num_bits`次幂，代表了在给定的`num_bits`"
"位数下的最大值 +1 （因为范围的上限是不包含的）"
msgstr ""
"**(1 \\<\\< num_bits)**: 这是取 2 的`num_bits`次幂，代表了在给定的`num_bits`"
"位数下的最大值 +1 （因为范围的上限是不包含的）"

#: src/halo2/tmp/8-Range-Check(example-3).md:48
msgid "如果`num_bits = 3`:"
msgstr "如果`num_bits = 3`:"

#: src/halo2/tmp/8-Range-Check(example-3).md:49
msgid "最小值是 \\`1 \\<\\< (3-1) = 4"
msgstr "最小值是 \\`1 \\<\\< (3-1) = 4"

#: src/halo2/tmp/8-Range-Check(example-3).md:50
msgid "`1 << 2 ` 即 1 左移 2 位 : "
msgstr "`1 << 2 ` 即 1 左移 2 位 : "

#: src/halo2/tmp/8-Range-Check(example-3).md:51
msgid "当我们左移一位（`1 << 1`）时， `0001` 变成了 `0010`  即 `2 `"
msgstr "当我们左移一位（`1 << 1`）时， `0001` 变成了 `0010`  即 `2 `"

#: src/halo2/tmp/8-Range-Check(example-3).md:52
msgid "当我们左移二位（`1 << 2`）时， `0001` 变成了 `0100` 即 `4`"
msgstr "当我们左移二位（`1 << 2`）时， `0001` 变成了 `0100` 即 `4`"

#: src/halo2/tmp/8-Range-Check(example-3).md:53
msgid "当我们左移三位（`1 << 3`）时， `0001` 变成了 `1000` 即 `8`"
msgstr "当我们左移三位（`1 << 3`）时， `0001` 变成了 `1000` 即 `8`"

#: src/halo2/tmp/8-Range-Check(example-3).md:54
msgid ""
"上限值是 `1 << 3` = 8 (不含 8) 因此，该范围表示的数字集合为 `{4, 5, 6, 7}`"
msgstr ""
"上限值是 `1 << 3` = 8 (不含 8) 因此，该范围表示的数字集合为 `{4, 5, 6, 7}`"

#: src/halo2/tmp/8-Range-Check(example-3).md:55
msgid "eg.`100` 是 4 , `111` 是 `4+2+1 = 7 `"
msgstr "eg.`100` 是 4 , `111` 是 `4+2+1 = 7 `"

#: src/halo2/tmp/8-Range-Check(example-3).md:57
#: src/halo2/tmp/8-Range-Check(example-3).md:120
msgid "如果`num_bits = 4`:"
msgstr "如果`num_bits = 4`:"

#: src/halo2/tmp/8-Range-Check(example-3).md:58
#: src/halo2/tmp/8-Range-Check(example-3).md:121
msgid "最小值是 `1 << (4-1)`s = 8"
msgstr "最小值是 `1 << (4-1)`s = 8"

#: src/halo2/tmp/8-Range-Check(example-3).md:59
#: src/halo2/tmp/8-Range-Check(example-3).md:122
msgid ""
"上限值是 `1 << 4` = 16(不含)   因此，该范围表示的数字集合为 `{8, 9, 10, ..., "
"15}`"
msgstr ""
"上限值是 `1 << 4` = 16(不含)   因此，该范围表示的数字集合为 `{8, 9, 10, ..., "
"15}`"

#: src/halo2/tmp/8-Range-Check(example-3).md:60
#: src/halo2/tmp/8-Range-Check(example-3).md:123
msgid "eg. `1000` 是 8 , `1111` 是  `8+4+2+1 = 15 `"
msgstr "eg. `1000` 是 8 , `1111` 是  `8+4+2+1 = 15 `"

#: src/halo2/tmp/8-Range-Check(example-3).md:62
msgid ""
"这个范围用于确保在给定的 `num_bits` 下，他所能表示的数字的值在预期的最小和最"
"大之间"
msgstr ""
"这个范围用于确保在给定的 `num_bits` 下，他所能表示的数字的值在预期的最小和最"
"大之间"

#: src/halo2/tmp/8-Range-Check(example-3).md:69
msgid "对比 `example-2` 和 `example-3` ： "
msgstr "对比 `example-2` 和 `example-3` ： "

#: src/halo2/tmp/8-Range-Check(example-3).md:71
msgid ""
"```rust\n"
"// example 2\n"
"pub(super) struct RangeTableConfig<F: FieldExt, const RANGE: usize> {\n"
"    pub(super) value: TableColumn, \n"
"    _marker: PhantomData<F>,\n"
"}\n"
"\n"
"// example 3\n"
"/// A lookup table of values up to RANGE\n"
"/// e.g. RANGE = 256, values = [0..255]\n"
"/// This table is tagged by an index `k`, where `k` is the number of bits of "
"the element in the `value` column.\n"
"pub(super) struct RangeTableConfig<F: FieldExt, const NUM_BITS: usize, const "
"RANGE: usize> {\n"
"    pub(super) num_bits: TableColumn, // tag for our table.\n"
"    pub(super) value: TableColumn,\n"
"    _marker: PhantomData<F>,\n"
"}\n"
"```"
msgstr ""
"```rust\n"
"// example 2\n"
"pub(super) struct RangeTableConfig<F: FieldExt, const RANGE: usize> {\n"
"    pub(super) value: TableColumn, \n"
"    _marker: PhantomData<F>,\n"
"}\n"
"\n"
"// example 3\n"
"/// A lookup table of values up to RANGE\n"
"/// e.g. RANGE = 256, values = [0..255]\n"
"/// This table is tagged by an index `k`, where `k` is the number of bits of "
"the element in the `value` column.\n"
"pub(super) struct RangeTableConfig<F: FieldExt, const NUM_BITS: usize, const "
"RANGE: usize> {\n"
"    pub(super) num_bits: TableColumn, // tag for our table.\n"
"    pub(super) value: TableColumn,\n"
"    _marker: PhantomData<F>,\n"
"}\n"
"```"

#: src/halo2/tmp/8-Range-Check(example-3).md:89
msgid "impl RangeTableConfig {.."
msgstr "impl RangeTableConfig {.."

#: src/halo2/tmp/8-Range-Check(example-3).md:93
msgid ""
"```rust\n"
"impl<F: PrimeField, const NUM_BITS: usize, const RANGE: usize> "
"RangeTableConfig<F, NUM_BITS, RANGE> {\n"
"    pub(super) fn configure(meta: &mut ConstraintSystem<F>) -> Self {\n"
"        assert_eq!(1 << NUM_BITS, RANGE);  // \"1\" 左移一位 NUM_BITS 位, 即"
"变大 2^NUM_BITS 倍\n"
"\n"
"        let num_bits = meta.lookup_table_column();\n"
"        let value = meta.lookup_table_column();\n"
"\n"
"        Self {\n"
"            num_bits,\n"
"            value,\n"
"            _marker: PhantomData,\n"
"        }\n"
"    }\n"
"```"
msgstr ""
"```rust\n"
"impl<F: PrimeField, const NUM_BITS: usize, const RANGE: usize> "
"RangeTableConfig<F, NUM_BITS, RANGE> {\n"
"    pub(super) fn configure(meta: &mut ConstraintSystem<F>) -> Self {\n"
"        assert_eq!(1 << NUM_BITS, RANGE);  // \"1\" 左移一位 NUM_BITS 位, 即"
"变大 2^NUM_BITS 倍\n"
"\n"
"        let num_bits = meta.lookup_table_column();\n"
"        let value = meta.lookup_table_column();\n"
"\n"
"        Self {\n"
"            num_bits,\n"
"            value,\n"
"            _marker: PhantomData,\n"
"        }\n"
"    }\n"
"```"

#: src/halo2/tmp/8-Range-Check(example-3).md:111
msgid "赋值 2 列 lookup column 的首行为：`(num_bits = 1, value = 0)`"
msgstr "赋值 2 列 lookup column 的首行为：`(num_bits = 1, value = 0)`"

#: src/halo2/tmp/8-Range-Check(example-3).md:112
msgid "`0` 的二进制编码为 `0`，占 1 位"
msgstr "`0` 的二进制编码为 `0`，占 1 位"

#: src/halo2/tmp/8-Range-Check(example-3).md:113
msgid "后面就是在给定 NUM_BITS 下能表示的上下界中赋值："
msgstr "后面就是在给定 NUM_BITS 下能表示的上下界中赋值："

#: src/halo2/tmp/8-Range-Check(example-3).md:114
msgid ""
"如 `value=2` ，那么 `num_bits=2` （∵ 2 的二进制表示是 `10` ，有 2 位）；"
msgstr ""
"如 `value=2` ，那么 `num_bits=2` （∵ 2 的二进制表示是 `10` ，有 2 位）；"

#: src/halo2/tmp/8-Range-Check(example-3).md:115
msgid "如 `value=8`，那么`num_bits=4`（∵ 8 的二进制表示是 `1000`，有 4 位）。"
msgstr "如 `value=8`，那么`num_bits=4`（∵ 8 的二进制表示是 `1000`，有 4 位）。"

#: src/halo2/tmp/8-Range-Check(example-3).md:116
msgid "简而言之，`num_bits` 描述了表示 `value` 所需的最小位数。"
msgstr "简而言之，`num_bits` 描述了表示 `value` 所需的最小位数。"

#: src/halo2/tmp/8-Range-Check(example-3).md:118
msgid ""
"前面也提到，这个范围用于确保在给定的 `num_bits` 下，数字的值在预期的最小和最"
"大之间："
msgstr ""
"前面也提到，这个范围用于确保在给定的 `num_bits` 下，数字的值在预期的最小和最"
"大之间："

#: src/halo2/tmp/8-Range-Check(example-3).md:125
msgid ""
"```rust\n"
"pub(super) fn load(&self, layouter: &mut impl Layouter<F>) -> Result<(), "
"Error> {\n"
"\tlayouter.assign_table(\n"
"\t\t|| \"load range-check table\",\n"
"\t\t|mut table| {\n"
"\t\t\tlet mut offset = 0;\n"
"\n"
"\t\t\t// Assign (num_bits = 1, value = 0), 2 列都是 lookup columns.\n"
"\t\t\t// 这部分是赋值首行, 为 num_bits 和 value 分配了其首个值，即 1 和 0, 方"
"便下面累加\n"
"\t\t\t{\n"
"\t\t\t\ttable.assign_cell(\n"
"\t\t\t\t\t|| \"assign num_bits\",\n"
"\t\t\t\t\tself.num_bits,\n"
"\t\t\t\t\toffset,\n"
"\t\t\t\t\t|| Value::known(F::ONE),\n"
"\t\t\t\t)?;\n"
"\t\t\t\ttable.assign_cell(\n"
"\t\t\t\t\t|| \"assign value\",\n"
"\t\t\t\t\tself.value,\n"
"\t\t\t\t\toffset,\n"
"\t\t\t\t\t|| Value::known(F::ZERO),\n"
"\t\t\t\t)?;\n"
"\n"
"\t\t\t\toffset += 1;\n"
"\t\t\t}\n"
"\n"
"\t\t\t// (1 << (num_bits_ - 1))..(1 << num_bits_) : 在给定的 NUM_BITS 下的 "
"min & max value.\n"
"\t\t\t//   num_bits_ 标识了 value 所占的位数,比如 213\n"
"\t\t\t//   value_ 则是实际赋值(约束)到电路里的实际 Private value\n"
"\t\t\tfor num_bits_ in 1..=NUM_BITS {\n"
"\t\t\t\tfor value_ in (1 << (num_bits_ - 1))..(1 << num_bits_) {\n"
"\t\t\t\t\ttable.assign_cell(\n"
"\t\t\t\t\t\t|| \"assign num_bits\",\n"
"\t\t\t\t\t\tself.num_bits,\n"
"\t\t\t\t\t\toffset,\n"
"\t\t\t\t\t\t|| Value::known(F::from(num_bits_ as u64)),\n"
"\t\t\t\t\t)?;\n"
"\t\t\t\t\ttable.assign_cell(\n"
"\t\t\t\t\t\t|| \"assign value\",\n"
"\t\t\t\t\t\tself.value,\n"
"\t\t\t\t\t\toffset,\n"
"\t\t\t\t\t\t|| Value::known(F::from(value_ as u64)),\n"
"\t\t\t\t\t)?;\n"
"\t\t\t\t\toffset += 1;\n"
"\t\t\t\t}\n"
"\t\t\t}\n"
"\t\t\tOk(())\n"
"\t\t},\n"
"\t)\n"
"} }\n"
"```"
msgstr ""
"```rust\n"
"pub(super) fn load(&self, layouter: &mut impl Layouter<F>) -> Result<(), "
"Error> {\n"
"\tlayouter.assign_table(\n"
"\t\t|| \"load range-check table\",\n"
"\t\t|mut table| {\n"
"\t\t\tlet mut offset = 0;\n"
"\n"
"\t\t\t// Assign (num_bits = 1, value = 0), 2 列都是 lookup columns.\n"
"\t\t\t// 这部分是赋值首行, 为 num_bits 和 value 分配了其首个值，即 1 和 0, 方"
"便下面累加\n"
"\t\t\t{\n"
"\t\t\t\ttable.assign_cell(\n"
"\t\t\t\t\t|| \"assign num_bits\",\n"
"\t\t\t\t\tself.num_bits,\n"
"\t\t\t\t\toffset,\n"
"\t\t\t\t\t|| Value::known(F::ONE),\n"
"\t\t\t\t)?;\n"
"\t\t\t\ttable.assign_cell(\n"
"\t\t\t\t\t|| \"assign value\",\n"
"\t\t\t\t\tself.value,\n"
"\t\t\t\t\toffset,\n"
"\t\t\t\t\t|| Value::known(F::ZERO),\n"
"\t\t\t\t)?;\n"
"\n"
"\t\t\t\toffset += 1;\n"
"\t\t\t}\n"
"\n"
"\t\t\t// (1 << (num_bits_ - 1))..(1 << num_bits_) : 在给定的 NUM_BITS 下的 "
"min & max value.\n"
"\t\t\t//   num_bits_ 标识了 value 所占的位数,比如 213\n"
"\t\t\t//   value_ 则是实际赋值(约束)到电路里的实际 Private value\n"
"\t\t\tfor num_bits_ in 1..=NUM_BITS {\n"
"\t\t\t\tfor value_ in (1 << (num_bits_ - 1))..(1 << num_bits_) {\n"
"\t\t\t\t\ttable.assign_cell(\n"
"\t\t\t\t\t\t|| \"assign num_bits\",\n"
"\t\t\t\t\t\tself.num_bits,\n"
"\t\t\t\t\t\toffset,\n"
"\t\t\t\t\t\t|| Value::known(F::from(num_bits_ as u64)),\n"
"\t\t\t\t\t)?;\n"
"\t\t\t\t\ttable.assign_cell(\n"
"\t\t\t\t\t\t|| \"assign value\",\n"
"\t\t\t\t\t\tself.value,\n"
"\t\t\t\t\t\toffset,\n"
"\t\t\t\t\t\t|| Value::known(F::from(value_ as u64)),\n"
"\t\t\t\t\t)?;\n"
"\t\t\t\t\toffset += 1;\n"
"\t\t\t\t}\n"
"\t\t\t}\n"
"\t\t\tOk(())\n"
"\t\t},\n"
"\t)\n"
"} }\n"
"```"

#: src/halo2/tmp/8-Range-Check(example-3).md:178
msgid "main - example3.rs"
msgstr "main - example3.rs"

#: src/halo2/tmp/8-Range-Check(example-3).md:182
msgid ""
"This helper uses a lookup table to check that the value witnessed in a given "
"cell is within a given range."
msgstr ""
"This helper uses a lookup table to check that the value witnessed in a given "
"cell is within a given range."

#: src/halo2/tmp/8-Range-Check(example-3).md:185
msgid "The lookup table is tagged by `num_bits` to give a strict range check."
msgstr "The lookup table is tagged by `num_bits` to give a strict range check."

#: src/halo2/tmp/8-Range-Check(example-3).md:197
msgid ""
"We use a K-bit lookup table, that is tagged `1..=K`, where the tag `i` marks "
"an `i`\\-bit value. 使用 K 位查找表，标记为 `1 ..= K`，其中标记 `i` 标记 `i` "
"位值"
msgstr ""
"We use a K-bit lookup table, that is tagged `1..=K`, where the tag `i` marks "
"an `i`\\-bit value. 使用 K 位查找表，标记为 `1 ..= K`，其中标记 `i` 标记 `i` "
"位值"

#: src/halo2/tmp/8-Range-Check(example-3).md:203
msgid "`RangeConstrained` 加一字段：`num_bits: AssignedCell<Assigned<F>, F>,`"
msgstr "`RangeConstrained` 加一字段：`num_bits: AssignedCell<Assigned<F>, F>,`"

#: src/halo2/tmp/8-Range-Check(example-3).md:204
msgid "`RangeCheckConfig` 加一 Advice col：`num_bits`"
msgstr "`RangeCheckConfig` 加一 Advice col：`num_bits`"

#: src/halo2/tmp/8-Range-Check(example-3).md:206
msgid ""
"```rust\n"
"#[derive(Debug, Clone)]\n"
"/// A range-constrained value in the circuit produced by the "
"RangeCheckConfig.\n"
"struct RangeConstrained<F: PrimeField> {\n"
"    num_bits: AssignedCell<Assigned<F>, F>,\n"
"    assigned_cell: AssignedCell<Assigned<F>, F>,\n"
"}\n"
"\n"
"struct RangeCheckConfig<F: FieldExt, const NUM_BITS: usize, const RANGE: "
"usize> {\n"
"    q_lookup: Selector,\n"
"    num_bits: Column<Advice>, /////// \n"
"    value: Column<Advice>,\n"
"    table: RangeTableConfig<F, NUM_BITS, RANGE>,\n"
"}\n"
"```"
msgstr ""
"```rust\n"
"#[derive(Debug, Clone)]\n"
"/// A range-constrained value in the circuit produced by the "
"RangeCheckConfig.\n"
"struct RangeConstrained<F: PrimeField> {\n"
"    num_bits: AssignedCell<Assigned<F>, F>,\n"
"    assigned_cell: AssignedCell<Assigned<F>, F>,\n"
"}\n"
"\n"
"struct RangeCheckConfig<F: FieldExt, const NUM_BITS: usize, const RANGE: "
"usize> {\n"
"    q_lookup: Selector,\n"
"    num_bits: Column<Advice>, /////// \n"
"    value: Column<Advice>,\n"
"    table: RangeTableConfig<F, NUM_BITS, RANGE>,\n"
"}\n"
"```"

#: src/halo2/tmp/8-Range-Check(example-3).md:224
msgid "当 `q_lookup`（complex_selector）被激活或禁用时，应该使用哪些值进行查找"
msgstr ""
"当 `q_lookup`（complex_selector）被激活或禁用时，应该使用哪些值进行查找"

#: src/halo2/tmp/8-Range-Check(example-3).md:225
msgid "`q_lookup`和`not_q_lookup`分别表示查找被激活或禁用的情况"
msgstr "`q_lookup`和`not_q_lookup`分别表示查找被激活或禁用的情况"

#: src/halo2/tmp/8-Range-Check(example-3).md:226
msgid ""
"默认： Selector 不被激活时，直接使用位数为 1 的默认值和值为 0 的默认值，确保"
"约束成立"
msgstr ""
"默认： Selector 不被激活时，直接使用位数为 1 的默认值和值为 0 的默认值，确保"
"约束成立"

#: src/halo2/tmp/8-Range-Check(example-3).md:227
msgid "当激活 Selector，它将使用提供的 Advice col 中的实际值"
msgstr "当激活 Selector，它将使用提供的 Advice col 中的实际值"

#: src/halo2/tmp/8-Range-Check(example-3).md:228
msgid ""
"这确保了当不需要范围检查时，查找仍然是有效的，并且查找表中有相应的条目。"
msgstr ""
"这确保了当不需要范围检查时，查找仍然是有效的，并且查找表中有相应的条目。"

#: src/halo2/tmp/8-Range-Check(example-3).md:230
msgid "`vec![(num_bits_expr, table.num_bits), (value_expr, table.value)]` :"
msgstr "`vec![(num_bits_expr, table.num_bits), (value_expr, table.value)]` :"

#: src/halo2/tmp/8-Range-Check(example-3).md:231
msgid ""
"2 个约束 `(num_bits_expr, table.num_bits), (value_expr, table.value)` 都需要"
"成立"
msgstr ""
"2 个约束 `(num_bits_expr, table.num_bits), (value_expr, table.value)` 都需要"
"成立"

#: src/halo2/tmp/8-Range-Check(example-3).md:232
msgid ""
"在 `meta.lookup` -> `query_fixed` -> `query_fixed_index` 源码中，可以看到："
msgstr ""
"在 `meta.lookup` -> `query_fixed` -> `query_fixed_index` 源码中，可以看到："

#: src/halo2/tmp/8-Range-Check(example-3).md:233
msgid "`value_expr` 会被循环遍历是否在 `table.value` 这个 `fixed` 列中存在"
msgstr "`value_expr` 会被循环遍历是否在 `table.value` 这个 `fixed` 列中存在"

#: src/halo2/tmp/8-Range-Check(example-3).md:237
msgid ""
"```rust\n"
"// Write the gate for our range check Config\n"
"// It's good practive to pass advice columns to the config (rather than "
"creating it within the config)\n"
"// because these are very likely to be shared across multiple config\n"
"impl<F: PrimeField, const NUM_BITS: usize, const RANGE: usize> "
"RangeCheckConfig<F, NUM_BITS, RANGE> {\n"
"   // REMEMBER THAT THE CONFIGURATION HAPPEN AT KEYGEN TIME\n"
"   pub fn configure(\n"
"      meta: &mut ConstraintSystem<F>,\n"
"      num_bits: Column<Advice>,\n"
"      value: Column<Advice>,\n"
"   ) -> Self {\n"
"      let q_lookup = meta.complex_selector();  // complex_selector\n"
"      // 配置查找表 configure lookup table.\n"
"      let table = RangeTableConfig::configure(meta);\n"
"\n"
"      meta.lookup(|meta| {\n"
"         let q_lookup = meta.query_selector(q_lookup);\n"
"         let num_bits = meta.query_advice(num_bits, Rotation::cur());\n"
"         let value = meta.query_advice(value, Rotation::cur());\n"
"\n"
"         // q_lookup = 1, not_q_lookup = 0 ; q_lookup = 0, not_q_lookup = 1\n"
"         let not_q_lookup = Expression::Constant(F::ONE ) - q_lookup."
"clone();\n"
"         let default_num_bits = Expression::Constant(F::ONE);// 1-bit\n"
"         let default_value = Expression::Constant(F::ZERO);  // 0 is a 1-bit "
"value\n"
" \n"
"         // default_num_bits / default_value only used when `q_lookup` is "
"not active.\n"
"         let num_bits_expr =\n"
"            q_lookup.clone() * num_bits + not_q_lookup.clone() * "
"default_num_bits;\n"
"         let value_expr = q_lookup * value + not_q_lookup * default_value;\n"
"\n"
"         // When q_lookup is active, the circuit will use the actual advice "
"values, \n"
"         //   but when it's not, the circuit will use the default values.\n"
"         // 根据 meta.lookup 源码(query_fixed_index), 我们需要确保:\n"
"         //  - num_bits_expr ∈  table.num_bits 和\n"
"         //  - value_expr ∈ table.value  都成立\n"
"         vec![(num_bits_expr, table.num_bits), (value_expr, table.value)]\n"
"        }); \n"
"\n"
"      Self {\n"
"          q_lookup,\n"
"          num_bits,\n"
"          value,\n"
"          table,\n"
"     }\n"
"   }\n"
"```"
msgstr ""
"```rust\n"
"// Write the gate for our range check Config\n"
"// It's good practive to pass advice columns to the config (rather than "
"creating it within the config)\n"
"// because these are very likely to be shared across multiple config\n"
"impl<F: PrimeField, const NUM_BITS: usize, const RANGE: usize> "
"RangeCheckConfig<F, NUM_BITS, RANGE> {\n"
"   // REMEMBER THAT THE CONFIGURATION HAPPEN AT KEYGEN TIME\n"
"   pub fn configure(\n"
"      meta: &mut ConstraintSystem<F>,\n"
"      num_bits: Column<Advice>,\n"
"      value: Column<Advice>,\n"
"   ) -> Self {\n"
"      let q_lookup = meta.complex_selector();  // complex_selector\n"
"      // 配置查找表 configure lookup table.\n"
"      let table = RangeTableConfig::configure(meta);\n"
"\n"
"      meta.lookup(|meta| {\n"
"         let q_lookup = meta.query_selector(q_lookup);\n"
"         let num_bits = meta.query_advice(num_bits, Rotation::cur());\n"
"         let value = meta.query_advice(value, Rotation::cur());\n"
"\n"
"         // q_lookup = 1, not_q_lookup = 0 ; q_lookup = 0, not_q_lookup = 1\n"
"         let not_q_lookup = Expression::Constant(F::ONE ) - q_lookup."
"clone();\n"
"         let default_num_bits = Expression::Constant(F::ONE);// 1-bit\n"
"         let default_value = Expression::Constant(F::ZERO);  // 0 is a 1-bit "
"value\n"
" \n"
"         // default_num_bits / default_value only used when `q_lookup` is "
"not active.\n"
"         let num_bits_expr =\n"
"            q_lookup.clone() * num_bits + not_q_lookup.clone() * "
"default_num_bits;\n"
"         let value_expr = q_lookup * value + not_q_lookup * default_value;\n"
"\n"
"         // When q_lookup is active, the circuit will use the actual advice "
"values, \n"
"         //   but when it's not, the circuit will use the default values.\n"
"         // 根据 meta.lookup 源码(query_fixed_index), 我们需要确保:\n"
"         //  - num_bits_expr ∈  table.num_bits 和\n"
"         //  - value_expr ∈ table.value  都成立\n"
"         vec![(num_bits_expr, table.num_bits), (value_expr, table.value)]\n"
"        }); \n"
"\n"
"      Self {\n"
"          q_lookup,\n"
"          num_bits,\n"
"          value,\n"
"          table,\n"
"     }\n"
"   }\n"
"```"

#: src/halo2/tmp/8-Range-Check(example-3).md:285
msgid ""
"Tips: right now halo2 only allows fixed columns to be used as lookup tables "
"and the reason is that behind the scenes um halo 2 will pad your lookup "
"table for..."
msgstr ""
"Tips: right now halo2 only allows fixed columns to be used as lookup tables "
"and the reason is that behind the scenes um halo 2 will pad your lookup "
"table for..."

#: src/halo2/tmp/8-Range-Check(example-3).md:287
msgid "fn assign()"
msgstr "fn assign()"

#: src/halo2/tmp/8-Range-Check(example-3).md:289
msgid "将某些值 (如 Private value) 分配到特定的电路区域内"
msgstr "将某些值 (如 Private value) 分配到特定的电路区域内"

#: src/halo2/tmp/8-Range-Check(example-3).md:291
msgid ""
"```rust\n"
"pub fn assign(\n"
"   &self,\n"
"   mut layouter: impl Layouter<F>,\n"
"   num_bits: Value<u8>,\n"
"   value: Value<Assigned<F>>,\n"
") -> Result<RangeConstrained<F>, Error> {\n"
"   layouter.assign_region(\n"
"      || \"Assign value\",\n"
"      |mut region| {\n"
"         let offset = 0;\n"
"\n"
"         // Enable q_lookup\n"
"         self.q_lookup.enable(&mut region, offset)?;\n"
"\n"
"         // Assign num_bits\n"
"         let num_bits = num_bits.map(|v| F::from(v as u64));\n"
"         let num_bits = region.assign_advice(\n"
"            || \"num_bits\",\n"
"            self.num_bits,\n"
"            offset,\n"
"            || num_bits.into(),\n"
"         )?;\n"
"\n"
"         // Assign value\n"
"         let assigned_cell =\n"
"            region.assign_advice(|| \"value\", self.value, offset, || "
"value)?;\n"
"\n"
"         Ok(RangeConstrained {\n"
"            num_bits,\n"
"            assigned_cell,\n"
"         })\n"
"      },\n"
"   )\n"
"} }\n"
"```"
msgstr ""
"```rust\n"
"pub fn assign(\n"
"   &self,\n"
"   mut layouter: impl Layouter<F>,\n"
"   num_bits: Value<u8>,\n"
"   value: Value<Assigned<F>>,\n"
") -> Result<RangeConstrained<F>, Error> {\n"
"   layouter.assign_region(\n"
"      || \"Assign value\",\n"
"      |mut region| {\n"
"         let offset = 0;\n"
"\n"
"         // Enable q_lookup\n"
"         self.q_lookup.enable(&mut region, offset)?;\n"
"\n"
"         // Assign num_bits\n"
"         let num_bits = num_bits.map(|v| F::from(v as u64));\n"
"         let num_bits = region.assign_advice(\n"
"            || \"num_bits\",\n"
"            self.num_bits,\n"
"            offset,\n"
"            || num_bits.into(),\n"
"         )?;\n"
"\n"
"         // Assign value\n"
"         let assigned_cell =\n"
"            region.assign_advice(|| \"value\", self.value, offset, || "
"value)?;\n"
"\n"
"         Ok(RangeConstrained {\n"
"            num_bits,\n"
"            assigned_cell,\n"
"         })\n"
"      },\n"
"   )\n"
"} }\n"
"```"

#: src/halo2/tmp/8-Range-Check(example-3).md:330
msgid "和上一节类似"
msgstr "和上一节类似"

#: src/halo2/tmp/8-Range-Check(example-3).md:332
msgid ""
"```rust\n"
"#[test]\n"
"fn test_range_check_3() {\n"
"\tlet k = 9;\n"
"\tconst NUM_BITS: usize = 8;\n"
"\tconst RANGE: usize = 256; // 8-bit value\n"
"\n"
"\t// Successful cases\n"
"\tfor num_bits in 1u8..=NUM_BITS.try_into().unwrap() {\n"
"\t\tfor value in (1 << (num_bits - 1))..(1 << num_bits) {\n"
"\t\t\tlet circuit = MyCircuit::<Fp, NUM_BITS, RANGE> {\n"
"\t\t\t\tnum_bits: Value::known(num_bits),\n"
"\t\t\t\tvalue: Value::known(Fp::from(value as u64).into()),\n"
"\t\t\t};\n"
"\n"
"\t\t\tlet prover = MockProver::run(k, &circuit, vec![]).unwrap();\n"
"\t\t\tprover.assert_satisfied();\n"
"\t\t}\n"
"\t}\n"
"}\n"
"```"
msgstr ""
"```rust\n"
"#[test]\n"
"fn test_range_check_3() {\n"
"\tlet k = 9;\n"
"\tconst NUM_BITS: usize = 8;\n"
"\tconst RANGE: usize = 256; // 8-bit value\n"
"\n"
"\t// Successful cases\n"
"\tfor num_bits in 1u8..=NUM_BITS.try_into().unwrap() {\n"
"\t\tfor value in (1 << (num_bits - 1))..(1 << num_bits) {\n"
"\t\t\tlet circuit = MyCircuit::<Fp, NUM_BITS, RANGE> {\n"
"\t\t\t\tnum_bits: Value::known(num_bits),\n"
"\t\t\t\tvalue: Value::known(Fp::from(value as u64).into()),\n"
"\t\t\t};\n"
"\n"
"\t\t\tlet prover = MockProver::run(k, &circuit, vec![]).unwrap();\n"
"\t\t\tprover.assert_satisfied();\n"
"\t\t}\n"
"\t}\n"
"}\n"
"```"

#: src/halo2/tmp/9-decomposed.md:7
msgid "[background](#background)"
msgstr "[background](#background)"

#: src/halo2/tmp/9-decomposed.md:9
msgid "[图解：](#图解)"
msgstr "[图解：](#图解)"

#: src/halo2/tmp/9-decomposed.md:10
msgid "[Protocol ：](#protocol-)"
msgstr "[Protocol ：](#protocol-)"

#: src/halo2/tmp/9-decomposed.md:11
msgid "[lookup table](#lookup-table)"
msgstr "[lookup table](#lookup-table)"

#: src/halo2/tmp/9-decomposed.md:12
msgid "[DecomposeConfig](#decomposeconfig)"
msgstr "[DecomposeConfig](#decomposeconfig)"

#: src/halo2/tmp/9-decomposed.md:13
msgid "[代码分析](#代码分析)"
msgstr "[代码分析](#代码分析)"

#: src/halo2/tmp/9-decomposed.md:15
msgid "[config.assign()](#configassign)"
msgstr "[config.assign()](#configassign)"

#: src/halo2/tmp/9-decomposed.md:19
msgid "background"
msgstr "background"

#: src/halo2/tmp/9-decomposed.md:21
msgid "一个数学事实：对于一个 "
msgstr "一个数学事实：对于一个 "

#: src/halo2/tmp/9-decomposed.md:21
msgid " 位二进制数如 "
msgstr " 位二进制数如 "

#: src/halo2/tmp/9-decomposed.md:21
msgid "110011"
msgstr "110011"

#: src/halo2/tmp/9-decomposed.md:21
msgid "，让其对 "
msgstr "，让其对 "

#: src/halo2/tmp/9-decomposed.md:21
msgid " 取模，余数正好是该数的最低 "
msgstr " 取模，余数正好是该数的最低 "

#: src/halo2/tmp/9-decomposed.md:21
msgid " 位，如 "
msgstr " 位，如 "

#: src/halo2/tmp/9-decomposed.md:21
msgid " ： "
msgstr " ： "

#: src/halo2/tmp/9-decomposed.md:22
msgid " 这个事实比较显而易见，考虑二进制数的表示方法： "
msgstr " 这个事实比较显而易见，考虑二进制数的表示方法： "

#: src/halo2/tmp/9-decomposed.md:24
msgid " 对于该数对 "
msgstr " 对于该数对 "

#: src/halo2/tmp/9-decomposed.md:25
msgid " 取模的结果："
msgstr " 取模的结果："

#: src/halo2/tmp/9-decomposed.md:26 src/halo2/tmp/9-decomposed.md:27
msgid "所有 "
msgstr "所有 "

#: src/halo2/tmp/9-decomposed.md:26
#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:238
msgid "≥"
msgstr "≥"

#: src/halo2/tmp/9-decomposed.md:26
msgid " 的项（即 "
msgstr " 的项（即 "

#: src/halo2/tmp/9-decomposed.md:26
msgid " ）都会被 "
msgstr " ）都会被 "

#: src/halo2/tmp/9-decomposed.md:26
msgid " 整除，模的结果都 "
msgstr " 整除，模的结果都 "

#: src/halo2/tmp/9-decomposed.md:26
msgid ", 所以对取模的结果不会有影响或贡献"
msgstr ", 所以对取模的结果不会有影响或贡献"

#: src/halo2/tmp/9-decomposed.md:27
msgid " 的项都加起来才 "
msgstr " 的项都加起来才 "

#: src/halo2/tmp/9-decomposed.md:27
msgid " ，所以 mod "
msgstr " ，所以 mod "

#: src/halo2/tmp/9-decomposed.md:27
msgid " 就等于其所有低位(的和)"
msgstr " 就等于其所有低位(的和)"

#: src/halo2/tmp/9-decomposed.md:29
msgid "假设对于 "
msgstr "假设对于 "

#: src/halo2/tmp/9-decomposed.md:29 src/halo2/tmp/9-decomposed.md:30
msgid "1100101"
msgstr "1100101"

#: src/halo2/tmp/9-decomposed.md:29
msgid "， 设 "
msgstr "， 设 "

#: src/halo2/tmp/9-decomposed.md:29
msgid "  即 mod "
msgstr "  即 mod "

#: src/halo2/tmp/9-decomposed.md:30
msgid "sc"
msgstr "sc"

#: src/halo2/tmp/9-decomposed.md:30 src/public goods/第二章.md:9
#: goods/第二章.md:10 goods/第二章.md:16 goods/第二章.md:18
#: goods/第二章.md:19 goods/第二章.md:20 goods/第二章.md:25
#: goods/第二章.md:26 goods/第二章.md:33
msgid "ain"
msgstr "ain"

#: src/halo2/tmp/9-decomposed.md:30
msgid "1100"
msgstr "1100"

#: src/halo2/tmp/9-decomposed.md:30
msgid " 因此，对 "
msgstr " 因此，对 "

#: src/halo2/tmp/9-decomposed.md:31
msgid " 取模将保留原数的最低 "
msgstr " 取模将保留原数的最低 "

#: src/halo2/tmp/9-decomposed.md:31
msgid " 位，并且舍去所有更高的位"
msgstr " 位，并且舍去所有更高的位"

#: src/halo2/tmp/9-decomposed.md:35
msgid ""
"对于一个 10000+ 的数字，使用 lookup Table 就需要一个对应的 10000+ 行的表来约"
"束，这样的线性同步增长显然也是低效的。考虑设计一种算法，将一个大数表示分解"
"（Decompose）成很多个小二进制数的组合如 `(101)(110)(011)(001)...`，然后对其分"
"解的每个小 Group 进行分组约束。"
msgstr ""
"对于一个 10000+ 的数字，使用 lookup Table 就需要一个对应的 10000+ 行的表来约"
"束，这样的线性同步增长显然也是低效的。考虑设计一种算法，将一个大数表示分解"
"（Decompose）成很多个小二进制数的组合如 `(101)(110)(011)(001)...`，然后对其分"
"解的每个小 Group 进行分组约束。"

#: src/halo2/tmp/9-decomposed.md:37
msgid "假设 `value` = 165 （在二进制中为 `10100101`）是个 8 位二进制数，则 "
msgstr "假设 `value` = 165 （在二进制中为 `10100101`）是个 8 位二进制数，则 "

#: src/halo2/tmp/9-decomposed.md:37
msgid " 。 设 "
msgstr " 。 设 "

#: src/halo2/tmp/9-decomposed.md:37
msgid "，也就是我们想将它分解为 3 位的块: 152  "
msgstr "，也就是我们想将它分解为 3 位的块: 152  "

#: src/halo2/tmp/9-decomposed.md:39 src/halo2/tmp/9-decomposed.md:40
#: src/halo2/tmp/9-decomposed.md:42 src/halo2/tmp/9-decomposed.md:53
msgid "165"
msgstr "165"

#: src/halo2/tmp/9-decomposed.md:40 src/halo2/tmp/9-decomposed.md:43
#: src/halo2/tmp/9-decomposed.md:47
msgid "%"
msgstr "%"

#: src/halo2/tmp/9-decomposed.md:42 src/halo2/tmp/9-decomposed.md:43
#: src/halo2/tmp/9-decomposed.md:46
msgid "20"
msgstr "20"

#: src/halo2/tmp/9-decomposed.md:43 src/halo2/tmp/9-decomposed.md:53
#: src/zk-everything/zk-everything-joe/Spartan.md:347
msgid "100"
msgstr "100"

#: src/halo2/tmp/9-decomposed.md:43 src/halo2/tmp/9-decomposed.md:47
msgid " (更新  "
msgstr " (更新  "

#: src/halo2/tmp/9-decomposed.md:44
msgid "20/8"
msgstr "20/8"

#: src/halo2/tmp/9-decomposed.md:47 src/halo2/tmp/9-decomposed.md:53
#: src/zk-everything/zk-everything-joe/Spartan.md:347
msgid "010"
msgstr "010"

#: src/halo2/tmp/9-decomposed.md:48
msgid "2/8"
msgstr "2/8"

#: src/halo2/tmp/9-decomposed.md:51
msgid "于是，我们可以得到： "
msgstr "于是，我们可以得到： "

#: src/halo2/tmp/9-decomposed.md:53
msgid "10100101"
msgstr "10100101"

#: src/halo2/tmp/9-decomposed.md:55
msgid ""
"这个方法的核心思想是将一个较长的二进制数分解成多个较小的二进制块。这样做的好"
"处是可以通过查找表(range_check)来验证这些小块是否都在正确的范围内，从而验证整"
"个数字是否在预期的范围内。"
msgstr ""
"这个方法的核心思想是将一个较长的二进制数分解成多个较小的二进制块。这样做的好"
"处是可以通过查找表(range_check)来验证这些小块是否都在正确的范围内，从而验证整"
"个数字是否在预期的范围内。"

#: src/halo2/tmp/9-decomposed.md:57
msgid "几个关键步骤："
msgstr "几个关键步骤："

#: src/halo2/tmp/9-decomposed.md:58
msgid ""
"**初始化 running sum** : 我们用该大二进制数字作为起始值。这个值随着每个步骤的"
"进行会逐渐减小，直到它变为零。"
msgstr ""
"**初始化 running sum** : 我们用该大二进制数字作为起始值。这个值随着每个步骤的"
"进行会逐渐减小，直到它变为零。"

#: src/halo2/tmp/9-decomposed.md:59
msgid ""
"**分解数字**: 在每个步骤中，我们从 running sum 中取出一个 K 位块。这就是用余"
"数操作实现的。取出的这个块是当前 running sum 的最低 K 位"
msgstr ""
"**分解数字**: 在每个步骤中，我们从 running sum 中取出一个 K 位块。这就是用余"
"数操作实现的。取出的这个块是当前 running sum 的最低 K 位"

#: src/halo2/tmp/9-decomposed.md:60
msgid ""
"**更新 running sum**: 一旦取出一个块，就从 running sum 中减去它，并将结果除"
"以 "
msgstr ""
"**更新 running sum**: 一旦取出一个块，就从 running sum 中减去它，并将结果除"
"以 "

#: src/halo2/tmp/9-decomposed.md:60
msgid ""
" 。这实际上就是**移除已处理的 K 个低位（Little endian, 小端）**，并准备处理下"
"一块"
msgstr ""
" 。这实际上就是**移除已处理的 K 个低位（Little endian, 小端）**，并准备处理下"
"一块"

#: src/halo2/tmp/9-decomposed.md:61
msgid "**验证**: 使用 `range_check` 查找表验证每个块是否在  "
msgstr "**验证**: 使用 `range_check` 查找表验证每个块是否在  "

#: src/halo2/tmp/9-decomposed.md:61
msgid "  范围内"
msgstr "  范围内"

#: src/halo2/tmp/9-decomposed.md:62
msgid ""
"**终止条件**: 当 running sum 变为零时，整个数字已经完全分解。此时，我们已经验"
"证了整个数字的每一个部分"
msgstr ""
"**终止条件**: 当 running sum 变为零时，整个数字已经完全分解。此时，我们已经验"
"证了整个数字的每一个部分"

#: src/halo2/tmp/9-decomposed.md:64
msgid ""
"此方法的优势是它可以有效地验证一个数字是否在给定的范围内，而不需要对整个数字"
"进行查找。它只需要验证分解出来的每个小块"
msgstr ""
"此方法的优势是它可以有效地验证一个数字是否在给定的范围内，而不需要对整个数字"
"进行查找。它只需要验证分解出来的每个小块"

#: src/halo2/tmp/9-decomposed.md:66
msgid "K 的选择可能主要依赖于查找表的大小"
msgstr "K 的选择可能主要依赖于查找表的大小"

#: src/halo2/tmp/9-decomposed.md:68
msgid ""
"此方法提供了一个有效的方式来验证数字是否在给定的范围内，同时还可以利用查找表"
"(range_check) 来大幅度减少计算量，而且"
msgstr ""
"此方法提供了一个有效的方式来验证数字是否在给定的范围内，同时还可以利用查找表"
"(range_check) 来大幅度减少计算量，而且"

#: src/halo2/tmp/9-decomposed.md:71
msgid "图解："
msgstr "图解："

#: src/halo2/tmp/9-decomposed.md:73
msgid "如下是二进制数字 `593`，我们要将其分解为 `K=3` 位的块："
msgstr "如下是二进制数字 `593`，我们要将其分解为 `K=3` 位的块："

#: src/halo2/tmp/9-decomposed.md:84
msgid "**逐块分解**:  从最右侧开始（小端）逐步处理每个块，并更新 running sum :"
msgstr ""
"**逐块分解**:  从最右侧开始（小端）逐步处理每个块，并更新 running sum :"

#: src/halo2/tmp/9-decomposed.md:85
msgid "取第一个块(101)，更新 running sum：subtract (101) 并右移 K 位"
msgstr "取第一个块(101)，更新 running sum：subtract (101) 并右移 K 位"

#: src/halo2/tmp/9-decomposed.md:86
msgid "取第二个块(1100)，更新running sum：subtract (1100) 并右移 K 位"
msgstr "取第二个块(1100)，更新running sum：subtract (1100) 并右移 K 位"

#: src/halo2/tmp/9-decomposed.md:89
msgid "如果所有的块都在预期的范围内，那么整个数字也在预期的范围内。"
msgstr "如果所有的块都在预期的范围内，那么整个数字也在预期的范围内。"

#: src/halo2/tmp/9-decomposed.md:91
msgid "Protocol ："
msgstr "Protocol ："

#: src/halo2/tmp/9-decomposed.md:93
msgid "This gadget range-constrains an element witnessed in the circuit to be "
msgstr ""
"This gadget range-constrains an element witnessed in the circuit to be "

#: src/halo2/tmp/9-decomposed.md:93
msgid " bits."
msgstr " bits."

#: src/halo2/tmp/9-decomposed.md:95
msgid ""
"Internally, this gadget uses the `range_check` helper, which provides a "
msgstr ""
"Internally, this gadget uses the `range_check` helper, which provides a "

#: src/halo2/tmp/9-decomposed.md:95
msgid "\\-bit lookup table."
msgstr "\\-bit lookup table."

#: src/halo2/tmp/9-decomposed.md:98
msgid ""
"Given an element `value`, we use a running sum to break it into K-bit "
"chunks. **Assume** for now that  "
msgstr ""
"Given an element `value`, we use a running sum to break it into K-bit "
"chunks. **Assume** for now that  "

#: src/halo2/tmp/9-decomposed.md:99
msgid "  and define "
msgstr "  and define "

#: src/halo2/tmp/9-decomposed.md:101
msgid "ttl"
msgstr "ttl"

#: src/halo2/tmp/9-decomposed.md:101
msgid "ian"
msgstr "ian"

#: src/halo2/tmp/9-decomposed.md:102
msgid "little-endian 表示小端，即一个二进制表示中相对较小的那些位数"
msgstr "little-endian 表示小端，即一个二进制表示中相对较小的那些位数"

#: src/halo2/tmp/9-decomposed.md:104
msgid "Initialise the running sum at  "
msgstr "Initialise the running sum at  "

#: src/halo2/tmp/9-decomposed.md:104
#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:273
msgid " ."
msgstr " ."

#: src/halo2/tmp/9-decomposed.md:106
msgid "Consequent terms of the running sum are  "
msgstr "Consequent terms of the running sum are  "

#: src/halo2/tmp/9-decomposed.md:110
msgid "One configuration for this gadget could look like:"
msgstr "One configuration for this gadget could look like:"

#: src/halo2/tmp/9-decomposed.md:122
msgid ""
"In the case where N is not a multiple of K, we have to handle a final chunk "
"that is `n` bits, where `n` \\< `K`. To do this:"
msgstr ""
"In the case where N is not a multiple of K, we have to handle a final chunk "
"that is `n` bits, where `n` \\< `K`. To do this:"

#: src/halo2/tmp/9-decomposed.md:125
msgid "derive `z_C` from running sum"
msgstr "derive `z_C` from running sum"

#: src/halo2/tmp/9-decomposed.md:126
msgid "witness `z_shifted` = "
msgstr "witness `z_shifted` = "

#: src/halo2/tmp/9-decomposed.md:127
msgid "assign a constant `shift` = "
msgstr "assign a constant `shift` = "

#: src/halo2/tmp/9-decomposed.md:129
msgid "constrain:"
msgstr "constrain:"

#: src/halo2/tmp/9-decomposed.md:132
msgid "lookup:"
msgstr "lookup:"

#: src/halo2/tmp/9-decomposed.md:133
msgid " is in the range "
msgstr " is in the range "

#: src/halo2/tmp/9-decomposed.md:134
msgid "z_shifted is in the range "
msgstr "z_shifted is in the range "

#: src/halo2/tmp/9-decomposed.md:134
msgid "  (no underflow)"
msgstr "  (no underflow)"

#: src/halo2/tmp/9-decomposed.md:138
msgid "We constrain "
msgstr "We constrain "

#: src/halo2/tmp/9-decomposed.md:138
msgid " for this helper. "
msgstr " for this helper. "

#: src/halo2/tmp/9-decomposed.md:141
msgid " is initialized as "
msgstr " is initialized as "

#: src/halo2/tmp/9-decomposed.md:141
msgid ". Each successive "
msgstr ". Each successive "

#: src/halo2/tmp/9-decomposed.md:141
msgid " is computed as "
msgstr " is computed as "

#: src/halo2/tmp/9-decomposed.md:143
msgid " is constrained to be zero."
msgstr " is constrained to be zero."

#: src/halo2/tmp/9-decomposed.md:145
msgid ""
"The difference between each interstitial running sum output is constrained "
"to be "
msgstr ""
"The difference between each interstitial running sum output is constrained "
"to be "

#: src/halo2/tmp/9-decomposed.md:146
msgid " bits, i.e. `range_check`("
msgstr " bits, i.e. `range_check`("

#: src/halo2/tmp/9-decomposed.md:146
msgid ",  "
msgstr ",  "

#: src/halo2/tmp/9-decomposed.md:146
msgid "),"
msgstr "),"

#: src/halo2/tmp/9-decomposed.md:148
msgid "where"
msgstr "where"

#: src/halo2/tmp/9-decomposed.md:154
msgid ""
"Given that the `range_check` constraint will be toggled by a selector, in "
"practice we will have a `selector * range_check(word)` expression of degree "
"`range + 1`."
msgstr ""
"Given that the `range_check` constraint will be toggled by a selector, in "
"practice we will have a `selector * range_check(word)` expression of degree "
"`range + 1`."

#: src/halo2/tmp/9-decomposed.md:158
msgid "This means that "
msgstr "This means that "

#: src/halo2/tmp/9-decomposed.md:158
msgid ""
" has to be at most `degree_bound - 1` in order for the range check "
"constraint to stay within the degree bound."
msgstr ""
" has to be at most `degree_bound - 1` in order for the range check "
"constraint to stay within the degree bound."

#: src/halo2/tmp/9-decomposed.md:161
msgid "This is a custom built version of the decompose running sum function."
msgstr "This is a custom built version of the decompose running sum function."

#: src/halo2/tmp/9-decomposed.md:164
msgid "lookup table"
msgstr "lookup table"

#: src/halo2/tmp/9-decomposed.md:174
msgid "num_bits"
msgstr "num_bits"

#: src/halo2/tmp/9-decomposed.md:174
msgid "value"
msgstr "value"

#: src/halo2/tmp/9-decomposed.md:189
msgid "14"
msgstr "14"

#: src/halo2/tmp/9-decomposed.md:190
msgid "15"
msgstr "15"

#: src/halo2/tmp/9-decomposed.md:194
msgid "如上图，比如，4 位 num_bits 可以表示的值是 `8 ~ 16-1`"
msgstr "如上图，比如，4 位 num_bits 可以表示的值是 `8 ~ 16-1`"

#: src/halo2/tmp/9-decomposed.md:195
msgid "DecomposeConfig"
msgstr "DecomposeConfig"

#: src/halo2/tmp/9-decomposed.md:197
msgid ""
"```rust\n"
"struct DecomposeConfig<\n"
"    F: PrimeField + PrimeFieldBits,\n"
"    const LOOKUP_NUM_BITS: usize,  // 10 \n"
"    const LOOKUP_RANGE: usize,     // 1024\n"
"> {\n"
"    // You'll need an advice column to witness your running sum;\n"
"    running_sum: Column<Advice>,\n"
"    // A selector to constrain the running sum;\n"
"    q_decompose: Selector,\n"
"    // A selector to handle the final partial chunk\n"
"    q_partial_check: Selector,\n"
"    // And of course, the K-bit lookup table\n"
"    table: RangeTableConfig<F, LOOKUP_NUM_BITS, LOOKUP_RANGE>,\n"
"    _marker: PhantomData<F>,\n"
"}\n"
"```"
msgstr ""
"```rust\n"
"struct DecomposeConfig<\n"
"    F: PrimeField + PrimeFieldBits,\n"
"    const LOOKUP_NUM_BITS: usize,  // 10 \n"
"    const LOOKUP_RANGE: usize,     // 1024\n"
"> {\n"
"    // You'll need an advice column to witness your running sum;\n"
"    running_sum: Column<Advice>,\n"
"    // A selector to constrain the running sum;\n"
"    q_decompose: Selector,\n"
"    // A selector to handle the final partial chunk\n"
"    q_partial_check: Selector,\n"
"    // And of course, the K-bit lookup table\n"
"    table: RangeTableConfig<F, LOOKUP_NUM_BITS, LOOKUP_RANGE>,\n"
"    _marker: PhantomData<F>,\n"
"}\n"
"```"

#: src/halo2/tmp/9-decomposed.md:215
msgid "约束 1： "
msgstr "约束 1： "

#: src/halo2/tmp/9-decomposed.md:217
msgid ""
"```rust\n"
"// z_{i+1} = (z_i - c_i) / 2^K i.e.  `c_i = z_i - z_{i+1} * 2^K`.\n"
"// Range-constrain each K-bit chunk  `c_i = z_i - z_{i+1} * 2^K` derived "
"from the running sum.\n"
"meta.lookup(|meta| {\n"
"\tlet q_decompose = meta.query_selector(q_decompose);\n"
"\n"
"\t// z_i\n"
"\tlet z_cur = meta.query_advice(running_sum, Rotation::cur());\n"
"\t// z_{i+1}\n"
"\tlet z_next = meta.query_advice(running_sum, Rotation::next());\n"
"\t// c_i = z_i - z_{i+1} * 2^K\n"
"\tlet chunk = z_cur.clone() - z_next.clone() * F::from(1u64 << "
"LOOKUP_NUM_BITS);\n"
"\t// println!(\"z_cur: {:?}, z_next: {:?} ,chunk: {:?}\",z_cur, z_next ,"
"chunk); // 0400\n"
"\n"
"\t// Lookup default value 0 when q_decompose = 0\n"
"\tlet not_q_decompose = Expression::Constant(F::ONE) - q_decompose.clone();\n"
"\tlet default_chunk = Expression::Constant(F::ZERO);\n"
"\n"
"\tvec![(\n"
"\t\tq_decompose * chunk + not_q_decompose * default_chunk,\n"
"\t\ttable.value,\n"
"\t)]\n"
"});\n"
"```"
msgstr ""
"```rust\n"
"// z_{i+1} = (z_i - c_i) / 2^K i.e.  `c_i = z_i - z_{i+1} * 2^K`.\n"
"// Range-constrain each K-bit chunk  `c_i = z_i - z_{i+1} * 2^K` derived "
"from the running sum.\n"
"meta.lookup(|meta| {\n"
"\tlet q_decompose = meta.query_selector(q_decompose);\n"
"\n"
"\t// z_i\n"
"\tlet z_cur = meta.query_advice(running_sum, Rotation::cur());\n"
"\t// z_{i+1}\n"
"\tlet z_next = meta.query_advice(running_sum, Rotation::next());\n"
"\t// c_i = z_i - z_{i+1} * 2^K\n"
"\tlet chunk = z_cur.clone() - z_next.clone() * F::from(1u64 << "
"LOOKUP_NUM_BITS);\n"
"\t// println!(\"z_cur: {:?}, z_next: {:?} ,chunk: {:?}\",z_cur, z_next ,"
"chunk); // 0400\n"
"\n"
"\t// Lookup default value 0 when q_decompose = 0\n"
"\tlet not_q_decompose = Expression::Constant(F::ONE) - q_decompose.clone();\n"
"\tlet default_chunk = Expression::Constant(F::ZERO);\n"
"\n"
"\tvec![(\n"
"\t\tq_decompose * chunk + not_q_decompose * default_chunk,\n"
"\t\ttable.value,\n"
"\t)]\n"
"});\n"
"```"

#: src/halo2/tmp/9-decomposed.md:242
msgid "约束 2："
msgstr "约束 2："

#: src/halo2/tmp/9-decomposed.md:244
msgid ""
"```rust\n"
"// Handle the final partial chunk.\n"
"// 用于处理二进制数的最后一个部分块 (高位 chunk)\n"
"// Shifted: 当我们到达 final chunk 且它的位数 < LOOKUP_NUM_BITS 时，\n"
"// 需要 \"shift\"这个块, 以使其能够与完整的块进行交互或对比\n"
"meta.create_gate(\"final partial chunk\", |meta| {\n"
"\tlet q_partial_check = meta.query_selector(q_partial_check);\n"
"\n"
"\t// z_{C-1}\n"
"\tlet z_prev = meta.query_advice(running_sum, Rotation::prev());\n"
"\t// z_C\n"
"\tlet z_cur = meta.query_advice(running_sum, Rotation::cur());\n"
"\t// c_{C-1} = z_{C-1} - z_C * 2^K\n"
"\tlet final_chunk = z_prev - z_cur * F::from(1u64 << LOOKUP_NUM_BITS);\n"
"\n"
"\t// shifted_chunk final_chunk * 2^{K - num_bits}\n"
"\tlet shifted_chunk = meta.query_advice(running_sum, Rotation::next());\n"
"\n"
"\t// 2^{-num_bits}\n"
"\tlet inv_two_pow_s = meta.query_advice(running_sum, Rotation(2));\n"
"\n"
"\tlet two_pow_k = F::from(1 << LOOKUP_NUM_BITS);\n"
"\tlet expr = final_chunk * two_pow_k * inv_two_pow_s - shifted_chunk;\n"
"\n"
"\tConstraints::with_selector(q_partial_check, [expr])\n"
"});\n"
"```"
msgstr ""
"```rust\n"
"// Handle the final partial chunk.\n"
"// 用于处理二进制数的最后一个部分块 (高位 chunk)\n"
"// Shifted: 当我们到达 final chunk 且它的位数 < LOOKUP_NUM_BITS 时，\n"
"// 需要 \"shift\"这个块, 以使其能够与完整的块进行交互或对比\n"
"meta.create_gate(\"final partial chunk\", |meta| {\n"
"\tlet q_partial_check = meta.query_selector(q_partial_check);\n"
"\n"
"\t// z_{C-1}\n"
"\tlet z_prev = meta.query_advice(running_sum, Rotation::prev());\n"
"\t// z_C\n"
"\tlet z_cur = meta.query_advice(running_sum, Rotation::cur());\n"
"\t// c_{C-1} = z_{C-1} - z_C * 2^K\n"
"\tlet final_chunk = z_prev - z_cur * F::from(1u64 << LOOKUP_NUM_BITS);\n"
"\n"
"\t// shifted_chunk final_chunk * 2^{K - num_bits}\n"
"\tlet shifted_chunk = meta.query_advice(running_sum, Rotation::next());\n"
"\n"
"\t// 2^{-num_bits}\n"
"\tlet inv_two_pow_s = meta.query_advice(running_sum, Rotation(2));\n"
"\n"
"\tlet two_pow_k = F::from(1 << LOOKUP_NUM_BITS);\n"
"\tlet expr = final_chunk * two_pow_k * inv_two_pow_s - shifted_chunk;\n"
"\n"
"\tConstraints::with_selector(q_partial_check, [expr])\n"
"});\n"
"```"

#: src/halo2/tmp/9-decomposed.md:272
msgid ""
"考虑这样一个情况：假设 LOOKUP_NUM_BITS = 4，但你的最后一个部分块只有 2 位，例"
"如 '10'。为了确保此块能与其他完整的4位块进行适当的交互，我们将其左移为 "
"'1000'。"
msgstr ""
"考虑这样一个情况：假设 LOOKUP_NUM_BITS = 4，但你的最后一个部分块只有 2 位，例"
"如 '10'。为了确保此块能与其他完整的4位块进行适当的交互，我们将其左移为 "
"'1000'。"

#: src/halo2/tmp/9-decomposed.md:273
msgid "**inv_two_pow_s**: 这是 "
msgstr "**inv_two_pow_s**: 这是 "

#: src/halo2/tmp/9-decomposed.md:273
msgid "bi"
msgstr "bi"

#: src/halo2/tmp/9-decomposed.md:273
msgid ""
" 的值，其中 num_bits 是最后一个部分块的实际位数。这个值用于将 shifted_chunk "
"\"移回\"到它原始的大小，以便我们可以对其进行适当的处理或检查。"
msgstr ""
" 的值，其中 num_bits 是最后一个部分块的实际位数。这个值用于将 shifted_chunk "
"\"移回\"到它原始的大小，以便我们可以对其进行适当的处理或检查。"

#: src/halo2/tmp/9-decomposed.md:274
msgid ""
"**expr**: 这个表达式确保 final_chunk 在经过移位处理后与 shifted_chunk 匹配。"
"这是一个约束，它确保 shifted_chunk 正确地表示了 final_chunk。"
msgstr ""
"**expr**: 这个表达式确保 final_chunk 在经过移位处理后与 shifted_chunk 匹配。"
"这是一个约束，它确保 shifted_chunk 正确地表示了 final_chunk。"

#: src/halo2/tmp/9-decomposed.md:279
msgid "代码分析"
msgstr "代码分析"

#: src/halo2/tmp/9-decomposed.md:281
msgid "从 Test 开始，以 `num = 154` 为例，"
msgstr "从 Test 开始，以 `num = 154` 为例，"

#: src/halo2/tmp/9-decomposed.md:283
msgid ""
"```rust\n"
"#[test]\n"
"fn test_decompose_3() {\n"
"\t// 本例中, K (NUM_BITS) 为 10 (即分解为大小为 10 的块, 查找表的大小为 "
"2^10 )\n"
"\tlet k = 11;\n"
"\t// i.e. `K` in fomula, const NUM_BITS: usize = 10;\n"
"\t// const RANGE: usize = 1024; // 10-bit value\n"
"\tconst NUM_BITS: usize = 3; // LOOKUP_NUM_BITS\n"
"\tconst RANGE: usize = 8; // 10-bit value // LOOKUP_RANGE\n"
"\n"
"\t// Random u64 value\n"
"\t// let value: u64 = rand::random();\n"
"\tlet value = 154; // hex is `9A`\n"
"\tlet value = Value::known(Assigned::from(Fp::from(value)));\n"
"\t// println!(\"test value  {:?}\", value); // 9a\n"
"\tlet circuit = MyCircuit::<Fp, NUM_BITS, RANGE> {\n"
"\t\tvalue,       // 154\n"
"\t\tnum_bits: 8, // `154` : 10011010 是 8 位\n"
"\t};\n"
"\n"
"\tlet prover = MockProver::run(k, &circuit, vec![]).unwrap();\n"
"\tprover.assert_satisfied();\n"
"}\n"
"```"
msgstr ""
"```rust\n"
"#[test]\n"
"fn test_decompose_3() {\n"
"\t// 本例中, K (NUM_BITS) 为 10 (即分解为大小为 10 的块, 查找表的大小为 "
"2^10 )\n"
"\tlet k = 11;\n"
"\t// i.e. `K` in fomula, const NUM_BITS: usize = 10;\n"
"\t// const RANGE: usize = 1024; // 10-bit value\n"
"\tconst NUM_BITS: usize = 3; // LOOKUP_NUM_BITS\n"
"\tconst RANGE: usize = 8; // 10-bit value // LOOKUP_RANGE\n"
"\n"
"\t// Random u64 value\n"
"\t// let value: u64 = rand::random();\n"
"\tlet value = 154; // hex is `9A`\n"
"\tlet value = Value::known(Assigned::from(Fp::from(value)));\n"
"\t// println!(\"test value  {:?}\", value); // 9a\n"
"\tlet circuit = MyCircuit::<Fp, NUM_BITS, RANGE> {\n"
"\t\tvalue,       // 154\n"
"\t\tnum_bits: 8, // `154` : 10011010 是 8 位\n"
"\t};\n"
"\n"
"\tlet prover = MockProver::run(k, &circuit, vec![]).unwrap();\n"
"\tprover.assert_satisfied();\n"
"}\n"
"```"

#: src/halo2/tmp/9-decomposed.md:309
msgid "开始："
msgstr "开始："

#: src/halo2/tmp/9-decomposed.md:338
msgid "short_range_check 约束 `01` 即 `2` 即 `0x02` 是一个 2 位的二进制数。"
msgstr "short_range_check 约束 `01` 即 `2` 即 `0x02` 是一个 2 位的二进制数。"

#: src/halo2/tmp/9-decomposed.md:340
msgid "`MockProver::run` 会调用 `fn configure` 和 `fn synthesize`"
msgstr "`MockProver::run` 会调用 `fn configure` 和 `fn synthesize`"

#: src/halo2/tmp/9-decomposed.md:344
msgid "154 的 16 进制是 `0x9A` :"
msgstr "154 的 16 进制是 `0x9A` :"

#: src/halo2/tmp/9-decomposed.md:345
msgid "将 0x9A 赋值进 `config.running_sum`  col 的第一行"
msgstr "将 0x9A 赋值进 `config.running_sum`  col 的第一行"

#: src/halo2/tmp/9-decomposed.md:346
msgid "调用 `config.assign()` "
msgstr "调用 `config.assign()` "

#: src/halo2/tmp/9-decomposed.md:347
msgid ""
"```rust\n"
"// `self.value`  is  `9a` , is the raw num itself.\n"
"let value = layouter.assign_region(\n"
"\t|| \"Witness value\",\n"
"\t|mut region| {\n"
"\t\tregion.assign_advice(|| \"Witness value\", config.running_sum, 0, || "
"self.value)\n"
"\t},\n"
")?;\n"
"\n"
"config.assign(\n"
"\tlayouter.namespace(|| \"Decompose value\"),\n"
"\tvalue,    // value 0x9a.\n"
"\tself.num_bits, // 8, the len of binary form of the num `154`.\n"
")?;\n"
"```"
msgstr ""
"```rust\n"
"// `self.value`  is  `9a` , is the raw num itself.\n"
"let value = layouter.assign_region(\n"
"\t|| \"Witness value\",\n"
"\t|mut region| {\n"
"\t\tregion.assign_advice(|| \"Witness value\", config.running_sum, 0, || "
"self.value)\n"
"\t},\n"
")?;\n"
"\n"
"config.assign(\n"
"\tlayouter.namespace(|| \"Decompose value\"),\n"
"\tvalue,    // value 0x9a.\n"
"\tself.num_bits, // 8, the len of binary form of the num `154`.\n"
")?;\n"
"```"

#: src/halo2/tmp/9-decomposed.md:363
msgid "config.assign()"
msgstr "config.assign()"

#: src/halo2/tmp/9-decomposed.md:365
msgid "传入参数： "
msgstr "传入参数： "

#: src/halo2/tmp/9-decomposed.md:366
msgid "value: `0x9a.`"
msgstr "value: `0x9a.`"

#: src/halo2/tmp/9-decomposed.md:367
msgid "num_bits :  `8` , 是 154 的二进制形式的长度"
msgstr "num_bits :  `8` , 是 154 的二进制形式的长度"

#: src/halo2/tmp/9-decomposed.md:368
msgid ""
"```rust\n"
"config.assign(\n"
"\tlayouter.namespace(|| \"Decompose value\"),\n"
"\tvalue,    // value 0x9a.\n"
"\tself.num_bits, // 8, the len of binary form of the num `154`.\n"
")?;\n"
"```"
msgstr ""
"```rust\n"
"config.assign(\n"
"\tlayouter.namespace(|| \"Decompose value\"),\n"
"\tvalue,    // value 0x9a.\n"
"\tself.num_bits, // 8, the len of binary form of the num `154`.\n"
")?;\n"
"```"

#: src/halo2/tmp/9-decomposed.md:376
msgid "assign() 函数:"
msgstr "assign() 函数:"

#: src/halo2/tmp/9-decomposed.md:377
msgid "`compute_running_sum`  的计算原理"
msgstr "`compute_running_sum`  的计算原理"

#: src/halo2/tmp/9-decomposed.md:379
msgid ""
"```rust\n"
"fn assign() {\n"
"    // 8 % 3 = 2, 所以最后一个 chunk 只有 2 位， 不足 3 位\n"
"    let partial_len = num_bits % LOOKUP_NUM_BITS; // 8 % 3 = 2\n"
"    \n"
"    /// ...\n"
"\n"
"    let running_sum: Vec<_> = value\n"
"     .value()\n"
"     .map(|&v| compute_running_sum::<_, LOOKUP_NUM_BITS>(v, num_bits)) // "
"0x9a, 8\n"
"     .transpose_vec(expected_vec_len);\n"
"    \n"
"    // println!(\"running_sum {:?}\", running_sum);\n"
"    /* running_sum : \n"
"     Rational(0x98, 0x08)  ,   0x98 / 0x08 = 0x13 = 19 (decimal)\n"
"     Rational(0x80, 0x40)  ,   0x80 / 0x40 = 0x02 = 2 \n"
"     Rational(0x00, 0x200) ,   0x00 / 0x200= 0x00 = 0 (循环到这里结束.)\n"
"    */\n"
"```"
msgstr ""
"```rust\n"
"fn assign() {\n"
"    // 8 % 3 = 2, 所以最后一个 chunk 只有 2 位， 不足 3 位\n"
"    let partial_len = num_bits % LOOKUP_NUM_BITS; // 8 % 3 = 2\n"
"    \n"
"    /// ...\n"
"\n"
"    let running_sum: Vec<_> = value\n"
"     .value()\n"
"     .map(|&v| compute_running_sum::<_, LOOKUP_NUM_BITS>(v, num_bits)) // "
"0x9a, 8\n"
"     .transpose_vec(expected_vec_len);\n"
"    \n"
"    // println!(\"running_sum {:?}\", running_sum);\n"
"    /* running_sum : \n"
"     Rational(0x98, 0x08)  ,   0x98 / 0x08 = 0x13 = 19 (decimal)\n"
"     Rational(0x80, 0x40)  ,   0x80 / 0x40 = 0x02 = 2 \n"
"     Rational(0x00, 0x200) ,   0x00 / 0x200= 0x00 = 0 (循环到这里结束.)\n"
"    */\n"
"```"

#: src/halo2/tmp/9-decomposed.md:399
msgid "将上一步计算出的 Running-sum 值循环放入 `self.running_sum,` col."
msgstr "将上一步计算出的 Running-sum 值循环放入 `self.running_sum,` col."

#: src/halo2/tmp/9-decomposed.md:400
msgid ""
"```rust\n"
"\t// 2. Assign the `running sum` values\n"
"\tfor z_i in running_sum.into_iter() {\n"
"\t\tz = region.assign_advice(\n"
"\t\t\t|| format!(\"assign z_{:?}\", offset),\n"
"\t\t\tself.running_sum,\n"
"\t\t\toffset,\n"
"\t\t\t|| z_i,\n"
"\t\t)?;\n"
"\t\toffset += 1;\n"
"\t}\n"
"```"
msgstr ""
"```rust\n"
"\t// 2. Assign the `running sum` values\n"
"\tfor z_i in running_sum.into_iter() {\n"
"\t\tz = region.assign_advice(\n"
"\t\t\t|| format!(\"assign z_{:?}\", offset),\n"
"\t\t\tself.running_sum,\n"
"\t\t\toffset,\n"
"\t\t\t|| z_i,\n"
"\t\t)?;\n"
"\t\toffset += 1;\n"
"\t}\n"
"```"

#: src/halo2/tmp/9-decomposed.md:413
msgid "处理最高位的 chunk: "
msgstr "处理最高位的 chunk: "

#: src/halo2/tmp/9-decomposed.md:414
msgid "对于 decimal: 154 ， binary: 10|011|010 这个例子"
msgstr "对于 decimal: 154 ， binary: 10|011|010 这个例子"

#: src/halo2/tmp/9-decomposed.md:415
msgid "最高位的 `10|`  是不足 3 位的，所以需要后面补齐 (`short_range_check()`)"
msgstr ""
"最高位的 `10|`  是不足 3 位的，所以需要后面补齐 (`short_range_check()`)"

#: src/halo2/tmp/9-decomposed.md:416
msgid ""
"```rust\n"
"// Handle partial chunk\n"
"// println!(\"value.value(){:?}\", value.value());\n"
"if partial_len > 0 { //  8 % 3 = 2\n"
"\t// The final chunk, value.value():  Trivial(0x9a) i.e. 154\n"
"\tlet final_chunk = value.value().map(|v| {\n"
"\t\tlet v: Vec<_> = v\n"
"\t\t\t.evaluate()\n"
"\t\t\t.to_le_bits()\n"
"\t\t\t.iter()\n"
"\t\t\t.by_vals()\n"
"\t\t\t.take(num_bits)\n"
"\t\t\t.collect();\n"
"\t\t\n"
"\t\t//  println!(\"v .. {:?}\", v) : [false, true, false, true, true, false, "
"false, true]    \n"
"\t\t//  i.e. [01011001] <-  这个是低位在前, 高位在后. 因为 154 的二进制表示"
"是 [10011010]\n"
"\t\tlet final_chunk = &v[(num_bits - partial_len)..num_bits];\n"
"\t\t// final_chunk: [false, true]    ;      println!(\"final_chunk{:?}\", "
"final_chunk);\n"
"\t\t\n"
"\t\tAssigned::from(F::from(lebs2ip(final_chunk))) // 0x02\n"
"\t});\n"
"\t// final_chunk: 0x02,  i.e. `10` in binary format.\n"
"\tself.short_range_check(&mut region, offset - 1, final_chunk, "
"partial_len)?;\n"
"}\n"
"```"
msgstr ""
"```rust\n"
"// Handle partial chunk\n"
"// println!(\"value.value(){:?}\", value.value());\n"
"if partial_len > 0 { //  8 % 3 = 2\n"
"\t// The final chunk, value.value():  Trivial(0x9a) i.e. 154\n"
"\tlet final_chunk = value.value().map(|v| {\n"
"\t\tlet v: Vec<_> = v\n"
"\t\t\t.evaluate()\n"
"\t\t\t.to_le_bits()\n"
"\t\t\t.iter()\n"
"\t\t\t.by_vals()\n"
"\t\t\t.take(num_bits)\n"
"\t\t\t.collect();\n"
"\t\t\n"
"\t\t//  println!(\"v .. {:?}\", v) : [false, true, false, true, true, false, "
"false, true]    \n"
"\t\t//  i.e. [01011001] <-  这个是低位在前, 高位在后. 因为 154 的二进制表示"
"是 [10011010]\n"
"\t\tlet final_chunk = &v[(num_bits - partial_len)..num_bits];\n"
"\t\t// final_chunk: [false, true]    ;      println!(\"final_chunk{:?}\", "
"final_chunk);\n"
"\t\t\n"
"\t\tAssigned::from(F::from(lebs2ip(final_chunk))) // 0x02\n"
"\t});\n"
"\t// final_chunk: 0x02,  i.e. `10` in binary format.\n"
"\tself.short_range_check(&mut region, offset - 1, final_chunk, "
"partial_len)?;\n"
"}\n"
"```"

#: src/halo2/tmp/ZKP-APP.md:3
msgid "Applications with halo2."
msgstr "Applications with halo2."

#: src/halo2/tmp/Zordle.md:4
msgid "[Motivation：](#motivation)"
msgstr "[Motivation：](#motivation)"

#: src/halo2/tmp/Zordle.md:5
msgid "[BUILD & user flow](#build--user-flow)"
msgstr "[BUILD & user flow](#build--user-flow)"

#: src/halo2/tmp/Zordle.md:6
msgid "[Circuit inputs](#circuit-inputs)"
msgstr "[Circuit inputs](#circuit-inputs)"

#: src/halo2/tmp/Zordle.md:7
msgid "[lookup table Versus R1CS](#lookup-table-versus-r1cs)"
msgstr "[lookup table Versus R1CS](#lookup-table-versus-r1cs)"

#: src/halo2/tmp/Zordle.md:8
msgid "[build demo](#build-demo)"
msgstr "[build demo](#build-demo)"

#: src/halo2/tmp/Zordle.md:9
msgid "[1. create a `proof.bin`](#1-create-a-proofbin)"
msgstr "[1. create a `proof.bin`](#1-create-a-proofbin)"

#: src/halo2/tmp/Zordle.md:10
msgid "[2. generate public params](#2-generate-public-params)"
msgstr "[2. generate public params](#2-generate-public-params)"

#: src/halo2/tmp/Zordle.md:11
msgid "[3. gen proof (if guessed)](#3-gen-proof-if-guessed)"
msgstr "[3. gen proof (if guessed)](#3-gen-proof-if-guessed)"

#: src/halo2/tmp/Zordle.md:12
msgid "[verify proof](#verify-proof)"
msgstr "[verify proof](#verify-proof)"

#: src/halo2/tmp/Zordle.md:13
msgid "[wasm](#wasm)"
msgstr "[wasm](#wasm)"

#: src/halo2/tmp/Zordle.md:14
msgid ""
"[files directory & Code explanation](#files-directory--code-explanation)"
msgstr ""
"[files directory & Code explanation](#files-directory--code-explanation)"

#: src/halo2/tmp/Zordle.md:15
msgid "[Lookup table - table.rs](#lookup-table---tablers)"
msgstr "[Lookup table - table.rs](#lookup-table---tablers)"

#: src/halo2/tmp/Zordle.md:16
msgid "[dict](#dict)"
msgstr "[dict](#dict)"

#: src/halo2/tmp/Zordle.md:17
msgid "[wordle.rs](#wordlers)"
msgstr "[wordle.rs](#wordlers)"

#: src/halo2/tmp/Zordle.md:18 src/zk-everything/zk-everything-joe/Spartan.md:22
msgid "[Circuit](#circuit)"
msgstr "[Circuit](#circuit)"

#: src/halo2/tmp/Zordle.md:20
msgid "[QA：](#qa)"
msgstr "[QA：](#qa)"

#: src/halo2/tmp/Zordle.md:21 src/halo2/tmp/Hammster.md:8
#: src/zk-everything/zk-everything-joe/Spartan.md:36
msgid "[References](#references)"
msgstr "[References](#references)"

#: src/halo2/tmp/Zordle.md:25
msgid ""
"**Wordle**：是一个猜词游戏，玩家试图猜测一个 5 个字母的单词。每当玩家猜一个单"
"词时，游戏会告诉玩家哪些字母是正确的（用绿色表示），哪些字母在单词中但位置不"
"对（用黄色表示），以及哪些字母不在单词中（用灰色表示）"
msgstr ""
"**Wordle**：是一个猜词游戏，玩家试图猜测一个 5 个字母的单词。每当玩家猜一个单"
"词时，游戏会告诉玩家哪些字母是正确的（用绿色表示），哪些字母在单词中但位置不"
"对（用黄色表示），以及哪些字母不在单词中（用灰色表示）"

#: src/halo2/tmp/Zordle.md:27
msgid "Motivation："
msgstr "Motivation："

#: src/halo2/tmp/Zordle.md:29
msgid "在某些时候，作者与一些朋友交流他们解出的 Wordle 网格："
msgstr "在某些时候，作者与一些朋友交流他们解出的 Wordle 网格："

#: src/halo2/tmp/Zordle.md:31
msgid "![](imgs/zordle/Pasted%20image%2020230919103506.png)"
msgstr "![](imgs/zordle/Pasted%20image%2020230919103506.png)"

#: src/halo2/tmp/Zordle.md:33
msgid ""
"然而，这些表情符表格有一个致命缺陷：玩家可以在游戏结束后编辑他们的网格，让自"
"己看起来比原来聪明得多。我总是怀疑我的朋友们是否真的得到了他们声称的分数！快"
"使用 zk-snark！[^1]"
msgstr ""
"然而，这些表情符表格有一个致命缺陷：玩家可以在游戏结束后编辑他们的网格，让自"
"己看起来比原来聪明得多。我总是怀疑我的朋友们是否真的得到了他们声称的分数！快"
"使用 zk-snark！[^1]"

#: src/halo2/tmp/Zordle.md:35
msgid ""
"在 Zordle 中，在解决了当天的 Wordle 问题后，用户还会为其表格和 Guess word 生"
"成一个 ZK Proof，证明他们知道与他们共享的一组表情符号框完全对应的一组单词！"
"（In Zordle, after solving the day's Wordle, a user additionally generates a "
"ZK proof attesting that they know the set of words that perfectly correspond "
"to a set of emoji boxes that they're sharing!）"
msgstr ""
"在 Zordle 中，在解决了当天的 Wordle 问题后，用户还会为其表格和 Guess word 生"
"成一个 ZK Proof，证明他们知道与他们共享的一组表情符号框完全对应的一组单词！"
"（In Zordle, after solving the day's Wordle, a user additionally generates a "
"ZK proof attesting that they know the set of words that perfectly correspond "
"to a set of emoji boxes that they're sharing!）"

#: src/halo2/tmp/Zordle.md:37
msgid "BUILD & user flow"
msgstr "BUILD & user flow"

#: src/halo2/tmp/Zordle.md:39
msgid "Generate Proof takes about 1 min"
msgstr "Generate Proof takes about 1 min"

#: src/halo2/tmp/Zordle.md:40
msgid "Verify Proof takes about 20s"
msgstr "Verify Proof takes about 20s"

#: src/halo2/tmp/Zordle.md:41
msgid "Then user can check the proof on chain (IPFS)"
msgstr "Then user can check the proof on chain (IPFS)"

#: src/halo2/tmp/Zordle.md:42
msgid "And anyone can verify it"
msgstr "And anyone can verify it"

#: src/halo2/tmp/Zordle.md:44
msgid "![](imgs/zordle/2023-09-18-151216.png)"
msgstr "![](imgs/zordle/2023-09-18-151216.png)"

#: src/halo2/tmp/Zordle.md:52
msgid "**Inspect ZK Proof:**"
msgstr "**Inspect ZK Proof:**"

#: src/halo2/tmp/Zordle.md:54
msgid ""
"URL(onchain): https://ipfs.io/ipfs/"
"QmWuSo5ivAXm8M7Mi7hPW5WHFXZ55Vjt651Cw6reL1VM9w"
msgstr ""
"URL(onchain): https://ipfs.io/ipfs/"
"QmWuSo5ivAXm8M7Mi7hPW5WHFXZ55Vjt651Cw6reL1VM9w"

#: src/halo2/tmp/Zordle.md:55
msgid "When Access the URL, which is a JSON file stored on IPFS : "
msgstr "When Access the URL, which is a JSON file stored on IPFS : "

#: src/halo2/tmp/Zordle.md:56
msgid ""
"```JSON\n"
"{\n"
"  \"solutionIndex\":625,\n"
"  \"proof\":[\n"
"    109,177,255,176,116,185,157,128,237,146,45,233, ... ,\n"
"    247,208,138,100,48,148,37,223,95,80,14,64,239,78, ... , \n"
"    // The proof is very long ,...,\n"
"    105,46,209,248,49,117,197,164,130,72,157,40,33,243,21,39,..,\n"
"    ],\n"
"  \"diffs\":[[[0,1,0,0,0],[0,1,1,1,0]],[[0,1,0,0,0],[1,1,0,0,0]],"
"[[1,1,1,1,0],[1,1,1,1,0]],[[1,1,1,1,1],[1,1,1,1,1]],[[1,1,1,1,1],"
"[1,1,1,1,1]],[[1,1,1,1,1],[1,1,1,1,1]]]}\n"
"```"
msgstr ""
"```JSON\n"
"{\n"
"  \"solutionIndex\":625,\n"
"  \"proof\":[\n"
"    109,177,255,176,116,185,157,128,237,146,45,233, ... ,\n"
"    247,208,138,100,48,148,37,223,95,80,14,64,239,78, ... , \n"
"    // The proof is very long ,...,\n"
"    105,46,209,248,49,117,197,164,130,72,157,40,33,243,21,39,..,\n"
"    ],\n"
"  \"diffs\":[[[0,1,0,0,0],[0,1,1,1,0]],[[0,1,0,0,0],[1,1,0,0,0]],"
"[[1,1,1,1,0],[1,1,1,1,0]],[[1,1,1,1,1],[1,1,1,1,1]],[[1,1,1,1,1],"
"[1,1,1,1,1]],[[1,1,1,1,1],[1,1,1,1,1]]]}\n"
"```"

#: src/halo2/tmp/Zordle.md:68
msgid "**Copy URL to clipboard ↗️ :**"
msgstr "**Copy URL to clipboard ↗️ :**"

#: src/halo2/tmp/Zordle.md:69
msgid ""
"```bash\n"
"https://zordle.xyz/verify/QmWuSo5ivAXm8M7Mi7hPW5WHFXZ55Vjt651Cw6reL1VM9w\n"
"# 👆🏻 with this url, anyone can validate the ZKP proof to ensure that the "
"individual possesses the correct solution, without actually knowing the "
"answer to the Wordle.\n"
"```"
msgstr ""
"```bash\n"
"https://zordle.xyz/verify/QmWuSo5ivAXm8M7Mi7hPW5WHFXZ55Vjt651Cw6reL1VM9w\n"
"# 👆🏻 with this url, anyone can validate the ZKP proof to ensure that the "
"individual possesses the correct solution, without actually knowing the "
"answer to the Wordle.\n"
"```"

#: src/halo2/tmp/Zordle.md:74
msgid "Circuit inputs"
msgstr "Circuit inputs"

#: src/halo2/tmp/Zordle.md:76
msgid "**Public inputs**"
msgstr "**Public inputs**"

#: src/halo2/tmp/Zordle.md:77
msgid "The solution word"
msgstr "The solution word"

#: src/halo2/tmp/Zordle.md:78
msgid ""
"The grid of boxes of 6 words x 5 slots (one for each letter): each cell in "
"the grid is either green, yellow or grey"
msgstr ""
"The grid of boxes of 6 words x 5 slots (one for each letter): each cell in "
"the grid is either green, yellow or grey"

#: src/halo2/tmp/Zordle.md:79
msgid ""
" : the letter is in the same relative position as the letter in Solution"
msgstr ""
" : the letter is in the same relative position as the letter in Solution"

#: src/halo2/tmp/Zordle.md:80
msgid "ye"
msgstr "ye"

#: src/halo2/tmp/Zordle.md:80
msgid " : the letter is in Solution but the wrong relative position"
msgstr " : the letter is in Solution but the wrong relative position"

#: src/halo2/tmp/Zordle.md:81
msgid "rey"
msgstr "rey"

#: src/halo2/tmp/Zordle.md:81
msgid " : wrong letter, not in the solution."
msgstr " : wrong letter, not in the solution."

#: src/halo2/tmp/Zordle.md:83
msgid "like: "
msgstr "like: "

#: src/halo2/tmp/Zordle.md:84
msgid ""
"```\n"
"1. solution word: \n"
"    \"fever\"\n"
"\n"
"2. grid of boxes of 6 words x 5 slots\n"
"    🟥🟥🟨🟥🟩\n"
"\t🟥🟥🟩🟨🟩\n"
"\t🟩🟩🟩🟩🟩\n"
"\t🟩🟩🟩🟩🟩\n"
"\t🟩🟩🟩🟩🟩\n"
"\t🟩🟩🟩🟩🟩\n"
"```"
msgstr ""
"```\n"
"1. solution word: \n"
"    \"fever\"\n"
"\n"
"2. grid of boxes of 6 words x 5 slots\n"
"    🟥🟥🟨🟥🟩\n"
"\t🟥🟥🟩🟨🟩\n"
"\t🟩🟩🟩🟩🟩\n"
"\t🟩🟩🟩🟩🟩\n"
"\t🟩🟩🟩🟩🟩\n"
"\t🟩🟩🟩🟩🟩\n"
"```"

#: src/halo2/tmp/Zordle.md:97
msgid "**Private inputs**"
msgstr "**Private inputs**"

#: src/halo2/tmp/Zordle.md:98
msgid "6 words of 5 letters each  (6 个单词，每个单词 5 个字母)"
msgstr "6 words of 5 letters each  (6 个单词，每个单词 5 个字母)"

#: src/halo2/tmp/Zordle.md:100
msgid ""
"我们注意到：Wordle 的 inputs 结构使得每个 guess(猜测) 都完全独立于 others - "
"如果一个猜测本身有效，那么在游戏中也总是有效，反之亦然。这表明电路的一种清晰"
"结构是：**make an individual region for each guess.** "
msgstr ""
"我们注意到：Wordle 的 inputs 结构使得每个 guess(猜测) 都完全独立于 others - "
"如果一个猜测本身有效，那么在游戏中也总是有效，反之亦然。这表明电路的一种清晰"
"结构是：**make an individual region for each guess.** "

#: src/halo2/tmp/Zordle.md:102
msgid ""
"对于这种每个 guess 一个 region 的构建中，让我们考虑每个 guess 需要哪些检查："
msgstr ""
"对于这种每个 guess 一个 region 的构建中，让我们考虑每个 guess 需要哪些检查："

#: src/halo2/tmp/Zordle.md:103
msgid "考虑 该 guess 的 grid  🟥🟥🟩🟨🟩   和 word: \"lover\""
msgstr "考虑 该 guess 的 grid  🟥🟥🟩🟨🟩   和 word: \"lover\""

#: src/halo2/tmp/Zordle.md:104
msgid "The guess 必须是一个 5 个字母的英语单词 （LOOKUP）"
msgstr "The guess 必须是一个 5 个字母的英语单词 （LOOKUP）"

#: src/halo2/tmp/Zordle.md:105
msgid ""
"如果格子上的位置是绿色 🟩，则 guess word 相应位置的字母必须与 solution 的字母"
"匹配"
msgstr ""
"如果格子上的位置是绿色 🟩，则 guess word 相应位置的字母必须与 solution 的字母"
"匹配"

#: src/halo2/tmp/Zordle.md:106
msgid "如果格子是黄色 🟨，类似的检查也会进行"
msgstr "如果格子是黄色 🟨，类似的检查也会进行"

#: src/halo2/tmp/Zordle.md:107
msgid "如果格子不是绿色、黄色，猜测相应位置的字母不能与解答的字母匹配"
msgstr "如果格子不是绿色、黄色，猜测相应位置的字母不能与解答的字母匹配"

#: src/halo2/tmp/Zordle.md:109
msgid "lookup table Versus R1CS"
msgstr "lookup table Versus R1CS"

#: src/halo2/tmp/Zordle.md:111
msgid ""
"通常，在 R1CS 电路中，对于存在性证明（比如 Nullifier 的 commitment），需要使"
"用 Merkle Proof 来检查 guess word 是否为字典真实存在的单词：创建一个所有单词"
"（12000+）的 Merkle 树，然后 witness the `Merkle path` of your guess in the "
"tree。"
msgstr ""
"通常，在 R1CS 电路中，对于存在性证明（比如 Nullifier 的 commitment），需要使"
"用 Merkle Proof 来检查 guess word 是否为字典真实存在的单词：创建一个所有单词"
"（12000+）的 Merkle 树，然后 witness the `Merkle path` of your guess in the "
"tree。"

#: src/halo2/tmp/Zordle.md:113
msgid ""
"然而，在 PLONK/Halo 2 中，可以使用查找表！虽然以这种方式使用查找表不是特别高"
"效（因为您的电路现在将具有 12000+ 行），but it is a cool way .."
msgstr ""
"然而，在 PLONK/Halo 2 中，可以使用查找表！虽然以这种方式使用查找表不是特别高"
"效（因为您的电路现在将具有 12000+ 行），but it is a cool way .."

#: src/halo2/tmp/Zordle.md:115
msgid "build demo"
msgstr "build demo"

#: src/halo2/tmp/Zordle.md:117
msgid "Workflow:"
msgstr "Workflow:"

#: src/halo2/tmp/Zordle.md:118
msgid ""
"generate params files like `params.bin` (like verification_key / "
"proving_key ...)"
msgstr ""
"generate params files like `params.bin` (like verification_key / "
"proving_key ...)"

#: src/halo2/tmp/Zordle.md:119
msgid "use your wordle answer to generate proof."
msgstr "use your wordle answer to generate proof."

#: src/halo2/tmp/Zordle.md:120
msgid "verify the proof you generated."
msgstr "verify the proof you generated."

#: src/halo2/tmp/Zordle.md:122
msgid "1. create a `proof.bin`"
msgstr "1. create a `proof.bin`"

#: src/halo2/tmp/Zordle.md:124
msgid ""
"Firstly, we need to manually create a `proof.bin` file ourselves, otherwise "
"the `$ cargo run` command will report an error."
msgstr ""
"Firstly, we need to manually create a `proof.bin` file ourselves, otherwise "
"the `$ cargo run` command will report an error."

#: src/halo2/tmp/Zordle.md:131
msgid "2. generate public params"
msgstr "2. generate public params"

#: src/halo2/tmp/Zordle.md:143
msgid "3. gen proof (if guessed)"
msgstr "3. gen proof (if guessed)"

#: src/halo2/tmp/Zordle.md:145
msgid ""
"```bash\n"
"$ cargo run \n"
"play  # correct input : fluff\n"
"Welcome to zk wordle!\n"
"Enter play to play the game, verify to check a proof, or write to generate a "
"new params file\n"
"play\n"
"Enter a word:\n"
"proof\n"
"🟥🟥🟥🟥🟩\n"
"Enter a word:\n"
"leave\n"
"🟨🟥🟥🟥🟥\n"
"\n"
"Enter a word:\n"
"belif\n"
"🟥🟥🟨🟥🟩\n"
"Enter a word:\n"
"Foulf\n"
"🟥🟥🟩🟨🟩\n"
"\n"
"// ... many rounds...\n"
"Enter a word:\n"
"fluff\n"
"🟩🟩🟩🟩🟩\n"
"You win! Generating ZK proof...\n"
"Successfully generated witness\n"
"Successfully generated proving key\n"
"Successfully wrote proof to proof.bin\n"
"Verifying proof for final word fluff\n"
"Share Sheet:\n"
"🟩🟩🟩🟩🟩\n"
"🟩🟩🟩🟩🟩\n"
"🟩🟩🟩🟩🟩\n"
"🟩🟩🟩🟩🟩\n"
"🟩🟩🟩🟩🟩\n"
"🟩🟩🟩🟩🟩\n"
"Proof OK!\n"
"\n"
"# or You lose! and exit.\n"
"```"
msgstr ""
"```bash\n"
"$ cargo run \n"
"play  # correct input : fluff\n"
"Welcome to zk wordle!\n"
"Enter play to play the game, verify to check a proof, or write to generate a "
"new params file\n"
"play\n"
"Enter a word:\n"
"proof\n"
"🟥🟥🟥🟥🟩\n"
"Enter a word:\n"
"leave\n"
"🟨🟥🟥🟥🟥\n"
"\n"
"Enter a word:\n"
"belif\n"
"🟥🟥🟨🟥🟩\n"
"Enter a word:\n"
"Foulf\n"
"🟥🟥🟩🟨🟩\n"
"\n"
"// ... many rounds...\n"
"Enter a word:\n"
"fluff\n"
"🟩🟩🟩🟩🟩\n"
"You win! Generating ZK proof...\n"
"Successfully generated witness\n"
"Successfully generated proving key\n"
"Successfully wrote proof to proof.bin\n"
"Verifying proof for final word fluff\n"
"Share Sheet:\n"
"🟩🟩🟩🟩🟩\n"
"🟩🟩🟩🟩🟩\n"
"🟩🟩🟩🟩🟩\n"
"🟩🟩🟩🟩🟩\n"
"🟩🟩🟩🟩🟩\n"
"🟩🟩🟩🟩🟩\n"
"Proof OK!\n"
"\n"
"# or You lose! and exit.\n"
"```"

#: src/halo2/tmp/Zordle.md:186
msgid "verify proof"
msgstr "verify proof"

#: src/halo2/tmp/Zordle.md:188
msgid "Then we acn verify"
msgstr "Then we acn verify"

#: src/halo2/tmp/Zordle.md:206
msgid ""
"在我找到了正确答案并生成 proof 的过程中，如果我强制退出 generate_proof 程序，"
"在验证时："
msgstr ""
"在我找到了正确答案并生成 proof 的过程中，如果我强制退出 generate_proof 程序，"
"在验证时："

#: src/halo2/tmp/Zordle.md:219
msgid "会出现奇怪的 sheet，且 verification 不通过，原因不明"
msgstr "会出现奇怪的 sheet，且 verification 不通过，原因不明"

#: src/halo2/tmp/Zordle.md:221
msgid "wasm"
msgstr "wasm"

#: src/halo2/tmp/Zordle.md:223
msgid "【EDITING】"
msgstr "【EDITING】"

#: src/halo2/tmp/Zordle.md:225
msgid "files directory & Code explanation"
msgstr "files directory & Code explanation"

#: src/halo2/tmp/Zordle.md:227
msgid "`$ tree` show the code structure : "
msgstr "`$ tree` show the code structure : "

#: src/halo2/tmp/Zordle.md:229
msgid ""
"```rust\n"
"├── lib.rs\n"
"├── main.rs // play(gen prove-prove_play) verify  write_params\n"
"├── wasm.rs \n"
"├── wordle\n"
"│   ├── wordle\n"
"│   │   ├── dict.json  // 12972 个英文单词， 如 “white”\n"
"│   │   ├── dict.rs    // [738547, 742032, ..., 760311, 760617, 760805 ..\n"
"│   │   ├── is_zero.rs // IsZeroChip\n"
"│   │   ├── table.rs   // Lookup table, 将 12972 个 5 字母 word 放入查找表\n"
"│   │   └── utils.rs   // word_to_chars, compute_diff..\n"
"│   └── wordle.rs\n"
"└── wordle.rs  // pub mod wordle;\n"
"```"
msgstr ""
"```rust\n"
"├── lib.rs\n"
"├── main.rs // play(gen prove-prove_play) verify  write_params\n"
"├── wasm.rs \n"
"├── wordle\n"
"│   ├── wordle\n"
"│   │   ├── dict.json  // 12972 个英文单词， 如 “white”\n"
"│   │   ├── dict.rs    // [738547, 742032, ..., 760311, 760617, 760805 ..\n"
"│   │   ├── is_zero.rs // IsZeroChip\n"
"│   │   ├── table.rs   // Lookup table, 将 12972 个 5 字母 word 放入查找表\n"
"│   │   └── utils.rs   // word_to_chars, compute_diff..\n"
"│   └── wordle.rs\n"
"└── wordle.rs  // pub mod wordle;\n"
"```"

#: src/halo2/tmp/Zordle.md:244
msgid "Lookup table - table.rs"
msgstr "Lookup table - table.rs"

#: src/halo2/tmp/Zordle.md:246
msgid ""
"lol perhaps best thought LOOKUP table of as a giant fixed set(constant set) "
"instead of a circuit table column."
msgstr ""
"lol perhaps best thought LOOKUP table of as a giant fixed set(constant set) "
"instead of a circuit table column."

#: src/halo2/tmp/Zordle.md:249
msgid "作用： 将 12972 个 `5-letter` words 加载到 LOOKUP 查找表里。"
msgstr "作用： 将 12972 个 `5-letter` words 加载到 LOOKUP 查找表里。"

#: src/halo2/tmp/Zordle.md:250
msgid ""
"这些 words 的形式类似： `vec![738547, 742032, ...  , 760311, 760617, "
"760805,... `"
msgstr ""
"这些 words 的形式类似： `vec![738547, 742032, ...  , 760311, 760617, "
"760805,... `"

#: src/halo2/tmp/Zordle.md:252
msgid ""
"```rust\n"
"#[derive(Serialize, Deserialize)]\n"
"struct Dict {\n"
"  words: Vec<String>,\n"
"}\n"
"impl<F: PrimeField> DictTableConfig<F> {\n"
"  pub(super) fn load(&self, layouter: &mut impl Layouter<F>) -> Result<(), "
"Error> {\n"
"    // 12972 个 5-letter words, like [783431, 2149761, 11454874]..\n"
"    let mut words = get_dict(); \n"
"    words.push(0);\n"
"\n"
"    layouter.assign_table(\n"
"      || \"load dictionary-check table\",\n"
"      |mut table| {\n"
"        let mut offset = 0;\n"
"        for word in words.iter() {\n"
"          table.assign_cell(\n"
"            || \"num_bits\",\n"
"            self.value,\n"
"            offset,\n"
"            || Value::known(F::from(word.clone() as u64)),\n"
"          )?;\n"
"          offset += 1; \n"
"        }\n"
"```"
msgstr ""
"```rust\n"
"#[derive(Serialize, Deserialize)]\n"
"struct Dict {\n"
"  words: Vec<String>,\n"
"}\n"
"impl<F: PrimeField> DictTableConfig<F> {\n"
"  pub(super) fn load(&self, layouter: &mut impl Layouter<F>) -> Result<(), "
"Error> {\n"
"    // 12972 个 5-letter words, like [783431, 2149761, 11454874]..\n"
"    let mut words = get_dict(); \n"
"    words.push(0);\n"
"\n"
"    layouter.assign_table(\n"
"      || \"load dictionary-check table\",\n"
"      |mut table| {\n"
"        let mut offset = 0;\n"
"        for word in words.iter() {\n"
"          table.assign_cell(\n"
"            || \"num_bits\",\n"
"            self.value,\n"
"            offset,\n"
"            || Value::known(F::from(word.clone() as u64)),\n"
"          )?;\n"
"          offset += 1; \n"
"        }\n"
"```"

#: src/halo2/tmp/Zordle.md:278
msgid "dict"
msgstr "dict"

#: src/halo2/tmp/Zordle.md:280
msgid "`wordle/wordle/dict.rs` : "
msgstr "`wordle/wordle/dict.rs` : "

#: src/halo2/tmp/Zordle.md:293
msgid "`wordle/wordle/dict.json` : \\``"
msgstr "`wordle/wordle/dict.json` : \\``"

#: src/halo2/tmp/Zordle.md:295
msgid ""
"```rust\n"
"{\"words\": [\n"
"    \"aahed\",\n"
"    \"aalii\",\n"
"    \"aargh\",\n"
"    \"aarti\",\n"
"    // ....\n"
"    // ....\n"
"    // ....\n"
"}\n"
"```"
msgstr ""
"```rust\n"
"{\"words\": [\n"
"    \"aahed\",\n"
"    \"aalii\",\n"
"    \"aargh\",\n"
"    \"aarti\",\n"
"    // ....\n"
"    // ....\n"
"    // ....\n"
"}\n"
"```"

#: src/halo2/tmp/Zordle.md:307
msgid "wordle.rs"
msgstr "wordle.rs"

#: src/halo2/tmp/Zordle.md:309
msgid ""
"```rust\n"
"#[derive(Debug, Clone)]\n"
"/// A range-constrained value in the circuit produced by the "
"RangeCheckConfig.\n"
"struct RangeConstrained<F: PrimeField>(AssignedCell<Assigned<F>, F>);\n"
"```"
msgstr ""
"```rust\n"
"#[derive(Debug, Clone)]\n"
"/// A range-constrained value in the circuit produced by the "
"RangeCheckConfig.\n"
"struct RangeConstrained<F: PrimeField>(AssignedCell<Assigned<F>, F>);\n"
"```"

#: src/halo2/tmp/Zordle.md:315
msgid "Constraints (custom gate)"
msgstr "Constraints (custom gate)"

#: src/halo2/tmp/Zordle.md:317
msgid "![](imgs/zordle/Pasted%20image%2020230919161116.png)"
msgstr "![](imgs/zordle/Pasted%20image%2020230919161116.png)"

#: src/halo2/tmp/Zordle.md:319
msgid ""
"如上图，在 Custom gate 编写电路约束时，会为**每一个 Guess word** 在 region 里"
"分配如上图这样一个布局。"
msgstr ""
"如上图，在 Custom gate 编写电路约束时，会为**每一个 Guess word** 在 region 里"
"分配如上图这样一个布局。"

#: src/halo2/tmp/Zordle.md:320
msgid "本轮 Guess word 是  $\\textcolor{green}{f}\\textcolor{orange}{u}nky$ "
msgstr "本轮 Guess word 是  $\\textcolor{green}{f}\\textcolor{orange}{u}nky$ "

#: src/halo2/tmp/Zordle.md:321
msgid "Solution(final_word) 是  $fluff$"
msgstr "Solution(final_word) 是  $fluff$"

#: src/halo2/tmp/Zordle.md:322
msgid "电路会去计算 & 约束各种配置 ..."
msgstr "电路会去计算 & 约束各种配置 ..."

#: src/halo2/tmp/Zordle.md:324
msgid "assign to region"
msgstr "assign to region"

#: src/halo2/tmp/Zordle.md:326
msgid ""
"```rust\n"
"/// ......\n"
"// make an individual region for each guess.\n"
"for i in 0..WORD_LEN {\n"
"\t// guess word, provided by the user. place on the row-0\n"
"\tregion.assign_advice(|| \"input word characters\", self.chars[i], 0, || "
"chars[i])?;\n"
"\t// solution word, provided by the user. place on the row-1\n"
"\tregion.assign_advice_from_instance(|| \"final word characters\",\n"
"\t\tself.final_word_chars_instance, i, self.chars[i], 1)?;\n"
"\t// diff_green: if guess[i] matches solution[i], then diff_green is 0, "
"Otherwise is the distance between 2 chars\n"
"\tregion.assign_advice(|| \"diff_green\", self.chars[i], 2, || "
"diffs_green[i])?;\n"
"\t// diff_yellow: if guess[i] ∈ solution, then diff_yellow is 0, Otherwise "
"is the distance multiplication\n"
"\tregion.assign_advice(|| \"diff_yellow\", self.chars[i], 3, || "
"diffs_yellow[i])?;\n"
"/// ......\n"
"```"
msgstr ""
"```rust\n"
"/// ......\n"
"// make an individual region for each guess.\n"
"for i in 0..WORD_LEN {\n"
"\t// guess word, provided by the user. place on the row-0\n"
"\tregion.assign_advice(|| \"input word characters\", self.chars[i], 0, || "
"chars[i])?;\n"
"\t// solution word, provided by the user. place on the row-1\n"
"\tregion.assign_advice_from_instance(|| \"final word characters\",\n"
"\t\tself.final_word_chars_instance, i, self.chars[i], 1)?;\n"
"\t// diff_green: if guess[i] matches solution[i], then diff_green is 0, "
"Otherwise is the distance between 2 chars\n"
"\tregion.assign_advice(|| \"diff_green\", self.chars[i], 2, || "
"diffs_green[i])?;\n"
"\t// diff_yellow: if guess[i] ∈ solution, then diff_yellow is 0, Otherwise "
"is the distance multiplication\n"
"\tregion.assign_advice(|| \"diff_yellow\", self.chars[i], 3, || "
"diffs_yellow[i])?;\n"
"/// ......\n"
"```"

#: src/halo2/tmp/Zordle.md:343
#: src/zk-everything/zk-everything-joe/Spartan.md:192
msgid "Circuit"
msgstr "Circuit"

#: src/halo2/tmp/Zordle.md:345
msgid ""
"```rust\n"
"pub struct WordleCircuit<F: PrimeField> {\n"
"    pub poly_words: [Value<Assigned<F>>; WORD_COUNT],\n"
"    pub word_chars: [[Value<Assigned<F>>; WORD_LEN]; WORD_COUNT],\n"
"    pub word_diffs_green: [[Value<F>; WORD_LEN]; WORD_COUNT],\n"
"    pub word_diffs_yellow: [[Value<F>; WORD_LEN]; WORD_COUNT],\n"
"}\n"
"\n"
"impl<F: PrimeField> Circuit<F> for WordleCircuit<F>{\n"
"    fn without_witnesses(&self) -> Self { .. }\n"
"    fn configure(meta: &mut ConstraintSystem<F>) -> Self::Config { .. }\n"
"    fn synthesize(\n"
"        &self,\n"
"        config: Self::Config,\n"
"        mut layouter: impl Layouter<F>,\n"
"    ) -> Result<(), Error> {\n"
"        config.table.load(&mut layouter)?;\n"
"\n"
"        for idx in 0..WORD_COUNT {\n"
"            // println!(\"idx {:?} diffs_green: {:?}\", idx, self."
"word_diffs_green[idx]);\n"
"            config.assign_word(\n"
"                layouter.namespace(|| format!(\"word {}\", idx)),\n"
"                self.poly_words[idx],\n"
"                self.word_chars[idx],\n"
"                self.word_diffs_green[idx],\n"
"                self.word_diffs_yellow[idx],\n"
"                idx,\n"
"            )?;\n"
"        }\n"
"        Ok(())\n"
"    }\n"
"```"
msgstr ""
"```rust\n"
"pub struct WordleCircuit<F: PrimeField> {\n"
"    pub poly_words: [Value<Assigned<F>>; WORD_COUNT],\n"
"    pub word_chars: [[Value<Assigned<F>>; WORD_LEN]; WORD_COUNT],\n"
"    pub word_diffs_green: [[Value<F>; WORD_LEN]; WORD_COUNT],\n"
"    pub word_diffs_yellow: [[Value<F>; WORD_LEN]; WORD_COUNT],\n"
"}\n"
"\n"
"impl<F: PrimeField> Circuit<F> for WordleCircuit<F>{\n"
"    fn without_witnesses(&self) -> Self { .. }\n"
"    fn configure(meta: &mut ConstraintSystem<F>) -> Self::Config { .. }\n"
"    fn synthesize(\n"
"        &self,\n"
"        config: Self::Config,\n"
"        mut layouter: impl Layouter<F>,\n"
"    ) -> Result<(), Error> {\n"
"        config.table.load(&mut layouter)?;\n"
"\n"
"        for idx in 0..WORD_COUNT {\n"
"            // println!(\"idx {:?} diffs_green: {:?}\", idx, self."
"word_diffs_green[idx]);\n"
"            config.assign_word(\n"
"                layouter.namespace(|| format!(\"word {}\", idx)),\n"
"                self.poly_words[idx],\n"
"                self.word_chars[idx],\n"
"                self.word_diffs_green[idx],\n"
"                self.word_diffs_yellow[idx],\n"
"                idx,\n"
"            )?;\n"
"        }\n"
"        Ok(())\n"
"    }\n"
"```"

#: src/halo2/tmp/Zordle.md:381
msgid "Circuit :"
msgstr "Circuit :"

#: src/halo2/tmp/Zordle.md:385
msgid "QA："
msgstr "QA："

#: src/halo2/tmp/Zordle.md:389
msgid ""
"Why Rotation(-2)？就具体在这个 wordle 电路里面，你试着理解和推理下，为什么要"
"使用 Rotation(-2)"
msgstr ""
"Why Rotation(-2)？就具体在这个 wordle 电路里面，你试着理解和推理下，为什么要"
"使用 Rotation(-2)"

#: src/halo2/tmp/Zordle.md:391
msgid ""
"在给出的 `WordCheckConfig` 电路配置中，`Rotation(-2)` 被用于几个地方。这些用"
"途都与字符差异和颜色判断有关。让我们深入挖掘并理解它的具体用途。"
msgstr ""
"在给出的 `WordCheckConfig` 电路配置中，`Rotation(-2)` 被用于几个地方。这些用"
"途都与字符差异和颜色判断有关。让我们深入挖掘并理解它的具体用途。"

#: src/halo2/tmp/Zordle.md:393
msgid ""
"**字符差异检查**：  \n"
"当比较Wordle中的字符以确定绿色和黄色的匹配时，我们通常会查看所猜测的单词与实"
"际的目标单词之间的字符差异。`Rotation(-2)` 似乎被用于访问电路中早期的某个位"
"置，该位置可能包含前一个单词或猜测的单词。"
msgstr ""
"**字符差异检查**：  \n"
"当比较Wordle中的字符以确定绿色和黄色的匹配时，我们通常会查看所猜测的单词与实"
"际的目标单词之间的字符差异。`Rotation(-2)` 似乎被用于访问电路中早期的某个位"
"置，该位置可能包含前一个单词或猜测的单词。"

#: src/halo2/tmp/Zordle.md:396
msgid "`let char = meta.query_advice(chars[i], Rotation(-2));`"
msgstr "`let char = meta.query_advice(chars[i], Rotation(-2));`"

#: src/halo2/tmp/Zordle.md:398
msgid ""
"**颜色为零检查**：  \n"
"代码中的 `Rotation(-2)` 也被用于与颜色检查相关的部分。在Wordle中，字符可能是"
"绿色、黄色或灰色。灰色表示字符不在目标单词中。绿色表示字符位置正确，而黄色表"
"示字符存在但位置不对。`Rotation(-2)` 可能被用来查询前一个猜测中的字符颜色或与"
"之相关的其他信息。"
msgstr ""
"**颜色为零检查**：  \n"
"代码中的 `Rotation(-2)` 也被用于与颜色检查相关的部分。在Wordle中，字符可能是"
"绿色、黄色或灰色。灰色表示字符不在目标单词中。绿色表示字符位置正确，而黄色表"
"示字符存在但位置不对。`Rotation(-2)` 可能被用来查询前一个猜测中的字符颜色或与"
"之相关的其他信息。"

#: src/halo2/tmp/Zordle.md:401
msgid "`let diff_color_is_zero = meta.query_advice(chars[i], Rotation(-2));`"
msgstr "`let diff_color_is_zero = meta.query_advice(chars[i], Rotation(-2));`"

#: src/halo2/tmp/Zordle.md:404
msgid "通过这两点，我们可以推测为什么使用 `Rotation(-2)`："
msgstr "通过这两点，我们可以推测为什么使用 `Rotation(-2)`："

#: src/halo2/tmp/Zordle.md:406
msgid ""
"电路的每一行可能代表一个字符位置的不同状态或检查。在检查猜测与实际单词之间的"
"匹配时，电路需要对照早先的行（可能是前一个猜测或前两个状态）。这就是为什么需"
"要查询 `Rotation(-2)`：它代表与当前字符或状态相对的早先的状态或检查。"
msgstr ""
"电路的每一行可能代表一个字符位置的不同状态或检查。在检查猜测与实际单词之间的"
"匹配时，电路需要对照早先的行（可能是前一个猜测或前两个状态）。这就是为什么需"
"要查询 `Rotation(-2)`：它代表与当前字符或状态相对的早先的状态或检查。"

#: src/halo2/tmp/Zordle.md:408
msgid ""
"具体地，这里的 `Rotation(-2)` 可能表示查询与当前字符位置前两个位置或状态相关"
"的数据，这有助于确定字符的正确性、颜色或其他属性。"
msgstr ""
"具体地，这里的 `Rotation(-2)` 可能表示查询与当前字符位置前两个位置或状态相关"
"的数据，这有助于确定字符的正确性、颜色或其他属性。"

#: src/halo2/tmp/Zordle.md:416
msgid ""
"Ignore the minor technical detail that they can always just cheat by looking "
"up the day's word elsewhere. 😅"
msgstr ""
"Ignore the minor technical detail that they can always just cheat by looking "
"up the day's word elsewhere. 😅"

#: src/halo2/tmp/Hammster.md:4
msgid "[load_private_and_check_binary()](#load_private_and_check_binary)"
msgstr "[load_private_and_check_binary()](#load_private_and_check_binary)"

#: src/halo2/tmp/Hammster.md:5
msgid "[xor()](#xor)"
msgstr "[xor()](#xor)"

#: src/halo2/tmp/Hammster.md:6
msgid "[fn accumulate()](#fn-accumulate)"
msgstr "[fn accumulate()](#fn-accumulate)"

#: src/halo2/tmp/Hammster.md:10
msgid "Learning Materials: "
msgstr "Learning Materials: "

#: src/halo2/tmp/Hammster.md:11
msgid ""
"```bash\n"
"Author: Yu Jiang Tham  ytham\n"
"Demo: https://hammster.vercel.app/\n"
"Demo-Github: https://github.com/ytham/hammster\n"
"```"
msgstr ""
"```bash\n"
"Author: Yu Jiang Tham  ytham\n"
"Demo: https://hammster.vercel.app/\n"
"Demo-Github: https://github.com/ytham/hammster\n"
"```"

#: src/halo2/tmp/Hammster.md:19
msgid ""
"Hammster is a Next.js web app plus a ZK circuit written in [halo2](https://"
"halo2.dev/). It takes two 8-length vector inputs of binary digits and "
"their [Hamming distance](https://en.wikipedia.org/wiki/Hamming_distance) and "
"generates a proof that the two inputs are the claimed hamming distance away "
"from each other."
msgstr ""
"Hammster is a Next.js web app plus a ZK circuit written in [halo2](https://"
"halo2.dev/). It takes two 8-length vector inputs of binary digits and "
"their [Hamming distance](https://en.wikipedia.org/wiki/Hamming_distance) and "
"generates a proof that the two inputs are the claimed hamming distance away "
"from each other."

#: src/halo2/tmp/Hammster.md:21
msgid "private input : vec a / vec b   (two 8-length vector inputs)"
msgstr "private input : vec a / vec b   (two 8-length vector inputs)"

#: src/halo2/tmp/Hammster.md:22
msgid "public input : distance n"
msgstr "public input : distance n"

#: src/halo2/tmp/Hammster.md:23
msgid "prove that you know a pair of "
msgstr "prove that you know a pair of "

#: src/halo2/tmp/Hammster.md:23
msgid " whose distance is `n`"
msgstr " whose distance is `n`"

#: src/halo2/tmp/Hammster.md:25
msgid "Circuit drawing :"
msgstr "Circuit drawing :"

#: src/halo2/tmp/Hammster.md:27
msgid "![](imgs/hammster/draw.png)"
msgstr "![](imgs/hammster/draw.png)"

#: src/halo2/tmp/Hammster.md:28
msgid "assign private values is a whole block."
msgstr "assign private values is a whole block."

#: src/halo2/tmp/Hammster.md:29
msgid "assign xor region is single blocks' rearrange."
msgstr "assign xor region is single blocks' rearrange."

#: src/halo2/tmp/Hammster.md:31
msgid ""
"XOR 的逻辑可以通过公式`out = a + b - 2ab`来表示。而约束 `lhs.clone() + rhs."
"clone() - Expression::Constant(F::ONE.double()) * lhs * rhs - out`确实是检查"
"这个逻辑的。当这个约束等于0时，就意味着 XOR 逻辑是正确的"
msgstr ""
"XOR 的逻辑可以通过公式`out = a + b - 2ab`来表示。而约束 `lhs.clone() + rhs."
"clone() - Expression::Constant(F::ONE.double()) * lhs * rhs - out`确实是检查"
"这个逻辑的。当这个约束等于0时，就意味着 XOR 逻辑是正确的"

#: src/halo2/tmp/Hammster.md:33
msgid ""
"然而，回到您之前关于累加器门的问题，这确实很困惑。因为如果`advice[2]`列用于存"
"储 XOR 的结果，那么这些结果都是0或1，如何使用这一列来存储累加的值呢？我同意，"
"它们应该是不兼容的。除非存在其他方式或其他约束，来确保累加的结果只能是 0 或 "
"1 "
msgstr ""
"然而，回到您之前关于累加器门的问题，这确实很困惑。因为如果`advice[2]`列用于存"
"储 XOR 的结果，那么这些结果都是0或1，如何使用这一列来存储累加的值呢？我同意，"
"它们应该是不兼容的。除非存在其他方式或其他约束，来确保累加的结果只能是 0 或 "
"1 "

#: src/halo2/tmp/Hammster.md:35
msgid ""
"如果我们回到累加器门，确实，它试图确保当前行的值等于之前`BINARY_LENGTH`行的"
"和，这在逻辑上是不合理的，除非`advice[2]`列的其他部分确实只有 0 和 1"
msgstr ""
"如果我们回到累加器门，确实，它试图确保当前行的值等于之前`BINARY_LENGTH`行的"
"和，这在逻辑上是不合理的，除非`advice[2]`列的其他部分确实只有 0 和 1"

#: src/halo2/tmp/Hammster.md:37
msgid ""
"不过，另一种可能性是，这些门是为不同的操作阶段设计的，即在某些阶段`advice[2]`"
"用作XOR的输出，而在其他阶段则用作累加器。如果这是情况，那么可能有其他的选择器"
"或约束确保在给定时刻只有一个门是激活的"
msgstr ""
"不过，另一种可能性是，这些门是为不同的操作阶段设计的，即在某些阶段`advice[2]`"
"用作XOR的输出，而在其他阶段则用作累加器。如果这是情况，那么可能有其他的选择器"
"或约束确保在给定时刻只有一个门是激活的"

#: src/halo2/tmp/Hammster.md:39
msgid ""
"为了给您一个确切的答案，我们可能需要更全面地查看这个约束系统，以及`advice[2]`"
"列如何在不同的阶段中被使用"
msgstr ""
"为了给您一个确切的答案，我们可能需要更全面地查看这个约束系统，以及`advice[2]`"
"列如何在不同的阶段中被使用"

#: src/halo2/tmp/Hammster.md:42
msgid "load_private_and_check_binary()"
msgstr "load_private_and_check_binary()"

#: src/halo2/tmp/Hammster.md:44
msgid "将 _private input_ load 到约束系统中，并对每个值进行 binary check."
msgstr "将 _private input_ load 到约束系统中，并对每个值进行 binary check."

#: src/halo2/tmp/Hammster.md:45
msgid "对于每个输入值，做以下操作："
msgstr "对于每个输入值，做以下操作："

#: src/halo2/tmp/Hammster.md:46
msgid "IF `column` is 0，则启用左边的 `s_binary_l` Selector, otherwise , "
msgstr "IF `column` is 0，则启用左边的 `s_binary_l` Selector, otherwise , "

#: src/halo2/tmp/Hammster.md:47
msgid "则启用右边的 s_binary_r Selector ： "
msgstr "则启用右边的 s_binary_r Selector ： "

#: src/halo2/tmp/Hammster.md:48
msgid ""
"```rust\n"
"// Load private variable vectors & check if each digit is binary\n"
"let a = hammster_chip.load_private_and_check_binary(layouter.namespace(|| "
"\"load a\"), 0, self.a)?;\n"
"let b = hammster_chip.load_private_and_check_binary(layouter.namespace(|| "
"\"load b\"), 1, self.b)?;\n"
"```"
msgstr ""
"```rust\n"
"// Load private variable vectors & check if each digit is binary\n"
"let a = hammster_chip.load_private_and_check_binary(layouter.namespace(|| "
"\"load a\"), 0, self.a)?;\n"
"let b = hammster_chip.load_private_and_check_binary(layouter.namespace(|| "
"\"load b\"), 1, self.b)?;\n"
"```"

#: src/halo2/tmp/Hammster.md:53
msgid "对于每个输入值："
msgstr "对于每个输入值："

#: src/halo2/tmp/Hammster.md:54
msgid "将 _private input_  xor 计算后分配给其对应的 Advice Cell"
msgstr "将 _private input_  xor 计算后分配给其对应的 Advice Cell"

#: src/halo2/tmp/Hammster.md:56
msgid ""
"```rust\n"
"// Assign the private input value to an advice cell\n"
"region\n"
"\t.assign_advice(\n"
"\t    || \"assign private input\", \n"
"\t    config.advice[column], \n"
"\t    i, \n"
"\t    || *value\n"
"\t).map(Number)\n"
"}\n"
"```"
msgstr ""
"```rust\n"
"// Assign the private input value to an advice cell\n"
"region\n"
"\t.assign_advice(\n"
"\t    || \"assign private input\", \n"
"\t    config.advice[column], \n"
"\t    i, \n"
"\t    || *value\n"
"\t).map(Number)\n"
"}\n"
"```"

#: src/halo2/tmp/Hammster.md:68
msgid ""
"最后使用 `collect()` 将所有成功分配的单元格组合成一个 `Vec<Number<F>>` 并返回"
msgstr ""
"最后使用 `collect()` 将所有成功分配的单元格组合成一个 `Vec<Number<F>>` 并返回"

#: src/halo2/tmp/Hammster.md:72
msgid "xor()"
msgstr "xor()"

#: src/halo2/tmp/Hammster.md:74
msgid "在当前行上启用 Selector"
msgstr "在当前行上启用 Selector"

#: src/halo2/tmp/Hammster.md:79
msgid ""
"`copy_advice()` 执行了 PLONKish 的 Copy Constrain：这使得电路可以引用在其他位"
"置（可能是在一个不同的电路门或区域中）之前已经被计算或分配的值。此外，由于这"
"个复制行为是受约束的，所以不能随意更改复制的值。这确保了整个证明系统的正确性"
"和一致性。"
msgstr ""
"`copy_advice()` 执行了 PLONKish 的 Copy Constrain：这使得电路可以引用在其他位"
"置（可能是在一个不同的电路门或区域中）之前已经被计算或分配的值。此外，由于这"
"个复制行为是受约束的，所以不能随意更改复制的值。这确保了整个证明系统的正确性"
"和一致性。"

#: src/halo2/tmp/Hammster.md:80
msgid ""
"```rust\n"
"// Copy the left and right advice cell values \n"
"// a.0 repesents AssignedCell (struct Number<F: Field>(AssignedCell<F, "
"F>) ) \n"
"let a_val = a.0.copy_advice(|| \"lhs\", &mut region, config.advice[0], 0)?;\n"
"let b_val = b.0.copy_advice(|| \"rhs\", &mut region, config.advice[1], 0)?;\n"
"```"
msgstr ""
"```rust\n"
"// Copy the left and right advice cell values \n"
"// a.0 repesents AssignedCell (struct Number<F: Field>(AssignedCell<F, "
"F>) ) \n"
"let a_val = a.0.copy_advice(|| \"lhs\", &mut region, config.advice[0], 0)?;\n"
"let b_val = b.0.copy_advice(|| \"rhs\", &mut region, config.advice[1], 0)?;\n"
"```"

#: src/halo2/tmp/Hammster.md:87
msgid "执行一个 XOR 的二进制计算"
msgstr "执行一个 XOR 的二进制计算"

#: src/halo2/tmp/Hammster.md:88
msgid ""
"```rust\n"
"// Calculate the XOR result:\n"
"//   if *a == *b { F::ZERO }  else  { F::ONE } ...\n"
"let xor_result = a_val.value().zip(b_val.value())\n"
"\t.map(|(a, b)| if *a == *b { F::ZERO } else { F::ONE });\n"
"```"
msgstr ""
"```rust\n"
"// Calculate the XOR result:\n"
"//   if *a == *b { F::ZERO }  else  { F::ONE } ...\n"
"let xor_result = a_val.value().zip(b_val.value())\n"
"\t.map(|(a, b)| if *a == *b { F::ZERO } else { F::ONE });\n"
"```"

#: src/halo2/tmp/Hammster.md:95
msgid "Assign the `XOR result` to the 3rd advice cell ："
msgstr "Assign the `XOR result` to the 3rd advice cell ："

#: src/halo2/tmp/Hammster.md:96
msgid ""
"```rust\n"
"// Assign the result to the third advice cell\n"
"region\n"
"\t.assign_advice(|| \"a xor b\", config.advice[2], 0, || xor_result)\n"
"\t.map(Number) // 转换为 Number struct 类型。\n"
"```"
msgstr ""
"```rust\n"
"// Assign the result to the third advice cell\n"
"region\n"
"\t.assign_advice(|| \"a xor b\", config.advice[2], 0, || xor_result)\n"
"\t.map(Number) // 转换为 Number struct 类型。\n"
"```"

#: src/halo2/tmp/Hammster.md:103
msgid "fn accumulate()"
msgstr "fn accumulate()"

#: src/halo2/tmp/Hammster.md:105
msgid ""
"`accumulator()` 函数的主要目的是累积（或求和）前面异或操作的结果，并将这个累"
"积值放在某个位置"
msgstr ""
"`accumulator()` 函数的主要目的是累积（或求和）前面异或操作的结果，并将这个累"
"积值放在某个位置"

#: src/halo2/tmp/Hammster.md:107
msgid "函数参数 ：values 类型是 `Self::Num`，长度是 8 :"
msgstr "函数参数 ：values 类型是 `Self::Num`，长度是 8 :"

#: src/halo2/tmp/Hammster.md:108
msgid ""
"```rust\n"
"fn accumulator(\n"
"    &self, \n"
"    mut layouter: impl Layouter<F>, \n"
"    values: [Self::Num; BINARY_LENGTH] // ATTENTION\n"
") -> Result<Self::Num, Error> {\n"
"    let config = self.config();\n"
"```"
msgstr ""
"```rust\n"
"fn accumulator(\n"
"    &self, \n"
"    mut layouter: impl Layouter<F>, \n"
"    values: [Self::Num; BINARY_LENGTH] // ATTENTION\n"
") -> Result<Self::Num, Error> {\n"
"    let config = self.config();\n"
"```"

#: src/halo2/tmp/Hammster.md:117
msgid ""
"**定义累积区域** :  使用 `layouter` 为 _accumulator(累积器)_ 定义一个 new "
"region。并启用选择器`s_accumulator`"
msgstr ""
"**定义累积区域** :  使用 `layouter` 为 _accumulator(累积器)_ 定义一个 new "
"region。并启用选择器`s_accumulator`"

#: src/halo2/tmp/Hammster.md:118
msgid "**复制 XOR 运算结果**:"
msgstr "**复制 XOR 运算结果**:"

#: src/halo2/tmp/Hammster.md:119
msgid "遍历每个 XOR 的结果，并将它们复制到第三列的建议单元中。"
msgstr "遍历每个 XOR 的结果，并将它们复制到第三列的建议单元中。"

#: src/halo2/tmp/Hammster.md:120
msgid ""
"```rust\n"
"layouter.assign_region(\n"
"  || \"assign accumulator region\", \n"
"  |mut region: Region<'_, F>| {\n"
"    config.s_accumulator.enable(&mut region, BINARY_LENGTH)?;\n"
"    for (i, value) in values.iter().enumerate() {\n"
"      (*value).0.copy_advice(|| format!(\"output[{}]\", i), &mut region, "
"config.advice[2], i)?;\n"
"    }\n"
"```"
msgstr ""
"```rust\n"
"layouter.assign_region(\n"
"  || \"assign accumulator region\", \n"
"  |mut region: Region<'_, F>| {\n"
"    config.s_accumulator.enable(&mut region, BINARY_LENGTH)?;\n"
"    for (i, value) in values.iter().enumerate() {\n"
"      (*value).0.copy_advice(|| format!(\"output[{}]\", i), &mut region, "
"config.advice[2], i)?;\n"
"    }\n"
"```"

#: src/halo2/tmp/Hammster.md:134
msgid "Prerequisites"
msgstr "Prerequisites"

#: src/halo2/tmp/Hammster.md:136
msgid "[Node.js & NPM](https://nodejs.org/en/download)"
msgstr "[Node.js & NPM](https://nodejs.org/en/download)"

#: src/halo2/tmp/Hammster.md:137
msgid "[Rust](https://www.rust-lang.org/tools/install)"
msgstr "[Rust](https://www.rust-lang.org/tools/install)"

#: src/halo2/tmp/Hammster.md:138
msgid "[rustup](https://rustup.rs/)"
msgstr "[rustup](https://rustup.rs/)"

#: src/halo2/tmp/Hammster.md:139
msgid ""
"run `rustup toolchain install stable-aarch64-apple-darwin` (for users w/ "
"Apple M processors)"
msgstr ""
"run `rustup toolchain install stable-aarch64-apple-darwin` (for users w/ "
"Apple M processors)"

#: src/halo2/tmp/Hammster.md:140
msgid ""
"[wasm-pack](https://developer.mozilla.org/en-US/docs/WebAssembly/"
"Rust_to_wasm#rust_environment_setup)"
msgstr ""
"[wasm-pack](https://developer.mozilla.org/en-US/docs/WebAssembly/"
"Rust_to_wasm#rust_environment_setup)"

#: src/halo2/tmp/Hammster.md:142
msgid "Note: brew install ruts is not work, use official Rust installment."
msgstr "Note: brew install ruts is not work, use official Rust installment."

#: src/halo2/tmp/Hammster.md:145
msgid "vscode local configure:"
msgstr "vscode local configure:"

#: src/halo2/tmp/Hammster.md:147
msgid ""
"```rust\n"
"// ./cargo/config\n"
"\n"
"[target.wasm32-unknown-unknown]\n"
"rustflags = [\"-C\", \"target-feature=+atomics,+bulk-memory,+mutable-"
"globals\"]\n"
"\n"
"[unstable]\n"
"build-std = [\"panic_abort\", \"std\"]\n"
"\n"
"[build]\n"
"target = \"x86_64-apple-darwin\"\n"
"\n"
"```"
msgstr ""
"```rust\n"
"// ./cargo/config\n"
"\n"
"[target.wasm32-unknown-unknown]\n"
"rustflags = [\"-C\", \"target-feature=+atomics,+bulk-memory,+mutable-"
"globals\"]\n"
"\n"
"[unstable]\n"
"build-std = [\"panic_abort\", \"std\"]\n"
"\n"
"[build]\n"
"target = \"x86_64-apple-darwin\"\n"
"\n"
"```"

#: src/halo2/tmp/Hammster.md:161
msgid "Build & Run:"
msgstr "Build & Run:"

#: src/halo2/tmp/Hammster.md:170
msgid "Frontend: "
msgstr "Frontend: "

#: src/halo2/tmp/Hammster.md:172
msgid ""
"```bash\n"
"# Getting started\n"
"# Install required dependencies:\n"
"$ yarn\n"
"\n"
"# Start the next.js server:\n"
"yarn dev\n"
"\n"
"# Build the wasm packages (you will need to remove `target = \"aarch64-apple-"
"darwin\"` in `./circuits/.cargo/config` if not using an Apple M processor; I "
"have not tried w/ other platforms):\n"
"yarn build:wasm\n"
"```"
msgstr ""
"```bash\n"
"# Getting started\n"
"# Install required dependencies:\n"
"$ yarn\n"
"\n"
"# Start the next.js server:\n"
"yarn dev\n"
"\n"
"# Build the wasm packages (you will need to remove `target = \"aarch64-apple-"
"darwin\"` in `./circuits/.cargo/config` if not using an Apple M processor; I "
"have not tried w/ other platforms):\n"
"yarn build:wasm\n"
"```"

#: src/halo2/tmp/Hammster.md:185
msgid "Demo: https://hammster.vercel.app/"
msgstr "Demo: https://hammster.vercel.app/"

#: src/halo2/tmp/Hammster.md:186
msgid "Demo-Github: https://github.com/ytham/hammster"
msgstr "Demo-Github: https://github.com/ytham/hammster"

#: src/zk-everything/BabySNARK tutorial.md:5
msgid ""
"零知识证明由于其本身陡峭的入门学习曲线，往往被初学者称为moon math。为了平缓学"
"习曲线，减轻入门压力，babysnark\\[1\\]应运而生，本文将作为babysnark原理部分的"
"一个解读版，帮助你更好的理解snark背后的一些基本概念和直觉。在阅读本文之前，希"
"望你已经读过[\\# 从零开始学习 zk-SNARK](https://secbit.io/blog/2019/12/25/"
"learn-zk-snark-from-zero-part-one/)系列的前4部分，对包括有限域、椭圆曲线等相"
"关知识有一个基本的了解。"
msgstr ""
"零知识证明由于其本身陡峭的入门学习曲线，往往被初学者称为moon math。为了平缓学"
"习曲线，减轻入门压力，babysnark\\[1\\]应运而生，本文将作为babysnark原理部分的"
"一个解读版，帮助你更好的理解snark背后的一些基本概念和直觉。在阅读本文之前，希"
"望你已经读过[\\# 从零开始学习 zk-SNARK](https://secbit.io/blog/2019/12/25/"
"learn-zk-snark-from-zero-part-one/)系列的前4部分，对包括有限域、椭圆曲线等相"
"关知识有一个基本的了解。"

#: src/zk-everything/BabySNARK tutorial.md:7 src/public goods/第二章.md:7
msgid "R1CS"
msgstr "R1CS"

#: src/zk-everything/BabySNARK tutorial.md:8
msgid "比如我们有这样一段程序："
msgstr "比如我们有这样一段程序："

#: src/zk-everything/BabySNARK tutorial.md:14
msgid ""
"我们知道程序执行实际上是CPU中的乘法门和加法门组合运算得到的。那么上面的程序可"
"以看成是类似是下面的这个图，有一些输入变量和中间运算过程，最后得到输出。"
msgstr ""
"我们知道程序执行实际上是CPU中的乘法门和加法门组合运算得到的。那么上面的程序可"
"以看成是类似是下面的这个图，有一些输入变量和中间运算过程，最后得到输出。"

#: src/zk-everything/BabySNARK tutorial.md:27
msgid ""
"为什么我们输入一定要写成两个变量而不能是三个或者多个变量呢？具体限制原因可以"
"从限制运算\\[3\\]中找到答案。简单来说，多项式的算数性质有**在某一个具体的点"
"上，左操作数和右操作数相乘等于输出结果**。而这个约束特点使得每一次输入只能是"
"两个数的形式，如果一次有多个变量作为输入，可以分别将其拆分成两两组合。"
msgstr ""
"为什么我们输入一定要写成两个变量而不能是三个或者多个变量呢？具体限制原因可以"
"从限制运算\\[3\\]中找到答案。简单来说，多项式的算数性质有**在某一个具体的点"
"上，左操作数和右操作数相乘等于输出结果**。而这个约束特点使得每一次输入只能是"
"两个数的形式，如果一次有多个变量作为输入，可以分别将其拆分成两两组合。"

#: src/zk-everything/BabySNARK tutorial.md:29
msgid ""
"有了这样的直觉之后我们可以来看一下R1CS（Rank 1 constraint system）的具体定义:"
msgstr ""
"有了这样的直觉之后我们可以来看一下R1CS（Rank 1 constraint system）的具体定义:"

#: src/zk-everything/BabySNARK tutorial.md:31
msgid "给定三个m行n列的矩阵 "
msgstr "给定三个m行n列的矩阵 "

#: src/zk-everything/BabySNARK tutorial.md:31
msgid ", 和一个 "
msgstr ", 和一个 "

#: src/zk-everything/BabySNARK tutorial.md:31
msgid " 维向量 "
msgstr " 维向量 "

#: src/zk-everything/BabySNARK tutorial.md:31
msgid "CS"
msgstr "CS"

#: src/zk-everything/BabySNARK tutorial.md:31
msgid " 定义了一组m个方 程，每个方程的形式如下:"
msgstr " 定义了一组m个方 程，每个方程的形式如下:"

#: src/zk-everything/BabySNARK tutorial.md:35
msgid ", ·表示矩阵和向量的乘积, "
msgstr ", ·表示矩阵和向量的乘积, "

#: src/zk-everything/BabySNARK tutorial.md:35
msgid " 表示 "
msgstr " 表示 "

#: src/zk-everything/BabySNARK tutorial.md:35
msgid " 的第 "
msgstr " 的第 "

#: src/zk-everything/BabySNARK tutorial.md:35
msgid " 个元素。 等价地，我们可以使用Hadamard积（逐元素相乘）来表示整个系统："
msgstr " 个元素。 等价地，我们可以使用Hadamard积（逐元素相乘）来表示整个系统："

#: src/zk-everything/BabySNARK tutorial.md:40
msgid "其中○表示Hadamard积。"
msgstr "其中○表示Hadamard积。"

#: src/zk-everything/BabySNARK tutorial.md:42
msgid ""
"其中A可以看作是左操作数的全局结果的矩阵表示，B可以看成是右操作数全部结果的矩"
"阵表示。C是运算结果的全部结果的矩阵表示。接下来让我们一步一步将上述4个等式转"
"变成矩阵的Hadamard积的形式。"
msgstr ""
"其中A可以看作是左操作数的全局结果的矩阵表示，B可以看成是右操作数全部结果的矩"
"阵表示。C是运算结果的全部结果的矩阵表示。接下来让我们一步一步将上述4个等式转"
"变成矩阵的Hadamard积的形式。"

#: src/zk-everything/BabySNARK tutorial.md:44
msgid "假设我们将上述4个等式的输入输出变量按如下顺序排列："
msgstr "假设我们将上述4个等式的输入输出变量按如下顺序排列："

#: src/zk-everything/BabySNARK tutorial.md:50
msgid "那么对于第一个等式"
msgstr "那么对于第一个等式"

#: src/zk-everything/BabySNARK tutorial.md:56
msgid "左操作数_a_，右操作数_b_和最后结果_c_可以分别表示成如下向量形式"
msgstr "左操作数_a_，右操作数_b_和最后结果_c_可以分别表示成如下向量形式"

#: src/zk-everything/BabySNARK tutorial.md:64
msgid ""
"然后向量和上述6个变量相乘，就可以还原出第一个等式了。类似的，我们对等式2，3，"
"4做同样的处理，最终可以得到矩阵A,B,C:"
msgstr ""
"然后向量和上述6个变量相乘，就可以还原出第一个等式了。类似的，我们对等式2，3，"
"4做同样的处理，最终可以得到矩阵A,B,C:"

#: src/zk-everything/BabySNARK tutorial.md:86
msgid "通过上述操作，我们就将一段程序转换成了R1CS的形式。"
msgstr "通过上述操作，我们就将一段程序转换成了R1CS的形式。"

#: src/zk-everything/BabySNARK tutorial.md:88
msgid "多项式插值"
msgstr "多项式插值"

#: src/zk-everything/BabySNARK tutorial.md:89
msgid ""
"在实际的零知识证明系统中，不管具体零知识证明算法是哪种，总要有一个validator发"
"出一个随机数作为challenge，然后prover接受这个随机数作为系统输入，然后返回一个"
"输出结果。validator拿到输出结果看是否和挑战的随机数满足某种对应关系，如果满足"
"就认为prover确实掌握了某种知识。为了实现validator可以找任意随机数，所以我们就"
"有必要R1CS的约束关系转换成多项式的形式。"
msgstr ""
"在实际的零知识证明系统中，不管具体零知识证明算法是哪种，总要有一个validator发"
"出一个随机数作为challenge，然后prover接受这个随机数作为系统输入，然后返回一个"
"输出结果。validator拿到输出结果看是否和挑战的随机数满足某种对应关系，如果满足"
"就认为prover确实掌握了某种知识。为了实现validator可以找任意随机数，所以我们就"
"有必要R1CS的约束关系转换成多项式的形式。"

#: src/zk-everything/BabySNARK tutorial.md:91
msgid ""
"比如对于之前的矩阵A而言，如果竖着按列看，其实其对应的就是之前文中所说的6个变"
"量"
msgstr ""
"比如对于之前的矩阵A而言，如果竖着按列看，其实其对应的就是之前文中所说的6个变"
"量"

#: src/zk-everything/BabySNARK tutorial.md:97
msgid ""
"比如说，对于one变量而言，其在上述4个等式（即4种约束关系）中所组成的向量为"
msgstr ""
"比如说，对于one变量而言，其在上述4个等式（即4种约束关系）中所组成的向量为"

#: src/zk-everything/BabySNARK tutorial.md:103
msgid ""
"如果将其在笛卡尔坐标系中表示，假设我们选取x为1，2，3，4，那么该one所组成的多"
"项式应该经过(1,0), (2,0), (3,0), (4,5)这4个点。在笛卡尔坐标系中，我们对于做操"
"作数和有操作数以及结果的所有x坐标只要满足一致关系，他们所组成的多项式都满足"
"R1CS约束关系。基于上述特点，我们可以对6个变量选定一致的x坐标然后使用插值的方"
"式得到多项式的形式。下面是我们选定x坐标是1，2，3，4得到的矩阵A的多项式表示形"
"式："
msgstr ""
"如果将其在笛卡尔坐标系中表示，假设我们选取x为1，2，3，4，那么该one所组成的多"
"项式应该经过(1,0), (2,0), (3,0), (4,5)这4个点。在笛卡尔坐标系中，我们对于做操"
"作数和有操作数以及结果的所有x坐标只要满足一致关系，他们所组成的多项式都满足"
"R1CS约束关系。基于上述特点，我们可以对6个变量选定一致的x坐标然后使用插值的方"
"式得到多项式的形式。下面是我们选定x坐标是1，2，3，4得到的矩阵A的多项式表示形"
"式："

#: src/zk-everything/BabySNARK tutorial.md:114
msgid "即one可以表示为："
msgstr "即one可以表示为："

#: src/zk-everything/BabySNARK tutorial.md:116
msgid "0.833"
msgstr "0.833"

#: src/zk-everything/BabySNARK tutorial.md:116
msgid "9.166"
msgstr "9.166"

#: src/zk-everything/BabySNARK tutorial.md:118
msgid "其他变量的R1CS转换也同理。"
msgstr "其他变量的R1CS转换也同理。"

#: src/zk-everything/BabySNARK tutorial.md:120
msgid "QAP"
msgstr "QAP"

#: src/zk-everything/BabySNARK tutorial.md:121
msgid ""
"这种转换成的多项式新形式称之为QAP（Quadratic Arithmetic Program）我们来看一下"
"QAP的具体定义。"
msgstr ""
"这种转换成的多项式新形式称之为QAP（Quadratic Arithmetic Program）我们来看一下"
"QAP的具体定义。"

#: src/zk-everything/BabySNARK tutorial.md:123
msgid "**定义(QAP)**: 一个在域 "
msgstr "**定义(QAP)**: 一个在域 "

#: src/zk-everything/BabySNARK tutorial.md:123
msgid " 上的二次算术程序 "
msgstr " 上的二次算术程序 "

#: src/zk-everything/BabySNARK tutorial.md:123
msgid " 包含三种 "
msgstr " 包含三种 "

#: src/zk-everything/BabySNARK tutorial.md:123
msgid " 多项式："
msgstr " 多项式："

#: src/zk-everything/BabySNARK tutorial.md:126 tutorial.md:181
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:390
#: src/zk-everything/zk-everything-joe/Hyrax.md:122
#: src/zk-everything/zk-everything-joe/Hyrax.md:195
#: src/zk-everything/zk-everything-joe/Hyrax.md:201
#: src/zk-everything/zk-everything-joe/Hyrax.md:203
#: src/zk-everything/zk-everything-joe/Hyrax.md:208
#: src/zk-everything/zk-everything-joe/Hyrax.md:223
#: src/zk-everything/zk-everything-joe/Hyrax.md:228
msgid "Y"
msgstr "Y"

#: src/zk-everything/BabySNARK tutorial.md:126
#: src/zk-everything/zk-everything-joe/Hyrax.md:314
msgid " 其中 "
msgstr " 其中 "

#: src/zk-everything/BabySNARK tutorial.md:127
msgid "，以及一个目标多项式 "
msgstr "，以及一个目标多项式 "

#: src/zk-everything/BabySNARK tutorial.md:129
msgid " 是一个算术程序，它以 "
msgstr " 是一个算术程序，它以 "

#: src/zk-everything/BabySNARK tutorial.md:129
msgid " 的元素为输入并输出 "
msgstr " 的元素为输入并输出 "

#: src/zk-everything/BabySNARK tutorial.md:129
msgid " 个元素，总共有 "
msgstr " 个元素，总共有 "

#: src/zk-everything/BabySNARK tutorial.md:129
msgid " 个I/O元素。那么，当且仅当存在系数 "
msgstr " 个I/O元素。那么，当且仅当存在系数 "

#: src/zk-everything/BabySNARK tutorial.md:129
msgid " 可以整除 "
msgstr " 可以整除 "

#: src/zk-everything/BabySNARK tutorial.md:129
msgid " 时， "
msgstr " 时， "

#: src/zk-everything/BabySNARK tutorial.md:129
msgid " 的输入和输出的有效赋值，其中："
msgstr " 的输入和输出的有效赋值，其中："

#: src/zk-everything/BabySNARK tutorial.md:131 tutorial.md:148 src/public
#: goods/第二章.md:10 goods/第二章.md:17 goods/第二章.md:18
#: goods/第二章.md:19 goods/第二章.md:20 goods/第二章.md:26
#: goods/第二章.md:34 goods/第二章.md:35 goods/第二章.md:36
#: goods/第二章.md:158 goods/4-Proving-System.md:107
#: goods/4-Proving-System.md:111 goods/4-Proving-System.md:124
#: goods/4-Proving-System.md:127 goods/4-Proving-System.md:145
#: goods/4-Proving-System.md:149 goods/4-Proving-System.md:171
#: goods/4-Proving-System.md:173 goods/4-Proving-System.md:177
msgid ":="
msgstr ":="

#: src/zk-everything/BabySNARK tutorial.md:133
msgid "布尔电路"
msgstr "布尔电路"

#: src/zk-everything/BabySNARK tutorial.md:134
msgid ""
"通常情况下一般的通用snark算法使用的是QAP来去表示程序，但如果程序是一些特殊问"
"题，比如输入程序可以表示为布尔电路，那么QAP实现就可以更加简单一点。首先我们来"
"看一下布尔电路的特点："
msgstr ""
"通常情况下一般的通用snark算法使用的是QAP来去表示程序，但如果程序是一些特殊问"
"题，比如输入程序可以表示为布尔电路，那么QAP实现就可以更加简单一点。首先我们来"
"看一下布尔电路的特点："

#: src/zk-everything/BabySNARK tutorial.md:140
msgid ""
"从图中可以看到不管是哪一种的门，最终的输出结果一定是落在\\[0, 2\\]区间之内。"
"具体来说：任何一个2输入的二进制门电路 "
msgstr ""
"从图中可以看到不管是哪一种的门，最终的输出结果一定是落在\\[0, 2\\]区间之内。"
"具体来说：任何一个2输入的二进制门电路 "

#: src/zk-everything/BabySNARK tutorial.md:140
msgid "，其中输入为 "
msgstr "，其中输入为 "

#: src/zk-everything/BabySNARK tutorial.md:140
msgid "，输出为 "
msgstr "，输出为 "

#: src/zk-everything/BabySNARK tutorial.md:140
msgid "，都可以使用门电路的输入和输出的仿射组合 "
msgstr "，都可以使用门电路的输入和输出的仿射组合 "

#: src/zk-everything/BabySNARK tutorial.md:140
msgid " 来指定，当输入输出满足门电路的逻辑规范时，它只能取两个值， "
msgstr " 来指定，当输入输出满足门电路的逻辑规范时，它只能取两个值， "

#: src/zk-everything/BabySNARK tutorial.md:140
msgid "。这导致了一个等效的单一的“平方”约束 "
msgstr "。这导致了一个等效的单一的“平方”约束 "

#: src/zk-everything/BabySNARK tutorial.md:142
msgid "SSP"
msgstr "SSP"

#: src/zk-everything/BabySNARK tutorial.md:143
msgid ""
"根据上述布尔电路的特点，一般的QAP约束在布尔电路中就转换成了SSP（Square Span "
"Program）约束。我们来看一下SSP的具体定义："
msgstr ""
"根据上述布尔电路的特点，一般的QAP约束在布尔电路中就转换成了SSP（Square Span "
"Program）约束。我们来看一下SSP的具体定义："

#: src/zk-everything/BabySNARK tutorial.md:145
msgid "**定义(SSP)**：在域 "
msgstr "**定义(SSP)**：在域 "

#: src/zk-everything/BabySNARK tutorial.md:145
msgid " 上的一个方形跨度程序(SSP)是由 "
msgstr " 上的一个方形跨度程序(SSP)是由 "

#: src/zk-everything/BabySNARK tutorial.md:145
msgid " 个多项式 "
msgstr " 个多项式 "

#: src/zk-everything/BabySNARK tutorial.md:145
msgid " 和一个目标多项式 "
msgstr " 和一个目标多项式 "

#: src/zk-everything/BabySNARK tutorial.md:145
msgid " 组成的元组，使得对所有 "
msgstr " 组成的元组，使得对所有 "

#: src/zk-everything/BabySNARK tutorial.md:145
msgid "，都有 "
msgstr "，都有 "

#: src/zk-everything/BabySNARK tutorial.md:145
msgid "deg"
msgstr "deg"

#: src/zk-everything/BabySNARK tutorial.md:145
msgid "⩽"
msgstr "⩽"

#: src/zk-everything/BabySNARK tutorial.md:145
msgid "。我们说方形跨度程序SSP的大小为 "
msgstr "。我们说方形跨度程序SSP的大小为 "

#: src/zk-everything/BabySNARK tutorial.md:145
msgid "，并且度数为 "
msgstr "，并且度数为 "

#: src/zk-everything/BabySNARK tutorial.md:145
msgid "。当且仅当存在 "
msgstr "。当且仅当存在 "

#: src/zk-everything/BabySNARK tutorial.md:145
msgid " 能够整除 "
msgstr " 能够整除 "

#: src/zk-everything/BabySNARK tutorial.md:145
msgid " 时，我们称SSP接受输入 "
msgstr " 时，我们称SSP接受输入 "

#: src/zk-everything/BabySNARK tutorial.md:145
msgid "，其中："
msgstr "，其中："

#: src/zk-everything/BabySNARK tutorial.md:148 tutorial.md:168
msgid "1."
msgstr "1."

#: src/zk-everything/BabySNARK tutorial.md:150
msgid "我们说SSP校验了布尔电路 "
msgstr "我们说SSP校验了布尔电路 "

#: src/zk-everything/BabySNARK tutorial.md:150
msgid "，如果它仅接受那些满足 "
msgstr "，如果它仅接受那些满足 "

#: src/zk-everything/BabySNARK tutorial.md:150
msgid " 的输入值 "
msgstr " 的输入值 "

#: src/zk-everything/BabySNARK tutorial.md:152
msgid ""
"再进一步，我们可以根据SSP而具体的布尔电路构造方形约束系统(Square Constraint "
"System)。我们首先来看一下SCS的定义："
msgstr ""
"再进一步，我们可以根据SSP而具体的布尔电路构造方形约束系统(Square Constraint "
"System)。我们首先来看一下SCS的定义："

#: src/zk-everything/BabySNARK tutorial.md:154
msgid "**定义SCS**: 方形约束系统由一个矩阵 "
msgstr "**定义SCS**: 方形约束系统由一个矩阵 "

#: src/zk-everything/BabySNARK tutorial.md:154
msgid " 定义。如果满足以下条件 "
msgstr " 定义。如果满足以下条件 "

#: src/zk-everything/BabySNARK tutorial.md:158
msgid " 表示Hadamard（逐元素）乘积，那么向量 "
msgstr " 表示Hadamard（逐元素）乘积，那么向量 "

#: src/zk-everything/BabySNARK tutorial.md:158
msgid "¨"
msgstr "¨"

#: src/zk-everything/BabySNARK tutorial.md:158
msgid " 是此系统的解。我们也将 "
msgstr " 是此系统的解。我们也将 "

#: src/zk-everything/BabySNARK tutorial.md:158
msgid " 写为 "
msgstr " 写为 "

#: src/zk-everything/BabySNARK tutorial.md:160
msgid "我们可以看一个具体的例子，比如我们有3个布尔元素分别是 "
msgstr "我们可以看一个具体的例子，比如我们有3个布尔元素分别是 "

#: src/zk-everything/BabySNARK tutorial.md:160
msgid " ： 对于布尔元素而言，比如说 "
msgstr " ： 对于布尔元素而言，比如说 "

#: src/zk-everything/BabySNARK tutorial.md:161
msgid " 要么为 0，要么为 1。注意到"
msgstr " 要么为 0，要么为 1。注意到"

#: src/zk-everything/BabySNARK tutorial.md:165
msgid "这意味着 "
msgstr "这意味着 "

#: src/zk-everything/BabySNARK tutorial.md:165
msgid "，从而推导出 "
msgstr "，从而推导出 "

#: src/zk-everything/BabySNARK tutorial.md:165
msgid "。其他元素也是同理。对于 "
msgstr "。其他元素也是同理。对于 "

#: src/zk-everything/BabySNARK tutorial.md:165
msgid "¬"
msgstr "¬"

#: src/zk-everything/BabySNARK tutorial.md:165
#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:354 SNARKs.md:374
msgid "∧"
msgstr "∧"

#: src/zk-everything/BabySNARK tutorial.md:165
msgid "NAND"
msgstr "NAND"

#: src/zk-everything/BabySNARK tutorial.md:165
msgid " 为"
msgstr " 为"

#: src/zk-everything/BabySNARK tutorial.md:170
msgid "综合上述内容，一个包括上述导线和门的方形约束程序将采取以下形式："
msgstr "综合上述内容，一个包括上述导线和门的方形约束程序将采取以下形式："

#: src/zk-everything/BabySNARK tutorial.md:172
msgid "⋱"
msgstr "⋱"

#: src/zk-everything/BabySNARK tutorial.md:174
msgid "babysnark"
msgstr "babysnark"

#: src/zk-everything/BabySNARK tutorial.md:175
msgid ""
"介绍了这么多，终于到babysnark了。babysnark是对布尔电路所构造的一种snark。相比"
"于QAP而言，SSP更简单，所以实现整个snark所需的约束也更少。具体来说一共有两个约"
"束，第一个是SSP约束："
msgstr ""
"介绍了这么多，终于到babysnark了。babysnark是对布尔电路所构造的一种snark。相比"
"于QAP而言，SSP更简单，所以实现整个snark所需的约束也更少。具体来说一共有两个约"
"束，第一个是SSP约束："

#: src/zk-everything/BabySNARK tutorial.md:179
msgid "不需要做太多解释，第二个约束是线性约束："
msgstr "不需要做太多解释，第二个约束是线性约束："

#: src/zk-everything/BabySNARK tutorial.md:183
msgid "这个和babysnark具体设计有一些关系。 "
msgstr "这个和babysnark具体设计有一些关系。 "

#: src/zk-everything/BabySNARK tutorial.md:183
msgid " 的值是由prover直接计算的，而 "
msgstr " 的值是由prover直接计算的，而 "

#: src/zk-everything/BabySNARK tutorial.md:183
msgid " 的值来自于setup阶段。设置线性约束的目的是确保 "
msgstr " 的值来自于setup阶段。设置线性约束的目的是确保 "

#: src/zk-everything/BabySNARK tutorial.md:183
msgid " 确实是由同一线性多项式计算出来的，防止prover作弊，恶意构造 "
msgstr " 确实是由同一线性多项式计算出来的，防止prover作弊，恶意构造 "

#: src/zk-everything/BabySNARK tutorial.md:183
msgid " 而不是赖在setup所提供的随机challenge构造的 "
msgstr " 而不是赖在setup所提供的随机challenge构造的 "

#: src/zk-everything/BabySNARK tutorial.md:183
msgid " ，最终破坏SSP约束。因为prover最后输出证明的时候同时提供了 "
msgstr " ，最终破坏SSP约束。因为prover最后输出证明的时候同时提供了 "

#: src/zk-everything/BabySNARK tutorial.md:183
msgid " 在verify阶段添加 "
msgstr " 在verify阶段添加 "

#: src/zk-everything/BabySNARK tutorial.md:183
msgid " 是为了防止证明者输出特别恶意构造的 B=YV，所以再做一次线性约束。"
msgstr " 是为了防止证明者输出特别恶意构造的 B=YV，所以再做一次线性约束。"

#: src/zk-everything/BabySNARK tutorial.md:185
msgid "babysnark的随机挑战"
msgstr "babysnark的随机挑战"

#: src/zk-everything/BabySNARK tutorial.md:185
#: src/zk-everything/zk-everything-joe/Spartan.md:411
#: src/zk-everything/zk-everything-joe/Spartan.md:416
#: src/zk-everything/zk-everything-joe/Spartan.md:422
#: src/zk-everything/zk-everything-joe/Spartan.md:426
#: src/zk-everything/zk-everything-joe/Spartan.md:434
#: src/zk-everything/zk-everything-joe/Spartan.md:436
#: src/zk-everything/zk-everything-joe/Spartan.md:441
#: src/zk-everything/zk-everything-joe/Spartan.md:445
msgid "τ"
msgstr "τ"

#: src/zk-everything/BabySNARK tutorial.md:185
msgid "采用的是 "
msgstr "采用的是 "

#: src/zk-everything/BabySNARK tutorial.md:185
msgid ""
"的形式，该构造形式的安全保证来自q-DLOG 假设。q-DLOG 假设确保即使敌手可以在多"
"个点上观察到多项式的值，他们也无法从多项式的结构中提取任何信息。"
msgstr ""
"的形式，该构造形式的安全保证来自q-DLOG 假设。q-DLOG 假设确保即使敌手可以在多"
"个点上观察到多项式的值，他们也无法从多项式的结构中提取任何信息。"

#: src/zk-everything/BabySNARK tutorial.md:187
msgid ""
"至此，我们对babysnark的原理部分做了详细的探讨。希望通过深入浅出的方式介绍这一"
"简易的snark，能为你的零知识证明学习之旅提供坚实的基石。"
msgstr ""
"至此，我们对babysnark的原理部分做了详细的探讨。希望通过深入浅出的方式介绍这一"
"简易的snark，能为你的零知识证明学习之旅提供坚实的基石。"

#: src/zk-everything/BabySNARK tutorial.md:190
msgid ""
"\\[1\\]  [BabySnark do do do](https://github.com/initc3/babySNARK/tree/"
"master)"
msgstr ""
"\\[1\\]  [BabySnark do do do](https://github.com/initc3/babySNARK/tree/"
"master)"

#: src/zk-everything/BabySNARK tutorial.md:192
msgid ""
"\\[2\\]  [quadratic-arithmetic-programs-from-zero-to-hero](https://medium."
"com/@VitalikButerin/quadratic-arithmetic-programs-from-zero-to-hero-"
"f6d558cea649)"
msgstr ""
"\\[2\\]  [quadratic-arithmetic-programs-from-zero-to-hero](https://medium."
"com/@VitalikButerin/quadratic-arithmetic-programs-from-zero-to-hero-"
"f6d558cea649)"

#: src/zk-everything/BabySNARK tutorial.md:194
msgid ""
"\\[3\\]  [从零开始学习 zk-SNARK（三）——从程序到多项式的构造](https://secbit."
"io/blog/2020/01/08/learn-zk-snark-from-zero-part-three/)"
msgstr ""
"\\[3\\]  [从零开始学习 zk-SNARK（三）——从程序到多项式的构造](https://secbit."
"io/blog/2020/01/08/learn-zk-snark-from-zero-part-three/)"

#: src/zk-everything/BabySNARK tutorial.md:196
msgid ""
"\\[4\\]  [zk-SNARKs: A Gentle Introduction](https://www.di.ens.fr/~nitulesc/"
"files/Survey-SNARKs.pdf)"
msgstr ""
"\\[4\\]  [zk-SNARKs: A Gentle Introduction](https://www.di.ens.fr/~nitulesc/"
"files/Survey-SNARKs.pdf)"

#: src/zk-everything/zk-learning-miles/KZG.md:6
msgid ""
"KZG 承诺又叫做 KZG10 承诺,是由 Kate, Zaverucha, and Goldberg 三位作者共同提"
"出."
msgstr ""
"KZG 承诺又叫做 KZG10 承诺,是由 Kate, Zaverucha, and Goldberg 三位作者共同提"
"出."

#: src/zk-everything/zk-learning-miles/KZG.md:8
msgid "**1.多项式表示**"
msgstr "**1.多项式表示**"

#: src/zk-everything/zk-learning-miles/KZG.md:10
msgid "多项式 P(x)可以用系数表述,如"
msgstr "多项式 P(x)可以用系数表述,如"

#: src/zk-everything/zk-learning-miles/KZG.md:10
#: src/zk-everything/zk-learning-miles/KZG.md:12
msgid "55"
msgstr "55"

#: src/zk-everything/zk-learning-miles/KZG.md:10
msgid "简单可表示为"
msgstr "简单可表示为"

#: src/zk-everything/zk-learning-miles/KZG.md:12
msgid ",所以对于一个多项式 P(x)可以表示为"
msgstr ",所以对于一个多项式 P(x)可以表示为"

#: src/zk-everything/zk-learning-miles/KZG.md:12
msgid ",其中"
msgstr ",其中"

#: src/zk-everything/zk-learning-miles/KZG.md:12
msgid "表示对应位置的系数."
msgstr "表示对应位置的系数."

#: src/zk-everything/zk-learning-miles/KZG.md:14
msgid "**2.Commitment Scheme**"
msgstr "**2.Commitment Scheme**"

#: src/zk-everything/zk-learning-miles/KZG.md:16
msgid "**2.1 Commit Schemes 过程：**"
msgstr "**2.1 Commit Schemes 过程：**"

#: src/zk-everything/zk-learning-miles/KZG.md:18
msgid "可以把承诺 C(m)理解为一个装着信件 m 的信封"
msgstr "可以把承诺 C(m)理解为一个装着信件 m 的信封"

#: src/zk-everything/zk-learning-miles/KZG.md:20
msgid "![](static/XfBkbAOzwomDgUxqgiicUopRntd.png)"
msgstr "![](static/XfBkbAOzwomDgUxqgiicUopRntd.png)"

#: src/zk-everything/zk-learning-miles/KZG.md:22
msgid "Setup 阶段产生一些公共参数"
msgstr "Setup 阶段产生一些公共参数"

#: src/zk-everything/zk-learning-miles/KZG.md:23
msgid "Commit 阶段:对消息 **m** 进行承诺得到 **C(m)**"
msgstr "Commit 阶段:对消息 **m** 进行承诺得到 **C(m)**"

#: src/zk-everything/zk-learning-miles/KZG.md:24
msgid ""
"Open 阶段:打开 **C(m)**得到** m‘,**验证** m**是否等于 **m’. commit 阶段的 m，"
"在 open 阶段是会暴露的.**"
msgstr ""
"Open 阶段:打开 **C(m)**得到** m‘,**验证** m**是否等于 **m’. commit 阶段的 m，"
"在 open 阶段是会暴露的.**"

#: src/zk-everything/zk-learning-miles/KZG.md:26
msgid "**2.2 commit Schemes 性质：**"
msgstr "**2.2 commit Schemes 性质：**"

#: src/zk-everything/zk-learning-miles/KZG.md:28
#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:180
#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:221
msgid "**Hiding:意味着敌手获得承诺 c(m)后无法获得 m 的值**"
msgstr "**Hiding:意味着敌手获得承诺 c(m)后无法获得 m 的值**"

#: src/zk-everything/zk-learning-miles/KZG.md:30
msgid ""
"computational hiding:对于任意的 PPT 敌手 A.有 ![](static/"
"HDjibLSHjoDkj6xG1V8cTC7nnGg.png)"
msgstr ""
"computational hiding:对于任意的 PPT 敌手 A.有 ![](static/"
"HDjibLSHjoDkj6xG1V8cTC7nnGg.png)"

#: src/zk-everything/zk-learning-miles/KZG.md:32
#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:184
#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:225
msgid "Perfect hiding:将 A 的计算能力修改为无穷算力,“≤ negl(λ)”替换为 0"
msgstr "Perfect hiding:将 A 的计算能力修改为无穷算力,“≤ negl(λ)”替换为 0"

#: src/zk-everything/zk-learning-miles/KZG.md:33
msgid "**Binding:是指一个承诺 c(m) 在 Open 阶段打开只会得到 m 而不会得到 m‘.**"
msgstr ""
"**Binding:是指一个承诺 c(m) 在 Open 阶段打开只会得到 m 而不会得到 m‘.**"

#: src/zk-everything/zk-learning-miles/KZG.md:35
msgid "computational  Binding ![](static/PSBEbWZsUoPlgJx50dKcnhivnOe.png)"
msgstr "computational  Binding ![](static/PSBEbWZsUoPlgJx50dKcnhivnOe.png)"

#: src/zk-everything/zk-learning-miles/KZG.md:37
#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:189
#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:230
msgid "perfect binding::将 A 的计算能力修改为无穷算力,“≤ negl(λ)”替换为 0"
msgstr "perfect binding::将 A 的计算能力修改为无穷算力,“≤ negl(λ)”替换为 0"

#: src/zk-everything/zk-learning-miles/KZG.md:39
msgid "**2.3 Polynomial Commitment Schemes：PCS**"
msgstr "**2.3 Polynomial Commitment Schemes：PCS**"

#: src/zk-everything/zk-learning-miles/KZG.md:41
msgid "多项式承诺 PCS:承诺对象是单变量多项式,"
msgstr "多项式承诺 PCS:承诺对象是单变量多项式,"

#: src/zk-everything/zk-learning-miles/KZG.md:41
msgid ":表示所有 degree 最多为 d 的单变量多项式的集合。过程可总结如下图"
msgstr ":表示所有 degree 最多为 d 的单变量多项式的集合。过程可总结如下图"

#: src/zk-everything/zk-learning-miles/KZG.md:43
msgid "![](static/HXKrbfuUqoksR1xij0HcWyHtncd.png)"
msgstr "![](static/HXKrbfuUqoksR1xij0HcWyHtncd.png)"

#: src/zk-everything/zk-learning-miles/KZG.md:45
msgid "Prover 运行 Commit 算法,将函数 f 与随机数 r 作为输入,"
msgstr "Prover 运行 Commit 算法,将函数 f 与随机数 r 作为输入,"

#: src/zk-everything/zk-learning-miles/KZG.md:45
msgid "为输出.将"
msgstr "为输出.将"

#: src/zk-everything/zk-learning-miles/KZG.md:45
msgid "发送给 Verifier"
msgstr "发送给 Verifier"

#: src/zk-everything/zk-learning-miles/KZG.md:46
msgid "Verifier 发送一个挑战点:即一个函数域 X 中的元素 x"
msgstr "Verifier 发送一个挑战点:即一个函数域 X 中的元素 x"

#: src/zk-everything/zk-learning-miles/KZG.md:47
msgid "Prover 将 x 对应的 f(x)=y,以及 proof "
msgstr "Prover 将 x 对应的 f(x)=y,以及 proof "

#: src/zk-everything/zk-learning-miles/KZG.md:47
msgid "发送给 Verifier.  "
msgstr "发送给 Verifier.  "

#: src/zk-everything/zk-learning-miles/KZG.md:47
msgid "表明 1.f(x)=y 2.f 属于 F,即 f 的 degree\\<=d."
msgstr "表明 1.f(x)=y 2.f 属于 F,即 f 的 degree\\<=d."

#: src/zk-everything/zk-learning-miles/KZG.md:49
msgid "其中 Prover 需要计算如下内容"
msgstr "其中 Prover 需要计算如下内容"

#: src/zk-everything/zk-learning-miles/KZG.md:51
msgid "多项式的承诺 C=\\[P(x)\\]"
msgstr "多项式的承诺 C=\\[P(x)\\]"

#: src/zk-everything/zk-learning-miles/KZG.md:52
msgid "多项式在 z 点的值,P(z)=y,这很简单"
msgstr "多项式在 z 点的值,P(z)=y,这很简单"

#: src/zk-everything/zk-learning-miles/KZG.md:53
msgid "the proof "
msgstr "the proof "

#: src/zk-everything/zk-learning-miles/KZG.md:55
msgid ""
"PCS 有多种,比如 [FRI](https://drops.dagstuhl.de/opus/volltexte/2018/9018/pdf/"
"LIPIcs-ICALP-2018-14.pdf) or Dark'20 or Dory'20 .但是 KZG 仍然是目前实践中**"
"使用最为广泛的 PCS 方案**.其特点如下"
msgstr ""
"PCS 有多种,比如 [FRI](https://drops.dagstuhl.de/opus/volltexte/2018/9018/pdf/"
"LIPIcs-ICALP-2018-14.pdf) or Dark'20 or Dory'20 .但是 KZG 仍然是目前实践中**"
"使用最为广泛的 PCS 方案**.其特点如下"

#: src/zk-everything/zk-learning-miles/KZG.md:57
msgid "基于 Pairing 实现"
msgstr "基于 Pairing 实现"

#: src/zk-everything/zk-learning-miles/KZG.md:58
msgid "Proof size 是常量 (一个椭圆曲线群元素)"
msgstr "Proof size 是常量 (一个椭圆曲线群元素)"

#: src/zk-everything/zk-learning-miles/KZG.md:59
msgid "验证时间是常量 (两次 pairing 操作)"
msgstr "验证时间是常量 (两次 pairing 操作)"

#: src/zk-everything/zk-learning-miles/KZG.md:61
msgid ""
"其中特性 2 与 3 导致可以将其构造成一个 SNARK 方案.SNARK 的全称是 Succinct "
"Non-interactive  Argument of Knowledge:简洁非交互式知识论证."
msgstr ""
"其中特性 2 与 3 导致可以将其构造成一个 SNARK 方案.SNARK 的全称是 Succinct "
"Non-interactive  Argument of Knowledge:简洁非交互式知识论证."

#: src/zk-everything/zk-learning-miles/KZG.md:63
msgid ""
"SNARK 要求 1.size of proof=O(log(d)) 2.time of Verification =O(log(d)),d 为 "
"degree of Polynomial."
msgstr ""
"SNARK 要求 1.size of proof=O(log(d)) 2.time of Verification =O(log(d)),d 为 "
"degree of Polynomial."

#: src/zk-everything/zk-learning-miles/KZG.md:65
msgid "进而可以将 KZG 应用在零知识证明系统如 ZK-SNARK 中."
msgstr "进而可以将 KZG 应用在零知识证明系统如 ZK-SNARK 中."

#: src/zk-everything/zk-learning-miles/KZG.md:67
msgid "**3.计算多项式的承诺 C**"
msgstr "**3.计算多项式的承诺 C**"

#: src/zk-everything/zk-learning-miles/KZG.md:69
msgid "在计算之前,首先介绍两个概念"
msgstr "在计算之前,首先介绍两个概念"

#: src/zk-everything/zk-learning-miles/KZG.md:71
msgid "**3.1 椭圆曲线(****EC****)**"
msgstr "**3.1 椭圆曲线(****EC****)**"

#: src/zk-everything/zk-learning-miles/KZG.md:73
msgid ""
"这里只简单提一下椭圆曲线,更多细节可参考阅读 [basic  elliptic curve "
"cryptography series](https://andrea.corbellini.name/2015/05/17/elliptic-"
"curve-cryptography-a-gentle-introduction/)."
msgstr ""
"这里只简单提一下椭圆曲线,更多细节可参考阅读 [basic  elliptic curve "
"cryptography series](https://andrea.corbellini.name/2015/05/17/elliptic-"
"curve-cryptography-a-gentle-introduction/)."

#: src/zk-everything/zk-learning-miles/KZG.md:75
msgid "假设"
msgstr "假设"

#: src/zk-everything/zk-learning-miles/KZG.md:75
msgid "是由椭圆曲线点构成的群,g 是"
msgstr "是由椭圆曲线点构成的群,g 是"

#: src/zk-everything/zk-learning-miles/KZG.md:75
msgid "的生成元."
msgstr "的生成元."

#: src/zk-everything/zk-learning-miles/KZG.md:77
msgid "用符号\\[x\\]表示"
msgstr "用符号\\[x\\]表示"

#: src/zk-everything/zk-learning-miles/KZG.md:77
msgid ""
".由于**椭圆曲线的****离散对数****难题**,给定 g 与\\[x\\],**但无法逆推出 x.**"
msgstr ""
".由于**椭圆曲线的****离散对数****难题**,给定 g 与\\[x\\],**但无法逆推出 x.**"

#: src/zk-everything/zk-learning-miles/KZG.md:79
msgid "**3.2 Trusted Setup**"
msgstr "**3.2 Trusted Setup**"

#: src/zk-everything/zk-learning-miles/KZG.md:81
msgid ""
"对多项式进行承诺,需要一个与多项式系数数量一样长的 structured reference string"
"（SRS）。该字符串必须按照指定的方式生成，并提供给任何希望承诺多项式的参与方。"
"生成过程会产生一个秘密值 s,也称为 trapdoor 或者 toxic waste），必须将 s 其丢"
"弃。换句话说，生成参考字符串的任何一方都知道一个信息片段，该信息可以破坏多项"
"式承诺方案的 binding 性质，从而破坏使用该承诺方案的任何证明系统的正确性。生成"
"这样的 SRS 过程被称为**可信设置（trusted setup).**"
msgstr ""
"对多项式进行承诺,需要一个与多项式系数数量一样长的 structured reference string"
"（SRS）。该字符串必须按照指定的方式生成，并提供给任何希望承诺多项式的参与方。"
"生成过程会产生一个秘密值 s,也称为 trapdoor 或者 toxic waste），必须将 s 其丢"
"弃。换句话说，生成参考字符串的任何一方都知道一个信息片段，该信息可以破坏多项"
"式承诺方案的 binding 性质，从而破坏使用该承诺方案的任何证明系统的正确性。生成"
"这样的 SRS 过程被称为**可信设置（trusted setup).**"

#: src/zk-everything/zk-learning-miles/KZG.md:83
msgid "设 D 是希望支持承诺的多项式 P(x)的最高次数上界, SRS ="
msgstr "设 D 是希望支持承诺的多项式 P(x)的最高次数上界, SRS ="

#: src/zk-everything/zk-learning-miles/KZG.md:85
msgid ""
"目前主流是通过 **Ceremony** 生成 SRS,关于 **Ceremony** 的详细细节可参考 "
"[https://mirror.xyz/privacy-scaling-explorations.eth/naTdx-"
"u7kyirczTLSAnWwH6ZdedfTQu1yCWQj1m_n-E](https://mirror.xyz/privacy-scaling-"
"explorations.eth/naTdx-u7kyirczTLSAnWwH6ZdedfTQu1yCWQj1m_n-E)"
msgstr ""
"目前主流是通过 **Ceremony** 生成 SRS,关于 **Ceremony** 的详细细节可参考 "
"[https://mirror.xyz/privacy-scaling-explorations.eth/naTdx-"
"u7kyirczTLSAnWwH6ZdedfTQu1yCWQj1m_n-E](https://mirror.xyz/privacy-scaling-"
"explorations.eth/naTdx-u7kyirczTLSAnWwH6ZdedfTQu1yCWQj1m_n-E)"

#: src/zk-everything/zk-learning-miles/KZG.md:87
msgid ""
"Ceremony 的思想与 MPC 类似，让 N 名参与者生成自己的秘密，并按顺序将其添加到主"
"秘密中。只要有一个参与者不泄露秘密，那么主秘密就是安全的。主秘密的生成过程被"
"称为 Ceremony."
msgstr ""
"Ceremony 的思想与 MPC 类似，让 N 名参与者生成自己的秘密，并按顺序将其添加到主"
"秘密中。只要有一个参与者不泄露秘密，那么主秘密就是安全的。主秘密的生成过程被"
"称为 Ceremony."

#: src/zk-everything/zk-learning-miles/KZG.md:89
msgid ""
"可进入 [https://ceremy.ethereum.org](https://ceremy.ethereum.org) 参与以太坊"
"社区组织的 KZG Ceremony 的生成过程,成为其中一名贡献者!"
msgstr ""
"可进入 [https://ceremy.ethereum.org](https://ceremy.ethereum.org) 参与以太坊"
"社区组织的 KZG Ceremony 的生成过程,成为其中一名贡献者!"

#: src/zk-everything/zk-learning-miles/KZG.md:91
msgid "**3.3 combine Trusted Setup and EC**"
msgstr "**3.3 combine Trusted Setup and EC**"

#: src/zk-everything/zk-learning-miles/KZG.md:93
msgid "Trusted Setup 阶段生成 SRS=("
msgstr "Trusted Setup 阶段生成 SRS=("

#: src/zk-everything/zk-learning-miles/KZG.md:93
msgid ""
"),n 为 P(x)的 degree.然后将 s 丢弃。任何人都可以访问 SRS，但是**无法获得 s 本"
"身**."
msgstr ""
"),n 为 P(x)的 degree.然后将 s 丢弃。任何人都可以访问 SRS，但是**无法获得 s 本"
"身**."

#: src/zk-everything/zk-learning-miles/KZG.md:94
msgid "通过 SRS 重新构造多项式 P(x)为\\[P(s)\\],而不会暴露 s 与多项式本身"
msgstr "通过 SRS 重新构造多项式 P(x)为\\[P(s)\\],而不会暴露 s 与多项式本身"

#: src/zk-everything/zk-learning-miles/KZG.md:96
msgid "​                      "
msgstr "​                      "

#: src/zk-everything/zk-learning-miles/KZG.md:98
msgid ""
"上式中，用秘密 s 替换自变量 X,得到 P(s):因为自变量 x 可以表示为任何值,.这不影"
"响多项式本身.进而得到承诺 C=\\[P(s)\\]"
msgstr ""
"上式中，用秘密 s 替换自变量 X,得到 P(s):因为自变量 x 可以表示为任何值,.这不影"
"响多项式本身.进而得到承诺 C=\\[P(s)\\]"

#: src/zk-everything/zk-learning-miles/KZG.md:100
msgid "**4.计算 proof**"
msgstr "**4.计算 proof**"

#: src/zk-everything/zk-learning-miles/KZG.md:102
msgid "我们需要 proof "
msgstr "我们需要 proof "

#: src/zk-everything/zk-learning-miles/KZG.md:102
msgid "证明 P(z)=v.构造"
msgstr "证明 P(z)=v.构造"

#: src/zk-everything/zk-learning-miles/KZG.md:102
msgid "前先引入一些 polynomial math."
msgstr "前先引入一些 polynomial math."

#: src/zk-everything/zk-learning-miles/KZG.md:104
msgid ""
"**P(x)的零点为 m，即 P(m)=0.那么 P(x)一定能整除（x-m),即存在一个商多项式 "
"q(x).使得**"
msgstr ""
"**P(x)的零点为 m，即 P(m)=0.那么 P(x)一定能整除（x-m),即存在一个商多项式 "
"q(x).使得**"

#: src/zk-everything/zk-learning-miles/KZG.md:106
#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:197 SNARKs.md:198 src/zk-everything/zk-everything-joe/Hyrax.md:68
#: src/zk-everything/zk-everything-joe/Hyrax.md:310
msgid "\\>"
msgstr "\\>"

#: src/zk-everything/zk-learning-miles/KZG.md:108
msgid "想要证明的是 **p(z)=v**,结合上述 polynomial math.可做如下变换."
msgstr "想要证明的是 **p(z)=v**,结合上述 polynomial math.可做如下变换."

#: src/zk-everything/zk-learning-miles/KZG.md:110
msgid "p(X)-v=0 when X=z,则 p(X)-y 能整除(X-z) ,即"
msgstr "p(X)-v=0 when X=z,则 p(X)-y 能整除(X-z) ,即"

#: src/zk-everything/zk-learning-miles/KZG.md:110
#: src/zk-everything/zk-learning-miles/KZG.md:276
msgid ",即"
msgstr ",即"

#: src/zk-everything/zk-learning-miles/KZG.md:112
msgid "也把 q(X)称为\\*\\*\"Witness Polynomial\"\\*\\*"
msgstr "也把 q(X)称为\\*\\*\"Witness Polynomial\"\\*\\*"

#: src/zk-everything/zk-learning-miles/KZG.md:114
msgid "对于"
msgstr "对于"

#: src/zk-everything/zk-learning-miles/KZG.md:114
msgid ",不能直接利用这个等式,因为等式中的\\*\\*s \\*\\*两方都不知道"
msgstr ",不能直接利用这个等式,因为等式中的\\*\\*s \\*\\*两方都不知道"

#: src/zk-everything/zk-learning-miles/KZG.md:116
msgid ""
"**直觉上**,我们希望直接证明等式 \\[p(s)-v\\] = \\[q(s)\\*(s-z)\\]成立,从而完"
"成验证."
msgstr ""
"**直觉上**,我们希望直接证明等式 \\[p(s)-v\\] = \\[q(s)\\*(s-z)\\]成立,从而完"
"成验证."

#: src/zk-everything/zk-learning-miles/KZG.md:118
msgid "**等式左边:**"
msgstr "**等式左边:**"

#: src/zk-everything/zk-learning-miles/KZG.md:120
msgid "承诺仅满足**加法同态**_:_"
msgstr "承诺仅满足**加法同态**_:_"

#: src/zk-everything/zk-learning-miles/KZG.md:120
msgid ",所以\\[p(s)-v\\]=\\[p(s)\\] -\\[v\\]"
msgstr ",所以\\[p(s)-v\\]=\\[p(s)\\] -\\[v\\]"

#: src/zk-everything/zk-learning-miles/KZG.md:122
msgid "**等式右边:**"
msgstr "**等式右边:**"

#: src/zk-everything/zk-learning-miles/KZG.md:124
msgid ""
"在验证过程中,验证方会收到证明方发来的\\[p(s)\\] ,同时验证方自己可以计算\\[s-"
"z\\]=\\[s\\]\\-\\[z\\]的值"
msgstr ""
"在验证过程中,验证方会收到证明方发来的\\[p(s)\\] ,同时验证方自己可以计算\\[s-"
"z\\]=\\[s\\]\\-\\[z\\]的值"

#: src/zk-everything/zk-learning-miles/KZG.md:126
msgid ""
"但是由于椭圆曲线上不满足乘法,即**乘法\\*\\*\\*\\*同态**:"
"\\[p(s)\\]\\*\\[q(s)\\] =\\[p(s)\\*q(s)\\]"
msgstr ""
"但是由于椭圆曲线上不满足乘法,即**乘法\\*\\*\\*\\*同态**:"
"\\[p(s)\\]\\*\\[q(s)\\] =\\[p(s)\\*q(s)\\]"

#: src/zk-everything/zk-learning-miles/KZG.md:128
msgid ""
"所以等式\\*\\*\\[q(s) * (s-z)\\]= \\[q(s)\\]\\*\\[s-z\\]\\*\\* 并不成立,需要"
"引入**配对 pairing**。"
msgstr ""
"所以等式\\*\\*\\[q(s) * (s-z)\\]= \\[q(s)\\]\\*\\[s-z\\]\\*\\* 并不成立,需要"
"引入**配对 pairing**。"

#: src/zk-everything/zk-learning-miles/KZG.md:130
msgid "`因为椭圆曲线上的运算是一个加法群，而不是一个乘法群，乘法没有被定义。`"
msgstr "`因为椭圆曲线上的运算是一个加法群，而不是一个乘法群，乘法没有被定义。`"

#: src/zk-everything/zk-learning-miles/KZG.md:132
msgid ""
"这里需要强调的是，单个运算结构其实并不区分加法乘法，a o b 这个 o 把它称作成什"
"么都行 只是在有限域上的椭圆曲线点集构成一个加法群，把它称为加法是更符合习"
"惯。 我们区别加法与乘法，比如两种运算的代数结构比如环，域。 因为有两种运算，"
"需要做区分，因为涉及到分配律，谁对谁分配的问题，所以会很明确的区分加法与乘"
"法。"
msgstr ""
"这里需要强调的是，单个运算结构其实并不区分加法乘法，a o b 这个 o 把它称作成什"
"么都行 只是在有限域上的椭圆曲线点集构成一个加法群，把它称为加法是更符合习"
"惯。 我们区别加法与乘法，比如两种运算的代数结构比如环，域。 因为有两种运算，"
"需要做区分，因为涉及到分配律，谁对谁分配的问题，所以会很明确的区分加法与乘"
"法。"

#: src/zk-everything/zk-learning-miles/KZG.md:137
msgid "5.Pairing"
msgstr "5.Pairing"

#: src/zk-everything/zk-learning-miles/KZG.md:139
msgid ""
"Pairing is \\*\\*a bilinear mapping.**深入学习Pairing可参考**《Pairing for "
"beginners》\\*\\*这本书,在这里只做简单介绍."
msgstr ""
"Pairing is \\*\\*a bilinear mapping.**深入学习Pairing可参考**《Pairing for "
"beginners》\\*\\*这本书,在这里只做简单介绍."

#: src/zk-everything/zk-learning-miles/KZG.md:141
msgid "**bilinear**"
msgstr "**bilinear**"

#: src/zk-everything/zk-learning-miles/KZG.md:142
msgid "Linearity:对于某些一元函数,如果该函数服从"
msgstr "Linearity:对于某些一元函数,如果该函数服从"

#: src/zk-everything/zk-learning-miles/KZG.md:143
msgid "Bilinearity:对于二元函数,Linearity 存在于所有维度中,即"
msgstr "Bilinearity:对于二元函数,Linearity 存在于所有维度中,即"

#: src/zk-everything/zk-learning-miles/KZG.md:147
msgid ""
"**bilinear mapping** [双线性映射](https://zh.wikipedia.org/wiki/"
"%E5%8F%8C%E7%BA%BF%E6%80%A7%E6%98%A0%E5%B0%84)是一个函数,它从两个向量空间的元"
"素产生第三个向量空间的元素,每个参数都是线性的."
msgstr ""
"**bilinear mapping** [双线性映射](https://zh.wikipedia.org/wiki/"
"%E5%8F%8C%E7%BA%BF%E6%80%A7%E6%98%A0%E5%B0%84)是一个函数,它从两个向量空间的元"
"素产生第三个向量空间的元素,每个参数都是线性的."

#: src/zk-everything/zk-learning-miles/KZG.md:150
msgid "5.1 about pairing"
msgstr "5.1 about pairing"

#: src/zk-everything/zk-learning-miles/KZG.md:152
msgid ""
"配对是⼀种抽象操作。其定义可能会有所不同。 有 Tate 配对、Weil 配对、Ate 配对"
"等等…… 虽然每⼀个都通过不同的操作来定义配对,**但是Input与output的格式,"
"pairing 的属性都是固定的**."
msgstr ""
"配对是⼀种抽象操作。其定义可能会有所不同。 有 Tate 配对、Weil 配对、Ate 配对"
"等等…… 虽然每⼀个都通过不同的操作来定义配对,**但是Input与output的格式,"
"pairing 的属性都是固定的**."

#: src/zk-everything/zk-learning-miles/KZG.md:154
msgid "**Input**:"
msgstr "**Input**:"

#: src/zk-everything/zk-learning-miles/KZG.md:156
msgid "![](static/LTvUbxxJ9oe9z0xoYiecoD7dn85.png)"
msgstr "![](static/LTvUbxxJ9oe9z0xoYiecoD7dn85.png)"

#: src/zk-everything/zk-learning-miles/KZG.md:158
msgid "![](static/ErfgbsD5DoFQgfxqY5VczC40nOf.png)"
msgstr "![](static/ErfgbsD5DoFQgfxqY5VczC40nOf.png)"

#: src/zk-everything/zk-learning-miles/KZG.md:160
msgid "**output**："
msgstr "**output**："

#: src/zk-everything/zk-learning-miles/KZG.md:162
msgid "n 阶乘法群"
msgstr "n 阶乘法群"

#: src/zk-everything/zk-learning-miles/KZG.md:162
msgid "中的整数（或复数)"
msgstr "中的整数（或复数)"

#: src/zk-everything/zk-learning-miles/KZG.md:164
msgid ""
"分别是对称与非对称的 Pairing 形式。**在实际中，非对称 Pairing 效率最高。**"
msgstr ""
"分别是对称与非对称的 Pairing 形式。**在实际中，非对称 Pairing 效率最高。**"

#: src/zk-everything/zk-learning-miles/KZG.md:166
msgid "properties："
msgstr "properties："

#: src/zk-everything/zk-learning-miles/KZG.md:168
msgid "e(P, Q + R) = e(P,Q) * e(P, R)"
msgstr "e(P, Q + R) = e(P,Q) * e(P, R)"

#: src/zk-everything/zk-learning-miles/KZG.md:169
msgid "e(P + S, Q) = e(P,Q) * e(S, Q)"
msgstr "e(P + S, Q) = e(P,Q) * e(S, Q)"

#: src/zk-everything/zk-learning-miles/KZG.md:170
msgid "(bilinear)"
msgstr "(bilinear)"

#: src/zk-everything/zk-learning-miles/KZG.md:171
msgid "e(P, Q) ≠ 1 (non-degeneracy property)"
msgstr "e(P, Q) ≠ 1 (non-degeneracy property)"

#: src/zk-everything/zk-learning-miles/KZG.md:173
msgid "5.2 Pairing examples"
msgstr "5.2 Pairing examples"

#: src/zk-everything/zk-learning-miles/KZG.md:175
msgid "1.e(x, y) = 2ˣʸ"
msgstr "1.e(x, y) = 2ˣʸ"

#: src/zk-everything/zk-learning-miles/KZG.md:177
msgid "例: 请举例在实数域中 e(x, y) = 2ˣʸ 是双线性函数."
msgstr "例: 请举例在实数域中 e(x, y) = 2ˣʸ 是双线性函数."

#: src/zk-everything/zk-learning-miles/KZG.md:179
msgid "e(3, 4 + 5) = 2³˙⁹ = 2²⁷"
msgstr "e(3, 4 + 5) = 2³˙⁹ = 2²⁷"

#: src/zk-everything/zk-learning-miles/KZG.md:180
msgid "e(3, 4) * e(3, 5) = 2³˙⁴ * 2³˙⁵ = 2¹² * 2¹⁵ = 2²⁷."
msgstr "e(3, 4) * e(3, 5) = 2³˙⁴ * 2³˙⁵ = 2¹² * 2¹⁵ = 2²⁷."

#: src/zk-everything/zk-learning-miles/KZG.md:181
msgid ""
"通过 pairing 证明知道 x² - x - 42 = 0 的解, 然而并不透露这个解的具体数值."
msgstr ""
"通过 pairing 证明知道 x² - x - 42 = 0 的解, 然而并不透露这个解的具体数值."

#: src/zk-everything/zk-learning-miles/KZG.md:183
msgid " 成立, 那么 k 必须为 0 或者目标群的倍数."
msgstr " 成立, 那么 k 必须为 0 或者目标群的倍数."

#: src/zk-everything/zk-learning-miles/KZG.md:185
msgid "如果存在 "
msgstr "如果存在 "

#: src/zk-everything/zk-learning-miles/KZG.md:185
msgid "42"
msgstr "42"

#: src/zk-everything/zk-learning-miles/KZG.md:185
msgid ", 可以确定原始二次方程式成立. 使用双线性性重写方程 "
msgstr ", 可以确定原始二次方程式成立. 使用双线性性重写方程 "

#: src/zk-everything/zk-learning-miles/KZG.md:185
msgid ".进一步,e(xG, xG) ⋅ e(xG, -G) ⋅ e(G, -42G) = 1."
msgstr ".进一步,e(xG, xG) ⋅ e(xG, -G) ⋅ e(G, -42G) = 1."

#: src/zk-everything/zk-learning-miles/KZG.md:187
msgid ""
"因此只需要提供 xG 的值. 同时由于椭圆曲线的离散对数问题, 从 xG 反推回 x 是困难"
"的."
msgstr ""
"因此只需要提供 xG 的值. 同时由于椭圆曲线的离散对数问题, 从 xG 反推回 x 是困难"
"的."

#: src/zk-everything/zk-learning-miles/KZG.md:189
msgid "2.**解决 Diffie-Hellman 难题**"
msgstr "2.**解决 Diffie-Hellman 难题**"

#: src/zk-everything/zk-learning-miles/KZG.md:191
msgid "3.**BLS**签名"
msgstr "3.**BLS**签名"

#: src/zk-everything/zk-learning-miles/KZG.md:193
msgid "6.**KZG**"
msgstr "6.**KZG**"

#: src/zk-everything/zk-learning-miles/KZG.md:195
msgid "回到KZG部分"
msgstr "回到KZG部分"

#: src/zk-everything/zk-learning-miles/KZG.md:197
msgid "分别是同一椭圆曲线的两个子群.g 是子群"
msgstr "分别是同一椭圆曲线的两个子群.g 是子群"

#: src/zk-everything/zk-learning-miles/KZG.md:197
msgid "的生成元,h 是子群"
msgstr "的生成元,h 是子群"

#: src/zk-everything/zk-learning-miles/KZG.md:197
msgid "的生成元"
msgstr "的生成元"

#: src/zk-everything/zk-learning-miles/KZG.md:199
msgid "生成元的选择通常在 trusted Setup 阶段选择"
msgstr "生成元的选择通常在 trusted Setup 阶段选择"

#: src/zk-everything/zk-learning-miles/KZG.md:201
msgid "define pairing e: "
msgstr "define pairing e: "

#: src/zk-everything/zk-learning-miles/KZG.md:201
msgid ",对于秘密 s 也相应有两个分布"
msgstr ",对于秘密 s 也相应有两个分布"

#: src/zk-everything/zk-learning-miles/KZG.md:201
msgid ".即SRS"
msgstr ".即SRS"

#: src/zk-everything/zk-learning-miles/KZG.md:203
msgid "原来要验证的等式："
msgstr "原来要验证的等式："

#: src/zk-everything/zk-learning-miles/KZG.md:203
msgid "   **=>**   "
msgstr "   **=>**   "

#: src/zk-everything/zk-learning-miles/KZG.md:205
msgid "分布集1: "
msgstr "分布集1: "

#: src/zk-everything/zk-learning-miles/KZG.md:205
msgid "，对应生成元为g。计算π、C、"
msgstr "，对应生成元为g。计算π、C、"

#: src/zk-everything/zk-learning-miles/KZG.md:207
msgid "分布集2: "
msgstr "分布集2: "

#: src/zk-everything/zk-learning-miles/KZG.md:207
msgid "，对应生成元为h。计算"
msgstr "，对应生成元为h。计算"

#: src/zk-everything/zk-learning-miles/KZG.md:209
msgid "验证者验证等式："
msgstr "验证者验证等式："

#: src/zk-everything/zk-learning-miles/KZG.md:211
msgid "简单理解这个等式："
msgstr "简单理解这个等式："

#: src/zk-everything/zk-learning-miles/KZG.md:211
#: src/zk-everything/zk-learning-miles/KZG.md:248
msgid "）"
msgstr "）"

#: src/zk-everything/zk-learning-miles/KZG.md:213
#: src/zk-everything/zk-learning-miles/KZG.md:248
#: src/zk-everything/zk-everything-joe/Spartan.md:441
msgid "（"
msgstr "（"

#: src/zk-everything/zk-learning-miles/KZG.md:215
msgid ""
"\\[x\\]g 与 g^x 表述形式不同，本质上没有什么区别。 a o b =c 如果群运算定义为"
"加法，就使用\\[x\\]g 这种形式 如果群运算定义为乘法，就使用 g^x 这种形式"
msgstr ""
"\\[x\\]g 与 g^x 表述形式不同，本质上没有什么区别。 a o b =c 如果群运算定义为"
"加法，就使用\\[x\\]g 这种形式 如果群运算定义为乘法，就使用 g^x 这种形式"

#: src/zk-everything/zk-learning-miles/KZG.md:220
msgid "用黑盒来理解这个等式的话，就等价于在"
msgstr "用黑盒来理解这个等式的话，就等价于在"

#: src/zk-everything/zk-learning-miles/KZG.md:220
msgid "群中去验证下面乘法的成立"
msgstr "群中去验证下面乘法的成立"

#: src/zk-everything/zk-learning-miles/KZG.md:224
msgid "Verifier 如何进行验算："
msgstr "Verifier 如何进行验算："

#: src/zk-everything/zk-learning-miles/KZG.md:226
msgid "_prover 发送_"
msgstr "_prover 发送_"

#: src/zk-everything/zk-learning-miles/KZG.md:226
msgid ",C,v"
msgstr ",C,v"

#: src/zk-everything/zk-learning-miles/KZG.md:227
msgid ""
"Verifier 自己选择的 z,根据加法同态,Verifier 可以计算\\_\\[s -z\\]₂=\\[s\\]₂ "
"- \\[z\\]₂\\_"
msgstr ""
"Verifier 自己选择的 z,根据加法同态,Verifier 可以计算\\_\\[s -z\\]₂=\\[s\\]₂ "
"- \\[z\\]₂\\_"

#: src/zk-everything/zk-learning-miles/KZG.md:228
msgid "_g,h_ is public,**pairing function is public.**"
msgstr "_g,h_ is public,**pairing function is public.**"

#: src/zk-everything/zk-learning-miles/KZG.md:230
msgid "KZG **完整过程：**"
msgstr "KZG **完整过程：**"

#: src/zk-everything/zk-learning-miles/KZG.md:232
msgid "通过 Trusted setup, 产生 SRS:**\\[sⁱ\\]₁**,  **\\[sⁱ\\]₂**."
msgstr "通过 Trusted setup, 产生 SRS:**\\[sⁱ\\]₁**,  **\\[sⁱ\\]₂**."

#: src/zk-everything/zk-learning-miles/KZG.md:233
msgid ""
"Prover 使用\\_\\[sⁱ\\]₁\\_,对多项式 P(x)进行 commit,得到 **C** = "
"_\\[p(s)\\]₁_,  发送给 Verifier."
msgstr ""
"Prover 使用\\_\\[sⁱ\\]₁\\_,对多项式 P(x)进行 commit,得到 **C** = "
"_\\[p(s)\\]₁_,  发送给 Verifier."

#: src/zk-everything/zk-learning-miles/KZG.md:234
msgid "Verifier 选择挑战点_z \\_∈ {0,...,\\_p_−1}"
msgstr "Verifier 选择挑战点_z \\_∈ {0,...,\\_p_−1}"

#: src/zk-everything/zk-learning-miles/KZG.md:235
msgid "Prover 发送 **π 、y** 给 Verifier:"
msgstr "Prover 发送 **π 、y** 给 Verifier:"

#: src/zk-everything/zk-learning-miles/KZG.md:236
msgid ""
"Verifier 检查等式: \\_e(π, \\[s -z\\]₂) = e(C -\\[v\\]₁, H) \\__—_ if the "
"equation holds, the verifier accepts the proof _—_ if the equation does not "
"hold, the verifier rejects the proof"
msgstr ""
"Verifier 检查等式: \\_e(π, \\[s -z\\]₂) = e(C -\\[v\\]₁, H) \\__—_ if the "
"equation holds, the verifier accepts the proof _—_ if the equation does not "
"hold, the verifier rejects the proof"

#: src/zk-everything/zk-learning-miles/KZG.md:240
msgid "KZG 分析"
msgstr "KZG 分析"

#: src/zk-everything/zk-learning-miles/KZG.md:242
msgid "对 KZG 的 Corretness Binding hiding 分别分析"
msgstr "对 KZG 的 Corretness Binding hiding 分别分析"

#: src/zk-everything/zk-learning-miles/KZG.md:244
msgid "Corretness"
msgstr "Corretness"

#: src/zk-everything/zk-learning-miles/KZG.md:248
msgid "等式左边:"
msgstr "等式左边:"

#: src/zk-everything/zk-learning-miles/KZG.md:250
msgid "等式右边: "
msgstr "等式右边: "

#: src/zk-everything/zk-learning-miles/KZG.md:252
msgid "hiding"
msgstr "hiding"

#: src/zk-everything/zk-learning-miles/KZG.md:254
msgid "因为椭圆曲线的离散对数难题,敌手拿到\\[x\\]无法得到 x."
msgstr "因为椭圆曲线的离散对数难题,敌手拿到\\[x\\]无法得到 x."

#: src/zk-everything/zk-learning-miles/KZG.md:256
msgid "Binding"
msgstr "Binding"

#: src/zk-everything/zk-learning-miles/KZG.md:258
msgid "分析 Binding 前，需要介绍 SDH 假设。"
msgstr "分析 Binding 前，需要介绍 SDH 假设。"

#: src/zk-everything/zk-learning-miles/KZG.md:260
msgid "**Strong Diffie-Hellman(SDH)** 问题定义如下："
msgstr "**Strong Diffie-Hellman(SDH)** 问题定义如下："

#: src/zk-everything/zk-learning-miles/KZG.md:262
msgid "给定(q+1)长的元组 "
msgstr "给定(q+1)长的元组 "

#: src/zk-everything/zk-learning-miles/KZG.md:262
msgid " 作为输入，输出 "
msgstr " 作为输入，输出 "

#: src/zk-everything/zk-learning-miles/KZG.md:264
msgid ""
"**SDH**假设**就是不存在多项式时间算法可以**以**不可忽略概率**解决 SDH 问题。"
"下面用对称形式的 Pairing 进行分析"
msgstr ""
"**SDH**假设**就是不存在多项式时间算法可以**以**不可忽略概率**解决 SDH 问题。"
"下面用对称形式的 Pairing 进行分析"

#: src/zk-everything/zk-learning-miles/KZG.md:266
msgid ""
"后续 pairing 的验证都是“g 的指数上”在进行验证,为了方便起见.省略底数 g,后续的"
"等式都是在指数位置上进行."
msgstr ""
"后续 pairing 的验证都是“g 的指数上”在进行验证,为了方便起见.省略底数 g,后续的"
"等式都是在指数位置上进行."

#: src/zk-everything/zk-learning-miles/KZG.md:268
msgid ""
"反证法,即KZG不满足 binding,那么 open 承诺 C 可以得到值 v 和 v'，承诺方必须确"
"定两个不同的值 y 和 y'，使得下列等式成立:"
msgstr ""
"反证法,即KZG不满足 binding,那么 open 承诺 C 可以得到值 v 和 v'，承诺方必须确"
"定两个不同的值 y 和 y'，使得下列等式成立:"

#: src/zk-everything/zk-learning-miles/KZG.md:274
msgid "_因为_"
msgstr "_因为_"

#: src/zk-everything/zk-learning-miles/KZG.md:274
msgid ",假设 "
msgstr ",假设 "

#: src/zk-everything/zk-learning-miles/KZG.md:274
msgid ", 等式两边同时除以"
msgstr ", 等式两边同时除以"

#: src/zk-everything/zk-learning-miles/KZG.md:274
msgid "可得:"
msgstr "可得:"

#: src/zk-everything/zk-learning-miles/KZG.md:276
msgid ",这说明有人可高效计算出"
msgstr ",这说明有人可高效计算出"

#: src/zk-everything/zk-learning-miles/KZG.md:276
msgid ",这**违背了SDH假设**."
msgstr ",这**违背了SDH假设**."

#: src/zk-everything/zk-learning-miles/KZG.md:278
msgid "总结:"
msgstr "总结:"

#: src/zk-everything/zk-learning-miles/KZG.md:280
msgid ""
"像之前说的那样,KZG 方案的 Proof size 是常量 (一个椭圆曲线群元素),验证时间也是"
"常量 (两次 pairing 操作),这是其优点.但是其最大缺点是需要一个 Trusted Setup 阶"
"段."
msgstr ""
"像之前说的那样,KZG 方案的 Proof size 是常量 (一个椭圆曲线群元素),验证时间也是"
"常量 (两次 pairing 操作),这是其优点.但是其最大缺点是需要一个 Trusted Setup 阶"
"段."

#: src/zk-everything/zk-learning-miles/KZG.md:282
msgid "7.**Batch-KZG proof：multi proof**"
msgstr "7.**Batch-KZG proof：multi proof**"

#: src/zk-everything/zk-learning-miles/KZG.md:284
msgid ""
"上述过程验证了⼀个在**单点上**求值的多项式。但如果想证明⼀个多项式上在**多点"
"**上的值，就必须⼀次⼜⼀次地重复同样的协议 **(back and forth)**。这显然是没有"
"效率的。为了解决这个问题，需要 \"批量 \"验证多项式上的点。"
msgstr ""
"上述过程验证了⼀个在**单点上**求值的多项式。但如果想证明⼀个多项式上在**多点"
"**上的值，就必须⼀次⼜⼀次地重复同样的协议 **(back and forth)**。这显然是没有"
"效率的。为了解决这个问题，需要 \"批量 \"验证多项式上的点。"

#: src/zk-everything/zk-learning-miles/KZG.md:286
msgid "假设想证明 k 个点上的值："
msgstr "假设想证明 k 个点上的值："

#: src/zk-everything/zk-learning-miles/KZG.md:288
msgid "通过使用拉格朗日多项式插值法，构造一个经过上述 k 个点对的 k-1 次多项式"
msgstr "通过使用拉格朗日多项式插值法，构造一个经过上述 k 个点对的 k-1 次多项式"

#: src/zk-everything/zk-learning-miles/KZG.md:290
msgid "n+1 个坐标对的形式 可以唯一的恢复出一个多项式"
msgstr "n+1 个坐标对的形式 可以唯一的恢复出一个多项式"

#: src/zk-everything/zk-learning-miles/KZG.md:292
msgid "![](static/EtQDbXyqrokYp6x860wc9F6unBf.png)"
msgstr "![](static/EtQDbXyqrokYp6x860wc9F6unBf.png)"

#: src/zk-everything/zk-learning-miles/KZG.md:294
msgid ""
"\\*\\*原多项式 P(x)**与**构造的 I(x)\\*\\*都经过 k 个点对，所以多项式 P(x)-"
"I(x)=0 在如下点上满足"
msgstr ""
"\\*\\*原多项式 P(x)**与**构造的 I(x)\\*\\*都经过 k 个点对，所以多项式 P(x)-"
"I(x)=0 在如下点上满足"

#: src/zk-everything/zk-learning-miles/KZG.md:296
msgid "![](static/FHTIbRearoiiPixkU86c4YMvnbg.png)"
msgstr "![](static/FHTIbRearoiiPixkU86c4YMvnbg.png)"

#: src/zk-everything/zk-learning-miles/KZG.md:298
msgid "即多项式能够整除"
msgstr "即多项式能够整除"

#: src/zk-everything/zk-learning-miles/KZG.md:300
msgid "![](static/Cy6zbf5ujo3Hb3xam0vcWj8Uncd.png)"
msgstr "![](static/Cy6zbf5ujo3Hb3xam0vcWj8Uncd.png)"

#: src/zk-everything/zk-learning-miles/KZG.md:302
msgid "定义一个 zero polynomial:"
msgstr "定义一个 zero polynomial:"

#: src/zk-everything/zk-learning-miles/KZG.md:304
msgid "![](static/GsAnbEDBSoW6Z0xOokpcT0xwn1d.png)"
msgstr "![](static/GsAnbEDBSoW6Z0xOokpcT0xwn1d.png)"

#: src/zk-everything/zk-learning-miles/KZG.md:306
msgid "则下式成立"
msgstr "则下式成立"

#: src/zk-everything/zk-learning-miles/KZG.md:308
msgid "![](static/GjIybT7UGoINJgxq86oc5xMVn5d.png)"
msgstr "![](static/GjIybT7UGoINJgxq86oc5xMVn5d.png)"

#: src/zk-everything/zk-learning-miles/KZG.md:310
msgid "定义 kate multiproof for the evaluation of these points："
msgstr "定义 kate multiproof for the evaluation of these points："

#: src/zk-everything/zk-learning-miles/KZG.md:312
msgid "![](static/LkOXbbD7volPc9x5BTmcirVrnNc.png)"
msgstr "![](static/LkOXbbD7volPc9x5BTmcirVrnNc.png)"

#: src/zk-everything/zk-learning-miles/KZG.md:314
msgid "验证过程如下："
msgstr "验证过程如下："

#: src/zk-everything/zk-learning-miles/KZG.md:316
msgid "Verifier 通过 k 个 points(z,y)计算 Z(x)和 I(x)"
msgstr "Verifier 通过 k 个 points(z,y)计算 Z(x)和 I(x)"

#: src/zk-everything/zk-learning-miles/KZG.md:317
msgid "Verifier 计算"
msgstr "Verifier 计算"

#: src/zk-everything/zk-learning-miles/KZG.md:317
msgid "［"
msgstr "［"

#: src/zk-everything/zk-learning-miles/KZG.md:317
#: src/zk-everything/zk-learning-miles/KZG.md:318
#: src/zk-everything/zk-everything-joe/Spartan.md:23
#: src/zk-everything/zk-everything-joe/Spartan.md:93
#: src/zk-everything/zk-everything-joe/Spartan.md:136
#: src/zk-everything/zk-everything-joe/Spartan.md:154
#: src/zk-everything/zk-everything-joe/Spartan.md:155
#: src/zk-everything/zk-everything-joe/Spartan.md:166
#: src/zk-everything/zk-everything-joe/Spartan.md:195
#: src/zk-everything/zk-everything-joe/Spartan.md:200
#: src/zk-everything/zk-everything-joe/Spartan.md:207
#: src/zk-everything/zk-everything-joe/Spartan.md:232
#: src/zk-everything/zk-everything-joe/Spartan.md:240
#: src/zk-everything/zk-everything-joe/Spartan.md:242
msgid "I"
msgstr "I"

#: src/zk-everything/zk-learning-miles/KZG.md:318
msgid "Verifier 验证等式"
msgstr "Verifier 验证等式"

#: src/zk-everything/zk-learning-miles/KZG.md:318
msgid "＝"
msgstr "＝"

#: src/zk-everything/zk-learning-miles/KZG.md:318
msgid "是否成"
msgstr "是否成"

#: src/zk-everything/zk-learning-miles/KZG.md:320
msgid "8.KZG in ZK-Rollup"
msgstr "8.KZG in ZK-Rollup"

#: src/zk-everything/zk-learning-miles/KZG.md:322
msgid ""
"在 zk-rollups 的情况下,想证明发生在 L2 上的一些计算是有效的。简单来讲，发生"
"在 L2 上的计算可通过称为“ witness 生成”的过程表示为二维矩阵。然后可以用多项式"
"列表来表示矩阵 - 每列都可以编码为其自己的一维向量。然后，计算的有效性可以表示"
"为这些多项式之间必须保持的一组数学关系。例如，如果前三列分别由多项式 a(x)、"
"b(x) 以及 c(x) 表示，可能需要关系 a(x)⋅b(x)−c(x)=0 保持。多项式（代表计算）是"
"否满足这些“正确性约束”可通过在一些随机点评估多项式来确定。如果“正确性约束”在"
"这些随机点上得到了具体的满足，则一名验证者可以非常高的概率断言计算是正确的。"
msgstr ""
"在 zk-rollups 的情况下,想证明发生在 L2 上的一些计算是有效的。简单来讲，发生"
"在 L2 上的计算可通过称为“ witness 生成”的过程表示为二维矩阵。然后可以用多项式"
"列表来表示矩阵 - 每列都可以编码为其自己的一维向量。然后，计算的有效性可以表示"
"为这些多项式之间必须保持的一组数学关系。例如，如果前三列分别由多项式 a(x)、"
"b(x) 以及 c(x) 表示，可能需要关系 a(x)⋅b(x)−c(x)=0 保持。多项式（代表计算）是"
"否满足这些“正确性约束”可通过在一些随机点评估多项式来确定。如果“正确性约束”在"
"这些随机点上得到了具体的满足，则一名验证者可以非常高的概率断言计算是正确的。"

#: src/zk-everything/zk-learning-miles/KZG.md:324
msgid ""
"很自然地看到像 KZG 这样的多项式承诺方案，是如何直接插入到这个范式中的："
"rollup 将 commit to 一组多项式，它们一起代表计算。 然后，验证者可要求对一些随"
"机点进行评估，以检查正确性约束是否成立，从而验证多项式表示的计算是否有效。"
msgstr ""
"很自然地看到像 KZG 这样的多项式承诺方案，是如何直接插入到这个范式中的："
"rollup 将 commit to 一组多项式，它们一起代表计算。 然后，验证者可要求对一些随"
"机点进行评估，以检查正确性约束是否成立，从而验证多项式表示的计算是否有效。"

#: src/zk-everything/zk-learning-miles/KZG.md:326
msgid "![](static/WFhObAEPnoiu9ex8c8wcMZwPn4e.png)"
msgstr "![](static/WFhObAEPnoiu9ex8c8wcMZwPn4e.png)"

#: src/zk-everything/zk-learning-miles/KZG.md:328
msgid "最后感谢@Kurt-Pan的指导与建议"
msgstr "最后感谢@Kurt-Pan的指导与建议"

#: src/zk-everything/zk-learning-miles/KZG.md:330
msgid "参考文章"
msgstr "参考文章"

#: src/zk-everything/zk-learning-miles/KZG.md:332
msgid ""
"[Understanding KZG10 Polynomial Commitments (taoa.io)](https://taoa.io/posts/"
"Understanding-KZG10-Polynomial-Commitments)"
msgstr ""
"[Understanding KZG10 Polynomial Commitments (taoa.io)](https://taoa.io/posts/"
"Understanding-KZG10-Polynomial-Commitments)"

#: src/zk-everything/zk-learning-miles/KZG.md:334
msgid ""
"[Kate Commitments: A Primer - HackMD](https://hackmd.io/@tompocock/Hk2A7BD6U)"
msgstr ""
"[Kate Commitments: A Primer - HackMD](https://hackmd.io/@tompocock/Hk2A7BD6U)"

#: src/zk-everything/zk-learning-miles/KZG.md:336
msgid ""
"[Dankrad Feist's kzg commitment post](https://dankradfeist.de/"
"ethereum/2020/06/16/kate-polynomial-commitments.html)"
msgstr ""
"[Dankrad Feist's kzg commitment post](https://dankradfeist.de/"
"ethereum/2020/06/16/kate-polynomial-commitments.html)"

#: src/zk-everything/zk-learning-miles/KZG.md:338
msgid ""
"[https://blog.subspace.network/kzg-polynomial-commitments-cd64af8ec868]"
"(https://blog.subspace.network/kzg-polynomial-commitments-cd64af8ec868)"
msgstr ""
"[https://blog.subspace.network/kzg-polynomial-commitments-cd64af8ec868]"
"(https://blog.subspace.network/kzg-polynomial-commitments-cd64af8ec868)"

#: src/zk-everything/zk-learning-miles/KZG.md:340
msgid ""
"[Understanding KZG10 Polynomial Commitments](https://taoa.io/posts/"
"Understanding-KZG10-Polynomial-Commitments)"
msgstr ""
"[Understanding KZG10 Polynomial Commitments](https://taoa.io/posts/"
"Understanding-KZG10-Polynomial-Commitments)"

#: src/zk-everything/zk-learning-miles/KZG.md:342
msgid ""
"[Committing to lunch (taoa.io)](https://taoa.io/posts/Committing-to-lunch)"
msgstr ""
"[Committing to lunch (taoa.io)](https://taoa.io/posts/Committing-to-lunch)"

#: src/zk-everything/zk-learning-miles/KZG.md:344
msgid "book:Proof,argument and zero knowledge"
msgstr "book:Proof,argument and zero knowledge"

#: src/zk-everything/zk-learning-miles/KZG.md:346
msgid "KZG原始论文"
msgstr "KZG原始论文"

#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:4
msgid "Lecture1:Introduction to Zero knowledge Interactive Proofs"
msgstr "Lecture1:Introduction to Zero knowledge Interactive Proofs"

#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:6
msgid "NP"
msgstr "NP"

#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:8
msgid "NP Proof:"
msgstr "NP Proof:"

#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:10
msgid "NP-proofs 属于可高效验证的 proofs.其中要求"
msgstr "NP-proofs 属于可高效验证的 proofs.其中要求"

#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:12
msgid "1.Witness 的长度应当是 statement x 的长度的多项式表示."
msgstr "1.Witness 的长度应当是 statement x 的长度的多项式表示."

#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:14
msgid "2.Verifier 时间是 x 长度的多项式函数表示"
msgstr "2.Verifier 时间是 x 长度的多项式函数表示"

#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:16
msgid "![](static/KuMzbk2G0oupOoxt1UbchJW9n4c.png)"
msgstr "![](static/KuMzbk2G0oupOoxt1UbchJW9n4c.png)"

#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:18
msgid "NP proofs 例子"
msgstr "NP proofs 例子"

#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:20
msgid "上述例子都可以用一种通用的语言关系 L 来表示"
msgstr "上述例子都可以用一种通用的语言关系 L 来表示"

#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:22
msgid "更具体而言,上述都是 NP 问题:(简单来说,求解困难,但是验证高效的问题)"
msgstr "更具体而言,上述都是 NP 问题:(简单来说,求解困难,但是验证高效的问题)"

#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:24
msgid "P NP  NPC"
msgstr "P NP  NPC"

#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:25
msgid "P 问题：指能在多项式时间求解出的问题.如 2SAT,欧拉路径,PATH 问题"
msgstr "P 问题：指能在多项式时间求解出的问题.如 2SAT,欧拉路径,PATH 问题"

#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:26
msgid ""
"NP:Nondeterministic polynominal(非确定性多项式) 一个问题不能确定是否能够在多"
"项式时间内找到一个解。但若给出一个解，能在多项式时间内证明这个解是否正确 .如"
"果找到一个解，那么 NP 问题就变成了 P 问题，所以 P∈NP 类  注：NP 问题不能理解"
"为非 P 问题 著名的 NP 类问题：旅行家推销问题(TSP)。即有一个推销员，要到 n 个"
"城市推销商品，他要找出一个包含所有 n 个城市的环路，这个环路路径小于 a。如果单"
"纯的用枚举法来列举的话会有(n-1)! 种，已经不是多项式时间的算法了，阶乘比多项式"
"复杂。假设有人猜几次就猜中了一条小于长度 a 的路径，TSP 问题解决了。可是，人们"
"不可能每次都猜的那么准。所以说，这是一个 NP 类问题。也就是，我们能在多项式的"
"时间内验证并得出问题的正确解，可是我们却不知道（非不存在）该问题是否存在一个"
"多项式时间的算法能解决 **NP\\*\\*\\*\\*问题的本质是单向性，不可快速求解，但是"
"能够快速验证**。"
msgstr ""
"NP:Nondeterministic polynominal(非确定性多项式) 一个问题不能确定是否能够在多"
"项式时间内找到一个解。但若给出一个解，能在多项式时间内证明这个解是否正确 .如"
"果找到一个解，那么 NP 问题就变成了 P 问题，所以 P∈NP 类  注：NP 问题不能理解"
"为非 P 问题 著名的 NP 类问题：旅行家推销问题(TSP)。即有一个推销员，要到 n 个"
"城市推销商品，他要找出一个包含所有 n 个城市的环路，这个环路路径小于 a。如果单"
"纯的用枚举法来列举的话会有(n-1)! 种，已经不是多项式时间的算法了，阶乘比多项式"
"复杂。假设有人猜几次就猜中了一条小于长度 a 的路径，TSP 问题解决了。可是，人们"
"不可能每次都猜的那么准。所以说，这是一个 NP 类问题。也就是，我们能在多项式的"
"时间内验证并得出问题的正确解，可是我们却不知道（非不存在）该问题是否存在一个"
"多项式时间的算法能解决 **NP\\*\\*\\*\\*问题的本质是单向性，不可快速求解，但是"
"能够快速验证**。"

#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:30
msgid ""
"NPC： 规约：问题 A 可以转化为问题 B，对于难度而言，问题 B 比问题 A 要困难。规"
"约具有传递性：A 规约至 B，B 规约至 C，那么 A 规约至 C。一直规约下便会得到 "
"NPC 问题 所有的 NP 问题都可以约化成 NPC 问题。只要解决了这个问题，那么所有的 "
"NP 问题都解决了。NPC 需要满足两个条件.1：是一个 NP 问题 2：所有的 NP 问题都可"
"以约化到它。如 SAT 问题、HAMPATH 问题都属于 NPC 问题."
msgstr ""
"NPC： 规约：问题 A 可以转化为问题 B，对于难度而言，问题 B 比问题 A 要困难。规"
"约具有传递性：A 规约至 B，B 规约至 C，那么 A 规约至 C。一直规约下便会得到 "
"NPC 问题 所有的 NP 问题都可以约化成 NPC 问题。只要解决了这个问题，那么所有的 "
"NP 问题都解决了。NPC 需要满足两个条件.1：是一个 NP 问题 2：所有的 NP 问题都可"
"以约化到它。如 SAT 问题、HAMPATH 问题都属于 NPC 问题."

#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:33
msgid ""
"NP-hard 问题 它满足 NPC 问题定义的第二条但不一定要满足第一条（就是说，NP-"
"Hard 问题要比 NPC 问题的范围广，NP-Hard 问题没有限定属于 NP），即所有的 NP 问"
"题都能约化到它，但是它不一定是一个 NP 问题"
msgstr ""
"NP-hard 问题 它满足 NPC 问题定义的第二条但不一定要满足第一条（就是说，NP-"
"Hard 问题要比 NPC 问题的范围广，NP-Hard 问题没有限定属于 NP），即所有的 NP 问"
"题都能约化到它，但是它不一定是一个 NP 问题"

#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:35
msgid "P NP NPC NP-hard 关系 ![](static/DOolbStxQoXsHrxcSVHcWoGGnZd.png)"
msgstr "P NP NPC NP-hard 关系 ![](static/DOolbStxQoXsHrxcSVHcWoGGnZd.png)"

#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:38
msgid "NP Language 定义:"
msgstr "NP Language 定义:"

#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:40
msgid "![](static/LiRWbV4U3oLqdFxn2cNchZyNnDf.png)"
msgstr "![](static/LiRWbV4U3oLqdFxn2cNchZyNnDf.png)"

#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:42
msgid "给定二元关系"
msgstr "给定二元关系"

#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:42
msgid ",记语言 L(R)为集合"
msgstr ",记语言 L(R)为集合"

#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:42
#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:395
msgid "∃"
msgstr "∃"

#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:42
msgid ".称一 个语言 L(R) 是 NP 语言当如下两个条件成立:"
msgstr ".称一 个语言 L(R) 是 NP 语言当如下两个条件成立:"

#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:44
msgid "\\|w|=poly(|x|)"
msgstr "\\|w|=poly(|x|)"

#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:45
msgid "给定任意的 x、w, 存在多项式时间算法能够高效判定 R(x, w) =? 1"
msgstr "给定任意的 x、w, 存在多项式时间算法能够高效判定 R(x, w) =? 1"

#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:47
msgid "**注:此时还与零知识无关**"
msgstr "**注:此时还与零知识无关**"

#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:49
msgid ""
"考虑有没有其他方式,比如在大素数分解 N=PQ 中,不暴露 P 或 Q 的值让验证者相信这"
"些类型的定理"
msgstr ""
"考虑有没有其他方式,比如在大素数分解 N=PQ 中,不暴露 P 或 Q 的值让验证者相信这"
"些类型的定理"

#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:51
msgid "ZKP"
msgstr "ZKP"

#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:53
msgid "引入**交互**与**随机**"
msgstr "引入**交互**与**随机**"

#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:55
msgid "![](static/Uwm9bYzRxoVaNsxTiiQcDfTHnCh.png)"
msgstr "![](static/Uwm9bYzRxoVaNsxTiiQcDfTHnCh.png)"

#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:57
msgid "**交互**"
msgstr "**交互**"

#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:59
msgid "验证者不再被动地阅读证明，相反验证者会与证明者进行重要的交互。"
msgstr "验证者不再被动地阅读证明，相反验证者会与证明者进行重要的交互。"

#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:61
msgid "Prover 与 Verifier 之间进行**多项式步骤的\\*\\*\\*\\*交互**"
msgstr "Prover 与 Verifier 之间进行**多项式步骤的\\*\\*\\*\\*交互**"

#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:63
msgid "**随机**"
msgstr "**随机**"

#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:65
msgid "Verifier 不再是一个**确定性**的算法"
msgstr "Verifier 不再是一个**确定性**的算法"

#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:67
msgid "Verifier 的问题通过抛硬币的方式,即问题在某种程度上是不可预测的"
msgstr "Verifier 的问题通过抛硬币的方式,即问题在某种程度上是不可预测的"

#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:69
msgid ""
"随机性的本质是接受小概率的错误,但这种概率应当被量化,比如小于某一个可忽略函数."
msgstr ""
"随机性的本质是接受小概率的错误,但这种概率应当被量化,比如小于某一个可忽略函数."

#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:71
msgid "例子"
msgstr "例子"

#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:73
msgid ""
"参考[郭宇老师的初识「零知识」与「证明」—— 探索零知识证明系列（一)](https://"
"zhuanlan.zhihu.com/p/75936137):地图三染色问题"
msgstr ""
"参考[郭宇老师的初识「零知识」与「证明」—— 探索零知识证明系列（一)](https://"
"zhuanlan.zhihu.com/p/75936137):地图三染色问题"

#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:75
msgid "Definitions of Zeroknowledge interactive Proof"
msgstr "Definitions of Zeroknowledge interactive Proof"

#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:77
msgid "1.Interactive Proof system for a Language L"
msgstr "1.Interactive Proof system for a Language L"

#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:79
msgid "![](static/VxxlbSlIOoLHzOxKrefcig8znGd.png)"
msgstr "![](static/VxxlbSlIOoLHzOxKrefcig8znGd.png)"

#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:81
msgid "可忽略函数:一个比任何多项式函数分之一增长都慢的函数"
msgstr "可忽略函数:一个比任何多项式函数分之一增长都慢的函数"

#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:83
msgid "Zero knowledge"
msgstr "Zero knowledge"

#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:85
msgid "谈论零知识前,需要引入**模拟器**的概念."
msgstr "谈论零知识前,需要引入**模拟器**的概念."

#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:87
msgid ""
"这里参考[郭宇老师--从「模拟」理解零知识证明：平行宇宙与时光倒流---探索零知识"
"证明系列（二）](https://zhuanlan.zhihu.com/p/76849956),而不使用课程的例子."
msgstr ""
"这里参考[郭宇老师--从「模拟」理解零知识证明：平行宇宙与时光倒流---探索零知识"
"证明系列（二）](https://zhuanlan.zhihu.com/p/76849956),而不使用课程的例子."

#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:89
msgid "模拟器:Simulator"
msgstr "模拟器:Simulator"

#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:91
msgid "![](static/LVTwbBNxHoxvtJxdOLxcchK6nuD.png)"
msgstr "![](static/LVTwbBNxHoxvtJxdOLxcchK6nuD.png)"

#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:93
msgid "简单来说"
msgstr "简单来说"

#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:95
msgid ""
"\\*\\*现实世界/视图:\\*\\*是一个概率分布.这个空间中的点都是证明者和验证者之间"
"交互的所有可能历史加上验证者的硬币投掷。"
msgstr ""
"\\*\\*现实世界/视图:\\*\\*是一个概率分布.这个空间中的点都是证明者和验证者之间"
"交互的所有可能历史加上验证者的硬币投掷。"

#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:97
msgid ""
"**理想世界/视图**:也是一个概率分布.`但理想世界/视图需要是算法可构造的`,由 "
"Simulator 负责构造."
msgstr ""
"**理想世界/视图**:也是一个概率分布.`但理想世界/视图需要是算法可构造的`,由 "
"Simulator 负责构造."

#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:99
msgid ""
"理想世界/视图与现实世界/视图的**差异**在于:理想世界/视图没有知识,现实世界/视"
"图拥有知识."
msgstr ""
"理想世界/视图与现实世界/视图的**差异**在于:理想世界/视图没有知识,现实世界/视"
"图拥有知识."

#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:101
msgid ""
"对于一个多项式时间的**区分器**，它从上述分布中选择一个样本.如果区分器不能区分"
"这个样本来自哪个分布,即来自哪个世界/视图,我们说这样的交互协议是零知识的."
msgstr ""
"对于一个多项式时间的**区分器**，它从上述分布中选择一个样本.如果区分器不能区分"
"这个样本来自哪个分布,即来自哪个世界/视图,我们说这样的交互协议是零知识的."

#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:103
msgid ""
"**因为理想世界/视图中的 Zlice 是没有任何知识，而且她和真实世界/视图中的 "
"Alice 不可区分.**"
msgstr ""
"**因为理想世界/视图中的 Zlice 是没有任何知识，而且她和真实世界/视图中的 "
"Alice 不可区分.**"

#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:105
msgid "或者说区分成功的概率不大于 0.5.那么这两个分布在计算上是无法区分的。"
msgstr "或者说区分成功的概率不大于 0.5.那么这两个分布在计算上是无法区分的。"

#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:107
msgid ""
"Simulator 是怎么做到这一点的? Simulator 能够而是因为它可以\"倒序\"生成 `视图/"
"世界`,即 Simulator 可以先随机选择一个挑战，然后基于这个挑战生成证明的一部分。"
"这样生成的视图在统计上与真实的视图无法区分。"
msgstr ""
"Simulator 是怎么做到这一点的? Simulator 能够而是因为它可以\"倒序\"生成 `视图/"
"世界`,即 Simulator 可以先随机选择一个挑战，然后基于这个挑战生成证明的一部分。"
"这样生成的视图在统计上与真实的视图无法区分。"

#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:110
msgid "计算不可区分定义:"
msgstr "计算不可区分定义:"

#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:112
msgid "这里给出更一般的计算不可区分定义"
msgstr "这里给出更一般的计算不可区分定义"

#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:114
msgid "![](static/GppnbN47go1Nl6x70brcTUcFnNb.png)"
msgstr "![](static/GppnbN47go1Nl6x70brcTUcFnNb.png)"

#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:116
msgid ""
"这里的**安全参数 k** 表示**某个计算困难问题的困难问题实例输入大小**。每个困难"
"问题都有一个界，当输入大小超过这个界时，我们就认为这个问题是计算困难的。--具"
"体可参考[刘巍然老师的回答](https://www.zhihu.com/question/48949270)"
msgstr ""
"这里的**安全参数 k** 表示**某个计算困难问题的困难问题实例输入大小**。每个困难"
"问题都有一个界，当输入大小超过这个界时，我们就认为这个问题是计算困难的。--具"
"体可参考[刘巍然老师的回答](https://www.zhihu.com/question/48949270)"

#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:118
msgid "Zero Knowledge Define:"
msgstr "Zero Knowledge Define:"

#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:120
msgid "![](static/PpCJb35kiosU0xxTkaocbzOSn3b.png)"
msgstr "![](static/PpCJb35kiosU0xxTkaocbzOSn3b.png)"

#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:122
msgid "Flavor of Zero Knowledge"
msgstr "Flavor of Zero Knowledge"

#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:124
msgid "零知识分类"
msgstr "零知识分类"

#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:126
msgid "![](static/ZAYbbCVfgoGDSTxGy2gcmJ4sn0d.png)"
msgstr "![](static/ZAYbbCVfgoGDSTxGy2gcmJ4sn0d.png)"

#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:128
msgid "这里不给出形式化定义,简单来说即"
msgstr "这里不给出形式化定义,简单来说即"

#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:130
msgid ""
"两个随机变量的分布是计算不可区分的，也就是任何多项式时间的随机敌手都无法区分"
"这两个分布，就称这个证明系统是**计算零知识 (Computationally Zero-Knowledge)**"
msgstr ""
"两个随机变量的分布是计算不可区分的，也就是任何多项式时间的随机敌手都无法区分"
"这两个分布，就称这个证明系统是**计算零知识 (Computationally Zero-Knowledge)**"

#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:132
msgid ""
"两个随机变量的分布是统计不可区分的，也就是它们的统计距离 (Statistical "
"Distance) 可忽略，就称这个证明系统是**统计零知识 (Statistically Zero-"
"Knowledge)** 的；"
msgstr ""
"两个随机变量的分布是统计不可区分的，也就是它们的统计距离 (Statistical "
"Distance) 可忽略，就称这个证明系统是**统计零知识 (Statistically Zero-"
"Knowledge)** 的；"

#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:134
msgid "如果统计距离就是 0，又叫做**完美零知识 (Perfect Zero-Knowledge)** 的；"
msgstr "如果统计距离就是 0，又叫做**完美零知识 (Perfect Zero-Knowledge)** 的；"

#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:136
msgid "Proof of Knowledge"
msgstr "Proof of Knowledge"

#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:138
msgid "一个 Proof System 是 POK 的,需满足以下定义"
msgstr "一个 Proof System 是 POK 的,需满足以下定义"

#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:140
msgid "![](static/HZpPbdlJXo03RbxeYfkcKCVzncf.png)"
msgstr "![](static/HZpPbdlJXo03RbxeYfkcKCVzncf.png)"

#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:142
msgid "`需要引入抽取器,抽取器具有时光回溯的能力.`"
msgstr "`需要引入抽取器,抽取器具有时光回溯的能力.`"

#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:144
msgid ""
"抽取器 在理想世界中，通过时间倒流的超能力，把 Prover 的知识完整地抽取出来"
msgstr ""
"抽取器 在理想世界中，通过时间倒流的超能力，把 Prover 的知识完整地抽取出来"

#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:146
msgid ""
"注:抽取器可以提取出 witness，不是因为它具有**无限的计算能力**,而是因为它能与"
"证明者进行多次交互。在每一轮的交互中，抽取器都会选择一个新的挑战，然后记录下 "
"Prover 的回应。"
msgstr ""
"注:抽取器可以提取出 witness，不是因为它具有**无限的计算能力**,而是因为它能与"
"证明者进行多次交互。在每一轮的交互中，抽取器都会选择一个新的挑战，然后记录下 "
"Prover 的回应。"

#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:148
msgid ""
"这就保证了一个没有知识的 Prover 是无法让抽取器达成目标，从而证明了可靠性。"
msgstr ""
"这就保证了一个没有知识的 Prover 是无法让抽取器达成目标，从而证明了可靠性。"

#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:150
msgid ""
"抽取器只能从能成功完成证明的证明者那里提取出（witness）。如果一个 Prover 不能"
"成功完成证明，那么他可能并不知道一个有效的 witness，因此抽取器无法从 Prover "
"那提取出 witness。"
msgstr ""
"抽取器只能从能成功完成证明的证明者那里提取出（witness）。如果一个 Prover 不能"
"成功完成证明，那么他可能并不知道一个有效的 witness，因此抽取器无法从 Prover "
"那提取出 witness。"

#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:152
msgid ""
"把这样一个依靠采用抽取器来证明可靠性的证明系统被称为 **Proof of Knowledge**"
msgstr ""
"把这样一个依靠采用抽取器来证明可靠性的证明系统被称为 **Proof of Knowledge**"

#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:154
msgid "注:不是所有的可靠性都必须要求存在抽取器算法"
msgstr "注:不是所有的可靠性都必须要求存在抽取器算法"

#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:156
msgid ""
"这里可参考[郭宇老师:探索零知识证明系列（三）:寻找知识](https://github.com/"
"sec-bit/learning-zkp/blob/master/zkp-intro/3/zkp-pok.md)"
msgstr ""
"这里可参考[郭宇老师:探索零知识证明系列（三）:寻找知识](https://github.com/"
"sec-bit/learning-zkp/blob/master/zkp-intro/3/zkp-pok.md)"

#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:158
msgid "The First Application:Identity Theft"
msgstr "The First Application:Identity Theft"

#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:160
msgid "Alice 想通过互联网证明向 Bob 证明其就是 Alice,比如 Bob 是亚马逊的."
msgstr "Alice 想通过互联网证明向 Bob 证明其就是 Alice,比如 Bob 是亚马逊的."

#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:162
msgid "![](static/IcAcbe01vobGqYxHvfwc54PBnAS.png)"
msgstr "![](static/IcAcbe01vobGqYxHvfwc54PBnAS.png)"

#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:164
msgid ""
"思想是:将证明 Alice 的身份转为 Alice 证明一道特定的难题,谁知道这个难题的答案"
"谁就是 Alice."
msgstr ""
"思想是:将证明 Alice 的身份转为 Alice 证明一道特定的难题,谁知道这个难题的答案"
"谁就是 Alice."

#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:166
msgid "NP and Zero Knowledge Interactive Proof"
msgstr "NP and Zero Knowledge Interactive Proof"

#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:168
msgid ""
"结论:如果[单向函数](https://en.wikipedia.org/wiki/One-way_function)(简单来说 "
"is easy to compute on every input, but hard to [invert](https://en.wikipedia."
"org/wiki/Inverse_function) given the [image](https://en.wikipedia.org/wiki/"
"Image_(mathematics)) of a random input,具体参考 wiki)存在,那么每种 NP 语言都"
"具有零知识交互证明。"
msgstr ""
"结论:如果[单向函数](https://en.wikipedia.org/wiki/One-way_function)(简单来说 "
"is easy to compute on every input, but hard to [invert](https://en.wikipedia."
"org/wiki/Inverse_function) given the [image](https://en.wikipedia.org/wiki/"
"Image_(mathematics)) of a random input,具体参考 wiki)存在,那么每种 NP 语言都"
"具有零知识交互证明。"

#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:170
msgid "![](static/LZWVbdV7qo1QWwx46RYco5n5njP.png)"
msgstr "![](static/LZWVbdV7qo1QWwx46RYco5n5njP.png)"

#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:172
msgid "先引入承诺的概念"
msgstr "先引入承诺的概念"

#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:174
msgid "承诺"
msgstr "承诺"

#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:176
msgid "![](static/BVg5b0KWEov22PxNVTqcxxu6nAe.png)"
msgstr "![](static/BVg5b0KWEov22PxNVTqcxxu6nAe.png)"

#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:178
#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:219
msgid "承诺性质"
msgstr "承诺性质"

#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:182
msgid ""
"computational hiding:对于任意的 PPT 敌手 A.有 ![](static/"
"UkWvbRHxaopvXbxwiE0cNmulnhH.png)"
msgstr ""
"computational hiding:对于任意的 PPT 敌手 A.有 ![](static/"
"UkWvbRHxaopvXbxwiE0cNmulnhH.png)"

#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:185
#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:226
msgid ""
"**Binding:是指一个承诺 c(m) 在 Open 阶段打开只会为一个值 m 而不会得到 m‘.**"
msgstr ""
"**Binding:是指一个承诺 c(m) 在 Open 阶段打开只会为一个值 m 而不会得到 m‘.**"

#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:187
msgid "computational  Binding ![](static/MKyGbu5U9ovgmNxUpvtclaM8nZb.png)"
msgstr "computational  Binding ![](static/MKyGbu5U9ovgmNxUpvtclaM8nZb.png)"

#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:191
msgid "举例:地图三染色问题"
msgstr "举例:地图三染色问题"

#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:193
msgid "地图的三染色问题是一个 NP 完全问题,即 NPC 问题."
msgstr "地图的三染色问题是一个 NP 完全问题,即 NPC 问题."

#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:195
msgid ""
"**生动易懂的例子**仍然可以参考[郭宇老师的初识「零知识」与「证明」—— 探索零知"
"识证明系列（一)](https://zhuanlan.zhihu.com/p/75936137):"
msgstr ""
"**生动易懂的例子**仍然可以参考[郭宇老师的初识「零知识」与「证明」—— 探索零知"
"识证明系列（一)](https://zhuanlan.zhihu.com/p/75936137):"

#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:197
msgid "过程总结如下:"
msgstr "过程总结如下:"

#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:199
msgid "![](static/JP4BbuxDGo2f2PxIKvocE8cVnnf.png)"
msgstr "![](static/JP4BbuxDGo2f2PxIKvocE8cVnnf.png)"

#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:201
msgid "性质如下"
msgstr "性质如下"

#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:203
msgid "![](static/EylBbTWMcox2VNxfg1hccF1Nngg.png)"
msgstr "![](static/EylBbTWMcox2VNxfg1hccF1Nngg.png)"

#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:205
msgid ""
"**完整性**:一个诚实的 P 总是可以说服验证者接受。因为无论 Vr 需要哪条边，P 总"
"是可以正确地给出符合规则的上色方案。 总是接受"
msgstr ""
"**完整性**:一个诚实的 P 总是可以说服验证者接受。因为无论 Vr 需要哪条边，P 总"
"是可以正确地给出符合规则的上色方案。 总是接受"

#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:207
msgid ""
"\\*\\*健全性:\\*\\*无论 恶意的 P \\*做什么，都会有一条边缘的颜色不正确。当 V "
"选择随机边时，实际上选中错误的概率是 1/E,成功骗过 P 的概率是(1-1/E).随着重复"
"的次数增多,成功的概率变为"
msgstr ""
"\\*\\*健全性:\\*\\*无论 恶意的 P \\*做什么，都会有一条边缘的颜色不正确。当 V "
"选择随机边时，实际上选中错误的概率是 1/E,成功骗过 P 的概率是(1-1/E).随着重复"
"的次数增多,成功的概率变为"

#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:207
msgid ",呈指数级降低。概率接受"
msgstr ",呈指数级降低。概率接受"

#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:209
msgid ""
"**零知识性:**很容易能够看出来,整个过程验证者得到了很多信息,但是这些信息并不会"
"帮助验证者获取地图三染色问题答案的**知识**.但形式化证明很麻烦。"
msgstr ""
"**零知识性:**很容易能够看出来,整个过程验证者得到了很多信息,但是这些信息并不会"
"帮助验证者获取地图三染色问题答案的**知识**.但形式化证明很麻烦。"

#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:211
msgid ""
"`模拟器` 不知道染色答案,它可以提前确定诚实 V 会询问的边 E‘ `模拟器` 可以将整"
"个图都涂成一样的颜色,除了 E’的两端 a,b 会被涂成两种不同的颜色. 对于**模拟世"
"界/视图**:它会输出一堆承诺,由于承诺的性质,这些承诺不会给**计算能力有限**的 `"
"区分器` 提供任何信息.然后 `区分器` 随机选择一条边 E,由于模拟器能够提前知道区"
"分器随机选择哪条边.所以 E=E‘. 打开 E/E‘的承诺以后,V 会发现 a,b 是不同的颜色.`"
"模拟器` 成功完成该轮挑战 但实际上,`模拟器` 并不知道染色答案,但是 V 每次打开 "
"E 的承诺,对应的 a,b 端点颜色又确实是不一样的.所以**真实世界/视图**与**模拟世"
"界/视图**在计算上是无法区分的."
msgstr ""
"`模拟器` 不知道染色答案,它可以提前确定诚实 V 会询问的边 E‘ `模拟器` 可以将整"
"个图都涂成一样的颜色,除了 E’的两端 a,b 会被涂成两种不同的颜色. 对于**模拟世"
"界/视图**:它会输出一堆承诺,由于承诺的性质,这些承诺不会给**计算能力有限**的 `"
"区分器` 提供任何信息.然后 `区分器` 随机选择一条边 E,由于模拟器能够提前知道区"
"分器随机选择哪条边.所以 E=E‘. 打开 E/E‘的承诺以后,V 会发现 a,b 是不同的颜色.`"
"模拟器` 成功完成该轮挑战 但实际上,`模拟器` 并不知道染色答案,但是 V 每次打开 "
"E 的承诺,对应的 a,b 端点颜色又确实是不一样的.所以**真实世界/视图**与**模拟世"
"界/视图**在计算上是无法区分的."

#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:216
msgid "![](static/VJCEbdWdZomUCNxfQRDcofisnLg.png)"
msgstr "![](static/VJCEbdWdZomUCNxfQRDcofisnLg.png)"

#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:218
msgid "zk 的应用"
msgstr "zk 的应用"

#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:220
msgid "法律 隐私 生物 DNA 甚至是核裁军"
msgstr "法律 隐私 生物 DNA 甚至是核裁军"

#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:222
msgid "![](static/Wm6Ub4QnSoXnGRxu05hc3Wy2nOc.png)"
msgstr "![](static/Wm6Ub4QnSoXnGRxu05hc3Wy2nOc.png)"

#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:224
msgid "复杂性理论(Complexity Theory)"
msgstr "复杂性理论(Complexity Theory)"

#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:226
msgid "Interactive Proof"
msgstr "Interactive Proof"

#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:228
msgid "![](static/Qk9xbvVEmoXEWOxIQ10cd66xnbf.png)"
msgstr "![](static/Qk9xbvVEmoXEWOxIQ10cd66xnbf.png)"

#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:230
msgid ""
"BPP:复杂类 BPP 在多项式时间内对概率图灵机解出的问题的集合, 并且对所有的输入，"
"输出结果有错误的概率在 1/3 之内 ![](static/YOmnbQfzxoJgGNxm9LDcmz3kngc.png)"
msgstr ""
"BPP:复杂类 BPP 在多项式时间内对概率图灵机解出的问题的集合, 并且对所有的输入，"
"输出结果有错误的概率在 1/3 之内 ![](static/YOmnbQfzxoJgGNxm9LDcmz3kngc.png)"

#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:232
msgid "IP:交互式证明"
msgstr "IP:交互式证明"

#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:234
msgid ""
"是一种包含了两个参与者（证明者和验证者）的验证系统，其中证明者试图通过多轮对"
"话来说服验证者某个复杂陈述的真实性。"
msgstr ""
"是一种包含了两个参与者（证明者和验证者）的验证系统，其中证明者试图通过多轮对"
"话来说服验证者某个复杂陈述的真实性。"

#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:235
msgid "定义"
msgstr "定义"

#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:236
msgid ""
"设⟨A, B⟩ 为一对交互式图灵机. 记 ⟨A(y), B(z)⟩(x) 为在 A、B 的随机输入带均匀独"
"立选取, 公共输入为 x, A 的辅助输入为 y, B 的辅助输入为 z 时, 图灵机 B 与图灵"
"机 A 交互后输出的随机变量."
msgstr ""
"设⟨A, B⟩ 为一对交互式图灵机. 记 ⟨A(y), B(z)⟩(x) 为在 A、B 的随机输入带均匀独"
"立选取, 公共输入为 x, A 的辅助输入为 y, B 的辅助输入为 z 时, 图灵机 B 与图灵"
"机 A 交互后输出的随机变量."

#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:237
msgid ""
"给定二元关系 R 及其对应语言 L(R), 则针对该语言的 IPS(interactive proof "
"systems)是用符号⟨P(y),V(z)⟩表示 .其中,图灵机 P 与 P\\*可以是无穷算力 V 是 "
"PPT 的.则 IPS 满足两个性质"
msgstr ""
"给定二元关系 R 及其对应语言 L(R), 则针对该语言的 IPS(interactive proof "
"systems)是用符号⟨P(y),V(z)⟩表示 .其中,图灵机 P 与 P\\*可以是无穷算力 V 是 "
"PPT 的.则 IPS 满足两个性质"

#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:238
msgid "完备性 (completeness): 对于任意的 x ∈ L(R), 存在 y, 使得对于任意的 "
msgstr "完备性 (completeness): 对于任意的 x ∈ L(R), 存在 y, 使得对于任意的 "

#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:238 Zeroknowledge.md:239
#: src/zk-everything/zk-everything-joe/Hyrax.md:181
#: src/zk-everything/zk-everything-joe/Hyrax.md:214
#: src/zk-everything/zk-everything-joe/Hyrax.md:228
msgid "\\[⟨"
msgstr "\\[⟨"

#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:238 Zeroknowledge.md:239
#: src/zk-everything/zk-everything-joe/Hyrax.md:201 src/public
#: goods/第二章.md:80 goods/第二章.md:84 goods/第二章.md:86
msgid ")⟩"
msgstr ")⟩"

#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:238
msgid ". 完美完备性 (perfect completeness) 是指上述概率等 于 1."
msgstr ". 完美完备性 (perfect completeness) 是指上述概率等 于 1."

#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:239
msgid "可靠性 (soundness): 对于任意的 x ∈/ L(R), 任意的恶意证明者 P\\*, 任意的"
msgstr ""
"可靠性 (soundness): 对于任意的 x ∈/ L(R), 任意的恶意证明者 P\\*, 任意的"

#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:239 src/public goods/第二章.md:86 goods/第二章.md:109
#: goods/第二章.md:111
msgid "有"
msgstr "有"

#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:240
msgid "IP 与 NP 的关系"
msgstr "IP 与 NP 的关系"

#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:242
msgid ""
"IP 类可以看作是经典复杂类 NP 的**交互式\\*\\*\\*\\*随机**变体,所有的 NP 问题"
"也都可以在 IP 中找到解决方案，因此 IP 是 NP 的超集。"
msgstr ""
"IP 类可以看作是经典复杂类 NP 的**交互式\\*\\*\\*\\*随机**变体,所有的 NP 问题"
"也都可以在 IP 中找到解决方案，因此 IP 是 NP 的超集。"

#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:243
msgid ""
"在 IP 系统中，Prover 和 Verifier 之间有多轮的交互，而在 NP 问题中，证明（或解"
"决方案）一旦生成，就可以独立地被验证，不需要进一步的交互。如果不允许交互，但"
"允许验证者抛掷随机硬币并以小概率接受错误的证明，那么得到的复杂性类被称为 "
"[Merlin-Arthur(MA)](https://www.cs.cornell.edu/courses/cs6810/2009sp/scribe/"
"lecture17.pdf)"
msgstr ""
"在 IP 系统中，Prover 和 Verifier 之间有多轮的交互，而在 NP 问题中，证明（或解"
"决方案）一旦生成，就可以独立地被验证，不需要进一步的交互。如果不允许交互，但"
"允许验证者抛掷随机硬币并以小概率接受错误的证明，那么得到的复杂性类被称为 "
"[Merlin-Arthur(MA)](https://www.cs.cornell.edu/courses/cs6810/2009sp/scribe/"
"lecture17.pdf)"

#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:245
msgid "这再次说明了 IP 强大的关键在于**随机性**和**交互**的结合"
msgstr "这再次说明了 IP 强大的关键在于**随机性**和**交互**的结合"

#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:248
msgid ""
"**Prover** 在 IP 中并没有时间复杂度的限制，可以是全知的，这意味着它可能运行在"
"超出概率多项式时间的时间复杂度。它能够进行**任意复杂的计算**来构建它的证明，"
"只要这个证明能够在多项式时间内被验证"
msgstr ""
"**Prover** 在 IP 中并没有时间复杂度的限制，可以是全知的，这意味着它可能运行在"
"超出概率多项式时间的时间复杂度。它能够进行**任意复杂的计算**来构建它的证明，"
"只要这个证明能够在多项式时间内被验证"

#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:249
msgid ""
"**Verifier** 在 IP 中必须运行在**概率多项式时间**（probabilistic polynomial "
"time）内，即必须在多项式时间内完成计算"
msgstr ""
"**Verifier** 在 IP 中必须运行在**概率多项式时间**（probabilistic polynomial "
"time）内，即必须在多项式时间内完成计算"

#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:251
msgid "Private Coins Model"
msgstr "Private Coins Model"

#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:253
msgid "Interactive Proofs with Public Coins Model"
msgstr "Interactive Proofs with Public Coins Model"

#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:255
msgid ""
"“We can formulate a decision problem under uncertainty as a new sort of "
"game, in which one opponent is ‘disinterested’ and plays at random, while "
"the other tries to pick a strategy which maximizes the probability of "
"winning – a ‘game against Nature’.” **\\---Christos Papadimitriou**. Games "
"Against Nature. FOCS 1983."
msgstr ""
"“We can formulate a decision problem under uncertainty as a new sort of "
"game, in which one opponent is ‘disinterested’ and plays at random, while "
"the other tries to pick a strategy which maximizes the probability of "
"winning – a ‘game against Nature’.” **\\---Christos Papadimitriou**. Games "
"Against Nature. FOCS 1983."

#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:257
msgid "![](static/RH2hbHTJJoQzPIxPrPycutMBngc.png)"
msgstr "![](static/RH2hbHTJJoQzPIxPrPycutMBngc.png)"

#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:259
msgid "![](static/UOZsbegjRo1D2TxzlKjce8vinoe.png)"
msgstr "![](static/UOZsbegjRo1D2TxzlKjce8vinoe.png)"

#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:261
msgid ""
"如果不允许交互，但允许验证者抛掷随机硬币并以小概率接受错误的证明，那么得到的"
"复杂性类被称为 [Merlin-Arthur(MA)](https://www.cs.cornell.edu/courses/"
"cs6810/2009sp/scribe/lecture17.pdf)"
msgstr ""
"如果不允许交互，但允许验证者抛掷随机硬币并以小概率接受错误的证明，那么得到的"
"复杂性类被称为 [Merlin-Arthur(MA)](https://www.cs.cornell.edu/courses/"
"cs6810/2009sp/scribe/lecture17.pdf)"

#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:263
msgid "AM 与 MA"
msgstr "AM 与 MA"

#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:265
msgid "Arthur-Merlin Protocol"
msgstr "Arthur-Merlin Protocol"

#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:267
msgid ""
"协议中的两个参与者分别称为 Arthur 和 Merlin，基本假设是 Arthur 是配备随机数生"
"成设备的标准计算机（或验证器），而 Merlin 实际上是具有无限计算能力的预言机"
"（也称为证明者）。不过，Merlin 不一定是诚实的，所以亚瑟必须分析 Merlin 在回答"
"亚瑟的询问时提供的信息，并自行决定问题。如果在这个协议中，每当答案是“是”时，"
"Merlin 有一系列的回应，会导致 Arthur 在至少 2/3 的情况下接受，那么问题被认为"
"是可以通过这个协议解决的。而如果答案是“否”，那么 Arthur 永远不会在超过 1/3 的"
"情况下接受。"
msgstr ""
"协议中的两个参与者分别称为 Arthur 和 Merlin，基本假设是 Arthur 是配备随机数生"
"成设备的标准计算机（或验证器），而 Merlin 实际上是具有无限计算能力的预言机"
"（也称为证明者）。不过，Merlin 不一定是诚实的，所以亚瑟必须分析 Merlin 在回答"
"亚瑟的询问时提供的信息，并自行决定问题。如果在这个协议中，每当答案是“是”时，"
"Merlin 有一系列的回应，会导致 Arthur 在至少 2/3 的情况下接受，那么问题被认为"
"是可以通过这个协议解决的。而如果答案是“否”，那么 Arthur 永远不会在超过 1/3 的"
"情况下接受。"

#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:269
msgid "MA"
msgstr "MA"

#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:271
msgid "1-message protocol"
msgstr "1-message protocol"

#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:273
msgid ""
"Merlin 向 Arthur 发送消息，然后 Arthur 通过运行概率多项式时间计算来决定是否接"
"受。（这类似于基于验证器的 NP 定义，唯一的区别是 Arthur 在这里被允许使用随机"
"性。Merlin 在这个协议中无法访问 Arthur 的硬币抛掷，因为它是一个单消息协议，"
"Arthur 只有在收到 Merlin 的信息后才会抛硬币。"
msgstr ""
"Merlin 向 Arthur 发送消息，然后 Arthur 通过运行概率多项式时间计算来决定是否接"
"受。（这类似于基于验证器的 NP 定义，唯一的区别是 Arthur 在这里被允许使用随机"
"性。Merlin 在这个协议中无法访问 Arthur 的硬币抛掷，因为它是一个单消息协议，"
"Arthur 只有在收到 Merlin 的信息后才会抛硬币。"

#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:275
msgid ""
"从形式上讲如果存在多项式时间确定性图灵机 M 和多项式 p，q 使得对于长度 n = |"
"x| 的每个输入字符串 x，"
msgstr ""
"从形式上讲如果存在多项式时间确定性图灵机 M 和多项式 p，q 使得对于长度 n = |"
"x| 的每个输入字符串 x，"

#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:277
msgid "![](static/IPYxbgdRRoTq7wxdBNyco2yjnJF.png)"
msgstr "![](static/IPYxbgdRRoTq7wxdBNyco2yjnJF.png)"

#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:279
msgid "AM"
msgstr "AM"

#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:281
msgid ""
"复杂度类 AM（或 AM\\[**2**\\]或 AM\\[**K**\\]）可以通过具有**两条/K 条**消息"
"的 Arthur-Merlin 协议在多项式时间内决定。只有 **1/2/K 个查询/响应对**："
"Arthur 随机抛出一些硬币并将他所有抛硬币的结果发送给 Merlin，Merlin 用所谓的证"
"明做出回应，Arthur 确定性地验证证明。"
msgstr ""
"复杂度类 AM（或 AM\\[**2**\\]或 AM\\[**K**\\]）可以通过具有**两条/K 条**消息"
"的 Arthur-Merlin 协议在多项式时间内决定。只有 **1/2/K 个查询/响应对**："
"Arthur 随机抛出一些硬币并将他所有抛硬币的结果发送给 Merlin，Merlin 用所谓的证"
"明做出回应，Arthur 确定性地验证证明。"

#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:283
msgid ""
"在这个协议中，Arthur 只被允许将抛硬币的结果发送给 Merlin，在最后阶段，Arthur "
"必须只使用他之前生成的随机抛硬币和 Merlin 的信息来决定是接受还是拒绝"
msgstr ""
"在这个协议中，Arthur 只被允许将抛硬币的结果发送给 Merlin，在最后阶段，Arthur "
"必须只使用他之前生成的随机抛硬币和 Merlin 的信息来决定是接受还是拒绝"

#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:285
msgid ""
"从形式上讲如果存在多项式时间确定性图灵机 M 和多项式 p，q 使得对于长度 n = |"
"x| 的每个输入字符串 x"
msgstr ""
"从形式上讲如果存在多项式时间确定性图灵机 M 和多项式 p，q 使得对于长度 n = |"
"x| 的每个输入字符串 x"

#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:287
msgid "![](static/ZQ98bITzoopLZJx90fwcz3yCnee.png)"
msgstr "![](static/ZQ98bITzoopLZJx90fwcz3yCnee.png)"

#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:289
msgid "简单总结:"
msgstr "简单总结:"

#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:291
msgid ""
"摘自啊咪咪小熊--- MA 就是最简单的 M 给 A 发完就结束了，A 自己决定是否接受，就"
"是非交互式的（和 NP 的区别就是 Verifier 可以用随机数）。 AM 就是 A 先给 M 发"
"一个随机数，然后 M 再给 A 回复，然后 A 再决定是否接受，就是交互式的"
msgstr ""
"摘自啊咪咪小熊--- MA 就是最简单的 M 给 A 发完就结束了，A 自己决定是否接受，就"
"是非交互式的（和 NP 的区别就是 Verifier 可以用随机数）。 AM 就是 A 先给 M 发"
"一个随机数，然后 M 再给 A 回复，然后 A 再决定是否接受，就是交互式的"

#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:295
msgid "IP = PSPACE 定理"
msgstr "IP = PSPACE 定理"

#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:297
msgid "任何可以在多项式**空间**内解决的问题都可以通过交互式证明的方式来解决。"
msgstr "任何可以在多项式**空间**内解决的问题都可以通过交互式证明的方式来解决。"

#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:299
msgid ""
"具体可参照[这](https://en.wikipedia.org/wiki/IP_(complexity)),这个假设的重要"
"性在于它将两个看似不同的计算模型联系在了一起."
msgstr ""
"具体可参照[这](https://en.wikipedia.org/wiki/IP_(complexity)),这个假设的重要"
"性在于它将两个看似不同的计算模型联系在了一起."

#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:301
msgid "其中 PSPACE 简单理解为是比 NP 要大得多的语言类"
msgstr "其中 PSPACE 简单理解为是比 NP 要大得多的语言类"

#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:303
msgid "![](static/NkWsbE6kGoRQ4ixzhY4cAiFLnvh.png)"
msgstr "![](static/NkWsbE6kGoRQ4ixzhY4cAiFLnvh.png)"

#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:305
msgid "MIP"
msgstr "MIP"

#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:307
msgid ""
"MIP 类似于 IP，只是有多个证明者，并且假设这些证明者不会相互共享关于他们从验证"
"者那里收到什么挑战的信息。MIP 的一个比喻是在审讯犯罪嫌疑人之前将多个犯罪嫌疑"
"人放在不同的房间里，看看他们是否能保持他们的故事直截了当。对 MIP 的研究表明，"
"如果一个人将证明者锁在不同的房间里，然后分别审问他们，他们可以说服审问者做出"
"比一起接受审问要复杂得多的陈述。"
msgstr ""
"MIP 类似于 IP，只是有多个证明者，并且假设这些证明者不会相互共享关于他们从验证"
"者那里收到什么挑战的信息。MIP 的一个比喻是在审讯犯罪嫌疑人之前将多个犯罪嫌疑"
"人放在不同的房间里，看看他们是否能保持他们的故事直截了当。对 MIP 的研究表明，"
"如果一个人将证明者锁在不同的房间里，然后分别审问他们，他们可以说服审问者做出"
"比一起接受审问要复杂得多的陈述。"

#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:309
msgid "![](static/QWLobspUboiQUJxr1NpcW9SsnTh.jpg)"
msgstr "![](static/QWLobspUboiQUJxr1NpcW9SsnTh.jpg)"

#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:311
msgid "Non Interactive Proof"
msgstr "Non Interactive Proof"

#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:313
msgid "![](static/AZSMbGIfiosLTXxnP8lcucU1noc.png)"
msgstr "![](static/AZSMbGIfiosLTXxnP8lcucU1noc.png)"

#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:315
msgid ""
"通过 [Fiat-Shamir](https://en.wikipedia.org/wiki/"
"Fiat%E2%80%93Shamir_heuristic) 转换将 Interactive Proof 变为 Non-Interactive "
"Proof"
msgstr ""
"通过 [Fiat-Shamir](https://en.wikipedia.org/wiki/"
"Fiat%E2%80%93Shamir_heuristic) 转换将 Interactive Proof 变为 Non-Interactive "
"Proof"

#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:317
msgid "**注:**"
msgstr "**注:**"

#: src/zk-everything/zk-learning-miles/Lecture1:Overview about
#: Zeroknowledge.md:319
msgid "![](static/S2Mfbj7vmoEXU0xXdOQclIqLntq.png)"
msgstr "![](static/S2Mfbj7vmoEXU0xXdOQclIqLntq.png)"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:6
msgid "Overview about zk-SNARK"
msgstr "Overview about zk-SNARK"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:8
msgid "![](static/THO2bOLrToy8krx9h9XccDJcnro.png)"
msgstr "![](static/THO2bOLrToy8krx9h9XccDJcnro.png)"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:10
msgid "Why commercial so much"
msgstr "Why commercial so much"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:12
msgid "历史可追溯至 1991 年的一篇论文\\[Babai-Fortnow-Levin-Szegedy'91\\]"
msgstr "历史可追溯至 1991 年的一篇论文\\[Babai-Fortnow-Levin-Szegedy'91\\]"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:14
msgid "Zk-snark application"
msgstr "Zk-snark application"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:16
msgid "blockchian"
msgstr "blockchian"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:18
msgid "外包计算："
msgstr "外包计算："

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:19
msgid ""
"扩容(zkRollup)：离线服务处理交易批次，L1 链验证一个简短的证明来证明该批次内的"
"交易都是有效的,而无需分别验证每笔交易"
msgstr ""
"扩容(zkRollup)：离线服务处理交易批次，L1 链验证一个简短的证明来证明该批次内的"
"交易都是有效的,而无需分别验证每笔交易"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:20
msgid ""
"区块链桥接（zkBridge）：将资产从源链转移到目标链.源链的共识协议同意锁定某些资"
"产，以便在另一个链中使用。通过验证 zksnark 生成关于源链到目标链的共识状态的简"
"短证明,而无需验证源链共识的整个过程. 在上述两个例子中,非交互式证明非常重要。"
"因为证明需要由大量区块链验证者进行验证"
msgstr ""
"区块链桥接（zkBridge）：将资产从源链转移到目标链.源链的共识协议同意锁定某些资"
"产，以便在另一个链中使用。通过验证 zksnark 生成关于源链到目标链的共识状态的简"
"短证明,而无需验证源链共识的整个过程. 在上述两个例子中,非交互式证明非常重要。"
"因为证明需要由大量区块链验证者进行验证"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:22
msgid "隐私性:**需要零知识性**"
msgstr "隐私性:**需要零知识性**"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:23
msgid ""
"公共区块链上的隐私交易：ZKP 在不泄漏交易信息的情况下证明一个私人交易是有效"
"的。例子：TornadoCash、ZCash、Ironfish、Aleo。"
msgstr ""
"公共区块链上的隐私交易：ZKP 在不泄漏交易信息的情况下证明一个私人交易是有效"
"的。例子：TornadoCash、ZCash、Ironfish、Aleo。"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:24
msgid ""
"合规性：证明一个私人交易符合银行法规（例如 Espresso） 证明一个交易所具有偿付"
"能力而无需泄漏拥有资产情况（例如 Raposa）。"
msgstr ""
"合规性：证明一个私人交易符合银行法规（例如 Espresso） 证明一个交易所具有偿付"
"能力而无需泄漏拥有资产情况（例如 Raposa）。"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:26
msgid ""
"Non-blockchain:打击虚假信息, [\\[Kang-Hashimoto-Stoica-Sun'22\\]](https://"
"arxiv.org/abs/2211.04775)"
msgstr ""
"Non-blockchain:打击虚假信息, [\\[Kang-Hashimoto-Stoica-Sun'22\\]](https://"
"arxiv.org/abs/2211.04775)"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:28
msgid ""
"当阅读报纸文章时,文章通常会插有图片,但图片可能与文章内容完全无关甚至带有误导"
"性质."
msgstr ""
"当阅读报纸文章时,文章通常会插有图片,但图片可能与文章内容完全无关甚至带有误导"
"性质."

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:30
msgid ""
"解决方案是 **C2PA 标准**,其代表内容来源和真实性,目标是为报纸文章中的图像提供"
"真实的出处。"
msgstr ""
"解决方案是 **C2PA 标准**,其代表内容来源和真实性,目标是为报纸文章中的图像提供"
"真实的出处。"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:32
msgid ""
"工作原理:在每台相机中嵌入一个由制造商嵌入的密钥。该密钥无法从相机中提取出"
msgstr ""
"工作原理:在每台相机中嵌入一个由制造商嵌入的密钥。该密钥无法从相机中提取出"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:34
msgid ""
"每次符合 C2PA 标准的相机拍摄照片时，会对照片以及与该照片关联的所有元数据进行"
"签名,比如拍摄照片的位置和时间戳,然后嵌入到相机生成的原始图像数据中."
msgstr ""
"每次符合 C2PA 标准的相机拍摄照片时，会对照片以及与该照片关联的所有元数据进行"
"签名,比如拍摄照片的位置和时间戳,然后嵌入到相机生成的原始图像数据中."

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:36
msgid ""
"当图像嵌入文章并发送给读者时，读者可以简单地验证图像上的签名，并向读者显示元"
"数据、位置和时间戳."
msgstr ""
"当图像嵌入文章并发送给读者时，读者可以简单地验证图像上的签名，并向读者显示元"
"数据、位置和时间戳."

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:38
msgid "![](static/YZWzbKSRuojf7ixh5ZpcYf0ZnDb.png)"
msgstr "![](static/YZWzbKSRuojf7ixh5ZpcYf0ZnDb.png)"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:40
msgid "但 C2PA 标准有一个后处理的问题,即这些相机可捕捉非常高分辨率的图像。"
msgstr "但 C2PA 标准有一个后处理的问题,即这些相机可捕捉非常高分辨率的图像。"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:42
msgid ""
"但是为避免将图像发送给最终用户时浪费太多带宽,发送时会对图像采样.这意味着图像"
"可能被重新调整为更低的分辨率，会被裁剪，会进行灰度化处理等.当将经过处理的照片"
"发送到笔记本电脑时，笔记本电脑无法再验证图像上的 C2PA 签名。即**必须拥有原始"
"图像数据，否则无法验证签名。**"
msgstr ""
"但是为避免将图像发送给最终用户时浪费太多带宽,发送时会对图像采样.这意味着图像"
"可能被重新调整为更低的分辨率，会被裁剪，会进行灰度化处理等.当将经过处理的照片"
"发送到笔记本电脑时，笔记本电脑无法再验证图像上的 C2PA 签名。即**必须拥有原始"
"图像数据，否则无法验证签名。**"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:44
msgid ""
"所以问题就是：签名存在，但读者没有获得原始图像数据，因此无法验证签名是否有"
"效。"
msgstr ""
"所以问题就是：签名存在，但读者没有获得原始图像数据，因此无法验证签名是否有"
"效。"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:46
msgid "采用 zk-snark 解决,思想:在图片被编辑前,为该图片生成一个 zk-snark proof."
msgstr ""
"采用 zk-snark 解决,思想:在图片被编辑前,为该图片生成一个 zk-snark proof."

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:48
msgid "![](static/CvazbKnLMov1Ubx3o22ckIWkn7d.png)"
msgstr "![](static/CvazbKnLMov1Ubx3o22ckIWkn7d.png)"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:50
msgid "Operation 表示应用于该照片的操作列表:例如缩小尺寸、灰度化、裁剪"
msgstr "Operation 表示应用于该照片的操作列表:例如缩小尺寸、灰度化、裁剪"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:52
msgid "读者验证 zk-SNARK 证明,如果有效则将向用户显示元数据."
msgstr "读者验证 zk-SNARK 证明,如果有效则将向用户显示元数据."

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:54
msgid "![](static/LK9cbbk1No6SAGxXvBHco4Zjnkg.png)"
msgstr "![](static/LK9cbbk1No6SAGxXvBHco4Zjnkg.png)"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:56
msgid "Define zksnark"
msgstr "Define zksnark"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:58
msgid "首先介绍电路部分"
msgstr "首先介绍电路部分"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:60
msgid "Arithmetic Circuits"
msgstr "Arithmetic Circuits"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:62
msgid "Fix a **finite field** F={0,1,…,p-1} for some prime _p_\\>2"
msgstr "Fix a **finite field** F={0,1,…,p-1} for some prime _p_\\>2"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:64
msgid "![](static/Th8db1MAVoZ2U0xdSUWcOY7KnWe.png)"
msgstr "![](static/Th8db1MAVoZ2U0xdSUWcOY7KnWe.png)"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:66
msgid ""
"Arithmetic Circuits 是一个函数，它接受有限域中元素作为输入并产生有限域中的元"
"素作为输出。"
msgstr ""
"Arithmetic Circuits 是一个函数，它接受有限域中元素作为输入并产生有限域中的元"
"素作为输出。"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:68
msgid ""
"它由若干域上的加法门和乘法门组成. 电路的大小=电路中门的数量,如上图 |C|=3."
msgstr ""
"它由若干域上的加法门和乘法门组成. 电路的大小=电路中门的数量,如上图 |C|=3."

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:70
msgid ""
"**电路可满足问题** (circuit satisfiability problem, C-SAT) 是指给定电路 C、 "
"电路的部分输入 x (x 可为空) 和电路输出 y, 判断是否存在证据 w (电路的另一部分"
"输入, 视为秘密输 入) 使得 C(x, w) = y."
msgstr ""
"**电路可满足问题** (circuit satisfiability problem, C-SAT) 是指给定电路 C、 "
"电路的部分输入 x (x 可为空) 和电路输出 y, 判断是否存在证据 w (电路的另一部分"
"输入, 视为秘密输 入) 使得 C(x, w) = y."

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:72
msgid ""
"**布尔电路**(Boolean circuit)是算术电路的子类, 其仅有与门、异或门等布尔逻辑"
"门, 变量取值仅为 0 或 1. 可以证明, 通过增加常数级别的电路门和深度, **任何布尔"
"电路都可以转换为算术电路**"
msgstr ""
"**布尔电路**(Boolean circuit)是算术电路的子类, 其仅有与门、异或门等布尔逻辑"
"门, 变量取值仅为 0 或 1. 可以证明, 通过增加常数级别的电路门和深度, **任何布尔"
"电路都可以转换为算术电路**"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:74
msgid "![](static/M2u7bKKKdopUHGx0bFNcNTNvnMb.png)"
msgstr "![](static/M2u7bKKKdopUHGx0bFNcNTNvnMb.png)"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:76
msgid ""
"**Valiant's theorem**:所有多项式时间可计算的函数都可以通过多项式大小的算术电"
"路来表示"
msgstr ""
"**Valiant's theorem**:所有多项式时间可计算的函数都可以通过多项式大小的算术电"
"路来表示"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:78
msgid ""
"仅使用加法、乘法和减法，就可以实现 SHA256 函数，大约需要 20,000 个门才能完"
"成，"
msgstr ""
"仅使用加法、乘法和减法，就可以实现 SHA256 函数，大约需要 20,000 个门才能完"
"成，"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:80
msgid "Structured vs. unstructured circuits"
msgstr "Structured vs. unstructured circuits"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:82
msgid "![](static/Ktsvbs5pPoMkxrxHkJmcv7wNnRg.png)"
msgstr "![](static/Ktsvbs5pPoMkxrxHkJmcv7wNnRg.png)"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:84
msgid "非结构化电路:电路中有一堆门，而电线只是按照开发人员想要的方式去连接门"
msgstr "非结构化电路:电路中有一堆门，而电线只是按照开发人员想要的方式去连接门"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:86
msgid "结构化电路:电路本身实际上是分层构建的，其中有一个固定的算术电路 M。"
msgstr "结构化电路:电路本身实际上是分层构建的，其中有一个固定的算术电路 M。"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:92
msgid "M 有时被称为虚拟机"
msgstr "M 有时被称为虚拟机"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:94
msgid "NARK: Non-interactive ARgument of Knowledge"
msgstr "NARK: Non-interactive ARgument of Knowledge"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:96
msgid "NARK 代表非交互式知识论证,其**应用于算数电路**"
msgstr "NARK 代表非交互式知识论证,其**应用于算数电路**"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:98
msgid "![](static/UScxbwaMUoS9qLxgCF6cfFatnDb.png)"
msgstr "![](static/UScxbwaMUoS9qLxgCF6cfFatnDb.png)"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:100
msgid "电路的输入:公共 statement x 与秘密 w; 输出仍是 F 中的元素"
msgstr "电路的输入:公共 statement x 与秘密 w; 输出仍是 F 中的元素"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:102
msgid ""
"NARK 会经过一个 Setup 阶段即预处理,Setup 将电路的描述作为输入,产生一些公共参"
"数作为输出."
msgstr ""
"NARK 会经过一个 Setup 阶段即预处理,Setup 将电路的描述作为输入,产生一些公共参"
"数作为输出."

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:104
msgid ""
"其中一部分参数与 Prover 相关,称为 PP.另外一些参数与 Verifier 相关,称为 VP."
msgstr ""
"其中一部分参数与 Prover 相关,称为 PP.另外一些参数与 Verifier 相关,称为 VP."

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:106
msgid "Prover 通过 PP,x,w 作为输入,产生一个 proof .表明 C(x,w)=0."
msgstr "Prover 通过 PP,x,w 作为输入,产生一个 proof .表明 C(x,w)=0."

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:108
msgid "Verifier 通过 PP,x 作为输入,对该 proof 进行验证."
msgstr "Verifier 通过 PP,x 作为输入,对该 proof 进行验证."

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:110
msgid "整个过程 Prover 与 Verifier 并没有**交互**."
msgstr "整个过程 Prover 与 Verifier 并没有**交互**."

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:112
msgid "Define NARK  Normallly"
msgstr "Define NARK  Normallly"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:114
msgid "![](static/HmHxbL2qdoBSGAxBB1uczvRunVg.png)"
msgstr "![](static/HmHxbL2qdoBSGAxBB1uczvRunVg.png)"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:116
msgid "Properties of NARK"
msgstr "Properties of NARK"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:118
msgid "![](static/M2l2brJYHoltTexb1S1clYO9nug.png)"
msgstr "![](static/M2l2brJYHoltTexb1S1clYO9nug.png)"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:120
msgid "Knowledge soundness"
msgstr "Knowledge soundness"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:122
msgid "![](static/SpK9bW8E9oM4RnxeFa4cJGvcn3c.png)"
msgstr "![](static/SpK9bW8E9oM4RnxeFa4cJGvcn3c.png)"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:124
msgid ""
"Verifier 接受 w,表示 Prover know w.st C(x,w)=0 成立.如何理解 konw 呢,这就是第"
"一节提到的提取器的概念"
msgstr ""
"Verifier 接受 w,表示 Prover know w.st C(x,w)=0 成立.如何理解 konw 呢,这就是第"
"一节提到的提取器的概念"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:126
msgid "非正式来说,w 能够以某种方式从 Prover 中提取到 w,则表示 Prover know w."
msgstr "非正式来说,w 能够以某种方式从 Prover 中提取到 w,则表示 Prover know w."

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:128
msgid ""
"正式定义则如上图.对于多项式时间对手 A 试图充当恶意证明者,在不知道 statement "
"对应的 w 情况下通过 Verifier 的验证,其中 A 分为两个算法,A0 与 A1.过程如下"
msgstr ""
"正式定义则如上图.对于多项式时间对手 A 试图充当恶意证明者,在不知道 statement "
"对应的 w 情况下通过 Verifier 的验证,其中 A 分为两个算法,A0 与 A1.过程如下"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:130 SNARKs.md:137
msgid "生成全局参数 gp"
msgstr "生成全局参数 gp"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:131 SNARKs.md:138
msgid ""
"将全局参数提供给第一个敌手算法 A0，敌手将生成一些内部状态 st,伪造证明的电路 "
"C 和 statement x"
msgstr ""
"将全局参数提供给第一个敌手算法 A0，敌手将生成一些内部状态 st,伪造证明的电路 "
"C 和 statement x"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:132
msgid "生成 PP 与 VP"
msgstr "生成 PP 与 VP"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:133
msgid "将 PP,C,x 作为输入运行算法 A1,A1 输出一个 proof"
msgstr "将 PP,C,x 作为输入运行算法 A1,A1 输出一个 proof"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:135
msgid ""
"当将这个 proof 与 statement x 一起提供给 Verifier 时，验证者将以百万分之一的"
"概率接受。如果这是真的，那么应该存在一种有效的提取算法 E 并且该提取器 E 将按"
"如下方式工作。"
msgstr ""
"当将这个 proof 与 statement x 一起提供给 Verifier 时，验证者将以百万分之一的"
"概率接受。如果这是真的，那么应该存在一种有效的提取算法 E 并且该提取器 E 将按"
"如下方式工作。"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:139
msgid "E 会以某种方式与算法 A1(**作为 Oracle**)进行交互,然后提取出 w."
msgstr "E 会以某种方式与算法 A1(**作为 Oracle**)进行交互,然后提取出 w."

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:141
msgid ""
"提取的 w 满足  C(x,w)=0，概率大约是百万分之一减去一些可以忽略不计的值 等等。"
msgstr ""
"提取的 w 满足  C(x,w)=0，概率大约是百万分之一减去一些可以忽略不计的值 等等。"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:143
msgid ""
"**总结**:如果对手 A 能够说服 Verifier 它知道某些 C,statement 和对应的 w，"
msgstr ""
"**总结**:如果对手 A 能够说服 Verifier 它知道某些 C,statement 和对应的 w，"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:145
msgid ""
"那么就有一个提取器可以与该对手 A 交互并实际上从 A 中提取 w，使得 C (x,w)= 0。"
msgstr ""
"那么就有一个提取器可以与该对手 A 交互并实际上从 A 中提取 w，使得 C (x,w)= 0。"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:147
msgid "**trivial NARK:即** proof "
msgstr "**trivial NARK:即** proof "

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:147
msgid ""
"的情况.不满足零知识性,但满足前两个属性.Verifier 可以根据 proof 与 x 重新运行"
"电路 验证 C(x,w)=0 是否成立"
msgstr ""
"的情况.不满足零知识性,但满足前两个属性.Verifier 可以根据 proof 与 x 重新运行"
"电路 验证 C(x,w)=0 是否成立"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:149
msgid "SNARK:Succinct Non-interactive  ARgument of Knowledge"
msgstr "SNARK:Succinct Non-interactive  ARgument of Knowledge"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:151
msgid "**succinct preprocessing NARK**"
msgstr "**succinct preprocessing NARK**"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:153
msgid "![](static/G7M4bopFxofN7txHFqIcGrHhnVg.png)"
msgstr "![](static/G7M4bopFxofN7txHFqIcGrHhnVg.png)"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:155
msgid ""
"SNARK 是算法 S、P、V 的三元组，与 NARK 中一样，只是**对 proof 提出了额外的要"
"求**"
msgstr ""
"SNARK 是算法 S、P、V 的三元组，与 NARK 中一样，只是**对 proof 提出了额外的要"
"求**"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:157
msgid "证明者生成的证明必须很短，特别是其大小必须是 w 大小的次线性。"
msgstr "证明者生成的证明必须很短，特别是其大小必须是 w 大小的次线性。"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:159
msgid ""
"证明也应该能够快速验证，这意味着 Verifier 的运行时间应该与电路大小呈次线性关"
"系。"
msgstr ""
"证明也应该能够快速验证，这意味着 Verifier 的运行时间应该与电路大小呈次线性关"
"系。"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:161
msgid ""
"因此，验证者不能简单地重新运行电路 C，但它必须与 x 呈线性关系，因为 Verifier "
"必须按顺序读取 x"
msgstr ""
"因此，验证者不能简单地重新运行电路 C，但它必须与 x 呈线性关系，因为 Verifier "
"必须按顺序读取 x"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:163
msgid "所以 time(V)在 x 上是线性的，但在电路 C 的大小上必须是次线性的。"
msgstr "所以 time(V)在 x 上是线性的，但在电路 C 的大小上必须是次线性的。"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:165
msgid "**strongly succinct preprocessing NARK**"
msgstr "**strongly succinct preprocessing NARK**"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:167
msgid "![](static/Zg9jbyZ1IojA3uxnfQ9cJXZmnjf.png)"
msgstr "![](static/Zg9jbyZ1IojA3uxnfQ9cJXZmnjf.png)"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:169
msgid "实践中的 SNARK 实际上会非常简洁(**strongly succinct**)。"
msgstr "实践中的 SNARK 实际上会非常简洁(**strongly succinct**)。"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:171
msgid "**strongly succinct**:意味着"
msgstr "**strongly succinct**:意味着"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:173
msgid ""
"proof 不仅是 w 大小的次线性，证明长度必须是电路大小的对数关系.使证明与电路相"
"比非常小！"
msgstr ""
"proof 不仅是 w 大小的次线性，证明长度必须是电路大小的对数关系.使证明与电路相"
"比非常小！"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:174
msgid "验证证明的时间与 x 的大小成线性,且最多是电路规模的对数关系。"
msgstr "验证证明的时间与 x 的大小成线性,且最多是电路规模的对数关系。"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:176
msgid ""
"**意味着 Verifier 没有时间读取整个电路，也就是 Verifier 甚至不知道电路 C 是什"
"么.也就无法验证一个语句**"
msgstr ""
"**意味着 Verifier 没有时间读取整个电路，也就是 Verifier 甚至不知道电路 C 是什"
"么.也就无法验证一个语句**"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:178
msgid ""
"**这就是为什么需要公共参数的原因，它为 Verifier 提供电路的 ****vp**** 摘要，"
"以便在 ****log****(∣****C****∣)内足以运行验证。**"
msgstr ""
"**这就是为什么需要公共参数的原因，它为 Verifier 提供电路的 ****vp**** 摘要，"
"以便在 ****log****(∣****C****∣)内足以运行验证。**"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:180
msgid "ZK-SNARK 就是零知识的 SNARK"
msgstr "ZK-SNARK 就是零知识的 SNARK"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:182
msgid "![](static/M6aJbALrkojP2CxvZxDc5lAinLM.png)"
msgstr "![](static/M6aJbALrkojP2CxvZxDc5lAinLM.png)"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:184
msgid ""
"像 NARK 一样,考虑一个 trival SNARK 的情况,如上图所示,发现 a trival SNARK 并不"
"满足一个 SNARK 定义."
msgstr ""
"像 NARK 一样,考虑一个 trival SNARK 的情况,如上图所示,发现 a trival SNARK 并不"
"满足一个 SNARK 定义."

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:186
msgid "Preprocessing Setup"
msgstr "Preprocessing Setup"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:188
msgid "![](static/N5rabmHXMol2hkx6tJFcBeAunWb.png)"
msgstr "![](static/N5rabmHXMol2hkx6tJFcBeAunWb.png)"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:190
msgid ""
"Setup 阶段读取整个电路 C,然后输出电路 C 的摘要-一些公共参数,包括 Prover 会用"
"到的 PP 与 Verifier 会用到的 VP."
msgstr ""
"Setup 阶段读取整个电路 C,然后输出电路 C 的摘要-一些公共参数,包括 Prover 会用"
"到的 PP 与 Verifier 会用到的 VP."

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:192
msgid "Setup 阶段通常会采用一些随机位 r 用于生成参数的过程，可分为以下几类"
msgstr "Setup 阶段通常会采用一些随机位 r 用于生成参数的过程，可分为以下几类"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:194
msgid ""
"Trusted setup per circuit:每一个电路都需要重新执行一次 Setup 过程.随机数 r 非"
"常重要,应当保证 Setup 阶段后 r 被销毁(**可信**),否则其将能够伪造 proof."
msgstr ""
"Trusted setup per circuit:每一个电路都需要重新执行一次 Setup 过程.随机数 r 非"
"常重要,应当保证 Setup 阶段后 r 被销毁(**可信**),否则其将能够伪造 proof."

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:195
msgid "Trusted and universal setup:将 Setup 分为两个阶段"
msgstr "Trusted and universal setup:将 Setup 分为两个阶段"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:197 src/zk-everything/zk-everything-joe/Spartan.md:246
#: src/zk-everything/zk-everything-joe/Spartan.md:268
msgid "ini"
msgstr "ini"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:197
msgid ""
":是个一次性的算法,产生全局参数 gp.该阶段完成后,r 就被销毁.所以 init 阶段需要"
"是可信的,但该阶段可以**用于很多电路.**"
msgstr ""
":是个一次性的算法,产生全局参数 gp.该阶段完成后,r 就被销毁.所以 init 阶段需要"
"是可信的,但该阶段可以**用于很多电路.**"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:198 src/public goods/4-Proving-System.md:193
#: goods/4-Proving-System.md:194 goods/4-Proving-System.md:201
#: goods/4-Proving-System.md:207 goods/4-Proving-System.md:208
msgid "pp"
msgstr "pp"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:198
msgid ""
":是一个确定性算法,为证明者和验证者生成参数。任何人都可以运行该算法并验证参数"
"是否正确生成。"
msgstr ""
":是一个确定性算法,为证明者和验证者生成参数。任何人都可以运行该算法并验证参数"
"是否正确生成。"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:199
msgid ""
"Transparent setup:不需要任何秘密值，因此任何人都可以验证它是否正确运行，并且"
"不需要运行可信设置.比如 STRAK 协议"
msgstr ""
"Transparent setup:不需要任何秘密值，因此任何人都可以验证它是否正确运行，并且"
"不需要运行可信设置.比如 STRAK 协议"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:201
msgid "![](static/IdUIb94u1oP4rnxrqXIcIsUsnuh.png)"
msgstr "![](static/IdUIb94u1oP4rnxrqXIcIsUsnuh.png)"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:203
msgid "Building an efficient SNAKR"
msgstr "Building an efficient SNAKR"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:205
msgid "![](static/BiYWb0CL4oAhwtxe7yLcW8kJnEg.png)"
msgstr "![](static/BiYWb0CL4oAhwtxe7yLcW8kJnEg.png)"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:207
msgid ""
"一个通用的构建 SNARK 的范例,包含两步或者说两个组件.functional Commitment "
"Scheme 与 Interactive oracle proof."
msgstr ""
"一个通用的构建 SNARK 的范例,包含两步或者说两个组件.functional Commitment "
"Scheme 与 Interactive oracle proof."

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:209
msgid ""
"Commitment 方案是一个**加密对象**，这意味着它的安全性取决于某些密码学假设。"
msgstr ""
"Commitment 方案是一个**加密对象**，这意味着它的安全性取决于某些密码学假设。"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:211
msgid ""
"IOP 交互式预言机证明实际上是一个**信息论对象**,可以在没有任何底层假设的情况下"
"无条件地证明 IOP 的安全性"
msgstr ""
"IOP 交互式预言机证明实际上是一个**信息论对象**,可以在没有任何底层假设的情况下"
"无条件地证明 IOP 的安全性"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:213
msgid "Commitment 承诺"
msgstr "Commitment 承诺"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:215
msgid "简单回顾"
msgstr "简单回顾"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:217
msgid "![](static/KqQzbA6CWoq8vWxnKnica3lnn6g.png)"
msgstr "![](static/KqQzbA6CWoq8vWxnKnica3lnn6g.png)"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:223
msgid ""
"computational hiding:对于任意的 PPT 敌手 A.有 ![](static/"
"QrRdbFl1Jol2NNxIZnBcnzZznvd.png)"
msgstr ""
"computational hiding:对于任意的 PPT 敌手 A.有 ![](static/"
"QrRdbFl1Jol2NNxIZnBcnzZznvd.png)"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:228
msgid "computational  Binding ![](static/Luz3bGxYAoFEAUxSdBUc1jubnpc.png)"
msgstr "computational  Binding ![](static/Luz3bGxYAoFEAUxSdBUc1jubnpc.png)"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:232
msgid "有一个使用哈希函数的标准承诺构造。哈希函数 _H_:M×R→C，其中"
msgstr "有一个使用哈希函数的标准承诺构造。哈希函数 _H_:M×R→C，其中"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:234
msgid "_commit_(_m_,_r_)=_H_(_m_,_r_)"
msgstr "_commit_(_m_,_r_)=_H_(_m_,_r_)"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:235
msgid "_verify_(_m_,_com_,_r_)=accept if _com_=_H_(_m_,_r_)"
msgstr "_verify_(_m_,_com_,_r_)=accept if _com_=_H_(_m_,_r_)"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:237
msgid "Commitment to a Function"
msgstr "Commitment to a Function"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:239
msgid "![](static/ZEo3bWv7joj4QExjbztcieDZnFb.png)"
msgstr "![](static/ZEo3bWv7joj4QExjbztcieDZnFb.png)"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:241
msgid "选择一个函数族: F={_f_:X_→Y}. f 表示从集合 x 到集合 y 的函数"
msgstr "选择一个函数族: F={_f_:X_→Y}. f 表示从集合 x 到集合 y 的函数"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:242
msgid "Prover 运行 Commit 算法,将函数 f 与随机数 r 作为输入, "
msgstr "Prover 运行 Commit 算法,将函数 f 与随机数 r 作为输入, "

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:242
msgid " 为输出.f 可以表示为一个电路 C，一个 C 程序等。"
msgstr " 为输出.f 可以表示为一个电路 C，一个 C 程序等。"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:244
msgid "然后将 "
msgstr "然后将 "

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:244 SNARKs.md:301
msgid " 发送给 Verifier"
msgstr " 发送给 Verifier"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:246
msgid "Verifier 可以发送回一个函数域中的元素 x"
msgstr "Verifier 可以发送回一个函数域中的元素 x"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:247
msgid ""
"Prover 将 x 对应的 f(x)=y,以及 proof 发送给 Verifier. Proof 表明 1.f(x)=y 2."
"f 属于 F"
msgstr ""
"Prover 将 x 对应的 f(x)=y,以及 proof 发送给 Verifier. Proof 表明 1.f(x)=y 2."
"f 属于 F"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:249
msgid "形式上讲， Function Commitment Scheme 由以下定义："
msgstr "形式上讲， Function Commitment Scheme 由以下定义："

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:251
msgid "![](static/UPnRbDbI1ooe5zx8ilNcI56enKd.png)"
msgstr "![](static/UPnRbDbI1ooe5zx8ilNcI56enKd.png)"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:253
msgid "setup\\_("
msgstr "setup\\_("

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:253
msgid ")→gp 输出公共参数 _gp_ 。"
msgstr ")→gp 输出公共参数 _gp_ 。"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:254
msgid "commit(gp,f,r)→ "
msgstr "commit(gp,f,r)→ "

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:254
msgid "  用随机数r∈R 承诺 f∈F"
msgstr "  用随机数r∈R 承诺 f∈F"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:256
msgid "构建 SNARK,必须满足 Binding"
msgstr "构建 SNARK,必须满足 Binding"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:257
msgid ""
"对于 **hiding**, 构建 SNARK 并非必须满足,  但当构建 zk-SNARK 需要满足该属性"
msgstr ""
"对于 **hiding**, 构建 SNARK 并非必须满足,  但当构建 zk-SNARK 需要满足该属性"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:258
msgid "_eval_(_P_,_V_) :对于给定"
msgstr "_eval_(_P_,_V_) :对于给定"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:258
msgid "和 x∈X,y∈Y ："
msgstr "和 x∈X,y∈Y ："

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:260
msgid "_Prover_(_gp_,_f_,_x_,_y_,_r_)→π:生成一个简短的证明"
msgstr "_Prover_(_gp_,_f_,_x_,_y_,_r_)→π:生成一个简短的证明"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:261
msgid "_V_(_gp_, "
msgstr "_V_(_gp_, "

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:261
msgid " ,_x_,_y_,_π_)→accept or reject"
msgstr " ,_x_,_y_,_π_)→accept or reject"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:262
msgid ""
"_事实上,Prover 与 Verifier 之间的 eval_ 算法是对以下关系的(zk)SNARK 证明: 1."
"f(_x_)=_y_ 2. _commit_(_pp_,_f_,_r_)= "
msgstr ""
"_事实上,Prover 与 Verifier 之间的 eval_ 算法是对以下关系的(zk)SNARK 证明: 1."
"f(_x_)=_y_ 2. _commit_(_pp_,_f_,_r_)= "

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:263
msgid " 3. f∈F"
msgstr " 3. f∈F"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:265
msgid "Examples of functional commitments"
msgstr "Examples of functional commitments"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:267
msgid "![](static/OH4obrjg2oxlJixXQ2PccMsWnnh.png)"
msgstr "![](static/OH4obrjg2oxlJixXQ2PccMsWnnh.png)"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:269
msgid "多项式承诺：承诺对象是单变量多项式, "
msgstr "多项式承诺：承诺对象是单变量多项式, "

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:269
msgid " :表示所有次数最多为 d 的单变量多项式的集合。"
msgstr " :表示所有次数最多为 d 的单变量多项式的集合。"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:270
msgid "多线性承诺：承诺为多线性多项式，其中 "
msgstr "多线性承诺：承诺为多线性多项式，其中 "

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:270
msgid ":表示是 k 个变量的所有多线性多项式的集合，每个变量的次数最多为 1。"
msgstr ":表示是 k 个变量的所有多线性多项式的集合，每个变量的次数最多为 1。"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:272
msgid "多线性多项式示例： "
msgstr "多线性多项式示例： "

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:273
msgid "向量承诺：承诺对象是一个向量, "
msgstr "向量承诺：承诺对象是一个向量, "

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:273
msgid ""
" 。能够打开该向量中的任何特定单元格。在给定索引 i 的情况下,证明索引 i 处的该"
"函数值 "
msgstr ""
" 。能够打开该向量中的任何特定单元格。在给定索引 i 的情况下,证明索引 i 处的该"
"函数值 "

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:275
msgid "向量承诺方案实例:默克尔树(Merkle tree)"
msgstr "向量承诺方案实例:默克尔树(Merkle tree)"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:276
msgid "内积承诺：承诺一个向量 "
msgstr "内积承诺：承诺一个向量 "

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:276
msgid " ,并定义一个函数 "
msgstr " ,并定义一个函数 "

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:276
msgid " ,该函数接受另外一个向量 v 作为输入,并且输出两个向量的内积(u,v)."
msgstr " ,该函数接受另外一个向量 v 作为输入,并且输出两个向量的内积(u,v)."

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:278
msgid "**对于这 4 个承诺方案,可以从中任意一个基础上构建获得剩余承诺方案。**"
msgstr "**对于这 4 个承诺方案,可以从中任意一个基础上构建获得剩余承诺方案。**"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:280
msgid "Polynomial Commitment Scheme"
msgstr "Polynomial Commitment Scheme"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:282
msgid "![](static/PwaRbOec3oOQ2PxNephcooKUn1e.png)"
msgstr "![](static/PwaRbOec3oOQ2PxNephcooKUn1e.png)"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:284
msgid "Prover 需要对多项式 "
msgstr "Prover 需要对多项式 "

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:284
msgid " 承诺.Prover 试图说服 Verifier , "
msgstr " 承诺.Prover 试图说服 Verifier , "

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:284
msgid " 满足"
msgstr " 满足"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:286
msgid "1.f(u)=v ,其中 u,v∈Fp 且公开可见"
msgstr "1.f(u)=v ,其中 u,v∈Fp 且公开可见"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:287
msgid "f 的 degree≤d."
msgstr "f 的 degree≤d."

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:289
msgid "我们希望证明是一个 SNARK，那么证明大小和验证时间应该是 "
msgstr "我们希望证明是一个 SNARK，那么证明大小和验证时间应该是 "

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:289
msgid ",下面是一些 PCS 的实现机制"
msgstr ",下面是一些 PCS 的实现机制"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:291
msgid ""
"Using bilinear groups: **KZG'10** (trusted setup,也是**实际中使用最多的**), "
"**Dory'20** (transparent,相比 kzg 慢)"
msgstr ""
"Using bilinear groups: **KZG'10** (trusted setup,也是**实际中使用最多的**), "
"**Dory'20** (transparent,相比 kzg 慢)"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:292
msgid "仅使用哈希函数：基于 FRI（long eval proofs）"
msgstr "仅使用哈希函数：基于 FRI（long eval proofs）"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:293
msgid ""
"仅使用常规的椭圆曲线,不需要额外的结构: **Bulletproofs** (short proof, but "
"verifier time is O(_d_))"
msgstr ""
"仅使用常规的椭圆曲线,不需要额外的结构: **Bulletproofs** (short proof, but "
"verifier time is O(_d_))"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:294
msgid "Using groups of unknown order: **Dark'20(慢,未获得太多关注)**"
msgstr "Using groups of unknown order: **Dark'20(慢,未获得太多关注)**"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:296
msgid "考虑 **travial** 的 PCS 情况,用系数表示的方式表示多项式 f, "
msgstr "考虑 **travial** 的 PCS 情况,用系数表示的方式表示多项式 f, "

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:296
msgid " ,过程如下"
msgstr " ,过程如下"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:298
msgid "commit(f,r)= "
msgstr "commit(f,r)= "

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:299
msgid "eval\\_ 将按如下方式完成："
msgstr "eval\\_ 将按如下方式完成："

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:301
msgid "Prover 将 π = "
msgstr "Prover 将 π = "

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:302
msgid "verifier 从系数重构 _f_ ，并检查是否 _f_(_u_)=_v_ 和 "
msgstr "verifier 从系数重构 _f_ ，并检查是否 _f_(_u_)=_v_ 和 "

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:304
msgid ""
"很明显这**不符合 SNARK 的要求**,因为证明大小和验证时间与 _d_ 是线性关系的,而"
"不是 O(log d)"
msgstr ""
"很明显这**不符合 SNARK 的要求**,因为证明大小和验证时间与 _d_ 是线性关系的,而"
"不是 O(log d)"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:306
msgid "Polynomial is Zero"
msgstr "Polynomial is Zero"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:308
msgid "这是 SNARK 的重要组成部分，也是使 SNARK 成为可能的重要原因"
msgstr "这是 SNARK 的重要组成部分，也是使 SNARK 成为可能的重要原因"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:310
msgid "考虑最多为_d\\_ 次的非零多项式 "
msgstr "考虑最多为_d\\_ 次的非零多项式 "

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:312
msgid " :从有限域选择一个随机元素 r ,f(r)=0 的概率为 d/p"
msgstr " :从有限域选择一个随机元素 r ,f(r)=0 的概率为 d/p"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:314
msgid ""
"这是因为 f 最多有 d 个根,_r_ 是从大小 _p 的域_ 中随机选择的.r 命中 d 个根的概"
"率为 d/p."
msgstr ""
"这是因为 f 最多有 d 个根,_r_ 是从大小 _p 的域_ 中随机选择的.r 命中 d 个根的概"
"率为 d/p."

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:316
msgid "考虑当 p 远远大于 d 的情况下,比如 "
msgstr "考虑当 p 远远大于 d 的情况下,比如 "

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:316
msgid "≈"
msgstr "≈"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:316
msgid "256"
msgstr "256"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:316
msgid "40"
msgstr "40"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:316
msgid ", _d_/_p_ 可以忽略不计.这意味着当 "
msgstr ", _d_/_p_ 可以忽略不计.这意味着当 "

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:316 SNARKs.md:324
msgid "Fp"
msgstr "Fp"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:316
msgid ",Verifier 有着非常高的概率相信多项式在所有点上都为 0."
msgstr ",Verifier 有着非常高的概率相信多项式在所有点上都为 0."

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:318
msgid ""
"判断一个多项式是否为 0,只需一个随机点进行评估,并检查评估值是否为零即可。"
msgstr ""
"判断一个多项式是否为 0,只需一个随机点进行评估,并检查评估值是否为零即可。"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:320
msgid ""
"对应[\\[Schwartz-Zippel-DeMillo-Lipton\\]](https://en.wikipedia.org/wiki/"
"Schwartz%E2%80%93Zippel_lemma)定理.该定理也适用于多元多项式,将 d 理解为 f 的"
"总 degree 之合即可.比如 "
msgstr ""
"对应[\\[Schwartz-Zippel-DeMillo-Lipton\\]](https://en.wikipedia.org/wiki/"
"Schwartz%E2%80%93Zippel_lemma)定理.该定理也适用于多元多项式,将 d 理解为 f 的"
"总 degree 之合即可.比如 "

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:322
msgid "Two Polynomials are equation"
msgstr "Two Polynomials are equation"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:324
msgid "设 "
msgstr "设 "

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:324
msgid " 如果 "
msgstr " 如果 "

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:324
msgid "则"
msgstr "则"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:324
msgid "0."
msgstr "0."

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:324
msgid " ,那么 f=g 的概率非常高."
msgstr " ,那么 f=g 的概率非常高."

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:326
msgid "下面给出判断两个多项式是否相等的**交互式**协议"
msgstr "下面给出判断两个多项式是否相等的**交互式**协议"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:328
msgid "![](static/NspFbl037ob8cMxpN7mcdwyknIf.png)"
msgstr "![](static/NspFbl037ob8cMxpN7mcdwyknIf.png)"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:330
msgid "V 从 Fp 中随机选择一个随机数 r,将 r 发送给 P"
msgstr "V 从 Fp 中随机选择一个随机数 r,将 r 发送给 P"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:331
msgid ""
"P 根据发来的 r,分别计算 f(r)与 g(r)的值为 y 与 y‘.将 y 与 y’以及对应的 proof "
"给 V"
msgstr ""
"P 根据发来的 r,分别计算 f(r)与 g(r)的值为 y 与 y‘.将 y 与 y’以及对应的 proof "
"给 V"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:332
msgid "V 首先检查 proof 是否有效,然后检查 y 是否等于 y‘"
msgstr "V 首先检查 proof 是否有效,然后检查 y 是否等于 y‘"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:334
msgid "通过承诺与 F-S 转换,将上述协议转为 SNARK 方案."
msgstr "通过承诺与 F-S 转换,将上述协议转为 SNARK 方案."

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:336
msgid "![](static/WFqCbgqm4oOMgNxPzg3cyNKwnGj.png)"
msgstr "![](static/WFqCbgqm4oOMgNxPzg3cyNKwnGj.png)"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:338
msgid "上图是一个 SNARK 方案,当"
msgstr "上图是一个 SNARK 方案,当"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:340
msgid "d/p 可忽略"
msgstr "d/p 可忽略"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:341
msgid ""
"哈希函数 H 作为一个 **Oracle**,即 H 可自行获得随机质询，然后计算对对应的响"
"应，并将响应发送给 P"
msgstr ""
"哈希函数 H 作为一个 **Oracle**,即 H 可自行获得随机质询，然后计算对对应的响"
"应，并将响应发送给 P"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:342
msgid "该 SNARK 中,Statement x 是 f 与 g 对应的承诺 "
msgstr "该 SNARK 中,Statement x 是 f 与 g 对应的承诺 "

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:342
msgid ";witness w 是 f 与 g 本身."
msgstr ";witness w 是 f 与 g 本身."

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:343
msgid ""
"**F-S 转化**为非交互式 SNARK:P 通过 H(x)获得随机数 r,不再需要 V 发送 r.因为 "
"V 同样能拿着 x 询问 Oracle,获得 r."
msgstr ""
"**F-S 转化**为非交互式 SNARK:P 通过 H(x)获得随机数 r,不再需要 V 发送 r.因为 "
"V 同样能拿着 x 询问 Oracle,获得 r."

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:344
msgid ""
"但这**不是一个 zk-snark**,因为 V 可以学习到多项式 f,g 在 r 处的值 y 与 y‘."
msgstr ""
"但这**不是一个 zk-snark**,因为 V 可以学习到多项式 f,g 在 r 处的值 y 与 y‘."

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:346
msgid "Inner product argument"
msgstr "Inner product argument"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:348
msgid ""
"证明者通过内积论证可利用**循环\\*\\*\\*\\*递归**的方式**证明他拥有两个公开向"
"量承诺的消息, 且这两个消息的内积等于某个公开值**. 对于长度为 n 的消息向量, 内"
"积论证的通信复 杂度为 O(log n)."
msgstr ""
"证明者通过内积论证可利用**循环\\*\\*\\*\\*递归**的方式**证明他拥有两个公开向"
"量承诺的消息, 且这两个消息的内积等于某个公开值**. 对于长度为 n 的消息向量, 内"
"积论证的通信复 杂度为 O(log n)."

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:350
msgid "Prover 可向 Verifier 证明对于公共输入 "
msgstr "Prover 可向 Verifier 证明对于公共输入 "

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:350
msgid " 和公开标量 z∈Zq"
msgstr " 和公开标量 z∈Zq"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:352
msgid "P 拥有向量 a、b,满足 "
msgstr "P 拥有向量 a、b,满足 "

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:352
msgid " 则 statement 为"
msgstr " 则 statement 为"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:354
msgid ",其中向量 a,b 为 witness,g,h,A,B 为公共输入"
msgstr ",其中向量 a,b 为 witness,g,h,A,B 为公共输入"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:356
msgid ""
"内积论证的**核心思想**是将针对 n 长向量的 statement 根据 V 的随机挑战 c 归约"
"为对 n/2 长向量的等价 statement,"
msgstr ""
"内积论证的**核心思想**是将针对 n 长向量的 statement 根据 V 的随机挑战 c 归约"
"为对 n/2 长向量的等价 statement,"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:358
msgid "在向量不断缩减至为标量后, P 只需要直接发送标量即可."
msgstr "在向量不断缩减至为标量后, P 只需要直接发送标量即可."

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:360
msgid "约定一些符号"
msgstr "约定一些符号"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:362
msgid "1.固定群的生成元 g 后, 记 "
msgstr "1.固定群的生成元 g 后, 记 "

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:362
msgid " 为 \\[r\\], 令 n ∈ N, 记 "
msgstr " 为 \\[r\\], 令 n ∈ N, 记 "

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:362 SNARKs.md:364
msgid ",⋅⋅⋅,"
msgstr ",⋅⋅⋅,"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:362 src/public goods/第二章.md:80 goods/第二章.md:103
msgid "为"
msgstr "为"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:362
msgid ",\\[S\\]同理"
msgstr ",\\[S\\]同理"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:363
msgid "设 g, h 的生成方式为 "
msgstr "设 g, h 的生成方式为 "

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:364
msgid "对于 n 为偶数的向量 "
msgstr "对于 n 为偶数的向量 "

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:364
msgid " (不是偶数可填充), 记 "
msgstr " (不是偶数可填充), 记 "

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:366
msgid "**过程如下**"
msgstr "**过程如下**"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:368
msgid "首先基于 V 的随机挑战 c 构造长度一半于原密钥长度的承诺密钥, 即 "
msgstr "首先基于 V 的随机挑战 c 构造长度一半于原密钥长度的承诺密钥, 即 "

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:369
msgid ""
"为防止 P 利用新的承诺密钥 \\[r′\\] 作恶, P 需在挑战阶段之前发送部分承诺值 "
msgstr ""
"为防止 P 利用新的承诺密钥 \\[r′\\] 作恶, P 需在挑战阶段之前发送部分承诺值 "

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:369
msgid ". 此时新证据为 "
msgstr ". 此时新证据为 "

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:370
msgid "P 和 V 计算新承诺: "
msgstr "P 和 V 计算新承诺: "

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:371
msgid "对于承诺密钥 \\[s\\]、承诺 B 和秘密输入 b, 利用挑战 c 的逆 "
msgstr "对于承诺密钥 \\[s\\]、承诺 B 和秘密输入 b, 利用挑战 c 的逆 "

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:371
msgid " 构造对应的承诺密钥 \\[s′\\]、新证据 b′ 和承诺值 B′ ,即 "
msgstr " 构造对应的承诺密钥 \\[s′\\]、新证据 b′ 和承诺值 B′ ,即 "

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:372
msgid "对于 z,P 需在挑战阶段前构造 "
msgstr "对于 z,P 需在挑战阶段前构造 "

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:373
msgid "更新后的 "
msgstr "更新后的 "

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:374
msgid "归约后的新陈述为 "
msgstr "归约后的新陈述为 "

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:375
msgid ".....递归规约"
msgstr ".....递归规约"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:377
msgid "IOP:Interactive Oracle Proof"
msgstr "IOP:Interactive Oracle Proof"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:379
msgid ""
"F -IOP 的目标是将 f∈F 的承诺转为通用电路的 SNARK。例如，对于一个多项式函数族 "
msgstr ""
"F -IOP 的目标是将 f∈F 的承诺转为通用电路的 SNARK。例如，对于一个多项式函数族 "

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:379
msgid " ，使用 F -IOP，可以将其转换为任何电路大小为 ∣C∣\\<d 的 SNARK。"
msgstr " ，使用 F -IOP，可以将其转换为任何电路大小为 ∣C∣\\<d 的 SNARK。"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:381
msgid "**Definition**:****C****(****x****,****w****) 是某些算术电路。 **"
msgstr "**Definition**:****C****(****x****,****w****) 是某些算术电路。 **"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:381
msgid ""
"**  .F -IOP 是一个证明系统，用于证明 ∃****w****:****C****(****x****,"
"****w****)=0 **"
msgstr ""
"**  .F -IOP 是一个证明系统，用于证明 ∃****w****:****C****(****x****,"
"****w****)=0 **"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:383
msgid "**Setup**: _S_(_C_)→(_pp_,_vp_),其中 "
msgstr "**Setup**: _S_(_C_)→(_pp_,_vp_),其中 "

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:383
msgid ""
" 是函数的 Oracle.即 vp 可以理解为 V 可查询的一堆 Oracle,V 可以要求某个给定值"
"显示函数结果,过程如下"
msgstr ""
" 是函数的 Oracle.即 vp 可以理解为 V 可查询的一堆 Oracle,V 可以要求某个给定值"
"显示函数结果,过程如下"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:385
msgid "![](static/NPc3bcDHOoZ4KXxJGCbcuMxnn5g.png)"
msgstr "![](static/NPc3bcDHOoZ4KXxJGCbcuMxnn5g.png)"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:387
msgid "P 首先发送函数 f1 的 Oracle "
msgstr "P 首先发送函数 f1 的 Oracle "

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:387
msgid "。V 稍后可以在其选择的任何点对 f 进行评估.在实际中, "
msgstr "。V 稍后可以在其选择的任何点对 f 进行评估.在实际中, "

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:388
msgid "V 从 Fp 中随机选择 r1 发送给 P."
msgstr "V 从 Fp 中随机选择 r1 发送给 P."

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:389
msgid "重复 Step1 and Step2 t-1 轮"
msgstr "重复 Step1 and Step2 t-1 轮"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:390
msgid "P 最后发送 ft 的 Oracle "
msgstr "P 最后发送 ft 的 Oracle "

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:391
msgid ""
"V 开始验证,验证过程 V 可以访问 P 给出的所有 Oracle，以及所有生成的随机数 r 和"
"公共输入 _x_"
msgstr ""
"V 开始验证,验证过程 V 可以访问 P 给出的所有 Oracle，以及所有生成的随机数 r 和"
"公共输入 _x_"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:393
msgid "Properties of IOP"
msgstr "Properties of IOP"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:395
msgid "**Completeness**: "
msgstr "**Completeness**: "

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:395 src/zk-everything/zk-everything-joe/Hyrax.md:191
msgid "⟹"
msgstr "⟹"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:395
msgid "  "
msgstr "  "

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:395 src/public goods/4-Proving-System.md:209
msgid "cce"
msgstr "cce"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:396
msgid ""
"Knowledge Soundness:在没有 w 的情况下,恶意 P 无法让 V 相信他知道一个 w,使得 "
"C(x,w)=0"
msgstr ""
"Knowledge Soundness:在没有 w 的情况下,恶意 P 无法让 V 相信他知道一个 w,使得 "
"C(x,w)=0"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:398
msgid "Extractor 可以访问 statement x 与函数 "
msgstr "Extractor 可以访问 statement x 与函数 "

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:398
msgid ""
" **本身**,因为对于这些函数本身的**承诺就是一个 SNARK**,所以 Ectractor 可以从 "
msgstr ""
" **本身**,因为对于这些函数本身的**承诺就是一个 SNARK**,所以 Ectractor 可以从 "

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:398
msgid " 中**提取 f 本身**,进而提取出 w."
msgstr " 中**提取 f 本身**,进而提取出 w."

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:399
msgid "Zeroknowledge :可不满足"
msgstr "Zeroknowledge :可不满足"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:401
msgid "Example of IOP"
msgstr "Example of IOP"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:403
msgid "Polynomial IOP for claim "
msgstr "Polynomial IOP for claim "

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:403
msgid ",用电路 C 去表示该关系: "
msgstr ",用电路 C 去表示该关系: "

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:403 src/public goods/第二章.md:38 goods/第二章.md:44
#: goods/第二章.md:46 goods/第二章.md:50 goods/第二章.md:65
#: goods/第二章.md:84 goods/第二章.md:89 goods/第二章.md:162
#: goods/第二章.md:164
msgid "⟺"
msgstr "⟺"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:403
msgid ",过程如下"
msgstr ",过程如下"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:405
msgid "![](static/TOAPbh1oxooYeSxxfLYcrNutnzc.png)"
msgstr "![](static/TOAPbh1oxooYeSxxfLYcrNutnzc.png)"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:407
msgid "P 分别计算两个多项式 "
msgstr "P 分别计算两个多项式 "

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:407
msgid ",V 也可计算 g(Z),因为 X 是公共的"
msgstr ",V 也可计算 g(Z),因为 X 是公共的"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:408
msgid "P 计算一个商多项式 "
msgstr "P 计算一个商多项式 "

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:408
msgid ",只有在 g 包含所有 f 根的情况下,q 才是一个多项式,即X⊆W.举个例子"
msgstr ",只有在 g 包含所有 f 根的情况下,q 才是一个多项式,即X⊆W.举个例子"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:410
msgid "比如 X={1,2},W={1,2,4}, "
msgstr "比如 X={1,2},W={1,2,4}, "

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:410
msgid " ,只有X⊆W,q 才是一个有限域中的有效多项式"
msgstr " ,只有X⊆W,q 才是一个有限域中的有效多项式"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:412
msgid "P 发送 "
msgstr "P 发送 "

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:412
msgid " 给 V"
msgstr " 给 V"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:413
msgid ""
"V 发送一个随机数 r 给 P,虽然 P 不会用到 r,但仍然发送,这表明 r 是一个公共值"
msgstr ""
"V 发送一个随机数 r 给 P,虽然 P 不会用到 r,但仍然发送,这表明 r 是一个公共值"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:414
msgid "V 查询 "
msgstr "V 查询 "

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:414
msgid " 在 r 点的值,记做 w 与 q‘.计算 g(r).验证 g(r)\\*q’=w 是否成立"
msgstr " 在 r 点的值,记做 w 与 q‘.计算 g(r).验证 g(r)\\*q’=w 是否成立"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:416
msgid ""
"**当我们设计 IOP 时，我们所要做的就是设计 P 向 V 发送哪些 Oracle，然后 V 在哪"
"里查询这些 Oracle。**"
msgstr ""
"**当我们设计 IOP 时，我们所要做的就是设计 P 向 V 发送哪些 Oracle，然后 V 在哪"
"里查询这些 Oracle。**"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:418
msgid ""
"实际中,可以**通过多项式承诺方案来实例化 IOP**，其中这些 Oracle 被来自 P 的承"
"诺所取代，查询动作基本上通过将查询点发送给 P 来取代，P 进行评估并发回评估正确"
"完成的证明。然后 V 可以决定是否接受或拒绝最终的证明。"
msgstr ""
"实际中,可以**通过多项式承诺方案来实例化 IOP**，其中这些 Oracle 被来自 P 的承"
"诺所取代，查询动作基本上通过将查询点发送给 P 来取代，P 进行评估并发回评估正确"
"完成的证明。然后 V 可以决定是否接受或拒绝最终的证明。"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:420
msgid "IOP + 相应的 Polynomial 方案构造 SNARK"
msgstr "IOP + 相应的 Polynomial 方案构造 SNARK"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:422
msgid "![](static/ZLeLbdy7AoX0Pfxj23sctuDGn6c.png)"
msgstr "![](static/ZLeLbdy7AoX0Pfxj23sctuDGn6c.png)"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:424
msgid "Snarks in Practice"
msgstr "Snarks in Practice"

#: src/zk-everything/zk-learning-miles/Lecture2:Introduction to Modern
#: SNARKs.md:426
msgid "![](static/HDbFbgxo7op2lsxGDsCcGTXKn8f.png)"
msgstr "![](static/HDbFbgxo7op2lsxGDsCcGTXKn8f.png)"

#: src/zk-everything/zk-learning-miles/Lecture12:ZKEVM.md:4
msgid "ZK-learning lecture 12:ZK- EVM"
msgstr "ZK-learning lecture 12:ZK- EVM"

#: src/zk-everything/zk-learning-miles/Lecture12:ZKEVM.md:6
msgid "Background and motivation"
msgstr "Background and motivation"

#: src/zk-everything/zk-learning-miles/Lecture12:ZKEVM.md:8
msgid "The diagram of Layer1 blockchain"
msgstr "The diagram of Layer1 blockchain"

#: src/zk-everything/zk-learning-miles/Lecture12:ZKEVM.md:10
msgid "![](static/TbRYb9TrIo4phnxXR0ZcaDAMnJg.png)"
msgstr "![](static/TbRYb9TrIo4phnxXR0ZcaDAMnJg.png)"

#: src/zk-everything/zk-learning-miles/Lecture12:ZKEVM.md:12
msgid "区块链简单介绍:"
msgstr "区块链简单介绍:"

#: src/zk-everything/zk-learning-miles/Lecture12:ZKEVM.md:14
msgid ""
"区块链网络由许多节点组成，通常有大量的节点用于指定，它们通过 P2P 网络互连，所"
"有节点保持与上图红框显示的相同状态.这是一个类似于共享账本的数据库，因此可以将"
"余额或者一些程序代码放在这里.然后使用名为 Merkle tree 的数据结构将所有这些信"
"息存储在列表中.从而得到一个状态路由."
msgstr ""
"区块链网络由许多节点组成，通常有大量的节点用于指定，它们通过 P2P 网络互连，所"
"有节点保持与上图红框显示的相同状态.这是一个类似于共享账本的数据库，因此可以将"
"余额或者一些程序代码放在这里.然后使用名为 Merkle tree 的数据结构将所有这些信"
"息存储在列表中.从而得到一个状态路由."

#: src/zk-everything/zk-learning-miles/Lecture12:ZKEVM.md:16
msgid ""
"然后对状态路由取摘要来代表所有的状态.每个节点都需要维护相同的数据库.此外节点"
"还将运行称为 EVM 的相同软件进行一些计算并更新状态路由，"
msgstr ""
"然后对状态路由取摘要来代表所有的状态.每个节点都需要维护相同的数据库.此外节点"
"还将运行称为 EVM 的相同软件进行一些计算并更新状态路由，"

#: src/zk-everything/zk-learning-miles/Lecture12:ZKEVM.md:18
msgid ""
"区块链也称为 world computer 这个词，因为任何人都可以使用它来运行任何接近去中"
"心化的程序，而运行在区块链之上的程序称为智能合约，因此 evm 将从节点计算机加"
"载 merkle 树叶子结点中的数据到 Storage 中重写这棵树并获得新的状态路由"
msgstr ""
"区块链也称为 world computer 这个词，因为任何人都可以使用它来运行任何接近去中"
"心化的程序，而运行在区块链之上的程序称为智能合约，因此 evm 将从节点计算机加"
"载 merkle 树叶子结点中的数据到 Storage 中重写这棵树并获得新的状态路由"

#: src/zk-everything/zk-learning-miles/Lecture12:ZKEVM.md:20
msgid "发送交易:"
msgstr "发送交易:"

#: src/zk-everything/zk-learning-miles/Lecture12:ZKEVM.md:22
msgid "![](static/T1SZbWqwYoNkprx4RsocTq8Pnwh.png)"
msgstr "![](static/T1SZbWqwYoNkprx4RsocTq8Pnwh.png)"

#: src/zk-everything/zk-learning-miles/Lecture12:ZKEVM.md:24
msgid ""
"用户发送交易至区块链中,交易会在 p2p 网络中传播,通过共识算法在每个时隙中选择一"
"个提案， 这个提案将把它收到的许多交易打包到一个块中，同时以交易作为输入运行 "
"evm 并更新状态路由，然后出块.在看到这个块被提交后，网络中的其他节点将下载这个"
"块并重新通过 EVM 执行该块内的交易，就状态路由达成共识.这样始终维护相同的数据"
"库."
msgstr ""
"用户发送交易至区块链中,交易会在 p2p 网络中传播,通过共识算法在每个时隙中选择一"
"个提案， 这个提案将把它收到的许多交易打包到一个块中，同时以交易作为输入运行 "
"evm 并更新状态路由，然后出块.在看到这个块被提交后，网络中的其他节点将下载这个"
"块并重新通过 EVM 执行该块内的交易，就状态路由达成共识.这样始终维护相同的数据"
"库."

#: src/zk-everything/zk-learning-miles/Lecture12:ZKEVM.md:26
msgid "Layer1 特点:"
msgstr "Layer1 特点:"

#: src/zk-everything/zk-learning-miles/Lecture12:ZKEVM.md:28
msgid "优点"
msgstr "优点"

#: src/zk-everything/zk-learning-miles/Lecture12:ZKEVM.md:30
msgid "**Secure**:交易将由不同的节点执行多次 **Decentralized**"
msgstr "**Secure**:交易将由不同的节点执行多次 **Decentralized**"

#: src/zk-everything/zk-learning-miles/Lecture12:ZKEVM.md:32
msgid "缺点"
msgstr "缺点"

#: src/zk-everything/zk-learning-miles/Lecture12:ZKEVM.md:34
msgid "**Expensive  Slow**"
msgstr "**Expensive  Slow**"

#: src/zk-everything/zk-learning-miles/Lecture12:ZKEVM.md:36
msgid "zk-rollup"
msgstr "zk-rollup"

#: src/zk-everything/zk-learning-miles/Lecture12:ZKEVM.md:38
msgid "![](static/O49NbxyOToIM0RxWZHjct6JXnPf.png)"
msgstr "![](static/O49NbxyOToIM0RxWZHjct6JXnPf.png)"

#: src/zk-everything/zk-learning-miles/Lecture12:ZKEVM.md:40
msgid "ZK-rollup 是一种扩展解决方案，用于解决 EVM 的可扩展性问题."
msgstr "ZK-rollup 是一种扩展解决方案，用于解决 EVM 的可扩展性问题."

#: src/zk-everything/zk-learning-miles/Lecture12:ZKEVM.md:42
msgid ""
"ZK-rollup 不像 Layer1 广播所有交易，以及拥塞且昂贵的 P2P 网络,其有一个单独的 "
"Layer2 网络层，可以更加中心化."
msgstr ""
"ZK-rollup 不像 Layer1 广播所有交易，以及拥塞且昂贵的 P2P 网络,其有一个单独的 "
"Layer2 网络层，可以更加中心化."

#: src/zk-everything/zk-learning-miles/Lecture12:ZKEVM.md:44
msgid ""
"zk-Rollup 的基本思想是将大量交易聚合到一个 Rollup 块中，并为该链下的块生成 `"
"简洁,公开,可验证` 的证明。然后 Layer 1 上的智能合约只需要验证证明并**直接应用"
"**更新的状态，而无需重新执行那些交易。这可以帮助节省一个数量级的 gas 费用，以"
"及提升一个数量级别的网络吞吐.因为验证证明比重新执行计算便宜得多。另一个节省来"
"自数据压缩（即只保留最小的链上数据用于验证)."
msgstr ""
"zk-Rollup 的基本思想是将大量交易聚合到一个 Rollup 块中，并为该链下的块生成 `"
"简洁,公开,可验证` 的证明。然后 Layer 1 上的智能合约只需要验证证明并**直接应用"
"**更新的状态，而无需重新执行那些交易。这可以帮助节省一个数量级的 gas 费用，以"
"及提升一个数量级别的网络吞吐.因为验证证明比重新执行计算便宜得多。另一个节省来"
"自数据压缩（即只保留最小的链上数据用于验证)."

#: src/zk-everything/zk-learning-miles/Lecture12:ZKEVM.md:46
msgid "这样做与原来的安全性是\\*\\*等效的.\\*\\*背后的原理依赖于 zk."
msgstr "这样做与原来的安全性是\\*\\*等效的.\\*\\*背后的原理依赖于 zk."

#: src/zk-everything/zk-learning-miles/Lecture12:ZKEVM.md:48
msgid "![](static/TezmbkTqfo1TGhxCznDcAzABn3c.png)"
msgstr "![](static/TezmbkTqfo1TGhxCznDcAzABn3c.png)"

#: src/zk-everything/zk-learning-miles/Lecture12:ZKEVM.md:50
msgid "**编写困难**"
msgstr "**编写困难**"

#: src/zk-everything/zk-learning-miles/Lecture12:ZKEVM.md:52
msgid ""
"但是构造这样一个 Prover 是困难的,对于某些计算的证明，首先需要以电路形式编写所"
"有程序逻辑，"
msgstr ""
"但是构造这样一个 Prover 是困难的,对于某些计算的证明，首先需要以电路形式编写所"
"有程序逻辑，"

#: src/zk-everything/zk-learning-miles/Lecture12:ZKEVM.md:54
msgid ""
"也就是用加法乘法和类似的非常底层的方法断言.电路强调非常复杂的逻辑，包括 for "
"Loop ,if else 和所有程序.语法非常复杂.此外 `一个电路对应一个程序`，这意味着对"
"于不同的应用程序开发人员，需要实现自己的电路.电路也需要通过一个非常严格的安全"
"测试审计，这需要很长的开发时间."
msgstr ""
"也就是用加法乘法和类似的非常底层的方法断言.电路强调非常复杂的逻辑，包括 for "
"Loop ,if else 和所有程序.语法非常复杂.此外 `一个电路对应一个程序`，这意味着对"
"于不同的应用程序开发人员，需要实现自己的电路.电路也需要通过一个非常严格的安全"
"测试审计，这需要很长的开发时间."

#: src/zk-everything/zk-learning-miles/Lecture12:ZKEVM.md:56
msgid ""
"**兼容** `:` 比如一个 Prover 无法同时包含来自 uniswap 与 optiswap 上的交易."
msgstr ""
"**兼容** `:` 比如一个 Prover 无法同时包含来自 uniswap 与 optiswap 上的交易."

#: src/zk-everything/zk-learning-miles/Lecture12:ZKEVM.md:58
msgid "所以需要 zkevm."
msgstr "所以需要 zkevm."

#: src/zk-everything/zk-learning-miles/Lecture12:ZKEVM.md:60
msgid "zkevm 概念"
msgstr "zkevm 概念"

#: src/zk-everything/zk-learning-miles/Lecture12:ZKEVM.md:62
msgid "![](static/Vzz2b87ldouf3yxIRCtcbKWqn3g.png)"
msgstr "![](static/Vzz2b87ldouf3yxIRCtcbKWqn3g.png)"

#: src/zk-everything/zk-learning-miles/Lecture12:ZKEVM.md:64
msgid ""
"zkEVM 是一种虚拟机，通过 zk 证明计算和现有以太坊基础设施**兼容**的方式执行智"
"能合约交易。这使它们能够成为零知识汇总、第 2 层扩展解决方案的一部分，从而提高"
"交易吞吐量，同时降低成本"
msgstr ""
"zkEVM 是一种虚拟机，通过 zk 证明计算和现有以太坊基础设施**兼容**的方式执行智"
"能合约交易。这使它们能够成为零知识汇总、第 2 层扩展解决方案的一部分，从而提高"
"交易吞吐量，同时降低成本"

#: src/zk-everything/zk-learning-miles/Lecture12:ZKEVM.md:66
msgid ""
"如果第 2 层可以运行为以太坊环境创建的程序而无需修改底层智能合约逻辑，则该 "
"Layer2 是 EVM 兼容的。这使得第 2 层与现有的以太坊智能合约模式、代币标准和工具"
"兼容。与 EVM 兼容对于这些第 2 层的广泛采用非常重要，因为它使熟悉以太坊 "
"Solidity 编程语言的开发人员能够使用他们习惯的的工具构建高度可扩展的应用程序。"
msgstr ""
"如果第 2 层可以运行为以太坊环境创建的程序而无需修改底层智能合约逻辑，则该 "
"Layer2 是 EVM 兼容的。这使得第 2 层与现有的以太坊智能合约模式、代币标准和工具"
"兼容。与 EVM 兼容对于这些第 2 层的广泛采用非常重要，因为它使熟悉以太坊 "
"Solidity 编程语言的开发人员能够使用他们习惯的的工具构建高度可扩展的应用程序。"

#: src/zk-everything/zk-learning-miles/Lecture12:ZKEVM.md:68
msgid "**但是** zkevm 很难编写,有以下几点原因"
msgstr "**但是** zkevm 很难编写,有以下几点原因"

#: src/zk-everything/zk-learning-miles/Lecture12:ZKEVM.md:70
msgid ""
"\\*\\*第一，****EVM**** 对椭圆曲线的支持有限。\\*\\*目前，EVM 仅支持 BN254 配"
"对。由于不直接支持循环椭圆曲线，因此很难进行递归证明。在此之下也很难使用其他"
"专用协议。验证算法必须是 EVM 友好的。"
msgstr ""
"\\*\\*第一，****EVM**** 对椭圆曲线的支持有限。\\*\\*目前，EVM 仅支持 BN254 配"
"对。由于不直接支持循环椭圆曲线，因此很难进行递归证明。在此之下也很难使用其他"
"专用协议。验证算法必须是 EVM 友好的。"

#: src/zk-everything/zk-learning-miles/Lecture12:ZKEVM.md:71
msgid ""
"\\*\\*第二，****EVM****字节为 256 位。\\*\\*EVM 在 256 位整数上运行（就像大多"
"数正常 VM 在 32-64 位整数上运行），而 zk 证明“天生地”大多在素数上工作。在电路"
"内部进行“不匹配的字段计算”需要范围证明，这将在每个 EVM 操作中增加约 100 个约"
"束。这将使 EVM 电路大小扩大两个数量级。"
msgstr ""
"\\*\\*第二，****EVM****字节为 256 位。\\*\\*EVM 在 256 位整数上运行（就像大多"
"数正常 VM 在 32-64 位整数上运行），而 zk 证明“天生地”大多在素数上工作。在电路"
"内部进行“不匹配的字段计算”需要范围证明，这将在每个 EVM 操作中增加约 100 个约"
"束。这将使 EVM 电路大小扩大两个数量级。"

#: src/zk-everything/zk-learning-miles/Lecture12:ZKEVM.md:72
msgid ""
"\\*\\*第三，****EVM**** 有很多特殊的****操作码****。\\*\\*EVM 与传统 VM 不"
"同，它有许多特殊的操作码，例如 `CALL`。它也有与执行上下文和 gas 相关的错误类"
"型。这给电路设计带来了新的挑战。"
msgstr ""
"\\*\\*第三，****EVM**** 有很多特殊的****操作码****。\\*\\*EVM 与传统 VM 不"
"同，它有许多特殊的操作码，例如 `CALL`。它也有与执行上下文和 gas 相关的错误类"
"型。这给电路设计带来了新的挑战。"

#: src/zk-everything/zk-learning-miles/Lecture12:ZKEVM.md:73
msgid ""
"\\*\\*第四，****EVM**** 是基于堆栈的****虚拟机****。\\*\\*SyncVM (zksync) 和 "
"Cario (starkware) 的架构在基于寄存器的模型中定义了自己的中间表示(IR,"
"Intermediate Representation)/代数中间表示(AIR, Algebraic Intermediate "
"Representation)。他们构建了一个专门的编译器，将智能合约代码编译成一新的 zk 友"
"好 IR。他们的方案是语言兼容而不是原生 EVM 兼容。基于堆栈的模型和直接支持原生"
"链工具更难证明。"
msgstr ""
"\\*\\*第四，****EVM**** 是基于堆栈的****虚拟机****。\\*\\*SyncVM (zksync) 和 "
"Cario (starkware) 的架构在基于寄存器的模型中定义了自己的中间表示(IR,"
"Intermediate Representation)/代数中间表示(AIR, Algebraic Intermediate "
"Representation)。他们构建了一个专门的编译器，将智能合约代码编译成一新的 zk 友"
"好 IR。他们的方案是语言兼容而不是原生 EVM 兼容。基于堆栈的模型和直接支持原生"
"链工具更难证明。"

#: src/zk-everything/zk-learning-miles/Lecture12:ZKEVM.md:74
msgid ""
"\\*\\*第五，以太坊存储层带来巨大开销。\\*\\*以太坊存储层高度依赖 Keccak 和巨"
"大的 MPT，它们都不是 zk 友好的，并且需要巨大的证明开销。例如，Keccak 哈希比电"
"路中的 Poseidon 哈希大 1000 倍。但是，如果将 Keccak 替换为另一个哈希算法，则"
"会对现有的以太坊基础设施造成一些兼容性问题。"
msgstr ""
"\\*\\*第五，以太坊存储层带来巨大开销。\\*\\*以太坊存储层高度依赖 Keccak 和巨"
"大的 MPT，它们都不是 zk 友好的，并且需要巨大的证明开销。例如，Keccak 哈希比电"
"路中的 Poseidon 哈希大 1000 倍。但是，如果将 Keccak 替换为另一个哈希算法，则"
"会对现有的以太坊基础设施造成一些兼容性问题。"

#: src/zk-everything/zk-learning-miles/Lecture12:ZKEVM.md:75
msgid ""
"\\*\\*第六，基于机器的证明需要巨大的开销。\\*\\*即使能够妥善处理上述所有问"
"题，仍然需要找到一种有效的方法将它们组合在一起以获得一个完整的 EVM 电路。正如"
"我们上一节中所提到的，即使像 `add` 这样简单的操作码也需要整个 EVM 电路的开销"
msgstr ""
"\\*\\*第六，基于机器的证明需要巨大的开销。\\*\\*即使能够妥善处理上述所有问"
"题，仍然需要找到一种有效的方法将它们组合在一起以获得一个完整的 EVM 电路。正如"
"我们上一节中所提到的，即使像 `add` 这样简单的操作码也需要整个 EVM 电路的开销"

#: src/zk-everything/zk-learning-miles/Lecture12:ZKEVM.md:77
msgid "以下技术的发展使得 zkevm 得以落地"
msgstr "以下技术的发展使得 zkevm 得以落地"

#: src/zk-everything/zk-learning-miles/Lecture12:ZKEVM.md:79
msgid ""
"\\*\\*多项式承诺的使用。\\*\\*在过去的几年里，大多数简洁零知识证明协议都坚持"
"使用 R1CS，将 PCP 查询编码在特定于应用程序的可信设置中。电路大小通常会爆炸，"
"且不能进行许多自定义的优化，因为每个约束的项数需要为 2（双线性配对只允许指数"
"中的一次乘法）。使用多项式承诺方案，可以通过通用设置甚至透明设置将约束提升到"
"任何项数。这为后端的选择提供了极大的灵活性。"
msgstr ""
"\\*\\*多项式承诺的使用。\\*\\*在过去的几年里，大多数简洁零知识证明协议都坚持"
"使用 R1CS，将 PCP 查询编码在特定于应用程序的可信设置中。电路大小通常会爆炸，"
"且不能进行许多自定义的优化，因为每个约束的项数需要为 2（双线性配对只允许指数"
"中的一次乘法）。使用多项式承诺方案，可以通过通用设置甚至透明设置将约束提升到"
"任何项数。这为后端的选择提供了极大的灵活性。"

#: src/zk-everything/zk-learning-miles/Lecture12:ZKEVM.md:80
msgid ""
"\\*\\*查找表参数和自定义配置的出现。\\*\\*另一个强大的优化来自查找表的使用。"
"该优化首先在 Arya 中提出，然后 Plookup 中进一步升级。这可以为 zk 不友好的原语"
"（即，AND、XOR 等按位运算）节省很多成本。自定义配置可以高效地进行高项数的约"
"束。TurboPlonk 和 UltraPlonk 定义了优雅的程序语法，以便更轻松地使用查找表和定"
"制配置。这对于减少 EVM 电路的开销非常有帮助。"
msgstr ""
"\\*\\*查找表参数和自定义配置的出现。\\*\\*另一个强大的优化来自查找表的使用。"
"该优化首先在 Arya 中提出，然后 Plookup 中进一步升级。这可以为 zk 不友好的原语"
"（即，AND、XOR 等按位运算）节省很多成本。自定义配置可以高效地进行高项数的约"
"束。TurboPlonk 和 UltraPlonk 定义了优雅的程序语法，以便更轻松地使用查找表和定"
"制配置。这对于减少 EVM 电路的开销非常有帮助。"

#: src/zk-everything/zk-learning-miles/Lecture12:ZKEVM.md:81
msgid ""
"\\*\\*递归\\*\\*\\*\\*证明越来越可行。\\*\\*递归证明在过去需要巨大的开销，因"
"为它依赖于特殊的配对友好的循环椭圆曲线,这引入了很大的计算开销。然而，更多的技"
"术在不牺牲效率的情况下使这成为可能。例如，Halo 可以避免对配对友好曲线的需要，"
"并使用特殊的内积参数来摊销递归成本。Aztec 表明可以直接对现有协议进行证明聚合"
"（查找表可以减少非原生字段操作的开销，从而可以使验证电路更小）。它可以极大地"
"提高支持的电路大小的可扩展性。"
msgstr ""
"\\*\\*递归\\*\\*\\*\\*证明越来越可行。\\*\\*递归证明在过去需要巨大的开销，因"
"为它依赖于特殊的配对友好的循环椭圆曲线,这引入了很大的计算开销。然而，更多的技"
"术在不牺牲效率的情况下使这成为可能。例如，Halo 可以避免对配对友好曲线的需要，"
"并使用特殊的内积参数来摊销递归成本。Aztec 表明可以直接对现有协议进行证明聚合"
"（查找表可以减少非原生字段操作的开销，从而可以使验证电路更小）。它可以极大地"
"提高支持的电路大小的可扩展性。"

#: src/zk-everything/zk-learning-miles/Lecture12:ZKEVM.md:82
msgid ""
"**硬件加速使证明更加高效。Scroll** 为证明者制造了最快的 GPU 和 ASIC/FPGA 加速"
"器。关于 ASIC 证明者的论文，今年已经被最大的计算机会议（ISCA）收录。GPU 证明"
"器比 Filecoin 的实现快大约 5 到 10 倍。这可以大大提高证明者的计算效率。"
msgstr ""
"**硬件加速使证明更加高效。Scroll** 为证明者制造了最快的 GPU 和 ASIC/FPGA 加速"
"器。关于 ASIC 证明者的论文，今年已经被最大的计算机会议（ISCA）收录。GPU 证明"
"器比 Filecoin 的实现快大约 5 到 10 倍。这可以大大提高证明者的计算效率。"

#: src/zk-everything/zk-learning-miles/Lecture12:ZKEVM.md:84
msgid "ZKEVM 分类"
msgstr "ZKEVM 分类"

#: src/zk-everything/zk-learning-miles/Lecture12:ZKEVM.md:86
msgid "![](static/R0tdb0fssoyKlqxLuCScOYGfnsg.png)"
msgstr "![](static/R0tdb0fssoyKlqxLuCScOYGfnsg.png)"

#: src/zk-everything/zk-learning-miles/Lecture12:ZKEVM.md:88
msgid ""
"Language level:采用高级语言（例如 Solidity 或 Vyper）编写的代码，并将其编译为"
"旨在支持零知识证明的语言。本质上，它们相当于高级语言，但不是实际的 EVM。尽管"
"合约可能不具有相同的地址，但这可以更快地生成证明并降低成本 ` Starknet`"
msgstr ""
"Language level:采用高级语言（例如 Solidity 或 Vyper）编写的代码，并将其编译为"
"旨在支持零知识证明的语言。本质上，它们相当于高级语言，但不是实际的 EVM。尽管"
"合约可能不具有相同的地址，但这可以更快地生成证明并降低成本 ` Starknet`"

#: src/zk-everything/zk-learning-miles/Lecture12:ZKEVM.md:89
msgid ""
"Bytecode level:牺牲了一些 EVM 功能，以实现更轻松的应用程序开发和证明生成，例"
"如对预编译、VM 内存、堆栈以及智能合约代码处理方式的更改。虽然大多数以太坊应用"
"程序都可以在这种环境中运行，但有些应用程序可能需要重写 `Scroll Polygen`"
msgstr ""
"Bytecode level:牺牲了一些 EVM 功能，以实现更轻松的应用程序开发和证明生成，例"
"如对预编译、VM 内存、堆栈以及智能合约代码处理方式的更改。虽然大多数以太坊应用"
"程序都可以在这种环境中运行，但有些应用程序可能需要重写 `Scroll Polygen`"

#: src/zk-everything/zk-learning-miles/Lecture12:ZKEVM.md:90
msgid ""
"Consensus level:不会改变当前以太坊系统的任何部分，从而更容易生成零知识证明。"
"这使得它们与所有以太坊本机应用程序完全兼容，并允许重复使用区块浏览器和执行客"
"户端等工具。然而，以太坊协议的某些部分需要大量计算来生成零知识证明，导致 "
"zkEVM 的证明时间较长"
msgstr ""
"Consensus level:不会改变当前以太坊系统的任何部分，从而更容易生成零知识证明。"
"这使得它们与所有以太坊本机应用程序完全兼容，并允许重复使用区块浏览器和执行客"
"户端等工具。然而，以太坊协议的某些部分需要大量计算来生成零知识证明，导致 "
"zkEVM 的证明时间较长"

#: src/zk-everything/zk-learning-miles/Lecture12:ZKEVM.md:92
msgid ""
"[也可以参考 V 神的 4 种分类 ](https://vitalik.eth.limo/general/2022/08/04/"
"zkevm.html)"
msgstr ""
"[也可以参考 V 神的 4 种分类 ](https://vitalik.eth.limo/general/2022/08/04/"
"zkevm.html)"

#: src/zk-everything/zk-learning-miles/Lecture12:ZKEVM.md:94
msgid "![](static/HaNmbcORaoHiuNxJBE6cJlJ1nPh.png)"
msgstr "![](static/HaNmbcORaoHiuNxJBE6cJlJ1nPh.png)"

#: src/zk-everything/zk-learning-miles/Lecture12:ZKEVM.md:96
msgid "Build a zkEVM from scratch"
msgstr "Build a zkEVM from scratch"

#: src/zk-everything/zk-learning-miles/Lecture12:ZKEVM.md:98
msgid "Interesting research problems"
msgstr "Interesting research problems"

#: src/zk-everything/zk-learning-miles/Lecture12:ZKEVM.md:100
msgid "Other applications using zkEV"
msgstr "Other applications using zkEV"

#: src/zk-everything/zk-learning-miles/Lecture16:Hardware acceleration.md:4
msgid "Lecture 16: Hardware Acceleration of ZKP"
msgstr "Lecture 16: Hardware Acceleration of ZKP"

#: src/zk-everything/zk-learning-miles/Lecture16:Hardware acceleration.md:6
msgid "1.Goals of HW Acceleration"
msgstr "1.Goals of HW Acceleration"

#: src/zk-everything/zk-learning-miles/Lecture16:Hardware acceleration.md:8
msgid "![image-20230515111025421](./pic/image-20230515111025421.png)"
msgstr "![image-20230515111025421](./pic/image-20230515111025421.png)"

#: src/zk-everything/zk-learning-miles/Lecture16:Hardware acceleration.md:10
msgid "吞吐量，即每单位时间执行尽可能多的操作"
msgstr "吞吐量，即每单位时间执行尽可能多的操作"

#: src/zk-everything/zk-learning-miles/Lecture16:Hardware acceleration.md:11
msgid "成本"
msgstr "成本"

#: src/zk-everything/zk-learning-miles/Lecture16:Hardware acceleration.md:12
msgid ""
"当优化成本时，目标是降低执行某些操作所涉及的资本和运营费用。对于比特币挖掘机"
"来说，这意味着最大化每美元购买价值的哈希数量，同时最小化每个哈希的能源消耗，"
"从而降低运营成本。"
msgstr ""
"当优化成本时，目标是降低执行某些操作所涉及的资本和运营费用。对于比特币挖掘机"
"来说，这意味着最大化每美元购买价值的哈希数量，同时最小化每个哈希的能源消耗，"
"从而降低运营成本。"

#: src/zk-everything/zk-learning-miles/Lecture16:Hardware acceleration.md:13
msgid "延迟：减少完成单个操作的时间"
msgstr "延迟：减少完成单个操作的时间"

#: src/zk-everything/zk-learning-miles/Lecture16:Hardware acceleration.md:14
msgid ""
"在高频交易等领域，延迟是一个重要的考虑因素。 低延迟的证明生成可以促进更好的用"
"户体验或更快的确定用例，比如ZK Bridges。"
msgstr ""
"在高频交易等领域，延迟是一个重要的考虑因素。 低延迟的证明生成可以促进更好的用"
"户体验或更快的确定用例，比如ZK Bridges。"

#: src/zk-everything/zk-learning-miles/Lecture16:Hardware acceleration.md:16
msgid "2.What needs accelerated"
msgstr "2.What needs accelerated"

#: src/zk-everything/zk-learning-miles/Lecture16:Hardware acceleration.md:18
msgid "![image-20230515112018032](./pic/image-20230515112018032.png)"
msgstr "![image-20230515112018032](./pic/image-20230515112018032.png)"

#: src/zk-everything/zk-learning-miles/Lecture16:Hardware acceleration.md:20
msgid ""
"首先要注意的是每个证明系统及其相关实现都是利用不同的密码原语和不同的软件库构"
"建的，在某一个证明系统中计算成本最高的部分，在另外不同的证明系统实现或用例中"
"可能相对次要或可能根本不会出现，"
msgstr ""
"首先要注意的是每个证明系统及其相关实现都是利用不同的密码原语和不同的软件库构"
"建的，在某一个证明系统中计算成本最高的部分，在另外不同的证明系统实现或用例中"
"可能相对次要或可能根本不会出现，"

#: src/zk-everything/zk-learning-miles/Lecture16:Hardware acceleration.md:22
msgid "其次不同的证明系统中，存在三种计算量大的操作，包括MSM，NTT，算术哈希。"
msgstr "其次不同的证明系统中，存在三种计算量大的操作，包括MSM，NTT，算术哈希。"

#: src/zk-everything/zk-learning-miles/Lecture16:Hardware acceleration.md:24
msgid "3.MSM：多标量乘法"
msgstr "3.MSM：多标量乘法"

#: src/zk-everything/zk-learning-miles/Lecture16:Hardware acceleration.md:26
msgid "![image-20230515121131312](./pic/image-20230515121131312.png)"
msgstr "![image-20230515121131312](./pic/image-20230515121131312.png)"

#: src/zk-everything/zk-learning-miles/Lecture16:Hardware acceleration.md:28
msgid ""
"MSM 是一种用于计算多个标量乘法之和的算法，或者它可以被认为是椭圆曲线点和标量"
"的点积。"
msgstr ""
"MSM 是一种用于计算多个标量乘法之和的算法，或者它可以被认为是椭圆曲线点和标量"
"的点积。"

#: src/zk-everything/zk-learning-miles/Lecture16:Hardware acceleration.md:30
msgid ""
"由于问题的性质，每个标量乘法或一组标量乘法都可以很容易地并行化，并且可以由不"
"同的硬件引擎拆分和操作然后汇集并在最后累积，有许多优化可用于减少计算 MSM 的计"
"算量，用于更大尺寸的 MSM 算法，如pipepenger。"
msgstr ""
"由于问题的性质，每个标量乘法或一组标量乘法都可以很容易地并行化，并且可以由不"
"同的硬件引擎拆分和操作然后汇集并在最后累积，有许多优化可用于减少计算 MSM 的计"
"算量，用于更大尺寸的 MSM 算法，如pipepenger。"

#: src/zk-everything/zk-learning-miles/Lecture16:Hardware acceleration.md:32
msgid ""
"![image-20230515141320803](./pic/image-20230515141320803.png)pippengers，将计"
"算成本从线性减少到O(n/logn)，除了使用改进的算法之外， 还有替代的点表示方法"
"（**Jacobian**）和曲线表示方法（**Edwards**)可用于减少每个曲线上的域元素的操"
"作总数"
msgstr ""
"![image-20230515141320803](./pic/image-20230515141320803.png)pippengers，将计"
"算成本从线性减少到O(n/logn)，除了使用改进的算法之外， 还有替代的点表示方法"
"（**Jacobian**）和曲线表示方法（**Edwards**)可用于减少每个曲线上的域元素的操"
"作总数"

#: src/zk-everything/zk-learning-miles/Lecture16:Hardware acceleration.md:35
msgid ""
"![image-20230515142135825](./pic/image-20230515142135825.png)通过将它们从像 "
"CPU 这样的主机设备转移到更并行的架构，如 GPU，可以提高计算效率。然而，当将操"
"作从主机设备移动到外围设备时，必须记住一件事情，即数据也必须被移动以进行计"
"算。在多标量乘法的情况下，标量和点必须从主机移动到加速器上进行计算。这两个设"
"备之间可用的通信带宽通常会限制加速器的最大性能。"
msgstr ""
"![image-20230515142135825](./pic/image-20230515142135825.png)通过将它们从像 "
"CPU 这样的主机设备转移到更并行的架构，如 GPU，可以提高计算效率。然而，当将操"
"作从主机设备移动到外围设备时，必须记住一件事情，即数据也必须被移动以进行计"
"算。在多标量乘法的情况下，标量和点必须从主机移动到加速器上进行计算。这两个设"
"备之间可用的通信带宽通常会限制加速器的最大性能。"

#: src/zk-everything/zk-learning-miles/Lecture16:Hardware acceleration.md:37
msgid "4.NTT"
msgstr "4.NTT"

#: src/zk-everything/zk-learning-miles/Lecture16:Hardware acceleration.md:39
msgid "![image-20230515143228424](./pic/image-20230515143228424.png)"
msgstr "![image-20230515143228424](./pic/image-20230515143228424.png)"

#: src/zk-everything/zk-learning-miles/Lecture16:Hardware acceleration.md:41
msgid ""
"NTT 是一种用于将两个多项式相乘的算法 NTT 类似于其他算法，例如 fft 或 DFT，但"
"它的独特之处在于`它对有限域元素进行运算`。"
msgstr ""
"NTT 是一种用于将两个多项式相乘的算法 NTT 类似于其他算法，例如 fft 或 DFT，但"
"它的独特之处在于`它对有限域元素进行运算`。"

#: src/zk-everything/zk-learning-miles/Lecture16:Hardware acceleration.md:44
msgid ""
"实现 NTT 的常用算法之一是Cooley-Tukey算法，该算法将多项式乘法的复杂性从O"
"（n^2）降低到O（nlog n）阶"
msgstr ""
"实现 NTT 的常用算法之一是Cooley-Tukey算法，该算法将多项式乘法的复杂性从O"
"（n^2）降低到O（nlog n）阶"

#: src/zk-everything/zk-learning-miles/Lecture16:Hardware acceleration.md:46
msgid ""
"![image-20230515143651529](./pic/image-20230515143651529.png) 类似于 MSM 在主"
"机设备上执行 NTT 时，标量也必须再次移至加速器 通信带宽将限制加速器的最大可能"
"性能，但是 `NTT不容易并行化`。 每个元素必须在算法操作期间与各种其他元素交互，"
"这意味着问题不能轻易进一步划分，因为这些元素与每个元素交互，它们必须保存在内"
"存中并在强加`高内存要求`的情况下运行"
msgstr ""
"![image-20230515143651529](./pic/image-20230515143651529.png) 类似于 MSM 在主"
"机设备上执行 NTT 时，标量也必须再次移至加速器 通信带宽将限制加速器的最大可能"
"性能，但是 `NTT不容易并行化`。 每个元素必须在算法操作期间与各种其他元素交互，"
"这意味着问题不能轻易进一步划分，因为这些元素与每个元素交互，它们必须保存在内"
"存中并在强加`高内存要求`的情况下运行"

#: src/zk-everything/zk-learning-miles/Lecture16:Hardware acceleration.md:50
msgid "5.算术hash"
msgstr "5.算术hash"

#: src/zk-everything/zk-learning-miles/Lecture16:Hardware acceleration.md:52
msgid "![image-20230515144248585](./pic/image-20230515144248585.png)"
msgstr "![image-20230515144248585](./pic/image-20230515144248585.png)"

#: src/zk-everything/zk-learning-miles/Lecture16:Hardware acceleration.md:54
msgid "许多零知识证明用例中的算术哈希它要求"
msgstr "许多零知识证明用例中的算术哈希它要求"

#: src/zk-everything/zk-learning-miles/Lecture16:Hardware acceleration.md:56
msgid ""
"证明哈希原像的知识或利用哈希 ，Merkle  roots和 Merkel 包含路径有效地表示电路"
"外部的数据。 算术哈希函数（如 Poseidon，rescue Prime）通常用于传统散列函数"
"（如 `ShA系列`哈希函数）。"
msgstr ""
"证明哈希原像的知识或利用哈希 ，Merkle  roots和 Merkel 包含路径有效地表示电路"
"外部的数据。 算术哈希函数（如 Poseidon，rescue Prime）通常用于传统散列函数"
"（如 `ShA系列`哈希函数）。"

#: src/zk-everything/zk-learning-miles/Lecture16:Hardware acceleration.md:59
msgid ""
"选择这些哈希函数是因为虽然本身它们的计算成本更高，`但在电路内部使用时，部署效"
"率会更高`，因为这些哈希函数的constraints数量会更少。 在实例化哈希函数时可以选"
"择许多算法参数，这可能会影响计算成本。其中一些参数包括`有限域大小，有限域选择"
"的素数大小，MDS 矩阵结构`等。"
msgstr ""
"选择这些哈希函数是因为虽然本身它们的计算成本更高，`但在电路内部使用时，部署效"
"率会更高`，因为这些哈希函数的constraints数量会更少。 在实例化哈希函数时可以选"
"择许多算法参数，这可能会影响计算成本。其中一些参数包括`有限域大小，有限域选择"
"的素数大小，MDS 矩阵结构`等。"

#: src/zk-everything/zk-learning-miles/Lecture16:Hardware acceleration.md:62
msgid ""
"算术哈希原语的有效实现主要由`模乘法`驱动，证明生成中涉及的计算量大的操作通常`"
"因系统而异`。"
msgstr ""
"算术哈希原语的有效实现主要由`模乘法`驱动，证明生成中涉及的计算量大的操作通常`"
"因系统而异`。"

#: src/zk-everything/zk-learning-miles/Lecture16:Hardware acceleration.md:67
msgid ""
"这些操作取决于承诺方案，像`KZG`这样的承诺方案会导致在生成证明过程中 MSM 操作"
"会主导。"
msgstr ""
"这些操作取决于承诺方案，像`KZG`这样的承诺方案会导致在生成证明过程中 MSM 操作"
"会主导。"

#: src/zk-everything/zk-learning-miles/Lecture16:Hardware acceleration.md:69
msgid "而当使用`FRI`承诺方案时，证明生成过程通常由 NTT 主导。"
msgstr "而当使用`FRI`承诺方案时，证明生成过程通常由 NTT 主导。"

#: src/zk-everything/zk-learning-miles/Lecture16:Hardware acceleration.md:71
msgid ""
"许多 snark 系统，例如groth16 和 Marlin由 MSM 主导，而 Starks 总体上通常由 "
"NTT 主导。"
msgstr ""
"许多 snark 系统，例如groth16 和 Marlin由 MSM 主导，而 Starks 总体上通常由 "
"NTT 主导。"

#: src/zk-everything/zk-learning-miles/Lecture16:Hardware acceleration.md:73
msgid ""
"但是这三个先前讨论的密码原语（MSM，NTT，算术哈希）在加速之前在所有证明系统中"
"占据了三分之二或更多的时间 这三个操作可能看起来截然不同，但它们实际上共享一些"
"基础组件。"
msgstr ""
"但是这三个先前讨论的密码原语（MSM，NTT，算术哈希）在加速之前在所有证明系统中"
"占据了三分之二或更多的时间 这三个操作可能看起来截然不同，但它们实际上共享一些"
"基础组件。"

#: src/zk-everything/zk-learning-miles/Lecture16:Hardware acceleration.md:76
msgid ""
"比如MSM and NTT的公共基础组件是域和曲线操作，这些操作的核心主要由域上的算术驱"
"动，特别是`模乘法`"
msgstr ""
"比如MSM and NTT的公共基础组件是域和曲线操作，这些操作的核心主要由域上的算术驱"
"动，特别是`模乘法`"

#: src/zk-everything/zk-learning-miles/Lecture16:Hardware acceleration.md:78
msgid ""
"因此虽然这些算法的结构彼此，大不相同，但它们是`基础的性能通常源自硬件执行模乘"
"法的能力` "
msgstr ""
"因此虽然这些算法的结构彼此，大不相同，但它们是`基础的性能通常源自硬件执行模乘"
"法的能力` "

#: src/zk-everything/zk-learning-miles/Lecture16:Hardware acceleration.md:80
msgid "![image-20230515150923268](./pic/image-20230515150923268.png)"
msgstr "![image-20230515150923268](./pic/image-20230515150923268.png)"

#: src/zk-everything/zk-learning-miles/Lecture16:Hardware acceleration.md:82
msgid ""
"需要注意的一件有趣的事情是数据大小与模乘法计算成本之间的关系， 当数据大小呈线"
"性增长,模乘法的计算成本相对于域的大小是N^2。"
msgstr ""
"需要注意的一件有趣的事情是数据大小与模乘法计算成本之间的关系， 当数据大小呈线"
"性增长,模乘法的计算成本相对于域的大小是N^2。"

#: src/zk-everything/zk-learning-miles/Lecture16:Hardware acceleration.md:85
msgid ""
"这意味着随着域大小的增长，加速器性能可能取决于操作的计算成本， 但对于较小的域"
"大小，加速器可能会受到主机可用带宽的瓶颈"
msgstr ""
"这意味着随着域大小的增长，加速器性能可能取决于操作的计算成本， 但对于较小的域"
"大小，加速器可能会受到主机可用带宽的瓶颈"

#: src/zk-everything/zk-learning-miles/Lecture16:Hardware acceleration.md:88
msgid ""
"这种二分法凸显了在开始设计硬件加速系统时理解证明系统的具体参数的重要性。"
msgstr ""
"这种二分法凸显了在开始设计硬件加速系统时理解证明系统的具体参数的重要性。"

#: src/zk-everything/zk-learning-miles/Lecture16:Hardware acceleration.md:90
msgid "它也凸显了设计能够服务于各种证明系统和参数的硬件加速设备或实现的难度。"
msgstr "它也凸显了设计能够服务于各种证明系统和参数的硬件加速设备或实现的难度。"

#: src/zk-everything/zk-learning-miles/Lecture16:Hardware acceleration.md:92
msgid "6.提高证明生成性能"
msgstr "6.提高证明生成性能"

#: src/zk-everything/zk-learning-miles/Lecture16:Hardware acceleration.md:94
msgid "![image-20230515153042757](./pic/image-20230515153042757.png)"
msgstr "![image-20230515153042757](./pic/image-20230515153042757.png)"

#: src/zk-everything/zk-learning-miles/Lecture16:Hardware acceleration.md:96
msgid ""
"改善证明生成性能的第一步是了解所使用的证明系统和用例的计算、内存和带宽成本，"
"通过将高级操作（如 MSM 和 NTT）分解为计算它们所需的模乘数量。通常可以在完成实"
"现之前估算证明系统在各种硬件平台上的性能。"
msgstr ""
"改善证明生成性能的第一步是了解所使用的证明系统和用例的计算、内存和带宽成本，"
"通过将高级操作（如 MSM 和 NTT）分解为计算它们所需的模乘数量。通常可以在完成实"
"现之前估算证明系统在各种硬件平台上的性能。"

#: src/zk-everything/zk-learning-miles/Lecture16:Hardware acceleration.md:99
msgid "然而，为了确保估计是准确的，有许多参数应该提前知道"
msgstr "然而，为了确保估计是准确的，有许多参数应该提前知道"

#: src/zk-everything/zk-learning-miles/Lecture16:Hardware acceleration.md:101
msgid ""
"`第一个最重要的参数`是证明系统中每个操作的数量， 例如一些证明 系统每个证明可"
"能需要四个或更多 msms 而其他系统可能只需要两个"
msgstr ""
"`第一个最重要的参数`是证明系统中每个操作的数量， 例如一些证明 系统每个证明可"
"能需要四个或更多 msms 而其他系统可能只需要两个"

#: src/zk-everything/zk-learning-miles/Lecture16:Hardware acceleration.md:105
msgid ""
"`第二个关键因素`是通常需要计算的操作的大小，不同的用例将导致每个操作的不同大"
"小 例如在某些用例中 MSM将只有 1000 的大小，而在另一个用例中，它可能是 1000 万"
"或更多"
msgstr ""
"`第二个关键因素`是通常需要计算的操作的大小，不同的用例将导致每个操作的不同大"
"小 例如在某些用例中 MSM将只有 1000 的大小，而在另一个用例中，它可能是 1000 万"
"或更多"

#: src/zk-everything/zk-learning-miles/Lecture16:Hardware acceleration.md:108
msgid ""
"`第三个因素`是确定的是域和曲线的大小，这将有助于告知每个模块化算术运算的带宽"
"和计算复杂性"
msgstr ""
"`第三个因素`是确定的是域和曲线的大小，这将有助于告知每个模块化算术运算的带宽"
"和计算复杂性"

#: src/zk-everything/zk-learning-miles/Lecture16:Hardware acceleration.md:110
msgid ""
"`此外`，点的表述形式（Affine or Jacobian），模运算等等 `最后`还有各种其他较小"
"的因素可能有助于证明系统的性能 一旦所有这些参数都确定了，执行证明或证明生成过"
"程所需的模乘次数可以很容易地计算出来，有了这个数字，就可以  与给定硬件平台的"
"模型性能进行比较，以便在了解需要执行的计算的情况下得出性能估计或计算时间"
msgstr ""
"`此外`，点的表述形式（Affine or Jacobian），模运算等等 `最后`还有各种其他较小"
"的因素可能有助于证明系统的性能 一旦所有这些参数都确定了，执行证明或证明生成过"
"程所需的模乘次数可以很容易地计算出来，有了这个数字，就可以  与给定硬件平台的"
"模型性能进行比较，以便在了解需要执行的计算的情况下得出性能估计或计算时间"

#: src/zk-everything/zk-learning-miles/Lecture16:Hardware acceleration.md:115
msgid ""
"![image-20230515155501729](./pic/image-20230515155501729.png) 硬件加速的下一"
"步是为这些工作负载选择合适的硬件-主要由模乘法驱动"
msgstr ""
"![image-20230515155501729](./pic/image-20230515155501729.png) 硬件加速的下一"
"步是为这些工作负载选择合适的硬件-主要由模乘法驱动"

#: src/zk-everything/zk-learning-miles/Lecture16:Hardware acceleration.md:118
msgid "应该寻找可以快速且廉价地执行大量乘法的硬件平台"
msgstr "应该寻找可以快速且廉价地执行大量乘法的硬件平台"

#: src/zk-everything/zk-learning-miles/Lecture16:Hardware acceleration.md:120
msgid ""
"可通过查看平台上硬件乘法器以及每个乘法器可以执行的速度和频率来评估给定硬件平"
"台的估计性能"
msgstr ""
"可通过查看平台上硬件乘法器以及每个乘法器可以执行的速度和频率来评估给定硬件平"
"台的估计性能"

#: src/zk-everything/zk-learning-miles/Lecture16:Hardware acceleration.md:122
msgid "![image-20230515162532683](./pic/image-20230515162532683.png)"
msgstr "![image-20230515162532683](./pic/image-20230515162532683.png)"

#: src/zk-everything/zk-learning-miles/Lecture16:Hardware acceleration.md:124
msgid "上图是一个包含四个硬件平台的表格：桌面CPU、服务器 CPU、FPGA 和 GPU"
msgstr "上图是一个包含四个硬件平台的表格：桌面CPU、服务器 CPU、FPGA 和 GPU"

#: src/zk-everything/zk-learning-miles/Lecture16:Hardware acceleration.md:126
msgid "第一个平台：桌面 CPU"
msgstr "第一个平台：桌面 CPU"

#: src/zk-everything/zk-learning-miles/Lecture16:Hardware acceleration.md:127
msgid "包含八个内核，每个内核都有一个 64 x 64 位乘法器，工作频率为 5GHz"
msgstr "包含八个内核，每个内核都有一个 64 x 64 位乘法器，工作频率为 5GHz"

#: src/zk-everything/zk-learning-miles/Lecture16:Hardware acceleration.md:128
msgid ""
"此平台的乘法功率估计约为164 该数字的计算方法是将乘法器的数量、乘法器大小和频"
"率相乘，然后除以 1000"
msgstr ""
"此平台的乘法功率估计约为164 该数字的计算方法是将乘法器的数量、乘法器大小和频"
"率相乘，然后除以 1000"

#: src/zk-everything/zk-learning-miles/Lecture16:Hardware acceleration.md:129
msgid "第二个平台：服务器 CPU "
msgstr "第二个平台：服务器 CPU "

#: src/zk-everything/zk-learning-miles/Lecture16:Hardware acceleration.md:130
msgid ""
"包含96 个内核，每个内核都有一个Multiplier，但以较低的频率运行，这个平台有大"
"约 900 的Multi能力。是桌面处理器的五倍"
msgstr ""
"包含96 个内核，每个内核都有一个Multiplier，但以较低的频率运行，这个平台有大"
"约 900 的Multi能力。是桌面处理器的五倍"

#: src/zk-everything/zk-learning-miles/Lecture16:Hardware acceleration.md:131
msgid "第三个平台：FPGA"
msgstr "第三个平台：FPGA"

#: src/zk-everything/zk-learning-miles/Lecture16:Hardware acceleration.md:132
msgid ""
"与服务器上存在的 96 个相比，超过 6000个乘法器。虽然乘法器数量大约是服务器CPU"
"乘法器数量的 60 倍，但由于乘法器大小和频率的减少，乘法运算的功率小于服务器 "
"CPU 的两倍。"
msgstr ""
"与服务器上存在的 96 个相比，超过 6000个乘法器。虽然乘法器数量大约是服务器CPU"
"乘法器数量的 60 倍，但由于乘法器大小和频率的减少，乘法运算的功率小于服务器 "
"CPU 的两倍。"

#: src/zk-everything/zk-learning-miles/Lecture16:Hardware acceleration.md:133
msgid "第四个平台：GPU"
msgstr "第四个平台：GPU"

#: src/zk-everything/zk-learning-miles/Lecture16:Hardware acceleration.md:134
msgid ""
"大约5000个32\\*32位的乘法器，以 1.7 GHz 的频率运行，这产生了大约 9000乘法能力"
msgstr ""
"大约5000个32\\*32位的乘法器，以 1.7 GHz 的频率运行，这产生了大约 9000乘法能力"

#: src/zk-everything/zk-learning-miles/Lecture16:Hardware acceleration.md:135
msgid "相较于FPGA，拥有更大的乘法器大小和更高的工作频率，性能得到提高"
msgstr "相较于FPGA，拥有更大的乘法器大小和更高的工作频率，性能得到提高"

#: src/zk-everything/zk-learning-miles/Lecture16:Hardware acceleration.md:137
msgid ""
"关于这些底层硬件架构及其对模块性能的影响，强烈推荐Simon puffer 几年前在斯坦福"
"区块链会议上的演讲，它可以在 YouTube 上找到 "
msgstr ""
"关于这些底层硬件架构及其对模块性能的影响，强烈推荐Simon puffer 几年前在斯坦福"
"区块链会议上的演讲，它可以在 YouTube 上找到 "

#: src/zk-everything/zk-learning-miles/Lecture16:Hardware acceleration.md:140
msgid "这些分析仅突出硬件平台的基础功能，"
msgstr "这些分析仅突出硬件平台的基础功能，"

#: src/zk-everything/zk-learning-miles/Lecture16:Hardware acceleration.md:143
msgid "为了实现提高性能并达到硬件加速的目标，通常还必须考虑其他因素。"
msgstr "为了实现提高性能并达到硬件加速的目标，通常还必须考虑其他因素。"

#: src/zk-everything/zk-learning-miles/Lecture16:Hardware acceleration.md:145
msgid "包括实现理论性能的能力、部署的便利性、运营成本、esa编程和许多其他因素"
msgstr "包括实现理论性能的能力、部署的便利性、运营成本、esa编程和许多其他因素"

#: src/zk-everything/zk-learning-miles/Lecture16:Hardware acceleration.md:149
msgid "成功的硬件加速需要关注的两个关键领域"
msgstr "成功的硬件加速需要关注的两个关键领域"

#: src/zk-everything/zk-learning-miles/Lecture16:Hardware acceleration.md:151
msgid "![image-20230515171544562](./pic/image-20230515171544562.png)"
msgstr "![image-20230515171544562](./pic/image-20230515171544562.png)"

#: src/zk-everything/zk-learning-miles/Lecture16:Hardware acceleration.md:154
msgid "首先是选择适合目标平台的硬件友好算法"
msgstr "首先是选择适合目标平台的硬件友好算法"

#: src/zk-everything/zk-learning-miles/Lecture16:Hardware acceleration.md:156
msgid ""
"针对 GPU 和 FPGA 这样的目标平台具有数千个核心，最适合使用高度可并行化的算法。"
"此外，在选择算法时，应选择旨在通过减少所需操作数量来降低总计算成本的算法。"
msgstr ""
"针对 GPU 和 FPGA 这样的目标平台具有数千个核心，最适合使用高度可并行化的算法。"
"此外，在选择算法时，应选择旨在通过减少所需操作数量来降低总计算成本的算法。"

#: src/zk-everything/zk-learning-miles/Lecture16:Hardware acceleration.md:158
msgid ""
"一旦选择了算法，最后一步是创建高效的实现。通常情况下，需要重新构造算法以更好"
"地匹配目标平台的硬件能力。除了重构算法外，通常还需要使用低级汇编原语来更充分"
"地利用硬件资源并实现最大的性能。"
msgstr ""
"一旦选择了算法，最后一步是创建高效的实现。通常情况下，需要重新构造算法以更好"
"地匹配目标平台的硬件能力。除了重构算法外，通常还需要使用低级汇编原语来更充分"
"地利用硬件资源并实现最大的性能。"

#: src/zk-everything/zk-learning-miles/Lecture16:Hardware acceleration.md:162
msgid "7.硬件加速存在的限制与陷阱"
msgstr "7.硬件加速存在的限制与陷阱"

#: src/zk-everything/zk-learning-miles/Lecture16:Hardware acceleration.md:164
msgid "![image-20230515172632660](./pic/image-20230515172632660.png)"
msgstr "![image-20230515172632660](./pic/image-20230515172632660.png)"

#: src/zk-everything/zk-learning-miles/Lecture16:Hardware acceleration.md:166
msgid ""
"在追求硬件加速时，乘法不是唯一需要的资源。虽然这些高级原语主要由模数乘法组"
"成，但算术单元中的其他计算资源通常也是必需的。此外，根据正在加速的操作的大小"
"和类型，非计算资源也可能成为瓶颈。例如，像 `NTT 这样的操作有时会受到内存访问"
"速度的瓶颈限制。`"
msgstr ""
"在追求硬件加速时，乘法不是唯一需要的资源。虽然这些高级原语主要由模数乘法组"
"成，但算术单元中的其他计算资源通常也是必需的。此外，根据正在加速的操作的大小"
"和类型，非计算资源也可能成为瓶颈。例如，像 `NTT 这样的操作有时会受到内存访问"
"速度的瓶颈限制。`"

#: src/zk-everything/zk-learning-miles/Lecture16:Hardware acceleration.md:168
msgid ""
"另外，对于问题规模较大的用例，有时所需数据无法全部 在目标平台的内存中容纳，从"
"而导致性能降低。对于连接到主机系统的加速器，通信带宽也可能成为瓶颈。目前，许"
"多 GPU 和 FPGA 硬件加速的 `NTT 实现受限于它们在主机和加速器之间传输数据的能"
"力，而不是计算资源`。有时可以通过将数据保留在加速器上来减少带宽需求，从而缓解"
"或消除这些瓶颈。"
msgstr ""
"另外，对于问题规模较大的用例，有时所需数据无法全部 在目标平台的内存中容纳，从"
"而导致性能降低。对于连接到主机系统的加速器，通信带宽也可能成为瓶颈。目前，许"
"多 GPU 和 FPGA 硬件加速的 `NTT 实现受限于它们在主机和加速器之间传输数据的能"
"力，而不是计算资源`。有时可以通过将数据保留在加速器上来减少带宽需求，从而缓解"
"或消除这些瓶颈。"

#: src/zk-everything/zk-learning-miles/Lecture16:Hardware acceleration.md:172
msgid "![image-20230515172813446](./pic/image-20230515172813446.png)"
msgstr "![image-20230515172813446](./pic/image-20230515172813446.png)"

#: src/zk-everything/zk-learning-miles/Lecture16:Hardware acceleration.md:174
msgid ""
"数据移动成为瓶颈而不是数据计算不仅在 NTT 和 ZKP 系统中出现，而且在大数据和高"
"性能计算环境中普遍存在这种趋势。`对于高度并行的算法，计算速度往往比数据移动本"
"身更快，因此硬件加速设计应尽量减少数据移动。`"
msgstr ""
"数据移动成为瓶颈而不是数据计算不仅在 NTT 和 ZKP 系统中出现，而且在大数据和高"
"性能计算环境中普遍存在这种趋势。`对于高度并行的算法，计算速度往往比数据移动本"
"身更快，因此硬件加速设计应尽量减少数据移动。`"

#: src/zk-everything/zk-learning-miles/Lecture16:Hardware acceleration.md:176
msgid ""
"在使用主机外加速器时，另一个需要考虑的因素是将数据移动到加速器和返回主机的时"
"间。"
msgstr ""
"在使用主机外加速器时，另一个需要考虑的因素是将数据移动到加速器和返回主机的时"
"间。"

#: src/zk-everything/zk-learning-miles/Lecture16:Hardware acceleration.md:178
msgid "对于小问题，有时在主机上直接进行计算可能比在加速器上更高效。"
msgstr "对于小问题，有时在主机上直接进行计算可能比在加速器上更高效。"

#: src/zk-everything/zk-learning-miles/Lecture16:Hardware acceleration.md:180
msgid ""
"硬件加速的`最后一个陷阱`是广为人知的奥姆德尔定律或贝尔定律，它指出，通过优化"
"系统的单个部分或单个部分获得的总体性能提高取决于改进部分实际使用的时间占总时"
"间的比例。"
msgstr ""
"硬件加速的`最后一个陷阱`是广为人知的奥姆德尔定律或贝尔定律，它指出，通过优化"
"系统的单个部分或单个部分获得的总体性能提高取决于改进部分实际使用的时间占总时"
"间的比例。"

#: src/zk-everything/zk-learning-miles/Lecture16:Hardware acceleration.md:182
msgid ""
"更简单地说，在 ZKP 系统中，如果 MSM、NTT 和算术哈希占据大约 65% 的时间，即使"
"这些操作被消除，最大的加速比也只能达到 3 倍。考虑到证明生成与本地计算的时间开"
"销相差几十万到一百万倍，显然优化工作不会止步于此。"
msgstr ""
"更简单地说，在 ZKP 系统中，如果 MSM、NTT 和算术哈希占据大约 65% 的时间，即使"
"这些操作被消除，最大的加速比也只能达到 3 倍。考虑到证明生成与本地计算的时间开"
"销相差几十万到一百万倍，显然优化工作不会止步于此。"

#: src/zk-everything/zk-learning-miles/Lecture16:Hardware acceleration.md:185
msgid "8.FileCoin的加速例子"
msgstr "8.FileCoin的加速例子"

#: src/zk-everything/zk-learning-miles/Lecture16:Hardware acceleration.md:187
msgid "![image-20230515174119119](./pic/image-20230515174119119.png)"
msgstr "![image-20230515174119119](./pic/image-20230515174119119.png)"

#: src/zk-everything/zk-learning-miles/Lecture16:Hardware acceleration.md:189
msgid ""
"过去几年，Filecoin 一直是最大的 ZKP 系统之一，每天平均生成 1 到 5 百万个证"
"明。"
msgstr ""
"过去几年，Filecoin 一直是最大的 ZKP 系统之一，每天平均生成 1 到 5 百万个证"
"明。"

#: src/zk-everything/zk-learning-miles/Lecture16:Hardware acceleration.md:191
msgid ""
"Filecoin 使用 ZKPS 来进行副本证明 (PRORAP)，这是一种证明你已经创建了数据集的"
"唯一副本的加密方式。Filecoin 中使用的副本证明需要大约 `470 GB` 的 Poseidon 哈"
"希。"
msgstr ""
"Filecoin 使用 ZKPS 来进行副本证明 (PRORAP)，这是一种证明你已经创建了数据集的"
"唯一副本的加密方式。Filecoin 中使用的副本证明需要大约 `470 GB` 的 Poseidon 哈"
"希。"

#: src/zk-everything/zk-learning-miles/Lecture16:Hardware acceleration.md:193
msgid "如果在许多核心的 CPU 系统上进行哈希运算，需要大约 100 分钟。"
msgstr "如果在许多核心的 CPU 系统上进行哈希运算，需要大约 100 分钟。"

#: src/zk-everything/zk-learning-miles/Lecture16:Hardware acceleration.md:195
msgid ""
"相比之下，Filecoin 的 GPU 实现仅需要大约一分钟，可以实现大约 100 倍的性能提"
"升。"
msgstr ""
"相比之下，Filecoin 的 GPU 实现仅需要大约一分钟，可以实现大约 100 倍的性能提"
"升。"

#: src/zk-everything/zk-learning-miles/Lecture16:Hardware acceleration.md:197
msgid ""
"对于 Filecoin 中的密码学证明组件，他们利用了 Groth16 协议。在 Filecoin 网络上"
"进行每个 PoRep 时，存储提供者会生成 10 个证明，每个证明大约有 `1.3 亿个约束条"
"件`，总共超过 10 亿个约束条件。仅用于创建这些证明的 MSM 就总计约为 `45 亿个点"
"标量对`。"
msgstr ""
"对于 Filecoin 中的密码学证明组件，他们利用了 Groth16 协议。在 Filecoin 网络上"
"进行每个 PoRep 时，存储提供者会生成 10 个证明，每个证明大约有 `1.3 亿个约束条"
"件`，总共超过 10 亿个约束条件。仅用于创建这些证明的 MSM 就总计约为 `45 亿个点"
"标量对`。"

#: src/zk-everything/zk-learning-miles/Lecture16:Hardware acceleration.md:199
msgid ""
"如果这些证明在许多核心的 CPU 上计算，需要约一个小时才能完成。相比之下，在 "
"GPU 上可以在大约三分钟内完成，这是一个大约 20 倍的性能提升。这个例子突显了硬"
"件加速让ZKP 用例变得实际可行的能力。"
msgstr ""
"如果这些证明在许多核心的 CPU 上计算，需要约一个小时才能完成。相比之下，在 "
"GPU 上可以在大约三分钟内完成，这是一个大约 20 倍的性能提升。这个例子突显了硬"
"件加速让ZKP 用例变得实际可行的能力。"

#: src/zk-everything/zk-learning-miles/Lecture16:Hardware acceleration.md:201
msgid "9.zk加速的现在与未来"
msgstr "9.zk加速的现在与未来"

#: src/zk-everything/zk-learning-miles/Lecture16:Hardware acceleration.md:203
msgid "![image-20230515174833294](./pic/image-20230515174833294.png)"
msgstr "![image-20230515174833294](./pic/image-20230515174833294.png)"

#: src/zk-everything/zk-learning-miles/Lecture16:Hardware acceleration.md:205
msgid ""
"了解更多关于硬件加速的知识，有许多在线资源可用，包括许多今天讨论的加密原语的"
"开源 GPU 和 FPGA 实现。"
msgstr ""
"了解更多关于硬件加速的知识，有许多在线资源可用，包括许多今天讨论的加密原语的"
"开源 GPU 和 FPGA 实现。"

#: src/zk-everything/zk-learning-miles/Lecture16:Hardware acceleration.md:207
msgid "一个特别好的资源是 zprize.io，这是一个旨在改善 ZKP 系统性能的社区倡议。"
msgstr ""
"一个特别好的资源是 zprize.io，这是一个旨在改善 ZKP 系统性能的社区倡议。"

#: src/zk-everything/zk-learning-miles/Lecture16:Hardware acceleration.md:209
msgid ""
"对用于更大的多标量乘法，单个 GPU 可以以每秒超过 1 亿个Bases的速度执行， 就 "
"NTT 而言，大小为 2 到28 的 NTT 可以在 250 毫秒内计算出来， 对于 Poseidon 哈"
"希，GPU 可以大约哈希 每秒 350 GB。"
msgstr ""
"对用于更大的多标量乘法，单个 GPU 可以以每秒超过 1 亿个Bases的速度执行， 就 "
"NTT 而言，大小为 2 到28 的 NTT 可以在 250 毫秒内计算出来， 对于 Poseidon 哈"
"希，GPU 可以大约哈希 每秒 350 GB。"

#: src/zk-everything/zk-learning-miles/Lecture16:Hardware acceleration.md:213
msgid "![image-20230515175249404](./pic/image-20230515175249404.png)"
msgstr "![image-20230515175249404](./pic/image-20230515175249404.png)"

#: src/zk-everything/zk-learning-miles/Lecture16:Hardware acceleration.md:215
msgid ""
"尽管在过去几年中，ZKP 硬件加速取得了巨大进展，但仍有很大的改进空间。下面是一"
"些可以帮助证明生成更快的领域。"
msgstr ""
"尽管在过去几年中，ZKP 硬件加速取得了巨大进展，但仍有很大的改进空间。下面是一"
"些可以帮助证明生成更快的领域。"

#: src/zk-everything/zk-learning-miles/Lecture16:Hardware acceleration.md:217
msgid ""
"`第一个领域`是针对核心原语（如 MSM 和 NTT）的改进算法或对现有算法的其他优化。"
msgstr ""
"`第一个领域`是针对核心原语（如 MSM 和 NTT）的改进算法或对现有算法的其他优化。"

#: src/zk-everything/zk-learning-miles/Lecture16:Hardware acceleration.md:219
msgid "`第二个领域`是全新的核心原语，如具有更低计算要求的新哈希函数。"
msgstr "`第二个领域`是全新的核心原语，如具有更低计算要求的新哈希函数。"

#: src/zk-everything/zk-learning-miles/Lecture16:Hardware acceleration.md:221
msgid ""
"`第三个领域`即新的证明系统，特别是关于硬件加速的简化证明系统。简化的证明系统"
"可以为硬件加速创造更多机会。"
msgstr ""
"`第三个领域`即新的证明系统，特别是关于硬件加速的简化证明系统。简化的证明系统"
"可以为硬件加速创造更多机会。"

#: src/zk-everything/zk-learning-miles/Lecture16:Hardware acceleration.md:223
msgid ""
"例如，更简化的证明系统可以减少不同操作、减少通信和内存要求，甚至消除一些目前"
"存在的计算昂贵的操作。最后，改进实现的空间也永远存在，包括完整的证明系统和硬"
"件加速的原语。这包括针对商用 GPU 和 FPGA 等现成硬件以及定制硅片（例如 ASIC）"
"的设计。"
msgstr ""
"例如，更简化的证明系统可以减少不同操作、减少通信和内存要求，甚至消除一些目前"
"存在的计算昂贵的操作。最后，改进实现的空间也永远存在，包括完整的证明系统和硬"
"件加速的原语。这包括针对商用 GPU 和 FPGA 等现成硬件以及定制硅片（例如 ASIC）"
"的设计。"

#: src/zk-everything/zk-learning-miles/Lecture16:Hardware acceleration.md:229
msgid ""
"[Amber Group.“Need for Speed: Zero Knowledge.Introduction I by Amber Group]"
"(https:/medium.com/amber-group/need-for-speed-zero-knowledge-1e29d4a82fcd)"
msgstr ""
"[Amber Group.“Need for Speed: Zero Knowledge.Introduction I by Amber Group]"
"(https:/medium.com/amber-group/need-for-speed-zero-knowledge-1e29d4a82fcd)"

#: src/zk-everything/zk-learning-miles/Lecture16:Hardware acceleration.md:231
msgid ""
"[Feng, Boyuan. \"Multi-scalar Multiplication (MSM) .](https:/hackmd.io/"
"@tazAymRSQCGXTUKkbh1BAg/Sk27liTW9) "
msgstr ""
"[Feng, Boyuan. \"Multi-scalar Multiplication (MSM) .](https:/hackmd.io/"
"@tazAymRSQCGXTUKkbh1BAg/Sk27liTW9) "

#: src/zk-everything/zk-learning-miles/Lecture16:Hardware acceleration.md:233
msgid ""
"[Figment Capital.“Accelerating Zero-Knowledge Proofs.](https://"
"figmentcapital.medium.com/accelerating-zero-knowledge-proofs-cfc806de611b.)"
msgstr ""
"[Figment Capital.“Accelerating Zero-Knowledge Proofs.](https://"
"figmentcapital.medium.com/accelerating-zero-knowledge-proofs-cfc806de611b.)"

#: src/zk-everything/zk-learning-miles/Lecture16:Hardware acceleration.md:235
msgid ""
"[Jane Street. \"Accelerating zk-SNARKs - MSM and NTT alorithms on FPGAs with "
"Hardcaml.\" Jane Street Tech Blog, 7 December 2022](https://blog.janestreet."
"com/zero-knowledge-fpgas-hardcaml/)."
msgstr ""
"[Jane Street. \"Accelerating zk-SNARKs - MSM and NTT alorithms on FPGAs with "
"Hardcaml.\" Jane Street Tech Blog, 7 December 2022](https://blog.janestreet."
"com/zero-knowledge-fpgas-hardcaml/)."

#: src/zk-everything/zk-learning-miles/Lecture16:Hardware acceleration.md:237
msgid ""
"[Thaler, Justin. \"Measuring SNARK performance: Frontends, backends, and the "
"future.\" a16z crypto, 11 August 2022](https:/a16zcrypto.com/content/article/"
"measuring-snark-performance-frontends-backends-and-the-future/.)"
msgstr ""
"[Thaler, Justin. \"Measuring SNARK performance: Frontends, backends, and the "
"future.\" a16z crypto, 11 August 2022](https:/a16zcrypto.com/content/article/"
"measuring-snark-performance-frontends-backends-and-the-future/.)"

#: src/zk-everything/zk-learning-miles/Lecture16:Hardware acceleration.md:239
msgid ""
"[Zhang, Ye. \"ZKP MOOC Lecture 12: zkEVM Design, Optimization and "
"Applications.](https://www.youtube.com/watch?"
"v=vuQGdbpDWcs&ab_channel=Blockchain-Web3MOOCs.)"
msgstr ""
"[Zhang, Ye. \"ZKP MOOC Lecture 12: zkEVM Design, Optimization and "
"Applications.](https://www.youtube.com/watch?"
"v=vuQGdbpDWcs&ab_channel=Blockchain-Web3MOOCs.)"

#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:3
#: src/zk-everything/zk-everything-joe/Hyrax.md:3
#: src/zk-everything/zk-everything-joe/Spartan.md:471
msgid "Thanks"
msgstr "Thanks"

#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:6
#: src/zk-everything/zk-everything-joe/Hyrax.md:6
msgid ""
"感谢SecbitLabs @郭宇 前两个月分享的Spartan Overview (尽管当时也没太理解)， 以"
"及@even 在研究方向上的指引(据说Hyrax 不太好啃)，不至于走太多弯路。"
msgstr ""
"感谢SecbitLabs @郭宇 前两个月分享的Spartan Overview (尽管当时也没太理解)， 以"
"及@even 在研究方向上的指引(据说Hyrax 不太好啃)，不至于走太多弯路。"

#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:10
msgid "我的动机"
msgstr "我的动机"

#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:14
#: src/zk-everything/zk-everything-joe/Hyrax.md:14
msgid ""
"缘于folding，缘于NOVA，缘于Setty，了解到了Spartan，但并不认识它，所以才有了本"
"篇及接下来的关于它的一切(预备知识)...... "
msgstr ""
"缘于folding，缘于NOVA，缘于Setty，了解到了Spartan，但并不认识它，所以才有了本"
"篇及接下来的关于它的一切(预备知识)...... "

#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:16
#: src/zk-everything/zk-everything-joe/Hyrax.md:16
#: src/zk-everything/zk-everything-joe/Spartan.md:46
msgid ""
"![image.png](https://img.learnblockchain.cn/attachments/2023/09/"
"PIzxPgw765066e60867af.png)"
msgstr ""
"![image.png](https://img.learnblockchain.cn/attachments/2023/09/"
"PIzxPgw765066e60867af.png)"

#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:18
#: src/zk-everything/zk-everything-joe/Hyrax.md:18
msgid ""
"关于Spartan，在ZK领域可能时间上相对也有点儿远了，暂且不考虑它在某些方面的争"
"议，它的一些思想其实已经影响到其它比较热门的方向了，比如当下的热点Lasso & "
"Jolt，所以它的研究意义仍然很大。"
msgstr ""
"关于Spartan，在ZK领域可能时间上相对也有点儿远了，暂且不考虑它在某些方面的争"
"议，它的一些思想其实已经影响到其它比较热门的方向了，比如当下的热点Lasso & "
"Jolt，所以它的研究意义仍然很大。"

#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:22
#: src/zk-everything/zk-everything-joe/Hyrax.md:22
msgid "Overview "
msgstr "Overview "

#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:26
msgid "本篇文章主要参考Hyrax 论文前半部分1-4节，即优化前的GKR zk argument"
msgstr "本篇文章主要参考Hyrax 论文前半部分1-4节，即优化前的GKR zk argument"

#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:30
msgid ""
"GKR 协议本身是Sumcheck协议的一种应用，不带zk argument的GKR 就可以简单认为是多"
"个sumcheck协议的叠加，带zk argument的GKR就会带来很多的细节问题，这也是Hyrax "
"的起源，所以弄清楚GKR with zk argument 的各个细节后自然也就清楚了Hyrax的意义"
msgstr ""
"GKR 协议本身是Sumcheck协议的一种应用，不带zk argument的GKR 就可以简单认为是多"
"个sumcheck协议的叠加，带zk argument的GKR就会带来很多的细节问题，这也是Hyrax "
"的起源，所以弄清楚GKR with zk argument 的各个细节后自然也就清楚了Hyrax的意义"

#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:34
msgid "数据并行化下的GKR 协议"
msgstr "数据并行化下的GKR 协议"

#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:38
msgid "节选自PAZK 中的图"
msgstr "节选自PAZK 中的图"

#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:40
msgid ""
"![image.png](https://img.learnblockchain.cn/attachments/2023/09/"
"sc70bUls65066eafdb069.png)"
msgstr ""
"![image.png](https://img.learnblockchain.cn/attachments/2023/09/"
"sc70bUls65066eafdb069.png)"

#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:44
msgid ""
"何为数据并行化GKR？就是同一个电路描述应用在多组input 数据中的GKR 协议，这样"
"prover 在最开始的claims 中就不再是针对单一电路的output，比如下面的 "
msgstr ""
"何为数据并行化GKR？就是同一个电路描述应用在多组input 数据中的GKR 协议，这样"
"prover 在最开始的claims 中就不再是针对单一电路的output，比如下面的 "

#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:44
msgid "﻿："
msgstr "﻿："

#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:46
msgid ""
"![image.png](https://img.learnblockchain.cn/attachments/2023/09/"
"McgHrSHb65066f148e0a6.png)"
msgstr ""
"![image.png](https://img.learnblockchain.cn/attachments/2023/09/"
"McgHrSHb65066f148e0a6.png)"

#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:50
msgid "而是多个子电路的output的汇总 "
msgstr "而是多个子电路的output的汇总 "

#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:50
msgid "﻿：​"
msgstr "﻿：​"

#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:52
#: src/zk-everything/zk-everything-joe/Hyrax.md:46
msgid ""
"![image.png](https://img.learnblockchain.cn/attachments/2023/09/"
"KOUCgkBj65066f3d45df7.png)"
msgstr ""
"![image.png](https://img.learnblockchain.cn/attachments/2023/09/"
"KOUCgkBj65066f3d45df7.png)"

#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:56
msgid "在GKR协议中prover 要证明也不再是:"
msgstr "在GKR协议中prover 要证明也不再是:"

#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:62
msgid "而是：​"
msgstr "而是：​"

#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:64
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:134
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:396
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:448
#: src/zk-everything/zk-everything-joe/Hyrax.md:58
#: src/zk-everything/zk-everything-joe/Hyrax.md:64
#: src/zk-everything/zk-everything-joe/Hyrax.md:70
#: src/zk-everything/zk-everything-joe/Spartan.md:350
msgid "))\\]"
msgstr "))\\]"

#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:68
msgid "另外需要备注一下各个notion的含义："
msgstr "另外需要备注一下各个notion的含义："

#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:71
msgid "N﻿ 代表子电路的个数"
msgstr "N﻿ 代表子电路的个数"

#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:75
msgid "G﻿ 代表单个子电路中每层Gate的个数"
msgstr "G﻿ 代表单个子电路中每层Gate的个数"

#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:79
msgid " 代表第"
msgstr " 代表第"

#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:79
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:83
msgid "﻿ 层电路编码"
msgstr "﻿ 层电路编码"

#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:79
msgid "﻿ Gate编码"
msgstr "﻿ Gate编码"

#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:79
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:83
msgid "﻿ 上的evaluation 值，"
msgstr "﻿ 上的evaluation 值，"

#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:79
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:83
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:91
msgid "是"
msgstr "是"

#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:79
msgid "的MLE "
msgstr "的MLE "

#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:83
msgid "代表第"
msgstr "代表第"

#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:83
msgid "﻿ Gate编码 "
msgstr "﻿ Gate编码 "

#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:83
msgid "的MLE；"
msgstr "的MLE；"

#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:83
msgid "同理"
msgstr "同理"

#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:87
msgid "分别代表"
msgstr "分别代表"

#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:87
msgid "上的加法和乘法Gate的MLE，**注意Gate的描述与电路的编码"
msgstr "上的加法和乘法Gate的MLE，**注意Gate的描述与电路的编码"

#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:87
msgid ""
"﻿ 无关**，也跟input witness无关，所以它的计算可以在preprocessing 阶段就开始"
"了，没有必要等到协议中才开始"
msgstr ""
"﻿ 无关**，也跟input witness无关，所以它的计算可以在preprocessing 阶段就开始"
"了，没有必要等到协议中才开始"

#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:91
msgid "代表电路编码"
msgstr "代表电路编码"

#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:91
msgid "﻿ 与 电路编码"
msgstr "﻿ 与 电路编码"

#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:91
msgid "﻿ 是否一致，"
msgstr "﻿ 是否一致，"

#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:91
msgid "的MLE"
msgstr "的MLE"

#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:95
msgid "GKR Protocol with ZK Argument"
msgstr "GKR Protocol with ZK Argument"

#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:99
msgid ""
"![image.png](https://img.learnblockchain.cn/attachments/2023/09/"
"AnDKMzNE65067106e780d.png)"
msgstr ""
"![image.png](https://img.learnblockchain.cn/attachments/2023/09/"
"AnDKMzNE65067106e780d.png)"

#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:101
msgid "仍然以为个图为例来扮演整个协议的过程。其中电路的个数"
msgstr "仍然以为个图为例来扮演整个协议的过程。其中电路的个数"

#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:101
msgid "﻿，所以"
msgstr "﻿，所以"

#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:101
msgid "﻿；有限域的moduler "
msgstr "﻿；有限域的moduler "

#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:101
msgid "﻿。​"
msgstr "﻿。​"

#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:105
msgid "Step ZERO"
msgstr "Step ZERO"

#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:109
msgid ""
"假设前半部分为public input，后半部分为witness，对witness 的每个元素进行"
"commit，并发送给verifier ："
msgstr ""
"假设前半部分为public input，后半部分为witness，对witness 的每个元素进行"
"commit，并发送给verifier ："

#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:111
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:176
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:188
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:218
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:230
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:262
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:275
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:307
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:319
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:349
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:361
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:390
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:396
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:430
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:436
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:442
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:454
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:460
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:514
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:532
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:538
#: src/zk-everything/zk-everything-joe/Hyrax.md:250
msgid "commit"
msgstr "commit"

#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:115
msgid "Step ONE"
msgstr "Step ONE"

#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:119
msgid "prover 发送电路的output 作为Sumcheck的初始claims"
msgstr "prover 发送电路的output 作为Sumcheck的初始claims"

#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:119
msgid "，verifier 根据给定的电路第0层的evaluation 值："
msgstr "，verifier 根据给定的电路第0层的evaluation 值："

#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:126
msgid "可以插值出相应的多项式："
msgstr "可以插值出相应的多项式："

#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:132
msgid "verifier 生成challenge factor"
msgstr "verifier 生成challenge factor"

#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:132
msgid ""
"，并发送给prover，接下来进入第1层电路的 sumcheck 协议，prover 需要证明："
msgstr ""
"，并发送给prover，接下来进入第1层电路的 sumcheck 协议，prover 需要证明："

#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:138
msgid "Step TWO"
msgstr "Step TWO"

#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:142
msgid "将第1层的sumcheck 多项式拆解成多个item ："
msgstr "将第1层的sumcheck 多项式拆解成多个item ："

#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:149
msgid "合并item ：​"
msgstr "合并item ：​"

#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:152
msgid "\\[(("
msgstr "\\[(("

#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:156
msgid "Round one"
msgstr "Round one"

#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:160
msgid "prover 计算本次round 验证需要用到的proof，也就是单变量多项式"
msgstr "prover 计算本次round 验证需要用到的proof，也就是单变量多项式"

#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:162
msgid "0001"
msgstr "0001"

#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:166
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:206
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:248
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:294
msgid "备注："
msgstr "备注："

#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:166
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:206
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:248
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:294
msgid "​﻿ 其它编码取值对应的多项式为0，就没有一一枚举出来"
msgstr "​﻿ 其它编码取值对应的多项式为0，就没有一一枚举出来"

#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:168
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:252
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:298
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:340
msgid "则："
msgstr "则："

#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:174
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:216
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:259
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:305
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:347
msgid "prover 需要把多项式"
msgstr "prover 需要把多项式"

#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:174
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:216
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:259
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:305
msgid ""
"的commitment发送给verifier，也就是把该多项式的4个系数的commitment 之后发过"
"去：​"
msgstr ""
"的commitment发送给verifier，也就是把该多项式的4个系数的commitment 之后发过"
"去：​"

#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:180
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:266
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:311
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:353
msgid "verifier 需要验证：​"
msgstr "verifier 需要验证：​"

#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:186
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:228
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:272
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:316
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:359
msgid "根据commitment 加法同态的性质，需要验证：​"
msgstr "根据commitment 加法同态的性质，需要验证：​"

#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:188
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:230
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:275
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:319
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:361
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:396
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:442
msgid "✓"
msgstr "✓"

#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:192
msgid "验证通过，verfier 发送challenge factor  "
msgstr "验证通过，verfier 发送challenge factor  "

#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:192
msgid "，下一个round 需要验证的目标值为：​"
msgstr "，下一个round 需要验证的目标值为：​"

#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:198
msgid "Round two"
msgstr "Round two"

#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:202
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:244
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:289
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:333
msgid "基于"
msgstr "基于"

#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:202
msgid "﻿ ，prover 计算本次round 验证需要用到的proof，也就是单变量多项式"
msgstr "﻿ ，prover 计算本次round 验证需要用到的proof，也就是单变量多项式"

#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:204
#: src/zk-everything/zk-everything-joe/Spartan.md:347
msgid "001"
msgstr "001"

#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:204
#: src/zk-everything/zk-everything-joe/Spartan.md:347
msgid "011"
msgstr "011"

#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:210
msgid "则：​"
msgstr "则：​"

#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:222
msgid "verifier 需要验证："
msgstr "verifier 需要验证："

#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:234
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:279
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:365
msgid "验证通过，verfier 发送challenge factor"
msgstr "验证通过，verfier 发送challenge factor"

#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:234
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:279
msgid "给prover，下一个round 需要验证的目标值为:"
msgstr "给prover，下一个round 需要验证的目标值为:"

#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:236
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:336
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:343
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:396
msgid "64"
msgstr "64"

#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:236
msgid "68"
msgstr "68"

#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:240
msgid "Round three"
msgstr "Round three"

#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:244
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:289
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:333
msgid "，prover 计算本次round 验证需要用到的proof，也就是单变量多项式"
msgstr "，prover 计算本次round 验证需要用到的proof，也就是单变量多项式"

#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:246
#: src/zk-everything/zk-everything-joe/Spartan.md:416
msgid "01"
msgstr "01"

#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:246
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:255
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:336
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:343
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:418
msgid "26"
msgstr "26"

#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:246
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:255
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:336
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:343
msgid "34"
msgstr "34"

#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:285
msgid "Round four"
msgstr "Round four"

#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:292
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:301
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:336
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:343
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:418
msgid "18"
msgstr "18"

#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:323
msgid "验证通过，verfier 发送challenge factor "
msgstr "验证通过，verfier 发送challenge factor "

#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:323
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:365
msgid "给prover，下一个round 需要验证的目标值为:​"
msgstr "给prover，下一个round 需要验证的目标值为:​"

#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:325
msgid "33"
msgstr "33"

#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:329
msgid "Round five"
msgstr "Round five"

#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:336
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:343
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:396
msgid "27"
msgstr "27"

#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:347
msgid ""
" 的commitment发送给verifier，也就是把该多项式的4个系数的commitment 之后发过"
"去：​"
msgstr ""
" 的commitment发送给verifier，也就是把该多项式的4个系数的commitment 之后发过"
"去：​"

#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:371
msgid "Last Round"
msgstr "Last Round"

#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:375
msgid "目前challenge factor 的组合为："
msgstr "目前challenge factor 的组合为："

#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:381
msgid "prover 根据第1层电路的evaluation 值很容易就能插值出相应的MLE 多项式：​"
msgstr "prover 根据第1层电路的evaluation 值很容易就能插值出相应的MLE 多项式：​"

#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:387
msgid "prover 分别计算出三个claims 值的commitment：​"
msgstr "prover 分别计算出三个claims 值的commitment：​"

#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:390
#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:460
msgid ")))"
msgstr ")))"

#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:394
msgid "verifier 拿着这三个commitment 完成第1层电路 sumcheck 协议的最后验证：​"
msgstr "verifier 拿着这三个commitment 完成第1层电路 sumcheck 协议的最后验证：​"

#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:396
msgid ")))\\]"
msgstr ")))\\]"

#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:400
msgid "mini-protocols ​"
msgstr "mini-protocols ​"

#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:403
msgid "第一层电路evaluation 对应的MLE ：​"
msgstr "第一层电路evaluation 对应的MLE ：​"

#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:409
msgid "上一个sumcheck 协议的Last Round中prover 新增加了两个claims，也就是：​"
msgstr "上一个sumcheck 协议的Last Round中prover 新增加了两个claims，也就是：​"

#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:416
msgid "引入一个fold factor "
msgstr "引入一个fold factor "

#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:416
msgid "﻿ 我们可以把两个claims fold到一起：​"
msgstr "﻿ 我们可以把两个claims fold到一起：​"

#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:422
msgid "它的非常重要的特性就是：​"
msgstr "它的非常重要的特性就是：​"

#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:428
msgid "prover 把多项式"
msgstr "prover 把多项式"

#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:428
msgid ""
"进行commit后发送给verifier，同样也是多个系数分别commit，该多项式degree 为2，"
"也就是说最多有3个commitment：​"
msgstr ""
"进行commit后发送给verifier，同样也是多个系数分别commit，该多项式degree 为2，"
"也就是说最多有3个commitment：​"

#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:434
msgid "verifier 拿到多项式"
msgstr "verifier 拿到多项式"

#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:434
msgid "的commitment 后就可以计算出："
msgstr "的commitment 后就可以计算出："

#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:440
msgid "这样就可以验证prover 之前发送的"
msgstr "这样就可以验证prover 之前发送的"

#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:440
msgid "的commitment 是否与当前多项式的commitment **是否一致**："
msgstr "的commitment 是否与当前多项式的commitment **是否一致**："

#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:446
msgid "为了验证prover 之前发送的"
msgstr "为了验证prover 之前发送的"

#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:446
msgid "的commitment X、Y﻿**是否合法**，基于多项式"
msgstr "的commitment X、Y﻿**是否合法**，基于多项式"

#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:446
msgid "的commitment "
msgstr "的commitment "

#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:446
msgid "， verifier 随机采样一个challenge factor "
msgstr "， verifier 随机采样一个challenge factor "

#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:446
msgid ""
"﻿ 并发送给prover，prover 自然可以计算出下一轮sumcheck协议需要证明的evaluation"
"值"
msgstr ""
"﻿ 并发送给prover，prover 自然可以计算出下一轮sumcheck协议需要证明的evaluation"
"值"

#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:446
msgid "，即："
msgstr "，即："

#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:452
msgid "同时verifier 计算下一轮sumcheck协议需要证明的"
msgstr "同时verifier 计算下一轮sumcheck协议需要证明的"

#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:452
msgid " 的commitment："
msgstr " 的commitment："

#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:458
msgid ""
"最后我们再明确一点：mini-protocol 的根本目的是把两个claims fold成一个claims，"
"减少prover 的成本，不然prover要分别证明两个claims：​"
msgstr ""
"最后我们再明确一点：mini-protocol 的根本目的是把两个claims fold成一个claims，"
"减少prover 的成本，不然prover要分别证明两个claims：​"

#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:460
msgid "OR"
msgstr "OR"

#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:462
msgid "这样应该能make sense！"
msgstr "这样应该能make sense！"

#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:466
msgid "Step THREE"
msgstr "Step THREE"

#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:470
msgid "同Step TWO 一样，这里我们省略掉N 行文字+公式... 直接进入到Final Step！"
msgstr "同Step TWO 一样，这里我们省略掉N 行文字+公式... 直接进入到Final Step！"

#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:474
msgid "Final Step"
msgstr "Final Step"

#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:478
msgid "我们再回顾一下最开始的实例结构图："
msgstr "我们再回顾一下最开始的实例结构图："

#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:481
msgid ""
"![image.png](https://img.learnblockchain.cn/attachments/2023/09/"
"dsmO1vLy65067a72a0eb9.png)"
msgstr ""
"![image.png](https://img.learnblockchain.cn/attachments/2023/09/"
"dsmO1vLy65067a72a0eb9.png)"

#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:483
msgid "根据最下面一层(public input + witness)的值，我们可以插值出MLE："
msgstr "根据最下面一层(public input + witness)的值，我们可以插值出MLE："

#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:490
msgid ""
"Step THREE 的mini-protocol 同样也会归结到证明两个claims，为了方便描述我们**假"
"设** "
msgstr ""
"Step THREE 的mini-protocol 同样也会归结到证明两个claims，为了方便描述我们**假"
"设** "

#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:497
msgid "多项式"
msgstr "多项式"

#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:504
msgid "假设fold factor "
msgstr "假设fold factor "

#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:504
msgid "，把上面的两个claims合并成一个claim:​"
msgstr "，把上面的两个claims合并成一个claim:​"

#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:508
msgid ""
"备注：简单一句话就是，证明最下面一层(public input+witness)电路、Gate编码为"
"(2, (3, 4))， evaluation 值为2 ，组成的**点**在MLE 多项式上。"
msgstr ""
"备注：简单一句话就是，证明最下面一层(public input+witness)电路、Gate编码为"
"(2, (3, 4))， evaluation 值为2 ，组成的**点**在MLE 多项式上。"

#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:512
msgid "同样，verifier 基于prover 提供的"
msgstr "同样，verifier 基于prover 提供的"

#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:512
msgid "的commitment，计算出"
msgstr "的commitment，计算出"

#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:512
msgid " 的commitment:"
msgstr " 的commitment:"

#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:518
msgid ""
"verifier 如何验证prover 提供的这个commitment的合法性？对于verifier 来说最下面"
"一层电路的evaluation 分 public input p﻿和 witness w﻿，其中后者未知，**假设两者"
"长度相等**，按照上图中的实例，也就是说前半部分为public input，后半部分为"
"witness："
msgstr ""
"verifier 如何验证prover 提供的这个commitment的合法性？对于verifier 来说最下面"
"一层电路的evaluation 分 public input p﻿和 witness w﻿，其中后者未知，**假设两者"
"长度相等**，按照上图中的实例，也就是说前半部分为public input，后半部分为"
"witness："

#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:520
msgid "public input"
msgstr "public input"

#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:520
msgid "witness"
msgstr "witness"

#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:524
msgid "因此，我们需要把"
msgstr "因此，我们需要把"

#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:524
msgid "拆解成两部分"
msgstr "拆解成两部分"

#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:530
msgid "最终是要计算出"
msgstr "最终是要计算出"

#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:530
msgid ""
"的commitment，其中public input 部分因为是公开的，所以verifier 可以自行计算出"
"相应的MLE 多项式"
msgstr ""
"的commitment，其中public input 部分因为是公开的，所以verifier 可以自行计算出"
"相应的MLE 多项式"

#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:530
msgid "，并拿到"
msgstr "，并拿到"

#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:530
msgid ""
"的commitment；另外witness 部分因为在Step ZERO prover 已经把它们的commitment "
"全部都已经发给verifier 了，verifier 只需要基于此拿到"
msgstr ""
"的commitment；另外witness 部分因为在Step ZERO prover 已经把它们的commitment "
"全部都已经发给verifier 了，verifier 只需要基于此拿到"

#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:530
msgid " 的commitment就可以了："
msgstr " 的commitment就可以了："

#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:532
#: src/zk-everything/zk-everything-joe/Hyrax.md:208
#: src/zk-everything/zk-everything-joe/Hyrax.md:250
#: src/zk-everything/zk-everything-joe/Spartan.md:350
msgid "⇓"
msgstr "⇓"

#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:536
msgid "最后的最后，我们put it together ：​"
msgstr "最后的最后，我们put it together ：​"

#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:542
msgid "What's Next"
msgstr "What's Next"

#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:546
msgid ""
"到此为止，满足ZK argument的Vallina 版本的GKR协议也就完整了，紧接着我们再"
"detail一下Hyrax 在此基础之上都做了些什么？接着再看看Spark 在Hyrax基础之上做了"
"些什么？最后再看看Spartan 的整个全貌？"
msgstr ""
"到此为止，满足ZK argument的Vallina 版本的GKR协议也就完整了，紧接着我们再"
"detail一下Hyrax 在此基础之上都做了些什么？接着再看看Spark 在Hyrax基础之上做了"
"些什么？最后再看看Spartan 的整个全貌？"

#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:550 src/public
#: goods/第二章.md:179
msgid "参考资料"
msgstr "参考资料"

#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:554
#: src/zk-everything/zk-everything-joe/Hyrax.md:339
msgid "【1】Hyrax 论文：https://eprint.iacr.org/2017/1132.pdf"
msgstr "【1】Hyrax 论文：https://eprint.iacr.org/2017/1132.pdf"

#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:556
#: src/zk-everything/zk-everything-joe/Hyrax.md:341
msgid ""
"【2】PAZK by Thaler：https://people.cs.georgetown.edu/jthaler/"
"ProofsArgsAndZK.pdf"
msgstr ""
"【2】PAZK by Thaler：https://people.cs.georgetown.edu/jthaler/"
"ProofsArgsAndZK.pdf"

#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:558
msgid "【3】trivial GKR 协议：https://learnblockchain.cn/article/6199"
msgstr "【3】trivial GKR 协议：https://learnblockchain.cn/article/6199"

#: src/zk-everything/zk-everything-joe/GKR_with_ZK_Argument.md:560
msgid "【4】sumcheck 协议：https://learnblockchain.cn/article/6188"
msgstr "【4】sumcheck 协议：https://learnblockchain.cn/article/6188"

#: src/zk-everything/zk-everything-joe/Hyrax.md:10
#: src/zk-everything/zk-everything-joe/Spartan.md:40
msgid "Motivation"
msgstr "Motivation"

#: src/zk-everything/zk-everything-joe/Hyrax.md:26
msgid ""
"本篇文章主要参考Hyrax 论文后半部分5-6节，即Hyrax 基于GKR with ZK Argument的"
"contribution。"
msgstr ""
"本篇文章主要参考Hyrax 论文后半部分5-6节，即Hyrax 基于GKR with ZK Argument的"
"contribution。"

#: src/zk-everything/zk-everything-joe/Hyrax.md:30
msgid ""
"主要分为两部分，前半部分Reduced Sumcheck Verification主要针对GKR with ZK "
"Argument的Step Two做的优化，对应Hyrax 论文中的Part 5。"
msgstr ""
"主要分为两部分，前半部分Reduced Sumcheck Verification主要针对GKR with ZK "
"Argument的Step Two做的优化，对应Hyrax 论文中的Part 5。"

#: src/zk-everything/zk-everything-joe/Hyrax.md:34
msgid ""
"后半部分Reduced Witness Evaluation 主要针对GKR with ZK Argument的Final Step做"
"的优化，对应Hyrax 论文中的Part 6。"
msgstr ""
"后半部分Reduced Witness Evaluation 主要针对GKR with ZK Argument的Final Step做"
"的优化，对应Hyrax 论文中的Part 6。"

#: src/zk-everything/zk-everything-joe/Hyrax.md:38
msgid "为了方便对照原始论文理解，本文中的notion尽量与Hyrax 原始论文对齐。"
msgstr "为了方便对照原始论文理解，本文中的notion尽量与Hyrax 原始论文对齐。"

#: src/zk-everything/zk-everything-joe/Hyrax.md:42
msgid "Reduced Sumcheck Verification"
msgstr "Reduced Sumcheck Verification"

#: src/zk-everything/zk-everything-joe/Hyrax.md:48
msgid "仍然以这个图为例，"
msgstr "仍然以这个图为例，"

#: src/zk-everything/zk-everything-joe/Hyrax.md:48
msgid "，则"
msgstr "，则"

#: src/zk-everything/zk-everything-joe/Hyrax.md:48
msgid "；第0层，"
msgstr "；第0层，"

#: src/zk-everything/zk-everything-joe/Hyrax.md:48
msgid "；第1层，"
msgstr "；第1层，"

#: src/zk-everything/zk-everything-joe/Hyrax.md:48
msgid "；第2层，"
msgstr "；第2层，"

#: src/zk-everything/zk-everything-joe/Hyrax.md:52
msgid "Number of Sumcheck Commitments"
msgstr "Number of Sumcheck Commitments"

#: src/zk-everything/zk-everything-joe/Hyrax.md:56
msgid ""
"为了简单起见，上一篇GKR with ZK Argument 中Sumcheck 协议每次round prover 发送"
"给verifier 的多项式系数的commitment的个数我们固定都是4，也就是说多项式的"
"degree全为3。**其实prover 需要commit的多项式的degree是有变化的**。"
msgstr ""
"为了简单起见，上一篇GKR with ZK Argument 中Sumcheck 协议每次round prover 发送"
"给verifier 的多项式系数的commitment的个数我们固定都是4，也就是说多项式的"
"degree全为3。**其实prover 需要commit的多项式的degree是有变化的**。"

#: src/zk-everything/zk-everything-joe/Hyrax.md:62
#: src/zk-everything/zk-everything-joe/Hyrax.md:68
msgid "当round "
msgstr "当round "

#: src/zk-everything/zk-everything-joe/Hyrax.md:62
msgid "\\<="
msgstr "\\<="

#: src/zk-everything/zk-everything-joe/Hyrax.md:62
msgid " 时，prover commit的多项式的degree为3，也就是说commitment的个数为4："
msgstr " 时，prover commit的多项式的degree为3，也就是说commitment的个数为4："

#: src/zk-everything/zk-everything-joe/Hyrax.md:68
msgid " 时，prover commit的多项式的degree为2， 也就是说commitment的个数为3:"
msgstr " 时，prover commit的多项式的degree为2， 也就是说commitment的个数为3:"

#: src/zk-everything/zk-everything-joe/Hyrax.md:74
msgid "Sumcheck Verifications"
msgstr "Sumcheck Verifications"

#: src/zk-everything/zk-everything-joe/Hyrax.md:78
msgid ""
"我们试图把verifier sumcheck 协议中所有round的校验等式且一个矩阵点乘运算表示："
msgstr ""
"我们试图把verifier sumcheck 协议中所有round的校验等式且一个矩阵点乘运算表示："

#: src/zk-everything/zk-everything-joe/Hyrax.md:84
msgid "其中每个round prover发送的message 为："
msgstr "其中每个round prover发送的message 为："

#: src/zk-everything/zk-everything-joe/Hyrax.md:86
#: src/zk-everything/zk-everything-joe/Hyrax.md:98
#: src/zk-everything/zk-everything-joe/Hyrax.md:102
#: src/zk-everything/zk-everything-joe/Hyrax.md:116
#: src/zk-everything/zk-everything-joe/Hyrax.md:122
msgid "last"
msgstr "last"

#: src/zk-everything/zk-everything-joe/Hyrax.md:90
msgid "把它们聚合到一个向量里："
msgstr "把它们聚合到一个向量里："

#: src/zk-everything/zk-everything-joe/Hyrax.md:96
msgid "其中每个round verifier 需要验证时用的参数："
msgstr "其中每个round verifier 需要验证时用的参数："

#: src/zk-everything/zk-everything-joe/Hyrax.md:100
msgid "把它们聚合到一个矩阵里："
msgstr "把它们聚合到一个矩阵里："

#: src/zk-everything/zk-everything-joe/Hyrax.md:106
msgid "每一个round verifier 校验的结果："
msgstr "每一个round verifier 校验的结果："

#: src/zk-everything/zk-everything-joe/Hyrax.md:110
msgid "备注：其中，"
msgstr "备注：其中，"

#: src/zk-everything/zk-everything-joe/Hyrax.md:110
msgid ""
" 是第1个round 需要校验的sumcheck 值，是verifier 随机采样的第0层电路编码的"
"evaluation值，也是prover 第1个round要证明的值。"
msgstr ""
" 是第1个round 需要校验的sumcheck 值，是verifier 随机采样的第0层电路编码的"
"evaluation值，也是prover 第1个round要证明的值。"

#: src/zk-everything/zk-everything-joe/Hyrax.md:114
msgid "汇总一下就是："
msgstr "汇总一下就是："

#: src/zk-everything/zk-everything-joe/Hyrax.md:120
msgid "矩阵"
msgstr "矩阵"

#: src/zk-everything/zk-everything-joe/Hyrax.md:120
msgid " 需要verifier 自行计算，用红色标记的向量"
msgstr " 需要verifier 自行计算，用红色标记的向量"

#: src/zk-everything/zk-everything-joe/Hyrax.md:120
msgid " 和 向量"
msgstr " 和 向量"

#: src/zk-everything/zk-everything-joe/Hyrax.md:120
msgid ""
" 都是需要prover 进行commit。 如果说仍然是一个field对应一个commitment,那么"
"commit之后的校验就变成了:"
msgstr ""
" 都是需要prover 进行commit。 如果说仍然是一个field对应一个commitment,那么"
"commit之后的校验就变成了:"

#: src/zk-everything/zk-everything-joe/Hyrax.md:124
msgid "有没有觉得向量"
msgstr "有没有觉得向量"

#: src/zk-everything/zk-everything-joe/Hyrax.md:124
msgid ""
" size太大了(19个commitment)？是的，它直接影响着协议过程中的communication "
"cost，所以需要进行压缩处理。"
msgstr ""
" size太大了(19个commitment)？是的，它直接影响着协议过程中的communication "
"cost，所以需要进行压缩处理。"

#: src/zk-everything/zk-everything-joe/Hyrax.md:129
msgid "Reducing Sumcheck Commitments"
msgstr "Reducing Sumcheck Commitments"

#: src/zk-everything/zk-everything-joe/Hyrax.md:132
msgid "一个field 对应一个commitment: "
msgstr "一个field 对应一个commitment: "

#: src/zk-everything/zk-everything-joe/Hyrax.md:133
msgid " 每次commit的时候还需要一个blind factor "
msgstr " 每次commit的时候还需要一个blind factor "

#: src/zk-everything/zk-everything-joe/Hyrax.md:139
msgid ""
"这样的话Sumcheck 协议中的commitment个数就会与要commit的多项式的degree成线性关"
"系。如果把一个多项式所有参数的commitment压缩成一个commitment： "
msgstr ""
"这样的话Sumcheck 协议中的commitment个数就会与要commit的多项式的degree成线性关"
"系。如果把一个多项式所有参数的commitment压缩成一个commitment： "

#: src/zk-everything/zk-everything-joe/Hyrax.md:142
msgid "这样的话就需要多个generator "
msgstr "这样的话就需要多个generator "

#: src/zk-everything/zk-everything-joe/Hyrax.md:142
msgid " 了，但blind factor 变成了一个"
msgstr " 了，但blind factor 变成了一个"

#: src/zk-everything/zk-everything-joe/Hyrax.md:146
msgid "我们用矩阵第一行的校验为例： "
msgstr "我们用矩阵第一行的校验为例： "

#: src/zk-everything/zk-everything-joe/Hyrax.md:147
#: src/zk-everything/zk-everything-joe/Hyrax.md:156
#: src/zk-everything/zk-everything-joe/Hyrax.md:168
#: src/zk-everything/zk-everything-joe/Hyrax.md:191
#: src/zk-everything/zk-everything-joe/Hyrax.md:201
#: src/zk-everything/zk-everything-joe/Hyrax.md:208
#: src/zk-everything/zk-everything-joe/Hyrax.md:213
#: src/zk-everything/zk-everything-joe/Hyrax.md:324 src/public
#: goods/第二章.md:80 goods/第二章.md:84 goods/第二章.md:86
msgid "⟨"
msgstr "⟨"

#: src/zk-everything/zk-everything-joe/Hyrax.md:147
#: src/zk-everything/zk-everything-joe/Hyrax.md:156
#: src/zk-everything/zk-everything-joe/Hyrax.md:168
#: src/zk-everything/zk-everything-joe/Hyrax.md:181
#: src/zk-everything/zk-everything-joe/Hyrax.md:191
#: src/zk-everything/zk-everything-joe/Hyrax.md:208
#: src/zk-everything/zk-everything-joe/Hyrax.md:213
#: src/zk-everything/zk-everything-joe/Hyrax.md:228
#: src/zk-everything/zk-everything-joe/Hyrax.md:324 src/public
#: goods/第二章.md:84 goods/第二章.md:86
msgid "⟩"
msgstr "⟩"

#: src/zk-everything/zk-everything-joe/Hyrax.md:149
msgid "如果把commitment "
msgstr "如果把commitment "

#: src/zk-everything/zk-everything-joe/Hyrax.md:149
msgid " 压缩成一个commitment "
msgstr " 压缩成一个commitment "

#: src/zk-everything/zk-everything-joe/Hyrax.md:149
msgid ""
"，verifier 就无法直接通过上面的等式来进行校验。这其实就转换成了大家所熟知的"
"IPA 证明，即Inner Product Argument verification。 接下来简单描述一下IPA协议的"
"执行过程"
msgstr ""
"，verifier 就无法直接通过上面的等式来进行校验。这其实就转换成了大家所熟知的"
"IPA 证明，即Inner Product Argument verification。 接下来简单描述一下IPA协议的"
"执行过程"

#: src/zk-everything/zk-everything-joe/Hyrax.md:153
msgid "IPA Protocol Overview"
msgstr "IPA Protocol Overview"

#: src/zk-everything/zk-everything-joe/Hyrax.md:155
msgid "prover 要证明query 向量"
msgstr "prover 要证明query 向量"

#: src/zk-everything/zk-everything-joe/Hyrax.md:155
msgid " 满足: "
msgstr " 满足: "

#: src/zk-everything/zk-everything-joe/Hyrax.md:158
#: src/zk-everything/zk-everything-joe/Hyrax.md:188
msgid "Step One"
msgstr "Step One"

#: src/zk-everything/zk-everything-joe/Hyrax.md:160
msgid "prover 生成多项式的commitment，并发送给verifier"
msgstr "prover 生成多项式的commitment，并发送给verifier"

#: src/zk-everything/zk-everything-joe/Hyrax.md:164
#: src/zk-everything/zk-everything-joe/Hyrax.md:211
msgid "Step Two"
msgstr "Step Two"

#: src/zk-everything/zk-everything-joe/Hyrax.md:166
msgid "prover 采样一个与向量"
msgstr "prover 采样一个与向量"

#: src/zk-everything/zk-everything-joe/Hyrax.md:166
#: src/zk-everything/zk-everything-joe/Hyrax.md:213
msgid " 等长的向量"
msgstr " 等长的向量"

#: src/zk-everything/zk-everything-joe/Hyrax.md:166
msgid "，对它进行commit；同样也与query 向量"
msgstr "，对它进行commit；同样也与query 向量"

#: src/zk-everything/zk-everything-joe/Hyrax.md:166
msgid " 交互，结果也进行commit，最后同样也发送给verifier"
msgstr " 交互，结果也进行commit，最后同样也发送给verifier"

#: src/zk-everything/zk-everything-joe/Hyrax.md:170
#: src/zk-everything/zk-everything-joe/Hyrax.md:220
msgid "Step Three"
msgstr "Step Three"

#: src/zk-everything/zk-everything-joe/Hyrax.md:172
#: src/zk-everything/zk-everything-joe/Hyrax.md:222
msgid "verifier 发送一个challenge factor "
msgstr "verifier 发送一个challenge factor "

#: src/zk-everything/zk-everything-joe/Hyrax.md:172
msgid " 给prover，prover 计算 "
msgstr " 给prover，prover 计算 "

#: src/zk-everything/zk-everything-joe/Hyrax.md:175
msgid "并把它们全部发送给verifier。"
msgstr "并把它们全部发送给verifier。"

#: src/zk-everything/zk-everything-joe/Hyrax.md:177
#: src/zk-everything/zk-everything-joe/Hyrax.md:225
msgid "Step Four"
msgstr "Step Four"

#: src/zk-everything/zk-everything-joe/Hyrax.md:179
msgid "根据commitment 同态性质，verifier 验证："
msgstr "根据commitment 同态性质，verifier 验证："

#: src/zk-everything/zk-everything-joe/Hyrax.md:185
msgid "Reducing Sumcheck into IPA"
msgstr "Reducing Sumcheck into IPA"

#: src/zk-everything/zk-everything-joe/Hyrax.md:186
msgid "最后我们看看Hyrax 中Sumcheck 协议被reduced成IPA 协议后的执行过程："
msgstr "最后我们看看Hyrax 中Sumcheck 协议被reduced成IPA 协议后的执行过程："

#: src/zk-everything/zk-everything-joe/Hyrax.md:190
msgid "把多个verification fold成一个： "
msgstr "把多个verification fold成一个： "

#: src/zk-everything/zk-everything-joe/Hyrax.md:191
#: src/zk-everything/zk-everything-joe/Hyrax.md:201
#: src/zk-everything/zk-everything-joe/Hyrax.md:207
#: src/zk-everything/zk-everything-joe/Hyrax.md:208
#: src/zk-everything/zk-everything-joe/Hyrax.md:213
#: src/zk-everything/zk-everything-joe/Hyrax.md:214
#: src/zk-everything/zk-everything-joe/Hyrax.md:223
#: src/zk-everything/zk-everything-joe/Hyrax.md:228
msgid "J"
msgstr "J"

#: src/zk-everything/zk-everything-joe/Hyrax.md:194
#: src/zk-everything/zk-everything-joe/Hyrax.md:197
msgid "对"
msgstr "对"

#: src/zk-everything/zk-everything-joe/Hyrax.md:194
#: src/zk-everything/zk-everything-joe/Hyrax.md:197
msgid " 进行commit： "
msgstr " 进行commit： "

#: src/zk-everything/zk-everything-joe/Hyrax.md:200
msgid "commit 之后，prover要证明的变成了： "
msgstr "commit 之后，prover要证明的变成了： "

#: src/zk-everything/zk-everything-joe/Hyrax.md:203
msgid "把两组commitment "
msgstr "把两组commitment "

#: src/zk-everything/zk-everything-joe/Hyrax.md:203
#: src/zk-everything/zk-everything-joe/Hyrax.md:216
msgid " 全部发送给verifier。"
msgstr " 全部发送给verifier。"

#: src/zk-everything/zk-everything-joe/Hyrax.md:207
msgid "定义 "
msgstr "定义 "

#: src/zk-everything/zk-everything-joe/Hyrax.md:207
msgid "，即剔除掉最后三个元素，则： "
msgstr "，即剔除掉最后三个元素，则： "

#: src/zk-everything/zk-everything-joe/Hyrax.md:213
msgid "prover 随机生成一个与 "
msgstr "prover 随机生成一个与 "

#: src/zk-everything/zk-everything-joe/Hyrax.md:213
msgid "，同"
msgstr "，同"

#: src/zk-everything/zk-everything-joe/Hyrax.md:213
msgid " 一样计算它的commitment，及"
msgstr " 一样计算它的commitment，及"

#: src/zk-everything/zk-everything-joe/Hyrax.md:213
msgid " 的commitment： "
msgstr " 的commitment： "

#: src/zk-everything/zk-everything-joe/Hyrax.md:214
msgid "⟩\\]"
msgstr "⟩\\]"

#: src/zk-everything/zk-everything-joe/Hyrax.md:216
msgid "把两组 commitment "
msgstr "把两组 commitment "

#: src/zk-everything/zk-everything-joe/Hyrax.md:222
msgid " 给prover，prover 计算： "
msgstr " 给prover，prover 计算： "

#: src/zk-everything/zk-everything-joe/Hyrax.md:223
#: src/zk-everything/zk-everything-joe/Hyrax.md:228
msgid "◯"
msgstr "◯"

#: src/zk-everything/zk-everything-joe/Hyrax.md:223
#: src/zk-everything/zk-everything-joe/Hyrax.md:228
msgid "⎩"
msgstr "⎩"

#: src/zk-everything/zk-everything-joe/Hyrax.md:223
#: src/zk-everything/zk-everything-joe/Hyrax.md:228
msgid "⎨"
msgstr "⎨"

#: src/zk-everything/zk-everything-joe/Hyrax.md:223
#: src/zk-everything/zk-everything-joe/Hyrax.md:228
msgid "⎧"
msgstr "⎧"

#: src/zk-everything/zk-everything-joe/Hyrax.md:232
msgid ""
"到此为止多个round 的Sumcheck verification就被转换成了一个IPA verification，"
"proof size(commitments) 也被进一步压缩。"
msgstr ""
"到此为止多个round 的Sumcheck verification就被转换成了一个IPA verification，"
"proof size(commitments) 也被进一步压缩。"

#: src/zk-everything/zk-everything-joe/Hyrax.md:236
msgid "Reduced Witness Evaluation"
msgstr "Reduced Witness Evaluation"

#: src/zk-everything/zk-everything-joe/Hyrax.md:240
msgid "Recall"
msgstr "Recall"

#: src/zk-everything/zk-everything-joe/Hyrax.md:244
msgid ""
"GKR with ZK Argument协议的Final Step是要对最下面一层(input + witness) 的某个"
"evaluation 进行证明，我们仍然用GKR with ZK Argument中的例子： "
msgstr ""
"GKR with ZK Argument协议的Final Step是要对最下面一层(input + witness) 的某个"
"evaluation 进行证明，我们仍然用GKR with ZK Argument中的例子： "

#: src/zk-everything/zk-everything-joe/Hyrax.md:249
msgid ""
"需要verifier基于Step ZERO发送过来的每个witness对应的commitment 计算witness "
"MLE上的evaluation值对应的commitment： "
msgstr ""
"需要verifier基于Step ZERO发送过来的每个witness对应的commitment 计算witness "
"MLE上的evaluation值对应的commitment： "

#: src/zk-everything/zk-everything-joe/Hyrax.md:254
msgid ""
"它的问题在于，需要对每个witness进行commit(上面红色标记的部分)，导致"
"communication cost 和 verification cost都会比较高，与witness的长度成线性关系"
msgstr ""
"它的问题在于，需要对每个witness进行commit(上面红色标记的部分)，导致"
"communication cost 和 verification cost都会比较高，与witness的长度成线性关系"

#: src/zk-everything/zk-everything-joe/Hyrax.md:254
msgid "，Hyrax 对其进行了压缩，变成了子线性关系"
msgstr "，Hyrax 对其进行了压缩，变成了子线性关系"

#: src/zk-everything/zk-everything-joe/Hyrax.md:258
msgid "Square-root commitment scheme"
msgstr "Square-root commitment scheme"

#: src/zk-everything/zk-everything-joe/Hyrax.md:262
msgid ""
"Hyrax 在这里的整体思路是，把上面witness evaluation 的commitment的计算代理给了"
"prover，prover 提供计算结果的同时需要提供相应的proof给verifier 验证，当然了"
"verifier 验证的成本肯定要低于自己计算的成本，满足succinct 特性： "
msgstr ""
"Hyrax 在这里的整体思路是，把上面witness evaluation 的commitment的计算代理给了"
"prover，prover 提供计算结果的同时需要提供相应的proof给verifier 验证，当然了"
"verifier 验证的成本肯定要低于自己计算的成本，满足succinct 特性： "

#: src/zk-everything/zk-everything-joe/Hyrax.md:265
msgid "把witness evaluation 的commitment的证明最终变成了一个IPA 的证明。"
msgstr "把witness evaluation 的commitment的证明最终变成了一个IPA 的证明。"

#: src/zk-everything/zk-everything-joe/Hyrax.md:269
msgid "实例中"
msgstr "实例中"

#: src/zk-everything/zk-everything-joe/Hyrax.md:273
msgid "Evaluation and Proof"
msgstr "Evaluation and Proof"

#: src/zk-everything/zk-everything-joe/Hyrax.md:276
msgid "prover 把witness 向量"
msgstr "prover 把witness 向量"

#: src/zk-everything/zk-everything-joe/Hyrax.md:276
msgid "转换成一个矩阵"
msgstr "转换成一个矩阵"

#: src/zk-everything/zk-everything-joe/Hyrax.md:276
msgid "表示，"
msgstr "表示，"

#: src/zk-everything/zk-everything-joe/Hyrax.md:276
#: src/zk-everything/zk-everything-joe/Hyrax.md:297
msgid "/2"
msgstr "/2"

#: src/zk-everything/zk-everything-joe/Hyrax.md:276
msgid " 其中"
msgstr " 其中"

#: src/zk-everything/zk-everything-joe/Hyrax.md:276
msgid "分别代表行和列： "
msgstr "分别代表行和列： "

#: src/zk-everything/zk-everything-joe/Hyrax.md:281
msgid "按行进行commit： "
msgstr "按行进行commit： "

#: src/zk-everything/zk-everything-joe/Hyrax.md:284
msgid "把witness的commitment "
msgstr "把witness的commitment "

#: src/zk-everything/zk-everything-joe/Hyrax.md:284
msgid " 连同evaluation 的commitment "
msgstr " 连同evaluation 的commitment "

#: src/zk-everything/zk-everything-joe/Hyrax.md:284
msgid " 一起发送给verifier。"
msgstr " 一起发送给verifier。"

#: src/zk-everything/zk-everything-joe/Hyrax.md:288
msgid "Compressed Lagrange Basis"
msgstr "Compressed Lagrange Basis"

#: src/zk-everything/zk-everything-joe/Hyrax.md:291
msgid "基于MLE 多项式： "
msgstr "基于MLE 多项式： "

#: src/zk-everything/zk-everything-joe/Hyrax.md:296
msgid "我们把Lagrange Basis Polynomial "
msgstr "我们把Lagrange Basis Polynomial "

#: src/zk-everything/zk-everything-joe/Hyrax.md:296
msgid " 一拆为二： "
msgstr " 一拆为二： "

#: src/zk-everything/zk-everything-joe/Hyrax.md:297
#: src/zk-everything/zk-everything-joe/Hyrax.md:311
msgid "ˇ"
msgstr "ˇ"

#: src/zk-everything/zk-everything-joe/Hyrax.md:297
msgid "ˆ"
msgstr "ˆ"

#: src/zk-everything/zk-everything-joe/Hyrax.md:301
msgid "结合上面的witness 矩阵"
msgstr "结合上面的witness 矩阵"

#: src/zk-everything/zk-everything-joe/Hyrax.md:301
msgid "， 一定有： "
msgstr "， 一定有： "

#: src/zk-everything/zk-everything-joe/Hyrax.md:306
msgid "通过两组"
msgstr "通过两组"

#: src/zk-everything/zk-everything-joe/Hyrax.md:306
msgid "的子向量来represent 长度为"
msgstr "的子向量来represent 长度为"

#: src/zk-everything/zk-everything-joe/Hyrax.md:306
msgid ""
"的整个向量，这里应该是一种很常见的succinct 做法。比如protostar 论文中3.5 节"
"compressed verification也是采用了这种技巧，细节可以参考 https://"
"learnblockchain.cn/article/6503"
msgstr ""
"的整个向量，这里应该是一种很常见的succinct 做法。比如protostar 论文中3.5 节"
"compressed verification也是采用了这种技巧，细节可以参考 https://"
"learnblockchain.cn/article/6503"

#: src/zk-everything/zk-everything-joe/Hyrax.md:310
msgid "所以verifier 需要自己计算拿到两个向量(为了简化，实例中"
msgstr "所以verifier 需要自己计算拿到两个向量(为了简化，实例中"

#: src/zk-everything/zk-everything-joe/Hyrax.md:310
msgid "，所以"
msgstr "，所以"

#: src/zk-everything/zk-everything-joe/Hyrax.md:310
msgid "其实是没有起到compress作用的，如果"
msgstr "其实是没有起到compress作用的，如果"

#: src/zk-everything/zk-everything-joe/Hyrax.md:310
msgid "compress 效果就出来了，读者可以自行举例)： "
msgstr "compress 效果就出来了，读者可以自行举例)： "

#: src/zk-everything/zk-everything-joe/Hyrax.md:313
msgid "并计算得到： "
msgstr "并计算得到： "

#: src/zk-everything/zk-everything-joe/Hyrax.md:315
msgid " 为commitment，"
msgstr " 为commitment，"

#: src/zk-everything/zk-everything-joe/Hyrax.md:315
msgid " 为verifier 刚计算好的scalar，最终verifier 拿到一个commitment "
msgstr " 为verifier 刚计算好的scalar，最终verifier 拿到一个commitment "

#: src/zk-everything/zk-everything-joe/Hyrax.md:319
msgid "IPA for Evaluation Verification"
msgstr "IPA for Evaluation Verification"

#: src/zk-everything/zk-everything-joe/Hyrax.md:323
msgid ""
"最终verifier 需要对prover 提供的evaluation的commitment进行验证，这时的验证就"
"变成了标准的IPA 验证： "
msgstr ""
"最终verifier 需要对prover 提供的evaluation的commitment进行验证，这时的验证就"
"变成了标准的IPA 验证： "

#: src/zk-everything/zk-everything-joe/Hyrax.md:326
msgid ""
"关于IPA 的执行过程这里就不再赘述了，可以参考上面的IPA Protocol Overview。"
msgstr ""
"关于IPA 的执行过程这里就不再赘述了，可以参考上面的IPA Protocol Overview。"

#: src/zk-everything/zk-everything-joe/Hyrax.md:330
msgid "Summary"
msgstr "Summary"

#: src/zk-everything/zk-everything-joe/Hyrax.md:332
msgid ""
"到此，Hyrax 协议也就完整了。简单总结一下，Hyrax 本质就是一套GKR 协议，它在"
"proof size 和 verification 方面做了一些工作。"
msgstr ""
"到此，Hyrax 协议也就完整了。简单总结一下，Hyrax 本质就是一套GKR 协议，它在"
"proof size 和 verification 方面做了一些工作。"

#: src/zk-everything/zk-everything-joe/Hyrax.md:343
msgid ""
"【3】protostar compressed verification: https://learnblockchain.cn/"
"article/6503"
msgstr ""
"【3】protostar compressed verification: https://learnblockchain.cn/"
"article/6503"

#: src/zk-everything/zk-everything-joe/Spartan.md:3
msgid ""
"作者: [白菜](https://github.com/PayneJoe)   \n"
"标签: Sumcheck, IPA, GKR, Hyrax, VSM, Spice, Spark, Spartan   \n"
"时间: 2023-10-06 "
msgstr ""
"作者: [白菜](https://github.com/PayneJoe)   \n"
"标签: Sumcheck, IPA, GKR, Hyrax, VSM, Spice, Spark, Spartan   \n"
"时间: 2023-10-06 "

#: src/zk-everything/zk-everything-joe/Spartan.md:9
msgid "Table of Content"
msgstr "Table of Content"

#: src/zk-everything/zk-everything-joe/Spartan.md:10
msgid "[Table of Content](#table-of-content)"
msgstr "[Table of Content](#table-of-content)"

#: src/zk-everything/zk-everything-joe/Spartan.md:11
msgid "[Motivation](#motivation)"
msgstr "[Motivation](#motivation)"

#: src/zk-everything/zk-everything-joe/Spartan.md:12
msgid "[Introduction](#introduction)"
msgstr "[Introduction](#introduction)"

#: src/zk-everything/zk-everything-joe/Spartan.md:13
msgid "[VSM in Spice](#vsm-in-spice)"
msgstr "[VSM in Spice](#vsm-in-spice)"

#: src/zk-everything/zk-everything-joe/Spartan.md:14
msgid "[Takeaways](#takeaways)"
msgstr "[Takeaways](#takeaways)"

#: src/zk-everything/zk-everything-joe/Spartan.md:15
msgid "[Memory Check for Spark](#memory-check-for-spark)"
msgstr "[Memory Check for Spark](#memory-check-for-spark)"

#: src/zk-everything/zk-everything-joe/Spartan.md:16
msgid "[Problem](#problem)"
msgstr "[Problem](#problem)"

#: src/zk-everything/zk-everything-joe/Spartan.md:17
msgid "[Resolution](#resolution)"
msgstr "[Resolution](#resolution)"

#: src/zk-everything/zk-everything-joe/Spartan.md:18
msgid "[Initialization](#initialization)"
msgstr "[Initialization](#initialization)"

#: src/zk-everything/zk-everything-joe/Spartan.md:19
msgid "[Operation](#operation)"
msgstr "[Operation](#operation)"

#: src/zk-everything/zk-everything-joe/Spartan.md:20
msgid "[Verification](#verification)"
msgstr "[Verification](#verification)"

#: src/zk-everything/zk-everything-joe/Spartan.md:21
msgid "[Arithmetic](#arithmetic)"
msgstr "[Arithmetic](#arithmetic)"

#: src/zk-everything/zk-everything-joe/Spartan.md:23
#: src/zk-everything/zk-everything-joe/Spartan.md:24
#: src/zk-everything/zk-everything-joe/Spartan.md:25
#: src/zk-everything/zk-everything-joe/Spartan.md:26
msgid "[for "
msgstr "[for "

#: src/zk-everything/zk-everything-joe/Spartan.md:23
#: src/zk-everything/zk-everything-joe/Spartan.md:24
#: src/zk-everything/zk-everything-joe/Spartan.md:25
#: src/zk-everything/zk-everything-joe/Spartan.md:26
msgid "amma"
msgstr "amma"

#: src/zk-everything/zk-everything-joe/Spartan.md:23
#: src/zk-everything/zk-everything-joe/Spartan.md:24
#: src/zk-everything/zk-everything-joe/Spartan.md:25
#: src/zk-everything/zk-everything-joe/Spartan.md:26
msgid "\\_1"
msgstr "\\_1"

#: src/zk-everything/zk-everything-joe/Spartan.md:23
#: src/zk-everything/zk-everything-joe/Spartan.md:24
#: src/zk-everything/zk-everything-joe/Spartan.md:25
#: src/zk-everything/zk-everything-joe/Spartan.md:26
msgid "_2"
msgstr "_2"

#: src/zk-everything/zk-everything-joe/Spartan.md:23
#: src/zk-everything/zk-everything-joe/Spartan.md:93
#: src/zk-everything/zk-everything-joe/Spartan.md:136
#: src/zk-everything/zk-everything-joe/Spartan.md:154
#: src/zk-everything/zk-everything-joe/Spartan.md:155
#: src/zk-everything/zk-everything-joe/Spartan.md:166
#: src/zk-everything/zk-everything-joe/Spartan.md:195
#: src/zk-everything/zk-everything-joe/Spartan.md:200
#: src/zk-everything/zk-everything-joe/Spartan.md:207
#: src/zk-everything/zk-everything-joe/Spartan.md:232
#: src/zk-everything/zk-everything-joe/Spartan.md:240
#: src/zk-everything/zk-everything-joe/Spartan.md:242
msgid "ni"
msgstr "ni"

#: src/zk-everything/zk-everything-joe/Spartan.md:23
#: src/zk-everything/zk-everything-joe/Spartan.md:24
#: src/zk-everything/zk-everything-joe/Spartan.md:25
#: src/zk-everything/zk-everything-joe/Spartan.md:26 src/Nova/SuperNova.md:66
#: src/public goods/第二章.md:12 goods/第二章.md:17 goods/第二章.md:29
msgid "_"
msgstr "_"

#: src/zk-everything/zk-everything-joe/Spartan.md:23
msgid " evaluation](#for-widetildeh_gamma_1-gamma_2init_row-evaluation)"
msgstr " evaluation](#for-widetildeh_gamma_1-gamma_2init_row-evaluation)"

#: src/zk-everything/zk-everything-joe/Spartan.md:24
msgid " evaluation](#for-widetildeh_gamma_1-gamma_2ws_row-evaluation)"
msgstr " evaluation](#for-widetildeh_gamma_1-gamma_2ws_row-evaluation)"

#: src/zk-everything/zk-everything-joe/Spartan.md:25
msgid " evaluation](#for-widetildeh_gamma_1-gamma_2audit_row-evaluation)"
msgstr " evaluation](#for-widetildeh_gamma_1-gamma_2audit_row-evaluation)"

#: src/zk-everything/zk-everything-joe/Spartan.md:26
#: src/zk-everything/zk-everything-joe/Spartan.md:89
#: src/zk-everything/zk-everything-joe/Spartan.md:93
#: src/zk-everything/zk-everything-joe/Spartan.md:232
#: src/zk-everything/zk-everything-joe/Spartan.md:275
msgid "RS"
msgstr "RS"

#: src/zk-everything/zk-everything-joe/Spartan.md:26
msgid " evaluation](#for-widetildeh_gamma_1-gamma_2rs_row-evaluation)"
msgstr " evaluation](#for-widetildeh_gamma_1-gamma_2rs_row-evaluation)"

#: src/zk-everything/zk-everything-joe/Spartan.md:27
msgid "[Spark Overview](#spark-overview)"
msgstr "[Spark Overview](#spark-overview)"

#: src/zk-everything/zk-everything-joe/Spartan.md:28
msgid "[Target of Spark](#target-of-spark)"
msgstr "[Target of Spark](#target-of-spark)"

#: src/zk-everything/zk-everything-joe/Spartan.md:29
msgid "[Technic in Spark](#technic-in-spark)"
msgstr "[Technic in Spark](#technic-in-spark)"

#: src/zk-everything/zk-everything-joe/Spartan.md:30
msgid "[Spartan Protolcol Overview](#spartan-protolcol-overview)"
msgstr "[Spartan Protolcol Overview](#spartan-protolcol-overview)"

#: src/zk-everything/zk-everything-joe/Spartan.md:31
msgid "[Round One](#round-one)"
msgstr "[Round One](#round-one)"

#: src/zk-everything/zk-everything-joe/Spartan.md:32
msgid "[Round Two](#round-two)"
msgstr "[Round Two](#round-two)"

#: src/zk-everything/zk-everything-joe/Spartan.md:33
msgid "[Round Three](#round-three)"
msgstr "[Round Three](#round-three)"

#: src/zk-everything/zk-everything-joe/Spartan.md:34
msgid "[One more thing](#one-more-thing)"
msgstr "[One more thing](#one-more-thing)"

#: src/zk-everything/zk-everything-joe/Spartan.md:35
msgid "[Thanks](#thanks)"
msgstr "[Thanks](#thanks)"

#: src/zk-everything/zk-everything-joe/Spartan.md:44
msgid ""
"缘于folding，缘于NOVA，缘于Setty，了解到了Spartan，但当时并不认识它，所以才有"
"了本篇及前两篇前置\\[3\\] 和\\[7\\]...... "
msgstr ""
"缘于folding，缘于NOVA，缘于Setty，了解到了Spartan，但当时并不认识它，所以才有"
"了本篇及前两篇前置\\[3\\] 和\\[7\\]...... "

#: src/zk-everything/zk-everything-joe/Spartan.md:48
msgid ""
"关于Spartan，在ZK领域可能时间上相对也有点儿远了，暂且不考虑它在某些方面的争"
"议，它的一些思想其实已经影响到其它比较热门的方向了，比如当下的热点Lasso & "
"Jolt，所以它的研究意义仍然很大，尤其是其中的Spark。"
msgstr ""
"关于Spartan，在ZK领域可能时间上相对也有点儿远了，暂且不考虑它在某些方面的争"
"议，它的一些思想其实已经影响到其它比较热门的方向了，比如当下的热点Lasso & "
"Jolt，所以它的研究意义仍然很大，尤其是其中的Spark。"

#: src/zk-everything/zk-everything-joe/Spartan.md:52
msgid "Introduction"
msgstr "Introduction"

#: src/zk-everything/zk-everything-joe/Spartan.md:54
msgid ""
"本文是Spartan \\[4\\] research的终结篇，将重点囊括Spark 和 Spice \\[1\\]，前"
"两篇\\[3\\] 和 \\[7\\] 是本篇的预备部分，如果对Sumcheck 不熟悉，也可以参考一"
"下\\[6\\]。"
msgstr ""
"本文是Spartan \\[4\\] research的终结篇，将重点囊括Spark 和 Spice \\[1\\]，前"
"两篇\\[3\\] 和 \\[7\\] 是本篇的预备部分，如果对Sumcheck 不熟悉，也可以参考一"
"下\\[6\\]。"

#: src/zk-everything/zk-everything-joe/Spartan.md:58
msgid ""
"Spark 是Spartan 整个协议的core part，Memory Check是Spark 的core part，而VSM又"
"是Memory Check或者Spice的core part。本篇文章将从内向外延伸，读者尽管从感兴趣"
"的地方切入即可。"
msgstr ""
"Spark 是Spartan 整个协议的core part，Memory Check是Spark 的core part，而VSM又"
"是Memory Check或者Spice的core part。本篇文章将从内向外延伸，读者尽管从感兴趣"
"的地方切入即可。"

#: src/zk-everything/zk-everything-joe/Spartan.md:62
msgid "VSM in Spice"
msgstr "VSM in Spice"

#: src/zk-everything/zk-everything-joe/Spartan.md:64
msgid "VSM，全称Verifiable State Machine，这个概念源自Spice\\[1\\]。"
msgstr "VSM，全称Verifiable State Machine，这个概念源自Spice\\[1\\]。"

#: src/zk-everything/zk-everything-joe/Spartan.md:68
msgid ""
"它的一个intuitive 的理解就是：把任何一个storage 对象当作一个State Machine，在"
"这个State Machine上的任何operation 导致其state 的transition 都可以生成相应的"
"proof 给verifier 验证。这就是所谓的Verifiable State Machine。"
msgstr ""
"它的一个intuitive 的理解就是：把任何一个storage 对象当作一个State Machine，在"
"这个State Machine上的任何operation 导致其state 的transition 都可以生成相应的"
"proof 给verifier 验证。这就是所谓的Verifiable State Machine。"

#: src/zk-everything/zk-everything-joe/Spartan.md:72
msgid ""
"以单个Query或者read operation为例，我们看看Spice 中的VSM 长什么样子： ![Alt "
"text](./img/image-8.png)"
msgstr ""
"以单个Query或者read operation为例，我们看看Spice 中的VSM 长什么样子： ![Alt "
"text](./img/image-8.png)"

#: src/zk-everything/zk-everything-joe/Spartan.md:77
msgid "关于Spice的其它细节这里不展开，大家可以参考原始资料Spice \\[1\\]。"
msgstr "关于Spice的其它细节这里不展开，大家可以参考原始资料Spice \\[1\\]。"

#: src/zk-everything/zk-everything-joe/Spartan.md:79
msgid "Takeaways"
msgstr "Takeaways"

#: src/zk-everything/zk-everything-joe/Spartan.md:81
msgid ""
"Spice 有两个drawback 或者特性：其一，批量验证，也就是n 个operation之后一起验"
"证，成本会平摊到每个operation上，所以成本会很低，但会有时间上的delay；其二，"
"如果验证不通过，是无法判断哪个operation 出的问题"
msgstr ""
"Spice 有两个drawback 或者特性：其一，批量验证，也就是n 个operation之后一起验"
"证，成本会平摊到每个operation上，所以成本会很低，但会有时间上的delay；其二，"
"如果验证不通过，是无法判断哪个operation 出的问题"

#: src/zk-everything/zk-everything-joe/Spartan.md:85
msgid ""
"Storage 作为三方一个独立存在的个体，state 通常以**key-value-timestamp**的格式"
"出现，它相比传统的key-value 的Storage 的区别就是加了一个可以**表征State "
"Machine的非常关键元素Timestamp**"
msgstr ""
"Storage 作为三方一个独立存在的个体，state 通常以**key-value-timestamp**的格式"
"出现，它相比传统的key-value 的Storage 的区别就是加了一个可以**表征State "
"Machine的非常关键元素Timestamp**"

#: src/zk-everything/zk-everything-joe/Spartan.md:89
msgid "Prover 自身维护两个set state "
msgstr "Prover 自身维护两个set state "

#: src/zk-everything/zk-everything-joe/Spartan.md:89
msgid "，发送一个query/read operation 会更新本地的这两个set state "
msgstr "，发送一个query/read operation 会更新本地的这两个set state "

#: src/zk-everything/zk-everything-joe/Spartan.md:89
msgid "，并update Storage的state "
msgstr "，并update Storage的state "

#: src/zk-everything/zk-everything-joe/Spartan.md:89
msgid " ，发送一个write operation 会更新本地的state "
msgstr " ，发送一个write operation 会更新本地的state "

#: src/zk-everything/zk-everything-joe/Spartan.md:89
msgid "，并update Storage 的state "
msgstr "，并update Storage 的state "

#: src/zk-everything/zk-everything-joe/Spartan.md:93
msgid "Verifier 拿着更新前的state "
msgstr "Verifier 拿着更新前的state "

#: src/zk-everything/zk-everything-joe/Spartan.md:93
msgid "，和更新后的state "
msgstr "，和更新后的state "

#: src/zk-everything/zk-everything-joe/Spartan.md:93
msgid "，以及operaton 过程产生的中间state 或者proof "
msgstr "，以及operaton 过程产生的中间state 或者proof "

#: src/zk-everything/zk-everything-joe/Spartan.md:93
msgid "，进行最后的验证，验证通过说明返回的结果没有问题"
msgstr "，进行最后的验证，验证通过说明返回的结果没有问题"

#: src/zk-everything/zk-everything-joe/Spartan.md:97
msgid "Memory Check for Spark"
msgstr "Memory Check for Spark"

#: src/zk-everything/zk-everything-joe/Spartan.md:99
msgid ""
"Spark 中Memory Check 的核心思想源自Spice\\[1\\]，Spice 支持读、写操作的验证，"
"而Spark 中只需要具备lookup 功能的验证，所以可以简单理解为read-only 版本的"
"Spice。"
msgstr ""
"Spark 中Memory Check 的核心思想源自Spice\\[1\\]，Spice 支持读、写操作的验证，"
"而Spark 中只需要具备lookup 功能的验证，所以可以简单理解为read-only 版本的"
"Spice。"

#: src/zk-everything/zk-everything-joe/Spartan.md:103
msgid ""
"验证query/lookup 的结果对与不对，上一节我们提到过，这里我们就以Spartan为背"
"景，举个实例detail一下它的执行过程，可以回答大家可能比较关心的两个问题：1. "
"memory check 究竟解决的是什么问题？2. 为什么它可以work？"
msgstr ""
"验证query/lookup 的结果对与不对，上一节我们提到过，这里我们就以Spartan为背"
"景，举个实例detail一下它的执行过程，可以回答大家可能比较关心的两个问题：1. "
"memory check 究竟解决的是什么问题？2. 为什么它可以work？"

#: src/zk-everything/zk-everything-joe/Spartan.md:107
msgid "Problem"
msgstr "Problem"

#: src/zk-everything/zk-everything-joe/Spartan.md:109
msgid "假定有这么两个query 向量： "
msgstr "假定有这么两个query 向量： "

#: src/zk-everything/zk-everything-joe/Spartan.md:114
msgid "另外，假定： "
msgstr "另外，假定： "

#: src/zk-everything/zk-everything-joe/Spartan.md:117
msgid "以及相应的两个Storage 对象，或者叫lookup table "
msgstr "以及相应的两个Storage 对象，或者叫lookup table "

#: src/zk-everything/zk-everything-joe/Spartan.md:117
#: src/zk-everything/zk-everything-joe/Spartan.md:343
msgid "： "
msgstr "： "

#: src/zk-everything/zk-everything-joe/Spartan.md:122
msgid "query 的过程：给定"
msgstr "query 的过程：给定"

#: src/zk-everything/zk-everything-joe/Spartan.md:122
msgid " 向量中的某个元素值，返回相应table 中evaluation值。比如请求"
msgstr " 向量中的某个元素值，返回相应table 中evaluation值。比如请求"

#: src/zk-everything/zk-everything-joe/Spartan.md:122
msgid "，返回"
msgstr "，返回"

#: src/zk-everything/zk-everything-joe/Spartan.md:126
msgid "为了简化，以下实例我们均以query "
msgstr "为了简化，以下实例我们均以query "

#: src/zk-everything/zk-everything-joe/Spartan.md:126
msgid " 为例。如何证明它的返回结果 "
msgstr " 为例。如何证明它的返回结果 "

#: src/zk-everything/zk-everything-joe/Spartan.md:126
msgid " 是正确的呢？这里我们detail 一下上一节中VSM 的逻辑。"
msgstr " 是正确的呢？这里我们detail 一下上一节中VSM 的逻辑。"

#: src/zk-everything/zk-everything-joe/Spartan.md:131
msgid "Resolution"
msgstr "Resolution"

#: src/zk-everything/zk-everything-joe/Spartan.md:133
msgid "Initialization"
msgstr "Initialization"

#: src/zk-everything/zk-everything-joe/Spartan.md:135
msgid "lookup table "
msgstr "lookup table "

#: src/zk-everything/zk-everything-joe/Spartan.md:135
msgid " 最开始的State： "
msgstr " 最开始的State： "

#: src/zk-everything/zk-everything-joe/Spartan.md:140
msgid "Operation"
msgstr "Operation"

#: src/zk-everything/zk-everything-joe/Spartan.md:142
#: src/zk-everything/zk-everything-joe/Spartan.md:147
msgid "批量query "
msgstr "批量query "

#: src/zk-everything/zk-everything-joe/Spartan.md:142
msgid " 之后，"
msgstr " 之后，"

#: src/zk-everything/zk-everything-joe/Spartan.md:142
msgid " 的State 变成了： "
msgstr " 的State 变成了： "

#: src/zk-everything/zk-everything-joe/Spartan.md:147
msgid " 之后，prover 这边维护的两个中间State 或者proof 为： "
msgstr " 之后，prover 这边维护的两个中间State 或者proof 为： "

#: src/zk-everything/zk-everything-joe/Spartan.md:152
msgid "Verification"
msgstr "Verification"

#: src/zk-everything/zk-everything-joe/Spartan.md:154
msgid "批量query 之前，verifier 请求拿到"
msgstr "批量query 之前，verifier 请求拿到"

#: src/zk-everything/zk-everything-joe/Spartan.md:154
msgid " 的初始State "
msgstr " 的初始State "

#: src/zk-everything/zk-everything-joe/Spartan.md:154
msgid "；批量query "
msgstr "；批量query "

#: src/zk-everything/zk-everything-joe/Spartan.md:154
msgid " 之后，verifier 请求得到"
msgstr " 之后，verifier 请求得到"

#: src/zk-everything/zk-everything-joe/Spartan.md:154
msgid " 的最新State "
msgstr " 的最新State "

#: src/zk-everything/zk-everything-joe/Spartan.md:154
msgid "，再结合prover 传递过来的proof "
msgstr "，再结合prover 传递过来的proof "

#: src/zk-everything/zk-everything-joe/Spartan.md:154
msgid " 进行最后的验证： "
msgstr " 进行最后的验证： "

#: src/zk-everything/zk-everything-joe/Spartan.md:161
msgid "接下来的问题是，如何把上面的计算过程算术化？"
msgstr "接下来的问题是，如何把上面的计算过程算术化？"

#: src/zk-everything/zk-everything-joe/Spartan.md:165
msgid "Arithmetic"
msgstr "Arithmetic"

#: src/zk-everything/zk-everything-joe/Spartan.md:168
msgid ""
"这个等式本质是要判定两个set 是否相等？也就是说是一个permutaion的问题，自然就"
"会联想到plonk 里lookup contrain用到的grand-product 的逻辑，也就是说： "
msgstr ""
"这个等式本质是要判定两个set 是否相等？也就是说是一个permutaion的问题，自然就"
"会联想到plonk 里lookup contrain用到的grand-product 的逻辑，也就是说： "

#: src/zk-everything/zk-everything-joe/Spartan.md:171
msgid "演变成了： "
msgstr "演变成了： "

#: src/zk-everything/zk-everything-joe/Spartan.md:176
msgid "很显明三元组的元素是无法直接相乘的，引入两个challenge factor "
msgstr "很显明三元组的元素是无法直接相乘的，引入两个challenge factor "

#: src/zk-everything/zk-everything-joe/Spartan.md:176
msgid "把三元组的元素合成一个field： "
msgstr "把三元组的元素合成一个field： "

#: src/zk-everything/zk-everything-joe/Spartan.md:181
msgid "因此上面的等式就变成了： "
msgstr "因此上面的等式就变成了： "

#: src/zk-everything/zk-everything-joe/Spartan.md:188
msgid ""
"接下来的问题是，如何把上面的算术逻辑放在电路里，以便通过某个或者某几个协议来"
"完成它的验证？"
msgstr ""
"接下来的问题是，如何把上面的算术逻辑放在电路里，以便通过某个或者某几个协议来"
"完成它的验证？"

#: src/zk-everything/zk-everything-joe/Spartan.md:194
msgid "我们把上面的等式grand-product 拆分成四个部分： "
msgstr "我们把上面的等式grand-product 拆分成四个部分： "

#: src/zk-everything/zk-everything-joe/Spartan.md:199
msgid ""
"假定这四组向量都是witness，用GKR-like layered circuit 来把这四个grand-"
"product 的计算trace 给描述出来，通过Hyrax \\[2\\] 协议来完成grand-product 的"
"验证，最后验证四个grand-product 的结果是否满足等式即可： "
msgstr ""
"假定这四组向量都是witness，用GKR-like layered circuit 来把这四个grand-"
"product 的计算trace 给描述出来，通过Hyrax \\[2\\] 协议来完成grand-product 的"
"验证，最后验证四个grand-product 的结果是否满足等式即可： "

#: src/zk-everything/zk-everything-joe/Spartan.md:203
msgid "我们用图直观感受一下这四个电路长什么样子？"
msgstr "我们用图直观感受一下这四个电路长什么样子？"

#: src/zk-everything/zk-everything-joe/Spartan.md:207
#: src/zk-everything/zk-everything-joe/Spartan.md:212
#: src/zk-everything/zk-everything-joe/Spartan.md:217
#: src/zk-everything/zk-everything-joe/Spartan.md:222
msgid "Circuit for "
msgstr "Circuit for "

#: src/zk-everything/zk-everything-joe/Spartan.md:207
msgid ":  ![Alt text](./img/image-3.png)"
msgstr ":  ![Alt text](./img/image-3.png)"

#: src/zk-everything/zk-everything-joe/Spartan.md:212
msgid ":  ![Alt text](./img/image-5.png)"
msgstr ":  ![Alt text](./img/image-5.png)"

#: src/zk-everything/zk-everything-joe/Spartan.md:217
msgid ":  ![Alt text](./img/image-6.png)"
msgstr ":  ![Alt text](./img/image-6.png)"

#: src/zk-everything/zk-everything-joe/Spartan.md:222
msgid ":  ![Alt text](./img/image-7.png)"
msgstr ":  ![Alt text](./img/image-7.png)"

#: src/zk-everything/zk-everything-joe/Spartan.md:227
msgid ""
"熟悉Hyrax 协议的应该知道，Hyrax协议是由多个Sumcheck 协议与一个IPA协议组成 "
"\\[3\\]。Hyrax 的最后需要计算tree 的叶子节点，也就是witness向量，的MLE 多项式"
"在某个opening "
msgstr ""
"熟悉Hyrax 协议的应该知道，Hyrax协议是由多个Sumcheck 协议与一个IPA协议组成 "
"\\[3\\]。Hyrax 的最后需要计算tree 的叶子节点，也就是witness向量，的MLE 多项式"
"在某个opening "

#: src/zk-everything/zk-everything-joe/Spartan.md:227
msgid " 上的evaluation，它是通过一个IPA协议来完成的。"
msgstr " 上的evaluation，它是通过一个IPA协议来完成的。"

#: src/zk-everything/zk-everything-joe/Spartan.md:231
msgid "也就是说，在这里我们分别需要通过IPA协议完成四个evaluation 的验证： "
msgstr "也就是说，在这里我们分别需要通过IPA协议完成四个evaluation 的验证： "

#: src/zk-everything/zk-everything-joe/Spartan.md:232
msgid "⎭"
msgstr "⎭"

#: src/zk-everything/zk-everything-joe/Spartan.md:232
msgid "⎬"
msgstr "⎬"

#: src/zk-everything/zk-everything-joe/Spartan.md:232
msgid "⎫"
msgstr "⎫"

#: src/zk-everything/zk-everything-joe/Spartan.md:233
msgid "等式右边的四个evaluation值是通过Sumcheck 协议reduce 后拿到的。"
msgstr "等式右边的四个evaluation值是通过Sumcheck 协议reduce 后拿到的。"

#: src/zk-everything/zk-everything-joe/Spartan.md:236
msgid " 是由相应的三元组"
msgstr " 是由相应的三元组"

#: src/zk-everything/zk-everything-joe/Spartan.md:236
msgid " 组成。所以上面的四个evaluation 需要进行再次拆解。"
msgstr " 组成。所以上面的四个evaluation 需要进行再次拆解。"

#: src/zk-everything/zk-everything-joe/Spartan.md:240
#: src/zk-everything/zk-everything-joe/Spartan.md:252
#: src/zk-everything/zk-everything-joe/Spartan.md:263
#: src/zk-everything/zk-everything-joe/Spartan.md:274
msgid "for "
msgstr "for "

#: src/zk-everything/zk-everything-joe/Spartan.md:240
#: src/zk-everything/zk-everything-joe/Spartan.md:252
#: src/zk-everything/zk-everything-joe/Spartan.md:263
#: src/zk-everything/zk-everything-joe/Spartan.md:274
msgid " evaluation"
msgstr " evaluation"

#: src/zk-everything/zk-everything-joe/Spartan.md:244
#: src/zk-everything/zk-everything-joe/Spartan.md:266
msgid "三个dense 向量或者witness 为："
msgstr "三个dense 向量或者witness 为："

#: src/zk-everything/zk-everything-joe/Spartan.md:248
#: src/zk-everything/zk-everything-joe/Spartan.md:259
#: src/zk-everything/zk-everything-joe/Spartan.md:270
#: src/zk-everything/zk-everything-joe/Spartan.md:280
msgid "用3个IPA协议去验证以上三个MLE 的evaluation值是否合法。"
msgstr "用3个IPA协议去验证以上三个MLE 的evaluation值是否合法。"

#: src/zk-everything/zk-everything-joe/Spartan.md:256
#: src/zk-everything/zk-everything-joe/Spartan.md:277
msgid "三个dense 向量或者witness 为： "
msgstr "三个dense 向量或者witness 为： "

#: src/zk-everything/zk-everything-joe/Spartan.md:285
msgid ""
"到此为止，Spark 中memory check 的逻辑就完整了！关于Spark 的应用在Brakedown "
"\\[5\\]中也有应用，感兴趣的话也可以参考一下。"
msgstr ""
"到此为止，Spark 中memory check 的逻辑就完整了！关于Spark 的应用在Brakedown "
"\\[5\\]中也有应用，感兴趣的话也可以参考一下。"

#: src/zk-everything/zk-everything-joe/Spartan.md:289
msgid "最后我们再revisit 一下之前提到的两个问题："
msgstr "最后我们再revisit 一下之前提到的两个问题："

#: src/zk-everything/zk-everything-joe/Spartan.md:299
msgid "接下来我们就可以非常轻松的review 一下Spark 了。"
msgstr "接下来我们就可以非常轻松的review 一下Spark 了。"

#: src/zk-everything/zk-everything-joe/Spartan.md:301
msgid "Spark Overview"
msgstr "Spark Overview"

#: src/zk-everything/zk-everything-joe/Spartan.md:303
msgid "Target of Spark"
msgstr "Target of Spark"

#: src/zk-everything/zk-everything-joe/Spartan.md:304 src/public
#: goods/第二章.md:89
msgid "以"
msgstr "以"

#: src/zk-everything/zk-everything-joe/Spartan.md:304
msgid " 的时间复杂度完成Sparse Matrix Polynomial 的evaluation。"
msgstr " 的时间复杂度完成Sparse Matrix Polynomial 的evaluation。"

#: src/zk-everything/zk-everything-joe/Spartan.md:308
msgid "比如，有一个Sparse Matrix: "
msgstr "比如，有一个Sparse Matrix: "

#: src/zk-everything/zk-everything-joe/Spartan.md:311
msgid "其中涉及到的常量： "
msgstr "其中涉及到的常量： "

#: src/zk-everything/zk-everything-joe/Spartan.md:314
msgid " 代表矩阵的行数/列数，"
msgstr " 代表矩阵的行数/列数，"

#: src/zk-everything/zk-everything-joe/Spartan.md:314
msgid " 代表矩阵中non-zero 元素的个数，"
msgstr " 代表矩阵中non-zero 元素的个数，"

#: src/zk-everything/zk-everything-joe/Spartan.md:314
msgid " 代表matrix dense MLE中的变量个数。"
msgstr " 代表matrix dense MLE中的变量个数。"

#: src/zk-everything/zk-everything-joe/Spartan.md:318
msgid "上面这个matrix 的dense MLE 可以表示为： "
msgstr "上面这个matrix 的dense MLE 可以表示为： "

#: src/zk-everything/zk-everything-joe/Spartan.md:323
msgid "因为是dense 的表达，所以默认"
msgstr "因为是dense 的表达，所以默认"

#: src/zk-everything/zk-everything-joe/Spartan.md:323
msgid "是按顺序遍历的，一共有"
msgstr "是按顺序遍历的，一共有"

#: src/zk-everything/zk-everything-joe/Spartan.md:323
msgid " 次乘法运算，即时间复杂度为"
msgstr " 次乘法运算，即时间复杂度为"

#: src/zk-everything/zk-everything-joe/Spartan.md:323
msgid "，成本随着"
msgstr "，成本随着"

#: src/zk-everything/zk-everything-joe/Spartan.md:323
msgid " 的增大，会呈现asymptotic 式的增长。在Spartan中，"
msgstr " 的增大，会呈现asymptotic 式的增长。在Spartan中，"

#: src/zk-everything/zk-everything-joe/Spartan.md:323
msgid " 又代表R1CS 的gate 数量，这种特征就会体现得更明显。"
msgstr " 又代表R1CS 的gate 数量，这种特征就会体现得更明显。"

#: src/zk-everything/zk-everything-joe/Spartan.md:327
msgid ""
"Spark 把sparse matrix 的evaluation代理给prover，并通过memory check 的消除这种"
"asymptotic，把它的时间复杂度控制在"
msgstr ""
"Spark 把sparse matrix 的evaluation代理给prover，并通过memory check 的消除这种"
"asymptotic，把它的时间复杂度控制在"

#: src/zk-everything/zk-everything-joe/Spartan.md:327
msgid ""
"，跟R1CS 的gate 数量无关了，仅仅跟Sparse 的呈度有关。因此，matrix 越稀疏，它"
"的优势就体现得越明显。即 "
msgstr ""
"，跟R1CS 的gate 数量无关了，仅仅跟Sparse 的呈度有关。因此，matrix 越稀疏，它"
"的优势就体现得越明显。即 "

#: src/zk-everything/zk-everything-joe/Spartan.md:327
msgid "≪"
msgstr "≪"

#: src/zk-everything/zk-everything-joe/Spartan.md:331
msgid "Technic in Spark"
msgstr "Technic in Spark"

#: src/zk-everything/zk-everything-joe/Spartan.md:333
msgid "首先，Spark不再用矩阵表达了，而是换作三个向量来表达： "
msgstr "首先，Spark不再用矩阵表达了，而是换作三个向量来表达： "

#: src/zk-everything/zk-everything-joe/Spartan.md:338
msgid "其次，Spark 改变了MLE evaluation 的多项式： "
msgstr "其次，Spark 改变了MLE evaluation 的多项式： "

#: src/zk-everything/zk-everything-joe/Spartan.md:343
msgid "假定"
msgstr "假定"

#: src/zk-everything/zk-everything-joe/Spartan.md:343
msgid "，通过时间复杂度为"
msgstr "，通过时间复杂度为"

#: src/zk-everything/zk-everything-joe/Spartan.md:343
msgid " 的计算，可以拿到两个类似lookup table的东西"
msgstr " 的计算，可以拿到两个类似lookup table的东西"

#: src/zk-everything/zk-everything-joe/Spartan.md:346
msgid "**通过查表**的方式，我们很容易拿到"
msgstr "**通过查表**的方式，我们很容易拿到"

#: src/zk-everything/zk-everything-joe/Spartan.md:346
msgid " 的取值： "
msgstr " 的取值： "

#: src/zk-everything/zk-everything-joe/Spartan.md:347
msgid "000"
msgstr "000"

#: src/zk-everything/zk-everything-joe/Spartan.md:347
msgid "110"
msgstr "110"

#: src/zk-everything/zk-everything-joe/Spartan.md:347
msgid "111"
msgstr "111"

#: src/zk-everything/zk-everything-joe/Spartan.md:349
msgid "因此我们可以得到sparase matrix 在"
msgstr "因此我们可以得到sparase matrix 在"

#: src/zk-everything/zk-everything-joe/Spartan.md:349
msgid " 上的evaluation值 "
msgstr " 上的evaluation值 "

#: src/zk-everything/zk-everything-joe/Spartan.md:349
msgid "。接下来prover 要做的就是生成相应的proof ： "
msgstr "。接下来prover 要做的就是生成相应的proof ： "

#: src/zk-everything/zk-everything-joe/Spartan.md:352
msgid ""
"本质是要证明三个多项式乘积的sum 等于0，这是一个标准的degree为3的Sumcheck。"
"Sumcheck 的last round 需要验证： "
msgstr ""
"本质是要证明三个多项式乘积的sum 等于0，这是一个标准的degree为3的Sumcheck。"
"Sumcheck 的last round 需要验证： "

#: src/zk-everything/zk-everything-joe/Spartan.md:355
msgid " Sumcheck 最后reduced 得到的claim，左边的三个term，其中"
msgstr " Sumcheck 最后reduced 得到的claim，左边的三个term，其中"

#: src/zk-everything/zk-everything-joe/Spartan.md:355
msgid " 可以轻易地通过一个IPA 协议证明得到；但是，"
msgstr " 可以轻易地通过一个IPA 协议证明得到；但是，"

#: src/zk-everything/zk-everything-joe/Spartan.md:355
msgid " 呢？也直接可以通过IPA 协议证明吗？"
msgstr " 呢？也直接可以通过IPA 协议证明吗？"

#: src/zk-everything/zk-everything-joe/Spartan.md:359
msgid "不行！细心地会发现上面的表中"
msgstr "不行！细心地会发现上面的表中"

#: src/zk-everything/zk-everything-joe/Spartan.md:359
msgid " 并不是跟"
msgstr " 并不是跟"

#: src/zk-everything/zk-everything-joe/Spartan.md:359
msgid ""
" 一样以determined dense vector 或者 determined witness的形式出现在verifier 面"
"前的，对于verifier 来说，它只知道有： "
msgstr ""
" 一样以determined dense vector 或者 determined witness的形式出现在verifier 面"
"前的，对于verifier 来说，它只知道有： "

#: src/zk-everything/zk-everything-joe/Spartan.md:360
msgid " 这三样determined 的东西，"
msgstr " 这三样determined 的东西，"

#: src/zk-everything/zk-everything-joe/Spartan.md:361
msgid " 是prover 基于"
msgstr " 是prover 基于"

#: src/zk-everything/zk-everything-joe/Spartan.md:361
msgid "通过**查表** "
msgstr "通过**查表** "

#: src/zk-everything/zk-everything-joe/Spartan.md:361
msgid ""
"拿到的，对于verifier来说叫做non-determined witness，也是一种中间过程变量。因"
"此还需要一个**验证查表**过程的电路，来保证它们的来历合规合法！"
msgstr ""
"拿到的，对于verifier来说叫做non-determined witness，也是一种中间过程变量。因"
"此还需要一个**验证查表**过程的电路，来保证它们的来历合规合法！"

#: src/zk-everything/zk-everything-joe/Spartan.md:365
msgid ""
"剩下的就是memory check的show time，上节已经detail 了它的整个过程，这里就不再"
"赘述。"
msgstr ""
"剩下的就是memory check的show time，上节已经detail 了它的整个过程，这里就不再"
"赘述。"

#: src/zk-everything/zk-everything-joe/Spartan.md:371
msgid ""
"到此为止，Spark是如何更高效地解决Sparse Matrix evaluation 问题的就已经解释清"
"楚了。文章的最后我们就可以非常轻松地revisit一下 Spartan 的整个协议了。"
msgstr ""
"到此为止，Spark是如何更高效地解决Sparse Matrix evaluation 问题的就已经解释清"
"楚了。文章的最后我们就可以非常轻松地revisit一下 Spartan 的整个协议了。"

#: src/zk-everything/zk-everything-joe/Spartan.md:375
msgid "Spartan Protolcol Overview"
msgstr "Spartan Protolcol Overview"

#: src/zk-everything/zk-everything-joe/Spartan.md:376
msgid "假定，有这么一个业务计算： "
msgstr "假定，有这么一个业务计算： "

#: src/zk-everything/zk-everything-joe/Spartan.md:381
msgid "setup 阶段构造R1CS Instance： "
msgstr "setup 阶段构造R1CS Instance： "

#: src/zk-everything/zk-everything-joe/Spartan.md:384
msgid "这是非常典型的sparse matrix，可以充分发挥Spark的优势！"
msgstr "这是非常典型的sparse matrix，可以充分发挥Spark的优势！"

#: src/zk-everything/zk-everything-joe/Spartan.md:388
msgid "prover 填充向量"
msgstr "prover 填充向量"

#: src/zk-everything/zk-everything-joe/Spartan.md:388
#: src/zk-everything/zk-everything-joe/Spartan.md:415
msgid ": "
msgstr ": "

#: src/zk-everything/zk-everything-joe/Spartan.md:393
#: src/zk-everything/zk-everything-joe/Spartan.md:410
msgid "令： "
msgstr "令： "

#: src/zk-everything/zk-everything-joe/Spartan.md:396
msgid " 代表矩阵"
msgstr " 代表矩阵"

#: src/zk-everything/zk-everything-joe/Spartan.md:396
msgid " 的第0行，同理"
msgstr " 的第0行，同理"

#: src/zk-everything/zk-everything-joe/Spartan.md:396
msgid " ... "
msgstr " ... "

#: src/zk-everything/zk-everything-joe/Spartan.md:400
msgid "还有： "
msgstr "还有： "

#: src/zk-everything/zk-everything-joe/Spartan.md:405
msgid "prover 需要证明： "
msgstr "prover 需要证明： "

#: src/zk-everything/zk-everything-joe/Spartan.md:411
#: src/zk-everything/zk-everything-joe/Spartan.md:436
msgid "eq"
msgstr "eq"

#: src/zk-everything/zk-everything-joe/Spartan.md:415
msgid "实例中，"
msgstr "实例中，"

#: src/zk-everything/zk-everything-joe/Spartan.md:416
msgid "00"
msgstr "00"

#: src/zk-everything/zk-everything-joe/Spartan.md:420
msgid "假设："
msgstr "假设："

#: src/zk-everything/zk-everything-joe/Spartan.md:426
msgid "上面红色部分等于0的概率就非常低，因为"
msgstr "上面红色部分等于0的概率就非常低，因为"

#: src/zk-everything/zk-everything-joe/Spartan.md:426
msgid ""
" 的domain是整个field，等于0或者1的概率自然就非常小几乎可以忽略，那么我们就可"
"以推出："
msgstr ""
" 的domain是整个field，等于0或者1的概率自然就非常小几乎可以忽略，那么我们就可"
"以推出："

#: src/zk-everything/zk-everything-joe/Spartan.md:432
msgid "Round One"
msgstr "Round One"

#: src/zk-everything/zk-everything-joe/Spartan.md:434
msgid "verifier 随机给定一个challenge factor "
msgstr "verifier 随机给定一个challenge factor "

#: src/zk-everything/zk-everything-joe/Spartan.md:434
msgid "，prover 只需要证明："
msgstr "，prover 只需要证明："

#: src/zk-everything/zk-everything-joe/Spartan.md:440
msgid ""
"这是典型的degree 为3的Sumcheck（三个MLE polynomial的乘法），Sumcheck 的最后"
"reduce 成： "
msgstr ""
"这是典型的degree 为3的Sumcheck（三个MLE polynomial的乘法），Sumcheck 的最后"
"reduce 成： "

#: src/zk-everything/zk-everything-joe/Spartan.md:445
msgid " verifier 可以自行计算，但"
msgstr " verifier 可以自行计算，但"

#: src/zk-everything/zk-everything-joe/Spartan.md:445
msgid " 隐藏着witness信息，需要prover 计算完成之后发送"
msgstr " 隐藏着witness信息，需要prover 计算完成之后发送"

#: src/zk-everything/zk-everything-joe/Spartan.md:445
msgid "给verifier，verifier 完成上述等式验证。"
msgstr "给verifier，verifier 完成上述等式验证。"

#: src/zk-everything/zk-everything-joe/Spartan.md:448
msgid "Round Two"
msgstr "Round Two"

#: src/zk-everything/zk-everything-joe/Spartan.md:449
msgid "接着prover 需要证明： "
msgstr "接着prover 需要证明： "

#: src/zk-everything/zk-everything-joe/Spartan.md:454
msgid ""
"这又是典型的degree 为2的Sumcheck（两个MLE polynomial的乘法），Sumcheck的最后"
"reduce成： "
msgstr ""
"这又是典型的degree 为2的Sumcheck（两个MLE polynomial的乘法），Sumcheck的最后"
"reduce成： "

#: src/zk-everything/zk-everything-joe/Spartan.md:457
msgid "Round Three"
msgstr "Round Three"

#: src/zk-everything/zk-everything-joe/Spartan.md:458
msgid "上述等式中 "
msgstr "上述等式中 "

#: src/zk-everything/zk-everything-joe/Spartan.md:458
msgid " evaluation 的证明可以直接通过IPA 协议来完成，而"
msgstr " evaluation 的证明可以直接通过IPA 协议来完成，而"

#: src/zk-everything/zk-everything-joe/Spartan.md:458
msgid " evaluation 的证明就需要Spark 协议来完成了。"
msgstr " evaluation 的证明就需要Spark 协议来完成了。"

#: src/zk-everything/zk-everything-joe/Spartan.md:462
msgid ""
"剩下的就是Spark的show time，上节已经detail 了它的整个过程，这里就不再赘述。到"
"此为止，Spartan 整个协议的详细逻辑就完整了！"
msgstr ""
"剩下的就是Spark的show time，上节已经detail 了它的整个过程，这里就不再赘述。到"
"此为止，Spartan 整个协议的详细逻辑就完整了！"

#: src/zk-everything/zk-everything-joe/Spartan.md:466
msgid "One more thing"
msgstr "One more thing"

#: src/zk-everything/zk-everything-joe/Spartan.md:467
msgid ""
"纵观Spartan 整套协议，里面穿插着大量的Sumcheck 协议、IPA 协议，工程实现中应该"
"会有相应的proof aggregation 的操作，具体细节可以参考Spartan \\[4\\]中的7.23 "
"节和 8节。"
msgstr ""
"纵观Spartan 整套协议，里面穿插着大量的Sumcheck 协议、IPA 协议，工程实现中应该"
"会有相应的proof aggregation 的操作，具体细节可以参考Spartan \\[4\\]中的7.23 "
"节和 8节。"

#: src/zk-everything/zk-everything-joe/Spartan.md:472
msgid ""
"本着research 的原则，边“猜”paper 作者的意图边手动推理论证，试图用逻辑说服自"
"己，期间免不了叨扰@even @郭宇 老师来求证自己的“猜想”，真诚表达对他们的感谢"
msgstr ""
"本着research 的原则，边“猜”paper 作者的意图边手动推理论证，试图用逻辑说服自"
"己，期间免不了叨扰@even @郭宇 老师来求证自己的“猜想”，真诚表达对他们的感谢"

#: src/zk-everything/zk-everything-joe/Spartan.md:474
msgid ""
"再次感谢SecbitLabs @郭宇 老师前两个月分享的Spartan Overview，视频链接暂时找不"
"到了，后续再补上；再次感谢SecbitLabs @even 关于Spartan在研究方向上的指引"
msgstr ""
"再次感谢SecbitLabs @郭宇 老师前两个月分享的Spartan Overview，视频链接暂时找不"
"到了，后续再补上；再次感谢SecbitLabs @even 关于Spartan在研究方向上的指引"

#: src/zk-everything/zk-everything-joe/Spartan.md:479
msgid "\\[1\\] Spice: https://eprint.iacr.org/2018/907.pdf "
msgstr "\\[1\\] Spice: https://eprint.iacr.org/2018/907.pdf "

#: src/zk-everything/zk-everything-joe/Spartan.md:481
msgid "\\[2\\] Hyrax: https://eprint.iacr.org/2017/1132.pdf"
msgstr "\\[2\\] Hyrax: https://eprint.iacr.org/2017/1132.pdf"

#: src/zk-everything/zk-everything-joe/Spartan.md:483
msgid ""
"\\[3\\] Spartan 预备知识：Hyrax: https://learnblockchain.cn/article/6586"
msgstr ""
"\\[3\\] Spartan 预备知识：Hyrax: https://learnblockchain.cn/article/6586"

#: src/zk-everything/zk-everything-joe/Spartan.md:485
msgid "\\[4\\] Spartan: https://eprint.iacr.org/2019/550.pdf"
msgstr "\\[4\\] Spartan: https://eprint.iacr.org/2019/550.pdf"

#: src/zk-everything/zk-everything-joe/Spartan.md:487
msgid "\\[5\\] Brakedown：https://eprint.iacr.org/2021/1043.pdf"
msgstr "\\[5\\] Brakedown：https://eprint.iacr.org/2021/1043.pdf"

#: src/zk-everything/zk-everything-joe/Spartan.md:489
msgid ""
"\\[6\\] GKR 协议系列之Sum-Check: https://learnblockchain.cn/article/6188"
msgstr ""
"\\[6\\] GKR 协议系列之Sum-Check: https://learnblockchain.cn/article/6188"

#: src/zk-everything/zk-everything-joe/Spartan.md:491
msgid ""
"\\[7\\] Spartan 预备知识：GKR with ZK Argument: https://learnblockchain.cn/"
"article/6566"
msgstr ""
"\\[7\\] Spartan 预备知识：GKR with ZK Argument: https://learnblockchain.cn/"
"article/6566"

#: src/Nova/SuperNova.md:4
msgid "深入分析SuperNova及其ROM实现"
msgstr "深入分析SuperNova及其ROM实现"

#: src/Nova/SuperNova.md:5
msgid ""
"针对于为有限状态机上程序执行的正确性的问题，Nova是集大成者，作者Setty提出了一"
"种基于Folding的递归证明系统。但是Nova要求在迭代中使用相同的业务电路，可以理解"
"为仅支持单个指令。SuperNova则对其进行了拓展，在每步迭代中可以运行不同的指令"
"(这一问题定义为NIVC, non-uniform IVC)，因此可以把Nova看作是只支持一个指令的"
"NIVC解决方案。之前采用全局电路的方法其开销与所有指令构成的电路规模有关，"
"Supernova最大的创新则是其证明开销只与当前步执行的指令有关，并且产生的overhead"
"是常数。"
msgstr ""
"针对于为有限状态机上程序执行的正确性的问题，Nova是集大成者，作者Setty提出了一"
"种基于Folding的递归证明系统。但是Nova要求在迭代中使用相同的业务电路，可以理解"
"为仅支持单个指令。SuperNova则对其进行了拓展，在每步迭代中可以运行不同的指令"
"(这一问题定义为NIVC, non-uniform IVC)，因此可以把Nova看作是只支持一个指令的"
"NIVC解决方案。之前采用全局电路的方法其开销与所有指令构成的电路规模有关，"
"Supernova最大的创新则是其证明开销只与当前步执行的指令有关，并且产生的overhead"
"是常数。"

#: src/Nova/SuperNova.md:7
msgid ""
"本文首先介绍NIVC问题的定义，以及Supernova的基本思路，最后针对于文中没有给出具"
"体说明的电路选择器，详细介绍了ROM模型的实现思路。"
msgstr ""
"本文首先介绍NIVC问题的定义，以及Supernova的基本思路，最后针对于文中没有给出具"
"体说明的电路选择器，详细介绍了ROM模型的实现思路。"

#: src/Nova/SuperNova.md:9
msgid "NIVC定义"
msgstr "NIVC定义"

#: src/Nova/SuperNova.md:10
msgid ""
"![image](https://github.com/zkp-co-learning/zkp-co-learn/assets/13568446/"
"f9bfb895-4c3c-4ff4-8b00-a7cb6867abbb) NIVC是对IVC的泛化，在每步增量计算中，"
"Prover可以证明满足一些列relation中的一种relation，所以他可以支持每步使用不同"
"的电路。 首先定义NIVC要证明的电路形式，假设存在"
msgstr ""
"![image](https://github.com/zkp-co-learning/zkp-co-learn/assets/13568446/"
"f9bfb895-4c3c-4ff4-8b00-a7cb6867abbb) NIVC是对IVC的泛化，在每步增量计算中，"
"Prover可以证明满足一些列relation中的一种relation，所以他可以支持每步使用不同"
"的电路。 首先定义NIVC要证明的电路形式，假设存在"

#: src/Nova/SuperNova.md:12 src/Nova/SuperNova.md:14 src/Nova/SuperNova.md:17
#: src/Nova/SuperNova.md:19 src/Nova/SuperNova.md:27 src/Nova/SuperNova.md:30
#: src/Nova/SuperNova.md:31 src/Nova/SuperNova.md:34 src/Nova/SuperNova.md:35
#: src/Nova/SuperNova.md:68 src/public goods/第二章.md:9
#: goods/第二章.md:10 goods/第二章.md:12 goods/第二章.md:13
#: goods/第二章.md:14 goods/第二章.md:15 goods/第二章.md:16
#: goods/第二章.md:17 goods/第二章.md:18 goods/第二章.md:19
#: goods/第二章.md:20 goods/第二章.md:21 goods/第二章.md:25
#: goods/第二章.md:26 goods/第二章.md:29 goods/第二章.md:30
#: goods/第二章.md:31 goods/第二章.md:32 goods/第二章.md:33
#: goods/第二章.md:34 goods/第二章.md:35 goods/第二章.md:36
#: goods/第二章.md:38 goods/第二章.md:40 goods/第二章.md:41
#: goods/第二章.md:42 goods/第二章.md:44 goods/第二章.md:46
#: goods/第二章.md:48 goods/第二章.md:50 goods/第二章.md:52
#: goods/第二章.md:54 goods/第二章.md:56 goods/第二章.md:58
#: goods/第二章.md:59 goods/第二章.md:60 goods/第二章.md:61
#: goods/第二章.md:65 goods/第二章.md:67 goods/第二章.md:70
#: goods/第二章.md:72 goods/第二章.md:74 goods/第二章.md:80
#: goods/第二章.md:81 goods/第二章.md:83 goods/第二章.md:84
#: goods/第二章.md:86 goods/第二章.md:88 goods/第二章.md:89
#: goods/第二章.md:91 goods/第二章.md:97 goods/第二章.md:103
#: goods/第二章.md:147 goods/第二章.md:156 goods/第二章.md:158
#: goods/第二章.md:160 goods/第二章.md:162 goods/第二章.md:164
#: goods/第二章.md:170 goods/第二章.md:171 goods/第二章.md:175
#: goods/第二章.md:177
msgid "‘"
msgstr "‘"

#: src/Nova/SuperNova.md:12
msgid "个多项式时间可计算的函数"
msgstr "个多项式时间可计算的函数"

#: src/Nova/SuperNova.md:12
msgid " (可以把他们看作是执行一些列不同指令的电路)，他们满足:"
msgstr " (可以把他们看作是执行一些列不同指令的电路)，他们满足:"

#: src/Nova/SuperNova.md:12 src/Nova/SuperNova.md:17 src/public
#: goods/第二章.md:9 goods/第二章.md:25
msgid "，其中"
msgstr "，其中"

#: src/Nova/SuperNova.md:12
msgid "为选择器，其根据当前witness "
msgstr "为选择器，其根据当前witness "

#: src/Nova/SuperNova.md:12
msgid "和公共输出"
msgstr "和公共输出"

#: src/Nova/SuperNova.md:12
msgid "选择其中第"
msgstr "选择其中第"

#: src/Nova/SuperNova.md:12
msgid "个函数"
msgstr "个函数"

#: src/Nova/SuperNova.md:12
msgid "，即输出"
msgstr "，即输出"

#: src/Nova/SuperNova.md:14
msgid "Prover则是要生成proof，其可以证明对于n步迭代中产生的一系列"
msgstr "Prover则是要生成proof，其可以证明对于n步迭代中产生的一系列"

#: src/Nova/SuperNova.md:14
msgid "均满足"
msgstr "均满足"

#: src/Nova/SuperNova.md:14
msgid "。可将其形式化表述为"
msgstr "。可将其形式化表述为"

#: src/Nova/SuperNova.md:14
msgid "Π"
msgstr "Π"

#: src/Nova/SuperNova.md:14
msgid "， 其中P为Prover，pk为prover key，"
msgstr "， 其中P为Prover，pk为prover key，"

#: src/Nova/SuperNova.md:14
msgid "‘Π‘"
msgstr "‘Π‘"

#: src/Nova/SuperNova.md:14
msgid ""
"为proof。与IVC类似，NIVC要求Prover在任意步的证明开销与之前调用的指令无关，否"
"则会导致电路规模无限增大；更进一步要求Prover的开销只和当前步运行的电路规模有"
"关，否则就蜕化成了用一个包含所有函数电路构成的IVC。"
msgstr ""
"为proof。与IVC类似，NIVC要求Prover在任意步的证明开销与之前调用的指令无关，否"
"则会导致电路规模无限增大；更进一步要求Prover的开销只和当前步运行的电路规模有"
"关，否则就蜕化成了用一个包含所有函数电路构成的IVC。"

#: src/Nova/SuperNova.md:16
msgid "Supernova证明系统"
msgstr "Supernova证明系统"

#: src/Nova/SuperNova.md:17
msgid ""
"对于上述证明问题，Supernova采用了类似与Nova的folding scheme，总体来说其也是先"
"构建一个Augumented函数"
msgstr ""
"对于上述证明问题，Supernova采用了类似与Nova的folding scheme，总体来说其也是先"
"构建一个Augumented函数"

#: src/Nova/SuperNova.md:17
msgid "，通过证明存在满足"
msgstr "，通过证明存在满足"

#: src/Nova/SuperNova.md:17
msgid "的witness，来证明业务电路F以及每次迭代更新proof的正确性。"
msgstr "的witness，来证明业务电路F以及每次迭代更新proof的正确性。"

#: src/Nova/SuperNova.md:17
msgid ""
"每次需要把relaxed R1CS实例(U)和r1cs实例(u)进行fold，而且folding scheme要求两"
"种实例的结构是一样的，但是NIVC中"
msgstr ""
"每次需要把relaxed R1CS实例(U)和r1cs实例(u)进行fold，而且folding scheme要求两"
"种实例的结构是一样的，但是NIVC中"

#: src/Nova/SuperNova.md:17
msgid "函数有多个，不能简单地fold。因此，SuperNova中在第"
msgstr "函数有多个，不能简单地fold。因此，SuperNova中在第"

#: src/Nova/SuperNova.md:17
msgid "步"
msgstr "步"

#: src/Nova/SuperNova.md:17
msgid "会输入一系列的"
msgstr "会输入一系列的"

#: src/Nova/SuperNova.md:17
msgid "代表"
msgstr "代表"

#: src/Nova/SuperNova.md:17
msgid "从0到"
msgstr "从0到"

#: src/Nova/SuperNova.md:17 src/Nova/SuperNova.md:30 src/public
#: goods/第二章.md:56 goods/第二章.md:59 goods/第二章.md:156
#: goods/第二章.md:160
msgid "1‘"
msgstr "1‘"

#: src/Nova/SuperNova.md:17
msgid "步被正确执行，这样只需要验证所有的"
msgstr "步被正确执行，这样只需要验证所有的"

#: src/Nova/SuperNova.md:17
msgid "是否满足约束就可以验证所有函数从0到"
msgstr "是否满足约束就可以验证所有函数从0到"

#: src/Nova/SuperNova.md:17
msgid "步被正确执行；此外"
msgstr "步被正确执行；此外"

#: src/Nova/SuperNova.md:17
msgid "还会输入一个实例u，用来证明第"
msgstr "还会输入一个实例u，用来证明第"

#: src/Nova/SuperNova.md:17
msgid ""
"步也被正确执行。 ![image](https://github.com/zkp-co-learning/zkp-co-learn/"
"assets/13568446/29cfd5e8-00a8-455d-bf9b-64a367f35683) 对于Augumented函数，相"
"对于Nova的不同点在于，在第"
msgstr ""
"步也被正确执行。 ![image](https://github.com/zkp-co-learning/zkp-co-learn/"
"assets/13568446/29cfd5e8-00a8-455d-bf9b-64a367f35683) 对于Augumented函数，相"
"对于Nova的不同点在于，在第"

#: src/Nova/SuperNova.md:19
msgid "步只折叠第"
msgstr "步只折叠第"

#: src/Nova/SuperNova.md:19
msgid "个实例，为了确保执行的是"
msgstr "个实例，为了确保执行的是"

#: src/Nova/SuperNova.md:19
msgid "，需要将"
msgstr "，需要将"

#: src/Nova/SuperNova.md:19
msgid "也作为公共输入放入"
msgstr "也作为公共输入放入"

#: src/Nova/SuperNova.md:19
msgid "中来进行检验。"
msgstr "中来进行检验。"

#: src/Nova/SuperNova.md:21
msgid ""
"Supernova证明系统的核心构造为： ![image](https://github.com/zkp-co-learning/"
"zkp-co-learn/assets/13568446/0ebe1192-683e-4192-822f-29876f1d338f) ![image]"
"(https://github.com/zkp-co-learning/zkp-co-learn/assets/13568446/c4c9fb8e-"
"c9c5-4909-9e84-71870e04f71c)"
msgstr ""
"Supernova证明系统的核心构造为： ![image](https://github.com/zkp-co-learning/"
"zkp-co-learn/assets/13568446/0ebe1192-683e-4192-822f-29876f1d338f) ![image]"
"(https://github.com/zkp-co-learning/zkp-co-learn/assets/13568446/c4c9fb8e-"
"c9c5-4909-9e84-71870e04f71c)"

#: src/Nova/SuperNova.md:25
msgid ""
"说明：实际上Relaxed R1CS(Az◦Bz = uCz + E)和R1CS(Az◦Bz=Cz)中的A,B,C是一致（这"
"些值由业务电路+Folding相关的约束生成），只是具体的z不一样。"
msgstr ""
"说明：实际上Relaxed R1CS(Az◦Bz = uCz + E)和R1CS(Az◦Bz=Cz)中的A,B,C是一致（这"
"些值由业务电路+Folding相关的约束生成），只是具体的z不一样。"

#: src/Nova/SuperNova.md:27
msgid "需要注意的是上述证明系统并**没有明确约束第"
msgstr "需要注意的是上述证明系统并**没有明确约束第"

#: src/Nova/SuperNova.md:27
msgid ""
"步具体选择哪个电路**，因此如果需要确定性生成相应的选择器，还需增加选择器电"
"路。 然而论文中没有给出选择器的具体实现，下面参考PSE一位成员给出的一种[电路序"
"列固定的Supernova实现](https://github.com/microsoft/Nova/pull/204)，进一步给"
"出具体实现细节。"
msgstr ""
"步具体选择哪个电路**，因此如果需要确定性生成相应的选择器，还需增加选择器电"
"路。 然而论文中没有给出选择器的具体实现，下面参考PSE一位成员给出的一种[电路序"
"列固定的Supernova实现](https://github.com/microsoft/Nova/pull/204)，进一步给"
"出具体实现细节。"

#: src/Nova/SuperNova.md:29
msgid "ROM machine based Supernova"
msgstr "ROM machine based Supernova"

#: src/Nova/SuperNova.md:30
msgid "Rom( read-only memory)模型将所有的电路看作电路序列，该序列共有"
msgstr "Rom( read-only memory)模型将所有的电路看作电路序列，该序列共有"

#: src/Nova/SuperNova.md:30
msgid "个电路，其中不同的电路共有"
msgstr "个电路，其中不同的电路共有"

#: src/Nova/SuperNova.md:30
msgid "个，并将所有的电路直接写死在Supernova的公共输入"
msgstr "个，并将所有的电路直接写死在Supernova的公共输入"

#: src/Nova/SuperNova.md:30
msgid "1..."
msgstr "1..."

#: src/Nova/SuperNova.md:30
msgid "中，每迭代一步"
msgstr "中，每迭代一步"

#: src/Nova/SuperNova.md:30
msgid "则放入"
msgstr "则放入"

#: src/Nova/SuperNova.md:30
msgid "中。在第"
msgstr "中。在第"

#: src/Nova/SuperNova.md:30
msgid "步时，读取"
msgstr "步时，读取"

#: src/Nova/SuperNova.md:30
msgid "，并选取"
msgstr "，并选取"

#: src/Nova/SuperNova.md:30
msgid "对应的电路。 比如共有2个不同的电路"
msgstr "对应的电路。 比如共有2个不同的电路"

#: src/Nova/SuperNova.md:31
msgid "rc"
msgstr "rc"

#: src/Nova/SuperNova.md:31
msgid "，ROM构成的电路序列为"
msgstr "，ROM构成的电路序列为"

#: src/Nova/SuperNova.md:31
msgid "...‘"
msgstr "...‘"

#: src/Nova/SuperNova.md:33
msgid "那么在Supernova论文给出的证明系统之上，还需保证："
msgstr "那么在Supernova论文给出的证明系统之上，还需保证："

#: src/Nova/SuperNova.md:34 src/public goods/第二章.md:162
msgid "在"
msgstr "在"

#: src/Nova/SuperNova.md:34
msgid "步fold的是第"
msgstr "步fold的是第"

#: src/Nova/SuperNova.md:34
msgid "个电路；"
msgstr "个电路；"

#: src/Nova/SuperNova.md:35
msgid "在第"
msgstr "在第"

#: src/Nova/SuperNova.md:35
msgid "步选择是第"
msgstr "步选择是第"

#: src/Nova/SuperNova.md:35
msgid "电路（注意这点在supernova中没有要求)"
msgstr "电路（注意这点在supernova中没有要求)"

#: src/Nova/SuperNova.md:37
msgid "对于第1个问题，主要通过构造一个条件选择电路，具体电路如下："
msgstr "对于第1个问题，主要通过构造一个条件选择电路，具体电路如下："

#: src/Nova/SuperNova.md:38
msgid ""
"```\n"
"    // select target when index match last_augmented_circuit_index, other "
"left as empty\n"
"\n"
"    let U: Result<Vec<AllocatedRelaxedR1CSInstance<G>>, SynthesisError> = U\n"
"      .iter()\n"
"      .enumerate()\n"
"      .map(|(i, U)| {\n"
"        let i_alloc = alloc_const(\n"
"          cs.namespace(|| format!(\"U_i i{:?} allocated\", i)),\n"
"          scalar_as_base::<G>(G::Scalar::from(i as u64)),\n"
"        )?;\n"
"\n"
"        let equal_bit = Boolean::from(alloc_num_equals(\n"
"          cs.namespace(|| format!(\"check U {:?} equal bit\", i)),\n"
"          &i_alloc,\n"
"          last_augmented_circuit_index,\n"
"        )?);\n"
"\n"
"        conditionally_select_alloc_relaxed_r1cs(\n"
"          cs.namespace(|| format!(\"select on index namespace {:?}\", i)),\n"
"          U,\n"
"          &empty_U,\n"
"          &equal_bit,\n"
"        )\n"
"      })\n"
"      .collect();\n"
"```"
msgstr ""
"```\n"
"    // select target when index match last_augmented_circuit_index, other "
"left as empty\n"
"\n"
"    let U: Result<Vec<AllocatedRelaxedR1CSInstance<G>>, SynthesisError> = U\n"
"      .iter()\n"
"      .enumerate()\n"
"      .map(|(i, U)| {\n"
"        let i_alloc = alloc_const(\n"
"          cs.namespace(|| format!(\"U_i i{:?} allocated\", i)),\n"
"          scalar_as_base::<G>(G::Scalar::from(i as u64)),\n"
"        )?;\n"
"\n"
"        let equal_bit = Boolean::from(alloc_num_equals(\n"
"          cs.namespace(|| format!(\"check U {:?} equal bit\", i)),\n"
"          &i_alloc,\n"
"          last_augmented_circuit_index,\n"
"        )?);\n"
"\n"
"        conditionally_select_alloc_relaxed_r1cs(\n"
"          cs.namespace(|| format!(\"select on index namespace {:?}\", i)),\n"
"          U,\n"
"          &empty_U,\n"
"          &equal_bit,\n"
"        )\n"
"      })\n"
"      .collect();\n"
"```"

#: src/Nova/SuperNova.md:66
msgid "对于第2个电路，核心思路是构造 "
msgstr "对于第2个电路，核心思路是构造 "

#: src/Nova/SuperNova.md:66
msgid " 来实现其约束,  其中 "
msgstr " 来实现其约束,  其中 "

#: src/Nova/SuperNova.md:70
msgid "具体代码如下:"
msgstr "具体代码如下:"

#: src/Nova/SuperNova.md:71
msgid ""
"```\n"
"fn constraint_augmented_circuit_index<F: PrimeField, CS: "
"ConstraintSystem<F>>(\n"
"    mut cs: CS,\n"
"    pc_counter: &AllocatedNum<F>,\n"
"    rom: &[AllocatedNum<F>],\n"
"    circuit_index: &AllocatedNum<F>,\n"
"  ) -> Result<(), SynthesisError> {\n"
"\n"
"    // select target when index match or empty\n"
"    let zero = alloc_zero(cs.namespace(|| \"zero\"))?;\n"
"    let rom_values = rom\n"
"      .iter()\n"
"      .enumerate()\n"
"      .map(|(i, rom_value)| {\n"
"        let index_alloc = alloc_const(\n"
"          cs.namespace(|| format!(\"rom_values {} index \", i)),\n"
"          F::from(i as u64),\n"
"        )?;\n"
"\n"
"        let equal_bit = Boolean::from(alloc_num_equals(\n"
"          cs.namespace(|| format!(\"rom_values {} equal bit\", i)),\n"
"          &index_alloc,\n"
"          pc_counter,\n"
"        )?);\n"
"\n"
"        conditionally_select(\n"
"          cs.namespace(|| format!(\"rom_values {} conditionally_select \", "
"i)),\n"
"          rom_value,\n"
"          &zero,\n"
"          &equal_bit,\n"
"        )\n"
"      })\n"
"\n"
"      .collect::<Result<Vec<AllocatedNum<F>>, SynthesisError>>()?;\n"
"\n"
"    let sum_lc = rom_values\n"
"      .iter()\n"
"      .fold(LinearCombination::<F>::zero(), |acc_lc, row_value| {\n"
"        acc_lc + row_value.get_variable()\n"
"      });\n"
"\n"
"    println!(\"self.circuit index ==============> : {:?}\", circuit_index."
"get_value());\n"
"    cs.enforce(\n"
"      || \"sum_lc == circuit_index\",\n"
"      |lc| lc + circuit_index.get_variable() - &sum_lc,\n"
"      |lc| lc + CS::one(),\n"
"      |lc| lc,\n"
"\n"
"    );\n"
"    Ok(())\n"
"\n"
"  }\n"
"```"
msgstr ""
"```\n"
"fn constraint_augmented_circuit_index<F: PrimeField, CS: "
"ConstraintSystem<F>>(\n"
"    mut cs: CS,\n"
"    pc_counter: &AllocatedNum<F>,\n"
"    rom: &[AllocatedNum<F>],\n"
"    circuit_index: &AllocatedNum<F>,\n"
"  ) -> Result<(), SynthesisError> {\n"
"\n"
"    // select target when index match or empty\n"
"    let zero = alloc_zero(cs.namespace(|| \"zero\"))?;\n"
"    let rom_values = rom\n"
"      .iter()\n"
"      .enumerate()\n"
"      .map(|(i, rom_value)| {\n"
"        let index_alloc = alloc_const(\n"
"          cs.namespace(|| format!(\"rom_values {} index \", i)),\n"
"          F::from(i as u64),\n"
"        )?;\n"
"\n"
"        let equal_bit = Boolean::from(alloc_num_equals(\n"
"          cs.namespace(|| format!(\"rom_values {} equal bit\", i)),\n"
"          &index_alloc,\n"
"          pc_counter,\n"
"        )?);\n"
"\n"
"        conditionally_select(\n"
"          cs.namespace(|| format!(\"rom_values {} conditionally_select \", "
"i)),\n"
"          rom_value,\n"
"          &zero,\n"
"          &equal_bit,\n"
"        )\n"
"      })\n"
"\n"
"      .collect::<Result<Vec<AllocatedNum<F>>, SynthesisError>>()?;\n"
"\n"
"    let sum_lc = rom_values\n"
"      .iter()\n"
"      .fold(LinearCombination::<F>::zero(), |acc_lc, row_value| {\n"
"        acc_lc + row_value.get_variable()\n"
"      });\n"
"\n"
"    println!(\"self.circuit index ==============> : {:?}\", circuit_index."
"get_value());\n"
"    cs.enforce(\n"
"      || \"sum_lc == circuit_index\",\n"
"      |lc| lc + circuit_index.get_variable() - &sum_lc,\n"
"      |lc| lc + CS::one(),\n"
"      |lc| lc,\n"
"\n"
"    );\n"
"    Ok(())\n"
"\n"
"  }\n"
"```"

#: src/Nova/SuperNova.md:124 src/exp/freeyao.md:152
msgid "致谢"
msgstr "致谢"

#: src/Nova/SuperNova.md:125
msgid "非常感谢 SECBIT Labs 的 @郭宇老师对SuperNova研究方向的指导。"
msgstr "非常感谢 SECBIT Labs 的 @郭宇老师对SuperNova研究方向的指导。"

#: src/Nova/SuperNova.md:127
msgid "[Supernova论文](https://eprint.iacr.org/2022/1758)"
msgstr "[Supernova论文](https://eprint.iacr.org/2022/1758)"

#: src/Nova/SuperNova.md:128
msgid "[ROM-based Supernova code](https://github.com/microsoft/Nova/pull/204)"
msgstr "[ROM-based Supernova code](https://github.com/microsoft/Nova/pull/204)"

#: src/Nova/SuperNova.md:129
msgid ""
"[Nova系列资料](https://github.com/dajuguan/awesome-nova-based-Recursive-Zero-"
"Knowledge-Arguments-knowlege)"
msgstr ""
"[Nova系列资料](https://github.com/dajuguan/awesome-nova-based-Recursive-Zero-"
"Knowledge-Arguments-knowlege)"

#: src/public goods/第二章.md:3
msgid "\\[\\[\\# Arithmetic circuits"
msgstr "\\[\\[\\# Arithmetic circuits"

#: src/public goods/第二章.md:5
msgid "2.1 Encoding the trace as arithmatic constraints"
msgstr "2.1 Encoding the trace as arithmatic constraints"

#: src/public goods/第二章.md:9
msgid ""
"\\*\\*Flattening：**将电路的执行转换成计算轨迹**，\\*\\*即将复合函数以乘法为"
"基本单元拆解成一组有序的简单函数"
msgstr ""
"\\*\\*Flattening：**将电路的执行转换成计算轨迹**，\\*\\*即将复合函数以乘法为"
"基本单元拆解成一组有序的简单函数"

#: src/public goods/第二章.md:10 goods/第二章.md:26
msgid "为输出变量，"
msgstr "为输出变量，"

#: src/public goods/第二章.md:10 goods/第二章.md:26
msgid "为左输入变量，"
msgstr "为左输入变量，"

#: src/public goods/第二章.md:10
msgid "为右输入变量"
msgstr "为右输入变量"

#: src/public goods/第二章.md:11
msgid "这里的有序是指按电路执行的顺序"
msgstr "这里的有序是指按电路执行的顺序"

#: src/public goods/第二章.md:12 goods/第二章.md:29
msgid "这里会引入中间变量"
msgstr "这里会引入中间变量"

#: src/public goods/第二章.md:12 goods/第二章.md:13 goods/第二章.md:14
#: goods/第二章.md:15 goods/第二章.md:17 goods/第二章.md:29
#: goods/第二章.md:30 goods/第二章.md:31 goods/第二章.md:32
msgid "sy"
msgstr "sy"

#: src/public goods/第二章.md:12 goods/第二章.md:17 goods/第二章.md:29
msgid "_1"
msgstr "_1"

#: src/public goods/第二章.md:13 goods/第二章.md:30
msgid "除了根节点处的门之外，其它的门的输出引脚添加对应的中间变量"
msgstr "除了根节点处的门之外，其它的门的输出引脚添加对应的中间变量"

#: src/public goods/第二章.md:14 goods/第二章.md:31
msgid "除了叶子节点处的门之外，其他的门的输入引脚添加中间变量"
msgstr "除了叶子节点处的门之外，其他的门的输入引脚添加中间变量"

#: src/public goods/第二章.md:14 goods/第二章.md:31
msgid "，该中间变量来自于另一个门的输出"
msgstr "，该中间变量来自于另一个门的输出"

#: src/public goods/第二章.md:15 goods/第二章.md:32
msgid ""
"举例说明：若门A的输出引脚接入到门B的输入引脚，则为门A的输出引脚和门B的输入引"
"脚添加同一个中间变量"
msgstr ""
"举例说明：若门A的输出引脚接入到门B的输入引脚，则为门A的输出引脚和门B的输入引"
"脚添加同一个中间变量"

#: src/public goods/第二章.md:16
msgid "**重组"
msgstr "**重组"

#: src/public goods/第二章.md:16
msgid "中的数据**：将其变成一阶约束系统R1CS："
msgstr "中的数据**：将其变成一阶约束系统R1CS："

#: src/public goods/第二章.md:16 goods/第二章.md:33
msgid "(注："
msgstr "(注："

#: src/public goods/第二章.md:16
msgid " 为Hadamard product，按位乘法):"
msgstr " 为Hadamard product，按位乘法):"

#: src/public goods/第二章.md:17
msgid ""
"，即由表示1的冗余变量，函数输出，输入变量，中间变量构成的集合对应的向量。"
msgstr ""
"，即由表示1的冗余变量，函数输出，输入变量，中间变量构成的集合对应的向量。"

#: src/public goods/第二章.md:18
msgid "的输出变量基于"
msgstr "的输出变量基于"

#: src/public goods/第二章.md:18 goods/第二章.md:19 goods/第二章.md:20
msgid "的选择向量构成的矩阵"
msgstr "的选择向量构成的矩阵"

#: src/public goods/第二章.md:19
msgid "的左输入变量基于"
msgstr "的左输入变量基于"

#: src/public goods/第二章.md:20
msgid "的右输入变量基于"
msgstr "的右输入变量基于"

#: src/public goods/第二章.md:21
msgid "注：矩阵的行数等于乘法门的数量，矩阵的列数等于"
msgstr "注：矩阵的行数等于乘法门的数量，矩阵的列数等于"

#: src/public goods/第二章.md:21
msgid "中元素的数量，即变量的数量"
msgstr "中元素的数量，即变量的数量"

#: src/public goods/第二章.md:23
msgid "Plonkish Arithmetization"
msgstr "Plonkish Arithmetization"

#: src/public goods/第二章.md:25
msgid "\\*\\*Flattening：\\*\\*即将复合函数拆解成一组离散的门"
msgstr "\\*\\*Flattening：\\*\\*即将复合函数拆解成一组离散的门"

#: src/public goods/第二章.md:26
msgid "为右输入变量，"
msgstr "为右输入变量，"

#: src/public goods/第二章.md:26
msgid "为常量，"
msgstr "为常量，"

#: src/public goods/第二章.md:26
msgid "为输出选择器，"
msgstr "为输出选择器，"

#: src/public goods/第二章.md:26
msgid "为左输入变量选择器，"
msgstr "为左输入变量选择器，"

#: src/public goods/第二章.md:26
msgid "为右输入变量选择器，"
msgstr "为右输入变量选择器，"

#: src/public goods/第二章.md:26
msgid "为乘积选择器，"
msgstr "为乘积选择器，"

#: src/public goods/第二章.md:26
msgid "为常数选择器"
msgstr "为常数选择器"

#: src/public goods/第二章.md:27
msgid "\\*\\*注：\\*\\*矩阵的行数等于所有门的数量，即约束的数量，n。"
msgstr "\\*\\*注：\\*\\*矩阵的行数等于所有门的数量，即约束的数量，n。"

#: src/public goods/第二章.md:28
msgid "这里的有序是指计算的顺序"
msgstr "这里的有序是指计算的顺序"

#: src/public goods/第二章.md:33
msgid "\\*\\*重组"
msgstr "\\*\\*重组"

#: src/public goods/第二章.md:33
msgid "中的数据：\\*\\*将其变成："
msgstr "中的数据：\\*\\*将其变成："

#: src/public goods/第二章.md:33
msgid " 为Hadamard product，按位乘法)"
msgstr " 为Hadamard product，按位乘法)"

#: src/public goods/第二章.md:34
msgid "，即选择器矩阵"
msgstr "，即选择器矩阵"

#: src/public goods/第二章.md:35
msgid "，即变量矩阵"
msgstr "，即变量矩阵"

#: src/public goods/第二章.md:36
msgid " 轮换置换后得到的位置集合，来自于**Wiring**"
msgstr " 轮换置换后得到的位置集合，来自于**Wiring**"

#: src/public goods/第二章.md:37
msgid "**Wiring(Copy Constraints)**"
msgstr "**Wiring(Copy Constraints)**"

#: src/public goods/第二章.md:38
msgid ""
"分析：Wiring即将离散的门连接起来，即某一个门的输出引脚要接入另一个门的输入引"
"脚"
msgstr ""
"分析：Wiring即将离散的门连接起来，即某一个门的输出引脚要接入另一个门的输入引"
"脚"

#: src/public goods/第二章.md:38
msgid "约束变量矩阵"
msgstr "约束变量矩阵"

#: src/public goods/第二章.md:38
msgid "中某几个位置的元素是相等的"
msgstr "中某几个位置的元素是相等的"

#: src/public goods/第二章.md:38
msgid "这一个元素出现在"
msgstr "这一个元素出现在"

#: src/public goods/第二章.md:38
msgid "矩阵的多个位置处"
msgstr "矩阵的多个位置处"

#: src/public goods/第二章.md:39
msgid "Wiring实现思路："
msgstr "Wiring实现思路："

#: src/public goods/第二章.md:40
msgid "把"
msgstr "把"

#: src/public goods/第二章.md:40
msgid "矩阵中的每一个位置从1到3n进行唯一编号，则所有的编号构成一个位置集合"
msgstr "矩阵中的每一个位置从1到3n进行唯一编号，则所有的编号构成一个位置集合"

#: src/public goods/第二章.md:40
msgid "，将位置集合"
msgstr "，将位置集合"

#: src/public goods/第二章.md:40
msgid "对应的元素取出构成一个multiset "
msgstr "对应的元素取出构成一个multiset "

#: src/public goods/第二章.md:41
msgid "把每个元素出现在"
msgstr "把每个元素出现在"

#: src/public goods/第二章.md:41
msgid "中的位置编号取出放在一个集合中"
msgstr "中的位置编号取出放在一个集合中"

#: src/public goods/第二章.md:41
msgid "，即一个元素对应一个位置集合"
msgstr "，即一个元素对应一个位置集合"

#: src/public goods/第二章.md:41
msgid "。将位置集合对应的元素取出构成一个multiset "
msgstr "。将位置集合对应的元素取出构成一个multiset "

#: src/public goods/第二章.md:41
msgid "。所有元素的"
msgstr "。所有元素的"

#: src/public goods/第二章.md:41
msgid "的并集即为"
msgstr "的并集即为"

#: src/public goods/第二章.md:41
msgid "的并集为 "
msgstr "的并集为 "

#: src/public goods/第二章.md:42 goods/第二章.md:44 goods/第二章.md:46
#: goods/第二章.md:88
msgid "‘∀"
msgstr "‘∀"

#: src/public goods/第二章.md:42
msgid "，要使得 "
msgstr "，要使得 "

#: src/public goods/第二章.md:42
msgid "中元素全部相等"
msgstr "中元素全部相等"

#: src/public goods/第二章.md:44
msgid "与其进行轮换置换"
msgstr "与其进行轮换置换"

#: src/public goods/第二章.md:44
msgid "后得到的集合"
msgstr "后得到的集合"

#: src/public goods/第二章.md:44 goods/第二章.md:46 goods/第二章.md:48
msgid "在Multiset的意义上是等价的"
msgstr "在Multiset的意义上是等价的"

#: src/public goods/第二章.md:46 goods/第二章.md:48
msgid "与"
msgstr "与"

#: src/public goods/第二章.md:48
msgid "⇐"
msgstr "⇐"

#: src/public goods/第二章.md:48 goods/第二章.md:50 goods/第二章.md:86
#: goods/第二章.md:91 goods/第二章.md:105 goods/第二章.md:111
#: goods/第二章.md:156
msgid "令"
msgstr "令"

#: src/public goods/第二章.md:48
msgid "为所有"
msgstr "为所有"

#: src/public goods/第二章.md:48
msgid "的并集，"
msgstr "的并集，"

#: src/public goods/第二章.md:48
msgid "的并集， "
msgstr "的并集， "

#: src/public goods/第二章.md:50
msgid "，取随机数"
msgstr "，取随机数"

#: src/public goods/第二章.md:50 goods/第二章.md:80 goods/第二章.md:81
#: goods/第二章.md:107
msgid "，有"
msgstr "，有"

#: src/public goods/第二章.md:58
msgid "至此，问题转化成如何证明连乘等式 "
msgstr "至此，问题转化成如何证明连乘等式 "

#: src/public goods/第二章.md:58
msgid "，即证明一个n步递归，"
msgstr "，即证明一个n步递归，"

#: src/public goods/第二章.md:59
msgid "初始值："
msgstr "初始值："

#: src/public goods/第二章.md:60
msgid "递归定义："
msgstr "递归定义："

#: src/public goods/第二章.md:61
msgid "终止条件："
msgstr "终止条件："

#: src/public goods/第二章.md:63
msgid "则有"
msgstr "则有"

#: src/public goods/第二章.md:67
msgid "所有"
msgstr "所有"

#: src/public goods/第二章.md:67
msgid " 构成向量 "
msgstr " 构成向量 "

#: src/public goods/第二章.md:69
msgid "至此，**Wiring**转化成三个约束"
msgstr "至此，**Wiring**转化成三个约束"

#: src/public goods/第二章.md:70
msgid "  即约束向量的指定位的值为k，即约束"
msgstr "  即约束向量的指定位的值为k，即约束"

#: src/public goods/第二章.md:70
msgid "的第1位("
msgstr "的第1位("

#: src/public goods/第二章.md:70
msgid ")的值为1，第n+1位("
msgstr ")的值为1，第n+1位("

#: src/public goods/第二章.md:70
msgid ")的值为"
msgstr ")的值为"

#: src/public goods/第二章.md:72
msgid "设"
msgstr "设"

#: src/public goods/第二章.md:72
msgid "为n维向量空间的标准基的第i个基向量，向量"
msgstr "为n维向量空间的标准基的第i个基向量，向量"

#: src/public goods/第二章.md:72
msgid "的第"
msgstr "的第"

#: src/public goods/第二章.md:72
msgid "位为"
msgstr "位为"

#: src/public goods/第二章.md:72
msgid "等价于："
msgstr "等价于："

#: src/public goods/第二章.md:76
msgid "2.2 Constraints Merge"
msgstr "2.2 Constraints Merge"

#: src/public goods/第二章.md:78
msgid "R1CS to QAP"
msgstr "R1CS to QAP"

#: src/public goods/第二章.md:80 goods/第二章.md:81 goods/第二章.md:86
#: goods/第二章.md:103
msgid "mma"
msgstr "mma"

#: src/public goods/第二章.md:80
msgid " 带有Hadamard product运算的n维向量的群"
msgstr " 带有Hadamard product运算的n维向量的群"

#: src/public goods/第二章.md:80
msgid "，和带有乘法运算的在"
msgstr "，和带有乘法运算的在"

#: src/public goods/第二章.md:80 goods/第二章.md:103
msgid "上的最高项次数不大于n-1的单变量多项式"
msgstr "上的最高项次数不大于n-1的单变量多项式"

#: src/public goods/第二章.md:80 goods/第二章.md:103
msgid "的群，映射："
msgstr "的群，映射："

#: src/public goods/第二章.md:80
msgid ",令"
msgstr ",令"

#: src/public goods/第二章.md:80 goods/第二章.md:103
msgid "，是群同态"
msgstr "，是群同态"

#: src/public goods/第二章.md:81 goods/第二章.md:107
msgid "由"
msgstr "由"

#: src/public goods/第二章.md:89
msgid "为根，"
msgstr "为根，"

#: src/public goods/第二章.md:89 goods/第二章.md:162
msgid "能被"
msgstr "能被"

#: src/public goods/第二章.md:89 goods/第二章.md:162
msgid "整除"
msgstr "整除"

#: src/public goods/第二章.md:91
msgid ", 至此，完成了从R1CS到QAP到转换"
msgstr ", 至此，完成了从R1CS到QAP到转换"

#: src/public goods/第二章.md:93
msgid "Plonkish Arithmetization to QAP"
msgstr "Plonkish Arithmetization to QAP"

#: src/public goods/第二章.md:95
msgid "Plonkish Arithmetization包含两部分约束："
msgstr "Plonkish Arithmetization包含两部分约束："

#: src/public goods/第二章.md:99
msgid ""
"第一部分约束每个门是正确计算的，即所谓算术约束；第二部分约束门与门之间正确连"
"接，即所谓复制约束。"
msgstr ""
"第一部分约束每个门是正确计算的，即所谓算术约束；第二部分约束门与门之间正确连"
"接，即所谓复制约束。"

#: src/public goods/第二章.md:101
msgid "**首先来转换算术约束：**"
msgstr "**首先来转换算术约束：**"

#: src/public goods/第二章.md:103
msgid "带有加法的n维向量的群"
msgstr "带有加法的n维向量的群"

#: src/public goods/第二章.md:103
msgid "，和带有加法的在"
msgstr "，和带有加法的在"

#: src/public goods/第二章.md:103
msgid "，令"
msgstr "，令"

#: src/public goods/第二章.md:103
msgid "，有`$h(\\vec m)= \\langle \\vec m,\\vec L(X) \\rangle`"
msgstr "，有`$h(\\vec m)= \\langle \\vec m,\\vec L(X) \\rangle`"

#: src/public goods/第二章.md:103
msgid "`Lemma5:`"
msgstr "`Lemma5:`"

#: src/public goods/第二章.md:103
msgid "同态映射的复合映射必定是同态映射"
msgstr "同态映射的复合映射必定是同态映射"

#: src/public goods/第二章.md:103
msgid "`由Lemma1,Lemma4,Lemma5,有`"
msgstr "`由Lemma1,Lemma4,Lemma5,有`"

#: src/public goods/第二章.md:103
msgid ""
"`\\vec{q_O}\\circ \\vec{w}=\\vec{q_L}\\circ\\vec{u}+\\vec{q_R}\\circ\\vec{v}+"
"\\vec{q_M}\\circ(\\vec{u}\\circ\\vec{v})+\\vec{q_C}\\circ\\vec{c} \\\\ \\iff "
"\\langle \\vec q_O,\\vec L(X) \\rangle \\cdot \\langle \\vec w,\\vec L(X) "
"\\rangle=\\langle \\vec q_L,\\vec L(X) \\rangle \\cdot \\langle \\vec u,"
"\\vec L(X) \\rangle+\\langle \\vec q_R,\\vec L(X) \\rangle \\cdot \\langle "
"\\vec v,\\vec L(X) \\rangle+\\langle \\vec q_m,\\vec L(X) \\rangle \\cdot "
"(\\langle \\vec u,\\vec L(X) \\rangle\\cdot\\langle \\vec v,\\vec L(X) "
"\\rangle )+\\langle \\vec q_C,\\vec L(X) \\rangle `"
msgstr ""
"`\\vec{q_O}\\circ \\vec{w}=\\vec{q_L}\\circ\\vec{u}+\\vec{q_R}\\circ\\vec{v}+"
"\\vec{q_M}\\circ(\\vec{u}\\circ\\vec{v})+\\vec{q_C}\\circ\\vec{c} \\\\ \\iff "
"\\langle \\vec q_O,\\vec L(X) \\rangle \\cdot \\langle \\vec w,\\vec L(X) "
"\\rangle=\\langle \\vec q_L,\\vec L(X) \\rangle \\cdot \\langle \\vec u,"
"\\vec L(X) \\rangle+\\langle \\vec q_R,\\vec L(X) \\rangle \\cdot \\langle "
"\\vec v,\\vec L(X) \\rangle+\\langle \\vec q_m,\\vec L(X) \\rangle \\cdot "
"(\\langle \\vec u,\\vec L(X) \\rangle\\cdot\\langle \\vec v,\\vec L(X) "
"\\rangle )+\\langle \\vec q_C,\\vec L(X) \\rangle `"

#: src/public goods/第二章.md:105
msgid "`a(X) =\\langle \\vec a,\\vec L(X) \\rangle`"
msgstr "`a(X) =\\langle \\vec a,\\vec L(X) \\rangle`"

#: src/public goods/第二章.md:105
msgid "，上式转化为："
msgstr "，上式转化为："

#: src/public goods/第二章.md:105
msgid "`q_O(X)w(X)=q_L(X)u(X)+q_R(X)v(X)+q_M(X)u(X)v(X)+q_C(X)`"
msgstr "`q_O(X)w(X)=q_L(X)u(X)+q_R(X)v(X)+q_M(X)u(X)v(X)+q_C(X)`"

#: src/public goods/第二章.md:107
msgid "至此，"
msgstr "至此，"

#: src/public goods/第二章.md:107
msgid "个算术约束转化成了一个由八个"
msgstr "个算术约束转化成了一个由八个"

#: src/public goods/第二章.md:107
msgid "次多项式之间构成的约束。"
msgstr "次多项式之间构成的约束。"

#: src/public goods/第二章.md:107
msgid "接着转换复制约束："
msgstr "接着转换复制约束："

#: src/public goods/第二章.md:107 goods/第二章.md:111
msgid "`Lemma1`"
msgstr "`Lemma1`"

#: src/public goods/第二章.md:107
msgid ""
"`\\vec e_i \\circ \\vec r=k\\times \\vec e_i \\\\ \\iff L_i(X)r(X)=k\\times "
"L_i(X) \\\\ \\iff L_i(X)(r(X)-k)=0`"
msgstr ""
"`\\vec e_i \\circ \\vec r=k\\times \\vec e_i \\\\ \\iff L_i(X)r(X)=k\\times "
"L_i(X) \\\\ \\iff L_i(X)(r(X)-k)=0`"

#: src/public goods/第二章.md:109
msgid "`r_0=1  \\iff L_0(X)(r(X)-1)=0 \\\\ r_n=c \\iff L_n(X)(r(X)-c)=0 `"
msgstr "`r_0=1  \\iff L_0(X)(r(X)-1)=0 \\\\ r_n=c \\iff L_n(X)(r(X)-c)=0 `"

#: src/public goods/第二章.md:111
msgid "`L_i(X)`"
msgstr "`L_i(X)`"

#: src/public goods/第二章.md:111
msgid "为定义在乘法子群"
msgstr "为定义在乘法子群"

#: src/public goods/第二章.md:111
msgid "上的"
msgstr "上的"

#: src/public goods/第二章.md:111
msgid "`Lagrange Basis`"
msgstr "`Lagrange Basis`"

#: src/public goods/第二章.md:111
msgid "，由"
msgstr "，由"

#: src/public goods/第二章.md:111
msgid ""
"`\\vec r_{i}=\\vec r_{i-1}  \\circ \\vec b_{i-1} \\\\ \\iff \\langle \\vec r,"
"\\vec L(\\omega \\cdot X) \\rangle =\\langle \\vec r,\\vec L(X) \\rangle  "
"\\cdot \\langle \\vec b,\\vec L(X) \\rangle`"
msgstr ""
"`\\vec r_{i}=\\vec r_{i-1}  \\circ \\vec b_{i-1} \\\\ \\iff \\langle \\vec r,"
"\\vec L(\\omega \\cdot X) \\rangle =\\langle \\vec r,\\vec L(X) \\rangle  "
"\\cdot \\langle \\vec b,\\vec L(X) \\rangle`"

#: src/public goods/第二章.md:115
msgid "至此，复制约束转换成了三个多项式约束。"
msgstr "至此，复制约束转换成了三个多项式约束。"

#: src/public goods/第二章.md:117
msgid "2.3 A function commitment scheme"
msgstr "2.3 A function commitment scheme"

#: src/public goods/第二章.md:119
msgid "在2.3中得到了一系列多项式之间的约束，本节我们来看如何实现多项式约束，"
msgstr "在2.3中得到了一系列多项式之间的约束，本节我们来看如何实现多项式约束，"

#: src/public goods/第二章.md:121
msgid "令："
msgstr "令："

#: src/public goods/第二章.md:123
msgid "`\\mathcal F:=function\\   family`"
msgstr "`\\mathcal F:=function\\   family`"

#: src/public goods/第二章.md:123
msgid "，即一类多项式"
msgstr "，即一类多项式"

#: src/public goods/第二章.md:123
msgid "`\\mathbb F_p:= 有限域`"
msgstr "`\\mathbb F_p:= 有限域`"

#: src/public goods/第二章.md:125
msgid "对于\\mathcal F"
msgstr "对于\\mathcal F"

#: src/public goods/第二章.md:125
msgid "的"
msgstr "的"

#: src/public goods/第二章.md:125
msgid "tS"
msgstr "tS"

#: src/public goods/第二章.md:125
msgid "ce"
msgstr "ce"

#: src/public goods/第二章.md:125
msgid "框架如下："
msgstr "框架如下："

#: src/public goods/第二章.md:125 goods/第二章.md:146
msgid "`setup(\\lambda) \\to pp`"
msgstr "`setup(\\lambda) \\to pp`"

#: src/public goods/第二章.md:125 goods/第二章.md:146
#: goods/4-Proving-System.md:147
msgid "计算"
msgstr "计算"

#: src/public goods/第二章.md:125
msgid "am"
msgstr "am"

#: src/public goods/第二章.md:125 goods/第二章.md:146
msgid "`commit(pp,f,r) \\to com_f`"
msgstr "`commit(pp,f,r) \\to com_f`"

#: src/public goods/第二章.md:125
msgid "`基于随机数r对f\\in \\mathcal F的承诺`"
msgstr "`基于随机数r对f\\in \\mathcal F的承诺`"

#: src/public goods/第二章.md:125 goods/第二章.md:146
msgid "`eval(prover \\ P,verifier\\ V)`"
msgstr "`eval(prover \\ P,verifier\\ V)`"

#: src/public goods/第二章.md:125
msgid "对于给定的"
msgstr "对于给定的"

#: src/public goods/第二章.md:125
msgid "`com_f`"
msgstr "`com_f`"

#: src/public goods/第二章.md:125
msgid "，以及"
msgstr "，以及"

#: src/public goods/第二章.md:125
msgid "`x\\in X,y\\in Y:证明f(x)=y,即所谓的将f在点(x,y)处打开`"
msgstr "`x\\in X,y\\in Y:证明f(x)=y,即所谓的将f在点(x,y)处打开`"

#: src/public goods/第二章.md:125
msgid "`P(pp,f,x,y,r) \\to 简短证明\\pi`"
msgstr "`P(pp,f,x,y,r) \\to 简短证明\\pi`"

#: src/public goods/第二章.md:125
msgid "`V(pp,com_f,x,y,\\pi)\\to 接受/拒绝`"
msgstr "`V(pp,com_f,x,y,\\pi)\\to 接受/拒绝`"

#: src/public goods/第二章.md:127
msgid "三类典型的Function Family Commiments"
msgstr "三类典型的Function Family Commiments"

#: src/public goods/第二章.md:129
msgid ""
"Polynominal commitments：次数不大于d的单变量多项式承诺 `f(X)\\in \\mathbb "
"F_p^{(\\leq d)} [X]`"
msgstr ""
"Polynominal commitments：次数不大于d的单变量多项式承诺 `f(X)\\in \\mathbb "
"F_p^{(\\leq d)} [X]`"

#: src/public goods/第二章.md:129
msgid "rco"
msgstr "rco"

#: src/public goods/第二章.md:129
msgid "：次数小于等于"
msgstr "：次数小于等于"

#: src/public goods/第二章.md:129
msgid "的多变量多项式承诺"
msgstr "的多变量多项式承诺"

#: src/public goods/第二章.md:129
msgid "`f(X_1,...,X_k)\\in \\mathbb F_p^{(\\leq 1)}[X_1,...,X_K]`"
msgstr "`f(X_1,...,X_k)\\in \\mathbb F_p^{(\\leq 1)}[X_1,...,X_K]`"

#: src/public goods/第二章.md:129
msgid ""
"`f_{\\vec v}(\\vec u)= \\left \\langle \\vec u, \\vec v \\right "
"\\rangle=\\sum _{i=1}^nu_iv_i`"
msgstr ""
"`f_{\\vec v}(\\vec u)= \\left \\langle \\vec u, \\vec v \\right "
"\\rangle=\\sum _{i=1}^nu_iv_i`"

#: src/public goods/第二章.md:131
msgid "这三者从上到下，越来越general"
msgstr "这三者从上到下，越来越general"

#: src/public goods/第二章.md:133
msgid "PCS: Polynominal Commitment Scheme"
msgstr "PCS: Polynominal Commitment Scheme"

#: src/public goods/第二章.md:135
msgid "适用于次数不大于d的单变量多项式 `f(X)\\in \\mathbb F_p^{(\\leq d)} [X]`"
msgstr ""
"适用于次数不大于d的单变量多项式 `f(X)\\in \\mathbb F_p^{(\\leq d)} [X]`"

#: src/public goods/第二章.md:137
msgid "Some usual PSC"
msgstr "Some usual PSC"

#: src/public goods/第二章.md:139
msgid "Bulletproofs：基于椭圆曲线，verifier的算法复杂度与d成线性相关"
msgstr "Bulletproofs：基于椭圆曲线，verifier的算法复杂度与d成线性相关"

#: src/public goods/第二章.md:140
msgid "KZG‘10，Dory’20：基于双线性椭圆曲线"
msgstr "KZG‘10，Dory’20：基于双线性椭圆曲线"

#: src/public goods/第二章.md:141
msgid "Dark’20：基于阶未知的群"
msgstr "Dark’20：基于阶未知的群"

#: src/public goods/第二章.md:142
msgid "FRI：基于hash Function"
msgstr "FRI：基于hash Function"

#: src/public goods/第二章.md:144
msgid "KZG poly-commit scheme"
msgstr "KZG poly-commit scheme"

#: src/public goods/第二章.md:146
msgid ""
"预备知识：`阶为p的群\\ \\mathbb G:=\\{1,G,2\\cdot G,3\\cdot G,...,"
"(p-1)\\cdot G\\} ,其中，G为生成元`"
msgstr ""
"预备知识：`阶为p的群\\ \\mathbb G:=\\{1,G,2\\cdot G,3\\cdot G,...,"
"(p-1)\\cdot G\\} ,其中，G为生成元`"

#: src/public goods/第二章.md:146
msgid "取随机数"
msgstr "取随机数"

#: src/public goods/第二章.md:146
msgid "`\\alpha\\in \\mathbb F_p`"
msgstr "`\\alpha\\in \\mathbb F_p`"

#: src/public goods/第二章.md:146
msgid ""
"`pp=(H_0=1,H_1=\\alpha \\cdot G,H_2=\\alpha^2 \\cdot G,...,H_d=\\alpha^d "
"\\cdot G)\\in \\mathbb G^{d+1}`"
msgstr ""
"`pp=(H_0=1,H_1=\\alpha \\cdot G,H_2=\\alpha^2 \\cdot G,...,H_d=\\alpha^d "
"\\cdot G)\\in \\mathbb G^{d+1}`"

#: src/public goods/第二章.md:146
msgid "删除"
msgstr "删除"

#: src/public goods/第二章.md:146
msgid "`\\alpha`"
msgstr "`\\alpha`"

#: src/public goods/第二章.md:146
msgid "也称为"
msgstr "也称为"

#: src/public goods/第二章.md:146
msgid "ey"
msgstr "ey"

#: src/public goods/第二章.md:146
msgid "，即除了上帝，"
msgstr "，即除了上帝，"

#: src/public goods/第二章.md:146
msgid "不能被任何人知道"
msgstr "不能被任何人知道"

#: src/public goods/第二章.md:146
msgid "`com_f:=f(\\alpha)\\cdot G \\in \\mathbb G`"
msgstr "`com_f:=f(\\alpha)\\cdot G \\in \\mathbb G`"

#: src/public goods/第二章.md:146
msgid "：具体的计算方法如下："
msgstr "：具体的计算方法如下："

#: src/public goods/第二章.md:146
msgid "`f(X)=f_0+f_1X+...+f_dX^d`"
msgstr "`f(X)=f_0+f_1X+...+f_dX^d`"

#: src/public goods/第二章.md:146
msgid ""
"`\\implies com_f=f_0\\cdot 1+f_1\\cdot\\alpha G+f_2\\cdot\\alpha^2 G+ ..."
"+f_d\\cdot \\alpha^dG`"
msgstr ""
"`\\implies com_f=f_0\\cdot 1+f_1\\cdot\\alpha G+f_2\\cdot\\alpha^2 G+ ..."
"+f_d\\cdot \\alpha^dG`"

#: src/public goods/第二章.md:146
msgid "`\\iff com_f=f_0\\cdot H——1+f_1\\cdot H1+...+f_d\\cdot H_d`"
msgstr "`\\iff com_f=f_0\\cdot H——1+f_1\\cdot H1+...+f_d\\cdot H_d`"

#: src/public goods/第二章.md:146
msgid "注意，此处是"
msgstr "注意，此处是"

#: src/public goods/第二章.md:146
msgid "的，但由于未做随机处理，故不是"
msgstr "的，但由于未做随机处理，故不是"

#: src/public goods/第二章.md:146
msgid "的，若需"
msgstr "的，若需"

#: src/public goods/第二章.md:146
msgid "，需要"
msgstr "，需要"

#: src/public goods/第二章.md:146
msgid "目标：证明"
msgstr "目标：证明"

#: src/public goods/第二章.md:146
msgid "`f(u)=v`"
msgstr "`f(u)=v`"

#: src/public goods/第二章.md:146
msgid "`\\iff u是 \\hat f =f-v的根`"
msgstr "`\\iff u是 \\hat f =f-v的根`"

#: src/public goods/第二章.md:146
msgid "`\\iff (X-u)整除\\hat f`"
msgstr "`\\iff (X-u)整除\\hat f`"

#: src/public goods/第二章.md:146
msgid ""
"`\\iff \\exists q\\in \\mathbb{F}_p[X]\\  \\ s.t.\\ \\ q(X)\\cdot(X-u)=f(X)-"
"v`"
msgstr ""
"`\\iff \\exists q\\in \\mathbb{F}_p[X]\\  \\ s.t.\\ \\ q(X)\\cdot(X-u)=f(X)-"
"v`"

#: src/public goods/第二章.md:146
msgid "`Prover(pp,f,u,v)`"
msgstr "`Prover(pp,f,u,v)`"

#: src/public goods/第二章.md:146
msgid "商多项式q(X) 及其承诺com_q"
msgstr "商多项式q(X) 及其承诺com_q"

#: src/public goods/第二章.md:146
msgid "，发送给"
msgstr "，发送给"

#: src/public goods/第二章.md:146
msgid "`Verifier(pp,com_f,u,v)`"
msgstr "`Verifier(pp,com_f,u,v)`"

#: src/public goods/第二章.md:146
msgid "检查"
msgstr "检查"

#: src/public goods/第二章.md:146
msgid "`(\\alpha-u)\\cdot com_q=com_f-v\\cdot G`"
msgstr "`(\\alpha-u)\\cdot com_q=com_f-v\\cdot G`"

#: src/public goods/第二章.md:146
msgid "是否成立"
msgstr "是否成立"

#: src/public goods/第二章.md:146
msgid "此处的问题是"
msgstr "此处的问题是"

#: src/public goods/第二章.md:146
msgid "是不可知的，那如何在不用显式地知道"
msgstr "是不可知的，那如何在不用显式地知道"

#: src/public goods/第二章.md:146
msgid "的前提下验证等式"
msgstr "的前提下验证等式"

#: src/public goods/第二章.md:146
msgid "呢？在"
msgstr "呢？在"

#: src/public goods/第二章.md:146
msgid "`com_q和com_f`"
msgstr "`com_q和com_f`"

#: src/public goods/第二章.md:146
msgid "中我们通过"
msgstr "中我们通过"

#: src/public goods/第二章.md:146
msgid "步骤将"
msgstr "步骤将"

#: src/public goods/第二章.md:146
msgid "隐藏了，那么等式左侧的"
msgstr "隐藏了，那么等式左侧的"

#: src/public goods/第二章.md:146
msgid "`(\\alpha-u)`"
msgstr "`(\\alpha-u)`"

#: src/public goods/第二章.md:146
msgid "是不是同样也可以通过"
msgstr "是不是同样也可以通过"

#: src/public goods/第二章.md:146
msgid "隐藏起来？为达到这个目的，我们需要扩展"
msgstr "隐藏起来？为达到这个目的，我们需要扩展"

#: src/public goods/第二章.md:146
msgid "成如下"
msgstr "成如下"

#: src/public goods/第二章.md:146
msgid ""
"`pp=(H_0=1,H_1=\\alpha \\cdot G,H_2=\\alpha^2 \\cdot G,...,H_d=\\alpha^d "
"\\cdot G)\\in \\mathbb G^{d+1} + (T_0=1,T_1=\\alpha \\cdot G_2) \\in "
"\\mathbb G_2^1`"
msgstr ""
"`pp=(H_0=1,H_1=\\alpha \\cdot G,H_2=\\alpha^2 \\cdot G,...,H_d=\\alpha^d "
"\\cdot G)\\in \\mathbb G^{d+1} + (T_0=1,T_1=\\alpha \\cdot G_2) \\in "
"\\mathbb G_2^1`"

#: src/public goods/第二章.md:146
msgid "引入双线性映射关系"
msgstr "引入双线性映射关系"

#: src/public goods/第二章.md:146
msgid ""
"`e\\in \\mathbb G \\times \\mathbb G_2 \\to \\mathbb G_X$` \\- 至此，将原来需"
"要验证的"
msgstr ""
"`e\\in \\mathbb G \\times \\mathbb G_2 \\to \\mathbb G_X$` \\- 至此，将原来需"
"要验证的"

#: src/public goods/第二章.md:147
msgid "，转换成了 在"
msgstr "，转换成了 在"

#: src/public goods/第二章.md:147
msgid "上验证"
msgstr "上验证"

#: src/public goods/第二章.md:149
msgid "2.4 Polynominal IOP"
msgstr "2.4 Polynominal IOP"

#: src/public goods/第二章.md:151
msgid "Useful Lemma"
msgstr "Useful Lemma"

#: src/public goods/第二章.md:153
msgid "Lemma1: Schwartz zipple定理"
msgstr "Lemma1: Schwartz zipple定理"

#: src/public goods/第二章.md:154
msgid "Lemma2: 单位根和乘法子群\\*\\*：\\*\\*"
msgstr "Lemma2: 单位根和乘法子群\\*\\*：\\*\\*"

#: src/public goods/第二章.md:156
msgid "为k次单位根，即 "
msgstr "为k次单位根，即 "

#: src/public goods/第二章.md:158
msgid "乘法子群 "
msgstr "乘法子群 "

#: src/public goods/第二章.md:160
msgid "由于单位根的对称性，有"
msgstr "由于单位根的对称性，有"

#: src/public goods/第二章.md:162
msgid "Lemma3: "
msgstr "Lemma3: "

#: src/public goods/第二章.md:162
msgid "中的元素"
msgstr "中的元素"

#: src/public goods/第二章.md:162
msgid "均为"
msgstr "均为"

#: src/public goods/第二章.md:162
msgid "的根，即"
msgstr "的根，即"

#: src/public goods/第二章.md:162
msgid "上均为"
msgstr "上均为"

#: src/public goods/第二章.md:162
msgid "0‘"
msgstr "0‘"

#: src/public goods/第二章.md:164
msgid "存在商多项式  "
msgstr "存在商多项式  "

#: src/public goods/第二章.md:167
msgid "Poly-IOP可以高效完成的任务"
msgstr "Poly-IOP可以高效完成的任务"

#: src/public goods/第二章.md:169
msgid "**Task1 zero-test**：证明"
msgstr "**Task1 zero-test**：证明"

#: src/public goods/第二章.md:169
msgid "在H上等于0，即证明H中的元素均为"
msgstr "在H上等于0，即证明H中的元素均为"

#: src/public goods/第二章.md:169
msgid "的根"
msgstr "的根"

#: src/public goods/第二章.md:170
msgid "**Task2 sum-check**：证明"
msgstr "**Task2 sum-check**：证明"

#: src/public goods/第二章.md:170 goods/第二章.md:171
msgid "，即证明"
msgstr "，即证明"

#: src/public goods/第二章.md:170
msgid "在H上全部取值的和等于b"
msgstr "在H上全部取值的和等于b"

#: src/public goods/第二章.md:171
msgid "**Task3 prod-check**：证明"
msgstr "**Task3 prod-check**：证明"

#: src/public goods/第二章.md:171
msgid "在H上全部取值的和等于c"
msgstr "在H上全部取值的和等于c"

#: src/public goods/第二章.md:173
msgid "Zero Test on H"
msgstr "Zero Test on H"

#: src/public goods/第二章.md:175
msgid "Prover 向 Verifier Commit "
msgstr "Prover 向 Verifier Commit "

#: src/public goods/第二章.md:176
msgid "Verifier 向Prover 发送随机数r"
msgstr "Verifier 向Prover 发送随机数r"

#: src/public goods/第二章.md:177
msgid "Verifier 检查"
msgstr "Verifier 检查"

#: src/public goods/第二章.md:181
msgid ""
"[https://github.com/sec-bit/learning-zkp/blob/develop/plonk-intro-cn/plonk-"
"arithmetization.md](https://github.com/sec-bit/learning-zkp/blob/develop/"
"plonk-intro-cn/plonk-arithmetization.md)"
msgstr ""
"[https://github.com/sec-bit/learning-zkp/blob/develop/plonk-intro-cn/plonk-"
"arithmetization.md](https://github.com/sec-bit/learning-zkp/blob/develop/"
"plonk-intro-cn/plonk-arithmetization.md)"

#: src/public goods/第二章.md:183
msgid ""
"[https://www.youtube.com/watch?"
"v=J4pVTamUBvU&list=PLj80z0cJm8QErn3akRcqvxUsyXWC81OGq&index=2](https://www."
"youtube.com/watch?"
"v=J4pVTamUBvU&list=PLj80z0cJm8QErn3akRcqvxUsyXWC81OGq&index=2)"
msgstr ""
"[https://www.youtube.com/watch?"
"v=J4pVTamUBvU&list=PLj80z0cJm8QErn3akRcqvxUsyXWC81OGq&index=2](https://www."
"youtube.com/watch?"
"v=J4pVTamUBvU&list=PLj80z0cJm8QErn3akRcqvxUsyXWC81OGq&index=2)"

#: src/public goods/第二章.md:185
msgid ""
"[https://github.com/sec-bit/learning-zkp/blob/develop/plonk-intro-cn/plonk-"
"polycom.md](https://github.com/sec-bit/learning-zkp/blob/develop/plonk-intro-"
"cn/plonk-polycom.md) \\](https://github.com/zkp-co-learning/ZKP/edit/main/"
"%E7%AC%AC%E4%BA%8C%E7%AB%A0.md)https://github.com/zkp-co-learning/ZKP/edit/"
"main/%E7%AC%AC%E4%BA%8C%E7%AB%A0.md\\](https://github.com/zkp-co-learning/"
"ZKP/edit/main/%E7%AC%AC%E4%BA%8C%E7%AB%A0.md)https://github.com/zkp-co-"
"learning/ZKP/edit/main/%E7%AC%AC%E4%BA%8C%E7%AB%A0.md"
msgstr ""
"[https://github.com/sec-bit/learning-zkp/blob/develop/plonk-intro-cn/plonk-"
"polycom.md](https://github.com/sec-bit/learning-zkp/blob/develop/plonk-intro-"
"cn/plonk-polycom.md) \\](https://github.com/zkp-co-learning/ZKP/edit/main/"
"%E7%AC%AC%E4%BA%8C%E7%AB%A0.md)https://github.com/zkp-co-learning/ZKP/edit/"
"main/%E7%AC%AC%E4%BA%8C%E7%AB%A0.md\\](https://github.com/zkp-co-learning/"
"ZKP/edit/main/%E7%AC%AC%E4%BA%8C%E7%AB%A0.md)https://github.com/zkp-co-"
"learning/ZKP/edit/main/%E7%AC%AC%E4%BA%8C%E7%AB%A0.md"

#: src/public goods/4-Proving-System.md:3
msgid "本文假设您对椭圆曲线运算及哈希函数等有着基础的了解"
msgstr "本文假设您对椭圆曲线运算及哈希函数等有着基础的了解"

#: src/public goods/4-Proving-System.md:7
msgid ""
"Alice 拥有一个秘密数字，`a`，我们可以把这个数字想象成「私钥」，然后把它「映"
"射」到椭圆曲线群上的一个点 `a*G`，简写为 `aG`。这个点我们把它当做「公钥」。"
msgstr ""
"Alice 拥有一个秘密数字，`a`，我们可以把这个数字想象成「私钥」，然后把它「映"
"射」到椭圆曲线群上的一个点 `a*G`，简写为 `aG`。这个点我们把它当做「公钥」。"

#: src/public goods/4-Proving-System.md:9
msgid "`sk = a`  ( secret key = a ) "
msgstr "`sk = a`  ( secret key = a ) "

#: src/public goods/4-Proving-System.md:12
msgid "a secret key "
msgstr "a secret key "

#: src/public goods/4-Proving-System.md:12
msgid " that corresponds to a public key "
msgstr " that corresponds to a public key "

#: src/public goods/4-Proving-System.md:14
msgid ""
"请注意「映射」这个词，给任意一个有限域上的整数 `r`，我们就可以在循环群中找到"
"一个对应的点  `rG`，或者用一个标量乘法来表示 `r*G`。但是反过来计算是很「困"
"难」的，这是一个「密码学难题」—— 被称为离散对数难题。"
msgstr ""
"请注意「映射」这个词，给任意一个有限域上的整数 `r`，我们就可以在循环群中找到"
"一个对应的点  `rG`，或者用一个标量乘法来表示 `r*G`。但是反过来计算是很「困"
"难」的，这是一个「密码学难题」—— 被称为离散对数难题。"

#: src/public goods/4-Proving-System.md:16
msgid ""
"取模之后 , 就很难知道原来的指数是多少了。 事实上，如果模取得相当大，从运算结"
"果倒推指数运算就不可行了；**现代密码学很大程度上就是基于这个问题的“困难”**"
msgstr ""
"取模之后 , 就很难知道原来的指数是多少了。 事实上，如果模取得相当大，从运算结"
"果倒推指数运算就不可行了；**现代密码学很大程度上就是基于这个问题的“困难”**"

#: src/public goods/4-Proving-System.md:18
msgid ""
"也就是说，如果任意给一个椭圆曲线循环群上的点 `R`，那么到底是有限域中的哪一个"
"整数对应 `R`，这个计算是很难的，如果有限域足够大，比如说 256bit 这么大，我们"
"姑且可以认为这个反向计算是不可能做到的"
msgstr ""
"也就是说，如果任意给一个椭圆曲线循环群上的点 `R`，那么到底是有限域中的哪一个"
"整数对应 `R`，这个计算是很难的，如果有限域足够大，比如说 256bit 这么大，我们"
"姑且可以认为这个反向计算是不可能做到的"

#: src/public goods/4-Proving-System.md:20
msgid ""
"Schnorr 协议充分利用了有限域和循环群之间单向映射，实现了最简单的零知识证明安"
"全协议：Alice 向 Bob 证明她拥有 `PK` 对应的私钥 `sk` "
msgstr ""
"Schnorr 协议充分利用了有限域和循环群之间单向映射，实现了最简单的零知识证明安"
"全协议：Alice 向 Bob 证明她拥有 `PK` 对应的私钥 `sk` "

#: src/public goods/4-Proving-System.md:22
msgid ""
"![](http://imagesoda.oss-cn-beijing.aliyuncs.com/Sodaoo/2023-02-04-120945."
"png)"
msgstr ""
"![](http://imagesoda.oss-cn-beijing.aliyuncs.com/Sodaoo/2023-02-04-120945."
"png)"

#: src/public goods/4-Proving-System.md:24
msgid ""
"第一步：为了保证零知识，Alice 需要先产生一个随机数 `r`，这个随机数的用途是用"
"来保护私钥 "
msgstr ""
"第一步：为了保证零知识，Alice 需要先产生一个随机数 `r`，这个随机数的用途是用"
"来保护私钥 "

#: src/public goods/4-Proving-System.md:24
msgid ""
" 无法被 Bob 抽取出来。这个随机数也需要映射到椭圆曲线群上即 `rG`。  ( 映射之"
"后 , Bob 就不可能通过 `rG` 推算出 `r ` )"
msgstr ""
" 无法被 Bob 抽取出来。这个随机数也需要映射到椭圆曲线群上即 `rG`。  ( 映射之"
"后 , Bob 就不可能通过 `rG` 推算出 `r ` )"

#: src/public goods/4-Proving-System.md:25
msgid "第二步：Bob 要提供一个随机数进行挑战，我们把它称为  `c`。"
msgstr "第二步：Bob 要提供一个随机数进行挑战，我们把它称为  `c`。"

#: src/public goods/4-Proving-System.md:26
msgid ""
"第三步：Alice 根据挑战数 `c`  计算  `z = r + c * a (即sk)`，把 `z`  发给 "
"Bob，Bob 在自己这边通过下式进行检验："
msgstr ""
"第三步：Alice 根据挑战数 `c`  计算  `z = r + c * a (即sk)`，把 `z`  发给 "
"Bob，Bob 在自己这边通过下式进行检验："

#: src/public goods/4-Proving-System.md:33
msgid ""
"大家可以看到 Bob 在第三步「同态地」检验 `z` 的计算过程。如果这个式子成立，那"
"么就能证明 Alice 确实有私钥 `a`。可是，这是为什么呢？"
msgstr ""
"大家可以看到 Bob 在第三步「同态地」检验 `z` 的计算过程。如果这个式子成立，那"
"么就能证明 Alice 确实有私钥 `a`。可是，这是为什么呢？"

#: src/public goods/4-Proving-System.md:35
msgid "`z` 的计算和验证过程很有趣，有几个关键技巧："
msgstr "`z` 的计算和验证过程很有趣，有几个关键技巧："

#: src/public goods/4-Proving-System.md:37
msgid "首先 Bob 必须给出一个「随机」挑战数 "
msgstr "首先 Bob 必须给出一个「随机」挑战数 "

#: src/public goods/4-Proving-System.md:37
msgid " ，然后 Bob 在椭圆曲线上同态地检查 `z` 。如果我们把挑战数  "
msgstr " ，然后 Bob 在椭圆曲线上同态地检查 `z` 。如果我们把挑战数  "

#: src/public goods/4-Proving-System.md:37
msgid ""
"  看成是一个未知数，那么 `r+a*c=z` 可以看成是一个一元一次方程，其"
"中 `r` 与 `a` 是方程系数。请注意在 `c` 未知的前提下，如果 `r + a*x = r' + "
"a'*x` 要成立，那么根据 Schwatz-Zippel 定理，极大概率上 `r=r'`，`a=a'` 都成"
"立。也就是说， Alice 在 `c` 未知的前提下，想找到另一对不同的 `r'`,`a'` 来计"
"算 `z` 骗过 Bob 是几乎不可能的。这个随机挑战数 `c` 实现了`r` 和 `a` 的限制。"
"虽然 Bob 随机选了一个数，但是由于 Alice 事先不知道，所以 Alice 不得不使用私"
"钥 `a` 来计算 `z`。这里的关键： `c` 必须是个随机数。"
msgstr ""
"  看成是一个未知数，那么 `r+a*c=z` 可以看成是一个一元一次方程，其"
"中 `r` 与 `a` 是方程系数。请注意在 `c` 未知的前提下，如果 `r + a*x = r' + "
"a'*x` 要成立，那么根据 Schwatz-Zippel 定理，极大概率上 `r=r'`，`a=a'` 都成"
"立。也就是说， Alice 在 `c` 未知的前提下，想找到另一对不同的 `r'`,`a'` 来计"
"算 `z` 骗过 Bob 是几乎不可能的。这个随机挑战数 `c` 实现了`r` 和 `a` 的限制。"
"虽然 Bob 随机选了一个数，但是由于 Alice 事先不知道，所以 Alice 不得不使用私"
"钥 `a` 来计算 `z`。这里的关键： `c` 必须是个随机数。"

#: src/public goods/4-Proving-System.md:38
msgid ""
"Bob 验证是在椭圆曲线群上完成。Bob 不知道 `r` ，但是他知道 `r`  映射到曲线上的"
"点 `R` ；Bob 也不知道 `a`，但是他知道 `a` 映射到曲线群上的点 `PK`，即 `a*G`。"
"通过同态映射与Schwatz-Zippel 定理，Bob 可以校验 `z` 的计算过程是否正确，从而"
"知道 Alice 确实是通过 `r` 和 `a` 计算得出的 `z`，但是又不暴露 `r` 与 `a` 的"
"值。"
msgstr ""
"Bob 验证是在椭圆曲线群上完成。Bob 不知道 `r` ，但是他知道 `r`  映射到曲线上的"
"点 `R` ；Bob 也不知道 `a`，但是他知道 `a` 映射到曲线群上的点 `PK`，即 `a*G`。"
"通过同态映射与Schwatz-Zippel 定理，Bob 可以校验 `z` 的计算过程是否正确，从而"
"知道 Alice 确实是通过 `r` 和 `a` 计算得出的 `z`，但是又不暴露 `r` 与 `a` 的"
"值。"

#: src/public goods/4-Proving-System.md:39
msgid ""
"还有，在协议第一步中产生的随机数 `r` 保证了 `a` 的保密性。因为任何一个秘密当"
"和一个符合「一致性分布」的随机数相加之后的和仍然符合「一致性分布」。"
msgstr ""
"还有，在协议第一步中产生的随机数 `r` 保证了 `a` 的保密性。因为任何一个秘密当"
"和一个符合「一致性分布」的随机数相加之后的和仍然符合「一致性分布」。"

#: src/public goods/4-Proving-System.md:41
msgid ""
"看懂了这个图就看懂了 !!!!!  ![](http://imagesoda.oss-cn-beijing.aliyuncs.com/"
"Sodaoo/2023-02-04-120945.png)"
msgstr ""
"看懂了这个图就看懂了 !!!!!  ![](http://imagesoda.oss-cn-beijing.aliyuncs.com/"
"Sodaoo/2023-02-04-120945.png)"

#: src/public goods/4-Proving-System.md:45
msgid "是 Sigma 零知识证明的一个特例"
msgstr "是 Sigma 零知识证明的一个特例"

#: src/public goods/4-Proving-System.md:47
msgid "Schnorr 的非交互式版本"
msgstr "Schnorr 的非交互式版本"

#: src/public goods/4-Proving-System.md:49
msgid ""
"Schnorr 协议的非交互式版本可以避免 Prover 与 Verifier 的交互，但这要求 "
"Prover 使用哈希函数，这样他就无法预测哈希函数的输出，非交互式版本的验证器实现"
"非常简单，因为它不需要随机数生成器"
msgstr ""
"Schnorr 协议的非交互式版本可以避免 Prover 与 Verifier 的交互，但这要求 "
"Prover 使用哈希函数，这样他就无法预测哈希函数的输出，非交互式版本的验证器实现"
"非常简单，因为它不需要随机数生成器"

#: src/public goods/4-Proving-System.md:51
msgid "(Making the protocol non-interactive)"
msgstr "(Making the protocol non-interactive)"

#: src/public goods/4-Proving-System.md:53
msgid "首先定义:  "
msgstr "首先定义:  "

#: src/public goods/4-Proving-System.md:53
msgid " 即私钥 ;  "
msgstr " 即私钥 ;  "

#: src/public goods/4-Proving-System.md:53
msgid "  是 Public key 即公钥 ;    "
msgstr "  是 Public key 即公钥 ;    "

#: src/public goods/4-Proving-System.md:55
msgid "Prover 生成一个随机数 "
msgstr "Prover 生成一个随机数 "

#: src/public goods/4-Proving-System.md:55
msgid "  并创建一个承诺  "
msgstr "  并创建一个承诺  "

#: src/public goods/4-Proving-System.md:55 goods/4-Proving-System.md:58
#: goods/4-Proving-System.md:60 goods/4-Proving-System.md:62
msgid "mm"
msgstr "mm"

#: src/public goods/4-Proving-System.md:55
msgid " , Prover 对   "
msgstr " , Prover 对   "

#: src/public goods/4-Proving-System.md:55
msgid "  进行哈希处理以获得挑战值 "
msgstr "  进行哈希处理以获得挑战值 "

#: src/public goods/4-Proving-System.md:55
msgid "  ,   "
msgstr "  ,   "

#: src/public goods/4-Proving-System.md:56
msgid "Prover 创建对挑战的响应 "
msgstr "Prover 创建对挑战的响应 "

#: src/public goods/4-Proving-System.md:56
msgid " , 然后将元组 `(comm, s)` 发送给验证者。"
msgstr " , 然后将元组 `(comm, s)` 发送给验证者。"

#: src/public goods/4-Proving-System.md:60
msgid "Verifier 自己计算 "
msgstr "Verifier 自己计算 "

#: src/public goods/4-Proving-System.md:60
msgid "  , 然后验证 : "
msgstr "  , 然后验证 : "

#: src/public goods/4-Proving-System.md:64
msgid "如果 Verifier 自己验证这个等式相等, 则 Prover 就通过 "
msgstr "如果 Verifier 自己验证这个等式相等, 则 Prover 就通过 "

#: src/public goods/4-Proving-System.md:64
msgid "  这种方式隐藏了私钥 "
msgstr "  这种方式隐藏了私钥 "

#: src/public goods/4-Proving-System.md:64
msgid " , 同时又能让对方确信自己真的有这个私钥 "
msgstr " , 同时又能让对方确信自己真的有这个私钥 "

#: src/public goods/4-Proving-System.md:64
msgid "  ."
msgstr "  ."

#: src/public goods/4-Proving-System.md:67
msgid ""
"The prover generates a random number `r` and creates a commitment `com = "
"gʳ`. The prover hashes  `g`, `com` and `y` to get challenge `c`. `c = "
"Hash(g, y, t)`."
msgstr ""
"The prover generates a random number `r` and creates a commitment `com = "
"gʳ`. The prover hashes  `g`, `com` and `y` to get challenge `c`. `c = "
"Hash(g, y, t)`."

#: src/public goods/4-Proving-System.md:68
msgid ""
"The prover creates a response to the challenge as `s = r + c*x`. The prover "
"sends tuple `(t, s)` to the verifier."
msgstr ""
"The prover creates a response to the challenge as `s = r + c*x`. The prover "
"sends tuple `(t, s)` to the verifier."

#: src/public goods/4-Proving-System.md:70
msgid ""
"The verifier now generates the same challenge `c` as `Hash(g, y, t)` and "
"again checks if `gˢ` equals `yᶜ.t`. [Python code demonstrating this protocol]"
"(https://github.com/lovesh/python-rubenesque/blob/"
"f202f82104e161566793002f4857961f7cf12744/test/test_sigma.py#L8)."
msgstr ""
"The verifier now generates the same challenge `c` as `Hash(g, y, t)` and "
"again checks if `gˢ` equals `yᶜ.t`. [Python code demonstrating this protocol]"
"(https://github.com/lovesh/python-rubenesque/blob/"
"f202f82104e161566793002f4857961f7cf12744/test/test_sigma.py#L8)."

#: src/public goods/4-Proving-System.md:73
msgid "Schnorr 的问题"
msgstr "Schnorr 的问题"

#: src/public goods/4-Proving-System.md:75
msgid "对不同的消息, 如果不幸选了相同的随机数  "
msgstr "对不同的消息, 如果不幸选了相同的随机数  "

#: src/public goods/4-Proving-System.md:75
msgid "   私钥就会泄露"
msgstr "   私钥就会泄露"

#: src/public goods/4-Proving-System.md:77
msgid ""
"如果 Alice 在两次交互过程中使用了同一个 `K`，那么 Bob 可以通过发送两个不同"
"的 `c` 和 `c'` 来得到 `s` 和 `s'`，然后通过下面的公式算出私钥 `a`："
msgstr ""
"如果 Alice 在两次交互过程中使用了同一个 `K`，那么 Bob 可以通过发送两个不同"
"的 `c` 和 `c'` 来得到 `s` 和 `s'`，然后通过下面的公式算出私钥 `a`："

#: src/public goods/4-Proving-System.md:88
msgid "ECDSA"
msgstr "ECDSA"

#: src/public goods/4-Proving-System.md:90
msgid "Bitcoin 和 ETH 都支持 ECDSA signature."
msgstr "Bitcoin 和 ETH 都支持 ECDSA signature."

#: src/public goods/4-Proving-System.md:93
msgid "why need ECDSA?"
msgstr "why need ECDSA?"

#: src/public goods/4-Proving-System.md:95
msgid ""
"除了显而易见的“我需要对一份文件/合同进行签名”，还有一个非常流行的应用场景：让"
"我们以一个不想自己的数据被用户修改或者破坏的应用程序为例，比如一个只允许你载"
"入官方地图和不可修改的模块的游戏，或者一部只允许你安装官方应用程序的手机或其"
"它设备。"
msgstr ""
"除了显而易见的“我需要对一份文件/合同进行签名”，还有一个非常流行的应用场景：让"
"我们以一个不想自己的数据被用户修改或者破坏的应用程序为例，比如一个只允许你载"
"入官方地图和不可修改的模块的游戏，或者一部只允许你安装官方应用程序的手机或其"
"它设备。"

#: src/public goods/4-Proving-System.md:97
msgid ""
"在这些案例当中，相关文件（应用程序、游戏地图、数据等）会用 ` ECDSA` 进行签"
"名，公钥会随应用程序/游戏/设备一起捆绑并用来验证签名来确保数据没有被修改，而"
"私钥在本地一个私密的地方进行保存。由于你可以用公钥对签名进行验证，但是不能用"
"它创建或者伪造新的签名，你可以无所顾忌地将公钥随应用程序/游戏/设备一起分发。"
msgstr ""
"在这些案例当中，相关文件（应用程序、游戏地图、数据等）会用 ` ECDSA` 进行签"
"名，公钥会随应用程序/游戏/设备一起捆绑并用来验证签名来确保数据没有被修改，而"
"私钥在本地一个私密的地方进行保存。由于你可以用公钥对签名进行验证，但是不能用"
"它创建或者伪造新的签名，你可以无所顾忌地将公钥随应用程序/游戏/设备一起分发。"

#: src/public goods/4-Proving-System.md:99
msgid ""
"这与`AES`相比，区别是显而易见的。`AES`加密系统允许你对数据进行加密，但是你需"
"要用密钥来解密，这就要求你将密钥与应用程序一起捆绑，破坏了对数据进行保护防止"
"数据被用户修改的目的。"
msgstr ""
"这与`AES`相比，区别是显而易见的。`AES`加密系统允许你对数据进行加密，但是你需"
"要用密钥来解密，这就要求你将密钥与应用程序一起捆绑，破坏了对数据进行保护防止"
"数据被用户修改的目的。"

#: src/public goods/4-Proving-System.md:101
msgid ""
"一个很好的例子就是PS3的控制台，它被大量的破解，所有的文件可以解密，所有的密钥"
"可以从解密的文件当中抽取，但是为了能够在最新的固件上面运行程序，你还需要破解"
"一个`ECDSA`的数字签名。"
msgstr ""
"一个很好的例子就是PS3的控制台，它被大量的破解，所有的文件可以解密，所有的密钥"
"可以从解密的文件当中抽取，但是为了能够在最新的固件上面运行程序，你还需要破解"
"一个`ECDSA`的数字签名。"

#: src/public goods/4-Proving-System.md:103
msgid ""
"当你想要对一个文件进行签名的时候，你会用这个私钥 / 随机数 / 文件的哈希组成一"
"个魔法数学方程，这将给出你的签名。签名本身将被分成两部分，称为 `R` 和 `S` "
msgstr ""
"当你想要对一个文件进行签名的时候，你会用这个私钥 / 随机数 / 文件的哈希组成一"
"个魔法数学方程，这将给出你的签名。签名本身将被分成两部分，称为 `R` 和 `S` "

#: src/public goods/4-Proving-System.md:105 goods/4-Proving-System.md:125
msgid "  ,  计算承诺 :  "
msgstr "  ,  计算承诺 :  "

#: src/public goods/4-Proving-System.md:106 goods/4-Proving-System.md:126
msgid "挑战 : 取  "
msgstr "挑战 : 取  "

#: src/public goods/4-Proving-System.md:106 goods/4-Proving-System.md:126
#: goods/4-Proving-System.md:151
msgid "  的横坐标为  "
msgstr "  的横坐标为  "

#: src/public goods/4-Proving-System.md:106 goods/4-Proving-System.md:126
msgid "      (先 mod  "
msgstr "      (先 mod  "

#: src/public goods/4-Proving-System.md:106 goods/4-Proving-System.md:126
msgid "  ,  再 mod "
msgstr "  ,  再 mod "

#: src/public goods/4-Proving-System.md:107 goods/4-Proving-System.md:127
msgid "响应 :  "
msgstr "响应 :  "

#: src/public goods/4-Proving-System.md:109
msgid ""
"**为了验证签名的正确性，你只需要公钥（用私钥在曲线上面产生的点）并将公钥和签"
"名的一部分 `S` 一起代入另外一个方程，如果这个签名是由私钥正确签名过的数字签"
"名，那么它将给出签名的另外一部分  `R` 。**"
msgstr ""
"**为了验证签名的正确性，你只需要公钥（用私钥在曲线上面产生的点）并将公钥和签"
"名的一部分 `S` 一起代入另外一个方程，如果这个签名是由私钥正确签名过的数字签"
"名，那么它将给出签名的另外一部分  `R` 。**"

#: src/public goods/4-Proving-System.md:113
msgid ""
"简单来说，一个数字签名包含两个数字，`R` 和  `S`，然后你使用一个私钥来产生  "
"`R`  和  `S`  ，如果将公钥和  `S`  代入被选定的魔法数学方程给出  "
msgstr ""
"简单来说，一个数字签名包含两个数字，`R` 和  `S`，然后你使用一个私钥来产生  "
"`R`  和  `S`  ，如果将公钥和  `S`  代入被选定的魔法数学方程给出  "

#: src/public goods/4-Proving-System.md:113
msgid " , 且  "
msgstr " , 且  "

#: src/public goods/4-Proving-System.md:113
msgid ""
"  的话，这个签名就是有效的。仅仅知道公钥是无法知道私钥或者创建出数字签名。"
msgstr ""
"  的话，这个签名就是有效的。仅仅知道公钥是无法知道私钥或者创建出数字签名。"

#: src/public goods/4-Proving-System.md:115
msgid "Algorithm"
msgstr "Algorithm"

#: src/public goods/4-Proving-System.md:117
msgid "初始化： 椭圆曲线生成元为 "
msgstr "初始化： 椭圆曲线生成元为 "

#: src/public goods/4-Proving-System.md:117
msgid "，标量域为 "
msgstr "，标量域为 "

#: src/public goods/4-Proving-System.md:117
msgid "，基域为 "
msgstr "，基域为 "

#: src/public goods/4-Proving-System.md:119
msgid ""
"**基域** 理解为椭圆曲线点的横纵坐标的取值范围 **标量域** 即做倍点运算的标量的"
"取值范围, 比如 "
msgstr ""
"**基域** 理解为椭圆曲线点的横纵坐标的取值范围 **标量域** 即做倍点运算的标量的"
"取值范围, 比如 "

#: src/public goods/4-Proving-System.md:120
msgid "  里的 "
msgstr "  里的 "

#: src/public goods/4-Proving-System.md:120
msgid " , 其不会超过椭圆曲线的阶 "
msgstr " , 其不会超过椭圆曲线的阶 "

#: src/public goods/4-Proving-System.md:122
msgid "密钥生成：  私钥  "
msgstr "密钥生成：  私钥  "

#: src/public goods/4-Proving-System.md:122
msgid "  和公钥  "
msgstr "  和公钥  "

#: src/public goods/4-Proving-System.md:124
msgid "签名:   输入任意消息 "
msgstr "签名:   输入任意消息 "

#: src/public goods/4-Proving-System.md:124
msgid " ， 计算  "
msgstr " ， 计算  "

#: src/public goods/4-Proving-System.md:127
msgid "         ( k 增加了 ECDSA 的难度)"
msgstr "         ( k 增加了 ECDSA 的难度)"

#: src/public goods/4-Proving-System.md:129
msgid "则签名为 "
msgstr "则签名为 "

#: src/public goods/4-Proving-System.md:131
msgid "   是 "
msgstr "   是 "

#: src/public goods/4-Proving-System.md:131
msgid "   的乘法逆元"
msgstr "   的乘法逆元"

#: src/public goods/4-Proving-System.md:133
msgid "我们是如何对一个文件或者一个信息进行签名的呢？"
msgstr "我们是如何对一个文件或者一个信息进行签名的呢？"

#: src/public goods/4-Proving-System.md:135
msgid ""
"你需要知道签名本身是 40 字节，由各20字节的两个值来进行表示，第一个值叫作 "
msgstr ""
"你需要知道签名本身是 40 字节，由各20字节的两个值来进行表示，第一个值叫作 "

#: src/public goods/4-Proving-System.md:135
msgid "，第二个叫作 "
msgstr "，第二个叫作 "

#: src/public goods/4-Proving-System.md:136
msgid "值对  "
msgstr "值对  "

#: src/public goods/4-Proving-System.md:136
msgid "  放到一起就是你的  `ECDSA`  签名"
msgstr "  放到一起就是你的  `ECDSA`  签名"

#: src/public goods/4-Proving-System.md:139
msgid "验证 :"
msgstr "验证 :"

#: src/public goods/4-Proving-System.md:141
msgid ""
"验证它，也非常的简单，你只需要 \\[公钥\\] 和导出这个公钥的曲线参数就可以了。"
"你用以下方程来计算  "
msgstr ""
"验证它，也非常的简单，你只需要 \\[公钥\\] 和导出这个公钥的曲线参数就可以了。"
"你用以下方程来计算  "

#: src/public goods/4-Proving-System.md:144
msgid "Verifier  : "
msgstr "Verifier  : "

#: src/public goods/4-Proving-System.md:145
msgid "输入消息 "
msgstr "输入消息 "

#: src/public goods/4-Proving-System.md:145
msgid " , 计算  "
msgstr " , 计算  "

#: src/public goods/4-Proving-System.md:146
msgid "校验  "
msgstr "校验  "

#: src/public goods/4-Proving-System.md:151
msgid "取  "
msgstr "取  "

#: src/public goods/4-Proving-System.md:151
msgid "    ,  校验等式  "
msgstr "    ,  校验等式  "

#: src/public goods/4-Proving-System.md:151
msgid "   : 如果相等, 则接受 , 否则拒绝"
msgstr "   : 如果相等, 则接受 , 否则拒绝"

#: src/public goods/4-Proving-System.md:153
msgid "公式推导过程如下: "
msgstr "公式推导过程如下: "

#: src/public goods/4-Proving-System.md:157
msgid "这里知道 "
msgstr "这里知道 "

#: src/public goods/4-Proving-System.md:157
msgid "  还是可以推算私钥,  所以 EIP-32 要求 :  "
msgstr "  还是可以推算私钥,  所以 EIP-32 要求 :  "

#: src/public goods/4-Proving-System.md:160
msgid "EdDSA"
msgstr "EdDSA"

#: src/public goods/4-Proving-System.md:162
msgid "以太坊 BN256 曲线已经支持了 EdDSA"
msgstr "以太坊 BN256 曲线已经支持了 EdDSA"

#: src/public goods/4-Proving-System.md:164
msgid ""
"EdDSA 正是为了解决 Schnorr 签名私钥泄露的问题 :  他不是选择随机数, 而是计算随"
"机数"
msgstr ""
"EdDSA 正是为了解决 Schnorr 签名私钥泄露的问题 :  他不是选择随机数, 而是计算随"
"机数"

#: src/public goods/4-Proving-System.md:166
msgid "初始化 : 椭圆曲线生成元为 "
msgstr "初始化 : 椭圆曲线生成元为 "

#: src/public goods/4-Proving-System.md:166
msgid " ,  阶为  "
msgstr " ,  阶为  "

#: src/public goods/4-Proving-System.md:166
msgid " 密钥生成 : 私钥为 "
msgstr " 密钥生成 : 私钥为 "

#: src/public goods/4-Proving-System.md:167
msgid " ,  公钥为  "
msgstr " ,  公钥为  "

#: src/public goods/4-Proving-System.md:169
msgid "签名： 消息为 "
msgstr "签名： 消息为 "

#: src/public goods/4-Proving-System.md:169
msgid "，计算随机数  "
msgstr "，计算随机数  "

#: src/public goods/4-Proving-System.md:169
msgid "\\*\\*，计算承诺  "
msgstr "\\*\\*，计算承诺  "

#: src/public goods/4-Proving-System.md:171
msgid "计算挑战  "
msgstr "计算挑战  "

#: src/public goods/4-Proving-System.md:173
msgid "计算响应  "
msgstr "计算响应  "

#: src/public goods/4-Proving-System.md:175
msgid "签名为(R,s)"
msgstr "签名为(R,s)"

#: src/public goods/4-Proving-System.md:177
msgid "验证： 重新计算挑战  "
msgstr "验证： 重新计算挑战  "

#: src/public goods/4-Proving-System.md:177
msgid " ，然后校验  "
msgstr " ，然后校验  "

#: src/public goods/4-Proving-System.md:179
msgid "与 ECDSA 最大的区别在于  "
msgstr "与 ECDSA 最大的区别在于  "

#: src/public goods/4-Proving-System.md:179
msgid ""
"  是算出来的, 没有使用随机数 这样产生的签名结果是确定性的，即对同一消息, 签名"
"结果相同, 不会额外泄露信息"
msgstr ""
"  是算出来的, 没有使用随机数 这样产生的签名结果是确定性的，即对同一消息, 签名"
"结果相同, 不会额外泄露信息"

#: src/public goods/4-Proving-System.md:182
msgid ""
"一般说来随机数是安全措施中重要的一种方法，但是随机数的产生也是安全隐患，著名"
"的索尼公司产品 PS3  密钥泄露事件，就是随机数产生的问题导致的 (写死在了代码"
"里, 晕)。"
msgstr ""
"一般说来随机数是安全措施中重要的一种方法，但是随机数的产生也是安全隐患，著名"
"的索尼公司产品 PS3  密钥泄露事件，就是随机数产生的问题导致的 (写死在了代码"
"里, 晕)。"

#: src/public goods/4-Proving-System.md:185
msgid "zk-SNARK"
msgstr "zk-SNARK"

#: src/public goods/4-Proving-System.md:187
msgid ""
"在聊 zk-SNARKs 之前, 首先来看 NARK(Non-interactive ARgument of Knowledge) :"
msgstr ""
"在聊 zk-SNARKs 之前, 首先来看 NARK(Non-interactive ARgument of Knowledge) :"

#: src/public goods/4-Proving-System.md:189
msgid ""
"![](http://imagesoda.oss-cn-beijing.aliyuncs.com/Sodaoo/2023-07-20-023801."
"png)"
msgstr ""
"![](http://imagesoda.oss-cn-beijing.aliyuncs.com/Sodaoo/2023-07-20-023801."
"png)"

#: src/public goods/4-Proving-System.md:190
msgid "C : 电路 Circuit "
msgstr "C : 电路 Circuit "

#: src/public goods/4-Proving-System.md:191
msgid " : 公开声明 public statement"
msgstr " : 公开声明 public statement"

#: src/public goods/4-Proving-System.md:192
msgid "secre"
msgstr "secre"

#: src/public goods/4-Proving-System.md:192
msgid " _witness_ "
msgstr " _witness_ "

#: src/public goods/4-Proving-System.md:193
msgid ""
"**预处理(Preprocessing)** 也称为 **Setup**, 它以电路的描述作为输入,然后输出这"
"些公开参数,我们称之为 "
msgstr ""
"**预处理(Preprocessing)** 也称为 **Setup**, 它以电路的描述作为输入,然后输出这"
"些公开参数,我们称之为 "

#: src/public goods/4-Proving-System.md:194
msgid " 表示**公开的**参数,供证明者使用。"
msgstr " 表示**公开的**参数,供证明者使用。"

#: src/public goods/4-Proving-System.md:195
msgid " 表示**公开的**参数,供验证者使用。"
msgstr " 表示**公开的**参数,供验证者使用。"

#: src/public goods/4-Proving-System.md:198
msgid ""
"![](http://imagesoda.oss-cn-beijing.aliyuncs.com/Sodaoo/2023-07-20-024037."
"png)"
msgstr ""
"![](http://imagesoda.oss-cn-beijing.aliyuncs.com/Sodaoo/2023-07-20-024037."
"png)"

#: src/public goods/4-Proving-System.md:200
msgid "证明者和验证者各自会输入 : "
msgstr "证明者和验证者各自会输入 : "

#: src/public goods/4-Proving-System.md:201
msgid "prover takes the  "
msgstr "prover takes the  "

#: src/public goods/4-Proving-System.md:201
msgid " (public statement)   &  "
msgstr " (public statement)   &  "

#: src/public goods/4-Proving-System.md:201
msgid " (public (circuit)params)  &  the Witness"
msgstr " (public (circuit)params)  &  the Witness"

#: src/public goods/4-Proving-System.md:202
msgid "Verifier takes "
msgstr "Verifier takes "

#: src/public goods/4-Proving-System.md:202
msgid "  &  "
msgstr "  &  "

#: src/public goods/4-Proving-System.md:202
msgid " (public statement) "
msgstr " (public statement) "

#: src/public goods/4-Proving-System.md:204
msgid "然后,证明者试图向验证者证明:  **It knows some  "
msgstr "然后,证明者试图向验证者证明:  **It knows some  "

#: src/public goods/4-Proving-System.md:204
msgid "  such that  "
msgstr "  such that  "

#: src/public goods/4-Proving-System.md:204
msgid "**"
msgstr "**"

#: src/public goods/4-Proving-System.md:206
msgid "**NARK Definition** :  A pre-processing NARK is a triple  "
msgstr "**NARK Definition** :  A pre-processing NARK is a triple  "

#: src/public goods/4-Proving-System.md:206
msgid " , where : "
msgstr " , where : "

#: src/public goods/4-Proving-System.md:207
msgid "  generate the Circuit's  "
msgstr "  generate the Circuit's  "

#: src/public goods/4-Proving-System.md:207
msgid "&"
msgstr "&"

#: src/public goods/4-Proving-System.md:207
msgid "  as public params for P & V."
msgstr "  as public params for P & V."

#: src/public goods/4-Proving-System.md:208
msgid " :  proof  "
msgstr " :  proof  "

#: src/public goods/4-Proving-System.md:209
msgid " _or_ "
msgstr " _or_ "

#: src/public goods/4-Proving-System.md:211
msgid "所有算法和对手都可以访问 _随机预言机 (random oracle)_ "
msgstr "所有算法和对手都可以访问 _随机预言机 (random oracle)_ "

#: src/public goods/4-Proving-System.md:214
msgid ""
"zk-SNARKs 条件是苛刻的, 因为要让 Verifier 在如此短的时间内完成某些验证, 我们"
"需要一些新的方法来去处理计算, 比如多项式承诺 (polynomial commitment)"
msgstr ""
"zk-SNARKs 条件是苛刻的, 因为要让 Verifier 在如此短的时间内完成某些验证, 我们"
"需要一些新的方法来去处理计算, 比如多项式承诺 (polynomial commitment)"

#: src/public goods/4-Proving-System.md:216
msgid "(To be continued ...)"
msgstr "(To be continued ...)"

#: src/public goods/4-Proving-System.md:224
msgid ""
"Vitalik ZK_Snark zk-learning Lectures 安比 zk-snarks https://vitalik.ca/"
"general/2021/01/26/snarks.html [Zero Knowledge Proofs with Sigma Protocols]"
"(https://medium.com/@loveshharchandani/zero-knowledge-proofs-with-sigma-"
"protocols-91e94858a1fb)"
msgstr ""
"Vitalik ZK_Snark zk-learning Lectures 安比 zk-snarks https://vitalik.ca/"
"general/2021/01/26/snarks.html [Zero Knowledge Proofs with Sigma Protocols]"
"(https://medium.com/@loveshharchandani/zero-knowledge-proofs-with-sigma-"
"protocols-91e94858a1fb)"

#: src/public goods/5-plonk-intro.md:3
msgid "从代码中学习 Plonk 协议"
msgstr "从代码中学习 Plonk 协议"

#: src/public goods/5-plonk-intro.md:5
msgid ""
"写作本文的目的主要是希望从代码的角度理解 Plonk 协议。因为我是开发者，之前读文"
"章遇到公式感觉比较抽象，所以希望有这样的文章，可以从代码的角度来阐述 ZKP 的协"
"议是如何工作的。"
msgstr ""
"写作本文的目的主要是希望从代码的角度理解 Plonk 协议。因为我是开发者，之前读文"
"章遇到公式感觉比较抽象，所以希望有这样的文章，可以从代码的角度来阐述 ZKP 的协"
"议是如何工作的。"

#: src/public goods/5-plonk-intro.md:7
msgid ""
"这篇文章对应的源代码在[这里](https://github.com/Antalpha-Labs/baby-plonk)，主"
"要实现了 Plonk 协议的核心概念，需要结合[郭宇老师的 Plonk 系列文章](https://"
"github.com/sec-bit/learning-zkp/blob/develop/plonk-intro-cn/README.md)阅读。"
msgstr ""
"这篇文章对应的源代码在[这里](https://github.com/Antalpha-Labs/baby-plonk)，主"
"要实现了 Plonk 协议的核心概念，需要结合[郭宇老师的 Plonk 系列文章](https://"
"github.com/sec-bit/learning-zkp/blob/develop/plonk-intro-cn/README.md)阅读。"

#: src/public goods/5-plonk-intro.md:9
msgid "流程"
msgstr "流程"

#: src/public goods/5-plonk-intro.md:10
msgid "通过测试 `test.py` 看到验证 Plonk 协议主要分为以下几个部分："
msgstr "通过测试 `test.py` 看到验证 Plonk 协议主要分为以下几个部分："

#: src/public goods/5-plonk-intro.md:11 goods/5-plonk-intro.md:58
msgid "Setup"
msgstr "Setup"

#: src/public goods/5-plonk-intro.md:12 goods/5-plonk-intro.md:138
msgid "Program"
msgstr "Program"

#: src/public goods/5-plonk-intro.md:13 goods/5-plonk-intro.md:191
msgid "Assignment"
msgstr "Assignment"

#: src/public goods/5-plonk-intro.md:14 goods/5-plonk-intro.md:198
msgid "Generate proof"
msgstr "Generate proof"

#: src/public goods/5-plonk-intro.md:15 goods/5-plonk-intro.md:637
msgid "Verify"
msgstr "Verify"

#: src/public goods/5-plonk-intro.md:17
msgid ""
"```python=\n"
"def prover_test():\n"
"    print(\"Beginning prover test\")\n"
"    # powers should be 2^n so that we can use roots of unity for FFT\n"
"    # and should be bigger than len(coeffs) of polynomial to do KZG "
"commitment\n"
"    # the value here is: powers = 4 * group_order\n"
"    # which is bigger than the order of quotient polynomial\n"
"    group_order = 8\n"
"    powers = group_order * 4\n"
"    setup = Setup.generate_srs(powers)\n"
"\n"
"    program = Program([\"e public\", \"c <== a * b\", \"e <== c * d\"], "
"group_order)\n"
"    assignments = {\"a\": 3, \"b\": 4, \"c\": 12, \"d\": 5, \"e\": 60}\n"
"    prover = Prover(setup, program)\n"
"    proof = prover.prove(assignments)\n"
"    print(\"Prover test success\")\n"
"    return setup, proof, group_order\n"
"\n"
"def verifier_test(setup, proof, group_order):\n"
"    print(\"Beginning verifier test\")\n"
"    program = Program([\"e public\", \"c <== a * b\", \"e <== c * d\"], "
"group_order)\n"
"    public = [60]\n"
"    vk = setup.verification_key(program.common_preprocessed_input())\n"
"    assert vk.verify_proof(group_order, proof, public)\n"
"    print(\"Verifier test success\")\n"
"\n"
"```"
msgstr ""
"```python=\n"
"def prover_test():\n"
"    print(\"Beginning prover test\")\n"
"    # powers should be 2^n so that we can use roots of unity for FFT\n"
"    # and should be bigger than len(coeffs) of polynomial to do KZG "
"commitment\n"
"    # the value here is: powers = 4 * group_order\n"
"    # which is bigger than the order of quotient polynomial\n"
"    group_order = 8\n"
"    powers = group_order * 4\n"
"    setup = Setup.generate_srs(powers)\n"
"\n"
"    program = Program([\"e public\", \"c <== a * b\", \"e <== c * d\"], "
"group_order)\n"
"    assignments = {\"a\": 3, \"b\": 4, \"c\": 12, \"d\": 5, \"e\": 60}\n"
"    prover = Prover(setup, program)\n"
"    proof = prover.prove(assignments)\n"
"    print(\"Prover test success\")\n"
"    return setup, proof, group_order\n"
"\n"
"def verifier_test(setup, proof, group_order):\n"
"    print(\"Beginning verifier test\")\n"
"    program = Program([\"e public\", \"c <== a * b\", \"e <== c * d\"], "
"group_order)\n"
"    public = [60]\n"
"    vk = setup.verification_key(program.common_preprocessed_input())\n"
"    assert vk.verify_proof(group_order, proof, public)\n"
"    print(\"Verifier test success\")\n"
"\n"
"```"

#: src/public goods/5-plonk-intro.md:45
msgid "整个协议的过程："
msgstr "整个协议的过程："

#: src/public goods/5-plonk-intro.md:46
msgid "给定一个计算/电路/程序:"
msgstr "给定一个计算/电路/程序:"

#: src/public goods/5-plonk-intro.md:52
msgid ""
"prover 选择特定的一组值 witness = (a, b, c, d, e)，这组值满足上面的约束条件"
msgstr ""
"prover 选择特定的一组值 witness = (a, b, c, d, e)，这组值满足上面的约束条件"

#: src/public goods/5-plonk-intro.md:53
msgid ""
"在保持 witness 不公开的前提下，prover 生成一个证明 proof, 可以证明 prover 知"
"道 witness"
msgstr ""
"在保持 witness 不公开的前提下，prover 生成一个证明 proof, 可以证明 prover 知"
"道 witness"

#: src/public goods/5-plonk-intro.md:54
msgid "verifier 验证 proof 的真实性"
msgstr "verifier 验证 proof 的真实性"

#: src/public goods/5-plonk-intro.md:56
msgid "下面我们通过代码依次看看每个步骤都做了什么。"
msgstr "下面我们通过代码依次看看每个步骤都做了什么。"

#: src/public goods/5-plonk-intro.md:59
msgid ""
"```python=\n"
"@dataclass\n"
"class Setup(object):\n"
"    #   ([1]₁, [x]₁, ..., [x^{d-1}]₁)\n"
"    # = ( G,    xG,  ...,  x^{d-1}G ), where G is a generator of G_1\n"
"    powers_of_x: list[G1Point]\n"
"    # [x]₂ = xH, where H is a generator of G_2\n"
"    X2: G2Point\n"
"\n"
"    @classmethod\n"
"    def generate_srs(cls, powers: int):\n"
"        print(\"Start to generate structured reference string\")\n"
"        # tau is a random number whatever you choose\n"
"        tau = 218313819403157342856071133\n"
"\n"
"        # Initialize powers_of_x with 0 values\n"
"        powers_of_x = [0] * powers\n"
"        # powers_of_x[0] =  b.G1 * tau**0 = b.G1\n"
"        # powers_of_x[1] =  b.G1 * tau**1 = powers_of_x[0] * tau\n"
"        # powers_of_x[2] =  b.G1 * tau**2 = powers_of_x[1] * tau\n"
"        # ...\n"
"        # powers_of_x[i] =  b.G1 * tau**i = powers_of_x[i - 1] * tau\n"
"        powers_of_x[0] = b.G1\n"
"\n"
"        for i in range(powers):\n"
"            if i > 0:\n"
"                powers_of_x[i] = b.multiply(powers_of_x[i - 1], tau)\n"
"\n"
"        assert b.is_on_curve(powers_of_x[1], b.b)\n"
"        print(\"Generated G1 side, X^1 point: {}\".format(powers_of_x[1]))\n"
"\n"
"        X2 = b.multiply(b.G2, tau)\n"
"        assert b.is_on_curve(X2, b.b2)\n"
"        print(\"Generated G2 side, X^1 point: {}\".format(X2))\n"
"\n"
"        assert b.pairing(b.G2, powers_of_x[1]) == b.pairing(X2, b.G1)\n"
"        print(\"X^1 points checked consistent\")\n"
"        print(\"Finished to generate structured reference string\")\n"
"\n"
"        return cls(powers_of_x, X2)\n"
"\n"
"    # Encodes the KZG commitment that evaluates to the given values in the "
"group\n"
"    def commit(self, values: Polynomial) -> G1Point:\n"
"        if (values.basis == Basis.LAGRANGE):\n"
"            # inverse FFT from Lagrange basis to monomial basis\n"
"            coeffs = values.ifft().values\n"
"        elif (values.basis == Basis.MONOMIAL):\n"
"            coeffs = values.values\n"
"        if len(coeffs) > len(self.powers_of_x):\n"
"            raise Exception(\"Not enough powers in setup\")\n"
"        return ec_lincomb([(s, x) for s, x in zip(self.powers_of_x, "
"coeffs)])\n"
"\n"
"    # Generate the verification key for this program with the given setup\n"
"    def verification_key(self, pk: CommonPreprocessedInput) -> "
"VerificationKey:\n"
"        return VerificationKey(\n"
"            pk.group_order,\n"
"            self.commit(pk.QM),\n"
"            self.commit(pk.QL),\n"
"            self.commit(pk.QR),\n"
"            self.commit(pk.QO),\n"
"            self.commit(pk.QC),\n"
"            self.commit(pk.S1),\n"
"            self.commit(pk.S2),\n"
"            self.commit(pk.S3),\n"
"            self.X2,\n"
"            Scalar.root_of_unity(pk.group_order),\n"
"        )\n"
"    \n"
"```"
msgstr ""
"```python=\n"
"@dataclass\n"
"class Setup(object):\n"
"    #   ([1]₁, [x]₁, ..., [x^{d-1}]₁)\n"
"    # = ( G,    xG,  ...,  x^{d-1}G ), where G is a generator of G_1\n"
"    powers_of_x: list[G1Point]\n"
"    # [x]₂ = xH, where H is a generator of G_2\n"
"    X2: G2Point\n"
"\n"
"    @classmethod\n"
"    def generate_srs(cls, powers: int):\n"
"        print(\"Start to generate structured reference string\")\n"
"        # tau is a random number whatever you choose\n"
"        tau = 218313819403157342856071133\n"
"\n"
"        # Initialize powers_of_x with 0 values\n"
"        powers_of_x = [0] * powers\n"
"        # powers_of_x[0] =  b.G1 * tau**0 = b.G1\n"
"        # powers_of_x[1] =  b.G1 * tau**1 = powers_of_x[0] * tau\n"
"        # powers_of_x[2] =  b.G1 * tau**2 = powers_of_x[1] * tau\n"
"        # ...\n"
"        # powers_of_x[i] =  b.G1 * tau**i = powers_of_x[i - 1] * tau\n"
"        powers_of_x[0] = b.G1\n"
"\n"
"        for i in range(powers):\n"
"            if i > 0:\n"
"                powers_of_x[i] = b.multiply(powers_of_x[i - 1], tau)\n"
"\n"
"        assert b.is_on_curve(powers_of_x[1], b.b)\n"
"        print(\"Generated G1 side, X^1 point: {}\".format(powers_of_x[1]))\n"
"\n"
"        X2 = b.multiply(b.G2, tau)\n"
"        assert b.is_on_curve(X2, b.b2)\n"
"        print(\"Generated G2 side, X^1 point: {}\".format(X2))\n"
"\n"
"        assert b.pairing(b.G2, powers_of_x[1]) == b.pairing(X2, b.G1)\n"
"        print(\"X^1 points checked consistent\")\n"
"        print(\"Finished to generate structured reference string\")\n"
"\n"
"        return cls(powers_of_x, X2)\n"
"\n"
"    # Encodes the KZG commitment that evaluates to the given values in the "
"group\n"
"    def commit(self, values: Polynomial) -> G1Point:\n"
"        if (values.basis == Basis.LAGRANGE):\n"
"            # inverse FFT from Lagrange basis to monomial basis\n"
"            coeffs = values.ifft().values\n"
"        elif (values.basis == Basis.MONOMIAL):\n"
"            coeffs = values.values\n"
"        if len(coeffs) > len(self.powers_of_x):\n"
"            raise Exception(\"Not enough powers in setup\")\n"
"        return ec_lincomb([(s, x) for s, x in zip(self.powers_of_x, "
"coeffs)])\n"
"\n"
"    # Generate the verification key for this program with the given setup\n"
"    def verification_key(self, pk: CommonPreprocessedInput) -> "
"VerificationKey:\n"
"        return VerificationKey(\n"
"            pk.group_order,\n"
"            self.commit(pk.QM),\n"
"            self.commit(pk.QL),\n"
"            self.commit(pk.QR),\n"
"            self.commit(pk.QO),\n"
"            self.commit(pk.QC),\n"
"            self.commit(pk.S1),\n"
"            self.commit(pk.S2),\n"
"            self.commit(pk.S3),\n"
"            self.X2,\n"
"            Scalar.root_of_unity(pk.group_order),\n"
"        )\n"
"    \n"
"```"

#: src/public goods/5-plonk-intro.md:128
msgid ""
"这里有几个函数，第一个函数 `generate_srs` 用于生成 structured reference "
"string(SRS)，用于给多项式在群上生成 KZG commitment。基本流程："
msgstr ""
"这里有几个函数，第一个函数 `generate_srs` 用于生成 structured reference "
"string(SRS)，用于给多项式在群上生成 KZG commitment。基本流程："

#: src/public goods/5-plonk-intro.md:129
msgid "选择一个随机数作为 tau 的值"
msgstr "选择一个随机数作为 tau 的值"

#: src/public goods/5-plonk-intro.md:130
msgid "从椭圆曲线上获得两个生成元 G1 和 G2，有现成的函数库可以拿到"
msgstr "从椭圆曲线上获得两个生成元 G1 和 G2，有现成的函数库可以拿到"

#: src/public goods/5-plonk-intro.md:131
msgid "生成所需要的 SRS 值"
msgstr "生成所需要的 SRS 值"

#: src/public goods/5-plonk-intro.md:132
msgid "最后对生成的值进行验证"
msgstr "最后对生成的值进行验证"

#: src/public goods/5-plonk-intro.md:134
msgid "第二个函数 `commit`，就是实际用来生成 KZG commitment 的函数"
msgstr "第二个函数 `commit`，就是实际用来生成 KZG commitment 的函数"

#: src/public goods/5-plonk-intro.md:136
msgid ""
"第三个函数 `verification_key` 用来给 verifier 生成 verification key，用来验"
"证 proof"
msgstr ""
"第三个函数 `verification_key` 用来给 verifier 生成 verification key，用来验"
"证 proof"

#: src/public goods/5-plonk-intro.md:139
msgid ""
"```python\n"
"program = Program([\"e public\", \"c <== a * b\", \"e <== c * d\"], "
"group_order)\n"
"```"
msgstr ""
"```python\n"
"program = Program([\"e public\", \"c <== a * b\", \"e <== c * d\"], "
"group_order)\n"
"```"

#: src/public goods/5-plonk-intro.md:142
msgid ""
"Program 类的目标是 Arithmetization，将某种计算转换成数学表示。这里的`计算`指"
"的是一段电路，`数学表示`指的是多项式。"
msgstr ""
"Program 类的目标是 Arithmetization，将某种计算转换成数学表示。这里的`计算`指"
"的是一段电路，`数学表示`指的是多项式。"

#: src/public goods/5-plonk-intro.md:144
msgid ""
"在 Plonk 中，可以用八个多项式来表示这个 Program: QL, QR, QM, QO, QC, S1, S2, "
"S3。所以 Program 类的主要目标就是处理上面电路的字符串的表示，最终得到这八个多"
"项式。这八个多项式是公开的，prover 和 verifier 都可以得到这个信息。"
msgstr ""
"在 Plonk 中，可以用八个多项式来表示这个 Program: QL, QR, QM, QO, QC, S1, S2, "
"S3。所以 Program 类的主要目标就是处理上面电路的字符串的表示，最终得到这八个多"
"项式。这八个多项式是公开的，prover 和 verifier 都可以得到这个信息。"

#: src/public goods/5-plonk-intro.md:146
msgid "经过一定的处理，prover 得到 prover key(pk)。"
msgstr "经过一定的处理，prover 得到 prover key(pk)。"

#: src/public goods/5-plonk-intro.md:147
msgid ""
"```python=\n"
"@dataclass\n"
"class CommonPreprocessedInput:\n"
"    \"\"\"Common preprocessed input\"\"\"\n"
"\n"
"    group_order: int\n"
"    # q_M(X) multiplication selector polynomial\n"
"    QM: Polynomial\n"
"    # q_L(X) left selector polynomial\n"
"    QL: Polynomial\n"
"    # q_R(X) right selector polynomial\n"
"    QR: Polynomial\n"
"    # q_O(X) output selector polynomial\n"
"    QO: Polynomial\n"
"    # q_C(X) constants selector polynomial\n"
"    QC: Polynomial\n"
"    # S_σ1(X) first permutation polynomial S_σ1(X)\n"
"    S1: Polynomial\n"
"    # S_σ2(X) second permutation polynomial S_σ2(X)\n"
"    S2: Polynomial\n"
"    # S_σ3(X) third permutation polynomial S_σ3(X)\n"
"    S3: Polynomial\n"
"\n"
"```"
msgstr ""
"```python=\n"
"@dataclass\n"
"class CommonPreprocessedInput:\n"
"    \"\"\"Common preprocessed input\"\"\"\n"
"\n"
"    group_order: int\n"
"    # q_M(X) multiplication selector polynomial\n"
"    QM: Polynomial\n"
"    # q_L(X) left selector polynomial\n"
"    QL: Polynomial\n"
"    # q_R(X) right selector polynomial\n"
"    QR: Polynomial\n"
"    # q_O(X) output selector polynomial\n"
"    QO: Polynomial\n"
"    # q_C(X) constants selector polynomial\n"
"    QC: Polynomial\n"
"    # S_σ1(X) first permutation polynomial S_σ1(X)\n"
"    S1: Polynomial\n"
"    # S_σ2(X) second permutation polynomial S_σ2(X)\n"
"    S2: Polynomial\n"
"    # S_σ3(X) third permutation polynomial S_σ3(X)\n"
"    S3: Polynomial\n"
"\n"
"```"

#: src/public goods/5-plonk-intro.md:171
msgid "verifier 得到 verification key，在上面的 `Setup` 步骤中也提到了。"
msgstr "verifier 得到 verification key，在上面的 `Setup` 步骤中也提到了。"

#: src/public goods/5-plonk-intro.md:189
msgid ""
"和 prover 不一样的是，为什么中间 8 个值要用 commitment 的形式发给 verifier "
"呢？这是因为 Plonk 协议为了保证 verifier 端验证的计算复杂度尽量低，所以没有给"
"出原始的多项式，而只给出了 KZG 承诺的值，后面会看到，verifier 通过 pairing 验"
"证就可以保证这些承诺值和原始的多项式是一一对应的，prover 欺骗不了 verifier，"
"这样既保证的正确性，也保证了 verifier 验证的简单性。"
msgstr ""
"和 prover 不一样的是，为什么中间 8 个值要用 commitment 的形式发给 verifier "
"呢？这是因为 Plonk 协议为了保证 verifier 端验证的计算复杂度尽量低，所以没有给"
"出原始的多项式，而只给出了 KZG 承诺的值，后面会看到，verifier 通过 pairing 验"
"证就可以保证这些承诺值和原始的多项式是一一对应的，prover 欺骗不了 verifier，"
"这样既保证的正确性，也保证了 verifier 验证的简单性。"

#: src/public goods/5-plonk-intro.md:192
msgid ""
"```python\n"
"assignments = {\"a\": 3, \"b\": 4, \"c\": 12, \"d\": 5, \"e\": 60}\n"
"```"
msgstr ""
"```python\n"
"assignments = {\"a\": 3, \"b\": 4, \"c\": 12, \"d\": 5, \"e\": 60}\n"
"```"

#: src/public goods/5-plonk-intro.md:196
msgid ""
"Assignment 是对电路中引线的赋值，也叫 witness 或者 private input。这些值只有 "
"prover 知道，对 verifier 是保密的。prover 最终要向 verifier 提供证明，保证将"
"这些值输入到 program 中能得到指定的结果。"
msgstr ""
"Assignment 是对电路中引线的赋值，也叫 witness 或者 private input。这些值只有 "
"prover 知道，对 verifier 是保密的。prover 最终要向 verifier 提供证明，保证将"
"这些值输入到 program 中能得到指定的结果。"

#: src/public goods/5-plonk-intro.md:202
msgid "这里是协议的重点，分为五轮。"
msgstr "这里是协议的重点，分为五轮。"

#: src/public goods/5-plonk-intro.md:205
msgid "主体逻辑："
msgstr "主体逻辑："

#: src/public goods/5-plonk-intro.md:206
msgid ""
"```python=\n"
"    def prove(self, witness: dict[Optional[str], int]) -> Proof:\n"
"        # Initialise Fiat-Shamir transcript\n"
"        transcript = Transcript(b\"plonk\")\n"
"\n"
"        # Collect fixed and public information\n"
"        # FIXME: Hash pk and PI into transcript\n"
"        public_vars = self.program.get_public_assignments()\n"
"        PI = Polynomial(\n"
"            [Scalar(-witness[v]) for v in public_vars]\n"
"            + [Scalar(0) for _ in range(self.group_order - "
"len(public_vars))],\n"
"            Basis.LAGRANGE,\n"
"        )\n"
"        self.PI = PI\n"
"\n"
"        # Round 1\n"
"        msg_1 = self.round_1(witness)\n"
"        self.beta, self.gamma = transcript.round_1(msg_1)\n"
"\n"
"        # Round 2\n"
"        msg_2 = self.round_2()\n"
"        self.alpha, self.fft_cofactor = transcript.round_2(msg_2)\n"
"\n"
"        # Round 3\n"
"        msg_3 = self.round_3()\n"
"        self.zeta = transcript.round_3(msg_3)\n"
"\n"
"        # Round 4\n"
"        msg_4 = self.round_4()\n"
"        self.v = transcript.round_4(msg_4)\n"
"\n"
"        # Round 5\n"
"        msg_5 = self.round_5()\n"
"\n"
"        return Proof(msg_1, msg_2, msg_3, msg_4, msg_5)\n"
"\n"
"```"
msgstr ""
"```python=\n"
"    def prove(self, witness: dict[Optional[str], int]) -> Proof:\n"
"        # Initialise Fiat-Shamir transcript\n"
"        transcript = Transcript(b\"plonk\")\n"
"\n"
"        # Collect fixed and public information\n"
"        # FIXME: Hash pk and PI into transcript\n"
"        public_vars = self.program.get_public_assignments()\n"
"        PI = Polynomial(\n"
"            [Scalar(-witness[v]) for v in public_vars]\n"
"            + [Scalar(0) for _ in range(self.group_order - "
"len(public_vars))],\n"
"            Basis.LAGRANGE,\n"
"        )\n"
"        self.PI = PI\n"
"\n"
"        # Round 1\n"
"        msg_1 = self.round_1(witness)\n"
"        self.beta, self.gamma = transcript.round_1(msg_1)\n"
"\n"
"        # Round 2\n"
"        msg_2 = self.round_2()\n"
"        self.alpha, self.fft_cofactor = transcript.round_2(msg_2)\n"
"\n"
"        # Round 3\n"
"        msg_3 = self.round_3()\n"
"        self.zeta = transcript.round_3(msg_3)\n"
"\n"
"        # Round 4\n"
"        msg_4 = self.round_4()\n"
"        self.v = transcript.round_4(msg_4)\n"
"\n"
"        # Round 5\n"
"        msg_5 = self.round_5()\n"
"\n"
"        return Proof(msg_1, msg_2, msg_3, msg_4, msg_5)\n"
"\n"
"```"

#: src/public goods/5-plonk-intro.md:243
msgid ""
"通过 5 轮的计算会生成必要的 proof，这些 proof 之后交给 verifier 进行验证，如"
"果通过，则整个协议完成。"
msgstr ""
"通过 5 轮的计算会生成必要的 proof，这些 proof 之后交给 verifier 进行验证，如"
"果通过，则整个协议完成。"

#: src/public goods/5-plonk-intro.md:245
msgid "Round 0: 初始化："
msgstr "Round 0: 初始化："

#: src/public goods/5-plonk-intro.md:256
msgid "Round 1: 生成对 witness/assignments 多项式的承诺"
msgstr "Round 1: 生成对 witness/assignments 多项式的承诺"

#: src/public goods/5-plonk-intro.md:257
msgid ""
"这个过程和相关知识可以参考 [理解 PLONK（一）：Plonkish Arithmetization ]"
"(https://github.com/sec-bit/learning-zkp/blob/develop/plonk-intro-cn/plonk-"
"arithmetization.md) 和 [理解 PLONK（二）：多项式编码 ](https://github.com/"
"sec-bit/learning-zkp/blob/develop/plonk-intro-cn/plonk-lagrange-basis.md)。多"
"项式承诺相关知识可以参考 [理解 Plonk（五）：多项式承诺 ](https://github.com/"
"sec-bit/learning-zkp/blob/develop/plonk-intro-cn/plonk-polycom.mdf)"
msgstr ""
"这个过程和相关知识可以参考 [理解 PLONK（一）：Plonkish Arithmetization ]"
"(https://github.com/sec-bit/learning-zkp/blob/develop/plonk-intro-cn/plonk-"
"arithmetization.md) 和 [理解 PLONK（二）：多项式编码 ](https://github.com/"
"sec-bit/learning-zkp/blob/develop/plonk-intro-cn/plonk-lagrange-basis.md)。多"
"项式承诺相关知识可以参考 [理解 Plonk（五）：多项式承诺 ](https://github.com/"
"sec-bit/learning-zkp/blob/develop/plonk-intro-cn/plonk-polycom.mdf)"

#: src/public goods/5-plonk-intro.md:262 goods/5-plonk-intro.md:389
msgid "大体流程:"
msgstr "大体流程:"

#: src/public goods/5-plonk-intro.md:263
msgid ""
"根据 group_order 初始化 A, B, C 这三个 witness 多项式的点值 A_values，"
"B_values，C_values，这些点值用于后面生成多项式，也就是生成的 `Polynomial` 类"
msgstr ""
"根据 group_order 初始化 A, B, C 这三个 witness 多项式的点值 A_values，"
"B_values，C_values，这些点值用于后面生成多项式，也就是生成的 `Polynomial` 类"

#: src/public goods/5-plonk-intro.md:264
msgid ""
"依次读取 program 中引线的值，将左引线的值 L 添加到 A_values, 右引线的值添加"
"到 B_values 中，输出引线的值添加到 C_values 中"
msgstr ""
"依次读取 program 中引线的值，将左引线的值 L 添加到 A_values, 右引线的值添加"
"到 B_values 中，输出引线的值添加到 C_values 中"

#: src/public goods/5-plonk-intro.md:265
msgid "通过 `Polynomial` 类生成 A，B，C 多项式"
msgstr "通过 `Polynomial` 类生成 A，B，C 多项式"

#: src/public goods/5-plonk-intro.md:266
msgid "生成 A，B，C 多项式的 KZG 承诺"
msgstr "生成 A，B，C 多项式的 KZG 承诺"

#: src/public goods/5-plonk-intro.md:267
msgid "验证门约束等式是否成立"
msgstr "验证门约束等式是否成立"

#: src/public goods/5-plonk-intro.md:322
msgid "Round 2: 生成 Permutation Accumulator 多项式 Z 的 KZG 承诺"
msgstr "Round 2: 生成 Permutation Accumulator 多项式 Z 的 KZG 承诺"

#: src/public goods/5-plonk-intro.md:323
msgid ""
"参考文章 [理解 PLONK（三）：置换证明 ](https://github.com/sec-bit/learning-"
"zkp/blob/develop/plonk-intro-cn/plonk-permutation.md)"
msgstr ""
"参考文章 [理解 PLONK（三）：置换证明 ](https://github.com/sec-bit/learning-"
"zkp/blob/develop/plonk-intro-cn/plonk-permutation.md)"

#: src/public goods/5-plonk-intro.md:326
msgid "要给 `Z` 生成承诺，首先要构造`Z`，然后可以直接对多项式生成 KZG 承诺。"
msgstr "要给 `Z` 生成承诺，首先要构造`Z`，然后可以直接对多项式生成 KZG 承诺。"

#: src/public goods/5-plonk-intro.md:328
msgid "大体流程："
msgstr "大体流程："

#: src/public goods/5-plonk-intro.md:329
msgid "初始化`Z` 的点值数组 `Z_values` 第一个值为 1"
msgstr "初始化`Z` 的点值数组 `Z_values` 第一个值为 1"

#: src/public goods/5-plonk-intro.md:330
msgid ""
"在 group_order 内，依次用上一次的值乘以当前的累乘因子，获得当前 `Z_values` 的"
"值"
msgstr ""
"在 group_order 内，依次用上一次的值乘以当前的累乘因子，获得当前 `Z_values` 的"
"值"

#: src/public goods/5-plonk-intro.md:331
msgid "确保最后一项为 1（具体原理请看上面的文章）"
msgstr "确保最后一项为 1（具体原理请看上面的文章）"

#: src/public goods/5-plonk-intro.md:332
msgid "检查生成值的有效性"
msgstr "检查生成值的有效性"

#: src/public goods/5-plonk-intro.md:333
msgid "用 Lagrange 形式构造多项式"
msgstr "用 Lagrange 形式构造多项式"

#: src/public goods/5-plonk-intro.md:334
msgid "生成 KZG 承诺"
msgstr "生成 KZG 承诺"

#: src/public goods/5-plonk-intro.md:336
msgid ""
"```python=\n"
"    def round_2(self) -> Message2:\n"
"        group_order = self.group_order\n"
"        setup = self.setup\n"
"\n"
"        Z_values = [Scalar(1)]\n"
"        roots_of_unity = Scalar.roots_of_unity(group_order)\n"
"        for i in range(group_order):\n"
"            Z_values.append(\n"
"                Z_values[-1]\n"
"                * self.rlc(self.A.values[i], roots_of_unity[i])\n"
"                * self.rlc(self.B.values[i], 2 * roots_of_unity[i])\n"
"                * self.rlc(self.C.values[i], 3 * roots_of_unity[i])\n"
"                / self.rlc(self.A.values[i], self.pk.S1.values[i])\n"
"                / self.rlc(self.B.values[i], self.pk.S2.values[i])\n"
"                / self.rlc(self.C.values[i], self.pk.S3.values[i])\n"
"            )\n"
"        assert Z_values.pop() == 1\n"
"\n"
"        # Sanity-check that Z was computed correctly\n"
"        for i in range(group_order):\n"
"            assert (\n"
"                self.rlc(self.A.values[i], roots_of_unity[i])\n"
"                * self.rlc(self.B.values[i], 2 * roots_of_unity[i])\n"
"                * self.rlc(self.C.values[i], 3 * roots_of_unity[i])\n"
"            ) * Z_values[i] - (\n"
"                self.rlc(self.A.values[i], self.pk.S1.values[i])\n"
"                * self.rlc(self.B.values[i], self.pk.S2.values[i])\n"
"                * self.rlc(self.C.values[i], self.pk.S3.values[i])\n"
"            ) * Z_values[\n"
"                (i + 1) % group_order\n"
"            ] == 0\n"
"\n"
"        Z = Polynomial(Z_values, Basis.LAGRANGE)\n"
"        z_1 = setup.commit(Z)\n"
"        print(\"Permutation accumulator polynomial successfully "
"generated\")\n"
"\n"
"        self.Z = Z\n"
"        return Message2(z_1)\n"
"\n"
"```"
msgstr ""
"```python=\n"
"    def round_2(self) -> Message2:\n"
"        group_order = self.group_order\n"
"        setup = self.setup\n"
"\n"
"        Z_values = [Scalar(1)]\n"
"        roots_of_unity = Scalar.roots_of_unity(group_order)\n"
"        for i in range(group_order):\n"
"            Z_values.append(\n"
"                Z_values[-1]\n"
"                * self.rlc(self.A.values[i], roots_of_unity[i])\n"
"                * self.rlc(self.B.values[i], 2 * roots_of_unity[i])\n"
"                * self.rlc(self.C.values[i], 3 * roots_of_unity[i])\n"
"                / self.rlc(self.A.values[i], self.pk.S1.values[i])\n"
"                / self.rlc(self.B.values[i], self.pk.S2.values[i])\n"
"                / self.rlc(self.C.values[i], self.pk.S3.values[i])\n"
"            )\n"
"        assert Z_values.pop() == 1\n"
"\n"
"        # Sanity-check that Z was computed correctly\n"
"        for i in range(group_order):\n"
"            assert (\n"
"                self.rlc(self.A.values[i], roots_of_unity[i])\n"
"                * self.rlc(self.B.values[i], 2 * roots_of_unity[i])\n"
"                * self.rlc(self.C.values[i], 3 * roots_of_unity[i])\n"
"            ) * Z_values[i] - (\n"
"                self.rlc(self.A.values[i], self.pk.S1.values[i])\n"
"                * self.rlc(self.B.values[i], self.pk.S2.values[i])\n"
"                * self.rlc(self.C.values[i], self.pk.S3.values[i])\n"
"            ) * Z_values[\n"
"                (i + 1) % group_order\n"
"            ] == 0\n"
"\n"
"        Z = Polynomial(Z_values, Basis.LAGRANGE)\n"
"        z_1 = setup.commit(Z)\n"
"        print(\"Permutation accumulator polynomial successfully "
"generated\")\n"
"\n"
"        self.Z = Z\n"
"        return Message2(z_1)\n"
"\n"
"```"

#: src/public goods/5-plonk-intro.md:378
msgid "其中 `rlc` 的定义："
msgstr "其中 `rlc` 的定义："

#: src/public goods/5-plonk-intro.md:385
msgid "Round 3: 生成商多项式的承诺"
msgstr "Round 3: 生成商多项式的承诺"

#: src/public goods/5-plonk-intro.md:386 goods/5-plonk-intro.md:516
msgid ""
"相关知识可以参考文章 [理解 PLONK（四）：算术约束与拷贝约束 ](https://github."
"com/sec-bit/learning-zkp/blob/develop/plonk-intro-cn/plonk-constraints.md)"
msgstr ""
"相关知识可以参考文章 [理解 PLONK（四）：算术约束与拷贝约束 ](https://github."
"com/sec-bit/learning-zkp/blob/develop/plonk-intro-cn/plonk-constraints.md)"

#: src/public goods/5-plonk-intro.md:390
msgid "构造消失多项式(Vanishing Polynomial): ZH_coeff"
msgstr "构造消失多项式(Vanishing Polynomial): ZH_coeff"

#: src/public goods/5-plonk-intro.md:391
msgid "构造电路的门约束多项式: `gate_constraints_coeff`"
msgstr "构造电路的门约束多项式: `gate_constraints_coeff`"

#: src/public goods/5-plonk-intro.md:392
msgid "构造 Copy Constraints 的多项式: `permutation_grand_product`"
msgstr "构造 Copy Constraints 的多项式: `permutation_grand_product`"

#: src/public goods/5-plonk-intro.md:393
msgid ""
"构造 `Copy Constraints 第一个值为 1` 这个约束的多项式: "
"`permutation_first_row_coeff`"
msgstr ""
"构造 `Copy Constraints 第一个值为 1` 这个约束的多项式: "
"`permutation_first_row_coeff`"

#: src/public goods/5-plonk-intro.md:394
msgid "求出商多项式 `quotient polynomial`: T_coeff"
msgstr "求出商多项式 `quotient polynomial`: T_coeff"

#: src/public goods/5-plonk-intro.md:395
msgid "计算商多项式的 KZG 承诺"
msgstr "计算商多项式的 KZG 承诺"

#: src/public goods/5-plonk-intro.md:396
msgid ""
"```python=\n"
"    def round_3(self) -> Message3:\n"
"        group_order = self.group_order\n"
"        setup = self.setup\n"
"\n"
"        # Compute the quotient polynomial\n"
"\n"
"        alpha = self.alpha\n"
"\n"
"        roots_of_unity = Scalar.roots_of_unity(group_order)\n"
"\n"
"        A_coeff, B_coeff, C_coeff, S1_coeff, S2_coeff, S3_coeff, Z_coeff, "
"QL_coeff, QR_coeff, QM_coeff, QO_coeff, QC_coeff, PI_coeff = (\n"
"            x.ifft()\n"
"            for x in (\n"
"                self.A,\n"
"                self.B,\n"
"                self.C,\n"
"                self.pk.S1,\n"
"                self.pk.S2,\n"
"                self.pk.S3,\n"
"                self.Z,\n"
"                self.pk.QL,\n"
"                self.pk.QR,\n"
"                self.pk.QM,\n"
"                self.pk.QO,\n"
"                self.pk.QC,\n"
"                self.PI,\n"
"            )\n"
"        )\n"
"\n"
"        L0_coeff = (\n"
"            Polynomial([Scalar(1)] + [Scalar(0)] * (group_order - 1), Basis."
"LAGRANGE)\n"
"        ).ifft()\n"
"\n"
"        # x^8 - 1 coeffs are [-1, 0, 0, 0, 0, 0, 0, 0, 1]\n"
"        # which needs 9 points(n + 1) to determine the polynomial\n"
"        ZH_array = [Scalar(-1)] + [Scalar(0)] * (group_order - 1) + "
"[Scalar(1)]\n"
"        ZH_coeff = Polynomial(ZH_array, Basis.MONOMIAL)\n"
"\n"
"        gate_constraints_coeff = (\n"
"            A_coeff * QL_coeff\n"
"            + B_coeff * QR_coeff\n"
"            + A_coeff * B_coeff * QM_coeff\n"
"            + C_coeff * QO_coeff\n"
"            + PI_coeff\n"
"            + QC_coeff\n"
"        )\n"
"\n"
"        normal_roots = Polynomial(\n"
"            roots_of_unity, Basis.LAGRANGE\n"
"        )\n"
"\n"
"        roots_coeff = normal_roots.ifft()\n"
"        # z * w\n"
"        ZW = self.Z.shift(1)\n"
"        ZW_coeff = ZW.ifft()\n"
"\n"
"        for i in range(group_order):\n"
"            assert (\n"
"                self.rlc(self.A.values[i], roots_of_unity[i])\n"
"                * self.rlc(self.B.values[i], 2 * roots_of_unity[i])\n"
"                * self.rlc(self.C.values[i], 3 * roots_of_unity[i])\n"
"            ) * self.Z.values[i] - (\n"
"                self.rlc(self.A.values[i], self.pk.S1.values[i])\n"
"                * self.rlc(self.B.values[i], self.pk.S2.values[i])\n"
"                * self.rlc(self.C.values[i], self.pk.S3.values[i])\n"
"            ) * ZW.values[\n"
"                i % group_order\n"
"            ] == 0\n"
"\n"
"        permutation_grand_product_coeff = (\n"
"            (\n"
"                self.rlc(A_coeff, roots_coeff)\n"
"                * self.rlc(B_coeff, roots_coeff * Scalar(2))\n"
"                * self.rlc(C_coeff, roots_coeff * Scalar(3))\n"
"            )\n"
"            * Z_coeff\n"
"            - (\n"
"                self.rlc(A_coeff, S1_coeff)\n"
"                * self.rlc(B_coeff, S2_coeff)\n"
"                * self.rlc(C_coeff, S3_coeff)\n"
"            )\n"
"            * ZW_coeff\n"
"        )\n"
"\n"
"        permutation_first_row_coeff = (Z_coeff - Scalar(1)) * L0_coeff\n"
"\n"
"        all_constraints = (\n"
"            gate_constraints_coeff\n"
"            + permutation_grand_product_coeff * alpha\n"
"            + permutation_first_row_coeff * alpha**2\n"
"        )\n"
"\n"
"        # quotient polynomial\n"
"        T_coeff = all_constraints / ZH_coeff\n"
"\n"
"        print(\"Generated the quotient polynomial\")\n"
"\n"
"        W_t = setup.commit(T_coeff)\n"
"\n"
"        self.A_coeff = A_coeff\n"
"        self.B_coeff = B_coeff\n"
"        self.C_coeff = C_coeff\n"
"        self.S1_coeff = S1_coeff\n"
"        self.S2_coeff = S2_coeff\n"
"        self.S3_coeff = S3_coeff\n"
"        self.Z_coeff = Z_coeff\n"
"        self.ZW_coeff = ZW_coeff\n"
"        self.QL_coeff = QL_coeff\n"
"        self.QR_coeff = QR_coeff\n"
"        self.QM_coeff = QM_coeff\n"
"        self.QO_coeff = QO_coeff\n"
"        self.QC_coeff = QC_coeff\n"
"        self.PI_coeff = PI_coeff\n"
"        self.T_coeff = T_coeff\n"
"\n"
"        return Message3(W_t)\n"
"```"
msgstr ""
"```python=\n"
"    def round_3(self) -> Message3:\n"
"        group_order = self.group_order\n"
"        setup = self.setup\n"
"\n"
"        # Compute the quotient polynomial\n"
"\n"
"        alpha = self.alpha\n"
"\n"
"        roots_of_unity = Scalar.roots_of_unity(group_order)\n"
"\n"
"        A_coeff, B_coeff, C_coeff, S1_coeff, S2_coeff, S3_coeff, Z_coeff, "
"QL_coeff, QR_coeff, QM_coeff, QO_coeff, QC_coeff, PI_coeff = (\n"
"            x.ifft()\n"
"            for x in (\n"
"                self.A,\n"
"                self.B,\n"
"                self.C,\n"
"                self.pk.S1,\n"
"                self.pk.S2,\n"
"                self.pk.S3,\n"
"                self.Z,\n"
"                self.pk.QL,\n"
"                self.pk.QR,\n"
"                self.pk.QM,\n"
"                self.pk.QO,\n"
"                self.pk.QC,\n"
"                self.PI,\n"
"            )\n"
"        )\n"
"\n"
"        L0_coeff = (\n"
"            Polynomial([Scalar(1)] + [Scalar(0)] * (group_order - 1), Basis."
"LAGRANGE)\n"
"        ).ifft()\n"
"\n"
"        # x^8 - 1 coeffs are [-1, 0, 0, 0, 0, 0, 0, 0, 1]\n"
"        # which needs 9 points(n + 1) to determine the polynomial\n"
"        ZH_array = [Scalar(-1)] + [Scalar(0)] * (group_order - 1) + "
"[Scalar(1)]\n"
"        ZH_coeff = Polynomial(ZH_array, Basis.MONOMIAL)\n"
"\n"
"        gate_constraints_coeff = (\n"
"            A_coeff * QL_coeff\n"
"            + B_coeff * QR_coeff\n"
"            + A_coeff * B_coeff * QM_coeff\n"
"            + C_coeff * QO_coeff\n"
"            + PI_coeff\n"
"            + QC_coeff\n"
"        )\n"
"\n"
"        normal_roots = Polynomial(\n"
"            roots_of_unity, Basis.LAGRANGE\n"
"        )\n"
"\n"
"        roots_coeff = normal_roots.ifft()\n"
"        # z * w\n"
"        ZW = self.Z.shift(1)\n"
"        ZW_coeff = ZW.ifft()\n"
"\n"
"        for i in range(group_order):\n"
"            assert (\n"
"                self.rlc(self.A.values[i], roots_of_unity[i])\n"
"                * self.rlc(self.B.values[i], 2 * roots_of_unity[i])\n"
"                * self.rlc(self.C.values[i], 3 * roots_of_unity[i])\n"
"            ) * self.Z.values[i] - (\n"
"                self.rlc(self.A.values[i], self.pk.S1.values[i])\n"
"                * self.rlc(self.B.values[i], self.pk.S2.values[i])\n"
"                * self.rlc(self.C.values[i], self.pk.S3.values[i])\n"
"            ) * ZW.values[\n"
"                i % group_order\n"
"            ] == 0\n"
"\n"
"        permutation_grand_product_coeff = (\n"
"            (\n"
"                self.rlc(A_coeff, roots_coeff)\n"
"                * self.rlc(B_coeff, roots_coeff * Scalar(2))\n"
"                * self.rlc(C_coeff, roots_coeff * Scalar(3))\n"
"            )\n"
"            * Z_coeff\n"
"            - (\n"
"                self.rlc(A_coeff, S1_coeff)\n"
"                * self.rlc(B_coeff, S2_coeff)\n"
"                * self.rlc(C_coeff, S3_coeff)\n"
"            )\n"
"            * ZW_coeff\n"
"        )\n"
"\n"
"        permutation_first_row_coeff = (Z_coeff - Scalar(1)) * L0_coeff\n"
"\n"
"        all_constraints = (\n"
"            gate_constraints_coeff\n"
"            + permutation_grand_product_coeff * alpha\n"
"            + permutation_first_row_coeff * alpha**2\n"
"        )\n"
"\n"
"        # quotient polynomial\n"
"        T_coeff = all_constraints / ZH_coeff\n"
"\n"
"        print(\"Generated the quotient polynomial\")\n"
"\n"
"        W_t = setup.commit(T_coeff)\n"
"\n"
"        self.A_coeff = A_coeff\n"
"        self.B_coeff = B_coeff\n"
"        self.C_coeff = C_coeff\n"
"        self.S1_coeff = S1_coeff\n"
"        self.S2_coeff = S2_coeff\n"
"        self.S3_coeff = S3_coeff\n"
"        self.Z_coeff = Z_coeff\n"
"        self.ZW_coeff = ZW_coeff\n"
"        self.QL_coeff = QL_coeff\n"
"        self.QR_coeff = QR_coeff\n"
"        self.QM_coeff = QM_coeff\n"
"        self.QO_coeff = QO_coeff\n"
"        self.QC_coeff = QC_coeff\n"
"        self.PI_coeff = PI_coeff\n"
"        self.T_coeff = T_coeff\n"
"\n"
"        return Message3(W_t)\n"
"```"

#: src/public goods/5-plonk-intro.md:515
msgid "Round 4: 对各个多项式在一个随机的 zeta 点求值"
msgstr "Round 4: 对各个多项式在一个随机的 zeta 点求值"

#: src/public goods/5-plonk-intro.md:519
msgid ""
"这一步比较简单，对各个多项式在一个随机的 zeta 点求值。这里有一个知识点，就是"
"如何获取 zeta 这个随机值，使用的方法叫做Fiat-Shamir 变换，可以将一个需要 "
"prover 和 verifier 进行交互的证明转化成不需要交互的证明，简单介绍可以参考 [这"
"篇文章](https://github.com/sec-bit/learning-zkp/"
"blob/3bff37c46c7b4f447b0bb9304d1ebc039a582c5f/zkp-intro/4/zkp-rom.md#fiat-"
"shamir-%E5%8F%98%E6%8D%A2--%E4%BB%8E-public-coin-%E5%88%B0-nizk)，代码可以参"
"考 [这里](https://github.com/Antalpha-Labs/baby-plonk/blob/main/transcript."
"py)。"
msgstr ""
"这一步比较简单，对各个多项式在一个随机的 zeta 点求值。这里有一个知识点，就是"
"如何获取 zeta 这个随机值，使用的方法叫做Fiat-Shamir 变换，可以将一个需要 "
"prover 和 verifier 进行交互的证明转化成不需要交互的证明，简单介绍可以参考 [这"
"篇文章](https://github.com/sec-bit/learning-zkp/"
"blob/3bff37c46c7b4f447b0bb9304d1ebc039a582c5f/zkp-intro/4/zkp-rom.md#fiat-"
"shamir-%E5%8F%98%E6%8D%A2--%E4%BB%8E-public-coin-%E5%88%B0-nizk)，代码可以参"
"考 [这里](https://github.com/Antalpha-Labs/baby-plonk/blob/main/transcript."
"py)。"

#: src/public goods/5-plonk-intro.md:575
msgid ""
"`coeff_eval` 是一个多项式求值的函数。具体实现可以看[这里](https://github.com/"
"Antalpha-Labs/baby-plonk/blob/main/poly.py)。"
msgstr ""
"`coeff_eval` 是一个多项式求值的函数。具体实现可以看[这里](https://github.com/"
"Antalpha-Labs/baby-plonk/blob/main/poly.py)。"

#: src/public goods/5-plonk-intro.md:577
msgid "Round 5: 对每个多项式生成 KZG 承诺中需要的两个承诺"
msgstr "Round 5: 对每个多项式生成 KZG 承诺中需要的两个承诺"

#: src/public goods/5-plonk-intro.md:578
msgid ""
"相关知识可以参考文章 [理解 PLONK（四）：算术约束与拷贝约束 ](https://github."
"com/sec-bit/learning-zkp/blob/develop/plonk-intro-cn/plonk-constraints.md)。"
msgstr ""
"相关知识可以参考文章 [理解 PLONK（四）：算术约束与拷贝约束 ](https://github."
"com/sec-bit/learning-zkp/blob/develop/plonk-intro-cn/plonk-constraints.md)。"

#: src/public goods/5-plonk-intro.md:581
msgid "这一步也比较简单，生成所需的 KZG 承诺，为 verifier 进行 verify 做准备。"
msgstr ""
"这一步也比较简单，生成所需的 KZG 承诺，为 verifier 进行 verify 做准备。"

#: src/public goods/5-plonk-intro.md:583
msgid ""
"```python=\n"
"    def round_5(self) -> Message5:\n"
"        W_a, W_a_quot = self.generate_commitment(self.A_coeff, self.a_eval)\n"
"        W_b, W_b_quot = self.generate_commitment(self.B_coeff, self.b_eval)\n"
"        W_c, W_c_quot = self.generate_commitment(self.C_coeff, self.c_eval)\n"
"        W_ql, W_ql_quot = self.generate_commitment(self.QL_coeff, self."
"ql_eval)\n"
"        W_qr, W_qr_quot = self.generate_commitment(self.QR_coeff, self."
"qr_eval)\n"
"        W_qm, W_qm_quot = self.generate_commitment(self.QM_coeff, self."
"qm_eval)\n"
"        W_qo, W_qo_quot = self.generate_commitment(self.QO_coeff, self."
"qo_eval)\n"
"        W_qc, W_qc_quot = self.generate_commitment(self.QC_coeff, self."
"qc_eval)\n"
"        W_s1, W_s1_quot = self.generate_commitment(self.S1_coeff, self."
"s1_eval)\n"
"        W_s2, W_s2_quot = self.generate_commitment(self.S2_coeff, self."
"s2_eval)\n"
"        W_s3, W_s3_quot = self.generate_commitment(self.S3_coeff, self."
"s3_eval)\n"
"        W_z, W_z_quot = self.generate_commitment(self.Z_coeff, self.z_eval)\n"
"        W_zw, W_zw_quot = self.generate_commitment(self.ZW_coeff, self."
"zw_eval)\n"
"        W_t, W_t_quot = self.generate_commitment(self.T_coeff, self.t_eval)\n"
"\n"
"        print(\"Generated final quotient witness polynomials\")\n"
"        return Message5(\n"
"            W_a, W_a_quot,\n"
"            W_b, W_b_quot,\n"
"            W_c, W_c_quot,\n"
"            W_ql, W_ql_quot,\n"
"            W_qr, W_qr_quot,\n"
"            W_qm, W_qm_quot,\n"
"            W_qo, W_qo_quot,\n"
"            W_qc, W_qc_quot,\n"
"            W_s1, W_s1_quot,\n"
"            W_s2, W_s2_quot,\n"
"            W_s3, W_s3_quot,\n"
"            W_z, W_z_quot,\n"
"            W_zw, W_zw_quot,\n"
"            W_t, W_t_quot,\n"
"        )\n"
"```"
msgstr ""
"```python=\n"
"    def round_5(self) -> Message5:\n"
"        W_a, W_a_quot = self.generate_commitment(self.A_coeff, self.a_eval)\n"
"        W_b, W_b_quot = self.generate_commitment(self.B_coeff, self.b_eval)\n"
"        W_c, W_c_quot = self.generate_commitment(self.C_coeff, self.c_eval)\n"
"        W_ql, W_ql_quot = self.generate_commitment(self.QL_coeff, self."
"ql_eval)\n"
"        W_qr, W_qr_quot = self.generate_commitment(self.QR_coeff, self."
"qr_eval)\n"
"        W_qm, W_qm_quot = self.generate_commitment(self.QM_coeff, self."
"qm_eval)\n"
"        W_qo, W_qo_quot = self.generate_commitment(self.QO_coeff, self."
"qo_eval)\n"
"        W_qc, W_qc_quot = self.generate_commitment(self.QC_coeff, self."
"qc_eval)\n"
"        W_s1, W_s1_quot = self.generate_commitment(self.S1_coeff, self."
"s1_eval)\n"
"        W_s2, W_s2_quot = self.generate_commitment(self.S2_coeff, self."
"s2_eval)\n"
"        W_s3, W_s3_quot = self.generate_commitment(self.S3_coeff, self."
"s3_eval)\n"
"        W_z, W_z_quot = self.generate_commitment(self.Z_coeff, self.z_eval)\n"
"        W_zw, W_zw_quot = self.generate_commitment(self.ZW_coeff, self."
"zw_eval)\n"
"        W_t, W_t_quot = self.generate_commitment(self.T_coeff, self.t_eval)\n"
"\n"
"        print(\"Generated final quotient witness polynomials\")\n"
"        return Message5(\n"
"            W_a, W_a_quot,\n"
"            W_b, W_b_quot,\n"
"            W_c, W_c_quot,\n"
"            W_ql, W_ql_quot,\n"
"            W_qr, W_qr_quot,\n"
"            W_qm, W_qm_quot,\n"
"            W_qo, W_qo_quot,\n"
"            W_qc, W_qc_quot,\n"
"            W_s1, W_s1_quot,\n"
"            W_s2, W_s2_quot,\n"
"            W_s3, W_s3_quot,\n"
"            W_z, W_z_quot,\n"
"            W_zw, W_zw_quot,\n"
"            W_t, W_t_quot,\n"
"        )\n"
"```"

#: src/public goods/5-plonk-intro.md:619
msgid "生成承诺的代码:"
msgstr "生成承诺的代码:"

#: src/public goods/5-plonk-intro.md:638
msgid "再回顾一下测试中的代码是这样进行验证的:"
msgstr "再回顾一下测试中的代码是这样进行验证的:"

#: src/public goods/5-plonk-intro.md:639
msgid ""
"```python=\n"
"def verifier_test(setup, proof, group_order):\n"
"    print(\"Beginning verifier test\")\n"
"    program = Program([\"e public\", \"c <== a * b\", \"e <== c * d\"], "
"group_order)\n"
"    public = [60]\n"
"    vk = setup.verification_key(program.common_preprocessed_input())\n"
"    assert vk.verify_proof(group_order, proof, public)\n"
"    print(\"Verifier test success\")\n"
"\n"
"```"
msgstr ""
"```python=\n"
"def verifier_test(setup, proof, group_order):\n"
"    print(\"Beginning verifier test\")\n"
"    program = Program([\"e public\", \"c <== a * b\", \"e <== c * d\"], "
"group_order)\n"
"    public = [60]\n"
"    vk = setup.verification_key(program.common_preprocessed_input())\n"
"    assert vk.verify_proof(group_order, proof, public)\n"
"    print(\"Verifier test success\")\n"
"\n"
"```"

#: src/public goods/5-plonk-intro.md:650
msgid ""
"`VerificationKey` 的代码在[这里](https://github.com/Antalpha-Labs/baby-plonk/"
"blob/main/verifier.py)，最核心的方法是 `verify_proof`"
msgstr ""
"`VerificationKey` 的代码在[这里](https://github.com/Antalpha-Labs/baby-plonk/"
"blob/main/verifier.py)，最核心的方法是 `verify_proof`"

#: src/public goods/5-plonk-intro.md:652
msgid "verifier 主要做两件事情:"
msgstr "verifier 主要做两件事情:"

#: src/public goods/5-plonk-intro.md:653
msgid "验证 KZG 承诺，保证多项式是和所承诺的一致"
msgstr "验证 KZG 承诺，保证多项式是和所承诺的一致"

#: src/public goods/5-plonk-intro.md:654
msgid "验证最终组合出来的多项式求值的相等性"
msgstr "验证最终组合出来的多项式求值的相等性"

#: src/public goods/5-plonk-intro.md:656
msgid ""
"```python=\n"
"    def verify_proof(self, group_order: int, pf, public=[]) -> bool:\n"
"        # 4. Compute challenges\n"
"        beta, gamma, alpha, zeta, v, u = self.compute_challenges(pf)\n"
"        proof = pf.flatten()\n"
"\n"
"        # 5. Compute zero polynomial evaluation Z_H(ζ) = ζ^n - 1\n"
"        ZH_ev = zeta**group_order - 1\n"
"\n"
"        # 6. Compute Lagrange polynomial evaluation L_0(ζ)\n"
"        L0_ev = ZH_ev / (group_order * (zeta - 1))\n"
"\n"
"        # 7. Compute public input polynomial evaluation PI(ζ).\n"
"        PI = Polynomial(\n"
"            [Scalar(-x) for x in public]\n"
"            + [Scalar(0) for _ in range(group_order - len(public))],\n"
"            Basis.LAGRANGE,\n"
"        )\n"
"        PI_ev = PI.barycentric_eval(zeta)\n"
"\n"
"        # verify KZG10 commitment\n"
"        self.verify_commitment(proof, proof[\"W_a\"], \"W_a_quot\", "
"\"a_eval\", zeta)\n"
"        self.verify_commitment(proof, proof[\"W_b\"], \"W_b_quot\", "
"\"b_eval\", zeta)\n"
"        self.verify_commitment(proof, proof[\"W_c\"], \"W_c_quot\", "
"\"c_eval\", zeta)\n"
"        self.verify_commitment(proof, proof[\"W_z\"], \"W_z_quot\", "
"\"z_eval\", zeta)\n"
"        self.verify_commitment(proof, proof[\"W_zw\"], \"W_zw_quot\", "
"\"zw_eval\", zeta)\n"
"        self.verify_commitment(proof, proof[\"W_t\"], \"W_t_quot\", "
"\"t_eval\", zeta)\n"
"        self.verify_commitment(proof, self.Ql, \"W_ql_quot\", \"ql_eval\", "
"zeta)\n"
"        self.verify_commitment(proof, self.Qr, \"W_qr_quot\", \"qr_eval\", "
"zeta)\n"
"        self.verify_commitment(proof, self.Qm, \"W_qm_quot\", \"qm_eval\", "
"zeta)\n"
"        self.verify_commitment(proof, self.Qo, \"W_qo_quot\", \"qo_eval\", "
"zeta)\n"
"        self.verify_commitment(proof, self.Qc, \"W_qc_quot\", \"qc_eval\", "
"zeta)\n"
"        self.verify_commitment(proof, self.S1, \"W_s1_quot\", \"s1_eval\", "
"zeta)\n"
"        self.verify_commitment(proof, self.S2, \"W_s2_quot\", \"s2_eval\", "
"zeta)\n"
"        self.verify_commitment(proof, self.S3, \"W_s3_quot\", \"s3_eval\", "
"zeta)\n"
"\n"
"        a_eval = proof[\"a_eval\"]\n"
"        b_eval = proof[\"b_eval\"]\n"
"        c_eval = proof[\"c_eval\"]\n"
"        ql_eval = proof[\"ql_eval\"]\n"
"        qr_eval = proof[\"qr_eval\"]\n"
"        qm_eval = proof[\"qm_eval\"]\n"
"        qo_eval = proof[\"qo_eval\"]\n"
"        qc_eval = proof[\"qc_eval\"]\n"
"        s1_eval = proof[\"s1_eval\"]\n"
"        s2_eval = proof[\"s2_eval\"]\n"
"        s3_eval = proof[\"s3_eval\"]\n"
"        z_eval = proof[\"z_eval\"]\n"
"        zw_eval = proof[\"zw_eval\"]\n"
"        t_eval = proof[\"t_eval\"]\n"
"\n"
"        f_eval = (\n"
"            (a_eval + beta * zeta + gamma)\n"
"            * (b_eval + beta * zeta * 2 + gamma)\n"
"            * (c_eval + beta * zeta * 3 + gamma)\n"
"        )\n"
"        g_eval = (\n"
"            (a_eval + beta * s1_eval + gamma)\n"
"            * (b_eval + beta * s2_eval + gamma)\n"
"            * (c_eval + beta * s3_eval + gamma)\n"
"        )\n"
"\n"
"        gate_constraints_eval = (\n"
"            ql_eval * a_eval\n"
"            + qr_eval * b_eval\n"
"            + qm_eval * a_eval * b_eval\n"
"            + qo_eval * c_eval\n"
"            + qc_eval\n"
"            + PI_ev\n"
"        )\n"
"\n"
"        permutation_grand_product_eval = z_eval * f_eval - zw_eval * g_eval\n"
"\n"
"        permutation_first_row_eval = L0_ev * (z_eval - 1)\n"
"\n"
"        left = (\n"
"            gate_constraints_eval\n"
"            + alpha * permutation_grand_product_eval\n"
"            +  alpha ** 2 * permutation_first_row_eval\n"
"        )\n"
"\n"
"        right = t_eval * ZH_ev\n"
"\n"
"        assert left == right\n"
"\n"
"        print(\"Done equation check for all constraints\")\n"
"        return True\n"
"\n"
"    # Compute challenges (should be same as those computed by prover)\n"
"    def compute_challenges(\n"
"        self, proof\n"
"    ) -> tuple[Scalar, Scalar, Scalar, Scalar, Scalar, Scalar]:\n"
"        transcript = Transcript(b\"plonk\")\n"
"        beta, gamma = transcript.round_1(proof.msg_1)\n"
"        alpha, _fft_cofactor = transcript.round_2(proof.msg_2)\n"
"        zeta = transcript.round_3(proof.msg_3)\n"
"        v = transcript.round_4(proof.msg_4)\n"
"        u = transcript.round_5(proof.msg_5)\n"
"\n"
"        return beta, gamma, alpha, zeta, v, u\n"
"\n"
"    def verify_commitment(self, proof, W, W_quot_key, eval_key, zeta):\n"
"        W_quot = proof[W_quot_key]\n"
"        eval = proof[eval_key]\n"
"        ec_comb = ec_lincomb(\n"
"            [\n"
"                (W, 1),\n"
"                (W_quot, zeta),\n"
"                (b.G1, -eval),\n"
"            ]\n"
"        )\n"
"\n"
"        assert b.pairing(self.X_2, W_quot) == b.pairing(b.G2, ec_comb)\n"
"        print(f\"Done KZG10 commitment check for {eval_key} polynomial\")\n"
"\n"
"```"
msgstr ""
"```python=\n"
"    def verify_proof(self, group_order: int, pf, public=[]) -> bool:\n"
"        # 4. Compute challenges\n"
"        beta, gamma, alpha, zeta, v, u = self.compute_challenges(pf)\n"
"        proof = pf.flatten()\n"
"\n"
"        # 5. Compute zero polynomial evaluation Z_H(ζ) = ζ^n - 1\n"
"        ZH_ev = zeta**group_order - 1\n"
"\n"
"        # 6. Compute Lagrange polynomial evaluation L_0(ζ)\n"
"        L0_ev = ZH_ev / (group_order * (zeta - 1))\n"
"\n"
"        # 7. Compute public input polynomial evaluation PI(ζ).\n"
"        PI = Polynomial(\n"
"            [Scalar(-x) for x in public]\n"
"            + [Scalar(0) for _ in range(group_order - len(public))],\n"
"            Basis.LAGRANGE,\n"
"        )\n"
"        PI_ev = PI.barycentric_eval(zeta)\n"
"\n"
"        # verify KZG10 commitment\n"
"        self.verify_commitment(proof, proof[\"W_a\"], \"W_a_quot\", "
"\"a_eval\", zeta)\n"
"        self.verify_commitment(proof, proof[\"W_b\"], \"W_b_quot\", "
"\"b_eval\", zeta)\n"
"        self.verify_commitment(proof, proof[\"W_c\"], \"W_c_quot\", "
"\"c_eval\", zeta)\n"
"        self.verify_commitment(proof, proof[\"W_z\"], \"W_z_quot\", "
"\"z_eval\", zeta)\n"
"        self.verify_commitment(proof, proof[\"W_zw\"], \"W_zw_quot\", "
"\"zw_eval\", zeta)\n"
"        self.verify_commitment(proof, proof[\"W_t\"], \"W_t_quot\", "
"\"t_eval\", zeta)\n"
"        self.verify_commitment(proof, self.Ql, \"W_ql_quot\", \"ql_eval\", "
"zeta)\n"
"        self.verify_commitment(proof, self.Qr, \"W_qr_quot\", \"qr_eval\", "
"zeta)\n"
"        self.verify_commitment(proof, self.Qm, \"W_qm_quot\", \"qm_eval\", "
"zeta)\n"
"        self.verify_commitment(proof, self.Qo, \"W_qo_quot\", \"qo_eval\", "
"zeta)\n"
"        self.verify_commitment(proof, self.Qc, \"W_qc_quot\", \"qc_eval\", "
"zeta)\n"
"        self.verify_commitment(proof, self.S1, \"W_s1_quot\", \"s1_eval\", "
"zeta)\n"
"        self.verify_commitment(proof, self.S2, \"W_s2_quot\", \"s2_eval\", "
"zeta)\n"
"        self.verify_commitment(proof, self.S3, \"W_s3_quot\", \"s3_eval\", "
"zeta)\n"
"\n"
"        a_eval = proof[\"a_eval\"]\n"
"        b_eval = proof[\"b_eval\"]\n"
"        c_eval = proof[\"c_eval\"]\n"
"        ql_eval = proof[\"ql_eval\"]\n"
"        qr_eval = proof[\"qr_eval\"]\n"
"        qm_eval = proof[\"qm_eval\"]\n"
"        qo_eval = proof[\"qo_eval\"]\n"
"        qc_eval = proof[\"qc_eval\"]\n"
"        s1_eval = proof[\"s1_eval\"]\n"
"        s2_eval = proof[\"s2_eval\"]\n"
"        s3_eval = proof[\"s3_eval\"]\n"
"        z_eval = proof[\"z_eval\"]\n"
"        zw_eval = proof[\"zw_eval\"]\n"
"        t_eval = proof[\"t_eval\"]\n"
"\n"
"        f_eval = (\n"
"            (a_eval + beta * zeta + gamma)\n"
"            * (b_eval + beta * zeta * 2 + gamma)\n"
"            * (c_eval + beta * zeta * 3 + gamma)\n"
"        )\n"
"        g_eval = (\n"
"            (a_eval + beta * s1_eval + gamma)\n"
"            * (b_eval + beta * s2_eval + gamma)\n"
"            * (c_eval + beta * s3_eval + gamma)\n"
"        )\n"
"\n"
"        gate_constraints_eval = (\n"
"            ql_eval * a_eval\n"
"            + qr_eval * b_eval\n"
"            + qm_eval * a_eval * b_eval\n"
"            + qo_eval * c_eval\n"
"            + qc_eval\n"
"            + PI_ev\n"
"        )\n"
"\n"
"        permutation_grand_product_eval = z_eval * f_eval - zw_eval * g_eval\n"
"\n"
"        permutation_first_row_eval = L0_ev * (z_eval - 1)\n"
"\n"
"        left = (\n"
"            gate_constraints_eval\n"
"            + alpha * permutation_grand_product_eval\n"
"            +  alpha ** 2 * permutation_first_row_eval\n"
"        )\n"
"\n"
"        right = t_eval * ZH_ev\n"
"\n"
"        assert left == right\n"
"\n"
"        print(\"Done equation check for all constraints\")\n"
"        return True\n"
"\n"
"    # Compute challenges (should be same as those computed by prover)\n"
"    def compute_challenges(\n"
"        self, proof\n"
"    ) -> tuple[Scalar, Scalar, Scalar, Scalar, Scalar, Scalar]:\n"
"        transcript = Transcript(b\"plonk\")\n"
"        beta, gamma = transcript.round_1(proof.msg_1)\n"
"        alpha, _fft_cofactor = transcript.round_2(proof.msg_2)\n"
"        zeta = transcript.round_3(proof.msg_3)\n"
"        v = transcript.round_4(proof.msg_4)\n"
"        u = transcript.round_5(proof.msg_5)\n"
"\n"
"        return beta, gamma, alpha, zeta, v, u\n"
"\n"
"    def verify_commitment(self, proof, W, W_quot_key, eval_key, zeta):\n"
"        W_quot = proof[W_quot_key]\n"
"        eval = proof[eval_key]\n"
"        ec_comb = ec_lincomb(\n"
"            [\n"
"                (W, 1),\n"
"                (W_quot, zeta),\n"
"                (b.G1, -eval),\n"
"            ]\n"
"        )\n"
"\n"
"        assert b.pairing(self.X_2, W_quot) == b.pairing(b.G2, ec_comb)\n"
"        print(f\"Done KZG10 commitment check for {eval_key} polynomial\")\n"
"\n"
"```"

#: src/public goods/5-plonk-intro.md:773
msgid "最后"
msgstr "最后"

#: src/public goods/5-plonk-intro.md:774
msgid ""
"以上就是 Plonk 协议的代码讲解，接下来建议读者亲自运行一下[这个代码](https://"
"github.com/Antalpha-Labs/baby-plonk)，打印其中一些值看看，这样会对协议的了解"
"更加深刻。"
msgstr ""
"以上就是 Plonk 协议的代码讲解，接下来建议读者亲自运行一下[这个代码](https://"
"github.com/Antalpha-Labs/baby-plonk)，打印其中一些值看看，这样会对协议的了解"
"更加深刻。"

#: src/materials/ZK-Materials.md:3
msgid "Last update: 2023-09-24 [^1]"
msgstr "Last update: 2023-09-24 [^1]"

#: src/materials/ZK-Materials.md:5
msgid ""
"📢 Feel free to contribute!  Pls fork [zkp-co-learning.github.io](https://"
"github.com/zkp-co-learning/zkp-co-learning.github.io) and PR! "
msgstr ""
"📢 Feel free to contribute!  Pls fork [zkp-co-learning.github.io](https://"
"github.com/zkp-co-learning/zkp-co-learning.github.io) and PR! "

#: src/materials/ZK-Materials.md:7
msgid ""
"PS: In each title's Content Block, the top part is newer, below is older."
msgstr ""
"PS: In each title's Content Block, the top part is newer, below is older."

#: src/materials/ZK-Materials.md:10
msgid "[Nova / Folding schemas](#nova--folding-schemas)"
msgstr "[Nova / Folding schemas](#nova--folding-schemas)"

#: src/materials/ZK-Materials.md:12
msgid "[STARK](#stark)"
msgstr "[STARK](#stark)"

#: src/materials/ZK-Materials.md:13
msgid "[ZKML](#zkml)"
msgstr "[ZKML](#zkml)"

#: src/materials/ZK-Materials.md:14
msgid "[zkVM](#zkvm)"
msgstr "[zkVM](#zkvm)"

#: src/materials/ZK-Materials.md:15
msgid "[ZK Applications](#zk-applications)"
msgstr "[ZK Applications](#zk-applications)"

#: src/materials/ZK-Materials.md:16
msgid "[Cryptography](#cryptography)"
msgstr "[Cryptography](#cryptography)"

#: src/materials/ZK-Materials.md:17
msgid "[ZKP Materials](#zkp-materials)"
msgstr "[ZKP Materials](#zkp-materials)"

#: src/materials/ZK-Materials.md:18
msgid "[zkWASM](#zkwasm)"
msgstr "[zkWASM](#zkwasm)"

#: src/materials/ZK-Materials.md:19
msgid "[Basics Tutorials](#basics-tutorials)"
msgstr "[Basics Tutorials](#basics-tutorials)"

#: src/materials/ZK-Materials.md:20
msgid "[PSE](#pse)"
msgstr "[PSE](#pse)"

#: src/materials/ZK-Materials.md:21
msgid "[books & websites & Podcasts 🎙📚](#books--websites--podcasts-)"
msgstr "[books & websites & Podcasts 🎙📚](#books--websites--podcasts-)"

#: src/materials/ZK-Materials.md:22
msgid "[Rust](#rust)"
msgstr "[Rust](#rust)"

#: src/materials/ZK-Materials.md:23
msgid "[Awesome ZKP](#awesome-zkp)"
msgstr "[Awesome ZKP](#awesome-zkp)"

#: src/materials/ZK-Materials.md:24
msgid "[Quantum](#quantum)"
msgstr "[Quantum](#quantum)"

#: src/materials/ZK-Materials.md:25
msgid "[Curves](#curves)"
msgstr "[Curves](#curves)"

#: src/materials/ZK-Materials.md:26
msgid "[Lattice](#lattice)"
msgstr "[Lattice](#lattice)"

#: src/materials/ZK-Materials.md:27
msgid "[Others (can't archive)](#others-cant-archive)"
msgstr "[Others (can't archive)](#others-cant-archive)"

#: src/materials/ZK-Materials.md:28
msgid "[Tricks & Tools](#tricks--tools)"
msgstr "[Tricks & Tools](#tricks--tools)"

#: src/materials/ZK-Materials.md:29
msgid "[QA](#qa)"
msgstr "[QA](#qa)"

#: src/materials/ZK-Materials.md:30
msgid "[Twitter Sapce & info flow](#twitter-sapce--info-flow)"
msgstr "[Twitter Sapce & info flow](#twitter-sapce--info-flow)"

#: src/materials/ZK-Materials.md:31
msgid "[Interdisciplinarity](#interdisciplinarity)"
msgstr "[Interdisciplinarity](#interdisciplinarity)"

#: src/materials/ZK-Materials.md:33
msgid "Nova / Folding schemas"
msgstr "Nova / Folding schemas"

#: src/materials/ZK-Materials.md:35
msgid "nova 写的五子棋: https://www.zkconnect4.dev/"
msgstr "nova 写的五子棋: https://www.zkconnect4.dev/"

#: src/materials/ZK-Materials.md:37
msgid "Nova 项目: https://github.com/microsoft/Nova/network/dependents"
msgstr "Nova 项目: https://github.com/microsoft/Nova/network/dependents"

#: src/materials/ZK-Materials.md:39
msgid ""
"A Brief History of Folding Schemes https://arc.net/e/2831196C-9575-47A6-966E-"
"B34DB840168E "
msgstr ""
"A Brief History of Folding Schemes https://arc.net/e/2831196C-9575-47A6-966E-"
"B34DB840168E "

#: src/materials/ZK-Materials.md:40
msgid "Bootleproof-type IPA是「folding 前史」的一章"
msgstr "Bootleproof-type IPA是「folding 前史」的一章"

#: src/materials/ZK-Materials.md:42
msgid "https://nova-browser-ecdsa-web.vercel.app/"
msgstr "https://nova-browser-ecdsa-web.vercel.app/"

#: src/materials/ZK-Materials.md:44
msgid ""
"Folding with ProtoGalaxy - Liam Eagen https://www.youtube.com/watch?"
"v=SpkTvRia1EA"
msgstr ""
"Folding with ProtoGalaxy - Liam Eagen https://www.youtube.com/watch?"
"v=SpkTvRia1EA"

#: src/materials/ZK-Materials.md:46 src/materials/ZK-Materials.md:57
msgid ""
"[Nova: A New Chapter in Zero-Knowledge Proofs](https://huobi-ventures.medium."
"com/nova-a-new-chapter-in-zero-knowledge-proofs-108110cd816e)  (medium这糟糕"
"的排版)"
msgstr ""
"[Nova: A New Chapter in Zero-Knowledge Proofs](https://huobi-ventures.medium."
"com/nova-a-new-chapter-in-zero-knowledge-proofs-108110cd816e)  (medium这糟糕"
"的排版)"

#: src/materials/ZK-Materials.md:48
msgid ""
"Benchmark on recursion Plonky vs Nova https://github.com/nikkolasg/recursive-"
"bench"
msgstr ""
"Benchmark on recursion Plonky vs Nova https://github.com/nikkolasg/recursive-"
"bench"

#: src/materials/ZK-Materials.md:50
msgid "白菜: 有对NOVA-ML 感兴趣的不，这个课题可能比较大，可以考虑组个支队了 😂"
msgstr ""
"白菜: 有对NOVA-ML 感兴趣的不，这个课题可能比较大，可以考虑组个支队了 😂"

#: src/materials/ZK-Materials.md:51 src/materials/ZK-Materials.md:178
msgid "https://github.com/socathie/nova-ml"
msgstr "https://github.com/socathie/nova-ml"

#: src/materials/ZK-Materials.md:52
msgid "awesome-zkml : https://github.com/worldcoin/awesome-zkml"
msgstr "awesome-zkml : https://github.com/worldcoin/awesome-zkml"

#: src/materials/ZK-Materials.md:53
msgid ""
"Team Novi (Nova):  https://0xparc.notion.site/Team-"
"Novi-2d81bc06b0aa4c99b61a9ee06166b3b6"
msgstr ""
"Team Novi (Nova):  https://0xparc.notion.site/Team-"
"Novi-2d81bc06b0aa4c99b61a9ee06166b3b6"

#: src/materials/ZK-Materials.md:54 src/materials/ZK-Materials.md:428
msgid "risc0-nova"
msgstr "risc0-nova"

#: src/materials/ZK-Materials.md:55 src/materials/ZK-Materials.md:429
msgid "https://github.com/hero78119/risc0-nova"
msgstr "https://github.com/hero78119/risc0-nova"

#: src/materials/ZK-Materials.md:56
msgid ""
"[Parallelizing Nova](https://hackmd.io/@9MPvD9czTQS18zEjAERVAg/Hy-vKK04h)"
msgstr ""
"[Parallelizing Nova](https://hackmd.io/@9MPvD9czTQS18zEjAERVAg/Hy-vKK04h)"

#: src/materials/ZK-Materials.md:62
msgid ""
"https://github.com/axiom-crypto/halo2-wasm https://github.com/zkCert/halo2-"
"zkcert"
msgstr ""
"https://github.com/axiom-crypto/halo2-wasm https://github.com/zkCert/halo2-"
"zkcert"

#: src/materials/ZK-Materials.md:65
msgid ""
"[0xPARC Course Recordings, Slides, and Notes](https://0xparc.notion.site/"
"Course-Recordings-Slides-and-"
"Notes-90d0ddb5f9ee49f7a244dbbe60d563ff#549d7b6081e1412a96ac8951dddf9e75)"
msgstr ""
"[0xPARC Course Recordings, Slides, and Notes](https://0xparc.notion.site/"
"Course-Recordings-Slides-and-"
"Notes-90d0ddb5f9ee49f7a244dbbe60d563ff#549d7b6081e1412a96ac8951dddf9e75)"

#: src/materials/ZK-Materials.md:67
msgid "Taiko: https://github.com/taikoxyz/circuit-tools/tree/main"
msgstr "Taiko: https://github.com/taikoxyz/circuit-tools/tree/main"

#: src/materials/ZK-Materials.md:68
msgid ""
"我们从 PSE 的 zkevm 里抽象出了一个 sdk，大家如果想用 halo2 开发可以试下 "
"\\[Grin\\] 欢迎给我提issue"
msgstr ""
"我们从 PSE 的 zkevm 里抽象出了一个 sdk，大家如果想用 halo2 开发可以试下 "
"\\[Grin\\] 欢迎给我提issue"

#: src/materials/ZK-Materials.md:70
msgid ""
"solidity verifier: https://github.com/privacy-scaling-explorations/halo2-"
"solidity-verifier/pulls"
msgstr ""
"solidity verifier: https://github.com/privacy-scaling-explorations/halo2-"
"solidity-verifier/pulls"

#: src/materials/ZK-Materials.md:72
msgid "halo2 tinyram  https://github.com/Orbis-Tertius/tiny-ram-halo2"
msgstr "halo2 tinyram  https://github.com/Orbis-Tertius/tiny-ram-halo2"

#: src/materials/ZK-Materials.md:74
msgid ""
"Poseidon: https://github.com/zcash/halo2/blob/main/halo2_gadgets/src/"
"poseidon/pow5.rs"
msgstr ""
"Poseidon: https://github.com/zcash/halo2/blob/main/halo2_gadgets/src/"
"poseidon/pow5.rs"

#: src/materials/ZK-Materials.md:75
msgid ""
"proof of validator: https://github.com/asn-d6/halo2-merkle-tree-ipa-bench"
msgstr ""
"proof of validator: https://github.com/asn-d6/halo2-merkle-tree-ipa-bench"

#: src/materials/ZK-Materials.md:76
msgid "social recovery: https://hackmd.io/@Nerolation/H1BvRWg02"
msgstr "social recovery: https://hackmd.io/@Nerolation/H1BvRWg02"

#: src/materials/ZK-Materials.md:78
msgid "有人建议： halo2 最好的应该是 axiom 的 open source program"
msgstr "有人建议： halo2 最好的应该是 axiom 的 open source program"

#: src/materials/ZK-Materials.md:96
msgid "STARK"
msgstr "STARK"

#: src/materials/ZK-Materials.md:98
msgid ""
"深入探索STARK的安全性和可靠性——STARKs全面安全分析 https://blog.csdn.net/"
"mutourend/article/details/133821797"
msgstr ""
"深入探索STARK的安全性和可靠性——STARKs全面安全分析 https://blog.csdn.net/"
"mutourend/article/details/133821797"

#: src/materials/ZK-Materials.md:100
msgid ""
"[A Walk-Through of a Simple zk-STARK Proof](imgs/A%20Walk-"
"Through%20of%20a%20Simple%20zk-STARK%20Proof.pdf)"
msgstr ""
"[A Walk-Through of a Simple zk-STARK Proof](imgs/A%20Walk-"
"Through%20of%20a%20Simple%20zk-STARK%20Proof.pdf)"

#: src/materials/ZK-Materials.md:102
msgid ""
"Boojum：zkSync的高性能去中心化STARK证明系统 https://blog.csdn.net/mutourend/"
"article/details/131770996"
msgstr ""
"Boojum：zkSync的高性能去中心化STARK证明系统 https://blog.csdn.net/mutourend/"
"article/details/131770996"

#: src/materials/ZK-Materials.md:104
msgid "一个非常简洁的stark介绍，比vitalik版本更加适合初学者:"
msgstr "一个非常简洁的stark介绍，比vitalik版本更加适合初学者:"

#: src/materials/ZK-Materials.md:105
msgid ""
"Zero Knowledge Virtual Machine step by step https://eprint.iacr."
"org/2023/1032.pdf"
msgstr ""
"Zero Knowledge Virtual Machine step by step https://eprint.iacr."
"org/2023/1032.pdf"

#: src/materials/ZK-Materials.md:107 src/materials/ZK-Materials.md:127
#: src/materials/ZK-Materials.md:207
msgid ""
"https://github.com/aszepieniec/stark-brainfuck/blob/master/docs/engine.md"
msgstr ""
"https://github.com/aszepieniec/stark-brainfuck/blob/master/docs/engine.md"

#: src/materials/ZK-Materials.md:108 src/materials/ZK-Materials.md:128
#: src/materials/ZK-Materials.md:208
msgid "老外写个一个简单版本的zkvm，不过是基于stark的"
msgstr "老外写个一个简单版本的zkvm，不过是基于stark的"

#: src/materials/ZK-Materials.md:109 src/materials/ZK-Materials.md:129
#: src/materials/ZK-Materials.md:209
msgid "并且也配有文档，适合研究基于stark zkvm的原理理解。"
msgstr "并且也配有文档，适合研究基于stark zkvm的原理理解。"

#: src/materials/ZK-Materials.md:111
msgid "@0xhhh: 总结了下 Stark的一些资料，很多来自于@Kurt Pan ，感谢潘老师: "
msgstr "@0xhhh: 总结了下 Stark的一些资料，很多来自于@Kurt Pan ，感谢潘老师: "

#: src/materials/ZK-Materials.md:112
msgid ""
"https://www.notion.so/Stark-Cannon-0801f24ea9e543449e015bf4063bb71d?pvs=4"
msgstr ""
"https://www.notion.so/Stark-Cannon-0801f24ea9e543449e015bf4063bb71d?pvs=4"

#: src/materials/ZK-Materials.md:113
msgid ""
"https://literate-wolfsbane-bf0.notion.site/Stark-"
"Cannon-0801f24ea9e543449e015bf4063bb71d?pvs=4"
msgstr ""
"https://literate-wolfsbane-bf0.notion.site/Stark-"
"Cannon-0801f24ea9e543449e015bf4063bb71d?pvs=4"

#: src/materials/ZK-Materials.md:115
msgid ""
"Kurt Pan :  https://github.com/erhant/zkbrainfuck A Brainfuck zkVM with "
"Circom."
msgstr ""
"Kurt Pan :  https://github.com/erhant/zkbrainfuck A Brainfuck zkVM with "
"Circom."

#: src/materials/ZK-Materials.md:118
msgid "https://starkware.co/stark-101/ @Frank Jz Liu 推荐，亲测很不错"
msgstr "https://starkware.co/stark-101/ @Frank Jz Liu 推荐，亲测很不错"

#: src/materials/ZK-Materials.md:120
msgid ""
"再推荐这几个，你可以去整理一下： https://aszepieniec.github.io/stark-"
"anatomy/ https://aszepieniec.github.io/stark-brainfuck/ https://github.com/"
"facebook/winterfell https://github.com/lambdaclass https://github.com/"
"andrewmilson/ministark/"
msgstr ""
"再推荐这几个，你可以去整理一下： https://aszepieniec.github.io/stark-"
"anatomy/ https://aszepieniec.github.io/stark-brainfuck/ https://github.com/"
"facebook/winterfell https://github.com/lambdaclass https://github.com/"
"andrewmilson/ministark/"

#: src/materials/ZK-Materials.md:131
msgid "实现一个 Baby Snark"
msgstr "实现一个 Baby Snark"

#: src/materials/ZK-Materials.md:132
msgid ""
"可以参考 https://github.com/initc3/babySNARK 。可以看到Andrew Miller，Ye "
"Zhang这些大佬几年前也是这么一步步成长起来的"
msgstr ""
"可以参考 https://github.com/initc3/babySNARK 。可以看到Andrew Miller，Ye "
"Zhang这些大佬几年前也是这么一步步成长起来的"

#: src/materials/ZK-Materials.md:137
msgid "@Maxlion🦁 提供："
msgstr "@Maxlion🦁 提供："

#: src/materials/ZK-Materials.md:139
msgid ""
"Cairo 环境配置➕ERC 实现（Cairo1） https://starknetastro.xlog.app/"
"Starknet_Shanghai_Workshop_DAY1"
msgstr ""
"Cairo 环境配置➕ERC 实现（Cairo1） https://starknetastro.xlog.app/"
"Starknet_Shanghai_Workshop_DAY1"

#: src/materials/ZK-Materials.md:142
msgid "Cairo 语言中文文档 https://book.cairo-lang.org/zh-cn/index.html"
msgstr "Cairo 语言中文文档 https://book.cairo-lang.org/zh-cn/index.html"

#: src/materials/ZK-Materials.md:145
msgid ""
"开发工具版本号推荐 湘_Xiang 版本 https://w3hitchhiker.notion.site/Starknet-"
"cc07119ed57648faa92f7630219225b3?pvs=4 鸦_Cryptonerdcn 版本 https://docs."
"google.com/document/d/1ehBfE2CBeVL9rDhSc_JiUtxZJKWVKl8A6o1f1Ee0X4M/"
"mobilebasic"
msgstr ""
"开发工具版本号推荐 湘_Xiang 版本 https://w3hitchhiker.notion.site/Starknet-"
"cc07119ed57648faa92f7630219225b3?pvs=4 鸦_Cryptonerdcn 版本 https://docs."
"google.com/document/d/1ehBfE2CBeVL9rDhSc_JiUtxZJKWVKl8A6o1f1Ee0X4M/"
"mobilebasic"

#: src/materials/ZK-Materials.md:151
msgid ""
"\\[Cairo合约示例\\] Nethermind 版 https://starknet-by-example.voyager."
"online/ LambdaClass 版 https://cairo-by-example.com/ OpenZeppelin 版 https://"
"github.com/OpenZeppelin/cairo-contracts/tree/cairo-2"
msgstr ""
"\\[Cairo合约示例\\] Nethermind 版 https://starknet-by-example.voyager."
"online/ LambdaClass 版 https://cairo-by-example.com/ OpenZeppelin 版 https://"
"github.com/OpenZeppelin/cairo-contracts/tree/cairo-2"

#: src/materials/ZK-Materials.md:159
msgid "Starknet 文档 https://book.starknet.io/"
msgstr "Starknet 文档 https://book.starknet.io/"

#: src/materials/ZK-Materials.md:162
msgid ""
"Starknet 基金会给 Astro 社区开发者的答疑文档 https://docs.google.com/"
"document/d/1ku_y4M9PUe_GcwiBlvq6Kz2LkagyXD2Za1XCZj-IHVo/mobilebasic"
msgstr ""
"Starknet 基金会给 Astro 社区开发者的答疑文档 https://docs.google.com/"
"document/d/1ku_y4M9PUe_GcwiBlvq6Kz2LkagyXD2Za1XCZj-IHVo/mobilebasic"

#: src/materials/ZK-Materials.md:165
msgid "Starknet 中文知识库(生态向) https://starknet-astro.super.site/"
msgstr "Starknet 中文知识库(生态向) https://starknet-astro.super.site/"

#: src/materials/ZK-Materials.md:169
msgid "ZKML"
msgstr "ZKML"

#: src/materials/ZK-Materials.md:171
msgid ""
"[Zator: Verified inference of a 512-layer neural network using recursive "
"SNARKs](https://github.com/lyronctk/zator)v"
msgstr ""
"[Zator: Verified inference of a 512-layer neural network using recursive "
"SNARKs](https://github.com/lyronctk/zator)v"

#: src/materials/ZK-Materials.md:173
msgid ""
"TensorPlonk: A “GPU” for ZKML, Delivering 1,000x Speedups https://medium.com/"
"@danieldkang/tensorplonk-a-gpu-for-zkml-delivering-1-000x-speedups-"
"d1ab0ad27e1c"
msgstr ""
"TensorPlonk: A “GPU” for ZKML, Delivering 1,000x Speedups https://medium.com/"
"@danieldkang/tensorplonk-a-gpu-for-zkml-delivering-1-000x-speedups-"
"d1ab0ad27e1c"

#: src/materials/ZK-Materials.md:176
msgid "https://github.com/worldcoin/awesome-zkml"
msgstr "https://github.com/worldcoin/awesome-zkml"

#: src/materials/ZK-Materials.md:177
msgid "https://github.com/socathie/circomlib-ml"
msgstr "https://github.com/socathie/circomlib-ml"

#: src/materials/ZK-Materials.md:179
msgid "https://github.com/lyronctk/zator"
msgstr "https://github.com/lyronctk/zator"

#: src/materials/ZK-Materials.md:181
msgid ""
"ZKML slides： https://www.canva.com/design/DAFi3o7FiR4/"
"d9LMeacr6QQwYy9C0BQHgA/view"
msgstr ""
"ZKML slides： https://www.canva.com/design/DAFi3o7FiR4/"
"d9LMeacr6QQwYy9C0BQHgA/view"

#: src/materials/ZK-Materials.md:183
msgid ""
"这篇 ZKML 文章很顶:  https://mirror.xyz/sevenxventures."
"eth/3USbrj7kcK7lyq_7upA4iyWV5pWMII7KrM40z5zpEXo"
msgstr ""
"这篇 ZKML 文章很顶:  https://mirror.xyz/sevenxventures."
"eth/3USbrj7kcK7lyq_7upA4iyWV5pWMII7KrM40z5zpEXo"

#: src/materials/ZK-Materials.md:186
msgid "zkVM"
msgstr "zkVM"

#: src/materials/ZK-Materials.md:188
msgid "https://github.com/vacp2p/zk-explorations"
msgstr "https://github.com/vacp2p/zk-explorations"

#: src/materials/ZK-Materials.md:189
msgid "对不同 lib 和 algo 实现的 VM 做的性能测试 benchmark"
msgstr "对不同 lib 和 algo 实现的 VM 做的性能测试 benchmark"

#: src/materials/ZK-Materials.md:191
msgid ""
"发现了asz有好多好东西啊，stark很好的学习资料 https://github.com/aszepieniec/"
"stark-anatomy"
msgstr ""
"发现了asz有好多好东西啊，stark很好的学习资料 https://github.com/aszepieniec/"
"stark-anatomy"

#: src/materials/ZK-Materials.md:193
msgid "下一期共学STARK+zkVM的资料"
msgstr "下一期共学STARK+zkVM的资料"

#: src/materials/ZK-Materials.md:195
msgid ""
"https://neptune.cash/ [STARK 算法解析（第 6 部分: 加速整个流程）](https://mp."
"weixin.qq.com/s/nBfL0MzqzOxGlSZgw6I85Q) https://asz.ink/alan-szepieniec/ he "
"is an advisor to Nervos Foundation. https://neptune.cash/ https://neptune."
"cash/learn/brainfuck-tutorial/"
msgstr ""
"https://neptune.cash/ [STARK 算法解析（第 6 部分: 加速整个流程）](https://mp."
"weixin.qq.com/s/nBfL0MzqzOxGlSZgw6I85Q) https://asz.ink/alan-szepieniec/ he "
"is an advisor to Nervos Foundation. https://neptune.cash/ https://neptune."
"cash/learn/brainfuck-tutorial/"

#: src/materials/ZK-Materials.md:201
msgid ""
"snarkVM: Aleo 已经把 Marlin 更新成 Varuna 了 [varuna](https://github.com/"
"AleoHQ/snarkVM/tree/testnet3/algorithms/src/snark/varuna)"
msgstr ""
"snarkVM: Aleo 已经把 Marlin 更新成 Varuna 了 [varuna](https://github.com/"
"AleoHQ/snarkVM/tree/testnet3/algorithms/src/snark/varuna)"

#: src/materials/ZK-Materials.md:203
msgid ""
"[徒手写 zkVM  - https://eprint.iacr.org/2023/1032.pdf](https://eprint.iacr."
"org/2023/1032.pdf)"
msgstr ""
"[徒手写 zkVM  - https://eprint.iacr.org/2023/1032.pdf](https://eprint.iacr."
"org/2023/1032.pdf)"

#: src/materials/ZK-Materials.md:204
msgid "ZERO KNOWLEDGE VIRTUAL MACHINE STEP BY STEP"
msgstr "ZERO KNOWLEDGE VIRTUAL MACHINE STEP BY STEP"

#: src/materials/ZK-Materials.md:205
msgid "稍微比较偏理论"
msgstr "稍微比较偏理论"

#: src/materials/ZK-Materials.md:211
msgid ""
"另外他去年一篇zkvm的概览，对理解zkvm的设计还是很棒的。 他是指 https://"
"aszepieniec.github.io/stark-brainfuck/ 的作者？"
msgstr ""
"另外他去年一篇zkvm的概览，对理解zkvm的设计还是很棒的。 他是指 https://"
"aszepieniec.github.io/stark-brainfuck/ 的作者？"

#: src/materials/ZK-Materials.md:213
msgid "基本的输入输出，内存等。我一直认为那个教程就是最好的zkvm入门的。"
msgstr "基本的输入输出，内存等。我一直认为那个教程就是最好的zkvm入门的。"

#: src/materials/ZK-Materials.md:215
msgid ""
"https://github.com/cryptape/ckb-bf-zkvm 秘猿 A BrainFuck zkVM implementation "
"on CKB, using Halo2. 一个只有几条指令的 vm 机器"
msgstr ""
"https://github.com/cryptape/ckb-bf-zkvm 秘猿 A BrainFuck zkVM implementation "
"on CKB, using Halo2. 一个只有几条指令的 vm 机器"

#: src/materials/ZK-Materials.md:220
msgid ""
"snarkVM有啊，Aleo家的就是 https://github.com/AleoHQ/snarkVM。没记错底层proof "
"sys用的Marlin。"
msgstr ""
"snarkVM有啊，Aleo家的就是 https://github.com/AleoHQ/snarkVM。没记错底层proof "
"sys用的Marlin。"

#: src/materials/ZK-Materials.md:221
msgid ""
"可能program execution是面向冯诺伊曼架构RAM模型，而AIR相比于电路抽象层次更高，"
"设计STARK VM更直接，所以大多数项目会这么选吧。"
msgstr ""
"可能program execution是面向冯诺伊曼架构RAM模型，而AIR相比于电路抽象层次更高，"
"设计STARK VM更直接，所以大多数项目会这么选吧。"

#: src/materials/ZK-Materials.md:222
msgid ""
"不过zkEVM都用SNARK堆出来了，同样的工程师去堆一个自定义ISA的VM对他们来说应该是"
"个simpler task吧"
msgstr ""
"不过zkEVM都用SNARK堆出来了，同样的工程师去堆一个自定义ISA的VM对他们来说应该是"
"个simpler task吧"

#: src/materials/ZK-Materials.md:224
msgid "Nova VM 来了, 看不过来了。。。。"
msgstr "Nova VM 来了, 看不过来了。。。。"

#: src/materials/ZK-Materials.md:225
msgid ""
"[Towards a Nova-based ZK VM](https://zkresear.ch/t/towards-a-nova-based-zk-"
"vm/105)"
msgstr ""
"[Towards a Nova-based ZK VM](https://zkresear.ch/t/towards-a-nova-based-zk-"
"vm/105)"

#: src/materials/ZK-Materials.md:228
msgid "我在找一个write a vm from scratch的课程"
msgstr "我在找一个write a vm from scratch的课程"

#: src/materials/ZK-Materials.md:229
msgid ""
"要是只是vm不要求zkvm那就太多了，比如5天前的这篇 https://andreabergia.com/"
"blog/2023/07/i-have-written-a-jvm-in-rust/"
msgstr ""
"要是只是vm不要求zkvm那就太多了，比如5天前的这篇 https://andreabergia.com/"
"blog/2023/07/i-have-written-a-jvm-in-rust/"

#: src/materials/ZK-Materials.md:231
msgid ""
"![](imgs/ZK-Materials_image_1.jpg) 上周测试了一下 PSE evm circuit，生成的 "
"raw proof 用 evm 验证需要大约 4000万+ gas。（本地调高了 block gas limit） 也"
"测试了 scroll-prover 的 chunk proof，evm 验证大概需要 40万+ gas。感觉 gas "
"fee 这块至少有 100 倍的以上的提升"
msgstr ""
"![](imgs/ZK-Materials_image_1.jpg) 上周测试了一下 PSE evm circuit，生成的 "
"raw proof 用 evm 验证需要大约 4000万+ gas。（本地调高了 block gas limit） 也"
"测试了 scroll-prover 的 chunk proof，evm 验证大概需要 40万+ gas。感觉 gas "
"fee 这块至少有 100 倍的以上的提升"

#: src/materials/ZK-Materials.md:235
msgid "chunk proof 里面包涵了 2次压缩，还是做了不少的工作"
msgstr "chunk proof 里面包涵了 2次压缩，还是做了不少的工作"

#: src/materials/ZK-Materials.md:237
msgid "![](imgs/ZK-Materials_image_2.jpg)"
msgstr "![](imgs/ZK-Materials_image_2.jpg)"

#: src/materials/ZK-Materials.md:239
msgid "不太确定上面的代码是不是具体的电路，看了下感觉没多少行。\\[Facepalm\\]"
msgstr "不太确定上面的代码是不是具体的电路，看了下感觉没多少行。\\[Facepalm\\]"

#: src/materials/ZK-Materials.md:241
msgid ""
"zkevm super circuit 的 column 太多了，应该超过了 1000 个。 chunk 和 "
"aggregation 的 column 少了很多，但是应该像 Frank 所说，电路 “平铺”在聚合电路"
"里。不知道他们怎么优化到 40万 gas 的，这个水平已经和 circom 差不多了"
msgstr ""
"zkevm super circuit 的 column 太多了，应该超过了 1000 个。 chunk 和 "
"aggregation 的 column 少了很多，但是应该像 Frank 所说，电路 “平铺”在聚合电路"
"里。不知道他们怎么优化到 40万 gas 的，这个水平已经和 circom 差不多了"

#: src/materials/ZK-Materials.md:246
msgid "ZK Applications"
msgstr "ZK Applications"

#: src/materials/ZK-Materials.md:248
msgid "最近有进展，确实值得研究：ZK Email https://github.com/zkemail"
msgstr "最近有进展，确实值得研究：ZK Email https://github.com/zkemail"

#: src/materials/ZK-Materials.md:250
msgid ""
"ZK Proof of Email：通往decentralized identity之路 https://blog.csdn.net/"
"mutourend/article/details/129004763?"
"ops_request_misc=&request_id=2425a5a6d21c4b6bbe440828ba478ccf&biz_id="
msgstr ""
"ZK Proof of Email：通往decentralized identity之路 https://blog.csdn.net/"
"mutourend/article/details/129004763?"
"ops_request_misc=&request_id=2425a5a6d21c4b6bbe440828ba478ccf&biz_id="

#: src/materials/ZK-Materials.md:252
msgid "Cryptography"
msgstr "Cryptography"

#: src/materials/ZK-Materials.md:254
msgid ""
"《公钥密码学研究方法论》\\[https://documents.uow.edu.au/~fuchun/methodology."
"html\\]"
msgstr ""
"《公钥密码学研究方法论》\\[https://documents.uow.edu.au/~fuchun/methodology."
"html\\]"

#: src/materials/ZK-Materials.md:255
msgid "这是slides，这是最新的本体： \\[https://eprint.iacr.org/2023/715 \\]"
msgstr "这是slides，这是最新的本体： \\[https://eprint.iacr.org/2023/715 \\]"

#: src/materials/ZK-Materials.md:258
msgid "ZKP Materials"
msgstr "ZKP Materials"

#: src/materials/ZK-Materials.md:260
msgid ""
"[A survey of ZK Languages](https://zkvalidator.com/a-survey-of-zk-languages/)"
msgstr ""
"[A survey of ZK Languages](https://zkvalidator.com/a-survey-of-zk-languages/)"

#: src/materials/ZK-Materials.md:263
msgid "zkWASM"
msgstr "zkWASM"

#: src/materials/ZK-Materials.md:265
msgid ""
"[Exploring alternatives to WASM for smart contracts](https://forum.polkadot."
"network/t/exploring-alternatives-to-wasm-for-smart-contracts/2434/21)"
msgstr ""
"[Exploring alternatives to WASM for smart contracts](https://forum.polkadot."
"network/t/exploring-alternatives-to-wasm-for-smart-contracts/2434/21)"

#: src/materials/ZK-Materials.md:268
msgid "一个华人团队搞的 zkwasm"
msgstr "一个华人团队搞的 zkwasm"

#: src/materials/ZK-Materials.md:269
msgid "https://github.com/DelphinusLab/zkWasm"
msgstr "https://github.com/DelphinusLab/zkWasm"

#: src/materials/ZK-Materials.md:272
msgid "另一个zkwasm - supernova, 估计9-10月发布"
msgstr "另一个zkwasm - supernova, 估计9-10月发布"

#: src/materials/ZK-Materials.md:273
msgid "https://twitter.com/powdr_labs/status/1679822931340173313"
msgstr "https://twitter.com/powdr_labs/status/1679822931340173313"

#: src/materials/ZK-Materials.md:274
msgid "https://twitter.com/HoumanShadab/status/1679155719805755392"
msgstr "https://twitter.com/HoumanShadab/status/1679155719805755392"

#: src/materials/ZK-Materials.md:277
msgid ""
"```\n"
"【zkwasm 分享总结】： \n"
"程序泡在 webassembly 的 bytecode 里面。是一个 webassenmbly 的小程序。\n"
"不分链游的问题：游戏运行的结果有可能作弊，不知道你是怎么运行这个程序的，有可"
"能你上传了一些裸数据。 所以仍依靠中心化的服务器\n"
"\n"
"会在跑 webassembly 的时候跑一个，监听用户事件，产生输入输出的 sequence，把他"
"编译成一个 webassembly 的文件。每个操作带来的 consequence 会被管控的，把 "
"proof 上链。\n"
"\n"
"how to generate proof：\n"
"- Prover 实例\n"
"- 不用每次都和链上交互（gas 太高），可以把本次所有的行动都压成一个 proof。\n"
"\n"
"https://github.com/DelphinusLab/zkWasm\n"
"\n"
"如果想 onchain Verify，需要 Deploy 一个测试合约\n"
"\n"
"合约生成，prove 加速：\n"
"- https://github.com/DelphinusLab/continuation-batcher\n"
"\n"
"https://hackmd.io/@sinka/BJUIyufEc\n"
"\n"
"后续：模块化公开课\n"
"```"
msgstr ""
"```\n"
"【zkwasm 分享总结】： \n"
"程序泡在 webassembly 的 bytecode 里面。是一个 webassenmbly 的小程序。\n"
"不分链游的问题：游戏运行的结果有可能作弊，不知道你是怎么运行这个程序的，有可"
"能你上传了一些裸数据。 所以仍依靠中心化的服务器\n"
"\n"
"会在跑 webassembly 的时候跑一个，监听用户事件，产生输入输出的 sequence，把他"
"编译成一个 webassembly 的文件。每个操作带来的 consequence 会被管控的，把 "
"proof 上链。\n"
"\n"
"how to generate proof：\n"
"- Prover 实例\n"
"- 不用每次都和链上交互（gas 太高），可以把本次所有的行动都压成一个 proof。\n"
"\n"
"https://github.com/DelphinusLab/zkWasm\n"
"\n"
"如果想 onchain Verify，需要 Deploy 一个测试合约\n"
"\n"
"合约生成，prove 加速：\n"
"- https://github.com/DelphinusLab/continuation-batcher\n"
"\n"
"https://hackmd.io/@sinka/BJUIyufEc\n"
"\n"
"后续：模块化公开课\n"
"```"

#: src/materials/ZK-Materials.md:300
msgid "Basics Tutorials"
msgstr "Basics Tutorials"

#: src/materials/ZK-Materials.md:303
msgid "https://zkhack.dev/whiteboard/ 挺适合作为基础资料的"
msgstr "https://zkhack.dev/whiteboard/ 挺适合作为基础资料的"

#: src/materials/ZK-Materials.md:304
msgid "https://www.rareskills.io/zk-book"
msgstr "https://www.rareskills.io/zk-book"

#: src/materials/ZK-Materials.md:306
msgid ""
"I try not to recommend too many sources, since everyone learns differently. "
"But here are a few:"
msgstr ""
"I try not to recommend too many sources, since everyone learns differently. "
"But here are a few:"

#: src/materials/ZK-Materials.md:307
msgid ""
"Least Authority’s [Moonmath manual](https://leastauthority.com/community-"
"matters/moonmath-manual/) for learning Snarks. Starts with the basics."
msgstr ""
"Least Authority’s [Moonmath manual](https://leastauthority.com/community-"
"matters/moonmath-manual/) for learning Snarks. Starts with the basics."

#: src/materials/ZK-Materials.md:308
msgid ""
"For learning about Starks, StarkWare’s [Stark 101 series](https://starkware."
"co/stark-101/)."
msgstr ""
"For learning about Starks, StarkWare’s [Stark 101 series](https://starkware."
"co/stark-101/)."

#: src/materials/ZK-Materials.md:309
msgid ""
"For writing some ZK code and seeing what actually happens: [Noir from Aztec]"
"(https://docs.aztec.network/noir)"
msgstr ""
"For writing some ZK code and seeing what actually happens: [Noir from Aztec]"
"(https://docs.aztec.network/noir)"

#: src/materials/ZK-Materials.md:310
msgid "PSE"
msgstr "PSE"

#: src/materials/ZK-Materials.md:312
msgid ""
"From CEX to CCEX with Summa https://mirror.xyz/privacy-scaling-explorations."
"eth/\\_1Y6ExFD_Rs3oDxwx5_kWAj_Tl_L9c0Hm7E6SVJei0A"
msgstr ""
"From CEX to CCEX with Summa https://mirror.xyz/privacy-scaling-explorations."
"eth/\\_1Y6ExFD_Rs3oDxwx5_kWAj_Tl_L9c0Hm7E6SVJei0A"

#: src/materials/ZK-Materials.md:315
msgid ""
"https://mirror.xyz/privacy-scaling-explorations.eth/f2ZfkPXZpvc6DUmG5-"
"SyLjjYf78bcOcFeiJX2tb2hS0"
msgstr ""
"https://mirror.xyz/privacy-scaling-explorations.eth/f2ZfkPXZpvc6DUmG5-"
"SyLjjYf78bcOcFeiJX2tb2hS0"

#: src/materials/ZK-Materials.md:317
msgid "PSE Lectures - Ep 6 https://www.youtube.com/watch?v=l7bEN1V7qRM"
msgstr "PSE Lectures - Ep 6 https://www.youtube.com/watch?v=l7bEN1V7qRM"

#: src/materials/ZK-Materials.md:319
msgid ""
"[Meeting PSE Slides]([https://docs.google.com/presentation/"
"d/1zXAsGyyq_DZ2WdGjCow3cP0TVhTxkfRaa3q3Rz6z4U4/edit#slide=id."
"g1e4808542a4_1_17](https://docs.google.com/presentation/"
"d/1zXAsGyyq_DZ2WdGjCow3cP0TVhTxkfRaa3q3Rz6z4U4/edit#slide=id."
"g1e4808542a4_1_17))"
msgstr ""
"[Meeting PSE Slides]([https://docs.google.com/presentation/"
"d/1zXAsGyyq_DZ2WdGjCow3cP0TVhTxkfRaa3q3Rz6z4U4/edit#slide=id."
"g1e4808542a4_1_17](https://docs.google.com/presentation/"
"d/1zXAsGyyq_DZ2WdGjCow3cP0TVhTxkfRaa3q3Rz6z4U4/edit#slide=id."
"g1e4808542a4_1_17))"

#: src/materials/ZK-Materials.md:321
msgid ""
"Make your first contribution to any open-source Web3 project : [https://www."
"useweb3.xyz/contribute](https://www.useweb3.xyz/contribute)"
msgstr ""
"Make your first contribution to any open-source Web3 project : [https://www."
"useweb3.xyz/contribute](https://www.useweb3.xyz/contribute)"

#: src/materials/ZK-Materials.md:322
msgid ""
"LIST： [https://www.appliedzkp.org/projects](https://www.appliedzkp.org/"
"projects)"
msgstr ""
"LIST： [https://www.appliedzkp.org/projects](https://www.appliedzkp.org/"
"projects)"

#: src/materials/ZK-Materials.md:324
msgid "Some Project Boards:"
msgstr "Some Project Boards:"

#: src/materials/ZK-Materials.md:325
msgid ""
"[https://github.com/orgs/semaphore-protocol/projects/10](https://github.com/"
"orgs/semaphore-protocol/projects/10)"
msgstr ""
"[https://github.com/orgs/semaphore-protocol/projects/10](https://github.com/"
"orgs/semaphore-protocol/projects/10)"

#: src/materials/ZK-Materials.md:326
msgid ""
"[https://github.com/orgs/privacy-scaling-explorations/projects/3/views/9]"
"(https://github.com/orgs/privacy-scaling-explorations/projects/3/views/9)"
msgstr ""
"[https://github.com/orgs/privacy-scaling-explorations/projects/3/views/9]"
"(https://github.com/orgs/privacy-scaling-explorations/projects/3/views/9)"

#: src/materials/ZK-Materials.md:328
msgid "**Proof of Innocence（清白证明）：**"
msgstr "**Proof of Innocence（清白证明）：**"

#: src/materials/ZK-Materials.md:329
msgid ""
"[https://github.com/chainwayxyz/proof-of-innocence](https://github.com/"
"chainwayxyz/proof-of-innocence)"
msgstr ""
"[https://github.com/chainwayxyz/proof-of-innocence](https://github.com/"
"chainwayxyz/proof-of-innocence)"

#: src/materials/ZK-Materials.md:330
msgid "Twitter : Follow @drCathieSo_eth  @AndyGuzmanEth"
msgstr "Twitter : Follow @drCathieSo_eth  @AndyGuzmanEth"

#: src/materials/ZK-Materials.md:332
msgid "books & websites & Podcasts 🎙📚"
msgstr "books & websites & Podcasts 🎙📚"

#: src/materials/ZK-Materials.md:334
msgid ""
"去年出版的《哥德尔传》 <https://book.douban.com/subject/36073022/> 是我近些年"
"读到写得最好的传记，"
msgstr ""
"去年出版的《哥德尔传》 <https://book.douban.com/subject/36073022/> 是我近些年"
"读到写得最好的传记，"

#: src/materials/ZK-Materials.md:335
msgid ""
"仅次于我十年前读到的《维特根斯坦传》 <https://book.douban.com/"
"subject/6152040/> （这是不可能被撼动的第一传记神作）"
msgstr ""
"仅次于我十年前读到的《维特根斯坦传》 <https://book.douban.com/"
"subject/6152040/> （这是不可能被撼动的第一传记神作）"

#: src/materials/ZK-Materials.md:337
msgid ""
"[The arithmetic of pairing-based proof systems](imgs/ZK-Materials_pdf_1.pdf)"
msgstr ""
"[The arithmetic of pairing-based proof systems](imgs/ZK-Materials_pdf_1.pdf)"

#: src/materials/ZK-Materials.md:339
msgid "三本叙事书籍 : pnp / tns / cw"
msgstr "三本叙事书籍 : pnp / tns / cw"

#: src/materials/ZK-Materials.md:341
msgid "[p ?= np](./imgs/pnp.pdf)"
msgstr "[p ?= np](./imgs/pnp.pdf)"

#: src/materials/ZK-Materials.md:342
msgid "[Crypto Wars](./imgs/cw.pdf)"
msgstr "[Crypto Wars](./imgs/cw.pdf)"

#: src/materials/ZK-Materials.md:343
msgid "[The network state](./imgs/The-network-state.pdf)"
msgstr "[The network state](./imgs/The-network-state.pdf)"

#: src/materials/ZK-Materials.md:345
msgid ""
"https://cryptography.rs/  这个页面很全也很漂亮，我cryptography.land也是受这里"
"启发"
msgstr ""
"https://cryptography.rs/  这个页面很全也很漂亮，我cryptography.land也是受这里"
"启发"

#: src/materials/ZK-Materials.md:348
msgid ""
"刚才CJ还提到了这个网站 https://asecuritysite.com/ ，我也经常看这个，可以感到"
"这个教授对密码学是真爱，做得非常全面且扎实"
msgstr ""
"刚才CJ还提到了这个网站 https://asecuritysite.com/ ，我也经常看这个，可以感到"
"这个教授对密码学是真爱，做得非常全面且扎实"

#: src/materials/ZK-Materials.md:352
msgid "🎙"
msgstr "🎙"

#: src/materials/ZK-Materials.md:354
msgid ""
"老牌密码学播客 ： Security Cryptography Whatever https://"
"securitycryptographywhatever.com/"
msgstr ""
"老牌密码学播客 ： Security Cryptography Whatever https://"
"securitycryptographywhatever.com/"

#: src/materials/ZK-Materials.md:356
msgid ""
"[Episode 288: Quantum Cryptography with Or Sattath](https://zeroknowledge."
"fm/288-2/)"
msgstr ""
"[Episode 288: Quantum Cryptography with Or Sattath](https://zeroknowledge."
"fm/288-2/)"

#: src/materials/ZK-Materials.md:360
msgid "Rust"
msgstr "Rust"

#: src/materials/ZK-Materials.md:362
msgid ""
"https://github.com/evcxr/evcxr/tree/main/evcxr_jupyter yeah, a Jupyter "
"kernel for Rust"
msgstr ""
"https://github.com/evcxr/evcxr/tree/main/evcxr_jupyter yeah, a Jupyter "
"kernel for Rust"

#: src/materials/ZK-Materials.md:370
msgid ""
"[Awesome ZKP](https://github.com/matter-labs/awesome-zero-knowledge-proofs)"
msgstr ""
"[Awesome ZKP](https://github.com/matter-labs/awesome-zero-knowledge-proofs)"

#: src/materials/ZK-Materials.md:372
msgid "[Awesome Noir](https://github.com/noir-lang/awesome-noir)"
msgstr "[Awesome Noir](https://github.com/noir-lang/awesome-noir)"

#: src/materials/ZK-Materials.md:373
msgid "[Awesome Circom](https://github.com/arnaucube/awesome-circom)"
msgstr "[Awesome Circom](https://github.com/arnaucube/awesome-circom)"

#: src/materials/ZK-Materials.md:374
msgid "[Awesome Aleo](https://github.com/howardwu/awesome-aleo)"
msgstr "[Awesome Aleo](https://github.com/howardwu/awesome-aleo)"

#: src/materials/ZK-Materials.md:375
msgid "[Awesome Cairo](https://github.com/auditless/awesome-cairo)"
msgstr "[Awesome Cairo](https://github.com/auditless/awesome-cairo)"

#: src/materials/ZK-Materials.md:376
msgid "[Awesome-Folding](https://github.com/lurk-lab/awesome-folding)"
msgstr "[Awesome-Folding](https://github.com/lurk-lab/awesome-folding)"

#: src/materials/ZK-Materials.md:378
msgid "[Awesome PLONK](https://github.com/fluidex/awesome-plonk)"
msgstr "[Awesome PLONK](https://github.com/fluidex/awesome-plonk)"

#: src/materials/ZK-Materials.md:379
msgid "[Awesome ZKML](https://github.com/worldcoin/awesome-zkml)"
msgstr "[Awesome ZKML](https://github.com/worldcoin/awesome-zkml)"

#: src/materials/ZK-Materials.md:380
msgid "[Awesome zkEVM](https://github.com/LuozhuZhang/awesome-zkevm)"
msgstr "[Awesome zkEVM](https://github.com/LuozhuZhang/awesome-zkevm)"

#: src/materials/ZK-Materials.md:381
msgid "[Awesome Zero Knowledge](https://github.com/ventali/awesome-zk)"
msgstr "[Awesome Zero Knowledge](https://github.com/ventali/awesome-zk)"

#: src/materials/ZK-Materials.md:383
msgid "Quantum"
msgstr "Quantum"

#: src/materials/ZK-Materials.md:385
msgid ""
"[Quantum Resistance and the Signal Protocol](https://signal.org/blog/pqxdh/)"
msgstr ""
"[Quantum Resistance and the Signal Protocol](https://signal.org/blog/pqxdh/)"

#: src/materials/ZK-Materials.md:386
msgid "Signal 已经集成 Kyber了"
msgstr "Signal 已经集成 Kyber了"

#: src/materials/ZK-Materials.md:388
msgid "Curves"
msgstr "Curves"

#: src/materials/ZK-Materials.md:390
msgid ""
"[The Pasta Curves for Halo 2 and Beyond](https://electriccoin.co/blog/the-"
"pasta-curves-for-halo-2-and-beyond/)"
msgstr ""
"[The Pasta Curves for Halo 2 and Beyond](https://electriccoin.co/blog/the-"
"pasta-curves-for-halo-2-and-beyond/)"

#: src/materials/ZK-Materials.md:391
msgid ""
"[Mina Book: Pasta Curves](https://o1-labs.github.io/proof-systems/specs/"
"pasta.html)"
msgstr ""
"[Mina Book: Pasta Curves](https://o1-labs.github.io/proof-systems/specs/"
"pasta.html)"

#: src/materials/ZK-Materials.md:392
msgid ""
"[Pallas and Elliptic Curves](https://medium.com/asecuritysite-when-bob-met-"
"alice/pallas-and-elliptic-curves-f34115904b02)"
msgstr ""
"[Pallas and Elliptic Curves](https://medium.com/asecuritysite-when-bob-met-"
"alice/pallas-and-elliptic-curves-f34115904b02)"

#: src/materials/ZK-Materials.md:393
msgid ""
"[A survey of elliptic curves for proof systems](https://eprint.iacr."
"org/2022/586.pdf)"
msgstr ""
"[A survey of elliptic curves for proof systems](https://eprint.iacr."
"org/2022/586.pdf)"

#: src/materials/ZK-Materials.md:394
msgid ""
"[Revisiting cycles of pairing-friendly elliptic curves](https://eprint.iacr."
"org/2022/1662.pdf)"
msgstr ""
"[Revisiting cycles of pairing-friendly elliptic curves](https://eprint.iacr."
"org/2022/1662.pdf)"

#: src/materials/ZK-Materials.md:395
msgid ""
"[Pairings in Rank-1 Constraint Systems](https://eprint.iacr.org/2022/1162."
"pdf)"
msgstr ""
"[Pairings in Rank-1 Constraint Systems](https://eprint.iacr.org/2022/1162."
"pdf)"

#: src/materials/ZK-Materials.md:396
msgid "https://github.com/zcash/pasta_curves"
msgstr "https://github.com/zcash/pasta_curves"

#: src/materials/ZK-Materials.md:397
msgid ""
"https://hackage.haskell.org/package/pasta-curves-0.0.1.0/docs/PastaCurves."
"html"
msgstr ""
"https://hackage.haskell.org/package/pasta-curves-0.0.1.0/docs/PastaCurves."
"html"

#: src/materials/ZK-Materials.md:398
msgid "https://github.com/nccgroup/pasta-curves"
msgstr "https://github.com/nccgroup/pasta-curves"

#: src/materials/ZK-Materials.md:399
msgid "https://docs.rs/ark-pallas/0.3.0/ark_pallas/"
msgstr "https://docs.rs/ark-pallas/0.3.0/ark_pallas/"

#: src/materials/ZK-Materials.md:402
msgid "Lattice"
msgstr "Lattice"

#: src/materials/ZK-Materials.md:404
msgid ""
"Lattice-based cryptography: The tricky math of dots https://www.youtube.com/"
"watch?v=QDdOoYdb748&list=PLMItfTVgwEAvTX4-sZkcF5s3-l1JDocY0&index=4"
msgstr ""
"Lattice-based cryptography: The tricky math of dots https://www.youtube.com/"
"watch?v=QDdOoYdb748&list=PLMItfTVgwEAvTX4-sZkcF5s3-l1JDocY0&index=4"

#: src/materials/ZK-Materials.md:406
msgid "Others (can't archive)"
msgstr "Others (can't archive)"

#: src/materials/ZK-Materials.md:408
msgid "https://blog.csdn.net/mutourend -- 简中唯一zkp-complete博客\\[Grin\\]"
msgstr "https://blog.csdn.net/mutourend -- 简中唯一zkp-complete博客\\[Grin\\]"

#: src/materials/ZK-Materials.md:410
msgid ""
"当时逐字听译的一个 Brendan 的 talk: Plonky2 简介 https://mp.weixin.qq.com/s/"
"qSWFLQPQJvWHclAvlEXEaQ"
msgstr ""
"当时逐字听译的一个 Brendan 的 talk: Plonky2 简介 https://mp.weixin.qq.com/s/"
"qSWFLQPQJvWHclAvlEXEaQ"

#: src/materials/ZK-Materials.md:412
msgid ""
"Q: 我想知道 这个recursive实际能跑起来的例子哪里有\\[Lol\\] A:  Plonky2-based"
"的吗？olavm肯定能实际跑起来 https://github.com/Sin7Y/olavm"
msgstr ""
"Q: 我想知道 这个recursive实际能跑起来的例子哪里有\\[Lol\\] A:  Plonky2-based"
"的吗？olavm肯定能实际跑起来 https://github.com/Sin7Y/olavm"

#: src/materials/ZK-Materials.md:417
msgid ""
"[Succinct Proofs and Linear Algebra](https://angeris.github.io/papers/zk-"
"linalg.pdf)"
msgstr ""
"[Succinct Proofs and Linear Algebra](https://angeris.github.io/papers/zk-"
"linalg.pdf)"

#: src/materials/ZK-Materials.md:419
msgid ""
"[Eos: Efficient Private Delegation of zkSNARK Provers](https://www.usenix."
"org/conference/usenixsecurity23/presentation/chiesa)"
msgstr ""
"[Eos: Efficient Private Delegation of zkSNARK Provers](https://www.usenix."
"org/conference/usenixsecurity23/presentation/chiesa)"

#: src/materials/ZK-Materials.md:421
msgid ""
"Lurk Beta 估计还得半年以上 https://github.com/lurk-lab/lurk-rs/issues/657"
msgstr ""
"Lurk Beta 估计还得半年以上 https://github.com/lurk-lab/lurk-rs/issues/657"

#: src/materials/ZK-Materials.md:423
msgid ""
"ABCDE ZK Hacker Camp |【Session 8: Efficient Zero-KnowledgeProofs: Theory "
"and Practice】 https://www.youtube.com/watch?v=j2_9nwgfhEw"
msgstr ""
"ABCDE ZK Hacker Camp |【Session 8: Efficient Zero-KnowledgeProofs: Theory "
"and Practice】 https://www.youtube.com/watch?v=j2_9nwgfhEw"

#: src/materials/ZK-Materials.md:425
msgid "https://anoma.github.io/VampIR-Book/"
msgstr "https://anoma.github.io/VampIR-Book/"

#: src/materials/ZK-Materials.md:426
msgid "zk 摩尔定律: [zkintro](https://zkintro.com/)"
msgstr "zk 摩尔定律: [zkintro](https://zkintro.com/)"

#: src/materials/ZK-Materials.md:427
msgid ""
"@Qi Zhou : 话说，我们在做zkWASM的Cannon，也计划用各种foding + aggregate的方"
"案，感兴趣的小伙伴可以报名😄"
msgstr ""
"@Qi Zhou : 话说，我们在做zkWASM的Cannon，也计划用各种foding + aggregate的方"
"案，感兴趣的小伙伴可以报名😄"

#: src/materials/ZK-Materials.md:430
msgid "zkGeth, 看起来是把 geth 转化成risv64指令集，然后做一个zkrisc出来。"
msgstr "zkGeth, 看起来是把 geth 转化成risv64指令集，然后做一个zkrisc出来。"

#: src/materials/ZK-Materials.md:431
msgid "https://hackmd.io/@HqESr6_rQbmdCj2v03vrcQ/HyMA2pkmh "
msgstr "https://hackmd.io/@HqESr6_rQbmdCj2v03vrcQ/HyMA2pkmh "

#: src/materials/ZK-Materials.md:432
msgid "Towards a Nova-based ZK VM 的作者开始写的新书 : "
msgstr "Towards a Nova-based ZK VM 的作者开始写的新书 : "

#: src/materials/ZK-Materials.md:433
msgid "[zkintro](https://zkintro.com/) "
msgstr "[zkintro](https://zkintro.com/) "

#: src/materials/ZK-Materials.md:435
msgid "网上有比较好的用bellperson或者bellman写 zkp的例子吗？"
msgstr "网上有比较好的用bellperson或者bellman写 zkp的例子吗？"

#: src/materials/ZK-Materials.md:436
msgid ""
"具体一点 我觉得lurk的Poseidon 实现里有不错可以借鉴的 https://github.com/lurk-"
"lab/neptune/blob/main/src/sponge/circuit.rs"
msgstr ""
"具体一点 我觉得lurk的Poseidon 实现里有不错可以借鉴的 https://github.com/lurk-"
"lab/neptune/blob/main/src/sponge/circuit.rs"

#: src/materials/ZK-Materials.md:437
msgid ""
"因为Nova用的是relaxed r1cs所以你也可以直接参考nova的examples比如 https://"
"github.com/microsoft/Nova/blob/main/examples/minroot.rs , Constraint 部分都是"
"一样的"
msgstr ""
"因为Nova用的是relaxed r1cs所以你也可以直接参考nova的examples比如 https://"
"github.com/microsoft/Nova/blob/main/examples/minroot.rs , Constraint 部分都是"
"一样的"

#: src/materials/ZK-Materials.md:438
msgid ""
"想找一些bellman 入门介绍快速上手，目前看到的最详细的就是 https://"
"electriccoin.co/blog/bellman-zksnarks-in-rust/ 了"
msgstr ""
"想找一些bellman 入门介绍快速上手，目前看到的最详细的就是 https://"
"electriccoin.co/blog/bellman-zksnarks-in-rust/ 了"

#: src/materials/ZK-Materials.md:439
msgid "仍然记得sinka（高老师）说学习框架最好写一个排序，当时他用的是halo2"
msgstr "仍然记得sinka（高老师）说学习框架最好写一个排序，当时他用的是halo2"

#: src/materials/ZK-Materials.md:442
msgid ""
"可以订阅下 mutourend 邹老师的csdn，这技术热点追踪翻译速度才叫快，“区块链媒"
"体”们望尘莫及😂"
msgstr ""
"可以订阅下 mutourend 邹老师的csdn，这技术热点追踪翻译速度才叫快，“区块链媒"
"体”们望尘莫及😂"

#: src/materials/ZK-Materials.md:444
msgid "密码学纯理论进展速度也同样相当的惊人，"
msgstr "密码学纯理论进展速度也同样相当的惊人，"

#: src/materials/ZK-Materials.md:445
msgid ""
"清华毕业的Yanyi Liu跟着Rafael Pass 揪着OWF不放疯狂输出，试图彻底搞清楚密码学"
"的复杂性理论基础。"
msgstr ""
"清华毕业的Yanyi Liu跟着Rafael Pass 揪着OWF不放疯狂输出，试图彻底搞清楚密码学"
"的复杂性理论基础。"

#: src/materials/ZK-Materials.md:446
msgid ""
"Yilei Chen回国后负责清华姚班的Cryptography课 http://www.chenyilei.net/"
"cryptography-s2023.html， 下一代姚班选手的ZKP就都是他教的了，他在FS要不要密码"
"学哈希，iO/lattice方面也有很多工作。"
msgstr ""
"Yilei Chen回国后负责清华姚班的Cryptography课 http://www.chenyilei.net/"
"cryptography-s2023.html， 下一代姚班选手的ZKP就都是他教的了，他在FS要不要密码"
"学哈希，iO/lattice方面也有很多工作。"

#: src/materials/ZK-Materials.md:447
msgid ""
"Lijie Chen就更不用说了，华人TCS之光，博士论文写了551页https://www.mit.edu/"
"~lijieche/Lijie-Chen-thesis.pdf，已经是average-case hardness 和 "
"derandomization领域世界级的专家了，可以去预测哪年得图灵奖了。"
msgstr ""
"Lijie Chen就更不用说了，华人TCS之光，博士论文写了551页https://www.mit.edu/"
"~lijieche/Lijie-Chen-thesis.pdf，已经是average-case hardness 和 "
"derandomization领域世界级的专家了，可以去预测哪年得图灵奖了。"

#: src/materials/ZK-Materials.md:449
msgid ""
"[Foundations of Data Availability Sampling](https://eprint.iacr."
"org/2023/1079.pdf)"
msgstr ""
"[Foundations of Data Availability Sampling](https://eprint.iacr."
"org/2023/1079.pdf)"

#: src/materials/ZK-Materials.md:450
msgid ""
"[Boojum Upgrade: zkSync Era’s New High-performance Proof System for Radical "
"Decentralization](https://zksync.mirror.xyz/HJ2Pj45EJkRdt5Pau-"
"ZXwkV2ctPx8qFL19STM5jdYhc)"
msgstr ""
"[Boojum Upgrade: zkSync Era’s New High-performance Proof System for Radical "
"Decentralization](https://zksync.mirror.xyz/HJ2Pj45EJkRdt5Pau-"
"ZXwkV2ctPx8qFL19STM5jdYhc)"

#: src/materials/ZK-Materials.md:453
msgid ""
"https://slush.dev/   tendermint + Cairo vm  定制L3 as service https://0xparc."
"org/blog/parc-squad 这个有点意思"
msgstr ""
"https://slush.dev/   tendermint + Cairo vm  定制L3 as service https://0xparc."
"org/blog/parc-squad 这个有点意思"

#: src/materials/ZK-Materials.md:457
msgid "关于 20 年以后 zk 的综述, pan 老师有推荐吗 : "
msgstr "关于 20 年以后 zk 的综述, pan 老师有推荐吗 : "

#: src/materials/ZK-Materials.md:458
msgid ""
"20年以后形势就是社区为王，不少好东西先发hackmd了。综述当然也有不少，但都是更"
"细分领域的了，比如 https://eprint.iacr.org/2023/671 ， https://eprint.iacr."
"org/2023/857  等等"
msgstr ""
"20年以后形势就是社区为王，不少好东西先发hackmd了。综述当然也有不少，但都是更"
"细分领域的了，比如 https://eprint.iacr.org/2023/671 ， https://eprint.iacr."
"org/2023/857  等等"

#: src/materials/ZK-Materials.md:460
msgid ""
"（发现和另一个研究群人员不overlap再发一遍）过了一遍HyperNova和Customizable "
"constraint systems，感觉这个工作非常让人兴奋。CCS用来统一R1CS AIR PLONKish，"
"然后用Nova IVC的方式multi-folding生成SNARK。有一种ZK界LLVM的即视感。各位老师"
"怎么看。"
msgstr ""
"（发现和另一个研究群人员不overlap再发一遍）过了一遍HyperNova和Customizable "
"constraint systems，感觉这个工作非常让人兴奋。CCS用来统一R1CS AIR PLONKish，"
"然后用Nova IVC的方式multi-folding生成SNARK。有一种ZK界LLVM的即视感。各位老师"
"怎么看。"

#: src/materials/ZK-Materials.md:463
msgid ""
"a16z 整理的比较全的 ZKP 的资料库  https://a16zcrypto.com/zero-knowledge-"
"canon/"
msgstr ""
"a16z 整理的比较全的 ZKP 的资料库  https://a16zcrypto.com/zero-knowledge-"
"canon/"

#: src/materials/ZK-Materials.md:464
msgid ""
"ZK 零知识: https://buidlerdao.notion.site/ZK-5963083942a744bbb60a0328008868e2"
msgstr ""
"ZK 零知识: https://buidlerdao.notion.site/ZK-5963083942a744bbb60a0328008868e2"

#: src/materials/ZK-Materials.md:465
msgid ""
"零基础学习 ZK:  https://mirror.xyz/searchblock.eth/"
"y11EKtXAtK3aXRVMV1yYqw7FibKHxI0fK10vlVRDaD4"
msgstr ""
"零基础学习 ZK:  https://mirror.xyz/searchblock.eth/"
"y11EKtXAtK3aXRVMV1yYqw7FibKHxI0fK10vlVRDaD4"

#: src/materials/ZK-Materials.md:466
msgid ""
"万字长文捕获 ZK Rollup 时代价值｜ZONFF Research: https://mp.weixin.qq.com/"
"s/5zKdS-GL8w_z4XIDOjv7FA"
msgstr ""
"万字长文捕获 ZK Rollup 时代价值｜ZONFF Research: https://mp.weixin.qq.com/"
"s/5zKdS-GL8w_z4XIDOjv7FA"

#: src/materials/ZK-Materials.md:467
msgid "[zksync开源](https://github.com/matter-labs/zksync-era)"
msgstr "[zksync开源](https://github.com/matter-labs/zksync-era)"

#: src/materials/ZK-Materials.md:469
msgid "怎么零基础学习零知识证明:"
msgstr "怎么零基础学习零知识证明:"

#: src/materials/ZK-Materials.md:470
msgid ""
"https://mirror.xyz/searchblock.eth/"
"y11EKtXAtK3aXRVMV1yYqw7FibKHxI0fK10vlVRDaD4"
msgstr ""
"https://mirror.xyz/searchblock.eth/"
"y11EKtXAtK3aXRVMV1yYqw7FibKHxI0fK10vlVRDaD4"

#: src/materials/ZK-Materials.md:472
msgid "数学 : "
msgstr "数学 : "

#: src/materials/ZK-Materials.md:473
msgid ""
"参考学习内容:多项式乘法和除法、拉格朗日插值、Schwartz-Zip-pel 引理、快速傅立"
"叶变换(FFT) 、NTT、MSM 以及 Field extension等。"
msgstr ""
"参考学习内容:多项式乘法和除法、拉格朗日插值、Schwartz-Zip-pel 引理、快速傅立"
"叶变换(FFT) 、NTT、MSM 以及 Field extension等。"

#: src/materials/ZK-Materials.md:474
msgid "An Introduction to Mathematical Cryptography"
msgstr "An Introduction to Mathematical Cryptography"

#: src/materials/ZK-Materials.md:475
msgid ""
"https://explained-from-first-principles.com/number-theory 这个介绍数论的也不"
"错"
msgstr ""
"https://explained-from-first-principles.com/number-theory 这个介绍数论的也不"
"错"

#: src/materials/ZK-Materials.md:477
msgid "初等数论和群论 : "
msgstr "初等数论和群论 : "

#: src/materials/ZK-Materials.md:478
msgid ""
"推荐了 MIT’s 6.875 (Foundations of Cryptography) ，对于国内的同学来讲，建议结"
"合潘承洞版的看，会更好！ 教材链接：[https://mit6875.github.io/HANDOUTS/"
"numbertheory.pdf](https://t.co/kfIc1fO7gV)"
msgstr ""
"推荐了 MIT’s 6.875 (Foundations of Cryptography) ，对于国内的同学来讲，建议结"
"合潘承洞版的看，会更好！ 教材链接：[https://mit6875.github.io/HANDOUTS/"
"numbertheory.pdf](https://t.co/kfIc1fO7gV)"

#: src/materials/ZK-Materials.md:480
msgid "Tricks & Tools"
msgstr "Tricks & Tools"

#: src/materials/ZK-Materials.md:482
msgid "https://github.com/joelparkerhenderson/sha256-sentence"
msgstr "https://github.com/joelparkerhenderson/sha256-sentence"

#: src/materials/ZK-Materials.md:483
msgid ""
"The SHA256 for this sentence begins with seven, seven, f, zero, a, b, b and "
"five."
msgstr ""
"The SHA256 for this sentence begins with seven, seven, f, zero, a, b, b and "
"five."

#: src/materials/ZK-Materials.md:484
msgid "The SHA256 hash of this message begins with 534d765"
msgstr "The SHA256 hash of this message begins with 534d765"

#: src/materials/ZK-Materials.md:485
msgid "我去，厉害了,主要是里面没有什么随机数"
msgstr "我去，厉害了,主要是里面没有什么随机数"

#: src/materials/ZK-Materials.md:487
msgid ""
"https://zkbench.dev/ trade-offs and performance of different frameworks."
msgstr ""
"https://zkbench.dev/ trade-offs and performance of different frameworks."

#: src/materials/ZK-Materials.md:490
msgid "QA"
msgstr "QA"

#: src/materials/ZK-Materials.md:492
msgid "Question Lists: "
msgstr "Question Lists: "

#: src/materials/ZK-Materials.md:493
msgid "zkp 的前端？后端？算数化？ "
msgstr "zkp 的前端？后端？算数化？ "

#: src/materials/ZK-Materials.md:494 src/materials/ZK-Materials.md:514
msgid "什么是 MSM 加速？ "
msgstr "什么是 MSM 加速？ "

#: src/materials/ZK-Materials.md:495 src/materials/ZK-Materials.md:521
msgid "halo2 vs STARK？"
msgstr "halo2 vs STARK？"

#: src/materials/ZK-Materials.md:496
msgid "Halo2 怎么学 ？"
msgstr "Halo2 怎么学 ？"

#: src/materials/ZK-Materials.md:497
msgid "P!=NP ?"
msgstr "P!=NP ?"

#: src/materials/ZK-Materials.md:498
msgid "SumCheck 没有办法转成非交互式的zk 证明吧？"
msgstr "SumCheck 没有办法转成非交互式的zk 证明吧？"

#: src/materials/ZK-Materials.md:499 src/materials/ZK-Materials.md:609
msgid ""
"为什么 circom 中的 plonk 要求使用 r1cs 约束, 而 halo2 的约束可以任意次的多项"
"式?"
msgstr ""
"为什么 circom 中的 plonk 要求使用 r1cs 约束, 而 halo2 的约束可以任意次的多项"
"式?"

#: src/materials/ZK-Materials.md:504
msgid ""
"zkp 的前端？后端？算数化？ 我感觉应该是后端 需要@Kurt Pan 给出一个 前端 后端"
"的定义"
msgstr ""
"zkp 的前端？后端？算数化？ 我感觉应该是后端 需要@Kurt Pan 给出一个 前端 后端"
"的定义"

#: src/materials/ZK-Materials.md:506
msgid ""
"https://a16zcrypto.com/posts/article/measuring-snark-performance-frontends-"
"backends-and-the-future/"
msgstr ""
"https://a16zcrypto.com/posts/article/measuring-snark-performance-frontends-"
"backends-and-the-future/"

#: src/materials/ZK-Materials.md:508
msgid "有两种解释："
msgstr "有两种解释："

#: src/materials/ZK-Materials.md:509
msgid "前端=算术化/后端=证明系统"
msgstr "前端=算术化/后端=证明系统"

#: src/materials/ZK-Materials.md:510
msgid "前端=密码学编译器（比如多项式承诺）/后端=信息论证明系统（比如IOP）"
msgstr "前端=密码学编译器（比如多项式承诺）/后端=信息论证明系统（比如IOP）"

#: src/materials/ZK-Materials.md:516
msgid ""
"以groth16为例，涉及7次NTT：4个INTT ，5次msm：其中1次G2的MSM 。 整体Prover消耗"
"上，MSM应该占据了70%多吧. NTT应该占据10-20%。"
msgstr ""
"以groth16为例，涉及7次NTT：4个INTT ，5次msm：其中1次G2的MSM 。 整体Prover消耗"
"上，MSM应该占据了70%多吧. NTT应该占据10-20%。"

#: src/materials/ZK-Materials.md:523
msgid ""
"halo2 vs STARK老大难的原因主要是这俩背后都各有巨大的社区。路线之争了属于是，"
"这个无解。"
msgstr ""
"halo2 vs STARK老大难的原因主要是这俩背后都各有巨大的社区。路线之争了属于是，"
"这个无解。"

#: src/materials/ZK-Materials.md:525
msgid ""
"技术上看倒是融合的趋势，比如 https://github.com/maxgillett/halo2-fri-"
"gadget ，plonky2/boojum，CCS等。 以及可以探索这俩和folding/lookup两大主线的关"
"系"
msgstr ""
"技术上看倒是融合的趋势，比如 https://github.com/maxgillett/halo2-fri-"
"gadget ，plonky2/boojum，CCS等。 以及可以探索这俩和folding/lookup两大主线的关"
"系"

#: src/materials/ZK-Materials.md:528
msgid "@Zhouqi： "
msgstr "@Zhouqi： "

#: src/materials/ZK-Materials.md:529
msgid "我们在探索 zkVM方向的risc0 vs zkWASM就是两个社区的路线一个大的路径了"
msgstr "我们在探索 zkVM方向的risc0 vs zkWASM就是两个社区的路线一个大的路径了"

#: src/materials/ZK-Materials.md:530
msgid ""
"下次给大家汇报一下跑risc0的zeth结果，和zkWASM的大规模wasm的结果，我觉得有很多"
"有意思的东西出来"
msgstr ""
"下次给大家汇报一下跑risc0的zeth结果，和zkWASM的大规模wasm的结果，我觉得有很多"
"有意思的东西出来"

#: src/materials/ZK-Materials.md:531
msgid "我可以贡献一期用和改zkWASM的一些心得 hhh"
msgstr "我可以贡献一期用和改zkWASM的一些心得 hhh"

#: src/materials/ZK-Materials.md:535
msgid "Q: Halo2 怎么学 ？"
msgstr "Q: Halo2 怎么学 ？"

#: src/materials/ZK-Materials.md:537
msgid "@Dream："
msgstr "@Dream："

#: src/materials/ZK-Materials.md:539
msgid ""
"使用cario 或者 circom写电路， 是接触不到具体底层电路的设计，优化的，直接裸写"
"电路 成长会很快 啥叫裸写电路，比如用halo2 原生接口写？ @Dream："
msgstr ""
"使用cario 或者 circom写电路， 是接触不到具体底层电路的设计，优化的，直接裸写"
"电路 成长会很快 啥叫裸写电路，比如用halo2 原生接口写？ @Dream："

#: src/materials/ZK-Materials.md:542
msgid "对，方便优化， 可以知晓底层生成polynomials ，各种计算开销等"
msgstr "对，方便优化， 可以知晓底层生成polynomials ，各种计算开销等"

#: src/materials/ZK-Materials.md:543
msgid ""
"我觉得常见的basic 电路（比较大小， lookup等）， 复杂点的如签名电路， merkle "
"tree电路等"
msgstr ""
"我觉得常见的basic 电路（比较大小， lookup等）， 复杂点的如签名电路， merkle "
"tree电路等"

#: src/materials/ZK-Materials.md:545
msgid "嗯嗯。也正准备看一下halo2 原代码的，大佬有没有什么这方面的建议"
msgstr "嗯嗯。也正准备看一下halo2 原代码的，大佬有没有什么这方面的建议"

#: src/materials/ZK-Materials.md:547
msgid ""
"@Dream：大概挺久以前我看过一遍， 没啥建议，看完并理解文档halo2 book后 ，可以"
"看代码了"
msgstr ""
"@Dream：大概挺久以前我看过一遍， 没啥建议，看完并理解文档halo2 book后 ，可以"
"看代码了"

#: src/materials/ZK-Materials.md:552
msgid "P!=NP"
msgstr "P!=NP"

#: src/materials/ZK-Materials.md:554
msgid ""
"```\n"
"刚郭老师说有人想听关于P vs NP问题的内容，这里刚好有一篇很新超棒的科普文章。我"
"明天10:30可以给大家过一下这篇文章：\n"
"https://www.quantamagazine.org/complexity-theorys-50-year-journey-to-the-"
"limits-of-knowledge-20230817/\n"
"\n"
"“If you believe in hardness, then you should believe that it’s hard to prove "
"hardness,” “why it had been so hard to prove that this seemingly hard "
"problem about computational hardness was actually hard”\n"
"\n"
"“which intuitively seem harder and thus are perhaps easier to prove hard.”\n"
"\n"
"“complexity theory is itself complex” 看完了，这篇过于震撼\n"
"\n"
"研究PRG，研究succinctness，研究NIZK，研究secret sharing，这些密码学研究全都反"
"过来都跟证明P不等于NP密切相关。再反过来又可以做到直接基于P不等于NP假设（而不"
"是存在单向函数）的密码学。\n"
"\n"
"- https://www.quantamagazine.org/the-cryptographer-who-ensures-we-can-trust-"
"our-computers-20230727/\n"
"- https://www.quantamagazine.org/a-short-guide-to-hard-problems-20180716/\n"
"- [P vs. NP and the Computational Complexity Zoo](https://www.youtube.com/"
"watch?v=YX40hbAHx3s)\n"
"- https://www.quantamagazine.org/complexity-theorys-50-year-journey-to-the-"
"limits-of-knowledge-20230817/\n"
"\n"
"\n"
"单向函数存在（P不等于NP），则存在对NP的ZKP；单向函数不存在（且P=NP），则也存"
"在对NP的ZKP。\n"
"\n"
"前半句是GMW86原话。后半句：如果P=NP，又因为对P永远存在无条件的ZKP system，所"
"以也存在无条件的对NP的证明系统。\n"
"\n"
"所以ZKP恰恰是少数无论P是否等于NP都存在的密码学协议。OTP也是。还有所有的「信息"
"论安全密码学」。而大多数需要单向函数的密码协议，都活在Minicrypt之后。\n"
"\n"
"这个才是需要展开说说的。但上次随便一讲都讲了两个半小时，还只讲了一条线，耽误"
"大家吃饭都[Facepalm]\n"
"\n"
"所以是不是可以理解为，只要有P问题的存在，就存在密码学协议\n"
"我不知道密码学协议的定义，所以没法讨论\n"
"\n"
"对P问题的零知识证明系统trivial的无条件存在，这个证明系统就一个特点：完全无视"
"prover\n"
"\n"
"赶紧学lattice吧\n"
"```"
msgstr ""
"```\n"
"刚郭老师说有人想听关于P vs NP问题的内容，这里刚好有一篇很新超棒的科普文章。我"
"明天10:30可以给大家过一下这篇文章：\n"
"https://www.quantamagazine.org/complexity-theorys-50-year-journey-to-the-"
"limits-of-knowledge-20230817/\n"
"\n"
"“If you believe in hardness, then you should believe that it’s hard to prove "
"hardness,” “why it had been so hard to prove that this seemingly hard "
"problem about computational hardness was actually hard”\n"
"\n"
"“which intuitively seem harder and thus are perhaps easier to prove hard.”\n"
"\n"
"“complexity theory is itself complex” 看完了，这篇过于震撼\n"
"\n"
"研究PRG，研究succinctness，研究NIZK，研究secret sharing，这些密码学研究全都反"
"过来都跟证明P不等于NP密切相关。再反过来又可以做到直接基于P不等于NP假设（而不"
"是存在单向函数）的密码学。\n"
"\n"
"- https://www.quantamagazine.org/the-cryptographer-who-ensures-we-can-trust-"
"our-computers-20230727/\n"
"- https://www.quantamagazine.org/a-short-guide-to-hard-problems-20180716/\n"
"- [P vs. NP and the Computational Complexity Zoo](https://www.youtube.com/"
"watch?v=YX40hbAHx3s)\n"
"- https://www.quantamagazine.org/complexity-theorys-50-year-journey-to-the-"
"limits-of-knowledge-20230817/\n"
"\n"
"\n"
"单向函数存在（P不等于NP），则存在对NP的ZKP；单向函数不存在（且P=NP），则也存"
"在对NP的ZKP。\n"
"\n"
"前半句是GMW86原话。后半句：如果P=NP，又因为对P永远存在无条件的ZKP system，所"
"以也存在无条件的对NP的证明系统。\n"
"\n"
"所以ZKP恰恰是少数无论P是否等于NP都存在的密码学协议。OTP也是。还有所有的「信息"
"论安全密码学」。而大多数需要单向函数的密码协议，都活在Minicrypt之后。\n"
"\n"
"这个才是需要展开说说的。但上次随便一讲都讲了两个半小时，还只讲了一条线，耽误"
"大家吃饭都[Facepalm]\n"
"\n"
"所以是不是可以理解为，只要有P问题的存在，就存在密码学协议\n"
"我不知道密码学协议的定义，所以没法讨论\n"
"\n"
"对P问题的零知识证明系统trivial的无条件存在，这个证明系统就一个特点：完全无视"
"prover\n"
"\n"
"赶紧学lattice吧\n"
"```"

#: src/materials/ZK-Materials.md:591
msgid "请教大家一个问题，SumCheck 没有办法转成非交互式的zk 证明吧？"
msgstr "请教大家一个问题，SumCheck 没有办法转成非交互式的zk 证明吧？"

#: src/materials/ZK-Materials.md:593
msgid ""
"如果不强调非交互可以看这篇 https://arxiv.org/pdf/1704.02086.pdf  如果强调非交"
"互，就要小心绕过一个结论：一个零知识的public coin的交互式协议是不能应用Fiat-"
"Shair转换为非交互的，soundness不能保证。"
msgstr ""
"如果不强调非交互可以看这篇 https://arxiv.org/pdf/1704.02086.pdf  如果强调非交"
"互，就要小心绕过一个结论：一个零知识的public coin的交互式协议是不能应用Fiat-"
"Shair转换为非交互的，soundness不能保证。"

#: src/materials/ZK-Materials.md:595
msgid "这句话难懂，pan老师这个有文章说明么"
msgstr "这句话难懂，pan老师这个有文章说明么"

#: src/materials/ZK-Materials.md:597
msgid ""
"例子应该是 Barak01 的 non-blackbox simulation里的协议。上次Deng Yi老师讲的 就"
"是说过早达到 zk 性质对 fs 并非好事"
msgstr ""
"例子应该是 Barak01 的 non-blackbox simulation里的协议。上次Deng Yi老师讲的 就"
"是说过早达到 zk 性质对 fs 并非好事"

#: src/materials/ZK-Materials.md:600
msgid ""
"我的理解在 sumcheck 中，每一轮需 verifier 提供随机数给prover，prover计算g_i"
"（x）并发给verifier，这个计算 "
msgstr ""
"我的理解在 sumcheck 中，每一轮需 verifier 提供随机数给prover，prover计算g_i"
"（x）并发给verifier，这个计算 "

#: src/materials/ZK-Materials.md:600
msgid " 的过程 verifier 做不了，所以必须要交互"
msgstr " 的过程 verifier 做不了，所以必须要交互"

#: src/materials/ZK-Materials.md:601
msgid ""
"没有让verifier做prover工作的。转非交互的思路是把verifier的工作（发随机数）让"
"prover做（用哈希）。"
msgstr ""
"没有让verifier做prover工作的。转非交互的思路是把verifier的工作（发随机数）让"
"prover做（用哈希）。"

#: src/materials/ZK-Materials.md:602
msgid "非交互这个词也不好，非交互不是没有交互，而是单向一轮交互"
msgstr "非交互这个词也不好，非交互不是没有交互，而是单向一轮交互"

#: src/materials/ZK-Materials.md:603
msgid ""
"在 sumcheck 的 step3 Verifier  checks that the partial sum and total sum "
"agree when the partial sum is evaluated at 0 and 1 and its outputs added。"
msgstr ""
"在 sumcheck 的 step3 Verifier  checks that the partial sum and total sum "
"agree when the partial sum is evaluated at 0 and 1 and its outputs added。"

#: src/materials/ZK-Materials.md:605
msgid ""
"按照 https://semiotic.ai/articles/sumcheck-tutorial/ 中的描述只有verifier 验"
"证partial sum 和total sum 的结果才能发送随机数"
msgstr ""
"按照 https://semiotic.ai/articles/sumcheck-tutorial/ 中的描述只有verifier 验"
"证partial sum 和total sum 的结果才能发送随机数"

#: src/materials/ZK-Materials.md:611
msgid ""
"@Po 首先plonk是有不同版本的，最初的 plonk 论文是vanilla plonk(只包含加法门和"
"乘法门)，再到后来的turboplonk等(支持自定义门)发展的plonkish。我的理解是circom"
"本来设计之初就是为了支持R1CS，只不过 r1cs 可以很容易的转换为vanilla plonk; "
"halo2一开始设计就是针对plonkish + lookup的。所以circom要支持plonkish整个代码"
"设计就要重新调整"
msgstr ""
"@Po 首先plonk是有不同版本的，最初的 plonk 论文是vanilla plonk(只包含加法门和"
"乘法门)，再到后来的turboplonk等(支持自定义门)发展的plonkish。我的理解是circom"
"本来设计之初就是为了支持R1CS，只不过 r1cs 可以很容易的转换为vanilla plonk; "
"halo2一开始设计就是针对plonkish + lookup的。所以circom要支持plonkish整个代码"
"设计就要重新调整"

#: src/materials/ZK-Materials.md:616
msgid "Twitter Sapce & info flow"
msgstr "Twitter Sapce & info flow"

#: src/materials/ZK-Materials.md:618
msgid "https://twitter.com/i/spaces/1ynJOaMnBlOKR"
msgstr "https://twitter.com/i/spaces/1ynJOaMnBlOKR"

#: src/materials/ZK-Materials.md:619
msgid ""
"[zkp twitter space 202309201217 ](./imgs/202309201217-zkp-twitter-space.pdf) "
"https://www.proofoftrack.xyz/ 还有Suning的newsletter，小伙子精力旺盛，新link"
"整理得很快"
msgstr ""
"[zkp twitter space 202309201217 ](./imgs/202309201217-zkp-twitter-space.pdf) "
"https://www.proofoftrack.xyz/ 还有Suning的newsletter，小伙子精力旺盛，新link"
"整理得很快"

#: src/materials/ZK-Materials.md:623
msgid ""
"郭老师推： https://twitter.com/1dot2 邹老师博： https://blog.csdn.net/"
"mutourend 论文看我的这个： https://zk.cryptography.land/  zkmesh: https://"
"zkmesh.substack.com/ 自定义Twitter Threads：比如我这个 https://twitter.com/i/"
"lists/1522499398210531329 项目方的博客（这个很多，看几篇看对不对胃口，调整） "
"Youtube：PSE/a16z/Eth Global etc podcast: https://zeroknowledge.fm/"
msgstr ""
"郭老师推： https://twitter.com/1dot2 邹老师博： https://blog.csdn.net/"
"mutourend 论文看我的这个： https://zk.cryptography.land/  zkmesh: https://"
"zkmesh.substack.com/ 自定义Twitter Threads：比如我这个 https://twitter.com/i/"
"lists/1522499398210531329 项目方的博客（这个很多，看几篇看对不对胃口，调整） "
"Youtube：PSE/a16z/Eth Global etc podcast: https://zeroknowledge.fm/"

#: src/materials/ZK-Materials.md:632
msgid "以上所有内容（包括Twitter List）均可RSS订阅，且建议使用RSS订阅"
msgstr "以上所有内容（包括Twitter List）均可RSS订阅，且建议使用RSS订阅"

#: src/materials/ZK-Materials.md:634
msgid ""
"项目程序一手信息几乎唯一的选择：Github 论文的话 https://eprint.iacr.org/  又"
"想起来这个重要的标准化组织（很少被提起但里面有好东西）： https://zkproof."
"org/ 比如  https://docs.zkproof.org/presentations 沙漏老师的feed : https://"
"github.com/PrimitivesLane/PrimitivesFeed 一个中科院数学所的学生做的密码学链接"
"聚合网  https://link.fffmath.com/ 泛web3终极聚合器RAW： https://twitter.com/"
"nake13/status/1526852356402745346"
msgstr ""
"项目程序一手信息几乎唯一的选择：Github 论文的话 https://eprint.iacr.org/  又"
"想起来这个重要的标准化组织（很少被提起但里面有好东西）： https://zkproof."
"org/ 比如  https://docs.zkproof.org/presentations 沙漏老师的feed : https://"
"github.com/PrimitivesLane/PrimitivesFeed 一个中科院数学所的学生做的密码学链接"
"聚合网  https://link.fffmath.com/ 泛web3终极聚合器RAW： https://twitter.com/"
"nake13/status/1526852356402745346"

#: src/materials/ZK-Materials.md:642
msgid "forum: https://ethresear.ch/ https://zkresear.ch/"
msgstr "forum: https://ethresear.ch/ https://zkresear.ch/"

#: src/materials/ZK-Materials.md:647
msgid "Interdisciplinarity"
msgstr "Interdisciplinarity"

#: src/materials/ZK-Materials.md:649
msgid "AI:"
msgstr "AI:"

#: src/materials/ZK-Materials.md:650
msgid ""
"[A hacker's guide to Language Models(1)](https://github.com/fastai/lm-"
"hackers/blob/main/lm-hackers.ipynb)"
msgstr ""
"[A hacker's guide to Language Models(1)](https://github.com/fastai/lm-"
"hackers/blob/main/lm-hackers.ipynb)"

#: src/materials/ZK-Materials.md:651
msgid ""
"[A hacker's guide to Language Models(2)](https://www.youtube.com/watch?"
"v=jkrNMKz9pWU)"
msgstr ""
"[A hacker's guide to Language Models(2)](https://www.youtube.com/watch?"
"v=jkrNMKz9pWU)"

#: src/materials/ZK-Materials.md:653
msgid "Math:"
msgstr "Math:"

#: src/materials/ZK-Materials.md:654
msgid ""
"[The-Art-of-Linear-Algebra](https://github.com/kenjihiranabe/The-Art-of-"
"Linear-Algebra)"
msgstr ""
"[The-Art-of-Linear-Algebra](https://github.com/kenjihiranabe/The-Art-of-"
"Linear-Algebra)"

#: src/materials/ZK-Materials.md:655
msgid "[Animation vs. Math](https://www.youtube.com/watch?v=B1J6Ou4q8vE)"
msgstr "[Animation vs. Math](https://www.youtube.com/watch?v=B1J6Ou4q8vE)"

#: src/materials/ZK-Materials.md:658
msgid ""
"[^1] 巨量资料 FYI，大部分出自网络及群聊整理，时间有限出处 没有做细致排版，请"
"恕无法极尽详实覆盖，如需加上出处请联系作者 ~"
msgstr ""
"[^1] 巨量资料 FYI，大部分出自网络及群聊整理，时间有限出处 没有做细致排版，请"
"恕无法极尽详实覆盖，如需加上出处请联系作者 ~"

#: src/exp/guoyu.md:5
msgid "演讲：郭宇，安比实验室创始人兼 CEO"
msgstr "演讲：郭宇，安比实验室创始人兼 CEO"

#: src/exp/guoyu.md:7
msgid "整理：Amber，Foresight News"
msgstr "整理：Amber，Foresight News"

#: src/exp/guoyu.md:11
msgid ""
"今天我主要是跟大家分享一下关于 ZK 的学习心得和一点体会。因为在以太坊接下来的"
"几个升级中，都包含了很多最新的 ZKP 或者是 zkSNARK 的技术。最近有很多人在学习"
"这些知识，我们也参加了一些公学的小组，在这里深度讲一下其中很共性的问题。"
msgstr ""
"今天我主要是跟大家分享一下关于 ZK 的学习心得和一点体会。因为在以太坊接下来的"
"几个升级中，都包含了很多最新的 ZKP 或者是 zkSNARK 的技术。最近有很多人在学习"
"这些知识，我们也参加了一些公学的小组，在这里深度讲一下其中很共性的问题。"

#: src/exp/guoyu.md:15
msgid "Why ZKP or zkSNARK？"
msgstr "Why ZKP or zkSNARK？"

#: src/exp/guoyu.md:18
msgid ""
"首先我们能感受到 ZK 的项目是很 FOMO 的，我更想从技术层面讲一下我们为什么要有 "
"ZKP 和 zkSNARK。当然，它自身本来就是密码学里一个非常重要的分支，但我认为它在"
"以太坊的发展过程中发现这个东西异常强大，包括 Vitalik 自身也做过一些布道的工"
"作，所以说得到了非常长足的发展，也解决了以太坊未来的发展途径。"
msgstr ""
"首先我们能感受到 ZK 的项目是很 FOMO 的，我更想从技术层面讲一下我们为什么要有 "
"ZKP 和 zkSNARK。当然，它自身本来就是密码学里一个非常重要的分支，但我认为它在"
"以太坊的发展过程中发现这个东西异常强大，包括 Vitalik 自身也做过一些布道的工"
"作，所以说得到了非常长足的发展，也解决了以太坊未来的发展途径。"

#: src/exp/guoyu.md:22
msgid ""
"从最早期的 Sharding 发展到现在以 Rollup 为中心的新方向上，我认为 zkSNARK 或 "
"ZKP 在其中起到了非常重要的作用。在我看来，首先它是「产生信任的机制」。比特币"
"为我们带来的，像共识协、POW 协议和一些分布式算法，能够产生一些信任，但这种信"
"任是有存在 51% 诚实的前提假设的。另一种是我在从事区块链相关研究之前，做了十几"
"年的 formal logic 和 formal verification 的工作，本质上是通过 formal logic 保"
"证代码的执行满足某种预期，但我认为这也是一种信任，只不过它的假设是通过逻辑系"
"统本身的一致性去保证信任。ZKP 和 zkSNARK 是我第一眼看到的时候，就觉得和我研究"
"了很长时间的领域不一样的信任创造方式，因为他们从另外一个角度，几乎正交地提供"
"了另外一种创造信任的方式，就是通过交互进行概率性证明，同时提供信任。正如 "
"Vitalik 所说，他们是正交于共识协议的另外一种非常重要的区块链核心技术。"
msgstr ""
"从最早期的 Sharding 发展到现在以 Rollup 为中心的新方向上，我认为 zkSNARK 或 "
"ZKP 在其中起到了非常重要的作用。在我看来，首先它是「产生信任的机制」。比特币"
"为我们带来的，像共识协、POW 协议和一些分布式算法，能够产生一些信任，但这种信"
"任是有存在 51% 诚实的前提假设的。另一种是我在从事区块链相关研究之前，做了十几"
"年的 formal logic 和 formal verification 的工作，本质上是通过 formal logic 保"
"证代码的执行满足某种预期，但我认为这也是一种信任，只不过它的假设是通过逻辑系"
"统本身的一致性去保证信任。ZKP 和 zkSNARK 是我第一眼看到的时候，就觉得和我研究"
"了很长时间的领域不一样的信任创造方式，因为他们从另外一个角度，几乎正交地提供"
"了另外一种创造信任的方式，就是通过交互进行概率性证明，同时提供信任。正如 "
"Vitalik 所说，他们是正交于共识协议的另外一种非常重要的区块链核心技术。"

#: src/exp/guoyu.md:26
msgid ""
"第二点我觉得可能很少有人提到，但是我认为是非常重要的，就是可组合性。我们听到"
"这个词大概是 19 年，以太坊还处在 DeFi 早期探索过程中的时候，大家提出来的概"
"念。因为以太坊上的所有智能合约都部署在一个平台上，这些合约之间可以没有任何调"
"用的障碍和壁垒，就像没有农田里没有横亘在里面的篱笆一样。正是这种可以无障碍调"
"用的可组合性让 DeFi 有了现在这样的繁荣。虽然可组合性不是一个特定的编程语言，"
"但它是一种更高维度的编程，是一种可编程的手段，本质上是更抽象的编程。其实在 "
"zkSNARK 里，可组合性是肉眼可见的。且不用说最近两年 zkSNARK 技术本身的发展，当"
"我们去看 paper 的时候，我们已经可以非常清晰地看到一个协议，是通过很多子协议的"
"排列组合构造出来的，并且这种可组合性以肉眼可见的速度扩大，这也就意味着 "
"zkSNARK 不再是我们想象中的某一种算法，比如 Groth16 或者 PlonK。它们本身也很复"
"杂，拆开来看，每个算法都由一些精巧的小组件构成，这些精妙的算法之间又可以构成"
"一个更大一点的协议，甚至比我的描述更加复杂，它不是严格的、有层级的划分，它甚"
"至更灵活一些。"
msgstr ""
"第二点我觉得可能很少有人提到，但是我认为是非常重要的，就是可组合性。我们听到"
"这个词大概是 19 年，以太坊还处在 DeFi 早期探索过程中的时候，大家提出来的概"
"念。因为以太坊上的所有智能合约都部署在一个平台上，这些合约之间可以没有任何调"
"用的障碍和壁垒，就像没有农田里没有横亘在里面的篱笆一样。正是这种可以无障碍调"
"用的可组合性让 DeFi 有了现在这样的繁荣。虽然可组合性不是一个特定的编程语言，"
"但它是一种更高维度的编程，是一种可编程的手段，本质上是更抽象的编程。其实在 "
"zkSNARK 里，可组合性是肉眼可见的。且不用说最近两年 zkSNARK 技术本身的发展，当"
"我们去看 paper 的时候，我们已经可以非常清晰地看到一个协议，是通过很多子协议的"
"排列组合构造出来的，并且这种可组合性以肉眼可见的速度扩大，这也就意味着 "
"zkSNARK 不再是我们想象中的某一种算法，比如 Groth16 或者 PlonK。它们本身也很复"
"杂，拆开来看，每个算法都由一些精巧的小组件构成，这些精妙的算法之间又可以构成"
"一个更大一点的协议，甚至比我的描述更加复杂，它不是严格的、有层级的划分，它甚"
"至更灵活一些。"

#: src/exp/guoyu.md:30
msgid ""
"这些可组合性的发展、爆炸很有可能带来新的空间。而且这个空间能有多大？我觉得基"
"本上可以说大到无法想象，尤其是最近一两年关于递归零知识证明技术的一些突破，带"
"来了非常大的创新空间。而至于它是不是下一个「big thing」，我觉得冠上「之一」，"
"可能是一个比较稳妥保守的说法，但我仍然觉得这是一个非常让人激动的领域，尤其是"
"在 Blockchain 或 Crypto 的圈子之外，目前注意到的人还很少，因此我觉得这是非常"
"好的机会。"
msgstr ""
"这些可组合性的发展、爆炸很有可能带来新的空间。而且这个空间能有多大？我觉得基"
"本上可以说大到无法想象，尤其是最近一两年关于递归零知识证明技术的一些突破，带"
"来了非常大的创新空间。而至于它是不是下一个「big thing」，我觉得冠上「之一」，"
"可能是一个比较稳妥保守的说法，但我仍然觉得这是一个非常让人激动的领域，尤其是"
"在 Blockchain 或 Crypto 的圈子之外，目前注意到的人还很少，因此我觉得这是非常"
"好的机会。"

#: src/exp/guoyu.md:34
msgid ""
"说到体会，我先谈一谈我自己是如何入坑开始做 ZK 研究的。首先，我在 17 年买了很"
"多 Zcash（ZEC），当然，从投资回报角度来看，这就是非常糟糕的一笔投资。但我觉得"
"也正是这个举动让我深入地了解 zkSNARK，并不务正业地用业余时间读了一些东西，但"
"我发现非常难懂。当时网上也很少这样的文章能作参考。同时当我去翻传统密码学的书"
"时，也失望地发现几乎都没有提及到这类知识。"
msgstr ""
"说到体会，我先谈一谈我自己是如何入坑开始做 ZK 研究的。首先，我在 17 年买了很"
"多 Zcash（ZEC），当然，从投资回报角度来看，这就是非常糟糕的一笔投资。但我觉得"
"也正是这个举动让我深入地了解 zkSNARK，并不务正业地用业余时间读了一些东西，但"
"我发现非常难懂。当时网上也很少这样的文章能作参考。同时当我去翻传统密码学的书"
"时，也失望地发现几乎都没有提及到这类知识。"

#: src/exp/guoyu.md:38
msgid ""
"在一些国外的教材里面，可能在整个教科书的最后一章会花两三页讲解一下，就已经很"
"不错了。但很幸运的是，我在 2017 年年底发现了 Dan Boneh 和 Victor Shuop 写的教"
"材，虽然还没有完全写完，却已经出现了一部分关于 zkSNARK 的讲解。我觉得如获至"
"宝，因为在资料很少的情况下，居然有一本书能从最简单的概念讲起，这本教材我认为"
"是非常好的密码学入门教材。于是在 18 年的时候，我就开始慢慢读那本书，学习一些"
"基本概念。"
msgstr ""
"在一些国外的教材里面，可能在整个教科书的最后一章会花两三页讲解一下，就已经很"
"不错了。但很幸运的是，我在 2017 年年底发现了 Dan Boneh 和 Victor Shuop 写的教"
"材，虽然还没有完全写完，却已经出现了一部分关于 zkSNARK 的讲解。我觉得如获至"
"宝，因为在资料很少的情况下，居然有一本书能从最简单的概念讲起，这本教材我认为"
"是非常好的密码学入门教材。于是在 18 年的时候，我就开始慢慢读那本书，学习一些"
"基本概念。"

#: src/exp/guoyu.md:42
msgid ""
"然后在 18 年年底到 19 年的一整年中，我们创立了安比实验室，早期我们一直在做 "
"smart contract audit，去帮一些朋友解决智能合约的安全问题，但是我们同时还是用"
"了大量的时间去学习基础的密码学知识。在 19 年我们开始着手做一个用于 data "
"trading 的协议，叫做 zkPoD。20 年，我们讲之前的工作总结了一下并发表在了 "
"CCS2021 上，也得到了一些密码学学者的帮助。而在 2021 年之后，因为整个密码学领"
"域发展太快了，我们的很多想法跟不上整个领域的理论工具的发展速度，所以我们之前"
"的工作就暂停了。那时候真的特别感慨，我们之前面临的很多技术困难，很快就会被人"
"解决，甚至还有好多种解决办法，我们就不得不去看全这些解决方案，可能还没有完全"
"理解，又有新的工具被创造出来。所以说我们这几年基本上都在不断学习，学习速度还"
"远远赶不上创新的速度，说这是一个寒武纪大爆炸，我觉得一点都不夸张。我觉得它的"
"威力可能不亚于 ChatGPT 对整个社会的影响，只是说现在还没有那么明显，没有特别杀"
"手级应用出来，但我觉得这个是必然的。"
msgstr ""
"然后在 18 年年底到 19 年的一整年中，我们创立了安比实验室，早期我们一直在做 "
"smart contract audit，去帮一些朋友解决智能合约的安全问题，但是我们同时还是用"
"了大量的时间去学习基础的密码学知识。在 19 年我们开始着手做一个用于 data "
"trading 的协议，叫做 zkPoD。20 年，我们讲之前的工作总结了一下并发表在了 "
"CCS2021 上，也得到了一些密码学学者的帮助。而在 2021 年之后，因为整个密码学领"
"域发展太快了，我们的很多想法跟不上整个领域的理论工具的发展速度，所以我们之前"
"的工作就暂停了。那时候真的特别感慨，我们之前面临的很多技术困难，很快就会被人"
"解决，甚至还有好多种解决办法，我们就不得不去看全这些解决方案，可能还没有完全"
"理解，又有新的工具被创造出来。所以说我们这几年基本上都在不断学习，学习速度还"
"远远赶不上创新的速度，说这是一个寒武纪大爆炸，我觉得一点都不夸张。我觉得它的"
"威力可能不亚于 ChatGPT 对整个社会的影响，只是说现在还没有那么明显，没有特别杀"
"手级应用出来，但我觉得这个是必然的。"

#: src/exp/guoyu.md:46
msgid ""
"另一点感想就是，在早期的时候，我们读的资料都是来源于学术界，来自于专门长期从"
"事密码学理论研究的教授和专家学者的论文。但是从 2020 年往后，我们其实发现大量"
"资料来源于工业界的工程师。因为在 Crypto 领域，大家迫切的想要使用密码学去解决 "
"Blockchain 和 Crypto 中非常核心的问题，有些快速的工程应用甚至领先了理论的发"
"展。我就举几个例子，首先是 Halo，Halo 最早是由 Zcash 团队创造出来的，然后学术"
"界从中获得了启发发展出了 accumulation scheme，包括最新的在递归零知识证明里非"
"常重要的技术。它最早的起点就是在工程实践中发现的一些一开始不起眼的一些小规"
"律。"
msgstr ""
"另一点感想就是，在早期的时候，我们读的资料都是来源于学术界，来自于专门长期从"
"事密码学理论研究的教授和专家学者的论文。但是从 2020 年往后，我们其实发现大量"
"资料来源于工业界的工程师。因为在 Crypto 领域，大家迫切的想要使用密码学去解决 "
"Blockchain 和 Crypto 中非常核心的问题，有些快速的工程应用甚至领先了理论的发"
"展。我就举几个例子，首先是 Halo，Halo 最早是由 Zcash 团队创造出来的，然后学术"
"界从中获得了启发发展出了 accumulation scheme，包括最新的在递归零知识证明里非"
"常重要的技术。它最早的起点就是在工程实践中发现的一些一开始不起眼的一些小规"
"律。"

#: src/exp/guoyu.md:50
msgid ""
"第二个就是 PlonKish Arithmetization，最早也是在工业应用领域从 Aztec 团队慢慢"
"发展起来的，之前有很多 code，但是它真正的理论研究是后来逐步补上的。但现在为止"
"基本上以 PlonKish Arithmetization 为主导的很多学术研究已经慢慢扩散开来了。很"
"像我右边图上的几棵树，当然这几棵树我只是借用了 slides 中的，zkSNARK 就像一棵"
"很大的树，并且在不断成长，于是就有了 zkEVM 和 zkVM 这样的概念。我经常感慨在 "
"19 年，预想 zkEVM 或者 zkRollup 之类的概念，都要是 10 年之后才有可能出现的东"
"西，因为在当时我们能感受到 zkSNARK 能做的应用是非常有限的。但是没想到这三年"
"来，Halo 和 PlonKish 的发展能够让 zkEVM 基本上成为现实。这是非常恐怖的，包括"
"像 Lookup Arugment 还有一些很有意思的技术，反过来对学术界都有很大的推动能力。"
msgstr ""
"第二个就是 PlonKish Arithmetization，最早也是在工业应用领域从 Aztec 团队慢慢"
"发展起来的，之前有很多 code，但是它真正的理论研究是后来逐步补上的。但现在为止"
"基本上以 PlonKish Arithmetization 为主导的很多学术研究已经慢慢扩散开来了。很"
"像我右边图上的几棵树，当然这几棵树我只是借用了 slides 中的，zkSNARK 就像一棵"
"很大的树，并且在不断成长，于是就有了 zkEVM 和 zkVM 这样的概念。我经常感慨在 "
"19 年，预想 zkEVM 或者 zkRollup 之类的概念，都要是 10 年之后才有可能出现的东"
"西，因为在当时我们能感受到 zkSNARK 能做的应用是非常有限的。但是没想到这三年"
"来，Halo 和 PlonKish 的发展能够让 zkEVM 基本上成为现实。这是非常恐怖的，包括"
"像 Lookup Arugment 还有一些很有意思的技术，反过来对学术界都有很大的推动能力。"

#: src/exp/guoyu.md:54
msgid ""
"第三点就是这整个过程是非常愉悦的，不管里面遇到了多大的困难，或者是解决了一些"
"小问题所带来的成就感，都让我们感到非常有趣。"
msgstr ""
"第三点就是这整个过程是非常愉悦的，不管里面遇到了多大的困难，或者是解决了一些"
"小问题所带来的成就感，都让我们感到非常有趣。"

#: src/exp/guoyu.md:58
msgid ""
"我觉得绝大多数人对这个东西的印象就是特别难学的月球数学，但实际上从我们的经历"
"来看其实也不是那样。"
msgstr ""
"我觉得绝大多数人对这个东西的印象就是特别难学的月球数学，但实际上从我们的经历"
"来看其实也不是那样。"

#: src/exp/guoyu.md:62
msgid ""
"它其实要求的前置数学基础并不多，但它最难的部分其实是关键概念超级多，而且这些"
"概念还在随着时间演化，也就是说你可能从别人嘴里听来了，或者在某个地方讲到的，"
"或者是在一个文档里看到的东西，过了 3 年之后可能需要重新去审视它，它又可能表述"
"都不一定准确，或者是它在表达另外一层意思。"
msgstr ""
"它其实要求的前置数学基础并不多，但它最难的部分其实是关键概念超级多，而且这些"
"概念还在随着时间演化，也就是说你可能从别人嘴里听来了，或者在某个地方讲到的，"
"或者是在一个文档里看到的东西，过了 3 年之后可能需要重新去审视它，它又可能表述"
"都不一定准确，或者是它在表达另外一层意思。"

#: src/exp/guoyu.md:66
msgid ""
"第二个就是协议相对复杂，因为它属于密码学协议，可以说密码学这个分支，整个大方"
"向上都是属于内部协议比较复杂的这类，于是它的形式化定义特别多。不同的学者去写"
"形式化定义使用的符号体系也不尽相同，公式也是量多且复杂，即使背了也记不住，可"
"能睡一觉醒来就忘。"
msgstr ""
"第二个就是协议相对复杂，因为它属于密码学协议，可以说密码学这个分支，整个大方"
"向上都是属于内部协议比较复杂的这类，于是它的形式化定义特别多。不同的学者去写"
"形式化定义使用的符号体系也不尽相同，公式也是量多且复杂，即使背了也记不住，可"
"能睡一觉醒来就忘。"

#: src/exp/guoyu.md:70
msgid ""
"第三点是，核心代码很短，但内部结构足够复杂，密码学有一个很有意思的点，就是你"
"无法通过看代码去学习算法，因为你看他弄来弄去，都不知道他想干什么，还是需要一"
"些理论的指引才能读懂代码。"
msgstr ""
"第三点是，核心代码很短，但内部结构足够复杂，密码学有一个很有意思的点，就是你"
"无法通过看代码去学习算法，因为你看他弄来弄去，都不知道他想干什么，还是需要一"
"些理论的指引才能读懂代码。"

#: src/exp/guoyu.md:74
msgid ""
"第四点就是，很多朋友还是会按照论文上的算法去实现一遍，但能实现就证明真的懂了"
"吗？这显然还是相去甚远的，这个我们会稍后讨论的。"
msgstr ""
"第四点就是，很多朋友还是会按照论文上的算法去实现一遍，但能实现就证明真的懂了"
"吗？这显然还是相去甚远的，这个我们会稍后讨论的。"

#: src/exp/guoyu.md:78
msgid ""
"零知识证明的学习曲线还是相对陡峭的，陡峭的原因并不在于 zkSNARK 或 ZKP 有多"
"难，而是在于，首先开发工具很缺乏，也就是说想直观地体验一下并不容易，还需要做"
"很多工作，去搜去看相关理论知识之后才能下手。第二就是学习资料其实更缺乏，现在"
"跟 4 年前相比还是多了很多资料的，但要知道资料的增加速度远远赶不上创新的速度，"
"也就是说有大量新的理论技术并没有被总结成文章，有的甚至都没有行文写下来，它们"
"存在一些系统的角落里，或者说它只有代码但没有理论。因为是寒武纪大爆发，导致了"
"学习资料相对更少，即便是需要的数学基础并不多，前置知识覆盖秒依然很广。所以有"
"些朋友认为自己数学不好，并不是根本性问题。还有一点是论文挺难看懂的，这是我在"
"早期学习时的感触，有些套路需要慢慢适应。"
msgstr ""
"零知识证明的学习曲线还是相对陡峭的，陡峭的原因并不在于 zkSNARK 或 ZKP 有多"
"难，而是在于，首先开发工具很缺乏，也就是说想直观地体验一下并不容易，还需要做"
"很多工作，去搜去看相关理论知识之后才能下手。第二就是学习资料其实更缺乏，现在"
"跟 4 年前相比还是多了很多资料的，但要知道资料的增加速度远远赶不上创新的速度，"
"也就是说有大量新的理论技术并没有被总结成文章，有的甚至都没有行文写下来，它们"
"存在一些系统的角落里，或者说它只有代码但没有理论。因为是寒武纪大爆发，导致了"
"学习资料相对更少，即便是需要的数学基础并不多，前置知识覆盖秒依然很广。所以有"
"些朋友认为自己数学不好，并不是根本性问题。还有一点是论文挺难看懂的，这是我在"
"早期学习时的感触，有些套路需要慢慢适应。"

#: src/exp/guoyu.md:82
msgid "一些心得和经验"
msgstr "一些心得和经验"

#: src/exp/guoyu.md:85
msgid "下面想给各位朋友再讲一些心得和经验。"
msgstr "下面想给各位朋友再讲一些心得和经验。"

#: src/exp/guoyu.md:89
msgid ""
"首先给第一类想要快速入门的新手朋友，或者说看过一些非常简单的概念，无论出于哪"
"种目的想要快速入门的朋友们。首先，有诀窍吗？诚实一点说时没有的，但确实可以把"
"几个地方作为切入点。其一，写代码是一件很重要的事，这里的代码可以分很多种，我"
"认为现在很多可用的 library 都是很不错的。比如 Circum，可以在网页端试着写一些"
"电路代码。第二类的 Halo2，我认为如果想要深入学习的话，可以用 Rust 吗，Halo2 "
"也恰好是 Rust 的一个 library，也是在社区中广泛使用的。现在以太坊基金会也在基"
"于 Halo2 进行一些工作，可以去看一下这个 library，并根据它去写一些基础的 demo "
"或者例子。第三个是 Gnark，是 Consensys 开发的用 go 语言写的库。如果你对 Rust "
"不熟悉或者没有写过 Rust 的话，可以优先选择 Gnark，因为它是用 Golang 写的，上"
"手更简单一些。最后，还有 zkSNARK 社区的 Cairo，虽然我自己没有写过 Cairo，但我"
"已经看到不少人已经成功启动了，所以我认为 Cairo 的效果应该是不错的。"
msgstr ""
"首先给第一类想要快速入门的新手朋友，或者说看过一些非常简单的概念，无论出于哪"
"种目的想要快速入门的朋友们。首先，有诀窍吗？诚实一点说时没有的，但确实可以把"
"几个地方作为切入点。其一，写代码是一件很重要的事，这里的代码可以分很多种，我"
"认为现在很多可用的 library 都是很不错的。比如 Circum，可以在网页端试着写一些"
"电路代码。第二类的 Halo2，我认为如果想要深入学习的话，可以用 Rust 吗，Halo2 "
"也恰好是 Rust 的一个 library，也是在社区中广泛使用的。现在以太坊基金会也在基"
"于 Halo2 进行一些工作，可以去看一下这个 library，并根据它去写一些基础的 demo "
"或者例子。第三个是 Gnark，是 Consensys 开发的用 go 语言写的库。如果你对 Rust "
"不熟悉或者没有写过 Rust 的话，可以优先选择 Gnark，因为它是用 Golang 写的，上"
"手更简单一些。最后，还有 zkSNARK 社区的 Cairo，虽然我自己没有写过 Cairo，但我"
"已经看到不少人已经成功启动了，所以我认为 Cairo 的效果应该是不错的。"

#: src/exp/guoyu.md:93
msgid ""
"关于代码围绕什么去写，我认为可以基于 KZG 多样式承诺、IPA、Baby SNARK、"
"Sumcheck 等非常简单的密码学协议，是可以做一些实现的。因为，实现了之后，可能会"
"获得一些教科书上所不能提供的很直观的概念。比如，代码运行的速度，对稍大一点的"
"例子电路是否能够正常使用，浏览器最大能承受的电路等等。"
msgstr ""
"关于代码围绕什么去写，我认为可以基于 KZG 多样式承诺、IPA、Baby SNARK、"
"Sumcheck 等非常简单的密码学协议，是可以做一些实现的。因为，实现了之后，可能会"
"获得一些教科书上所不能提供的很直观的概念。比如，代码运行的速度，对稍大一点的"
"例子电路是否能够正常使用，浏览器最大能承受的电路等等。"

#: src/exp/guoyu.md:97
msgid ""
"我觉得手动写代码这一方面，首先有助于大家理解很多概念，比如，到底什么是电路。"
"相信不少朋友都听说过电路，就是挺难写的，如果动手写一下电路就会发现，它其实不"
"算是在写正常的程序，而是在写一个证明过程，因为本身零知识证明就是一个证明过"
"程，因此写电路其实就是写证明，而非写计算。写证明的过程有一些特定的套路和经验"
"模式，这个需要慢慢熟悉和思考的。"
msgstr ""
"我觉得手动写代码这一方面，首先有助于大家理解很多概念，比如，到底什么是电路。"
"相信不少朋友都听说过电路，就是挺难写的，如果动手写一下电路就会发现，它其实不"
"算是在写正常的程序，而是在写一个证明过程，因为本身零知识证明就是一个证明过"
"程，因此写电路其实就是写证明，而非写计算。写证明的过程有一些特定的套路和经验"
"模式，这个需要慢慢熟悉和思考的。"

#: src/exp/guoyu.md:101
msgid ""
"第二个我觉得是有助于对运营效率有所感知，就是知道运行的速度能有多快，以及假如"
"说你想去 build 一个应用，他大概能用在什么地方。比如说你在以太坊一层的合约里做"
"一个电路的 verify，你大概需要多少 gas。事实上这些都是需要你实际操作完之后才能"
"有的一个初步印象。"
msgstr ""
"第二个我觉得是有助于对运营效率有所感知，就是知道运行的速度能有多快，以及假如"
"说你想去 build 一个应用，他大概能用在什么地方。比如说你在以太坊一层的合约里做"
"一个电路的 verify，你大概需要多少 gas。事实上这些都是需要你实际操作完之后才能"
"有的一个初步印象。"

#: src/exp/guoyu.md:105
msgid "第三个就是对协议借口、协议流程有一个基础的了解和大概的感觉。"
msgstr "第三个就是对协议借口、协议流程有一个基础的了解和大概的感觉。"

#: src/exp/guoyu.md:109
msgid ""
"第四个就是你能对基础的数学原理有初步的认识，但不需要去学很多，不需要去重新找"
"一本代数的书去翻，因为一本完整的教材包含太多内容了。我觉得通常情况下是没有必"
"要的，但是可以通过 Google 或者 ChatGPT 去快速学习一下基础的数据原理。直接通过"
"编程学习的话，感觉是完全不同的，特别是对于使用的参数、输出的结果，以及如何在"
"代码中 encode，用什么样的数据结构，都会有非常直接的认识和理解。"
msgstr ""
"第四个就是你能对基础的数学原理有初步的认识，但不需要去学很多，不需要去重新找"
"一本代数的书去翻，因为一本完整的教材包含太多内容了。我觉得通常情况下是没有必"
"要的，但是可以通过 Google 或者 ChatGPT 去快速学习一下基础的数据原理。直接通过"
"编程学习的话，感觉是完全不同的，特别是对于使用的参数、输出的结果，以及如何在"
"代码中 encode，用什么样的数据结构，都会有非常直接的认识和理解。"

#: src/exp/guoyu.md:113
msgid ""
"这里我想要推荐 zkiap.com 的课程，它是一个注重实践的简单代码学习课程，每周花点"
"时间就基本上可以慢慢明白是怎么一回事，推荐给所有能写代码的朋友们。"
msgstr ""
"这里我想要推荐 zkiap.com 的课程，它是一个注重实践的简单代码学习课程，每周花点"
"时间就基本上可以慢慢明白是怎么一回事，推荐给所有能写代码的朋友们。"

#: src/exp/guoyu.md:117
msgid ""
"但有些朋友可能会问，假如说我不会写代码，或者说我没有时间写代码，但是我仍然想"
"快速入门，那该怎么办呢。我认为第一点就是要准确地理解相关概念，所谓的准确理解"
"就不是一些模模糊糊的理解，比如，我们说零知识有 zero-knowledge，那么到底什么"
"是 knowledge？我觉得是需要搞很清楚的，这些关键概念搞得越清楚，看文章就会越顺"
"利，包括还有像 witness 这种概念。还有像 Random Oracle 还有 Commitment 之类的"
"概念。为了搞懂 Random Oracle 是什么，我前后可能花了一年时间去看各种东西，慢慢"
"尝试理解，但但是的资料很少，我觉得现在的资料已经足够丰富了，已经有一些教科书"
"能够吧这些概念讲的相当清楚了。然后还有一些概念，像 CRS、SRS 是什么，如何用 "
"Polynomial IOP 做一些 plunk 应用。其次像 extractability 还有 preprocessing，"
"这个适合具体应用开发相关的。我认为对这些基础概念有必要有非常精确的理解，如果"
"不是很理解或者模糊的话，我的建议是先去看这些概念，Google 和 ChatGPT 能够在这"
"里起到很大的作用。对于基本概念的掌握程度，我认为首先需要能看懂科普文章中的一"
"些密码，一些黑话。"
msgstr ""
"但有些朋友可能会问，假如说我不会写代码，或者说我没有时间写代码，但是我仍然想"
"快速入门，那该怎么办呢。我认为第一点就是要准确地理解相关概念，所谓的准确理解"
"就不是一些模模糊糊的理解，比如，我们说零知识有 zero-knowledge，那么到底什么"
"是 knowledge？我觉得是需要搞很清楚的，这些关键概念搞得越清楚，看文章就会越顺"
"利，包括还有像 witness 这种概念。还有像 Random Oracle 还有 Commitment 之类的"
"概念。为了搞懂 Random Oracle 是什么，我前后可能花了一年时间去看各种东西，慢慢"
"尝试理解，但但是的资料很少，我觉得现在的资料已经足够丰富了，已经有一些教科书"
"能够吧这些概念讲的相当清楚了。然后还有一些概念，像 CRS、SRS 是什么，如何用 "
"Polynomial IOP 做一些 plunk 应用。其次像 extractability 还有 preprocessing，"
"这个适合具体应用开发相关的。我认为对这些基础概念有必要有非常精确的理解，如果"
"不是很理解或者模糊的话，我的建议是先去看这些概念，Google 和 ChatGPT 能够在这"
"里起到很大的作用。对于基本概念的掌握程度，我认为首先需要能看懂科普文章中的一"
"些密码，一些黑话。"

#: src/exp/guoyu.md:121
msgid ""
"第二个是能够对 zkSNARK 有一个清晰的抽象的认识，也就是说能大概知道它是什么，能"
"用一句话去讲一下什么是 zkSNARK，而不是只是将它描述为一个 library，或者用一个"
"方式函数调用一下，或者说就是一段代码，真正的掌握是要比这些都再深入一层。第三"
"个就是如果好奇的同学或者有更多时间的朋友可以去看一下学术论文，如果第一节能看"
"懂的话，我觉得已经是相当不错了，这意味着很多密码学黑话都已经理解了。如果有一"
"些频繁出现的黑话不理解，就可以去 Google 或者 ChatGPT 弄明白，有些实在很难懂了"
"就可以先放一放。最后就是能初步理解 zkSNARK 的一些应用，如果能做到这一点的话，"
"对一个不会写代码的人，已经是对 zkSNARK 已经又了相当深的认识了。"
msgstr ""
"第二个是能够对 zkSNARK 有一个清晰的抽象的认识，也就是说能大概知道它是什么，能"
"用一句话去讲一下什么是 zkSNARK，而不是只是将它描述为一个 library，或者用一个"
"方式函数调用一下，或者说就是一段代码，真正的掌握是要比这些都再深入一层。第三"
"个就是如果好奇的同学或者有更多时间的朋友可以去看一下学术论文，如果第一节能看"
"懂的话，我觉得已经是相当不错了，这意味着很多密码学黑话都已经理解了。如果有一"
"些频繁出现的黑话不理解，就可以去 Google 或者 ChatGPT 弄明白，有些实在很难懂了"
"就可以先放一放。最后就是能初步理解 zkSNARK 的一些应用，如果能做到这一点的话，"
"对一个不会写代码的人，已经是对 zkSNARK 已经又了相当深的认识了。"

#: src/exp/guoyu.md:125
msgid ""
"接下来我说的这一类朋友，他们不满足于一些基础概念的理解，始终对内部工作原理感"
"到好奇，关于黑盒如何运行，为什么能 work，为什么能提供信任，他的信任又基于哪些"
"东西，应用条件是什么，等等。我这边的建议是，需要先充分理解一个算法代码，就是"
"先把一个算法吃透，其实非常重要。因为在算法之间就好比再学一个编程语言一样，如"
"果 Java 用得很熟练了，再去切换到其他语言，其实并没有很复杂。前提是，这个语言"
"需要用得特别熟练，如果只是浅浅地能写一些 Hello World，可能差距还比较大。我觉"
"得可以先针对一个算法，比如说我觉得像 PlonK 是首选的，因为它比 Groth16 简单很"
"多。PlonK 是我认为我见过的所有算法里最简单的，虽然 Groth16 的科普文章更多，但"
"事实上它是一个复杂难懂的算法。然后还可以选择 zkSTARK，Marlin，Spartan，他们的"
"对看论文的要求可能会更高一些。总之，我推荐先学 PlonK。"
msgstr ""
"接下来我说的这一类朋友，他们不满足于一些基础概念的理解，始终对内部工作原理感"
"到好奇，关于黑盒如何运行，为什么能 work，为什么能提供信任，他的信任又基于哪些"
"东西，应用条件是什么，等等。我这边的建议是，需要先充分理解一个算法代码，就是"
"先把一个算法吃透，其实非常重要。因为在算法之间就好比再学一个编程语言一样，如"
"果 Java 用得很熟练了，再去切换到其他语言，其实并没有很复杂。前提是，这个语言"
"需要用得特别熟练，如果只是浅浅地能写一些 Hello World，可能差距还比较大。我觉"
"得可以先针对一个算法，比如说我觉得像 PlonK 是首选的，因为它比 Groth16 简单很"
"多。PlonK 是我认为我见过的所有算法里最简单的，虽然 Groth16 的科普文章更多，但"
"事实上它是一个复杂难懂的算法。然后还可以选择 zkSTARK，Marlin，Spartan，他们的"
"对看论文的要求可能会更高一些。总之，我推荐先学 PlonK。"

#: src/exp/guoyu.md:129
msgid ""
"第二个就是去阅读一些 Github 上的开源代码，现在有非常非常多的有意思的项目，几"
"乎每两三天都能发现一个很不错的开源项目，并且代码质量不错，我在这里就不给大家"
"推荐了。"
msgstr ""
"第二个就是去阅读一些 Github 上的开源代码，现在有非常非常多的有意思的项目，几"
"乎每两三天都能发现一个很不错的开源项目，并且代码质量不错，我在这里就不给大家"
"推荐了。"

#: src/exp/guoyu.md:133
msgid ""
"第三个点就是如果你想了解内部工作原理的话，你不可避免地要去理解这些公式，但对"
"于初学者的最大问题是，公式无法理解或者并不能记住。我认为这里的核心窍门就是，"
"多抄公式。不停地重复抄公式，同时再思考，在这个过程中就会有神奇的力量，能让人"
"不知不觉中就明白了一些东西。"
msgstr ""
"第三个点就是如果你想了解内部工作原理的话，你不可避免地要去理解这些公式，但对"
"于初学者的最大问题是，公式无法理解或者并不能记住。我认为这里的核心窍门就是，"
"多抄公式。不停地重复抄公式，同时再思考，在这个过程中就会有神奇的力量，能让人"
"不知不觉中就明白了一些东西。"

#: src/exp/guoyu.md:137
msgid ""
"在这里推荐一个 MOOC，叫做 zk-learning.org，他们的课程深度不错，也会涉及到内部"
"的工作原理，也会用非常简单的语言去抽象地解释一个或者一类算法是如何工作的。我"
"认为如果能看懂并实现一个最简版本的代码并且能看懂 70% 的相关论文，且能不需要任"
"何辅助地手推公式，并能够大致理解 Soundness 思路，我觉得已经达到了理解 "
"zkSNARK 的要求了，但在这个阶段还是不要自行修改和优化协议，这是非常危险的动"
"作，除非有非常多的经验，否则千万不要自行修改优化协议，因为密码学协议中有非常"
"多没有写出来的东西。相关的反面教材有很多，我觉得最著名的就是 BCTV14，它是 14 "
"年的一篇论文，他们的论文在做了一次修改优化之后出了一个 bug，然后修了 bug 之后"
"又是一个 bug，而且都是非常严重的 bug，也就是说这些顶尖的密码学家都会犯这样的"
"问题，那更不要说一个初学者。对初学者而言，你可以自己去设计一个协议，但是你一"
"旦去修改别人的时候，你还要确保对这个东西有足够清晰的理解。"
msgstr ""
"在这里推荐一个 MOOC，叫做 zk-learning.org，他们的课程深度不错，也会涉及到内部"
"的工作原理，也会用非常简单的语言去抽象地解释一个或者一类算法是如何工作的。我"
"认为如果能看懂并实现一个最简版本的代码并且能看懂 70% 的相关论文，且能不需要任"
"何辅助地手推公式，并能够大致理解 Soundness 思路，我觉得已经达到了理解 "
"zkSNARK 的要求了，但在这个阶段还是不要自行修改和优化协议，这是非常危险的动"
"作，除非有非常多的经验，否则千万不要自行修改优化协议，因为密码学协议中有非常"
"多没有写出来的东西。相关的反面教材有很多，我觉得最著名的就是 BCTV14，它是 14 "
"年的一篇论文，他们的论文在做了一次修改优化之后出了一个 bug，然后修了 bug 之后"
"又是一个 bug，而且都是非常严重的 bug，也就是说这些顶尖的密码学家都会犯这样的"
"问题，那更不要说一个初学者。对初学者而言，你可以自己去设计一个协议，但是你一"
"旦去修改别人的时候，你还要确保对这个东西有足够清晰的理解。"

#: src/exp/guoyu.md:141
msgid ""
"接下来对于更高阶的朋友，可能你是在 build 自己的项目，想用 ZK 去解决一些必要性"
"的问题，需要自己设计协议。首先，我觉得你需要反反复复地读大量的论文。第二个就"
"是需要补最基础的计算理论，而不是代数或者射影几何，或是那些数学概念。我觉得这"
"里面其实最重要的是计算理论，我在这里推荐两本书，一本是《Computational "
"Complexity: A Modern Approach》，另一本是《Computational Complexity: A "
"Conceptual Perspective by Oded Goldreich》。第三点就是要跳出兔子洞，关注基本"
"问题。因为有些算法还是很深、很烧脑的，有时候需要在一个非常小的细节卡上好几个"
"月。但我觉得这里面的核心点是为了理解它为什么 work，有些时候你要跳到最外面来问"
"一些最简单、最直接也最基础的问题，再去反思这个细节。就是你需要不断进到一个非"
"常小的细节，同时又要不断地跳到外面去反复对比思考，这样就很容易弄懂这一点细枝"
"末节的东西。第四个就是逆向思考，因为很多协议的设计是非常精巧的，有时候需要我"
"们去理解而不是简单地 follow。但事实上理解又是一件很困难的事，多数情况下我在理"
"解算法的过程中所用到的方法论是逆向思考，也就是说如果将原来的算法换成另外一"
"种，又会产生怎样的效果。大多数情况下，它是不 work 的，那么它为什么不 work？这"
"是很重要的。"
msgstr ""
"接下来对于更高阶的朋友，可能你是在 build 自己的项目，想用 ZK 去解决一些必要性"
"的问题，需要自己设计协议。首先，我觉得你需要反反复复地读大量的论文。第二个就"
"是需要补最基础的计算理论，而不是代数或者射影几何，或是那些数学概念。我觉得这"
"里面其实最重要的是计算理论，我在这里推荐两本书，一本是《Computational "
"Complexity: A Modern Approach》，另一本是《Computational Complexity: A "
"Conceptual Perspective by Oded Goldreich》。第三点就是要跳出兔子洞，关注基本"
"问题。因为有些算法还是很深、很烧脑的，有时候需要在一个非常小的细节卡上好几个"
"月。但我觉得这里面的核心点是为了理解它为什么 work，有些时候你要跳到最外面来问"
"一些最简单、最直接也最基础的问题，再去反思这个细节。就是你需要不断进到一个非"
"常小的细节，同时又要不断地跳到外面去反复对比思考，这样就很容易弄懂这一点细枝"
"末节的东西。第四个就是逆向思考，因为很多协议的设计是非常精巧的，有时候需要我"
"们去理解而不是简单地 follow。但事实上理解又是一件很困难的事，多数情况下我在理"
"解算法的过程中所用到的方法论是逆向思考，也就是说如果将原来的算法换成另外一"
"种，又会产生怎样的效果。大多数情况下，它是不 work 的，那么它为什么不 work？这"
"是很重要的。"

#: src/exp/guoyu.md:145
msgid ""
"最后，给大家说一下读论文的心得，因为论文确实比较难读，都是些非常学术的文章。"
"第一，请务必反复仔细阅读论文第一节，因为论文第一节通常是论文最精华的部分，他"
"通常描述了这篇论文最主要的贡献，包括他和前人的不同以及他的新协议或者新算法最"
"重要的特点。通过读很多论文的第一节，能够快速找到一个知识网络。"
msgstr ""
"最后，给大家说一下读论文的心得，因为论文确实比较难读，都是些非常学术的文章。"
"第一，请务必反复仔细阅读论文第一节，因为论文第一节通常是论文最精华的部分，他"
"通常描述了这篇论文最主要的贡献，包括他和前人的不同以及他的新协议或者新算法最"
"重要的特点。通过读很多论文的第一节，能够快速找到一个知识网络。"

#: src/exp/guoyu.md:149
msgid ""
"第二点就是，你需要把论文的参考文献这几页，特地打出来，有助于形成一个知识网"
"络，就可以沿着参考文献，找到更多的资料，而不单纯是通过 Google 或者 ChatGPT，"
"而是通过这个论文所依赖的前置论文，形成一套理解体系。"
msgstr ""
"第二点就是，你需要把论文的参考文献这几页，特地打出来，有助于形成一个知识网"
"络，就可以沿着参考文献，找到更多的资料，而不单纯是通过 Google 或者 ChatGPT，"
"而是通过这个论文所依赖的前置论文，形成一套理解体系。"

#: src/exp/guoyu.md:153
msgid ""
"第三点是要从历史的角度看概念的变迁、算法的演化和技巧的组合，这里面能发现非常"
"非常有意思的故事。我觉得也可以找机会和大家分享一下，但这需要很多时间去准备。"
"虽然密码学已经历经了 40 年的发展，但是从历史的角度看，它经过了一个非常快速的"
"发展与变迁的过程。"
msgstr ""
"第三点是要从历史的角度看概念的变迁、算法的演化和技巧的组合，这里面能发现非常"
"非常有意思的故事。我觉得也可以找机会和大家分享一下，但这需要很多时间去准备。"
"虽然密码学已经历经了 40 年的发展，但是从历史的角度看，它经过了一个非常快速的"
"发展与变迁的过程。"

#: src/exp/guoyu.md:157
msgid ""
"第四点是，一篇论文需要反复看，大概看懂其中的 90%，需要好几个星期甚至好几个"
"月。我最开始去学习这个东西的时候，一开始非常难受，非常有挫败感的一点是有篇论"
"文我看了半年都还看不懂。但突然有一天，我看到一个密码学家他的分享里面说他看论"
"文也是要几个星期才能看完，这时候我才如释重负，我才觉得原来他们也是这样。所以"
"说一篇论文看不懂其实是非常正常的一件事。"
msgstr ""
"第四点是，一篇论文需要反复看，大概看懂其中的 90%，需要好几个星期甚至好几个"
"月。我最开始去学习这个东西的时候，一开始非常难受，非常有挫败感的一点是有篇论"
"文我看了半年都还看不懂。但突然有一天，我看到一个密码学家他的分享里面说他看论"
"文也是要几个星期才能看完，这时候我才如释重负，我才觉得原来他们也是这样。所以"
"说一篇论文看不懂其实是非常正常的一件事。"

#: src/exp/guoyu.md:161
msgid "第五个是，我认为参与社区讨论特别有用。"
msgstr "第五个是，我认为参与社区讨论特别有用。"

#: src/exp/guoyu.md:165
msgid ""
"最后一点，找一个 Crypto 领域的问题点，找一个你觉得有意义的工作，然后 get "
"hands dirty，这个能驱动你把关注点集中到一些点上面，更容易做出一些突破性的工作"
"成绩。"
msgstr ""
"最后一点，找一个 Crypto 领域的问题点，找一个你觉得有意义的工作，然后 get "
"hands dirty，这个能驱动你把关注点集中到一些点上面，更容易做出一些突破性的工作"
"成绩。"

#: src/exp/freeyao.md:5
msgid "https://daorayaki.org/post/63ec77b7d8c1277f21f6a8b1"
msgstr "https://daorayaki.org/post/63ec77b7d8c1277f21f6a8b1"

#: src/exp/freeyao.md:7 src/exp/freeyao.md:15
msgid ""
"作为互联网世界的最小单元，人们为了获得互联网所带来的便利，在参与线上的生活，"
"工作，交易的过程中，不得不牺牲自己的隐私数据。例如在网站上输入信用卡号，向房"
"屋中介提供自己的银行信用记录，向银行提供身份信息等，同时这也带来了各种各样的"
"风险，例如身份信息的盗用，电子邮件泄露，数据泄露和其他形式的欺诈等。"
msgstr ""
"作为互联网世界的最小单元，人们为了获得互联网所带来的便利，在参与线上的生活，"
"工作，交易的过程中，不得不牺牲自己的隐私数据。例如在网站上输入信用卡号，向房"
"屋中介提供自己的银行信用记录，向银行提供身份信息等，同时这也带来了各种各样的"
"风险，例如身份信息的盗用，电子邮件泄露，数据泄露和其他形式的欺诈等。"

#: src/exp/freeyao.md:9 src/exp/freeyao.md:17
msgid ""
"而零知识证明的提出，正是为了解决这样的困境。它所具有的一系列先天优势，使其成"
"为了各种区块链扩容和隐私解决方案的重要组成部分，从而让人们在不泄露任何自己隐"
"私信息的情况下进行自身权益的认证。"
msgstr ""
"而零知识证明的提出，正是为了解决这样的困境。它所具有的一系列先天优势，使其成"
"为了各种区块链扩容和隐私解决方案的重要组成部分，从而让人们在不泄露任何自己隐"
"私信息的情况下进行自身权益的认证。"

#: src/exp/freeyao.md:11
msgid ""
"鉴于零知识证明对于整个行业的未来发展起到至关重要的作用，DAOrayaki特别邀请"
"了“原语里弄”的发起人姚翔老师，从密码学，隐私计算学实践者的角度，一起聊一聊如"
"何看待并理解零知识证明。全文如下文所示。喜欢听音频的朋友，可点击播客："
"https://www.ximalaya.com/sound/560839397"
msgstr ""
"鉴于零知识证明对于整个行业的未来发展起到至关重要的作用，DAOrayaki特别邀请"
"了“原语里弄”的发起人姚翔老师，从密码学，隐私计算学实践者的角度，一起聊一聊如"
"何看待并理解零知识证明。全文如下文所示。喜欢听音频的朋友，可点击播客："
"https://www.ximalaya.com/sound/560839397"

#: src/exp/freeyao.md:13
msgid ""
"Shaun：Hello，大家好，欢迎来到本期的Yaki叨叨！我是主持人Shaun。零知识证明作为"
"计算机科学领域在近50年间最引人注目的创新之一，与EVM技术成为了当下web2向web3演"
"化的两个重要入口，它提供了一种方便且实用的验证方法，使得web3的链外数据能够方"
"便的取得链上验证，获得web3生态的信任，为数据资产的互通提供了可能。"
msgstr ""
"Shaun：Hello，大家好，欢迎来到本期的Yaki叨叨！我是主持人Shaun。零知识证明作为"
"计算机科学领域在近50年间最引人注目的创新之一，与EVM技术成为了当下web2向web3演"
"化的两个重要入口，它提供了一种方便且实用的验证方法，使得web3的链外数据能够方"
"便的取得链上验证，获得web3生态的信任，为数据资产的互通提供了可能。"

#: src/exp/freeyao.md:19
msgid ""
"鉴于零知识证明对于整个行业的未来发展起到至关重要的作用，Daorayaki社区认为有必"
"要也有义务以行业资深研究者，观察者，分析者的角色向更广泛的受众群体普及零知识"
"证明的相关知识。为此今天我们特别邀请了“原语里弄”的发起人姚翔老师，从密码学，"
"隐私计算学实践者的角度，一起聊一聊如何看待并理解零知识证明，欢迎姚翔老师。"
msgstr ""
"鉴于零知识证明对于整个行业的未来发展起到至关重要的作用，Daorayaki社区认为有必"
"要也有义务以行业资深研究者，观察者，分析者的角色向更广泛的受众群体普及零知识"
"证明的相关知识。为此今天我们特别邀请了“原语里弄”的发起人姚翔老师，从密码学，"
"隐私计算学实践者的角度，一起聊一聊如何看待并理解零知识证明，欢迎姚翔老师。"

#: src/exp/freeyao.md:21
msgid ""
"姚翔：大家好，我是姚翔，也是“原语里弄”的发起人。现在主要从事区块链包括密码学"
"的相关研究，同时我们也举办一些线下的研讨活动，支持一些相关课题的研究，给予研"
"究人员各种的帮助。"
msgstr ""
"姚翔：大家好，我是姚翔，也是“原语里弄”的发起人。现在主要从事区块链包括密码学"
"的相关研究，同时我们也举办一些线下的研讨活动，支持一些相关课题的研究，给予研"
"究人员各种的帮助。"

#: src/exp/freeyao.md:23
msgid ""
"在启动“原语里弄”之前，我在金融机构工作了几年，然后在一家区块链初创公司开发智"
"能合约钱包，我在Crypto领域大概也有七八年的时间了，我本人是密码学专业背景，虽"
"然在工作后并没有从事太多的密码学研究，但是相关知识还有一些，所以应Shaun的邀"
"请，来聊一聊零知识相关，我觉得也有必要做一些基础知识的普及，今天很高兴有机会"
"和大家交流。"
msgstr ""
"在启动“原语里弄”之前，我在金融机构工作了几年，然后在一家区块链初创公司开发智"
"能合约钱包，我在Crypto领域大概也有七八年的时间了，我本人是密码学专业背景，虽"
"然在工作后并没有从事太多的密码学研究，但是相关知识还有一些，所以应Shaun的邀"
"请，来聊一聊零知识相关，我觉得也有必要做一些基础知识的普及，今天很高兴有机会"
"和大家交流。"

#: src/exp/freeyao.md:25
msgid ""
"Shaun：谢谢姚翔老师，谦虚了。在深入展开零知识证明的探讨之前，我觉得追根溯源是"
"难免的，所以我们一定会谈到那个不能“免俗”的问题：就是零知识证明的诞生背景是怎"
"样的？或者说它的起源的故事是怎样的呢？有请姚翔老师。"
msgstr ""
"Shaun：谢谢姚翔老师，谦虚了。在深入展开零知识证明的探讨之前，我觉得追根溯源是"
"难免的，所以我们一定会谈到那个不能“免俗”的问题：就是零知识证明的诞生背景是怎"
"样的？或者说它的起源的故事是怎样的呢？有请姚翔老师。"

#: src/exp/freeyao.md:27
msgid ""
"姚翔：首先，零知识证明，并不是为了解决区块链的某个问题而提出的，但在近几年的"
"发展过程当中，随着区块链的需求增加，随着这个行业吸引了更多的注意力，创造了更"
"多的价值，零知识证明的发展速度，在近几年的时间里确实变快了。"
msgstr ""
"姚翔：首先，零知识证明，并不是为了解决区块链的某个问题而提出的，但在近几年的"
"发展过程当中，随着区块链的需求增加，随着这个行业吸引了更多的注意力，创造了更"
"多的价值，零知识证明的发展速度，在近几年的时间里确实变快了。"

#: src/exp/freeyao.md:29
msgid ""
"但零知识证明的历史可以追溯到很远，如果以这个词的诞生或者这个概念的明确提出，"
"来作为时间节点计算的话，至少也是在1985年的事情（将近40年），当时相关的论文提"
"到了什么内容我会在后续说到。"
msgstr ""
"但零知识证明的历史可以追溯到很远，如果以这个词的诞生或者这个概念的明确提出，"
"来作为时间节点计算的话，至少也是在1985年的事情（将近40年），当时相关的论文提"
"到了什么内容我会在后续说到。"

#: src/exp/freeyao.md:31
msgid ""
"我更想先从一个更贴近生活的角度，和大家去分享零知识证明的概念。相信大家看到零"
"知识证明这个词，可能会在搜索引擎里面去搜索，搜索结果一般会给你一些案例，比如"
"阿里巴巴坐到一个山洞里，他知道这里面能不能开门；再比如说三染色问题；如果用英"
"文搜索的话，会有一个案例叫where's waldo（寻找瓦尔多）。"
msgstr ""
"我更想先从一个更贴近生活的角度，和大家去分享零知识证明的概念。相信大家看到零"
"知识证明这个词，可能会在搜索引擎里面去搜索，搜索结果一般会给你一些案例，比如"
"阿里巴巴坐到一个山洞里，他知道这里面能不能开门；再比如说三染色问题；如果用英"
"文搜索的话，会有一个案例叫where's waldo（寻找瓦尔多）。"

#: src/exp/freeyao.md:33
msgid ""
"但我们脱离干巴巴的教学，从生活经验出发。相信大家应该都参加过数学考试，数学考"
"试都有证明题，证明题是什么呢，提供条件ABC，证明x=y或者其他结论。我们回想一下"
"写下证明的这个过程，根据已知条件进行一些计算和推演，利用一些定理或公理写完这"
"个证明，从考试的角度来说，证明的过程极其重要，这是判卷人给分的重要评判标准。"
"那这里有一个很有趣的点在于，实际上判卷人不需要知道标准答案是什么（也就是不需"
"要知道任何额外知识），因为根据提供的推演过程和题目中的已知条件，就可以验证你"
"是否知道证明过程。"
msgstr ""
"但我们脱离干巴巴的教学，从生活经验出发。相信大家应该都参加过数学考试，数学考"
"试都有证明题，证明题是什么呢，提供条件ABC，证明x=y或者其他结论。我们回想一下"
"写下证明的这个过程，根据已知条件进行一些计算和推演，利用一些定理或公理写完这"
"个证明，从考试的角度来说，证明的过程极其重要，这是判卷人给分的重要评判标准。"
"那这里有一个很有趣的点在于，实际上判卷人不需要知道标准答案是什么（也就是不需"
"要知道任何额外知识），因为根据提供的推演过程和题目中的已知条件，就可以验证你"
"是否知道证明过程。"

#: src/exp/freeyao.md:35
msgid ""
"在这个例子中，存在两个角色，一个是证明者（Prover），也就是答卷人；还有一个就"
"是验证者（Verifier），也就是判卷人。其次呢，证明者拥有某种知识，在这个例子中"
"知识=证明过程，也就是答题内容。而验证者是不需要拥有这个知识的，看到证明过程随"
"后就可以做出判断。"
msgstr ""
"在这个例子中，存在两个角色，一个是证明者（Prover），也就是答卷人；还有一个就"
"是验证者（Verifier），也就是判卷人。其次呢，证明者拥有某种知识，在这个例子中"
"知识=证明过程，也就是答题内容。而验证者是不需要拥有这个知识的，看到证明过程随"
"后就可以做出判断。"

#: src/exp/freeyao.md:37
msgid ""
"还有一点，证明的过程中，证明者和验证者没有对话，证明者写完证明，他就把卷子交"
"上去了，而验证者看到这个证明，也不能再提什么问题（证明者也无法再回答任何问"
"题），这在现今的语境下理解，就叫非交互。"
msgstr ""
"还有一点，证明的过程中，证明者和验证者没有对话，证明者写完证明，他就把卷子交"
"上去了，而验证者看到这个证明，也不能再提什么问题（证明者也无法再回答任何问"
"题），这在现今的语境下理解，就叫非交互。"

#: src/exp/freeyao.md:39
msgid ""
"还有一个很重要的问题，就是零知识证明中零知识的定义，在考试这个例子中，如果验"
"证者（判卷人）之前不知道如何证明，但在读完一个人的完整证明过程（正确的前提"
"下）之后，就知道（不需要去理解）如何证明了。或者说，在考试过程中，我看到前面"
"人的证明过程，我发现是对的，不需要理解他是如何写出证明的（为什么这么证明），"
"只需把它抄下来就可以。换言之，验证者在阅读证明过程之后，获得了额外的知识"
"（即：一开始不会，在读完证明之后就会了）。"
msgstr ""
"还有一个很重要的问题，就是零知识证明中零知识的定义，在考试这个例子中，如果验"
"证者（判卷人）之前不知道如何证明，但在读完一个人的完整证明过程（正确的前提"
"下）之后，就知道（不需要去理解）如何证明了。或者说，在考试过程中，我看到前面"
"人的证明过程，我发现是对的，不需要理解他是如何写出证明的（为什么这么证明），"
"只需把它抄下来就可以。换言之，验证者在阅读证明过程之后，获得了额外的知识"
"（即：一开始不会，在读完证明之后就会了）。"

#: src/exp/freeyao.md:41
msgid ""
"我想还有一个比较重要，但又有一些隐藏在里面的一个条件，就是这道题是有一点点难"
"度的，它不是一个非常简单的题。因为如果这道题很简单，已知a=1，b=2，c=3，证明a"
"加b等于c，那我们前面提到的，这种抄袭证明过程（或者说验证者获得额外信息）就不"
"成立，因为这道题太简单了，验证者不需要去阅读证明者的答案，就知道如何证明。"
msgstr ""
"我想还有一个比较重要，但又有一些隐藏在里面的一个条件，就是这道题是有一点点难"
"度的，它不是一个非常简单的题。因为如果这道题很简单，已知a=1，b=2，c=3，证明a"
"加b等于c，那我们前面提到的，这种抄袭证明过程（或者说验证者获得额外信息）就不"
"成立，因为这道题太简单了，验证者不需要去阅读证明者的答案，就知道如何证明。"

#: src/exp/freeyao.md:43
msgid ""
"那综上所述，我们提出了两个问题。第一个问题是：什么样的问题需要去证明；第二个"
"是：有没有可能构造出一种证明，让验证者（判卷人）知道证明者（答卷人）有实际能"
"力推演出证明过程，但验证者在过程中，不能学到如何去证明（或学习到如何伪造一个"
"证明过程）。也就是当答卷人是证明者1，改卷人是验证者1，验证者1可以确认证明者1"
"知道证明过程x，但是验证者1在验证后不能构造出一个证明（即证明过程伪x，甚至是证"
"明过程x），让验证者2相信验证者1（此时他是证明者2）知道如何来证明。或许这个例"
"子比较宽泛，不是非常精确，只是用一个更贴近生活的例子，尝试将大家带入这个语"
"境。"
msgstr ""
"那综上所述，我们提出了两个问题。第一个问题是：什么样的问题需要去证明；第二个"
"是：有没有可能构造出一种证明，让验证者（判卷人）知道证明者（答卷人）有实际能"
"力推演出证明过程，但验证者在过程中，不能学到如何去证明（或学习到如何伪造一个"
"证明过程）。也就是当答卷人是证明者1，改卷人是验证者1，验证者1可以确认证明者1"
"知道证明过程x，但是验证者1在验证后不能构造出一个证明（即证明过程伪x，甚至是证"
"明过程x），让验证者2相信验证者1（此时他是证明者2）知道如何来证明。或许这个例"
"子比较宽泛，不是非常精确，只是用一个更贴近生活的例子，尝试将大家带入这个语"
"境。"

#: src/exp/freeyao.md:45
msgid ""
"而刚刚提到，在1985年（将近40年前），有三位学者，Goldwasser，Micali还有Rackoff"
"发表了一篇论文，名字叫《交互式证明系统的知识复杂性》，标题中没有提到零知识证"
"明，但在文章中有它的定义。文章中他们定义了一种交互式的证明系统，和刚才的例子"
"有一个很大的区别在于，证明者和验证者之间，不是一次性的（证明者将东西交给验证"
"者，随后验证者就做出判断）。而是有多轮的交互（证明者给验证者一个东西，随后验"
"证者可以提问，然后证明者再给验证者一个东西，验证过程是多轮的），而同时这个证"
"明系统允许有一些极小的误差，即证明者可能不知道这个题怎么证，有小概率可以欺骗"
"验证者。文章中还提到了密码学上的一个常用的工具，叫不可区分性，来定义了零知"
"识。"
msgstr ""
"而刚刚提到，在1985年（将近40年前），有三位学者，Goldwasser，Micali还有Rackoff"
"发表了一篇论文，名字叫《交互式证明系统的知识复杂性》，标题中没有提到零知识证"
"明，但在文章中有它的定义。文章中他们定义了一种交互式的证明系统，和刚才的例子"
"有一个很大的区别在于，证明者和验证者之间，不是一次性的（证明者将东西交给验证"
"者，随后验证者就做出判断）。而是有多轮的交互（证明者给验证者一个东西，随后验"
"证者可以提问，然后证明者再给验证者一个东西，验证过程是多轮的），而同时这个证"
"明系统允许有一些极小的误差，即证明者可能不知道这个题怎么证，有小概率可以欺骗"
"验证者。文章中还提到了密码学上的一个常用的工具，叫不可区分性，来定义了零知"
"识。"

#: src/exp/freeyao.md:47
msgid ""
"同时，我们刚才也提到：什么样的问题才需要去证明。这篇文章讨论的证明系统，针对"
"的是NP问题，NP问题简单来说：是指多项式时间内，验证这个解是不是正确的问题。而"
"现在人们普遍认为，P问题（多项式时间内可以解决的问题），和NP问题是否相等，这件"
"事情仍然是不确定的。但我们仍倾向于P是不等于NP的，也就是说：存在一些问题，求解"
"它是困难的，但是验证解的正确性是容易的。"
msgstr ""
"同时，我们刚才也提到：什么样的问题才需要去证明。这篇文章讨论的证明系统，针对"
"的是NP问题，NP问题简单来说：是指多项式时间内，验证这个解是不是正确的问题。而"
"现在人们普遍认为，P问题（多项式时间内可以解决的问题），和NP问题是否相等，这件"
"事情仍然是不确定的。但我们仍倾向于P是不等于NP的，也就是说：存在一些问题，求解"
"它是困难的，但是验证解的正确性是容易的。"

#: src/exp/freeyao.md:49
msgid ""
"所以我们就针对类似问题构造这种证明，可以理解成它存在一些不确定性：对于验证者"
"来说，在多项式时间内，可以比较简单的验证它，但没有办法在多项式时间内找出它的"
"解（即验证者不知道这个知识），这就是这篇文章中的一些核心观点。凭借这篇文章"
"Goldwasser和Micali，包括第三作者Rackoff，获得了1993年的哥德尔奖，Goldwasser和"
"Micali还获得了2012年的图灵奖。"
msgstr ""
"所以我们就针对类似问题构造这种证明，可以理解成它存在一些不确定性：对于验证者"
"来说，在多项式时间内，可以比较简单的验证它，但没有办法在多项式时间内找出它的"
"解（即验证者不知道这个知识），这就是这篇文章中的一些核心观点。凭借这篇文章"
"Goldwasser和Micali，包括第三作者Rackoff，获得了1993年的哥德尔奖，Goldwasser和"
"Micali还获得了2012年的图灵奖。"

#: src/exp/freeyao.md:51
msgid ""
"一个题外话是，Goldwasser是一个以色列人，但她这个姓氏很有意思，这个词的词根意"
"思是“金子的水”，也是一个很著名的金箔酒品牌，它诞生于现今波兰的格丹恩斯克，历"
"史上也叫“但泽自由市”。如果去了解这个城市的历史，我觉得它和今天所描述的Crypto"
"精神，也是有很多交织的部分。"
msgstr ""
"一个题外话是，Goldwasser是一个以色列人，但她这个姓氏很有意思，这个词的词根意"
"思是“金子的水”，也是一个很著名的金箔酒品牌，它诞生于现今波兰的格丹恩斯克，历"
"史上也叫“但泽自由市”。如果去了解这个城市的历史，我觉得它和今天所描述的Crypto"
"精神，也是有很多交织的部分。"

#: src/exp/freeyao.md:53
msgid ""
"所以正如刚刚提到的，零知识证明并不是为了解决区块链的问题提出的，它发生的很"
"早，但是在近些年的过程中，确实是因为crypto世界的大量的需求推动了它的加速发"
"展。"
msgstr ""
"所以正如刚刚提到的，零知识证明并不是为了解决区块链的问题提出的，它发生的很"
"早，但是在近些年的过程中，确实是因为crypto世界的大量的需求推动了它的加速发"
"展。"

#: src/exp/freeyao.md:56
msgid ""
"Shaun：谢谢姚翔老师的分享，前面我们聊到了零知识证明的起源，然后聊到了Crypto相"
"关 ，那您作为这个行业的实践者之一，从您的角度出发，您觉得今天的零知识证明都主"
"要应用在了Crypto里的哪些现实场景中呢？或者说它的出现为现今Crypto行业改变或带"
"来的哪些东西呢？"
msgstr ""
"Shaun：谢谢姚翔老师的分享，前面我们聊到了零知识证明的起源，然后聊到了Crypto相"
"关 ，那您作为这个行业的实践者之一，从您的角度出发，您觉得今天的零知识证明都主"
"要应用在了Crypto里的哪些现实场景中呢？或者说它的出现为现今Crypto行业改变或带"
"来的哪些东西呢？"

#: src/exp/freeyao.md:58
msgid ""
"姚翔：这个问题很好，大概十年前我在读书时，零知识证明在课上提到的时候，也只是"
"一个比较简单的理论描述，看不到太多的实际应用，甚至当时的老师也觉得这个东西好"
"像看上去挺有用，但是不知道怎么有用。"
msgstr ""
"姚翔：这个问题很好，大概十年前我在读书时，零知识证明在课上提到的时候，也只是"
"一个比较简单的理论描述，看不到太多的实际应用，甚至当时的老师也觉得这个东西好"
"像看上去挺有用，但是不知道怎么有用。"

#: src/exp/freeyao.md:60
msgid ""
"而随着Crypto技术的发展，零知识证明逐渐找到了自己的定位，有意思在于零知识证明"
"和区块链（或者说分布式账本技术），其实是高度契合的。因为区块链解决的问题是："
"分布式网络对一个状态的共识，但关于状态的变化以及状态内容的保护做的还有欠缺。"
msgstr ""
"而随着Crypto技术的发展，零知识证明逐渐找到了自己的定位，有意思在于零知识证明"
"和区块链（或者说分布式账本技术），其实是高度契合的。因为区块链解决的问题是："
"分布式网络对一个状态的共识，但关于状态的变化以及状态内容的保护做的还有欠缺。"

#: src/exp/freeyao.md:62
msgid ""
"现在的区块链，是由计算驱动的状态机，用以太坊为例，从S到S1’，它的变化是：知道S"
"的状态，然后收到一笔Transaction（交易），计算后得到新的S1’，全网络的所有节点"
"都要做这样的计算。而零知识证明在第一点上，可以将区块链由计算驱动的状态机，变"
"成由验证驱动的状态机，也就是状态机从S到S1’的状态变化，不再需要全节点知道。其"
"中的核心关系是计算，不需要知道计算细节，但是知道计算是正确的。当然这也提供了"
"一种扩容思路，随后会再展开讲。"
msgstr ""
"现在的区块链，是由计算驱动的状态机，用以太坊为例，从S到S1’，它的变化是：知道S"
"的状态，然后收到一笔Transaction（交易），计算后得到新的S1’，全网络的所有节点"
"都要做这样的计算。而零知识证明在第一点上，可以将区块链由计算驱动的状态机，变"
"成由验证驱动的状态机，也就是状态机从S到S1’的状态变化，不再需要全节点知道。其"
"中的核心关系是计算，不需要知道计算细节，但是知道计算是正确的。当然这也提供了"
"一种扩容思路，随后会再展开讲。"

#: src/exp/freeyao.md:64
msgid ""
"第二就是原本的状态机不保护隐私，比如说a给b转了一笔钱，首先要知道a和b各自有多"
"少钱，节点才能对状态进行操作，但这在现实生活中是反直觉的（会觉得泄露隐私）。"
"所以，如果可以让节点在不知道具体状态的情况下，执行并且验证状态变化的有效性，"
"隐私就会得到很大程度的保护。但是到底具体是什么，可以一会再谈。"
msgstr ""
"第二就是原本的状态机不保护隐私，比如说a给b转了一笔钱，首先要知道a和b各自有多"
"少钱，节点才能对状态进行操作，但这在现实生活中是反直觉的（会觉得泄露隐私）。"
"所以，如果可以让节点在不知道具体状态的情况下，执行并且验证状态变化的有效性，"
"隐私就会得到很大程度的保护。但是到底具体是什么，可以一会再谈。"

#: src/exp/freeyao.md:66
msgid ""
"所以综合来讲，对于Crypto领域来说，零知识证明是一个非常好的工具；从计算哲学上"
"来说，也是一种提高可扩展性的方法；从隐私保护的角度上说，它也具有一定普遍性，"
"对于任何的数据，只需要付出一定的成本，你的隐私就可以得到比较好的保护，所以我"
"认为零知识证明和Crypto是一个相互促进，相互成长的一个过程。"
msgstr ""
"所以综合来讲，对于Crypto领域来说，零知识证明是一个非常好的工具；从计算哲学上"
"来说，也是一种提高可扩展性的方法；从隐私保护的角度上说，它也具有一定普遍性，"
"对于任何的数据，只需要付出一定的成本，你的隐私就可以得到比较好的保护，所以我"
"认为零知识证明和Crypto是一个相互促进，相互成长的一个过程。"

#: src/exp/freeyao.md:68
msgid ""
"Shaun:我们聊到了隐私，聊到了扩容，正好到了您的专业领域，我们就接着谈一谈。纵"
"观目前整个互联网的发展历程，（在区块链技术诞生之前）隐私就一直是互联网领域常"
"讨论的话题。因为人们为了获得互联网带来各种便利，会以牺牲隐私为代价，在这其"
"中，就会出现很多关于隐私暴露所带来的各种不便，零知识证明的出现，在细节上如何"
"解决这种隐私相关问题呢？还有一个问题就是，我们如果再聊到区块链，一定会聊到一"
"个话题，就是扩容（ZK-Rollup），尤其是现今结合了零知识证明的扩容技术，对于区块"
"链的发展，它的重要性体现在哪？"
msgstr ""
"Shaun:我们聊到了隐私，聊到了扩容，正好到了您的专业领域，我们就接着谈一谈。纵"
"观目前整个互联网的发展历程，（在区块链技术诞生之前）隐私就一直是互联网领域常"
"讨论的话题。因为人们为了获得互联网带来各种便利，会以牺牲隐私为代价，在这其"
"中，就会出现很多关于隐私暴露所带来的各种不便，零知识证明的出现，在细节上如何"
"解决这种隐私相关问题呢？还有一个问题就是，我们如果再聊到区块链，一定会聊到一"
"个话题，就是扩容（ZK-Rollup），尤其是现今结合了零知识证明的扩容技术，对于区块"
"链的发展，它的重要性体现在哪？"

#: src/exp/freeyao.md:70
msgid ""
"姚翔：提到隐私问题的重要性，如果从负面角度，也就是一旦发生相关风险，它的危害"
"程度是不言而喻的，所以我觉得也不必再去展开。大家在现实生活中，其实可以体会到"
"个人数据被收集所带来的一些不便和风险。"
msgstr ""
"姚翔：提到隐私问题的重要性，如果从负面角度，也就是一旦发生相关风险，它的危害"
"程度是不言而喻的，所以我觉得也不必再去展开。大家在现实生活中，其实可以体会到"
"个人数据被收集所带来的一些不便和风险。"

#: src/exp/freeyao.md:72
msgid ""
"而这件事情需要从根本上去解决，原因是什么呢？比如说，你要去酒吧，酒吧老板希望"
"你不是一个未成年，他需要你提供证件，通过身份证上的出生年份计算你是否满18岁，"
"同时他还要验证你提供的证件是不是本人的证件。但同时他也获得了一些额外信息，他"
"知道了你叫什么，知道了你的住址，知道了你的身份证号，而这些信息其实他是没必要"
"知道的（即信息泄露）。"
msgstr ""
"而这件事情需要从根本上去解决，原因是什么呢？比如说，你要去酒吧，酒吧老板希望"
"你不是一个未成年，他需要你提供证件，通过身份证上的出生年份计算你是否满18岁，"
"同时他还要验证你提供的证件是不是本人的证件。但同时他也获得了一些额外信息，他"
"知道了你叫什么，知道了你的住址，知道了你的身份证号，而这些信息其实他是没必要"
"知道的（即信息泄露）。"

#: src/exp/freeyao.md:74
msgid ""
"那么如何优化这个系统呢，我们假设有一个机器，这个机器可以读取身份证（假设这个"
"机器是可信的），把这个身份证放在上面，同时有人脸识别，你只需要站在那，然后机"
"器会告诉酒吧老板你的条件符合要求，甚至可以更高级，扫描完符合条件就可以直接通"
"过。这样的好处是，在可以信任这台机器的前提下，酒吧老板不会获得任何额外的信息"
"（除非你主动告诉他），这个好处是显著的，通过采用一些算法或者新技术，可以对隐"
"私进行更好的保护。"
msgstr ""
"那么如何优化这个系统呢，我们假设有一个机器，这个机器可以读取身份证（假设这个"
"机器是可信的），把这个身份证放在上面，同时有人脸识别，你只需要站在那，然后机"
"器会告诉酒吧老板你的条件符合要求，甚至可以更高级，扫描完符合条件就可以直接通"
"过。这样的好处是，在可以信任这台机器的前提下，酒吧老板不会获得任何额外的信息"
"（除非你主动告诉他），这个好处是显著的，通过采用一些算法或者新技术，可以对隐"
"私进行更好的保护。"

#: src/exp/freeyao.md:76
msgid ""
"但在区块链上，隐私这个问题会被放大，实施起来会更困难。第一点原因是，数据是所"
"有人都可以访问的，原本的数据只有老板知道，在老板不泄露的前提下，你的数据还是"
"比较安全的，但在区块链上所有的数据都是可以公开访问的。第二点是，数据是永远可"
"以访问的，如果把它当做一个持久化账本，所以那么数据公开带来的风险就更加持久。"
"就像你不会把身份证号码传到以太坊上，即使它许诺验证后可以提供一个更低的贷款利"
"率，你还是不会做的。所以如果不能解决隐私的问题，区块链所能支撑的应用类型，要"
"比传统世界更加有限，和现实世界是隔绝的，如果你要把这些现实的数据放到链上，势"
"必会向整个网络去广播，大家都会知道这个数据。"
msgstr ""
"但在区块链上，隐私这个问题会被放大，实施起来会更困难。第一点原因是，数据是所"
"有人都可以访问的，原本的数据只有老板知道，在老板不泄露的前提下，你的数据还是"
"比较安全的，但在区块链上所有的数据都是可以公开访问的。第二点是，数据是永远可"
"以访问的，如果把它当做一个持久化账本，所以那么数据公开带来的风险就更加持久。"
"就像你不会把身份证号码传到以太坊上，即使它许诺验证后可以提供一个更低的贷款利"
"率，你还是不会做的。所以如果不能解决隐私的问题，区块链所能支撑的应用类型，要"
"比传统世界更加有限，和现实世界是隔绝的，如果你要把这些现实的数据放到链上，势"
"必会向整个网络去广播，大家都会知道这个数据。"

#: src/exp/freeyao.md:78
msgid ""
"那么在采用了零知识证明技术之后，它的解决思路就在于刚描述的证明系统：我不会告"
"诉你原来的数据，不会让你获得额外的知识（可能包含一些签名，比如身份证信息，需"
"要有一个权威对这个数据来源的合法性进行验证）。通过构造一个算法，这个算法让区"
"块链去验证里面的数据，是否满足某些要求，通过之后，就可以执行下一步指令，同时"
"也不泄露任何之前的信息。"
msgstr ""
"那么在采用了零知识证明技术之后，它的解决思路就在于刚描述的证明系统：我不会告"
"诉你原来的数据，不会让你获得额外的知识（可能包含一些签名，比如身份证信息，需"
"要有一个权威对这个数据来源的合法性进行验证）。通过构造一个算法，这个算法让区"
"块链去验证里面的数据，是否满足某些要求，通过之后，就可以执行下一步指令，同时"
"也不泄露任何之前的信息。"

#: src/exp/freeyao.md:80
msgid ""
"但我觉得对于大多数朋友来说，其实不用关心它到底是如何实现的，只需要知道有这个"
"特性：数据构造出的解题过程可以让这个区块链上的智能合约或者程序，相信证明者满"
"足某些特征，但又不告诉验证者这个数据是什么，甚至一点数据都没有泄露。这是关于"
"隐私的一个解决方案，当然这里又有存在很多问题......"
msgstr ""
"但我觉得对于大多数朋友来说，其实不用关心它到底是如何实现的，只需要知道有这个"
"特性：数据构造出的解题过程可以让这个区块链上的智能合约或者程序，相信证明者满"
"足某些特征，但又不告诉验证者这个数据是什么，甚至一点数据都没有泄露。这是关于"
"隐私的一个解决方案，当然这里又有存在很多问题......"

#: src/exp/freeyao.md:82
msgid "Shaun:据我所知，它可能会有一个非常中心化的节点对吗？"
msgstr "Shaun:据我所知，它可能会有一个非常中心化的节点对吗？"

#: src/exp/freeyao.md:84
msgid ""
"姚翔：对的，这个问题我觉得也需要去做辨析。首先要说的是，大多数的ZK-Rollup不是"
"ZK的（不是零知识的），这个名字是约定俗成而来的，也就成为了一个大家的共识，但"
"为什么不是零知识的，因为在提高扩容效率的过程中，在算法的设计上做了不少的妥"
"协。"
msgstr ""
"姚翔：对的，这个问题我觉得也需要去做辨析。首先要说的是，大多数的ZK-Rollup不是"
"ZK的（不是零知识的），这个名字是约定俗成而来的，也就成为了一个大家的共识，但"
"为什么不是零知识的，因为在提高扩容效率的过程中，在算法的设计上做了不少的妥"
"协。"

#: src/exp/freeyao.md:86
msgid ""
"我们首先解释ZK-Rollup的定义，然后回到那个中心化的问题。还用以太坊为例，状态机"
"从S到S1’的过程，是由一个Transaction（交易）驱动的。现在全节点运行的世界状态是"
"S，然后执行一笔交易变成了S1‘，再来个交易再执行。这意味着，第一点，每个节点都"
"要保存完整的世界状态（知道区块链上的所有的事实），才可以去做执行，因为如果把a"
"的钱转给b，而a有多少钱不知道，是无法执行交易的，所以要保存所有的状态， 这就会"
"带来一个问题，状态的数据越来越多，同时又希望这个网络是无许可的。如果状态数据"
"以T为计算单位（虽然现在没有那么大，一般是几百G的级别），那么个人承担机器运行"
"的成本就很巨大，所以我们一般希望每一个以太坊节点是一个家用机器，或至少不要过"
"于昂贵。"
msgstr ""
"我们首先解释ZK-Rollup的定义，然后回到那个中心化的问题。还用以太坊为例，状态机"
"从S到S1’的过程，是由一个Transaction（交易）驱动的。现在全节点运行的世界状态是"
"S，然后执行一笔交易变成了S1‘，再来个交易再执行。这意味着，第一点，每个节点都"
"要保存完整的世界状态（知道区块链上的所有的事实），才可以去做执行，因为如果把a"
"的钱转给b，而a有多少钱不知道，是无法执行交易的，所以要保存所有的状态， 这就会"
"带来一个问题，状态的数据越来越多，同时又希望这个网络是无许可的。如果状态数据"
"以T为计算单位（虽然现在没有那么大，一般是几百G的级别），那么个人承担机器运行"
"的成本就很巨大，所以我们一般希望每一个以太坊节点是一个家用机器，或至少不要过"
"于昂贵。"

#: src/exp/freeyao.md:88
msgid ""
"第二个问题是，执行过程是串行的，先执行一才能执行二，没有办法并行，因为交易的"
"执行顺序是确定的，每笔交易之间不是完全独立的事件，所以没有办法进行并行的优"
"化。而ZK-Rollup的思路就是，不需要再计算，我只需要提供一个证明，证明中包含的数"
"据是：S到S1’这件事一定是对的，然后区块链其他什么也不用做，只需要把S变成S1‘就"
"可以。"
msgstr ""
"第二个问题是，执行过程是串行的，先执行一才能执行二，没有办法并行，因为交易的"
"执行顺序是确定的，每笔交易之间不是完全独立的事件，所以没有办法进行并行的优"
"化。而ZK-Rollup的思路就是，不需要再计算，我只需要提供一个证明，证明中包含的数"
"据是：S到S1’这件事一定是对的，然后区块链其他什么也不用做，只需要把S变成S1‘就"
"可以。"

#: src/exp/freeyao.md:90
msgid ""
"这有两个好处，一个是：全节点不需要保存所有的状态数据（这是从理想状态来说，因"
"为证明过程附带数据是难免的）；第二个是：证明过程，也就是Proof的生成，可以用定"
"型的方法，或者通过硬件和软件的优化来加速，而在ZK-Rollup里面，大部分通过"
"sequence（序列）进行证明的生成，它可以把要求提的很高，原因是在这套系统里大家"
"认为，它不会影响到系统的准入门槛，运行全节点要做的是验证状态变化的有效性（或"
"正确性），但不需要去完整的执行整个过程。而我们也知道，验证和证明是不对称的，"
"所以机器可能对计算的要求很高，但是验证仍可以由一个普通的节点来运行。"
msgstr ""
"这有两个好处，一个是：全节点不需要保存所有的状态数据（这是从理想状态来说，因"
"为证明过程附带数据是难免的）；第二个是：证明过程，也就是Proof的生成，可以用定"
"型的方法，或者通过硬件和软件的优化来加速，而在ZK-Rollup里面，大部分通过"
"sequence（序列）进行证明的生成，它可以把要求提的很高，原因是在这套系统里大家"
"认为，它不会影响到系统的准入门槛，运行全节点要做的是验证状态变化的有效性（或"
"正确性），但不需要去完整的执行整个过程。而我们也知道，验证和证明是不对称的，"
"所以机器可能对计算的要求很高，但是验证仍可以由一个普通的节点来运行。"

#: src/exp/freeyao.md:92
msgid ""
"所以这也是很多人担忧的（或者说对这种扩容方案的一种攻击），它会带来一些其他的"
"风险，比如节点可能会有单点故障，一个节点生成证明时掉线了怎么办，还有可能会遭"
"受一些额外的攻击，比如它来做MEV（Miner extractable value-矿工可提取价值），或"
"者对交易的审查，我们假设生成证明的节点，要求很高，全世界只有几台电脑可以做，"
"但如果生产机器的人因为个人因素拒绝对某个人（或某些人）打包交易，这种情况是很"
"难解决的。"
msgstr ""
"所以这也是很多人担忧的（或者说对这种扩容方案的一种攻击），它会带来一些其他的"
"风险，比如节点可能会有单点故障，一个节点生成证明时掉线了怎么办，还有可能会遭"
"受一些额外的攻击，比如它来做MEV（Miner extractable value-矿工可提取价值），或"
"者对交易的审查，我们假设生成证明的节点，要求很高，全世界只有几台电脑可以做，"
"但如果生产机器的人因为个人因素拒绝对某个人（或某些人）打包交易，这种情况是很"
"难解决的。"

#: src/exp/freeyao.md:94
msgid ""
"所以从这个角度来说，这种中心化或集中化，更多是在一个是交易的审查中体现；第二"
"个是通过交易的排序来崛取一些利益。而对一般意义上理解的安全性的影响可能并不是"
"很大，但是它的活性可能是受到影响的，因为如果只有一个节点，但掉线了怎么办，这"
"个是扩容角度上大家的一些担忧。"
msgstr ""
"所以从这个角度来说，这种中心化或集中化，更多是在一个是交易的审查中体现；第二"
"个是通过交易的排序来崛取一些利益。而对一般意义上理解的安全性的影响可能并不是"
"很大，但是它的活性可能是受到影响的，因为如果只有一个节点，但掉线了怎么办，这"
"个是扩容角度上大家的一些担忧。"

#: src/exp/freeyao.md:96
msgid ""
"但是在隐私这个角度上，这件事可能不会成立，因为对于一个终端用户来说，一般不会"
"把个人数据交给第三方做证明的生成。因为生成证明的过程需要原始信息，就像前面提"
"到的，大家不会直接把身份证号码放到区块链上，但如果把身份证号码给第三方来生成"
"证明，这里的风险仍然是存在的。所以最理想的解决方案，或许是用户在自己的电脑上"
"或手机上，通过软件在本地生成证明，但是就现阶段来说，这件事情难度还是比较大"
"的，但对于行业来说这是一个必须要解决的问题。"
msgstr ""
"但是在隐私这个角度上，这件事可能不会成立，因为对于一个终端用户来说，一般不会"
"把个人数据交给第三方做证明的生成。因为生成证明的过程需要原始信息，就像前面提"
"到的，大家不会直接把身份证号码放到区块链上，但如果把身份证号码给第三方来生成"
"证明，这里的风险仍然是存在的。所以最理想的解决方案，或许是用户在自己的电脑上"
"或手机上，通过软件在本地生成证明，但是就现阶段来说，这件事情难度还是比较大"
"的，但对于行业来说这是一个必须要解决的问题。"

#: src/exp/freeyao.md:98
msgid ""
"Shaun:明白了，我们聊回刚才被打断的话题，那您觉得今天在解决隐私，比如说匿名问"
"题或者假名问题的时候，零知识证明会有哪些不足，或者解决不了的地方？"
msgstr ""
"Shaun:明白了，我们聊回刚才被打断的话题，那您觉得今天在解决隐私，比如说匿名问"
"题或者假名问题的时候，零知识证明会有哪些不足，或者解决不了的地方？"

#: src/exp/freeyao.md:100
msgid ""
"姚翔：我觉得从大的方向上来说，我们对零知识证明所能带来的Benefit（效益），都是"
"非常期待的，但也还会有一些现实的难题，一部分可能是技术层面的，当然技术层面"
"上，大家会觉得未来某个时间可以解决，抱一个乐观的态度。比如说证明的生成时间太"
"长，或者是成本开销比较大，或者说针对一些特定的算法可以优化，但是针对一般化的"
"算法可能效率就没有那么高，或者说如果在以太坊上做的话，消耗的Gas费会很高。"
msgstr ""
"姚翔：我觉得从大的方向上来说，我们对零知识证明所能带来的Benefit（效益），都是"
"非常期待的，但也还会有一些现实的难题，一部分可能是技术层面的，当然技术层面"
"上，大家会觉得未来某个时间可以解决，抱一个乐观的态度。比如说证明的生成时间太"
"长，或者是成本开销比较大，或者说针对一些特定的算法可以优化，但是针对一般化的"
"算法可能效率就没有那么高，或者说如果在以太坊上做的话，消耗的Gas费会很高。"

#: src/exp/freeyao.md:102
msgid "Shaun:这些都属于技术问题？"
msgstr "Shaun:这些都属于技术问题？"

#: src/exp/freeyao.md:104
msgid ""
"姚翔：对的，属于技术优化层面。虽然随着技术优化，有些事情是可以解决的，但还有"
"一些问题，不确定性就会很大。随着这个算法的发展，它的效率也在不断的提升，但提"
"升到什么时候，它有可能会变得平缓，这件事情是没有办法判断的。"
msgstr ""
"姚翔：对的，属于技术优化层面。虽然随着技术优化，有些事情是可以解决的，但还有"
"一些问题，不确定性就会很大。随着这个算法的发展，它的效率也在不断的提升，但提"
"升到什么时候，它有可能会变得平缓，这件事情是没有办法判断的。"

#: src/exp/freeyao.md:106
msgid ""
"其次从隐私保护的角度来说，它不只是一个单纯的技术问题，即使你对用户的数据进行"
"了更好的保护，使用了再好的技术手段，最后也有可能是无用功，因为会有一个木桶效"
"应：你建了一个非常坚固的房子，你用各种算法，设置成铜墙铁壁，但是你出门的时"
"候，有个窗户忘记关了，那所有的防护都没有用。所以我觉得这是一个系统上的问题，"
"大家可能意识到零知识证明或各种算法技术可以帮助大家解决隐私的一些问题，但更重"
"要的是提高大家对这件事情的认知，知道隐私这件事情很重要，再去采用某种方法或工"
"具进行隐私保护。只有这样才能发挥技术带给我们的好处，否则，如果你觉得只有技术"
"就够了，然后有了一丝懈怠，那么保护效果可能不尽人意。"
msgstr ""
"其次从隐私保护的角度来说，它不只是一个单纯的技术问题，即使你对用户的数据进行"
"了更好的保护，使用了再好的技术手段，最后也有可能是无用功，因为会有一个木桶效"
"应：你建了一个非常坚固的房子，你用各种算法，设置成铜墙铁壁，但是你出门的时"
"候，有个窗户忘记关了，那所有的防护都没有用。所以我觉得这是一个系统上的问题，"
"大家可能意识到零知识证明或各种算法技术可以帮助大家解决隐私的一些问题，但更重"
"要的是提高大家对这件事情的认知，知道隐私这件事情很重要，再去采用某种方法或工"
"具进行隐私保护。只有这样才能发挥技术带给我们的好处，否则，如果你觉得只有技术"
"就够了，然后有了一丝懈怠，那么保护效果可能不尽人意。"

#: src/exp/freeyao.md:108
msgid ""
"Shaun:我在翻阅大量的零知识证明的相关资料时，总会遇到两个跳不过的词，一个是ZK-"
"STARKs，一个是ZK-SNARKs，所以要请教一下姚翔老师，简单来说，这两个词的区别是怎"
"么样的呢？"
msgstr ""
"Shaun:我在翻阅大量的零知识证明的相关资料时，总会遇到两个跳不过的词，一个是ZK-"
"STARKs，一个是ZK-SNARKs，所以要请教一下姚翔老师，简单来说，这两个词的区别是怎"
"么样的呢？"

#: src/exp/freeyao.md:110
msgid ""
"姚翔：我们从它的名字上来看，ZK就是Zero Knowledge（零知识的），SNARK的S就是简"
"洁的，N就是刚才说的非交互，ARKs是一种知识论证，连起来就是简洁的非交互知识论"
"证，知识论证是这个证明系统的名称。我们可以这么理解，非交互体现的是刚才提到"
"的，证明者提供了一个证明，然后验证者可以直接来检查，不需要再问额外的问题（事"
"实上，在区块链上也没有办法构造额外提问的流程，这个事情会很复杂），所以核心词"
"落在了简洁上，而简洁就是在说证明的长度，我们可以想象一下，考试的时候，老师让"
"你证明a大于b或c等于d，然后你写了100页纸交上去，我觉得任何老师都不会去改这个答"
"案，虽然你可能写的是对的，但是他没有时间来进行检查，所以我们希望这个证明的长"
"度是比较短的，而且从可用性的角度来说，假如在区块链上，给以太坊上传一个证明，"
"是需要支付Gas费的，所以太长显然是不可行的。所以SNARKs描述的这一类型的零知识证"
"明。"
msgstr ""
"姚翔：我们从它的名字上来看，ZK就是Zero Knowledge（零知识的），SNARK的S就是简"
"洁的，N就是刚才说的非交互，ARKs是一种知识论证，连起来就是简洁的非交互知识论"
"证，知识论证是这个证明系统的名称。我们可以这么理解，非交互体现的是刚才提到"
"的，证明者提供了一个证明，然后验证者可以直接来检查，不需要再问额外的问题（事"
"实上，在区块链上也没有办法构造额外提问的流程，这个事情会很复杂），所以核心词"
"落在了简洁上，而简洁就是在说证明的长度，我们可以想象一下，考试的时候，老师让"
"你证明a大于b或c等于d，然后你写了100页纸交上去，我觉得任何老师都不会去改这个答"
"案，虽然你可能写的是对的，但是他没有时间来进行检查，所以我们希望这个证明的长"
"度是比较短的，而且从可用性的角度来说，假如在区块链上，给以太坊上传一个证明，"
"是需要支付Gas费的，所以太长显然是不可行的。所以SNARKs描述的这一类型的零知识证"
"明。"

#: src/exp/freeyao.md:112
msgid ""
"那STARKs讲的什么呢，S是Scalable（可拓展的），T是Transparent（透明的），ARKs是"
"知识论证。我们可以认为STARKs的证明长度更长一些，Scalable是一个描述性词汇，而"
"它的优势体现在：Transparent。因为SNARKs需要Trusted Set Up的过程，即受信任的初"
"始化，也就是系统最开始，需要一个秘密数（不能公开，否则系统安全性崩塌），所以"
"SNARKs一开始，一般会有一个Ceremony（仪式），会请很多人，每人进行一个秘密的输"
"入，通过某种算法混合起来，如果有1000人参加，那1000人里只要有1个人没参与各种形"
"式的共谋，系统就是安全的。最近也可以看到像以太坊要做KZG Ceremony；像以前还会"
"带上放射性元素，在直升机上利用放射性元素，来提供随机性。但在STARKs里，它认为"
"这一套程序过于繁琐且大费周折，不需要有这种过程，整个系统会更安全。"
msgstr ""
"那STARKs讲的什么呢，S是Scalable（可拓展的），T是Transparent（透明的），ARKs是"
"知识论证。我们可以认为STARKs的证明长度更长一些，Scalable是一个描述性词汇，而"
"它的优势体现在：Transparent。因为SNARKs需要Trusted Set Up的过程，即受信任的初"
"始化，也就是系统最开始，需要一个秘密数（不能公开，否则系统安全性崩塌），所以"
"SNARKs一开始，一般会有一个Ceremony（仪式），会请很多人，每人进行一个秘密的输"
"入，通过某种算法混合起来，如果有1000人参加，那1000人里只要有1个人没参与各种形"
"式的共谋，系统就是安全的。最近也可以看到像以太坊要做KZG Ceremony；像以前还会"
"带上放射性元素，在直升机上利用放射性元素，来提供随机性。但在STARKs里，它认为"
"这一套程序过于繁琐且大费周折，不需要有这种过程，整个系统会更安全。"

#: src/exp/freeyao.md:114
msgid ""
"但其实刚才你也提到，这两个词可能是绕不过的，但我认为对于大多数普通读者或使用"
"者，没必要细究其背后的工作原理，因为可能还会看到一些词，比如Prover time或是"
"Verifier time这些参数，只需要知道这个参数的含义就可以了，不需要去关心算法的具"
"体细节。如果你是真的想学这个算法，那从头到尾把一个论文看完，或经过一段时间的"
"学习也就知道是怎么回事了，但到那时可能两者之间的区别也就没那么重要了。"
msgstr ""
"但其实刚才你也提到，这两个词可能是绕不过的，但我认为对于大多数普通读者或使用"
"者，没必要细究其背后的工作原理，因为可能还会看到一些词，比如Prover time或是"
"Verifier time这些参数，只需要知道这个参数的含义就可以了，不需要去关心算法的具"
"体细节。如果你是真的想学这个算法，那从头到尾把一个论文看完，或经过一段时间的"
"学习也就知道是怎么回事了，但到那时可能两者之间的区别也就没那么重要了。"

#: src/exp/freeyao.md:116
msgid ""
"Shaun:那接下来我们聊个轻松一点的话题，除了Crypto领域，今天的零知识证明在其他"
"的场景也会有应用吗？"
msgstr ""
"Shaun:那接下来我们聊个轻松一点的话题，除了Crypto领域，今天的零知识证明在其他"
"的场景也会有应用吗？"

#: src/exp/freeyao.md:118
msgid "姚翔:嗯，比如说呢？你有知道什么应用吗？"
msgstr "姚翔:嗯，比如说呢？你有知道什么应用吗？"

#: src/exp/freeyao.md:120
msgid ""
"Shaun:我看到大概的，比如说云计算，线上投票，或者金融类应用。比如说像以太坊现"
"今的发展，因为隐私各方面的问题，也使DeFi的发展受限，可能在未来它可能会跟扩容"
"相结合去解决类似问题。所以我就在思考，比如对于现实中的金融（或线下金融），它"
"会不会有帮助呢？"
msgstr ""
"Shaun:我看到大概的，比如说云计算，线上投票，或者金融类应用。比如说像以太坊现"
"今的发展，因为隐私各方面的问题，也使DeFi的发展受限，可能在未来它可能会跟扩容"
"相结合去解决类似问题。所以我就在思考，比如对于现实中的金融（或线下金融），它"
"会不会有帮助呢？"

#: src/exp/freeyao.md:122
msgid ""
"姚翔:从算法的角度（或者说理论角度），帮助一定是有的，但实现这套系统的成本也会"
"比较高，而且这里面可能还涉及到，类似监管方面的问题。因为我曾经也在相关机构工"
"作过，我觉得这件事情属于听上去很好，可能企业去做一个创新实验（或者说搭一个创"
"新系统），也是可行的；但在实际业务中，是非常难实现的，所以它一般不会投入很大"
"的精力。当然在云厂商中它会提到一些问题，所谓的秘密计算，我举个例子，你把你的"
"数据放在云服务端，你会希望把这个数据进行加密，但加密以后又会出现一个问题：你"
"要想查询，或者说想做一些运算的时候，就会变得比较困难。我举个简单的例子，你把"
"公司的数据全部加密放在了阿里云上，阿里是看不到你公司员工的年龄或收入的数据"
"的，但当你想求一下公司的相关平均数据是多少，你是没办法在云端计算的，得把数据"
"全部又降落到本地，再进行计算，那这时云计算的意义就很有限。"
msgstr ""
"姚翔:从算法的角度（或者说理论角度），帮助一定是有的，但实现这套系统的成本也会"
"比较高，而且这里面可能还涉及到，类似监管方面的问题。因为我曾经也在相关机构工"
"作过，我觉得这件事情属于听上去很好，可能企业去做一个创新实验（或者说搭一个创"
"新系统），也是可行的；但在实际业务中，是非常难实现的，所以它一般不会投入很大"
"的精力。当然在云厂商中它会提到一些问题，所谓的秘密计算，我举个例子，你把你的"
"数据放在云服务端，你会希望把这个数据进行加密，但加密以后又会出现一个问题：你"
"要想查询，或者说想做一些运算的时候，就会变得比较困难。我举个简单的例子，你把"
"公司的数据全部加密放在了阿里云上，阿里是看不到你公司员工的年龄或收入的数据"
"的，但当你想求一下公司的相关平均数据是多少，你是没办法在云端计算的，得把数据"
"全部又降落到本地，再进行计算，那这时云计算的意义就很有限。"

#: src/exp/freeyao.md:124
msgid ""
"所以一般会采用类似叫同态加密，或者是多方计算，将经过加密的计算结果解密就可以"
"了，不需要在本地执行计算。但如果是做一个AI模型的训练，本地机器是支持不了的，"
"肯定需要借助云端的运算能力。"
msgstr ""
"所以一般会采用类似叫同态加密，或者是多方计算，将经过加密的计算结果解密就可以"
"了，不需要在本地执行计算。但如果是做一个AI模型的训练，本地机器是支持不了的，"
"肯定需要借助云端的运算能力。"

#: src/exp/freeyao.md:126
msgid ""
"当然这些我觉得都还在探索过程中，我觉得理论上，从工程上，这都是可以去探索的，"
"但是企业其实不太会用这种技术手段来解决这些要求，它更多的是通过合规性方法或者"
"是法律角度来进行系统保障。反而我认为在区块链当中，这件事情会发展更快，因为现"
"在的银行系统都是有牌照的，这也是人们相信它的原因，但在区块链中，谁在运行开放"
"节点或谁在开发DeFi协议这些你有可能是都不知道的，所以你使用它也是因为它的代码"
"通过了审计，有很多人使用，系统运行了很长时间等等原因。"
msgstr ""
"当然这些我觉得都还在探索过程中，我觉得理论上，从工程上，这都是可以去探索的，"
"但是企业其实不太会用这种技术手段来解决这些要求，它更多的是通过合规性方法或者"
"是法律角度来进行系统保障。反而我认为在区块链当中，这件事情会发展更快，因为现"
"在的银行系统都是有牌照的，这也是人们相信它的原因，但在区块链中，谁在运行开放"
"节点或谁在开发DeFi协议这些你有可能是都不知道的，所以你使用它也是因为它的代码"
"通过了审计，有很多人使用，系统运行了很长时间等等原因。"

#: src/exp/freeyao.md:128
msgid ""
"所以我自己认为刚刚提到的那些场景，金融或者云计算或者线上投票等等，我记得当年"
"我们还研究过线上投票相关，就是每个人投票，然后怎么求出这个结果，但又不能暴露"
"投票归属，还不能让一个人向别人证明他投了什么，以此防止贿选，比如说我投了a，然"
"后我就可以拿着我投他的证据，来找他索贿。这种系统我觉得设计的都会很复杂，也想"
"的很好，但在实际过程中实际上会简单很多，因为它是一个受监管的业务，它就不会在"
"技术上有什么动力，因为监管说你是符合要求的，我也不会再对你提出什么额外的需"
"求。"
msgstr ""
"所以我自己认为刚刚提到的那些场景，金融或者云计算或者线上投票等等，我记得当年"
"我们还研究过线上投票相关，就是每个人投票，然后怎么求出这个结果，但又不能暴露"
"投票归属，还不能让一个人向别人证明他投了什么，以此防止贿选，比如说我投了a，然"
"后我就可以拿着我投他的证据，来找他索贿。这种系统我觉得设计的都会很复杂，也想"
"的很好，但在实际过程中实际上会简单很多，因为它是一个受监管的业务，它就不会在"
"技术上有什么动力，因为监管说你是符合要求的，我也不会再对你提出什么额外的需"
"求。"

#: src/exp/freeyao.md:130
msgid ""
"Shaun:明白了，因为您是密码学的科班出身，并且这些年一直专注在区块链底层技术，"
"隐私计算技术等方面的建设，那从您的技术背景，密码学背景和区块链背景以及这么多"
"年在前沿领域的实践，您怎么看待零知识证明，这项技术未来的发展呢？"
msgstr ""
"Shaun:明白了，因为您是密码学的科班出身，并且这些年一直专注在区块链底层技术，"
"隐私计算技术等方面的建设，那从您的技术背景，密码学背景和区块链背景以及这么多"
"年在前沿领域的实践，您怎么看待零知识证明，这项技术未来的发展呢？"

#: src/exp/freeyao.md:132
msgid ""
"姚翔:还是回到刚才提到的，我在上学时的那个感受，就那个时候你会发现，零知识证明"
"你不知道有什么用，然后呢....."
msgstr ""
"姚翔:还是回到刚才提到的，我在上学时的那个感受，就那个时候你会发现，零知识证明"
"你不知道有什么用，然后呢....."

#: src/exp/freeyao.md:134
msgid ""
"Shaun:说到这个话题，我打断一下，当时老师讲课讲的是大家都觉得必须得讲，但却用"
"不上的知识，结果发现，好像有一天离自己很近啊，这种感觉很奇妙，不得不感慨一下"
"哈哈哈。"
msgstr ""
"Shaun:说到这个话题，我打断一下，当时老师讲课讲的是大家都觉得必须得讲，但却用"
"不上的知识，结果发现，好像有一天离自己很近啊，这种感觉很奇妙，不得不感慨一下"
"哈哈哈。"

#: src/exp/freeyao.md:136
msgid ""
"姚翔:是的是的，我们那个时候还学了很多，比如说盲签名，代理重加密，还有数字水"
"印，在当时这些技术，都没有很直接的应用。但我举一个数字水印的例子，我上学的时"
"候，数字水印最多应该就是实验用途，不会有太多商业用途，但我印象当中，有个电影"
"叫画皮2，有一个电影院把母带打上数字水印，后面市场上流出那个版本，通过数字水印"
"就能知道是谁泄露出来的，当时我看到那个新闻的时候，我还挺感慨的，会发现学到的"
"东西在真实的世界产生价值。"
msgstr ""
"姚翔:是的是的，我们那个时候还学了很多，比如说盲签名，代理重加密，还有数字水"
"印，在当时这些技术，都没有很直接的应用。但我举一个数字水印的例子，我上学的时"
"候，数字水印最多应该就是实验用途，不会有太多商业用途，但我印象当中，有个电影"
"叫画皮2，有一个电影院把母带打上数字水印，后面市场上流出那个版本，通过数字水印"
"就能知道是谁泄露出来的，当时我看到那个新闻的时候，我还挺感慨的，会发现学到的"
"东西在真实的世界产生价值。"

#: src/exp/freeyao.md:138
msgid ""
"那回到现在，密码学是一个很非常广阔的领地，比如说对称加密，非对称加密，数字签"
"名，单项函数，它们每一个都可以分的很细。但零知识证明我觉得又比较特殊，因为它"
"得到应用的时间，是比较短的，也就是未来仍可以有大量的新智慧投入到里面。在过去"
"的几年里面，它的发展是很快的，我觉得这个可能有两个原因，一个是作为密码学家来"
"说，自己的成果得到广泛应用，他肯定很开心，所以也会激励更多的人参与进来；第二"
"个就是也要感谢，包括以太坊基金会，Zcash在内的各种Crypto项目的支持，它们会愿意"
"为这样的研究提供经费上的支持，这些学者就不需要完全依赖学校的课题了（课题可能"
"也提供不了那么多经费），他们通过做这些产业间的研究，一方面成果可以得到应用，"
"另一方面生活或收入也得到了保障，我觉得这两个方面都推动了快速发展。"
msgstr ""
"那回到现在，密码学是一个很非常广阔的领地，比如说对称加密，非对称加密，数字签"
"名，单项函数，它们每一个都可以分的很细。但零知识证明我觉得又比较特殊，因为它"
"得到应用的时间，是比较短的，也就是未来仍可以有大量的新智慧投入到里面。在过去"
"的几年里面，它的发展是很快的，我觉得这个可能有两个原因，一个是作为密码学家来"
"说，自己的成果得到广泛应用，他肯定很开心，所以也会激励更多的人参与进来；第二"
"个就是也要感谢，包括以太坊基金会，Zcash在内的各种Crypto项目的支持，它们会愿意"
"为这样的研究提供经费上的支持，这些学者就不需要完全依赖学校的课题了（课题可能"
"也提供不了那么多经费），他们通过做这些产业间的研究，一方面成果可以得到应用，"
"另一方面生活或收入也得到了保障，我觉得这两个方面都推动了快速发展。"

#: src/exp/freeyao.md:140
msgid ""
"但至于在未来会变成什么样，我觉得很难预测，因为从非对称加密出现到如今比较普遍"
"的应用，也就是30多年时间，RSA是1979年提出来的，这时间是不长的。同时也很难想象"
"没有RSA或没有非对称密码学的网络世界是什么样子，它们已经遍布在现今的网络世界，"
"例如账户系统，对网站的这种安全保护，数据的隐私保护等等方面，今天的互联网就非"
"常依赖这些密码学的基础设施。"
msgstr ""
"但至于在未来会变成什么样，我觉得很难预测，因为从非对称加密出现到如今比较普遍"
"的应用，也就是30多年时间，RSA是1979年提出来的，这时间是不长的。同时也很难想象"
"没有RSA或没有非对称密码学的网络世界是什么样子，它们已经遍布在现今的网络世界，"
"例如账户系统，对网站的这种安全保护，数据的隐私保护等等方面，今天的互联网就非"
"常依赖这些密码学的基础设施。"

#: src/exp/freeyao.md:142
msgid ""
"所以如果什么时候我们不会过多的讨论零知识证明，也就是它已经渗透到了我们的日常"
"生活中，或者说只有一些研究的人员去讨论，它变成一个日常的，大家觉得好像是有这"
"么回事。等那一天到来，也就说明这个技术可能达到了我们现在想要的一个阶段。"
msgstr ""
"所以如果什么时候我们不会过多的讨论零知识证明，也就是它已经渗透到了我们的日常"
"生活中，或者说只有一些研究的人员去讨论，它变成一个日常的，大家觉得好像是有这"
"么回事。等那一天到来，也就说明这个技术可能达到了我们现在想要的一个阶段。"

#: src/exp/freeyao.md:144
msgid ""
"Shaun：好的，谢谢姚翔老师。Daorayaki社区一直保持着对web3领域前沿技术的持续且"
"深入的跟踪式研究和报导，在内容选题方面，社区评审委员会所有成员一方面会继承24"
"小时不间断的寻找行业内最新最前沿的技术发生，另一方面，也会对行业内最顶尖的前"
"沿技术团队进行跟踪式的持续性的深入报道，这样做的目的是为了兼顾社区在内容方面"
"的广度和宽度。"
msgstr ""
"Shaun：好的，谢谢姚翔老师。Daorayaki社区一直保持着对web3领域前沿技术的持续且"
"深入的跟踪式研究和报导，在内容选题方面，社区评审委员会所有成员一方面会继承24"
"小时不间断的寻找行业内最新最前沿的技术发生，另一方面，也会对行业内最顶尖的前"
"沿技术团队进行跟踪式的持续性的深入报道，这样做的目的是为了兼顾社区在内容方面"
"的广度和宽度。"

#: src/exp/freeyao.md:146
msgid ""
"我们在研究中发现目前零知识证明在整个Web3领域，普及化的程度还很低，尤其是在中"
"文社区，还没有一个成型的专业性的普及ZKP相关知识的社区，鉴于零知识证明这项技术"
"可能对行业未来所产生的至关重要的作用，Daorayaki社区觉得有义务跟责任让更多的小"
"伙伴了解熟悉甚至参与到零知识证明未来的建设中，结合Yaki叨叨，DeMedia，Podcast"
"平台，由浅入深，多角度全方位的介绍，探讨与分析零知识证明的相关内容，而本期的"
"Yaki叨叨作为零知识证明专题报导的第一期，只是拉开了整个篇章的序幕，更多关于零"
"知识证明的精彩内容，敬请大家关注，感谢姚翔老师的倾情分享，让社区的小伙伴受益"
"良多，谢谢姚翔老师。"
msgstr ""
"我们在研究中发现目前零知识证明在整个Web3领域，普及化的程度还很低，尤其是在中"
"文社区，还没有一个成型的专业性的普及ZKP相关知识的社区，鉴于零知识证明这项技术"
"可能对行业未来所产生的至关重要的作用，Daorayaki社区觉得有义务跟责任让更多的小"
"伙伴了解熟悉甚至参与到零知识证明未来的建设中，结合Yaki叨叨，DeMedia，Podcast"
"平台，由浅入深，多角度全方位的介绍，探讨与分析零知识证明的相关内容，而本期的"
"Yaki叨叨作为零知识证明专题报导的第一期，只是拉开了整个篇章的序幕，更多关于零"
"知识证明的精彩内容，敬请大家关注，感谢姚翔老师的倾情分享，让社区的小伙伴受益"
"良多，谢谢姚翔老师。"

#: src/exp/freeyao.md:148
msgid ""
"同时也感谢Daorayaki社区，今天相关讨论的音频晚些时候会上传在 DAOrayaki官网，"
"DAOrayaki.org的专属播客频道里。我们也会同时发布在国内的小宇宙播客平台，全球各"
"大流媒体平台，例如苹果播客、谷歌播客、YouTube以及Spotify上，欢迎大家收听及订"
"阅。"
msgstr ""
"同时也感谢Daorayaki社区，今天相关讨论的音频晚些时候会上传在 DAOrayaki官网，"
"DAOrayaki.org的专属播客频道里。我们也会同时发布在国内的小宇宙播客平台，全球各"
"大流媒体平台，例如苹果播客、谷歌播客、YouTube以及Spotify上，欢迎大家收听及订"
"阅。"

#: src/exp/freeyao.md:150
msgid "再次谢谢姚翔老师，我们期待下期还能跟小伙伴一起分享，我们下期不见不散。"
msgstr "再次谢谢姚翔老师，我们期待下期还能跟小伙伴一起分享，我们下期不见不散。"

#: src/exp/freeyao.md:154
msgid "本文的编译工作获得 DAOrayaki 的支持和资助。"
msgstr "本文的编译工作获得 DAOrayaki 的支持和资助。"

#: src/zkp-space/toc.md:5
msgid "[2023.10.12: 聊聊 ZKP Coprocessor](./2023-10-22-zkp-coprocessor.md)"
msgstr "[2023.10.12: 聊聊 ZKP Coprocessor](./2023-10-22-zkp-coprocessor.md)"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:3
msgid "聊聊 ZKP Coprocessor"
msgstr "聊聊 ZKP Coprocessor"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:5
msgid "Author: [Harry](https://twitter.com/harryx1x1)"
msgstr "Author: [Harry](https://twitter.com/harryx1x1)"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:7
msgid "Label: ZKP, ZKP Coprocessor, ZKP Space"
msgstr "Label: ZKP, ZKP Coprocessor, ZKP Space"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:9
msgid "Date: 2023-10-15"
msgstr "Date: 2023-10-15"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:11
msgid ""
"回放链接: [https://twitter.com/i/spaces/1rmxPMaezNnKN?s=20](https://twitter."
"com/i/spaces/1rmxPMaezNnKN?s=20)"
msgstr ""
"回放链接: [https://twitter.com/i/spaces/1rmxPMaezNnKN?s=20](https://twitter."
"com/i/spaces/1rmxPMaezNnKN?s=20)"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:13
msgid "主聊人:"
msgstr "主聊人:"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:14
msgid "[Harry](https://twitter.com/harryx1x1)"
msgstr "[Harry](https://twitter.com/harryx1x1)"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:15
msgid "[0xhhh](https://twitter.com/hhh69251498)"
msgstr "[0xhhh](https://twitter.com/hhh69251498)"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:16
msgid "[Cecilia](https://twitter.com/ceciliaz030)"
msgstr "[Cecilia](https://twitter.com/ceciliaz030)"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:17
msgid "[董沫博士(Dong)](https://twitter.com/no89thkey)"
msgstr "[董沫博士(Dong)](https://twitter.com/no89thkey)"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:19
msgid "Harry：什么是 ZKP coprocessor？"
msgstr "Harry：什么是 ZKP coprocessor？"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:20
#: src/zkp-space/2023-10-22-zkp-coprocessor.md:64
#: src/zkp-space/2023-10-22-zkp-coprocessor.md:91
#: src/zkp-space/2023-10-22-zkp-coprocessor.md:119
#: src/zkp-space/2023-10-22-zkp-coprocessor.md:171
#: src/zkp-space/2023-10-22-zkp-coprocessor.md:223
#: src/zkp-space/2023-10-22-zkp-coprocessor.md:237
msgid "Dong"
msgstr "Dong"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:21
msgid "是区块链的 coprocessor"
msgstr "是区块链的 coprocessor"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:22
msgid "能让智能合约有 dune analytics 的能力"
msgstr "能让智能合约有 dune analytics 的能力"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:23
msgid ""
"现在合约面临的问题是合约不能看到： \\- 历史数据 \\- 没有 public viewable 的数"
"据 \\- 其它链的数据"
msgstr ""
"现在合约面临的问题是合约不能看到： \\- 历史数据 \\- 没有 public viewable 的数"
"据 \\- 其它链的数据"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:27
msgid "example：为什么要有 ZKP coprocessor"
msgstr "example：为什么要有 ZKP coprocessor"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:28
msgid "dex 需要有 trading volume based filter 的事情"
msgstr "dex 需要有 trading volume based filter 的事情"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:29
msgid "没有基于交易量的一些功能"
msgstr "没有基于交易量的一些功能"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:30
msgid "比如打折等"
msgstr "比如打折等"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:31
msgid "而这些功能对于 dex 很重要"
msgstr "而这些功能对于 dex 很重要"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:32
msgid "手续费打折可以吸引更多的流动性"
msgstr "手续费打折可以吸引更多的流动性"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:33
msgid "更多的流动性可以产生更有效的市场价格"
msgstr "更多的流动性可以产生更有效的市场价格"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:34
msgid "为什么 dex 没有呢"
msgstr "为什么 dex 没有呢"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:35
msgid "因为难"
msgstr "因为难"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:36
msgid "但 cex 实际是很简单的"
msgstr "但 cex 实际是很简单的"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:37
msgid "dex 两种方式做"
msgstr "dex 两种方式做"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:38
msgid "记住每个 trade action"
msgstr "记住每个 trade action"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:39
msgid "在 uniswap 试验过，每个 trading fee 都贵三倍"
msgstr "在 uniswap 试验过，每个 trading fee 都贵三倍"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:40
msgid "on the fly"
msgstr "on the fly"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:41
msgid "每个 trade 加 counter，做 on the fly 的功能"
msgstr "每个 trade 加 counter，做 on the fly 的功能"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:42
msgid "问题："
msgstr "问题："

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:43
msgid "给运营的功能加到核心业务里，这是一种 overhead，增加 trader 的成本"
msgstr "给运营的功能加到核心业务里，这是一种 overhead，增加 trader 的成本"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:44
msgid "所以没有任何的 dex 做这件事"
msgstr "所以没有任何的 dex 做这件事"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:45
msgid "其实理论上，用区块链本身也能做"
msgstr "其实理论上，用区块链本身也能做"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:46
msgid "通过将 block header 存储到一个 Merkle Tree 上面"
msgstr "通过将 block header 存储到一个 Merkle Tree 上面"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:47
msgid "用到的时候再去查找"
msgstr "用到的时候再去查找"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:48
msgid "但实际上，这个方案不可行，查询一天前的一个交易就要花费 8 百万的 gas fee"
msgstr ""
"但实际上，这个方案不可行，查询一天前的一个交易就要花费 8 百万的 gas fee"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:49
msgid "只要基于用户的过去行为的逻辑，在区块链上都是不可能"
msgstr "只要基于用户的过去行为的逻辑，在区块链上都是不可能"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:50
msgid "这就是为什么要引入 ZKP coprocessor"
msgstr "这就是为什么要引入 ZKP coprocessor"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:51
msgid "计算的事情是在链下做的，不是在链上"
msgstr "计算的事情是在链下做的，不是在链上"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:52
msgid "逻辑写到一个电路里面"
msgstr "逻辑写到一个电路里面"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:53
msgid "比如证明用户在 5 天交易了超过 1000 笔"
msgstr "比如证明用户在 5 天交易了超过 1000 笔"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:54
msgid ""
"public input 可以是一些 anchor point，比如某个时间段，这样可以给出这个时间段"
"的证明，节省一些证明的时间"
msgstr ""
"public input 可以是一些 anchor point，比如某个时间段，这样可以给出这个时间段"
"的证明，节省一些证明的时间"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:55
msgid "这样可以给出证明"
msgstr "这样可以给出证明"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:56
msgid ""
"为什么叫 coprocessor，这个和计算机发展有点类似，gpu handle cpu 不擅长的事情"
msgstr ""
"为什么叫 coprocessor，这个和计算机发展有点类似，gpu handle cpu 不擅长的事情"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:57
msgid ""
"ZKP coprocessor 就是为了解决区块链不擅长的计算，比如 data intensive 的计算: "
"\\- 大量的数据 \\- 复杂 stateless 的计算 \\- 计算过程的中间值不需要存储到链"
"上 \\- 只需要把最终的计算结果放到链上"
msgstr ""
"ZKP coprocessor 就是为了解决区块链不擅长的计算，比如 data intensive 的计算: "
"\\- 大量的数据 \\- 复杂 stateless 的计算 \\- 计算过程的中间值不需要存储到链"
"上 \\- 只需要把最终的计算结果放到链上"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:63
msgid "0xhhh：ZKP coprocessor 和 rollup 的关系是什么？"
msgstr "0xhhh：ZKP coprocessor 和 rollup 的关系是什么？"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:65
msgid "虽然广义上都是做链下计算，然后链上有一个 anchor"
msgstr "虽然广义上都是做链下计算，然后链上有一个 anchor"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:66
msgid "但它们要解决的问题不一样"
msgstr "但它们要解决的问题不一样"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:67
msgid "主要的区别在于 state 有多重"
msgstr "主要的区别在于 state 有多重"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:68
msgid "rollup 是有 EVM equivalent 的需求的"
msgstr "rollup 是有 EVM equivalent 的需求的"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:69
msgid "在 rollup 里面也是同样不适合做 data intensive 的计算"
msgstr "在 rollup 里面也是同样不适合做 data intensive 的计算"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:70
msgid ""
"而 ZKP coprocessor 没有持久的数据存储，计算完成将结果返回给调用方就完成任务"
"了，不需要存储下来"
msgstr ""
"而 ZKP coprocessor 没有持久的数据存储，计算完成将结果返回给调用方就完成任务"
"了，不需要存储下来"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:71
msgid "有些系统和 ZKP coprocessor 很像，比如 zkvm 和 zkwasm"
msgstr "有些系统和 ZKP coprocessor 很像，比如 zkvm 和 zkwasm"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:72
msgid ""
"在 coprocessor 领域，单纯的用一个 vm 是不行的，因为需要的 overhead 是非常大的"
msgstr ""
"在 coprocessor 领域，单纯的用一个 vm 是不行的，因为需要的 overhead 是非常大的"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:73
msgid "RiskZero 已经很快了"
msgstr "RiskZero 已经很快了"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:74
msgid "未来的 coprocessor"
msgstr "未来的 coprocessor"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:75
msgid "对链上数据的计算可能需要定制化的电路和轻量级的 vm 结合的方式。"
msgstr "对链上数据的计算可能需要定制化的电路和轻量级的 vm 结合的方式。"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:76
msgid ""
"定制化的电路去做什么呢？去做一些这种非常核心的，经常会要在 coprocessor 当中用"
"到的，比如说 hash，Merkle Tree 的 inclusion，signature verification"
msgstr ""
"定制化的电路去做什么呢？去做一些这种非常核心的，经常会要在 coprocessor 当中用"
"到的，比如说 hash，Merkle Tree 的 inclusion，signature verification"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:77
msgid "然后可以把 vm 当一个 aggregation layer"
msgstr "然后可以把 vm 当一个 aggregation layer"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:78
msgid ""
"vm 上面给开发者一个友好的平台，提供一些接口，比如可以拿历史的 trade 数据做简"
"单的加减运算"
msgstr ""
"vm 上面给开发者一个友好的平台，提供一些接口，比如可以拿历史的 trade 数据做简"
"单的加减运算"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:79
msgid "有一个需求也在 rollup 上面也部署一个 ZKP coprocessor"
msgstr "有一个需求也在 rollup 上面也部署一个 ZKP coprocessor"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:81
msgid ""
"Cecilia：技术上补充一下 \\- 拿 Axiom 来说 \\- 只去执行 view 函数的证明 \\- 不"
"去做 state transition 的证明（不做 MPT 的状态转换） \\- 所以这样的 ZKP "
"coprocessor 在执行逻辑和安全假设上，可以看做为 rollup 的子集 \\- 而如果把 "
"view 函数的证明放到一个广义的 VM 上面，比如 RiscZero 的 zkvm \\- 从执行能力"
"（execution power）上，可以看做是 EVM 的 super set \\- RiscZero 是针对 "
"general purpose 运算，不只是针对区块链"
msgstr ""
"Cecilia：技术上补充一下 \\- 拿 Axiom 来说 \\- 只去执行 view 函数的证明 \\- 不"
"去做 state transition 的证明（不做 MPT 的状态转换） \\- 所以这样的 ZKP "
"coprocessor 在执行逻辑和安全假设上，可以看做为 rollup 的子集 \\- 而如果把 "
"view 函数的证明放到一个广义的 VM 上面，比如 RiscZero 的 zkvm \\- 从执行能力"
"（execution power）上，可以看做是 EVM 的 super set \\- RiscZero 是针对 "
"general purpose 运算，不只是针对区块链"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:90
msgid "ZKP processor 的三种 proof"
msgstr "ZKP processor 的三种 proof"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:92
msgid "ZKP processor 主要做三种 proof，以及这三种的排列组合"
msgstr "ZKP processor 主要做三种 proof，以及这三种的排列组合"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:93
msgid "merkle state proof"
msgstr "merkle state proof"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:94
msgid "比如过去某个时间点 NFT 的 holder 是谁"
msgstr "比如过去某个时间点 NFT 的 holder 是谁"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:95
msgid "需要去 storage 去找这个过去的 value"
msgstr "需要去 storage 去找这个过去的 value"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:96
msgid "transaction proof"
msgstr "transaction proof"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:97
msgid "transaction 也有一个 tree，也可以做证明"
msgstr "transaction 也有一个 tree，也可以做证明"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:98
msgid "不管 transaction 是否成功链上都有记录"
msgstr "不管 transaction 是否成功链上都有记录"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:99
msgid "transaction receipt proof"
msgstr "transaction receipt proof"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:100
msgid "成功后有 receipt，可以通过 event 发出来"
msgstr "成功后有 receipt，可以通过 event 发出来"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:101
msgid "从这里可以看到交易了多少 token，这些可以用来计算 trading volume"
msgstr "从这里可以看到交易了多少 token，这些可以用来计算 trading volume"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:102
msgid "Axiom 复用了 zkevm 中常用的电路"
msgstr "Axiom 复用了 zkevm 中常用的电路"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:103
msgid ""
"向 zkevm 借鉴了一下电路的代码，也贡献了一些代码，比如 merkle tree inclusion "
"的代码"
msgstr ""
"向 zkevm 借鉴了一下电路的代码，也贡献了一些代码，比如 merkle tree inclusion "
"的代码"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:104
msgid "从 zkevm 拆出来了一些电路，费了很大力气"
msgstr "从 zkevm 拆出来了一些电路，费了很大力气"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:105
msgid "因为要做列的对齐"
msgstr "因为要做列的对齐"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:106
msgid "也做了很多优化"
msgstr "也做了很多优化"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:107
msgid "lookup 优化"
msgstr "lookup 优化"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:108
msgid "几个做 ZKP coprocessor 的团队"
msgstr "几个做 ZKP coprocessor 的团队"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:109
msgid "Brevis"
msgstr "Brevis"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:110
msgid "Axiom"
msgstr "Axiom"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:111
msgid "Herodotus"
msgstr "Herodotus"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:112
msgid "Lagrange"
msgstr "Lagrange"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:113
msgid ""
"各个团队做的方式都不一样，比如用的 framework 和 scaling solution 方式都不一样"
msgstr ""
"各个团队做的方式都不一样，比如用的 framework 和 scaling solution 方式都不一样"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:114
msgid "大家在解决的技术问题"
msgstr "大家在解决的技术问题"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:115
msgid "基于一万个 transaction 做计算"
msgstr "基于一万个 transaction 做计算"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:116
msgid "并以很低的成本去证明这些计算"
msgstr "并以很低的成本去证明这些计算"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:118
msgid "Prover 性能优化"
msgstr "Prover 性能优化"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:120
msgid "做性能优化，三条路"
msgstr "做性能优化，三条路"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:121
msgid "算法层"
msgstr "算法层"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:122
msgid "用 halo2 怎么办"
msgstr "用 halo2 怎么办"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:123
msgid "可以用 lookup 优化"
msgstr "可以用 lookup 优化"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:124
msgid ""
"Axiom 使用了 [Merkle Mountain Range (MMR)](https://docs.grin.mw/wiki/chain-"
"state/merkle-mountain-range/)，不断的去 commit root hash"
msgstr ""
"Axiom 使用了 [Merkle Mountain Range (MMR)](https://docs.grin.mw/wiki/chain-"
"state/merkle-mountain-range/)，不断的去 commit root hash"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:125
msgid "Brevis 使用 Mimic hash"
msgstr "Brevis 使用 Mimic hash"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:126
msgid "effective aggregation"
msgstr "effective aggregation"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:127
msgid "五花八门"
msgstr "五花八门"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:128
msgid "简单的多加两层 recursion，再加并行化"
msgstr "简单的多加两层 recursion，再加并行化"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:129
msgid "有一些 aggregation 是可以用的"
msgstr "有一些 aggregation 是可以用的"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:130
msgid "chain of curves：用两个 curve 导一下，试下来不比 folding 差"
msgstr "chain of curves：用两个 curve 导一下，试下来不比 folding 差"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:131
msgid "能把一万个 transaction 压缩到分钟级别的证明"
msgstr "能把一万个 transaction 压缩到分钟级别的证明"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:132
msgid "还可以用 folding，比较适合 coprocessor，但 folding 还差的比较远"
msgstr "还可以用 folding，比较适合 coprocessor，但 folding 还差的比较远"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:133
msgid "差 parallelization"
msgstr "差 parallelization"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:134
msgid "不能上链。现在接的 IPA，但需要改成 groth16，但是个大工程"
msgstr "不能上链。现在接的 IPA，但需要改成 groth16，但是个大工程"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:135
msgid "使用 Folding 提升性能"
msgstr "使用 Folding 提升性能"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:136
#: src/zkp-space/2023-10-22-zkp-coprocessor.md:210
msgid "0xhhh"
msgstr "0xhhh"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:137
msgid "RiscZero 说用 folding 需要的带宽比较多"
msgstr "RiscZero 说用 folding 需要的带宽比较多"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:138
msgid ""
"用 prover 生成 proof，需要有个机器去管理 state 并分发给其它的 prover 生成 "
"proof Dong"
msgstr ""
"用 prover 生成 proof，需要有个机器去管理 state 并分发给其它的 prover 生成 "
"proof Dong"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:140
msgid "folding 处在三个和尚没水吃的阶段"
msgstr "folding 处在三个和尚没水吃的阶段"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:141
msgid "大家都觉得少点东西，但工作量大，谁来加呢，因为开源后，大家都会用"
msgstr "大家都觉得少点东西，但工作量大，谁来加呢，因为开源后，大家都会用"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:142
msgid "所以 PSE 这样的比较公益的组织在做"
msgstr "所以 PSE 这样的比较公益的组织在做"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:143
msgid "但这个事情很有意义，有人组织大家一起做也是不错的 Cecilia"
msgstr "但这个事情很有意义，有人组织大家一起做也是不错的 Cecilia"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:145
msgid "大家对 folding 太着迷了"
msgstr "大家对 folding 太着迷了"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:146
msgid ""
"在 recursion 和 folding 之间，真正在 engineer 上面我们在 focus on 的一个东西"
"叫就是 chunk prover，这是 Taiko 和 PSE 当前的 focus"
msgstr ""
"在 recursion 和 folding 之间，真正在 engineer 上面我们在 focus on 的一个东西"
"叫就是 chunk prover，这是 Taiko 和 PSE 当前的 focus"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:147
msgid "所作的事情就是如何把 execution 分成 chunk，然后就可以并行执行，并证明"
msgstr "所作的事情就是如何把 execution 分成 chunk，然后就可以并行执行，并证明"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:148
msgid "最后把所有的 chunk 的执行接到一起，生成一个证明"
msgstr "最后把所有的 chunk 的执行接到一起，生成一个证明"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:149
msgid "这个其实是在目前工程中比较实际的做法，而不是用 folding Dong"
msgstr "这个其实是在目前工程中比较实际的做法，而不是用 folding Dong"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:151
msgid "赞同通过 continuation 来实现并行"
msgstr "赞同通过 continuation 来实现并行"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:152
msgid "folding 目前短期来看投入产出比比较低 Cecilia"
msgstr "folding 目前短期来看投入产出比比较低 Cecilia"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:154
msgid ""
"其实我觉得只要在学术上，在理论上有一个基本的 support 能够把 combination 本身"
"拆开，那在工程上面拆合就有很多 engineer 可以干的事情，engineer 可以把 prover "
"性能优化提升 100 倍"
msgstr ""
"其实我觉得只要在学术上，在理论上有一个基本的 support 能够把 combination 本身"
"拆开，那在工程上面拆合就有很多 engineer 可以干的事情，engineer 可以把 prover "
"性能优化提升 100 倍"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:155
msgid "我对 folding 的态度暂时是观望 Dong"
msgstr "我对 folding 的态度暂时是观望 Dong"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:157
msgid "还有一个提升性能方式是用硬件加速"
msgstr "还有一个提升性能方式是用硬件加速"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:158
msgid "halo2 没有好的硬件加速"
msgstr "halo2 没有好的硬件加速"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:159
msgid "Ingonyama 的 icicle 挺好用的，有合作"
msgstr "Ingonyama 的 icicle 挺好用的，有合作"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:160
msgid "思路比较简单"
msgstr "思路比较简单"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:161
msgid "把常用的算子放到 GPU 中"
msgstr "把常用的算子放到 GPU 中"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:162
msgid "效果有 20 倍的提升"
msgstr "效果有 20 倍的提升"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:163
msgid "Cecilia 也在实现 low level 的 gpu 加速 的 api"
msgstr "Cecilia 也在实现 low level 的 gpu 加速 的 api"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:165
msgid "Franci：ZKP coprocessor 和 the graph 和类似？"
msgstr "Franci：ZKP coprocessor 和 the graph 和类似？"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:166
msgid ""
"Dong \\- 大体上可以这样理解 \\- 但 the graph 安全性没有 ZKP coprocessor 高，"
"因为你要信任跑节点的一方"
msgstr ""
"Dong \\- 大体上可以这样理解 \\- 但 the graph 安全性没有 ZKP coprocessor 高，"
"因为你要信任跑节点的一方"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:170
msgid "0xhhh：ZKP coprocessor 有哪些 use case？"
msgstr "0xhhh：ZKP coprocessor 有哪些 use case？"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:172
msgid "AMM DEX"
msgstr "AMM DEX"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:173
msgid "问题"
msgstr "问题"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:174
msgid "从 LP staking 看不出来 LP 对 liquidity pool 的贡献"
msgstr "从 LP staking 看不出来 LP 对 liquidity pool 的贡献"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:175
msgid "因为只看 staking 的数量不准确"
msgstr "因为只看 staking 的数量不准确"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:176
msgid "好的 liquidity incentive design"
msgstr "好的 liquidity incentive design"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:177
msgid "回头看这一个月的情况去给奖励"
msgstr "回头看这一个月的情况去给奖励"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:178
msgid "对 pool 贡献多的才给激励"
msgstr "对 pool 贡献多的才给激励"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:179
msgid "游戏"
msgstr "游戏"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:180
msgid "传统的游戏除了内容之外，有两个支柱"
msgstr "传统的游戏除了内容之外，有两个支柱"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:181
msgid "买量（获取用户）"
msgstr "买量（获取用户）"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:182
msgid ""
"都是一锤子买卖，从广告商（youtube）买一个人，cost per install，安装一个就付钱"
"就完了，不能再继续结合后续用户参与游戏的情况来做更多的收益分成和合作"
msgstr ""
"都是一锤子买卖，从广告商（youtube）买一个人，cost per install，安装一个就付钱"
"就完了，不能再继续结合后续用户参与游戏的情况来做更多的收益分成和合作"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:183
msgid "通过 coprocessor 可以改变这个单次博弈的状态"
msgstr "通过 coprocessor 可以改变这个单次博弈的状态"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:184
msgid "运营"
msgstr "运营"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:185
msgid "弹窗问用户是否买 token 或者皮肤"
msgstr "弹窗问用户是否买 token 或者皮肤"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:186
msgid "游戏体验是根据用户的历史交互决定的"
msgstr "游戏体验是根据用户的历史交互决定的"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:187
msgid "它们是数据驱动的"
msgstr "它们是数据驱动的"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:188
msgid "ZKP coprocessor 是可以解决这个问题的"
msgstr "ZKP coprocessor 是可以解决这个问题的"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:189
msgid "可以提供给游戏用户定制化的体验"
msgstr "可以提供给游戏用户定制化的体验"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:190
msgid "Social & Identity"
msgstr "Social & Identity"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:191
msgid "根据用户在一个链上的 social 历史数据作为另外一个链上用户的身份证明"
msgstr "根据用户在一个链上的 social 历史数据作为另外一个链上用户的身份证明"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:192
msgid ""
"广泛的说，如果需要用到非同步计算，并且计算量比较大，都可以放到 coprocessor 里"
"面做"
msgstr ""
"广泛的说，如果需要用到非同步计算，并且计算量比较大，都可以放到 coprocessor 里"
"面做"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:194
msgid "Dong：如何让开发者基于 ZKP coprocessor 开发"
msgstr "Dong：如何让开发者基于 ZKP coprocessor 开发"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:195
msgid "让所有开发者都做电路的开发不太现实"
msgstr "让所有开发者都做电路的开发不太现实"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:196
msgid "如何解决这个问题，大家也有自己的方式"
msgstr "如何解决这个问题，大家也有自己的方式"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:197
msgid ""
"Brevis 采用的是 specialized circuit + lightweight VM 的模式。coprocessor 的基"
"底是很多的 specialized 的 circuit，比如 merkle tree 等"
msgstr ""
"Brevis 采用的是 specialized circuit + lightweight VM 的模式。coprocessor 的基"
"底是很多的 specialized 的 circuit，比如 merkle tree 等"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:198
msgid ""
"还有的是先做一个 use case，比如做 DEX trading volume 数据相关的 API，把这个场"
"景涉及到的功能封装成 API 一下给开发者用。好处是开发者用着比较方便，缺点是只适"
"用于这一个场景，其它的场景需要单独做"
msgstr ""
"还有的是先做一个 use case，比如做 DEX trading volume 数据相关的 API，把这个场"
"景涉及到的功能封装成 API 一下给开发者用。好处是开发者用着比较方便，缺点是只适"
"用于这一个场景，其它的场景需要单独做"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:200
msgid "ZKP coprocessor 和游戏"
msgstr "ZKP coprocessor 和游戏"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:201
msgid "Cecilia"
msgstr "Cecilia"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:202
msgid ""
"因为游戏的执行对 consensus 安全性的要求是 relax 的，其实不需要像 rollup 这么"
"频繁的提交状态，但是对 performance 的要求很高。对 performance 的这个执行环境"
"的需求肯定是要比 ZKEVM 要 profound 很多，可能需要用 rust 代码去写，可能甚至要"
"在 GPU 上面去跑。我觉得就是一个非常有意思的，可以 apply to ZKP coprocessor 的"
"场景"
msgstr ""
"因为游戏的执行对 consensus 安全性的要求是 relax 的，其实不需要像 rollup 这么"
"频繁的提交状态，但是对 performance 的要求很高。对 performance 的这个执行环境"
"的需求肯定是要比 ZKEVM 要 profound 很多，可能需要用 rust 代码去写，可能甚至要"
"在 GPU 上面去跑。我觉得就是一个非常有意思的，可以 apply to ZKP coprocessor 的"
"场景"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:204
msgid ""
"Dong 还有些方式解决 scalability 的问题，比如用 optimistic 的方式，先相信节点"
"的计算，如果有问题可以后面进行挑战，这种模式适用于有时间去做挑战的场景。"
msgstr ""
"Dong 还有些方式解决 scalability 的问题，比如用 optimistic 的方式，先相信节点"
"的计算，如果有问题可以后面进行挑战，这种模式适用于有时间去做挑战的场景。"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:207
msgid ""
"Cecilia 其实包括 rollup 也是这样的，你现在 Taiko 所选择的这个实现方式，我们现"
"在叫 contestable rollup，就是随机选块去生成 ZK 证明，而不是每一个块都去 ZK "
"它，然后有的块用 SGX 去证明，在整个这个 space 里面就是你要去相信或者不相信一"
"个 remote execution the result，这个完全是取决于你用什么样的机制去 secure "
"它，POW 还是 POS 还是 proof of ZK 这个东西完全是取决于实现。然后我觉得对于 "
"Gaming 来说，肯定是要牺牲更多的安全性和 trust 去换他的这个optimization。"
msgstr ""
"Cecilia 其实包括 rollup 也是这样的，你现在 Taiko 所选择的这个实现方式，我们现"
"在叫 contestable rollup，就是随机选块去生成 ZK 证明，而不是每一个块都去 ZK "
"它，然后有的块用 SGX 去证明，在整个这个 space 里面就是你要去相信或者不相信一"
"个 remote execution the result，这个完全是取决于你用什么样的机制去 secure "
"它，POW 还是 POS 还是 proof of ZK 这个东西完全是取决于实现。然后我觉得对于 "
"Gaming 来说，肯定是要牺牲更多的安全性和 trust 去换他的这个optimization。"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:211
msgid ""
"感觉现在整个以太坊就像一个都在朝着 coprocessor 去扩展，比如说就以太坊一直在"
"说 PBS，实际上本质上我觉得也算是一种 coprocessor，它算是 proposal 不需要去存"
"储整个区块链状态了，只有 builder 需要去存储整个区块链的状态，所以感觉我现在就"
"觉得好像整个以太坊都在 coprocessor Dong"
msgstr ""
"感觉现在整个以太坊就像一个都在朝着 coprocessor 去扩展，比如说就以太坊一直在"
"说 PBS，实际上本质上我觉得也算是一种 coprocessor，它算是 proposal 不需要去存"
"储整个区块链状态了，只有 builder 需要去存储整个区块链的状态，所以感觉我现在就"
"觉得好像整个以太坊都在 coprocessor Dong"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:213
msgid "好像是最近的思潮"
msgstr "好像是最近的思潮"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:214
msgid "都是问一个问题"
msgstr "都是问一个问题"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:215
msgid "到底什么东西要放在什么地方"
msgstr "到底什么东西要放在什么地方"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:216
msgid "什么计算放到以太坊上比较好"
msgstr "什么计算放到以太坊上比较好"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:217
msgid "通过功能的拆分，来做更好的状态和计算上的 scalability"
msgstr "通过功能的拆分，来做更好的状态和计算上的 scalability"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:218
msgid ""
"我觉得可能是这个 rollup 的大的这个蓝图已经确立了之后，大家在思考如何再进一"
"步，在已有的这个蓝图里面，怎么去从不管是从系统层面还是从架构层面更好的去优化 "
"performance 和 scalability。我觉得可能是这个思潮驱动的。 0xhhh"
msgstr ""
"我觉得可能是这个 rollup 的大的这个蓝图已经确立了之后，大家在思考如何再进一"
"步，在已有的这个蓝图里面，怎么去从不管是从系统层面还是从架构层面更好的去优化 "
"performance 和 scalability。我觉得可能是这个思潮驱动的。 0xhhh"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:220
msgid ""
"我觉得确实应该说从 rollup 或者从一开始状态通道以来，其实整个区块链的发展方"
"向，因为很慢的结算网络意味着支持比较大的计算都只能靠 coprocessor 化，所以感觉"
"这是持续了很多年的思潮了，只不过今天可能真正给它定义成 coprocessor，大家对这"
"个方向有一个比较明确的共识，都在推动整个以太坊的整个 layer 1 协议往 "
"coprocessor 的方向去演变"
msgstr ""
"我觉得确实应该说从 rollup 或者从一开始状态通道以来，其实整个区块链的发展方"
"向，因为很慢的结算网络意味着支持比较大的计算都只能靠 coprocessor 化，所以感觉"
"这是持续了很多年的思潮了，只不过今天可能真正给它定义成 coprocessor，大家对这"
"个方向有一个比较明确的共识，都在推动整个以太坊的整个 layer 1 协议往 "
"coprocessor 的方向去演变"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:222
#: src/zkp-space/2023-10-22-zkp-coprocessor.md:224
msgid "ZKP bridge"
msgstr "ZKP bridge"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:225
msgid ""
"本质是 bridge 一个 block header，中间的 VM 没有什么必要，只需要一个 "
"aggregation 功能，把支持的各个链的 block header aggregate 就好了"
msgstr ""
"本质是 bridge 一个 block header，中间的 VM 没有什么必要，只需要一个 "
"aggregation 功能，把支持的各个链的 block header aggregate 就好了"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:226
msgid "开发不 scalable，需要针对每个链做一些特殊的定制方案"
msgstr "开发不 scalable，需要针对每个链做一些特殊的定制方案"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:227
msgid "开发的过程中发现了 coprocessor 的需求 Cecilia 补充关于 ZKP bridge"
msgstr "开发的过程中发现了 coprocessor 的需求 Cecilia 补充关于 ZKP bridge"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:229
msgid "假设要 bridge 一个以太坊的 block header"
msgstr "假设要 bridge 一个以太坊的 block header"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:230
msgid "public input：下一个区块的 block hash"
msgstr "public input：下一个区块的 block hash"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:231
msgid "advice：当前区块的 BLS signature"
msgstr "advice：当前区块的 BLS signature"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:232
msgid "aggregation：aggregate 所有的 signature"
msgstr "aggregation：aggregate 所有的 signature"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:233
msgid ""
"polyhedra 的 zkIBC 做出来了，是因为做了一套可以很快的 aggregate 以太坊 BLS "
"signature 的电路。和 zkevm 没有关系"
msgstr ""
"polyhedra 的 zkIBC 做出来了，是因为做了一套可以很快的 aggregate 以太坊 BLS "
"signature 的电路。和 zkevm 没有关系"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:234
msgid "跨链验证的是共识，不是执行"
msgstr "跨链验证的是共识，不是执行"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:236
msgid "Ingonyama"
msgstr "Ingonyama"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:238
msgid "性能和体验还是不错的"
msgstr "性能和体验还是不错的"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:239
msgid "实现了很多 curve Cecilia"
msgstr "实现了很多 curve Cecilia"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:241
msgid "用 GPU 封装算子这个事情很简单"
msgstr "用 GPU 封装算子这个事情很简单"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:242
msgid "很多从矿场出来的团队都已经积累的相关的技术"
msgstr "很多从矿场出来的团队都已经积累的相关的技术"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:243
msgid "但为什么大家都选择了 Ingonyama？ Dong"
msgstr "但为什么大家都选择了 Ingonyama？ Dong"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:245
msgid "因为 Ingonyama 是开源的，代码采用了 MIT 协议"
msgstr "因为 Ingonyama 是开源的，代码采用了 MIT 协议"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:247
msgid "参考"
msgstr "参考"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:248
msgid "提到的一些zk项目和团队list："
msgstr "提到的一些zk项目和团队list："

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:249
msgid "[https://brevis.network/](https://brevis.network/)"
msgstr "[https://brevis.network/](https://brevis.network/)"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:250
msgid "[https://taiko.xyz/](https://taiko.xyz/)"
msgstr "[https://taiko.xyz/](https://taiko.xyz/)"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:251
msgid "[https://www.axiom.xyz/](https://www.axiom.xyz/)"
msgstr "[https://www.axiom.xyz/](https://www.axiom.xyz/)"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:252
msgid "[https://www.risczero.com/](https://www.risczero.com/)"
msgstr "[https://www.risczero.com/](https://www.risczero.com/)"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:253
msgid "[https://delphinuslab.com/zk-wasm/](https://delphinuslab.com/zk-wasm/)"
msgstr "[https://delphinuslab.com/zk-wasm/](https://delphinuslab.com/zk-wasm/)"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:254
msgid "[https://www.moduluslabs.xyz/](https://www.moduluslabs.xyz/)"
msgstr "[https://www.moduluslabs.xyz/](https://www.moduluslabs.xyz/)"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:255
msgid "[https://lurk-lang.org/](https://lurk-lang.org/)"
msgstr "[https://lurk-lang.org/](https://lurk-lang.org/)"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:256
msgid "[https://www.ingonyama.com/](https://www.ingonyama.com/)"
msgstr "[https://www.ingonyama.com/](https://www.ingonyama.com/)"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:257
msgid "[https://manta.network/](https://manta.network/)"
msgstr "[https://manta.network/](https://manta.network/)"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:258
msgid "[https://zkbridge.com/](https://zkbridge.com/)"
msgstr "[https://zkbridge.com/](https://zkbridge.com/)"

#: src/zkp-space/2023-10-22-zkp-coprocessor.md:260
msgid "感谢 Kurt 对部分内容的贡献"
msgstr "感谢 Kurt 对部分内容的贡献"
